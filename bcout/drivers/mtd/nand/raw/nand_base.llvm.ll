; ModuleID = '../bcout/drivers/mtd/nand/raw/nand_base.llvm.bc'
source_filename = "drivers/mtd/nand/raw/nand_base.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64"

%struct.mtd_info = type { i8, i32, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i32, %struct.mtd_ooblayout_ops*, %struct.mtd_pairing_scheme*, i32, i32, i32, %struct.mtd_erase_region_info*, i32 (%struct.mtd_info*, %struct.erase_info*)*, i32 (%struct.mtd_info*, i64, i64, i64*, i8**, i64*)*, i32 (%struct.mtd_info*, i64, i64)*, i32 (%struct.mtd_info*, i64, i64, i64*, i8*)*, i32 (%struct.mtd_info*, i64, i64, i64*, i8*)*, i32 (%struct.mtd_info*, i64, i64, i64*, i8*)*, i32 (%struct.mtd_info*, i64, %struct.mtd_oob_ops*)*, i32 (%struct.mtd_info*, i64, %struct.mtd_oob_ops*)*, i32 (%struct.mtd_info*, i64, i64*, %struct.otp_info*)*, i32 (%struct.mtd_info*, i64, i64, i64*, i8*)*, i32 (%struct.mtd_info*, i64, i64*, %struct.otp_info*)*, i32 (%struct.mtd_info*, i64, i64, i64*, i8*)*, i32 (%struct.mtd_info*, i64, i64, i64*, i8*)*, i32 (%struct.mtd_info*, i64, i64)*, i32 (%struct.mtd_info*, %struct.kvec*, i64, i64, i64*)*, void (%struct.mtd_info*)*, i32 (%struct.mtd_info*, i64, i64)*, i32 (%struct.mtd_info*, i64, i64)*, i32 (%struct.mtd_info*, i64, i64)*, i32 (%struct.mtd_info*, i64)*, i32 (%struct.mtd_info*, i64)*, i32 (%struct.mtd_info*, i64)*, i32 (%struct.mtd_info*, i64, i64)*, i32 (%struct.mtd_info*)*, void (%struct.mtd_info*)*, void (%struct.mtd_info*)*, i32 (%struct.mtd_info*)*, void (%struct.mtd_info*)*, i8, %struct.notifier_block, %struct.mtd_ecc_stats, i32, i8*, %struct.module*, %struct.device, i32, %struct.mtd_debug_info, %struct.nvmem_device*, %struct.mtd_info*, %struct.list_head, %union.anon.68 }
%struct.mtd_ooblayout_ops = type { i32 (%struct.mtd_info*, i32, %struct.mtd_oob_region*)*, i32 (%struct.mtd_info*, i32, %struct.mtd_oob_region*)* }
%struct.mtd_oob_region = type { i32, i32 }
%struct.mtd_pairing_scheme = type { i32, {}*, i32 (%struct.mtd_info*, %struct.mtd_pairing_info*)* }
%struct.mtd_erase_region_info = type { i64, i32, i32, i64* }
%struct.erase_info = type { i64, i64, i64 }
%struct.mtd_oob_ops = type { i32, i64, i64, i64, i64, i32, i8*, i8* }
%struct.otp_info = type { i32, i32, i32 }
%struct.kvec = type { i8*, i64 }
%struct.notifier_block = type { i32 (%struct.notifier_block*, i64, i8*)*, %struct.notifier_block*, i32 }
%struct.mtd_ecc_stats = type { i32, i32, i32, i32 }
%struct.module = type opaque
%struct.device = type { %struct.kobject, %struct.device*, %struct.device_private*, i8*, %struct.device_type*, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.mutex, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, %struct.dma_map_ops*, i64*, i64, i64, %struct.bus_dma_region*, %struct.device_dma_parameters*, %struct.list_head, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.dev_iommu*, i8 }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [64 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.attribute_group**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)*, void (%struct.kobject*, %struct.kuid_t*, %struct.kgid_t*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kuid_t = type { i32 }
%struct.kgid_t = type { i32 }
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon.67, i8*, i64, i16, i16, %struct.kernfs_iattrs* }
%struct.atomic_t = type { i32 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%union.anon.67 = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.poll_table_struct*)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.file = type { %union.anon, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, %struct.list_head, %struct.list_head, %struct.address_space*, i32, i32 }
%union.anon = type { %struct.callback_head }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount_spinlock, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.65, %struct.list_head, %struct.list_head, %union.anon.66 }
%struct.seqcount_spinlock = type { %struct.seqcount }
%struct.seqcount = type { i32 }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.0, i8* }
%union.anon.0 = type { i64 }
%struct.lockref = type { %union.anon.63 }
%union.anon.63 = type { %struct.anon.64 }
%struct.anon.64 = type { %struct.spinlock, i32 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, %struct.xattr_handler**, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, i8*, i32, i64, i64, i32, %struct.fsnotify_mark_connector*, [32 x i8], %struct.uuid_t, i32, i32, %struct.mutex, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, %struct.atomic64_t, i32, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head }
%struct.file_system_type = type { i8*, i32, i32 (%struct.fs_context*)*, %struct.fs_parameter_spec*, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.fs_context = type opaque
%struct.fs_parameter_spec = type opaque
%struct.lock_class_key = type {}
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.page = type { i64, %union.anon.1, %union.anon.55, %struct.atomic_t, [8 x i8] }
%union.anon.1 = type { %struct.anon.2 }
%struct.anon.2 = type { %struct.list_head, %struct.address_space*, i64, i64 }
%union.anon.55 = type { %struct.atomic_t }
%struct.shrink_control = type { i32, i32, i64, i64, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.inode*, i64*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.spinlock, %struct.atomic_t, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.kqid = type { %union.anon.56, i32 }
%union.anon.56 = type { %struct.kuid_t }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.atomic64_t, %struct.raw_spinlock, %struct.list_head }
%struct.raw_spinlock = type { %struct.arch_spinlock_t }
%struct.arch_spinlock_t = type {}
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type opaque
%struct.backing_dev_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.rw_semaphore, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rcuwait, %struct.wait_queue_head, %struct.atomic_t }
%struct.rcu_sync = type { i32, i32, %struct.wait_queue_head, %struct.callback_head }
%struct.rcuwait = type { %struct.task_struct* }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.refcount_struct, i32, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.sched_dl_entity, i32, i32, %struct.cpumask*, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, i64, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.pid*, [4 x %struct.hlist_node], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.posix_cputimers, %struct.posix_cputimers_work, %struct.cred*, %struct.cred*, %struct.cred*, %struct.key*, [16 x i8], %struct.nameidata*, %struct.fs_struct*, %struct.files_struct*, %struct.io_uring_task*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.seccomp, i64, i64, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root_cached, %struct.task_struct*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, %struct.capture_control*, i64, %struct.kernel_siginfo*, %struct.task_io_accounting, %struct.robust_list_head*, %struct.list_head, %struct.futex_pi_state*, %struct.mutex, i32, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.rseq*, i32, i64, %struct.tlbflush_unmap_batch, %union.anon.48, %struct.pipe_inode_info*, %struct.page_frag, i32, i32, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.refcount_struct, i8*, i64, i64, i64, %struct.callback_head, [24 x i8], %struct.thread_struct }
%struct.thread_info = type { i64, i32 }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics }
%struct.load_weight = type { i64, i32 }
%struct.sched_statistics = type {}
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i64, i32, i8, %struct.hrtimer, %struct.hrtimer, %struct.sched_dl_entity* }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.seqcount_raw_spinlock, %struct.hrtimer*, %struct.timerqueue_head, i64 ()*, i64 }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, i32, i8, i64, %struct.hrtimer*, i64, %struct.hrtimer*, [16 x i8], [8 x %struct.hrtimer_clock_base] }
%struct.seqcount_raw_spinlock = type { %struct.seqcount }
%struct.timerqueue_head = type { %struct.rb_root_cached }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type {}
%struct.mm_struct = type { %struct.anon.18, [0 x i64] }
%struct.anon.18 = type { %struct.vm_area_struct*, %struct.rb_root, i64, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, %struct.atomic64_t, i64, i64, i64, i64, %struct.spinlock, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_subscriptions*, %struct.atomic_t, i8, %struct.uprobes_state, %struct.work_struct, i32 }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.19, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.atomic64_t, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.19 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.rb_root = type { %struct.rb_node* }
%struct.pgd_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i64, %struct.atomic64_t, %struct.rw_semaphore, %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type { i8*, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.swait_queue_head }
%struct.swait_queue_head = type { %struct.raw_spinlock, %struct.list_head }
%struct.kioctx_table = type opaque
%struct.mmu_notifier_subscriptions = type opaque
%struct.uprobes_state = type {}
%struct.vmacache = type { i64, [4 x %struct.vm_area_struct*] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.20 }
%union.anon.20 = type { %struct.anon.21 }
%struct.anon.21 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid = type { %struct.refcount_struct, i32, %struct.spinlock, [4 x %struct.hlist_head], %struct.hlist_head, %struct.wait_queue_head, %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace* }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.posix_cputimers = type { [3 x %struct.posix_cputimer_base], i32, i32 }
%struct.posix_cputimer_base = type { i64, %struct.timerqueue_head }
%struct.posix_cputimers_work = type { %struct.callback_head, i32 }
%struct.key = type { %struct.refcount_struct, i32, %union.anon.25, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.26, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i16, i64, %union.anon.27, %union.anon.31, %struct.key_restriction* }
%union.anon.25 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.26 = type { i64 }
%union.anon.27 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { i64, %union.anon.28, %struct.key_type*, %struct.key_tag*, i8* }
%union.anon.28 = type { i64 }
%struct.key_type = type opaque
%struct.key_tag = type { %struct.callback_head, %struct.refcount_struct, i8 }
%union.anon.31 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.key_restriction = type { i32 (%struct.key*, %struct.key_type*, %union.key_payload*, %struct.key*)*, %struct.key*, %struct.key_type* }
%struct.nameidata = type opaque
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.io_uring_task = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type { %struct.refcount_struct, %struct.atomic_t, i32, %struct.list_head, %struct.wait_queue_head, %struct.task_struct*, %struct.sigpending, %struct.hlist_head, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, i64, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.posix_cputimers, [4 x %struct.pid*], %struct.pid*, i32, %struct.tty_struct*, %struct.seqlock_t, i64, i64, i64, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], i8, i16, i16, %struct.mm_struct*, %struct.mutex, %struct.mutex }
%struct.cpu_itimer = type { i64, i64 }
%struct.thread_group_cputimer = type { %struct.task_cputime_atomic }
%struct.task_cputime_atomic = type { %struct.atomic64_t, %struct.atomic64_t, %struct.atomic64_t }
%struct.tty_struct = type opaque
%struct.seqlock_t = type { %struct.seqcount_spinlock, %struct.spinlock }
%struct.rlimit = type { i64, i64 }
%struct.sighand_struct = type { %struct.spinlock, %struct.refcount_struct, %struct.wait_queue_head, [64 x %struct.k_sigaction] }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.seccomp = type { i32, %struct.atomic_t, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root_cached = type { %struct.rb_root, %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.io_context = type { %struct.atomic64_t, %struct.atomic_t, %struct.atomic_t, %struct.spinlock, i16, %struct.xarray, %struct.io_cq*, %struct.hlist_head, %struct.work_struct }
%struct.xarray = type { %struct.spinlock, i32, i8* }
%struct.io_cq = type { %struct.request_queue*, %struct.io_context*, %union.anon.34, %union.anon.35, i32 }
%struct.request_queue = type opaque
%union.anon.34 = type { %struct.list_head }
%union.anon.35 = type { %struct.hlist_node }
%struct.capture_control = type opaque
%struct.kernel_siginfo = type { %struct.anon.36 }
%struct.anon.36 = type { i32, i32, i32, %union.__sifields }
%union.__sifields = type { %struct.anon.40 }
%struct.anon.40 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type {}
%struct.robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.rseq = type { i32, i32, %union.anon.47, i32, [12 x i8] }
%union.anon.47 = type { i64 }
%struct.tlbflush_unmap_batch = type { %struct.arch_tlbflush_unmap_batch, i8, i8 }
%struct.arch_tlbflush_unmap_batch = type { %struct.cpumask }
%union.anon.48 = type { %struct.callback_head }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.vm_struct = type { %struct.vm_struct*, i8*, i64, i64, %struct.page**, i32, i64, i8* }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.io_bitmap*, i64, i8, [47 x i8], %struct.fpu }
%struct.desc_struct = type { i16, i16, i32 }
%struct.perf_event = type opaque
%struct.io_bitmap = type opaque
%struct.fpu = type { i32, i64, [48 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.49, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.52 }
%union.anon.49 = type { %struct.anon.50 }
%struct.anon.50 = type { i64, i64 }
%union.anon.52 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.fsnotify_mark_connector = type opaque
%struct.uuid_t = type { [16 x i8] }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i64, i32, i32, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.user_namespace = type opaque
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, i64 }
%struct.list_lru_one = type { %struct.list_head, i64 }
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%union.anon.65 = type { %struct.list_head }
%union.anon.66 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i64, %union.anon.57, i32, i64, %struct.timespec64, %struct.timespec64, %struct.timespec64, %struct.spinlock, i16, i8, i8, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.58, %struct.atomic64_t, %struct.atomic64_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %union.anon.59, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.62, i32, i32, %struct.fsnotify_mark_connector*, i8* }
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec64*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.posix_acl = type opaque
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec64, %struct.timespec64, %struct.timespec64, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec64, %struct.timespec64, %struct.timespec64, %struct.timespec64, i64, i64 }
%struct.fiemap_extent_info = type opaque
%union.anon.57 = type { i32 }
%struct.timespec64 = type { i64, i64 }
%union.anon.58 = type { %struct.callback_head }
%union.anon.59 = type { %struct.file_operations* }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.xarray, i32, %struct.atomic_t, %struct.rb_root_cached, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, i32, %struct.spinlock, %struct.list_head, i8* }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, void (%struct.readahead_control*)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.readahead_control = type opaque
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32, i16, i16, %union.anon.4 }
%union.anon.4 = type { %struct.wait_page_queue* }
%struct.wait_page_queue = type opaque
%struct.iov_iter = type { i32, i64, i64, %union.anon.5, %union.anon.6 }
%union.anon.5 = type { %struct.iovec* }
%struct.iovec = type { i8*, i64 }
%union.anon.6 = type { i64 }
%struct.swap_info_struct = type opaque
%union.anon.62 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.kiocb*, i1)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i64, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, i64, i32)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type opaque
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, %struct.list_head, i8*, i32, i8, i32, i32, %struct.wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.60 }
%struct.fasync_struct = type { %struct.rwlock_t, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.rwlock_t = type { %struct.arch_rwlock_t }
%struct.arch_rwlock_t = type {}
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)*, i1 (%struct.file_lock*)* }
%union.anon.60 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.atomic64_t = type { i64 }
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %union.anon.33 }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.user_struct = type { %struct.refcount_struct, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.atomic64_t, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t, %struct.ratelimit_state }
%struct.ratelimit_state = type { %struct.raw_spinlock, i32, i32, i32, i32, i64, i64 }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%union.anon.33 = type { %struct.callback_head }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.seq_file = type opaque
%struct.vm_operations_struct = type { void (%struct.vm_area_struct*)*, void (%struct.vm_area_struct*)*, i32 (%struct.vm_area_struct*, i64)*, i32 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*, i32)*, void (%struct.vm_fault*, i64, i64)*, i64 (%struct.vm_area_struct*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_fault*)*, i32 (%struct.vm_area_struct*, i64, i8*, i32, i32)*, i8* (%struct.vm_area_struct*)*, %struct.page* (%struct.vm_area_struct*, i64)* }
%struct.vm_fault = type { %struct.vm_area_struct*, i32, i32, i64, i64, %struct.pmd_t*, %struct.pud_t*, %struct.pte_t, %struct.page*, %struct.page*, %struct.pte_t*, %struct.spinlock*, %struct.page* }
%struct.pmd_t = type { i64 }
%struct.pud_t = type { i64 }
%struct.pte_t = type { i64 }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key, i8 }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.attribute_group**, %struct.dev_pm_ops*, void (%struct.device*)*, %struct.driver_private* }
%struct.of_device_id = type { [32 x i8], [32 x i8], [128 x i8], i8* }
%struct.acpi_device_id = type { [9 x i8], i64, i32, i32 }
%struct.driver_private = type opaque
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.list_head }
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i8, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, i32, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.hrtimer, i64, %struct.work_struct, %struct.wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, i32, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.device*, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (%struct.timer_list*)*, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head, %struct.pm_domain_data* }
%struct.pm_domain_data = type opaque
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, i32 (%struct.device*)*, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type opaque
%struct.bus_dma_region = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dev_archdata = type {}
%struct.device_node = type { i8*, i32, i8*, %struct.fwnode_handle, %struct.property*, %struct.property*, %struct.device_node*, %struct.device_node*, %struct.device_node*, %struct.kobject, i64, i8* }
%struct.fwnode_handle = type { %struct.fwnode_handle*, %struct.fwnode_operations*, %struct.device* }
%struct.fwnode_operations = type { %struct.fwnode_handle* (%struct.fwnode_handle*)*, void (%struct.fwnode_handle*)*, i1 (%struct.fwnode_handle*)*, i8* (%struct.fwnode_handle*, %struct.device*)*, i1 (%struct.fwnode_handle*, i8*)*, i32 (%struct.fwnode_handle*, i8*, i32, i8*, i64)*, i32 (%struct.fwnode_handle*, i8*, i8**, i64)*, i8* (%struct.fwnode_handle*)*, i8* (%struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*, %struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*, i8*)*, i32 (%struct.fwnode_handle*, i8*, i8*, i32, i32, %struct.fwnode_reference_args*)*, %struct.fwnode_handle* (%struct.fwnode_handle*, %struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*)*, i32 (%struct.fwnode_handle*, %struct.fwnode_endpoint*)*, i32 (%struct.fwnode_handle*, %struct.device*)* }
%struct.fwnode_reference_args = type { %struct.fwnode_handle*, i32, [8 x i64] }
%struct.fwnode_endpoint = type { i32, i32, %struct.fwnode_handle* }
%struct.property = type { i8*, i32, i8*, %struct.property*, %struct.bin_attribute }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.spinlock = type { %union.anon.3 }
%union.anon.3 = type { %struct.raw_spinlock }
%struct.class = type { i8*, %struct.module*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, void (%struct.device*, %struct.kuid_t*, %struct.kgid_t*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.iommu_group = type opaque
%struct.dev_iommu = type opaque
%struct.mtd_debug_info = type { %struct.dentry*, i8*, i8* }
%struct.nvmem_device = type opaque
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%union.anon.68 = type { %struct.mtd_part }
%struct.mtd_part = type { %struct.list_head, i64, i64, i32 }
%struct.mtd_pairing_info = type { i32, i32 }
%struct.nand_flash_dev = type { i8*, %union.anon.76, i32, i32, i32, i32, i16, i16, %struct.anon.78 }
%union.anon.76 = type { [8 x i8] }
%struct.anon.78 = type { i16, i16 }
%struct.nand_ops = type { i32 (%struct.nand_device*, %struct.nand_pos*)*, i32 (%struct.nand_device*, %struct.nand_pos*)*, i1 (%struct.nand_device*, %struct.nand_pos*)* }
%struct.nand_device = type { %struct.mtd_info, %struct.nand_memory_organization, %struct.nand_ecc, %struct.nand_row_converter, %struct.nand_bbt, %struct.nand_ops* }
%struct.nand_memory_organization = type { i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.nand_ecc = type { %struct.nand_ecc_props, %struct.nand_ecc_props, %struct.nand_ecc_props, %struct.nand_ecc_context, %struct.nand_ecc_engine*, %struct.nand_ecc_engine* }
%struct.nand_ecc_props = type { i32, i32, i32, i32, i32, i32 }
%struct.nand_ecc_context = type { %struct.nand_ecc_props, i32, i8* }
%struct.nand_ecc_engine = type { %struct.nand_ecc_engine_ops* }
%struct.nand_ecc_engine_ops = type { i32 (%struct.nand_device*)*, void (%struct.nand_device*)*, i32 (%struct.nand_device*, %struct.nand_page_io_req*)*, i32 (%struct.nand_device*, %struct.nand_page_io_req*)* }
%struct.nand_page_io_req = type { i32, %struct.nand_pos, i32, i32, %union.anon.69, i32, i32, %union.anon.70, i32 }
%struct.nand_pos = type { i32, i32, i32, i32, i32 }
%union.anon.69 = type { i8* }
%union.anon.70 = type { i8* }
%struct.nand_row_converter = type { i32, i32 }
%struct.nand_bbt = type { i64* }
%struct.kmem_cache = type opaque
%struct.nand_chip = type { %struct.nand_device, %struct.nand_id, %struct.nand_parameters, %struct.nand_manufacturer, %struct.nand_chip_ops, %struct.nand_legacy, i32, %struct.nand_interface_config*, %struct.nand_interface_config*, i32, i32, i32, i32, %struct.nand_bbt_descr*, %struct.nand_bbt_descr*, %struct.nand_bbt_descr*, i8*, i32, i32, i32, i32, i32, i8*, i8*, %struct.anon.74, i64, %struct.mutex, i8, i32, i32, %struct.nand_controller*, %struct.nand_ecc_ctrl, i8* }
%struct.nand_id = type { [8 x i8], i32 }
%struct.nand_parameters = type { i8*, i8, [4 x i64], [4 x i64], %struct.onfi_params* }
%struct.onfi_params = type { i32, i16, i16, i16, i16, i16, i16, [88 x i8] }
%struct.nand_manufacturer = type { %struct.nand_manufacturer_desc*, i8* }
%struct.nand_manufacturer_desc = type { i32, i8*, %struct.nand_manufacturer_ops* }
%struct.nand_manufacturer_ops = type { void (%struct.nand_chip*)*, i32 (%struct.nand_chip*)*, void (%struct.nand_chip*)*, void (%struct.nand_chip*, %struct.nand_onfi_params*)* }
%struct.nand_onfi_params = type <{ [4 x i8], i16, i16, i16, [2 x i8], i16, i8, [17 x i8], [12 x i8], [20 x i8], i8, i16, [13 x i8], i32, i16, i32, i16, i32, i32, i8, i8, i8, i16, i16, i8, i16, i8, i8, i8, i8, i8, [13 x i8], i8, i16, i16, i16, i16, i16, i16, i16, i8, i16, i16, i16, i8, i8, i16, i16, [8 x i8], i16, [88 x i8], i16 }>
%struct.nand_chip_ops = type { i32 (%struct.nand_chip*)*, void (%struct.nand_chip*)*, i32 (%struct.nand_chip*, i64, i64)*, i32 (%struct.nand_chip*, i64, i64)*, i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, %struct.nand_interface_config*)* }
%struct.nand_legacy = type { i8*, i8*, void (%struct.nand_chip*, i32)*, i8 (%struct.nand_chip*)*, void (%struct.nand_chip*, i8)*, void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)*, i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*, i64)*, i32 (%struct.nand_chip*, i64)*, i32 (%struct.nand_chip*, i32, i8*)*, i32 (%struct.nand_chip*, i32, i8*)*, i32, %struct.nand_controller }
%struct.nand_controller = type { %struct.mutex, %struct.nand_controller_ops* }
%struct.nand_controller_ops = type { i32 (%struct.nand_chip*)*, void (%struct.nand_chip*)*, i32 (%struct.nand_chip*, %struct.nand_operation*, i1)*, i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)* }
%struct.nand_operation = type { i32, %struct.nand_op_instr*, i32 }
%struct.nand_op_instr = type { i32, %union.anon.72, i32 }
%union.anon.72 = type { %struct.nand_op_data_instr }
%struct.nand_op_data_instr = type { i32, %union.anon.73, i8 }
%union.anon.73 = type { i8* }
%struct.nand_interface_config = type { i32, %struct.nand_timings }
%struct.nand_timings = type { i32, %union.anon.71 }
%union.anon.71 = type { %struct.nand_sdr_timings }
%struct.nand_sdr_timings = type { i64, i32, i64, i64, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i64, i32, i32, i32, i32, i32, i32 }
%struct.nand_bbt_descr = type { i32, [8 x i32], i32, i32, [8 x i8], i32, i32, i32, i8* }
%struct.anon.74 = type { i32, i32 }
%struct.nand_ecc_ctrl = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8*, void (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i32, i32, i8*, i32)*, i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)* }
%struct.nand_op_cmd_instr = type { i8 }
%struct.gpio_desc = type opaque
%struct.nand_op_addr_instr = type { i32, i8* }
%struct.nand_op_waitrdy_instr = type { i32 }
%struct.nand_op_parser = type { %struct.nand_op_parser_pattern*, i32 }
%struct.nand_op_parser_pattern = type { %struct.nand_op_parser_pattern_elem*, i32, i32 (%struct.nand_chip*, %struct.nand_subop*)* }
%struct.nand_op_parser_pattern_elem = type { i32, i8, %union.anon.75 }
%union.anon.75 = type { %struct.nand_op_parser_addr_constraints }
%struct.nand_op_parser_addr_constraints = type { i32 }
%struct.nand_subop = type { i32, %struct.nand_op_instr*, i32, i32, i32 }
%struct.nand_op_parser_ctx = type { %struct.nand_op_instr*, i32, %struct.nand_subop }
%struct.nand_ecc_caps = type { %struct.nand_ecc_step_info*, i32, i32 (i32, i32)* }
%struct.nand_ecc_step_info = type { i32, i32*, i32 }
%struct.nand_bch_control = type opaque
%struct.nand_op_parser_data_constraints = type { i32 }
%struct.anon.77 = type { i8, i8 }

@dist3_pairing_scheme = dso_local constant { i32, i32 (%struct.mtd_info*, i32, %struct.mtd_pairing_info*)*, i32 (%struct.mtd_info*, %struct.mtd_pairing_info*)* } { i32 2, i32 (%struct.mtd_info*, i32, %struct.mtd_pairing_info*)* @nand_pairing_dist3_get_info, i32 (%struct.mtd_info*, %struct.mtd_pairing_info*)* @nand_pairing_dist3_get_wunit }, align 8, !dbg !0
@.str = private unnamed_addr constant [33 x i8] c"drivers/mtd/nand/raw/nand_base.c\00", align 1
@jiffies = external dso_local global i64, align 8
@.str.1 = private unnamed_addr constant [57 x i8] c"\014nand: %s: attempt to erase a bad block at page 0x%08x\0A\00", align 1
@__func__.nand_erase_nand = private unnamed_addr constant [16 x i8] c"nand_erase_nand\00", align 1
@__UNIQUE_ID_file309 = internal constant [36 x i8] c"nand.file=drivers/mtd/nand/raw/nand\00", section ".modinfo", align 1, !dbg !4572
@__UNIQUE_ID_license310 = internal constant [17 x i8] c"nand.license=GPL\00", section ".modinfo", align 1, !dbg !4577
@__UNIQUE_ID_author311 = internal constant [55 x i8] c"nand.author=Steven J. Hill <sjhill@realitydiluted.com>\00", section ".modinfo", align 1, !dbg !4580
@__UNIQUE_ID_author312 = internal constant [49 x i8] c"nand.author=Thomas Gleixner <tglx@linutronix.de>\00", section ".modinfo", align 1, !dbg !4585
@__UNIQUE_ID_description313 = internal constant [48 x i8] c"nand.description=Generic NAND flash driver code\00", section ".modinfo", align 1, !dbg !4590
@.str.2 = private unnamed_addr constant [33 x i8] c"drivers/mtd/nand/raw/internals.h\00", align 1
@.str.3 = private unnamed_addr constant [65 x i8] c"\013nand: Failed to configure data interface to SDR timing mode 0\0A\00", align 1
@.str.4 = private unnamed_addr constant [58 x i8] c"\014nand: timing mode %d not acknowledged by the NAND chip\0A\00", align 1
@.str.5 = private unnamed_addr constant [60 x i8] c"\013nand: ECC (step, strength) = (%d, %d) does not fit in OOB\00", align 1
@.str.6 = private unnamed_addr constant [73 x i8] c"\013nand: ECC (step, strength) = (%d, %d) not supported on this controller\00", align 1
@nand_scan_ident.__key = internal global %struct.lock_class_key zeroinitializer, align 1, !dbg !4595
@.str.7 = private unnamed_addr constant [12 x i8] c"&chip->lock\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"\014nand: No NAND device found\0A\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"\016nand: %d chips detected\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"nand-is-boot-medium\00", align 1
@.str.11 = private unnamed_addr constant [15 x i8] c"nand-bus-width\00", align 1
@.str.12 = private unnamed_addr constant [18 x i8] c"nand-on-flash-bbt\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"none\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"soft\00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"soft_bch\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"hw\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"hw_syndrome\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"on-die\00", align 1
@.str.19 = private unnamed_addr constant [14 x i8] c"nand-ecc-mode\00", align 1
@nand_controller_init.__key = internal global %struct.lock_class_key zeroinitializer, align 1, !dbg !4625
@.str.20 = private unnamed_addr constant [11 x i8] c"&nfc->lock\00", align 1
@.str.21 = private unnamed_addr constant [66 x i8] c"\016nand: second ID read did not match %02x,%02x against %02x,%02x\0A\00", align 1
@nand_flash_ids = external dso_local global [0 x %struct.nand_flash_dev], align 8
@.str.22 = private unnamed_addr constant [64 x i8] c"\016nand: device found, Manufacturer ID: 0x%02x, Chip ID: 0x%02x\0A\00", align 1
@.str.23 = private unnamed_addr constant [15 x i8] c"\016nand: %s %s\0A\00", align 1
@.str.24 = private unnamed_addr constant [41 x i8] c"\014nand: bus width %d instead of %d bits\0A\00", align 1
@.str.25 = private unnamed_addr constant [69 x i8] c"\016nand: %d MiB, %s, erase size: %d KiB, page size: %d, OOB size: %d\0A\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"SLC\00", align 1
@.str.27 = private unnamed_addr constant [4 x i8] c"MLC\00", align 1
@.str.28 = private unnamed_addr constant [8 x i8] c"Unknown\00", align 1
@.str.29 = private unnamed_addr constant [43 x i8] c"chip->bits_per_cell is used uninitialized\0A\00", align 1
@.str.30 = private unnamed_addr constant [28 x i8] c"include/linux/mtd/rawnand.h\00", align 1
@.str.31 = private unnamed_addr constant [38 x i8] c"No oob scheme defined for oobsize %d\0A\00", align 1
@.str.32 = private unnamed_addr constant [54 x i8] c"Driver must set ecc.strength when using hardware ECC\0A\00", align 1
@.str.33 = private unnamed_addr constant [78 x i8] c"\014nand: %d byte HW ECC not possible on %d byte page size, fallback to SW ECC\0A\00", align 1
@.str.34 = private unnamed_addr constant [52 x i8] c"No ECC functions supplied; on-die ECC not possible\0A\00", align 1
@.str.35 = private unnamed_addr constant [86 x i8] c"\014nand: NAND_ECC_ENGINE_TYPE_NONE selected by board driver. This is not recommended!\0A\00", align 1
@.str.36 = private unnamed_addr constant [26 x i8] c"Invalid NAND_ECC_MODE %d\0A\00", align 1
@.str.37 = private unnamed_addr constant [24 x i8] c"Invalid ECC parameters\0A\00", align 1
@.str.38 = private unnamed_addr constant [44 x i8] c"Total number of ECC bytes exceeded oobsize\0A\00", align 1
@.str.39 = private unnamed_addr constant [128 x i8] c"\014nand: WARNING: %s: the ECC used on your system (%db/%dB) is too weak compared to the one required by the NAND chip (%db/%dB)\0A\00", align 1
@rawnand_ops = internal constant %struct.nand_ops { i32 (%struct.nand_device*, %struct.nand_pos*)* @rawnand_erase, i32 (%struct.nand_device*, %struct.nand_pos*)* @rawnand_markbad, i1 (%struct.nand_device*, %struct.nand_pos*)* @rawnand_isbad }, align 8, !dbg !4630
@kmalloc_caches = external dso_local global [3 x [14 x %struct.kmem_cache*]], align 16
@.str.40 = private unnamed_addr constant [21 x i8] c"include/linux/slab.h\00", align 1
@.str.41 = private unnamed_addr constant [54 x i8] c"No ECC functions supplied; hardware ECC not possible\0A\00", align 1
@.str.42 = private unnamed_addr constant [39 x i8] c"\014nand: Invalid NAND_ECC_PLACEMENT %d\0A\00", align 1
@.str.43 = private unnamed_addr constant [40 x i8] c"CONFIG_MTD_NAND_ECC_SW_BCH not enabled\0A\00", align 1
@.str.44 = private unnamed_addr constant [63 x i8] c"OOB layout is required when using software BCH on small pages\0A\00", align 1
@.str.45 = private unnamed_addr constant [32 x i8] c"BCH ECC initialization failed!\0A\00", align 1
@.str.46 = private unnamed_addr constant [28 x i8] c"Unsupported ECC algorithm!\0A\00", align 1
@.str.47 = private unnamed_addr constant [52 x i8] c"\015nand: %s: attempt to write non page aligned data\0A\00", align 1
@__func__.nand_do_write_ops = private unnamed_addr constant [18 x i8] c"nand_do_write_ops\00", align 1
@.str.48 = private unnamed_addr constant [62 x i8] c"\013nand: %s called for a chip which is not in suspended state\0A\00", align 1
@__func__.nand_resume = private unnamed_addr constant [12 x i8] c"nand_resume\00", align 1
@llvm.used = appending global [5 x i8*] [i8* getelementptr inbounds ([36 x i8], [36 x i8]* @__UNIQUE_ID_file309, i32 0, i32 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @__UNIQUE_ID_license310, i32 0, i32 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @__UNIQUE_ID_author311, i32 0, i32 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @__UNIQUE_ID_author312, i32 0, i32 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @__UNIQUE_ID_description313, i32 0, i32 0)], section "llvm.metadata"

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_pairing_dist3_get_info(%struct.mtd_info* %mtd, i32 %page, %struct.mtd_pairing_info* %info) #0 !dbg !4637 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %page.addr = alloca i32, align 4
  %info.addr = alloca %struct.mtd_pairing_info*, align 8
  %lastpage = alloca i32, align 4
  %dist = alloca i32, align 4
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !4638, metadata !DIExpression()), !dbg !4639
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !4640, metadata !DIExpression()), !dbg !4641
  store %struct.mtd_pairing_info* %info, %struct.mtd_pairing_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_pairing_info** %info.addr, metadata !4642, metadata !DIExpression()), !dbg !4643
  call void @llvm.dbg.declare(metadata i32* %lastpage, metadata !4644, metadata !DIExpression()), !dbg !4645
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !4646
  %erasesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %0, i32 0, i32 3, !dbg !4647
  %1 = load i32, i32* %erasesize, align 8, !dbg !4647
  %2 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !4648
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %2, i32 0, i32 4, !dbg !4649
  %3 = load i32, i32* %writesize, align 4, !dbg !4649
  %div = udiv i32 %1, %3, !dbg !4650
  %sub = sub i32 %div, 1, !dbg !4651
  store i32 %sub, i32* %lastpage, align 4, !dbg !4645
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !4652, metadata !DIExpression()), !dbg !4653
  store i32 3, i32* %dist, align 4, !dbg !4653
  %4 = load i32, i32* %page.addr, align 4, !dbg !4654
  %5 = load i32, i32* %lastpage, align 4, !dbg !4656
  %cmp = icmp eq i32 %4, %5, !dbg !4657
  br i1 %cmp, label %if.then, label %if.end, !dbg !4658

if.then:                                          ; preds = %entry
  store i32 2, i32* %dist, align 4, !dbg !4659
  br label %if.end, !dbg !4660

if.end:                                           ; preds = %if.then, %entry
  %6 = load i32, i32* %page.addr, align 4, !dbg !4661
  %tobool = icmp ne i32 %6, 0, !dbg !4661
  br i1 %tobool, label %lor.lhs.false, label %if.then2, !dbg !4663

lor.lhs.false:                                    ; preds = %if.end
  %7 = load i32, i32* %page.addr, align 4, !dbg !4664
  %and = and i32 %7, 1, !dbg !4665
  %tobool1 = icmp ne i32 %and, 0, !dbg !4665
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !4666

if.then2:                                         ; preds = %lor.lhs.false, %if.end
  %8 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4667
  %group = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %8, i32 0, i32 1, !dbg !4669
  store i32 0, i32* %group, align 4, !dbg !4670
  %9 = load i32, i32* %page.addr, align 4, !dbg !4671
  %add = add i32 %9, 1, !dbg !4672
  %div3 = sdiv i32 %add, 2, !dbg !4673
  %10 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4674
  %pair = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %10, i32 0, i32 0, !dbg !4675
  store i32 %div3, i32* %pair, align 4, !dbg !4676
  br label %if.end9, !dbg !4677

if.else:                                          ; preds = %lor.lhs.false
  %11 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4678
  %group4 = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %11, i32 0, i32 1, !dbg !4680
  store i32 1, i32* %group4, align 4, !dbg !4681
  %12 = load i32, i32* %page.addr, align 4, !dbg !4682
  %add5 = add i32 %12, 1, !dbg !4683
  %13 = load i32, i32* %dist, align 4, !dbg !4684
  %sub6 = sub i32 %add5, %13, !dbg !4685
  %div7 = sdiv i32 %sub6, 2, !dbg !4686
  %14 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4687
  %pair8 = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %14, i32 0, i32 0, !dbg !4688
  store i32 %div7, i32* %pair8, align 4, !dbg !4689
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then2
  ret i32 0, !dbg !4690
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_pairing_dist3_get_wunit(%struct.mtd_info* %mtd, %struct.mtd_pairing_info* %info) #0 !dbg !4691 {
entry:
  %retval = alloca i32, align 4
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %info.addr = alloca %struct.mtd_pairing_info*, align 8
  %lastpair = alloca i32, align 4
  %page = alloca i32, align 4
  %dist = alloca i32, align 4
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !4692, metadata !DIExpression()), !dbg !4693
  store %struct.mtd_pairing_info* %info, %struct.mtd_pairing_info** %info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_pairing_info** %info.addr, metadata !4694, metadata !DIExpression()), !dbg !4695
  call void @llvm.dbg.declare(metadata i32* %lastpair, metadata !4696, metadata !DIExpression()), !dbg !4697
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !4698
  %erasesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %0, i32 0, i32 3, !dbg !4699
  %1 = load i32, i32* %erasesize, align 8, !dbg !4699
  %2 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !4700
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %2, i32 0, i32 4, !dbg !4701
  %3 = load i32, i32* %writesize, align 4, !dbg !4701
  %div = udiv i32 %1, %3, !dbg !4702
  %sub = sub i32 %div, 1, !dbg !4703
  %div1 = udiv i32 %sub, 2, !dbg !4704
  store i32 %div1, i32* %lastpair, align 4, !dbg !4697
  call void @llvm.dbg.declare(metadata i32* %page, metadata !4705, metadata !DIExpression()), !dbg !4706
  %4 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4707
  %pair = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %4, i32 0, i32 0, !dbg !4708
  %5 = load i32, i32* %pair, align 4, !dbg !4708
  %mul = mul i32 %5, 2, !dbg !4709
  store i32 %mul, i32* %page, align 4, !dbg !4706
  call void @llvm.dbg.declare(metadata i32* %dist, metadata !4710, metadata !DIExpression()), !dbg !4711
  store i32 3, i32* %dist, align 4, !dbg !4711
  %6 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4712
  %group = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %6, i32 0, i32 1, !dbg !4714
  %7 = load i32, i32* %group, align 4, !dbg !4714
  %tobool = icmp ne i32 %7, 0, !dbg !4712
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4715

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4716
  %pair2 = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %8, i32 0, i32 0, !dbg !4717
  %9 = load i32, i32* %pair2, align 4, !dbg !4717
  %tobool3 = icmp ne i32 %9, 0, !dbg !4716
  br i1 %tobool3, label %if.end, label %if.then, !dbg !4718

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !4719
  br label %return, !dbg !4719

if.end:                                           ; preds = %land.lhs.true, %entry
  %10 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4720
  %pair4 = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %10, i32 0, i32 0, !dbg !4722
  %11 = load i32, i32* %pair4, align 4, !dbg !4722
  %12 = load i32, i32* %lastpair, align 4, !dbg !4723
  %cmp = icmp eq i32 %11, %12, !dbg !4724
  br i1 %cmp, label %land.lhs.true5, label %if.end9, !dbg !4725

land.lhs.true5:                                   ; preds = %if.end
  %13 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4726
  %group6 = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %13, i32 0, i32 1, !dbg !4727
  %14 = load i32, i32* %group6, align 4, !dbg !4727
  %tobool7 = icmp ne i32 %14, 0, !dbg !4726
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !4728

if.then8:                                         ; preds = %land.lhs.true5
  store i32 2, i32* %dist, align 4, !dbg !4729
  br label %if.end9, !dbg !4730

if.end9:                                          ; preds = %if.then8, %land.lhs.true5, %if.end
  %15 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4731
  %group10 = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %15, i32 0, i32 1, !dbg !4733
  %16 = load i32, i32* %group10, align 4, !dbg !4733
  %tobool11 = icmp ne i32 %16, 0, !dbg !4731
  br i1 %tobool11, label %if.else, label %if.then12, !dbg !4734

if.then12:                                        ; preds = %if.end9
  %17 = load i32, i32* %page, align 4, !dbg !4735
  %dec = add i32 %17, -1, !dbg !4735
  store i32 %dec, i32* %page, align 4, !dbg !4735
  br label %if.end18, !dbg !4736

if.else:                                          ; preds = %if.end9
  %18 = load %struct.mtd_pairing_info*, %struct.mtd_pairing_info** %info.addr, align 8, !dbg !4737
  %pair13 = getelementptr inbounds %struct.mtd_pairing_info, %struct.mtd_pairing_info* %18, i32 0, i32 0, !dbg !4739
  %19 = load i32, i32* %pair13, align 4, !dbg !4739
  %tobool14 = icmp ne i32 %19, 0, !dbg !4737
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !4740

if.then15:                                        ; preds = %if.else
  %20 = load i32, i32* %dist, align 4, !dbg !4741
  %sub16 = sub i32 %20, 1, !dbg !4742
  %21 = load i32, i32* %page, align 4, !dbg !4743
  %add = add i32 %21, %sub16, !dbg !4743
  store i32 %add, i32* %page, align 4, !dbg !4743
  br label %if.end17, !dbg !4744

if.end17:                                         ; preds = %if.then15, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then12
  %22 = load i32, i32* %page, align 4, !dbg !4745
  %23 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !4747
  %erasesize19 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %23, i32 0, i32 3, !dbg !4748
  %24 = load i32, i32* %erasesize19, align 8, !dbg !4748
  %25 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !4749
  %writesize20 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %25, i32 0, i32 4, !dbg !4750
  %26 = load i32, i32* %writesize20, align 4, !dbg !4750
  %div21 = udiv i32 %24, %26, !dbg !4751
  %cmp22 = icmp uge i32 %22, %div21, !dbg !4752
  br i1 %cmp22, label %if.then23, label %if.end24, !dbg !4753

if.then23:                                        ; preds = %if.end18
  store i32 -22, i32* %retval, align 4, !dbg !4754
  br label %return, !dbg !4754

if.end24:                                         ; preds = %if.end18
  %27 = load i32, i32* %page, align 4, !dbg !4755
  store i32 %27, i32* %retval, align 4, !dbg !4756
  br label %return, !dbg !4756

return:                                           ; preds = %if.end24, %if.then23, %if.then
  %28 = load i32, i32* %retval, align 4, !dbg !4757
  ret i32 %28, !dbg !4757
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @nand_extract_bits(i8* %dst, i32 %dst_off, i8* %src, i32 %src_off, i32 %nbits) #0 !dbg !4758 {
entry:
  %dst.addr = alloca i8*, align 8
  %dst_off.addr = alloca i32, align 4
  %src.addr = alloca i8*, align 8
  %src_off.addr = alloca i32, align 4
  %nbits.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  %n = alloca i32, align 4
  %__UNIQUE_ID___x244 = alloca i32, align 4
  %__UNIQUE_ID___x242 = alloca i32, align 4
  %__UNIQUE_ID___y243 = alloca i32, align 4
  %tmp6 = alloca i32, align 4
  %__UNIQUE_ID___y245 = alloca i32, align 4
  %tmp7 = alloca i32, align 4
  store i8* %dst, i8** %dst.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dst.addr, metadata !4761, metadata !DIExpression()), !dbg !4762
  store i32 %dst_off, i32* %dst_off.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dst_off.addr, metadata !4763, metadata !DIExpression()), !dbg !4764
  store i8* %src, i8** %src.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %src.addr, metadata !4765, metadata !DIExpression()), !dbg !4766
  store i32 %src_off, i32* %src_off.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %src_off.addr, metadata !4767, metadata !DIExpression()), !dbg !4768
  store i32 %nbits, i32* %nbits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nbits.addr, metadata !4769, metadata !DIExpression()), !dbg !4770
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !4771, metadata !DIExpression()), !dbg !4772
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4773, metadata !DIExpression()), !dbg !4774
  %0 = load i32, i32* %dst_off.addr, align 4, !dbg !4775
  %div = udiv i32 %0, 8, !dbg !4776
  %1 = load i8*, i8** %dst.addr, align 8, !dbg !4777
  %idx.ext = zext i32 %div to i64, !dbg !4777
  %add.ptr = getelementptr i8, i8* %1, i64 %idx.ext, !dbg !4777
  store i8* %add.ptr, i8** %dst.addr, align 8, !dbg !4777
  %2 = load i32, i32* %dst_off.addr, align 4, !dbg !4778
  %rem = urem i32 %2, 8, !dbg !4778
  store i32 %rem, i32* %dst_off.addr, align 4, !dbg !4778
  %3 = load i32, i32* %src_off.addr, align 4, !dbg !4779
  %div1 = udiv i32 %3, 8, !dbg !4780
  %4 = load i8*, i8** %src.addr, align 8, !dbg !4781
  %idx.ext2 = zext i32 %div1 to i64, !dbg !4781
  %add.ptr3 = getelementptr i8, i8* %4, i64 %idx.ext2, !dbg !4781
  store i8* %add.ptr3, i8** %src.addr, align 8, !dbg !4781
  %5 = load i32, i32* %src_off.addr, align 4, !dbg !4782
  %rem4 = urem i32 %5, 8, !dbg !4782
  store i32 %rem4, i32* %src_off.addr, align 4, !dbg !4782
  br label %while.cond, !dbg !4783

while.cond:                                       ; preds = %if.end45, %entry
  %6 = load i32, i32* %nbits.addr, align 4, !dbg !4784
  %tobool = icmp ne i32 %6, 0, !dbg !4783
  br i1 %tobool, label %while.body, label %while.end, !dbg !4783

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x244, metadata !4785, metadata !DIExpression()), !dbg !4788
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x242, metadata !4789, metadata !DIExpression()), !dbg !4791
  %7 = load i32, i32* %dst_off.addr, align 4, !dbg !4791
  %sub = sub i32 8, %7, !dbg !4791
  store i32 %sub, i32* %__UNIQUE_ID___x242, align 4, !dbg !4791
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y243, metadata !4792, metadata !DIExpression()), !dbg !4791
  %8 = load i32, i32* %src_off.addr, align 4, !dbg !4791
  %sub5 = sub i32 8, %8, !dbg !4791
  store i32 %sub5, i32* %__UNIQUE_ID___y243, align 4, !dbg !4791
  %9 = load i32, i32* %__UNIQUE_ID___x242, align 4, !dbg !4791
  %10 = load i32, i32* %__UNIQUE_ID___y243, align 4, !dbg !4791
  %cmp = icmp ult i32 %9, %10, !dbg !4791
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !4791

cond.true:                                        ; preds = %while.body
  %11 = load i32, i32* %__UNIQUE_ID___x242, align 4, !dbg !4791
  br label %cond.end, !dbg !4791

cond.false:                                       ; preds = %while.body
  %12 = load i32, i32* %__UNIQUE_ID___y243, align 4, !dbg !4791
  br label %cond.end, !dbg !4791

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %11, %cond.true ], [ %12, %cond.false ], !dbg !4791
  store i32 %cond, i32* %tmp6, align 4, !dbg !4791
  %13 = load i32, i32* %tmp6, align 4, !dbg !4791
  store i32 %13, i32* %__UNIQUE_ID___x244, align 4, !dbg !4788
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y245, metadata !4793, metadata !DIExpression()), !dbg !4788
  %14 = load i32, i32* %nbits.addr, align 4, !dbg !4788
  store i32 %14, i32* %__UNIQUE_ID___y245, align 4, !dbg !4788
  %15 = load i32, i32* %__UNIQUE_ID___x244, align 4, !dbg !4788
  %16 = load i32, i32* %__UNIQUE_ID___y245, align 4, !dbg !4788
  %cmp8 = icmp ult i32 %15, %16, !dbg !4788
  br i1 %cmp8, label %cond.true9, label %cond.false10, !dbg !4788

cond.true9:                                       ; preds = %cond.end
  %17 = load i32, i32* %__UNIQUE_ID___x244, align 4, !dbg !4788
  br label %cond.end11, !dbg !4788

cond.false10:                                     ; preds = %cond.end
  %18 = load i32, i32* %__UNIQUE_ID___y245, align 4, !dbg !4788
  br label %cond.end11, !dbg !4788

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ %17, %cond.true9 ], [ %18, %cond.false10 ], !dbg !4788
  store i32 %cond12, i32* %tmp7, align 4, !dbg !4788
  %19 = load i32, i32* %tmp7, align 4, !dbg !4788
  store i32 %19, i32* %n, align 4, !dbg !4794
  %20 = load i8*, i8** %src.addr, align 8, !dbg !4795
  %21 = load i8, i8* %20, align 1, !dbg !4796
  %conv = zext i8 %21 to i32, !dbg !4796
  %22 = load i32, i32* %src_off.addr, align 4, !dbg !4797
  %shr = ashr i32 %conv, %22, !dbg !4798
  %conv13 = sext i32 %shr to i64, !dbg !4799
  %23 = load i32, i32* %n, align 4, !dbg !4800
  %sub14 = sub i32 %23, 1, !dbg !4800
  %sub15 = sub i32 63, %sub14, !dbg !4800
  %sh_prom = zext i32 %sub15 to i64, !dbg !4800
  %shr16 = lshr i64 -1, %sh_prom, !dbg !4800
  %and = and i64 -1, %shr16, !dbg !4800
  %add = add i64 0, %and, !dbg !4800
  %and17 = and i64 %conv13, %add, !dbg !4801
  %conv18 = trunc i64 %and17 to i32, !dbg !4799
  store i32 %conv18, i32* %tmp, align 4, !dbg !4802
  %24 = load i32, i32* %dst_off.addr, align 4, !dbg !4803
  %sh_prom19 = zext i32 %24 to i64, !dbg !4803
  %shl = shl i64 1, %sh_prom19, !dbg !4803
  %sub20 = sub i64 -1, %shl, !dbg !4803
  %add21 = add i64 %sub20, 1, !dbg !4803
  %25 = load i32, i32* %n, align 4, !dbg !4803
  %sub22 = sub i32 %25, 1, !dbg !4803
  %26 = load i32, i32* %dst_off.addr, align 4, !dbg !4803
  %add23 = add i32 %sub22, %26, !dbg !4803
  %sub24 = sub i32 63, %add23, !dbg !4803
  %sh_prom25 = zext i32 %sub24 to i64, !dbg !4803
  %shr26 = lshr i64 -1, %sh_prom25, !dbg !4803
  %and27 = and i64 %add21, %shr26, !dbg !4803
  %add28 = add i64 0, %and27, !dbg !4803
  %neg = xor i64 %add28, -1, !dbg !4804
  %27 = load i8*, i8** %dst.addr, align 8, !dbg !4805
  %28 = load i8, i8* %27, align 1, !dbg !4806
  %conv29 = zext i8 %28 to i64, !dbg !4806
  %and30 = and i64 %conv29, %neg, !dbg !4806
  %conv31 = trunc i64 %and30 to i8, !dbg !4806
  store i8 %conv31, i8* %27, align 1, !dbg !4806
  %29 = load i32, i32* %tmp, align 4, !dbg !4807
  %30 = load i32, i32* %dst_off.addr, align 4, !dbg !4808
  %shl32 = shl i32 %29, %30, !dbg !4809
  %31 = load i8*, i8** %dst.addr, align 8, !dbg !4810
  %32 = load i8, i8* %31, align 1, !dbg !4811
  %conv33 = zext i8 %32 to i32, !dbg !4811
  %or = or i32 %conv33, %shl32, !dbg !4811
  %conv34 = trunc i32 %or to i8, !dbg !4811
  store i8 %conv34, i8* %31, align 1, !dbg !4811
  %33 = load i32, i32* %n, align 4, !dbg !4812
  %34 = load i32, i32* %dst_off.addr, align 4, !dbg !4813
  %add35 = add i32 %34, %33, !dbg !4813
  store i32 %add35, i32* %dst_off.addr, align 4, !dbg !4813
  %35 = load i32, i32* %dst_off.addr, align 4, !dbg !4814
  %cmp36 = icmp uge i32 %35, 8, !dbg !4816
  br i1 %cmp36, label %if.then, label %if.end, !dbg !4817

if.then:                                          ; preds = %cond.end11
  %36 = load i8*, i8** %dst.addr, align 8, !dbg !4818
  %incdec.ptr = getelementptr i8, i8* %36, i32 1, !dbg !4818
  store i8* %incdec.ptr, i8** %dst.addr, align 8, !dbg !4818
  %37 = load i32, i32* %dst_off.addr, align 4, !dbg !4820
  %sub38 = sub i32 %37, 8, !dbg !4820
  store i32 %sub38, i32* %dst_off.addr, align 4, !dbg !4820
  br label %if.end, !dbg !4821

if.end:                                           ; preds = %if.then, %cond.end11
  %38 = load i32, i32* %n, align 4, !dbg !4822
  %39 = load i32, i32* %src_off.addr, align 4, !dbg !4823
  %add39 = add i32 %39, %38, !dbg !4823
  store i32 %add39, i32* %src_off.addr, align 4, !dbg !4823
  %40 = load i32, i32* %src_off.addr, align 4, !dbg !4824
  %cmp40 = icmp uge i32 %40, 8, !dbg !4826
  br i1 %cmp40, label %if.then42, label %if.end45, !dbg !4827

if.then42:                                        ; preds = %if.end
  %41 = load i8*, i8** %src.addr, align 8, !dbg !4828
  %incdec.ptr43 = getelementptr i8, i8* %41, i32 1, !dbg !4828
  store i8* %incdec.ptr43, i8** %src.addr, align 8, !dbg !4828
  %42 = load i32, i32* %src_off.addr, align 4, !dbg !4830
  %sub44 = sub i32 %42, 8, !dbg !4830
  store i32 %sub44, i32* %src_off.addr, align 4, !dbg !4830
  br label %if.end45, !dbg !4831

if.end45:                                         ; preds = %if.then42, %if.end
  %43 = load i32, i32* %n, align 4, !dbg !4832
  %44 = load i32, i32* %nbits.addr, align 4, !dbg !4833
  %sub46 = sub i32 %44, %43, !dbg !4833
  store i32 %sub46, i32* %nbits.addr, align 4, !dbg !4833
  br label %while.cond, !dbg !4783, !llvm.loop !4834

while.end:                                        ; preds = %while.cond
  ret void, !dbg !4836
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @nand_select_target(%struct.nand_chip* %chip, i32 %cs) #0 !dbg !4837 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %cs.addr = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !4840, metadata !DIExpression()), !dbg !4841
  store i32 %cs, i32* %cs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cs.addr, metadata !4842, metadata !DIExpression()), !dbg !4843
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !4844, metadata !DIExpression()), !dbg !4847
  %0 = load i32, i32* %cs.addr, align 4, !dbg !4847
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4847
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 0, !dbg !4847
  %call = call i32 @nanddev_ntargets(%struct.nand_device* %base) #8, !dbg !4847
  %cmp = icmp ugt i32 %0, %call, !dbg !4847
  %lnot = xor i1 %cmp, true, !dbg !4847
  %lnot1 = xor i1 %lnot, true, !dbg !4847
  %lnot.ext = zext i1 %lnot1 to i32, !dbg !4847
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !4847
  %2 = load i32, i32* %__ret_warn_on, align 4, !dbg !4848
  %tobool = icmp ne i32 %2, 0, !dbg !4848
  %lnot2 = xor i1 %tobool, true, !dbg !4848
  %lnot4 = xor i1 %lnot2, true, !dbg !4848
  %lnot.ext5 = zext i1 %lnot4 to i32, !dbg !4848
  %conv = sext i32 %lnot.ext5 to i64, !dbg !4848
  %tobool6 = icmp ne i64 %conv, 0, !dbg !4848
  br i1 %tobool6, label %if.then, label %if.end, !dbg !4847

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !4848

do.body:                                          ; preds = %if.then
  br label %do.body7, !dbg !4850

do.body7:                                         ; preds = %do.body
  br label %do.end, !dbg !4852

do.end:                                           ; preds = %do.body7
  br label %do.body8, !dbg !4850

do.body8:                                         ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 177, i32 2305, i64 12) #9, !dbg !4854, !srcloc !4856
  br label %do.end9, !dbg !4854

do.end9:                                          ; preds = %do.body8
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 246) #9, !dbg !4857, !srcloc !4859
  br label %do.body10, !dbg !4850

do.body10:                                        ; preds = %do.end9
  br label %do.end11, !dbg !4860

do.end11:                                         ; preds = %do.body10
  br label %do.end12, !dbg !4850

do.end12:                                         ; preds = %do.end11
  br label %if.end, !dbg !4850

if.end:                                           ; preds = %do.end12, %entry
  %3 = load i32, i32* %__ret_warn_on, align 4, !dbg !4847
  %tobool13 = icmp ne i32 %3, 0, !dbg !4847
  %lnot14 = xor i1 %tobool13, true, !dbg !4847
  %lnot16 = xor i1 %lnot14, true, !dbg !4847
  %lnot.ext17 = zext i1 %lnot16 to i32, !dbg !4847
  %conv18 = sext i32 %lnot.ext17 to i64, !dbg !4847
  store i64 %conv18, i64* %tmp, align 8, !dbg !4848
  %4 = load i64, i64* %tmp, align 8, !dbg !4847
  %tobool19 = icmp ne i64 %4, 0, !dbg !4862
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !4863

if.then20:                                        ; preds = %if.end
  br label %if.end26, !dbg !4864

if.end21:                                         ; preds = %if.end
  %5 = load i32, i32* %cs.addr, align 4, !dbg !4865
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4866
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %6, i32 0, i32 28, !dbg !4867
  store i32 %5, i32* %cur_cs, align 4, !dbg !4868
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4869
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 5, !dbg !4871
  %select_chip = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 2, !dbg !4872
  %8 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %select_chip, align 8, !dbg !4872
  %tobool22 = icmp ne void (%struct.nand_chip*, i32)* %8, null, !dbg !4869
  br i1 %tobool22, label %if.then23, label %if.end26, !dbg !4873

if.then23:                                        ; preds = %if.end21
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4874
  %legacy24 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 5, !dbg !4875
  %select_chip25 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy24, i32 0, i32 2, !dbg !4876
  %10 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %select_chip25, align 8, !dbg !4876
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4877
  %12 = load i32, i32* %cs.addr, align 4, !dbg !4878
  call void %10(%struct.nand_chip* %11, i32 %12) #8, !dbg !4874
  br label %if.end26, !dbg !4874

if.end26:                                         ; preds = %if.then20, %if.then23, %if.end21
  ret void, !dbg !4879
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nanddev_ntargets(%struct.nand_device* %nand) #0 !dbg !4880 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !4885, metadata !DIExpression()), !dbg !4886
  %0 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !4887
  %memorg = getelementptr inbounds %struct.nand_device, %struct.nand_device* %0, i32 0, i32 1, !dbg !4888
  %ntargets = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg, i32 0, i32 8, !dbg !4889
  %1 = load i32, i32* %ntargets, align 8, !dbg !4889
  ret i32 %1, !dbg !4890
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @nand_deselect_target(%struct.nand_chip* %chip) #0 !dbg !4891 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !4892, metadata !DIExpression()), !dbg !4893
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4894
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 5, !dbg !4896
  %select_chip = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 2, !dbg !4897
  %1 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %select_chip, align 8, !dbg !4897
  %tobool = icmp ne void (%struct.nand_chip*, i32)* %1, null, !dbg !4894
  br i1 %tobool, label %if.then, label %if.end, !dbg !4898

if.then:                                          ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4899
  %legacy1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 5, !dbg !4900
  %select_chip2 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy1, i32 0, i32 2, !dbg !4901
  %3 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %select_chip2, align 8, !dbg !4901
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4902
  call void %3(%struct.nand_chip* %4, i32 -1) #8, !dbg !4899
  br label %if.end, !dbg !4899

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4903
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 28, !dbg !4904
  store i32 -1, i32* %cur_cs, align 4, !dbg !4905
  ret void, !dbg !4906
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_bbm_get_next_page(%struct.nand_chip* %chip, i32 %page) #0 !dbg !4907 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %last_page = alloca i32, align 4
  %bbm_flags = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !4908, metadata !DIExpression()), !dbg !4909
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !4910, metadata !DIExpression()), !dbg !4911
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !4912, metadata !DIExpression()), !dbg !4913
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4914
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !4915
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !4913
  call void @llvm.dbg.declare(metadata i32* %last_page, metadata !4916, metadata !DIExpression()), !dbg !4917
  %1 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !4918
  %erasesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %1, i32 0, i32 3, !dbg !4919
  %2 = load i32, i32* %erasesize, align 8, !dbg !4919
  %3 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !4920
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %3, i32 0, i32 4, !dbg !4921
  %4 = load i32, i32* %writesize, align 4, !dbg !4921
  %sub = sub i32 %2, %4, !dbg !4922
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4923
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 17, !dbg !4924
  %6 = load i32, i32* %page_shift, align 8, !dbg !4924
  %shr = lshr i32 %sub, %6, !dbg !4925
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4926
  %pagemask = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 20, !dbg !4927
  %8 = load i32, i32* %pagemask, align 4, !dbg !4927
  %and = and i32 %shr, %8, !dbg !4928
  store i32 %and, i32* %last_page, align 4, !dbg !4917
  call void @llvm.dbg.declare(metadata i32* %bbm_flags, metadata !4929, metadata !DIExpression()), !dbg !4930
  store i32 117440512, i32* %bbm_flags, align 4, !dbg !4930
  %9 = load i32, i32* %page.addr, align 4, !dbg !4931
  %cmp = icmp eq i32 %9, 0, !dbg !4933
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !4934

land.lhs.true:                                    ; preds = %entry
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4935
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 6, !dbg !4936
  %11 = load i32, i32* %options, align 8, !dbg !4936
  %12 = load i32, i32* %bbm_flags, align 4, !dbg !4937
  %and1 = and i32 %11, %12, !dbg !4938
  %tobool = icmp ne i32 %and1, 0, !dbg !4938
  br i1 %tobool, label %if.end, label %if.then, !dbg !4939

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !4940
  br label %return, !dbg !4940

if.end:                                           ; preds = %land.lhs.true, %entry
  %13 = load i32, i32* %page.addr, align 4, !dbg !4941
  %cmp2 = icmp eq i32 %13, 0, !dbg !4943
  br i1 %cmp2, label %land.lhs.true3, label %if.end8, !dbg !4944

land.lhs.true3:                                   ; preds = %if.end
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4945
  %options4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %14, i32 0, i32 6, !dbg !4946
  %15 = load i32, i32* %options4, align 8, !dbg !4946
  %conv = zext i32 %15 to i64, !dbg !4945
  %and5 = and i64 %conv, 16777216, !dbg !4947
  %tobool6 = icmp ne i64 %and5, 0, !dbg !4947
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !4948

if.then7:                                         ; preds = %land.lhs.true3
  store i32 0, i32* %retval, align 4, !dbg !4949
  br label %return, !dbg !4949

if.end8:                                          ; preds = %land.lhs.true3, %if.end
  %16 = load i32, i32* %page.addr, align 4, !dbg !4950
  %cmp9 = icmp sle i32 %16, 1, !dbg !4952
  br i1 %cmp9, label %land.lhs.true11, label %if.end17, !dbg !4953

land.lhs.true11:                                  ; preds = %if.end8
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4954
  %options12 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %17, i32 0, i32 6, !dbg !4955
  %18 = load i32, i32* %options12, align 8, !dbg !4955
  %conv13 = zext i32 %18 to i64, !dbg !4954
  %and14 = and i64 %conv13, 33554432, !dbg !4956
  %tobool15 = icmp ne i64 %and14, 0, !dbg !4956
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !4957

if.then16:                                        ; preds = %land.lhs.true11
  store i32 1, i32* %retval, align 4, !dbg !4958
  br label %return, !dbg !4958

if.end17:                                         ; preds = %land.lhs.true11, %if.end8
  %19 = load i32, i32* %page.addr, align 4, !dbg !4959
  %20 = load i32, i32* %last_page, align 4, !dbg !4961
  %cmp18 = icmp sle i32 %19, %20, !dbg !4962
  br i1 %cmp18, label %land.lhs.true20, label %if.end26, !dbg !4963

land.lhs.true20:                                  ; preds = %if.end17
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4964
  %options21 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 6, !dbg !4965
  %22 = load i32, i32* %options21, align 8, !dbg !4965
  %conv22 = zext i32 %22 to i64, !dbg !4964
  %and23 = and i64 %conv22, 67108864, !dbg !4966
  %tobool24 = icmp ne i64 %and23, 0, !dbg !4966
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !4967

if.then25:                                        ; preds = %land.lhs.true20
  %23 = load i32, i32* %last_page, align 4, !dbg !4968
  store i32 %23, i32* %retval, align 4, !dbg !4969
  br label %return, !dbg !4969

if.end26:                                         ; preds = %land.lhs.true20, %if.end17
  store i32 -22, i32* %retval, align 4, !dbg !4970
  br label %return, !dbg !4970

return:                                           ; preds = %if.end26, %if.then25, %if.then16, %if.then7, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !4971
  ret i32 %24, !dbg !4971
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %chip) #0 !dbg !4972 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !4975, metadata !DIExpression()), !dbg !4976
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4977
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 0, !dbg !4978
  %mtd = getelementptr inbounds %struct.nand_device, %struct.nand_device* %base, i32 0, i32 0, !dbg !4979
  ret %struct.mtd_info* %mtd, !dbg !4980
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_markbad_bbm(%struct.nand_chip* %chip, i64 %ofs) #0 !dbg !4981 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %ofs.addr = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !4982, metadata !DIExpression()), !dbg !4983
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !4984, metadata !DIExpression()), !dbg !4985
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4986
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 5, !dbg !4988
  %block_markbad = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 12, !dbg !4989
  %1 = load i32 (%struct.nand_chip*, i64)*, i32 (%struct.nand_chip*, i64)** %block_markbad, align 8, !dbg !4989
  %tobool = icmp ne i32 (%struct.nand_chip*, i64)* %1, null, !dbg !4986
  br i1 %tobool, label %if.then, label %if.end, !dbg !4990

if.then:                                          ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4991
  %legacy1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 5, !dbg !4992
  %block_markbad2 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy1, i32 0, i32 12, !dbg !4993
  %3 = load i32 (%struct.nand_chip*, i64)*, i32 (%struct.nand_chip*, i64)** %block_markbad2, align 8, !dbg !4993
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4994
  %5 = load i64, i64* %ofs.addr, align 8, !dbg !4995
  %call = call i32 %3(%struct.nand_chip* %4, i64 %5) #8, !dbg !4991
  store i32 %call, i32* %retval, align 4, !dbg !4996
  br label %return, !dbg !4996

if.end:                                           ; preds = %entry
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !4997
  %7 = load i64, i64* %ofs.addr, align 8, !dbg !4998
  %call3 = call i32 @nand_default_block_markbad(%struct.nand_chip* %6, i64 %7) #8, !dbg !4999
  store i32 %call3, i32* %retval, align 4, !dbg !5000
  br label %return, !dbg !5000

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5001
  ret i32 %8, !dbg !5001
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_default_block_markbad(%struct.nand_chip* %chip, i64 %ofs) #0 !dbg !5002 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %ofs.addr = alloca i64, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %ops = alloca %struct.mtd_oob_ops, align 8
  %buf = alloca [2 x i8], align 1
  %ret = alloca i32, align 4
  %res = alloca i32, align 4
  %page_offset = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5003, metadata !DIExpression()), !dbg !5004
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !5005, metadata !DIExpression()), !dbg !5006
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !5007, metadata !DIExpression()), !dbg !5008
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5009
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !5010
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !5008
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops* %ops, metadata !5011, metadata !DIExpression()), !dbg !5012
  call void @llvm.dbg.declare(metadata [2 x i8]* %buf, metadata !5013, metadata !DIExpression()), !dbg !5015
  %1 = bitcast [2 x i8]* %buf to i8*, !dbg !5015
  call void @llvm.memset.p0i8.i64(i8* align 1 %1, i8 0, i64 2, i1 false), !dbg !5015
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5016, metadata !DIExpression()), !dbg !5017
  store i32 0, i32* %ret, align 4, !dbg !5017
  call void @llvm.dbg.declare(metadata i32* %res, metadata !5018, metadata !DIExpression()), !dbg !5019
  call void @llvm.dbg.declare(metadata i32* %page_offset, metadata !5020, metadata !DIExpression()), !dbg !5021
  %2 = bitcast %struct.mtd_oob_ops* %ops to i8*, !dbg !5022
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 64, i1 false), !dbg !5022
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %buf, i64 0, i64 0, !dbg !5023
  %oobbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 7, !dbg !5024
  store i8* %arraydecay, i8** %oobbuf, align 8, !dbg !5025
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5026
  %badblockpos = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 11, !dbg !5027
  %4 = load i32, i32* %badblockpos, align 8, !dbg !5027
  %ooboffs = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 5, !dbg !5028
  store i32 %4, i32* %ooboffs, align 8, !dbg !5029
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5030
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 6, !dbg !5032
  %6 = load i32, i32* %options, align 8, !dbg !5032
  %conv = zext i32 %6 to i64, !dbg !5030
  %and = and i64 %conv, 2, !dbg !5033
  %tobool = icmp ne i64 %and, 0, !dbg !5033
  br i1 %tobool, label %if.then, label %if.else, !dbg !5034

if.then:                                          ; preds = %entry
  %ooboffs1 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 5, !dbg !5035
  %7 = load i32, i32* %ooboffs1, align 8, !dbg !5037
  %and2 = and i32 %7, -2, !dbg !5037
  store i32 %and2, i32* %ooboffs1, align 8, !dbg !5037
  %ooblen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 3, !dbg !5038
  store i64 2, i64* %ooblen, align 8, !dbg !5039
  %len = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 1, !dbg !5040
  store i64 2, i64* %len, align 8, !dbg !5041
  br label %if.end, !dbg !5042

if.else:                                          ; preds = %entry
  %ooblen3 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 3, !dbg !5043
  store i64 1, i64* %ooblen3, align 8, !dbg !5045
  %len4 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 1, !dbg !5046
  store i64 1, i64* %len4, align 8, !dbg !5047
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 0, !dbg !5048
  store i32 0, i32* %mode, align 8, !dbg !5049
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5050
  %call5 = call i32 @nand_bbm_get_next_page(%struct.nand_chip* %8, i32 0) #8, !dbg !5051
  store i32 %call5, i32* %page_offset, align 4, !dbg !5052
  br label %while.cond, !dbg !5053

while.cond:                                       ; preds = %if.end11, %if.end
  %9 = load i32, i32* %page_offset, align 4, !dbg !5054
  %cmp = icmp sge i32 %9, 0, !dbg !5055
  br i1 %cmp, label %while.body, label %while.end, !dbg !5053

while.body:                                       ; preds = %while.cond
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5056
  %11 = load i64, i64* %ofs.addr, align 8, !dbg !5058
  %12 = load i32, i32* %page_offset, align 4, !dbg !5059
  %13 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !5060
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %13, i32 0, i32 4, !dbg !5061
  %14 = load i32, i32* %writesize, align 4, !dbg !5061
  %mul = mul i32 %12, %14, !dbg !5062
  %conv7 = zext i32 %mul to i64, !dbg !5063
  %add = add i64 %11, %conv7, !dbg !5064
  %call8 = call i32 @nand_do_write_oob(%struct.nand_chip* %10, i64 %add, %struct.mtd_oob_ops* %ops) #8, !dbg !5065
  store i32 %call8, i32* %res, align 4, !dbg !5066
  %15 = load i32, i32* %ret, align 4, !dbg !5067
  %tobool9 = icmp ne i32 %15, 0, !dbg !5067
  br i1 %tobool9, label %if.end11, label %if.then10, !dbg !5069

if.then10:                                        ; preds = %while.body
  %16 = load i32, i32* %res, align 4, !dbg !5070
  store i32 %16, i32* %ret, align 4, !dbg !5071
  br label %if.end11, !dbg !5072

if.end11:                                         ; preds = %if.then10, %while.body
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5073
  %18 = load i32, i32* %page_offset, align 4, !dbg !5074
  %add12 = add i32 %18, 1, !dbg !5075
  %call13 = call i32 @nand_bbm_get_next_page(%struct.nand_chip* %17, i32 %add12) #8, !dbg !5076
  store i32 %call13, i32* %page_offset, align 4, !dbg !5077
  br label %while.cond, !dbg !5053, !llvm.loop !5078

while.end:                                        ; preds = %while.cond
  %19 = load i32, i32* %ret, align 4, !dbg !5080
  ret i32 %19, !dbg !5081
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_soft_waitrdy(%struct.nand_chip* %chip, i64 %timeout_ms) #0 !dbg !5082 {
entry:
  %retval.i = alloca i64, align 8
  %m.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr.i, metadata !5085, metadata !DIExpression()), !dbg !5090
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %timeout_ms.addr = alloca i64, align 8
  %timings = alloca %struct.nand_sdr_timings*, align 8
  %status = alloca i8, align 1
  %ret = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5092, metadata !DIExpression()), !dbg !5093
  store i64 %timeout_ms, i64* %timeout_ms.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %timeout_ms.addr, metadata !5094, metadata !DIExpression()), !dbg !5095
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %timings, metadata !5096, metadata !DIExpression()), !dbg !5099
  call void @llvm.dbg.declare(metadata i8* %status, metadata !5100, metadata !DIExpression()), !dbg !5101
  store i8 0, i8* %status, align 1, !dbg !5101
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5102, metadata !DIExpression()), !dbg !5103
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5104
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %0) #8, !dbg !5106
  br i1 %call, label %if.end, label %if.then, !dbg !5107

if.then:                                          ; preds = %entry
  store i32 -524, i32* %retval, align 4, !dbg !5108
  br label %return, !dbg !5108

if.end:                                           ; preds = %entry
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5109
  %call1 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %1) #8, !dbg !5110
  %call2 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call1) #8, !dbg !5111
  store %struct.nand_sdr_timings* %call2, %struct.nand_sdr_timings** %timings, align 8, !dbg !5112
  %2 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %timings, align 8, !dbg !5113
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %2, i32 0, i32 32, !dbg !5113
  %3 = load i32, i32* %tWB_max, align 8, !dbg !5113
  %add = add i32 %3, 1000, !dbg !5113
  %sub = sub i32 %add, 1, !dbg !5113
  %div = udiv i32 %sub, 1000, !dbg !5113
  %conv = zext i32 %div to i64, !dbg !5113
  %conv3 = trunc i64 %conv to i32, !dbg !5113
  store i32 %conv3, i32* %tmp, align 4, !dbg !5118
  %4 = load i32, i32* %tmp, align 4, !dbg !5113
  %conv4 = zext i32 %4 to i64, !dbg !5118
  call void @__ndelay(i64 %conv4) #8, !dbg !5118
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5119
  %call5 = call i32 @nand_status_op(%struct.nand_chip* %5, i8* null) #8, !dbg !5120
  store i32 %call5, i32* %ret, align 4, !dbg !5121
  %6 = load i32, i32* %ret, align 4, !dbg !5122
  %tobool = icmp ne i32 %6, 0, !dbg !5122
  br i1 %tobool, label %if.then6, label %if.end7, !dbg !5124

if.then6:                                         ; preds = %if.end
  %7 = load i32, i32* %ret, align 4, !dbg !5125
  store i32 %7, i32* %retval, align 4, !dbg !5126
  br label %return, !dbg !5126

if.end7:                                          ; preds = %if.end
  %8 = load volatile i64, i64* @jiffies, align 8, !dbg !5127
  %9 = load i64, i64* %timeout_ms.addr, align 8, !dbg !5128
  %conv8 = trunc i64 %9 to i32, !dbg !5128
  store i32 %conv8, i32* %m.addr.i, align 4
  %10 = load i32, i32* %m.addr.i, align 4, !dbg !5129
  %11 = call i1 @llvm.is.constant.i32(i32 %10) #9, !dbg !5131
  br i1 %11, label %if.then.i, label %if.else.i, !dbg !5132

if.then.i:                                        ; preds = %if.end7
  %12 = load i32, i32* %m.addr.i, align 4, !dbg !5133
  %cmp.i = icmp slt i32 %12, 0, !dbg !5136
  br i1 %cmp.i, label %if.then1.i, label %if.end.i, !dbg !5137

if.then1.i:                                       ; preds = %if.then.i
  store i64 4611686018427387902, i64* %retval.i, align 8, !dbg !5138
  br label %msecs_to_jiffies.exit, !dbg !5138

if.end.i:                                         ; preds = %if.then.i
  %13 = load i32, i32* %m.addr.i, align 4, !dbg !5139
  %call.i = call i64 @_msecs_to_jiffies(i32 %13) #10, !dbg !5140
  store i64 %call.i, i64* %retval.i, align 8, !dbg !5141
  br label %msecs_to_jiffies.exit, !dbg !5141

if.else.i:                                        ; preds = %if.end7
  %14 = load i32, i32* %m.addr.i, align 4, !dbg !5142
  %call2.i = call i64 @__msecs_to_jiffies(i32 %14) #10, !dbg !5144
  store i64 %call2.i, i64* %retval.i, align 8, !dbg !5145
  br label %msecs_to_jiffies.exit, !dbg !5145

msecs_to_jiffies.exit:                            ; preds = %if.then1.i, %if.end.i, %if.else.i
  %15 = load i64, i64* %retval.i, align 8, !dbg !5146
  %add10 = add i64 %8, %15, !dbg !5147
  %add11 = add i64 %add10, 1, !dbg !5148
  store i64 %add11, i64* %timeout_ms.addr, align 8, !dbg !5149
  br label %do.body, !dbg !5150

do.body:                                          ; preds = %do.cond, %msecs_to_jiffies.exit
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5151
  %call12 = call i32 @nand_read_data_op(%struct.nand_chip* %16, i8* %status, i32 1, i1 zeroext true, i1 zeroext false) #8, !dbg !5153
  store i32 %call12, i32* %ret, align 4, !dbg !5154
  %17 = load i32, i32* %ret, align 4, !dbg !5155
  %tobool13 = icmp ne i32 %17, 0, !dbg !5155
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !5157

if.then14:                                        ; preds = %do.body
  br label %do.end, !dbg !5158

if.end15:                                         ; preds = %do.body
  %18 = load i8, i8* %status, align 1, !dbg !5159
  %conv16 = zext i8 %18 to i32, !dbg !5159
  %and = and i32 %conv16, 64, !dbg !5161
  %tobool17 = icmp ne i32 %and, 0, !dbg !5161
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !5162

if.then18:                                        ; preds = %if.end15
  br label %do.end, !dbg !5163

if.end19:                                         ; preds = %if.end15
  call void @__const_udelay(i64 42950) #8, !dbg !5164
  br label %do.cond, !dbg !5169

do.cond:                                          ; preds = %if.end19
  %19 = load volatile i64, i64* @jiffies, align 8, !dbg !5170
  %20 = load i64, i64* %timeout_ms.addr, align 8, !dbg !5170
  %sub20 = sub i64 %19, %20, !dbg !5170
  %cmp = icmp slt i64 %sub20, 0, !dbg !5170
  br i1 %cmp, label %do.body, label %do.end, !dbg !5169, !llvm.loop !5171

do.end:                                           ; preds = %do.cond, %if.then18, %if.then14
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5173
  %call22 = call i32 @nand_exit_status_op(%struct.nand_chip* %21) #8, !dbg !5174
  %22 = load i32, i32* %ret, align 4, !dbg !5175
  %tobool23 = icmp ne i32 %22, 0, !dbg !5175
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !5177

if.then24:                                        ; preds = %do.end
  %23 = load i32, i32* %ret, align 4, !dbg !5178
  store i32 %23, i32* %retval, align 4, !dbg !5179
  br label %return, !dbg !5179

if.end25:                                         ; preds = %do.end
  %24 = load i8, i8* %status, align 1, !dbg !5180
  %conv26 = zext i8 %24 to i32, !dbg !5180
  %and27 = and i32 %conv26, 64, !dbg !5181
  %tobool28 = icmp ne i32 %and27, 0, !dbg !5180
  %25 = zext i1 %tobool28 to i64, !dbg !5180
  %cond = select i1 %tobool28, i32 0, i32 -110, !dbg !5180
  store i32 %cond, i32* %retval, align 4, !dbg !5182
  br label %return, !dbg !5182

return:                                           ; preds = %if.end25, %if.then24, %if.then6, %if.then
  %26 = load i32, i32* %retval, align 4, !dbg !5183
  ret i32 %26, !dbg !5183
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @nand_has_exec_op(%struct.nand_chip* %chip) #0 !dbg !5184 {
entry:
  %retval = alloca i1, align 1
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5187, metadata !DIExpression()), !dbg !5188
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5189
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 30, !dbg !5191
  %1 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !5191
  %tobool = icmp ne %struct.nand_controller* %1, null, !dbg !5189
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5192

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5193
  %controller1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 30, !dbg !5194
  %3 = load %struct.nand_controller*, %struct.nand_controller** %controller1, align 8, !dbg !5194
  %ops = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %3, i32 0, i32 1, !dbg !5195
  %4 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !5195
  %tobool2 = icmp ne %struct.nand_controller_ops* %4, null, !dbg !5193
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !5196

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5197
  %controller4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 30, !dbg !5198
  %6 = load %struct.nand_controller*, %struct.nand_controller** %controller4, align 8, !dbg !5198
  %ops5 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %6, i32 0, i32 1, !dbg !5199
  %7 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops5, align 8, !dbg !5199
  %exec_op = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %7, i32 0, i32 2, !dbg !5200
  %8 = load i32 (%struct.nand_chip*, %struct.nand_operation*, i1)*, i32 (%struct.nand_chip*, %struct.nand_operation*, i1)** %exec_op, align 8, !dbg !5200
  %tobool6 = icmp ne i32 (%struct.nand_chip*, %struct.nand_operation*, i1)* %8, null, !dbg !5197
  br i1 %tobool6, label %if.end, label %if.then, !dbg !5201

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store i1 false, i1* %retval, align 1, !dbg !5202
  br label %return, !dbg !5202

if.end:                                           ; preds = %lor.lhs.false3
  store i1 true, i1* %retval, align 1, !dbg !5203
  br label %return, !dbg !5203

return:                                           ; preds = %if.end, %if.then
  %9 = load i1, i1* %retval, align 1, !dbg !5204
  ret i1 %9, !dbg !5204
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %conf) #0 !dbg !5205 {
entry:
  %retval = alloca %struct.nand_sdr_timings*, align 8
  %conf.addr = alloca %struct.nand_interface_config*, align 8
  store %struct.nand_interface_config* %conf, %struct.nand_interface_config** %conf.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_interface_config** %conf.addr, metadata !5208, metadata !DIExpression()), !dbg !5209
  %0 = load %struct.nand_interface_config*, %struct.nand_interface_config** %conf.addr, align 8, !dbg !5210
  %type = getelementptr inbounds %struct.nand_interface_config, %struct.nand_interface_config* %0, i32 0, i32 0, !dbg !5212
  %1 = load i32, i32* %type, align 8, !dbg !5212
  %cmp = icmp ne i32 %1, 0, !dbg !5213
  br i1 %cmp, label %if.then, label %if.end, !dbg !5214

if.then:                                          ; preds = %entry
  %call = call i8* @ERR_PTR(i64 -22) #8, !dbg !5215
  %2 = bitcast i8* %call to %struct.nand_sdr_timings*, !dbg !5215
  store %struct.nand_sdr_timings* %2, %struct.nand_sdr_timings** %retval, align 8, !dbg !5216
  br label %return, !dbg !5216

if.end:                                           ; preds = %entry
  %3 = load %struct.nand_interface_config*, %struct.nand_interface_config** %conf.addr, align 8, !dbg !5217
  %timings = getelementptr inbounds %struct.nand_interface_config, %struct.nand_interface_config* %3, i32 0, i32 1, !dbg !5218
  %4 = getelementptr inbounds %struct.nand_timings, %struct.nand_timings* %timings, i32 0, i32 1, !dbg !5219
  %sdr = bitcast %union.anon.71* %4 to %struct.nand_sdr_timings*, !dbg !5219
  store %struct.nand_sdr_timings* %sdr, %struct.nand_sdr_timings** %retval, align 8, !dbg !5220
  br label %return, !dbg !5220

return:                                           ; preds = %if.end, %if.then
  %5 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %retval, align 8, !dbg !5221
  ret %struct.nand_sdr_timings* %5, !dbg !5221
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %chip) #0 !dbg !5222 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5225, metadata !DIExpression()), !dbg !5226
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5227
  %current_interface_config = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 7, !dbg !5228
  %1 = load %struct.nand_interface_config*, %struct.nand_interface_config** %current_interface_config, align 8, !dbg !5228
  ret %struct.nand_interface_config* %1, !dbg !5229
}

; Function Attrs: noredzone
declare dso_local void @__ndelay(i64) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_status_op(%struct.nand_chip* %chip, i8* %status) #0 !dbg !5230 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %status.addr = alloca i8*, align 8
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %instrs = alloca [2 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5233, metadata !DIExpression()), !dbg !5234
  store i8* %status, i8** %status.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %status.addr, metadata !5235, metadata !DIExpression()), !dbg !5236
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5237
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %0) #8, !dbg !5239
  br i1 %call, label %if.then, label %if.end11, !dbg !5240

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !5241, metadata !DIExpression()), !dbg !5243
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5244
  %call1 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %1) #8, !dbg !5245
  %call2 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call1) #8, !dbg !5246
  store %struct.nand_sdr_timings* %call2, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5243
  call void @llvm.dbg.declare(metadata [2 x %struct.nand_op_instr]* %instrs, metadata !5247, metadata !DIExpression()), !dbg !5249
  %arrayinit.begin = getelementptr inbounds [2 x %struct.nand_op_instr], [2 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5250
  %2 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !5250
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 40, i1 false), !dbg !5250
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !5251
  store i32 0, i32* %type, align 8, !dbg !5251
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !5251
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !5251
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !5251
  store i8 112, i8* %opcode, align 8, !dbg !5251
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !5251
  %3 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5252
  %tADL_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %3, i32 0, i32 5, !dbg !5252
  %4 = load i32, i32* %tADL_min, align 4, !dbg !5252
  %add = add i32 %4, 1000, !dbg !5252
  %sub = sub i32 %add, 1, !dbg !5252
  %div = udiv i32 %sub, 1000, !dbg !5252
  %conv = zext i32 %div to i64, !dbg !5252
  %conv3 = trunc i64 %conv to i32, !dbg !5252
  store i32 %conv3, i32* %tmp, align 4, !dbg !5251
  %5 = load i32, i32* %tmp, align 4, !dbg !5252
  store i32 %5, i32* %delay_ns, align 8, !dbg !5251
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !5250
  %type4 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !5254
  store i32 2, i32* %type4, align 8, !dbg !5254
  %ctx5 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !5254
  %data = bitcast %union.anon.72* %ctx5 to %struct.nand_op_data_instr*, !dbg !5254
  %len = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !5254
  store i32 1, i32* %len, align 8, !dbg !5254
  %buf = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !5254
  %in = bitcast %union.anon.73* %buf to i8**, !dbg !5254
  %6 = load i8*, i8** %status.addr, align 8, !dbg !5254
  store i8* %6, i8** %in, align 8, !dbg !5254
  %force_8bit = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !5254
  store i8 1, i8* %force_8bit, align 8, !dbg !5254
  %delay_ns6 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !5254
  store i32 0, i32* %delay_ns6, align 8, !dbg !5254
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !5255, metadata !DIExpression()), !dbg !5256
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !5257
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5257
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 28, !dbg !5257
  %8 = load i32, i32* %cur_cs, align 4, !dbg !5257
  store i32 %8, i32* %cs, align 8, !dbg !5257
  %instrs7 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !5257
  %arraydecay = getelementptr inbounds [2 x %struct.nand_op_instr], [2 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5257
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs7, align 8, !dbg !5257
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5257
  store i32 2, i32* %ninstrs, align 8, !dbg !5257
  %9 = load i8*, i8** %status.addr, align 8, !dbg !5258
  %tobool = icmp ne i8* %9, null, !dbg !5258
  br i1 %tobool, label %if.end, label %if.then8, !dbg !5260

if.then8:                                         ; preds = %if.then
  %ninstrs9 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5261
  %10 = load i32, i32* %ninstrs9, align 8, !dbg !5262
  %dec = add i32 %10, -1, !dbg !5262
  store i32 %dec, i32* %ninstrs9, align 8, !dbg !5262
  br label %if.end, !dbg !5263

if.end:                                           ; preds = %if.then8, %if.then
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5264
  %call10 = call i32 @nand_exec_op(%struct.nand_chip* %11, %struct.nand_operation* %op) #8, !dbg !5265
  store i32 %call10, i32* %retval, align 4, !dbg !5266
  br label %return, !dbg !5266

if.end11:                                         ; preds = %entry
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5267
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %12, i32 0, i32 5, !dbg !5268
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !5269
  %13 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !5269
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5270
  call void %13(%struct.nand_chip* %14, i32 112, i32 -1, i32 -1) #8, !dbg !5267
  %15 = load i8*, i8** %status.addr, align 8, !dbg !5271
  %tobool12 = icmp ne i8* %15, null, !dbg !5271
  br i1 %tobool12, label %if.then13, label %if.end16, !dbg !5273

if.then13:                                        ; preds = %if.end11
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5274
  %legacy14 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %16, i32 0, i32 5, !dbg !5275
  %read_byte = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy14, i32 0, i32 3, !dbg !5276
  %17 = load i8 (%struct.nand_chip*)*, i8 (%struct.nand_chip*)** %read_byte, align 8, !dbg !5276
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5277
  %call15 = call zeroext i8 %17(%struct.nand_chip* %18) #8, !dbg !5274
  %19 = load i8*, i8** %status.addr, align 8, !dbg !5278
  store i8 %call15, i8* %19, align 1, !dbg !5279
  br label %if.end16, !dbg !5280

if.end16:                                         ; preds = %if.then13, %if.end11
  store i32 0, i32* %retval, align 4, !dbg !5281
  br label %return, !dbg !5281

return:                                           ; preds = %if.end16, %if.end
  %20 = load i32, i32* %retval, align 4, !dbg !5282
  ret i32 %20, !dbg !5282
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_read_data_op(%struct.nand_chip* %chip, i8* %buf, i32 %len, i1 zeroext %force_8bit, i1 zeroext %check_only) #0 !dbg !5283 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %force_8bit.addr = alloca i8, align 1
  %check_only.addr = alloca i8, align 1
  %instrs = alloca [1 x %struct.nand_op_instr], align 16
  %op = alloca %struct.nand_operation, align 8
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5286, metadata !DIExpression()), !dbg !5287
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !5288, metadata !DIExpression()), !dbg !5289
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !5290, metadata !DIExpression()), !dbg !5291
  %frombool = zext i1 %force_8bit to i8
  store i8 %frombool, i8* %force_8bit.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_8bit.addr, metadata !5292, metadata !DIExpression()), !dbg !5293
  %frombool1 = zext i1 %check_only to i8
  store i8 %frombool1, i8* %check_only.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %check_only.addr, metadata !5294, metadata !DIExpression()), !dbg !5295
  %0 = load i32, i32* %len.addr, align 4, !dbg !5296
  %tobool = icmp ne i32 %0, 0, !dbg !5296
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5298

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !5299
  %tobool2 = icmp ne i8* %1, null, !dbg !5299
  br i1 %tobool2, label %if.end, label %if.then, !dbg !5300

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -22, i32* %retval, align 4, !dbg !5301
  br label %return, !dbg !5301

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5302
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %2) #8, !dbg !5304
  br i1 %call, label %if.then3, label %if.end18, !dbg !5305

if.then3:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata [1 x %struct.nand_op_instr]* %instrs, metadata !5306, metadata !DIExpression()), !dbg !5309
  %arrayinit.begin = getelementptr inbounds [1 x %struct.nand_op_instr], [1 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5310
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !5311
  store i32 2, i32* %type, align 8, !dbg !5311
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !5311
  %data = bitcast %union.anon.72* %ctx to %struct.nand_op_data_instr*, !dbg !5311
  %len4 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !5311
  %3 = load i32, i32* %len.addr, align 4, !dbg !5311
  store i32 %3, i32* %len4, align 8, !dbg !5311
  %buf5 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !5311
  %in = bitcast %union.anon.73* %buf5 to i8**, !dbg !5311
  %4 = load i8*, i8** %buf.addr, align 8, !dbg !5311
  store i8* %4, i8** %in, align 8, !dbg !5311
  %force_8bit6 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !5311
  store i8 0, i8* %force_8bit6, align 8, !dbg !5311
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !5311
  store i32 0, i32* %delay_ns, align 8, !dbg !5311
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !5312, metadata !DIExpression()), !dbg !5313
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !5314
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5314
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 28, !dbg !5314
  %6 = load i32, i32* %cur_cs, align 4, !dbg !5314
  store i32 %6, i32* %cs, align 8, !dbg !5314
  %instrs7 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !5314
  %arraydecay = getelementptr inbounds [1 x %struct.nand_op_instr], [1 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5314
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs7, align 8, !dbg !5314
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5314
  store i32 1, i32* %ninstrs, align 8, !dbg !5314
  %7 = load i8, i8* %force_8bit.addr, align 1, !dbg !5315
  %tobool8 = trunc i8 %7 to i1, !dbg !5315
  %arrayidx = getelementptr [1 x %struct.nand_op_instr], [1 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5316
  %ctx9 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx, i32 0, i32 1, !dbg !5317
  %data10 = bitcast %union.anon.72* %ctx9 to %struct.nand_op_data_instr*, !dbg !5318
  %force_8bit11 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data10, i32 0, i32 2, !dbg !5319
  %frombool12 = zext i1 %tobool8 to i8, !dbg !5320
  store i8 %frombool12, i8* %force_8bit11, align 8, !dbg !5320
  %8 = load i8, i8* %check_only.addr, align 1, !dbg !5321
  %tobool13 = trunc i8 %8 to i1, !dbg !5321
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !5323

if.then14:                                        ; preds = %if.then3
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5324
  %call15 = call i32 @nand_check_op(%struct.nand_chip* %9, %struct.nand_operation* %op) #8, !dbg !5325
  store i32 %call15, i32* %retval, align 4, !dbg !5326
  br label %return, !dbg !5326

if.end16:                                         ; preds = %if.then3
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5327
  %call17 = call i32 @nand_exec_op(%struct.nand_chip* %10, %struct.nand_operation* %op) #8, !dbg !5328
  store i32 %call17, i32* %retval, align 4, !dbg !5329
  br label %return, !dbg !5329

if.end18:                                         ; preds = %if.end
  %11 = load i8, i8* %check_only.addr, align 1, !dbg !5330
  %tobool19 = trunc i8 %11 to i1, !dbg !5330
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !5332

if.then20:                                        ; preds = %if.end18
  store i32 0, i32* %retval, align 4, !dbg !5333
  br label %return, !dbg !5333

if.end21:                                         ; preds = %if.end18
  %12 = load i8, i8* %force_8bit.addr, align 1, !dbg !5334
  %tobool22 = trunc i8 %12 to i1, !dbg !5334
  br i1 %tobool22, label %if.then23, label %if.else, !dbg !5336

if.then23:                                        ; preds = %if.end21
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5337, metadata !DIExpression()), !dbg !5339
  %13 = load i8*, i8** %buf.addr, align 8, !dbg !5340
  store i8* %13, i8** %p, align 8, !dbg !5339
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5341, metadata !DIExpression()), !dbg !5342
  store i32 0, i32* %i, align 4, !dbg !5343
  br label %for.cond, !dbg !5345

for.cond:                                         ; preds = %for.inc, %if.then23
  %14 = load i32, i32* %i, align 4, !dbg !5346
  %15 = load i32, i32* %len.addr, align 4, !dbg !5348
  %cmp = icmp ult i32 %14, %15, !dbg !5349
  br i1 %cmp, label %for.body, label %for.end, !dbg !5350

for.body:                                         ; preds = %for.cond
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5351
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %16, i32 0, i32 5, !dbg !5352
  %read_byte = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 3, !dbg !5353
  %17 = load i8 (%struct.nand_chip*)*, i8 (%struct.nand_chip*)** %read_byte, align 8, !dbg !5353
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5354
  %call24 = call zeroext i8 %17(%struct.nand_chip* %18) #8, !dbg !5351
  %19 = load i8*, i8** %p, align 8, !dbg !5355
  %20 = load i32, i32* %i, align 4, !dbg !5356
  %idxprom = zext i32 %20 to i64, !dbg !5355
  %arrayidx25 = getelementptr i8, i8* %19, i64 %idxprom, !dbg !5355
  store i8 %call24, i8* %arrayidx25, align 1, !dbg !5357
  br label %for.inc, !dbg !5355

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4, !dbg !5358
  %inc = add i32 %21, 1, !dbg !5358
  store i32 %inc, i32* %i, align 4, !dbg !5358
  br label %for.cond, !dbg !5359, !llvm.loop !5360

for.end:                                          ; preds = %for.cond
  br label %if.end27, !dbg !5362

if.else:                                          ; preds = %if.end21
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5363
  %legacy26 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %22, i32 0, i32 5, !dbg !5365
  %read_buf = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy26, i32 0, i32 6, !dbg !5366
  %23 = load void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i8*, i32)** %read_buf, align 8, !dbg !5366
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5367
  %25 = load i8*, i8** %buf.addr, align 8, !dbg !5368
  %26 = load i32, i32* %len.addr, align 4, !dbg !5369
  call void %23(%struct.nand_chip* %24, i8* %25, i32 %26) #8, !dbg !5363
  br label %if.end27

if.end27:                                         ; preds = %if.else, %for.end
  store i32 0, i32* %retval, align 4, !dbg !5370
  br label %return, !dbg !5370

return:                                           ; preds = %if.end27, %if.then20, %if.end16, %if.then14, %if.then
  %27 = load i32, i32* %retval, align 4, !dbg !5371
  ret i32 %27, !dbg !5371
}

; Function Attrs: noredzone
declare dso_local void @__const_udelay(i64) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_exit_status_op(%struct.nand_chip* %chip) #0 !dbg !5372 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %instrs = alloca [1 x %struct.nand_op_instr], align 16
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5373, metadata !DIExpression()), !dbg !5374
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5375
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %0) #8, !dbg !5377
  br i1 %call, label %if.then, label %if.end, !dbg !5378

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [1 x %struct.nand_op_instr]* %instrs, metadata !5379, metadata !DIExpression()), !dbg !5381
  %1 = bitcast [1 x %struct.nand_op_instr]* %instrs to i8*, !dbg !5381
  call void @llvm.memset.p0i8.i64(i8* align 16 %1, i8 0, i64 40, i1 false), !dbg !5381
  %2 = bitcast i8* %1 to [1 x { i32, [4 x i8], { %struct.nand_op_cmd_instr, [23 x i8] }, i32, [4 x i8] }]*, !dbg !5381
  %3 = getelementptr inbounds [1 x { i32, [4 x i8], { %struct.nand_op_cmd_instr, [23 x i8] }, i32, [4 x i8] }], [1 x { i32, [4 x i8], { %struct.nand_op_cmd_instr, [23 x i8] }, i32, [4 x i8] }]* %2, i32 0, i32 0, !dbg !5381
  %4 = getelementptr inbounds { i32, [4 x i8], { %struct.nand_op_cmd_instr, [23 x i8] }, i32, [4 x i8] }, { i32, [4 x i8], { %struct.nand_op_cmd_instr, [23 x i8] }, i32, [4 x i8] }* %3, i32 0, i32 2, !dbg !5381
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !5382, metadata !DIExpression()), !dbg !5383
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !5384
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5384
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 28, !dbg !5384
  %6 = load i32, i32* %cur_cs, align 4, !dbg !5384
  store i32 %6, i32* %cs, align 8, !dbg !5384
  %instrs1 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !5384
  %arraydecay = getelementptr inbounds [1 x %struct.nand_op_instr], [1 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5384
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs1, align 8, !dbg !5384
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5384
  store i32 1, i32* %ninstrs, align 8, !dbg !5384
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5385
  %call2 = call i32 @nand_exec_op(%struct.nand_chip* %7, %struct.nand_operation* %op) #8, !dbg !5386
  store i32 %call2, i32* %retval, align 4, !dbg !5387
  br label %return, !dbg !5387

if.end:                                           ; preds = %entry
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5388
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %8, i32 0, i32 5, !dbg !5389
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !5390
  %9 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !5390
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5391
  call void %9(%struct.nand_chip* %10, i32 0, i32 -1, i32 -1) #8, !dbg !5388
  store i32 0, i32* %retval, align 4, !dbg !5392
  br label %return, !dbg !5392

return:                                           ; preds = %if.end, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !5393
  ret i32 %11, !dbg !5393
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_gpio_waitrdy(%struct.nand_chip* %chip, %struct.gpio_desc* %gpiod, i64 %timeout_ms) #0 !dbg !5394 {
entry:
  %retval.i = alloca i64, align 8
  %m.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr.i, metadata !5085, metadata !DIExpression()), !dbg !5400
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %gpiod.addr = alloca %struct.gpio_desc*, align 8
  %timeout_ms.addr = alloca i64, align 8
  %tmp = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5402, metadata !DIExpression()), !dbg !5403
  store %struct.gpio_desc* %gpiod, %struct.gpio_desc** %gpiod.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gpio_desc** %gpiod.addr, metadata !5404, metadata !DIExpression()), !dbg !5405
  store i64 %timeout_ms, i64* %timeout_ms.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %timeout_ms.addr, metadata !5406, metadata !DIExpression()), !dbg !5407
  %0 = load volatile i64, i64* @jiffies, align 8, !dbg !5408
  %1 = load i64, i64* %timeout_ms.addr, align 8, !dbg !5409
  %conv = trunc i64 %1 to i32, !dbg !5409
  store i32 %conv, i32* %m.addr.i, align 4
  %2 = load i32, i32* %m.addr.i, align 4, !dbg !5410
  %3 = call i1 @llvm.is.constant.i32(i32 %2) #9, !dbg !5411
  br i1 %3, label %if.then.i, label %if.else.i, !dbg !5412

if.then.i:                                        ; preds = %entry
  %4 = load i32, i32* %m.addr.i, align 4, !dbg !5413
  %cmp.i = icmp slt i32 %4, 0, !dbg !5414
  br i1 %cmp.i, label %if.then1.i, label %if.end.i, !dbg !5415

if.then1.i:                                       ; preds = %if.then.i
  store i64 4611686018427387902, i64* %retval.i, align 8, !dbg !5416
  br label %msecs_to_jiffies.exit, !dbg !5416

if.end.i:                                         ; preds = %if.then.i
  %5 = load i32, i32* %m.addr.i, align 4, !dbg !5417
  %call.i = call i64 @_msecs_to_jiffies(i32 %5) #10, !dbg !5418
  store i64 %call.i, i64* %retval.i, align 8, !dbg !5419
  br label %msecs_to_jiffies.exit, !dbg !5419

if.else.i:                                        ; preds = %entry
  %6 = load i32, i32* %m.addr.i, align 4, !dbg !5420
  %call2.i = call i64 @__msecs_to_jiffies(i32 %6) #10, !dbg !5421
  store i64 %call2.i, i64* %retval.i, align 8, !dbg !5422
  br label %msecs_to_jiffies.exit, !dbg !5422

msecs_to_jiffies.exit:                            ; preds = %if.then1.i, %if.end.i, %if.else.i
  %7 = load i64, i64* %retval.i, align 8, !dbg !5423
  %add = add i64 %0, %7, !dbg !5424
  %add1 = add i64 %add, 1, !dbg !5425
  store i64 %add1, i64* %timeout_ms.addr, align 8, !dbg !5426
  br label %do.body, !dbg !5427

do.body:                                          ; preds = %do.cond, %msecs_to_jiffies.exit
  %8 = load %struct.gpio_desc*, %struct.gpio_desc** %gpiod.addr, align 8, !dbg !5428
  %call2 = call i32 @gpiod_get_value_cansleep(%struct.gpio_desc* %8) #8, !dbg !5431
  %tobool = icmp ne i32 %call2, 0, !dbg !5431
  br i1 %tobool, label %if.then, label %if.end, !dbg !5432

if.then:                                          ; preds = %do.body
  store i32 0, i32* %retval, align 4, !dbg !5433
  br label %return, !dbg !5433

if.end:                                           ; preds = %do.body
  call void @___might_sleep(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 690, i32 0) #8, !dbg !5434
  %call3 = call i32 @_cond_resched() #8, !dbg !5434
  store i32 %call3, i32* %tmp, align 4, !dbg !5434
  %9 = load i32, i32* %tmp, align 4, !dbg !5434
  br label %do.cond, !dbg !5436

do.cond:                                          ; preds = %if.end
  %10 = load volatile i64, i64* @jiffies, align 8, !dbg !5437
  %11 = load i64, i64* %timeout_ms.addr, align 8, !dbg !5437
  %sub = sub i64 %10, %11, !dbg !5437
  %cmp = icmp slt i64 %sub, 0, !dbg !5437
  br i1 %cmp, label %do.body, label %do.end, !dbg !5436, !llvm.loop !5438

do.end:                                           ; preds = %do.cond
  %12 = load %struct.gpio_desc*, %struct.gpio_desc** %gpiod.addr, align 8, !dbg !5440
  %call5 = call i32 @gpiod_get_value_cansleep(%struct.gpio_desc* %12) #8, !dbg !5441
  %tobool6 = icmp ne i32 %call5, 0, !dbg !5441
  %13 = zext i1 %tobool6 to i64, !dbg !5441
  %cond = select i1 %tobool6, i32 0, i32 -110, !dbg !5441
  store i32 %cond, i32* %retval, align 4, !dbg !5442
  br label %return, !dbg !5442

return:                                           ; preds = %do.end, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !5443
  ret i32 %14, !dbg !5443
}

; Function Attrs: noredzone
declare dso_local i32 @gpiod_get_value_cansleep(%struct.gpio_desc*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @___might_sleep(i8* %file, i32 %line, i32 %preempt_offset) #0 !dbg !5444 {
entry:
  %file.addr = alloca i8*, align 8
  %line.addr = alloca i32, align 4
  %preempt_offset.addr = alloca i32, align 4
  store i8* %file, i8** %file.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %file.addr, metadata !5448, metadata !DIExpression()), !dbg !5449
  store i32 %line, i32* %line.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %line.addr, metadata !5450, metadata !DIExpression()), !dbg !5451
  store i32 %preempt_offset, i32* %preempt_offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %preempt_offset.addr, metadata !5452, metadata !DIExpression()), !dbg !5453
  ret void, !dbg !5454
}

; Function Attrs: noredzone
declare dso_local i32 @_cond_resched() #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @panic_nand_wait(%struct.nand_chip* %chip, i64 %timeo) #0 !dbg !5455 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %timeo.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %ret = alloca i32, align 4
  %status = alloca i8, align 1
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5458, metadata !DIExpression()), !dbg !5459
  store i64 %timeo, i64* %timeo.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %timeo.addr, metadata !5460, metadata !DIExpression()), !dbg !5461
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5462, metadata !DIExpression()), !dbg !5463
  store i32 0, i32* %i, align 4, !dbg !5464
  br label %for.cond, !dbg !5466

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !5467
  %conv = sext i32 %0 to i64, !dbg !5467
  %1 = load i64, i64* %timeo.addr, align 8, !dbg !5469
  %cmp = icmp ult i64 %conv, %1, !dbg !5470
  br i1 %cmp, label %for.body, label %for.end, !dbg !5471

for.body:                                         ; preds = %for.cond
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5472
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 5, !dbg !5475
  %dev_ready = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 9, !dbg !5476
  %3 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %dev_ready, align 8, !dbg !5476
  %tobool = icmp ne i32 (%struct.nand_chip*)* %3, null, !dbg !5472
  br i1 %tobool, label %if.then, label %if.else, !dbg !5477

if.then:                                          ; preds = %for.body
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5478
  %legacy2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 5, !dbg !5481
  %dev_ready3 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy2, i32 0, i32 9, !dbg !5482
  %5 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %dev_ready3, align 8, !dbg !5482
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5483
  %call = call i32 %5(%struct.nand_chip* %6) #8, !dbg !5478
  %tobool4 = icmp ne i32 %call, 0, !dbg !5478
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !5484

if.then5:                                         ; preds = %if.then
  br label %for.end, !dbg !5485

if.end:                                           ; preds = %if.then
  br label %if.end14, !dbg !5486

if.else:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5487, metadata !DIExpression()), !dbg !5489
  call void @llvm.dbg.declare(metadata i8* %status, metadata !5490, metadata !DIExpression()), !dbg !5491
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5492
  %call6 = call i32 @nand_read_data_op(%struct.nand_chip* %7, i8* %status, i32 1, i1 zeroext true, i1 zeroext false) #8, !dbg !5493
  store i32 %call6, i32* %ret, align 4, !dbg !5494
  %8 = load i32, i32* %ret, align 4, !dbg !5495
  %tobool7 = icmp ne i32 %8, 0, !dbg !5495
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !5497

if.then8:                                         ; preds = %if.else
  br label %for.end, !dbg !5498

if.end9:                                          ; preds = %if.else
  %9 = load i8, i8* %status, align 1, !dbg !5499
  %conv10 = zext i8 %9 to i32, !dbg !5499
  %and = and i32 %conv10, 64, !dbg !5501
  %tobool11 = icmp ne i32 %and, 0, !dbg !5501
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !5502

if.then12:                                        ; preds = %if.end9
  br label %for.end, !dbg !5503

if.end13:                                         ; preds = %if.end9
  br label %if.end14

if.end14:                                         ; preds = %if.end13, %if.end
  call void @__const_udelay(i64 4295000) #8, !dbg !5504
  br label %for.inc, !dbg !5509

for.inc:                                          ; preds = %if.end14
  %10 = load i32, i32* %i, align 4, !dbg !5510
  %inc = add i32 %10, 1, !dbg !5510
  store i32 %inc, i32* %i, align 4, !dbg !5510
  br label %for.cond, !dbg !5511, !llvm.loop !5512

for.end:                                          ; preds = %if.then8, %if.then12, %if.then5, %for.cond
  ret void, !dbg !5514
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_choose_best_sdr_timings(%struct.nand_chip* %chip, %struct.nand_interface_config* %iface, %struct.nand_sdr_timings* %spec_timings) #0 !dbg !5515 {
entry:
  %x.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i, metadata !5519, metadata !DIExpression()), !dbg !5524
  %r.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %r.i, metadata !5529, metadata !DIExpression()), !dbg !5530
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %iface.addr = alloca %struct.nand_interface_config*, align 8
  %spec_timings.addr = alloca %struct.nand_sdr_timings*, align 8
  %ops = alloca %struct.nand_controller_ops*, align 8
  %best_mode = alloca i32, align 4
  %mode = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5531, metadata !DIExpression()), !dbg !5532
  store %struct.nand_interface_config* %iface, %struct.nand_interface_config** %iface.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_interface_config** %iface.addr, metadata !5533, metadata !DIExpression()), !dbg !5534
  store %struct.nand_sdr_timings* %spec_timings, %struct.nand_sdr_timings** %spec_timings.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %spec_timings.addr, metadata !5535, metadata !DIExpression()), !dbg !5536
  call void @llvm.dbg.declare(metadata %struct.nand_controller_ops** %ops, metadata !5537, metadata !DIExpression()), !dbg !5538
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5539
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 30, !dbg !5540
  %1 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !5540
  %ops1 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %1, i32 0, i32 1, !dbg !5541
  %2 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops1, align 8, !dbg !5541
  store %struct.nand_controller_ops* %2, %struct.nand_controller_ops** %ops, align 8, !dbg !5538
  call void @llvm.dbg.declare(metadata i32* %best_mode, metadata !5542, metadata !DIExpression()), !dbg !5543
  store i32 0, i32* %best_mode, align 4, !dbg !5543
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !5544, metadata !DIExpression()), !dbg !5545
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5546, metadata !DIExpression()), !dbg !5547
  %3 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface.addr, align 8, !dbg !5548
  %type = getelementptr inbounds %struct.nand_interface_config, %struct.nand_interface_config* %3, i32 0, i32 0, !dbg !5549
  store i32 0, i32* %type, align 8, !dbg !5550
  %4 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %spec_timings.addr, align 8, !dbg !5551
  %tobool = icmp ne %struct.nand_sdr_timings* %4, null, !dbg !5551
  br i1 %tobool, label %if.then, label %if.else, !dbg !5552

if.then:                                          ; preds = %entry
  %5 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface.addr, align 8, !dbg !5553
  %timings = getelementptr inbounds %struct.nand_interface_config, %struct.nand_interface_config* %5, i32 0, i32 1, !dbg !5555
  %6 = getelementptr inbounds %struct.nand_timings, %struct.nand_timings* %timings, i32 0, i32 1, !dbg !5556
  %sdr = bitcast %union.anon.71* %6 to %struct.nand_sdr_timings*, !dbg !5556
  %7 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %spec_timings.addr, align 8, !dbg !5557
  %8 = bitcast %struct.nand_sdr_timings* %sdr to i8*, !dbg !5558
  %9 = bitcast %struct.nand_sdr_timings* %7 to i8*, !dbg !5558
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 176, i1 false), !dbg !5558
  %10 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %spec_timings.addr, align 8, !dbg !5559
  %call = call i32 @onfi_find_closest_sdr_mode(%struct.nand_sdr_timings* %10) #8, !dbg !5560
  %11 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface.addr, align 8, !dbg !5561
  %timings2 = getelementptr inbounds %struct.nand_interface_config, %struct.nand_interface_config* %11, i32 0, i32 1, !dbg !5562
  %mode3 = getelementptr inbounds %struct.nand_timings, %struct.nand_timings* %timings2, i32 0, i32 0, !dbg !5563
  store i32 %call, i32* %mode3, align 8, !dbg !5564
  %12 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !5565
  %setup_interface = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %12, i32 0, i32 3, !dbg !5566
  %13 = load i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)*, i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)** %setup_interface, align 8, !dbg !5566
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5567
  %15 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface.addr, align 8, !dbg !5568
  %call4 = call i32 %13(%struct.nand_chip* %14, i32 -1, %struct.nand_interface_config* %15) #8, !dbg !5565
  store i32 %call4, i32* %ret, align 4, !dbg !5569
  %16 = load i32, i32* %ret, align 4, !dbg !5570
  %tobool5 = icmp ne i32 %16, 0, !dbg !5570
  br i1 %tobool5, label %if.end, label %if.then6, !dbg !5572

if.then6:                                         ; preds = %if.then
  %17 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface.addr, align 8, !dbg !5573
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5575
  %best_interface_config = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 8, !dbg !5576
  store %struct.nand_interface_config* %17, %struct.nand_interface_config** %best_interface_config, align 8, !dbg !5577
  %19 = load i32, i32* %ret, align 4, !dbg !5578
  store i32 %19, i32* %retval, align 4, !dbg !5579
  br label %return, !dbg !5579

if.end:                                           ; preds = %if.then
  %20 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface.addr, align 8, !dbg !5580
  %timings7 = getelementptr inbounds %struct.nand_interface_config, %struct.nand_interface_config* %20, i32 0, i32 1, !dbg !5581
  %mode8 = getelementptr inbounds %struct.nand_timings, %struct.nand_timings* %timings7, i32 0, i32 0, !dbg !5582
  %21 = load i32, i32* %mode8, align 8, !dbg !5582
  store i32 %21, i32* %best_mode, align 4, !dbg !5583
  br label %if.end15, !dbg !5584

if.else:                                          ; preds = %entry
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5585
  %parameters = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %22, i32 0, i32 2, !dbg !5586
  %onfi = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters, i32 0, i32 4, !dbg !5587
  %23 = load %struct.onfi_params*, %struct.onfi_params** %onfi, align 8, !dbg !5587
  %tobool9 = icmp ne %struct.onfi_params* %23, null, !dbg !5585
  br i1 %tobool9, label %if.then10, label %if.end14, !dbg !5588

if.then10:                                        ; preds = %if.else
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5589
  %parameters11 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %24, i32 0, i32 2, !dbg !5590
  %onfi12 = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters11, i32 0, i32 4, !dbg !5591
  %25 = load %struct.onfi_params*, %struct.onfi_params** %onfi12, align 8, !dbg !5591
  %async_timing_mode = getelementptr inbounds %struct.onfi_params, %struct.onfi_params* %25, i32 0, i32 5, !dbg !5592
  %26 = load i16, i16* %async_timing_mode, align 4, !dbg !5592
  %conv = zext i16 %26 to i32, !dbg !5589
  store i32 %conv, i32* %x.addr.i, align 4
  %27 = load i32, i32* %x.addr.i, align 4, !dbg !5593
  %28 = call i32 asm "bsrl $1,$0", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %27, i32 -1) #11, !dbg !5594, !srcloc !5595
  store i32 %28, i32* %r.i, align 4, !dbg !5594
  %29 = load i32, i32* %r.i, align 4, !dbg !5596
  %add.i = add i32 %29, 1, !dbg !5597
  %sub = sub i32 %add.i, 1, !dbg !5598
  store i32 %sub, i32* %best_mode, align 4, !dbg !5599
  br label %if.end14, !dbg !5600

if.end14:                                         ; preds = %if.then10, %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14, %if.end
  %30 = load i32, i32* %best_mode, align 4, !dbg !5601
  store i32 %30, i32* %mode, align 4, !dbg !5603
  br label %for.cond, !dbg !5604

for.cond:                                         ; preds = %for.inc, %if.end15
  %31 = load i32, i32* %mode, align 4, !dbg !5605
  %cmp = icmp sge i32 %31, 0, !dbg !5607
  br i1 %cmp, label %for.body, label %for.end, !dbg !5608

for.body:                                         ; preds = %for.cond
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5609
  %33 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface.addr, align 8, !dbg !5611
  %34 = load i32, i32* %mode, align 4, !dbg !5612
  call void @onfi_fill_interface_config(%struct.nand_chip* %32, %struct.nand_interface_config* %33, i32 0, i32 %34) #8, !dbg !5613
  %35 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !5614
  %setup_interface17 = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %35, i32 0, i32 3, !dbg !5615
  %36 = load i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)*, i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)** %setup_interface17, align 8, !dbg !5615
  %37 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5616
  %38 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface.addr, align 8, !dbg !5617
  %call18 = call i32 %36(%struct.nand_chip* %37, i32 -1, %struct.nand_interface_config* %38) #8, !dbg !5614
  store i32 %call18, i32* %ret, align 4, !dbg !5618
  %39 = load i32, i32* %ret, align 4, !dbg !5619
  %tobool19 = icmp ne i32 %39, 0, !dbg !5619
  br i1 %tobool19, label %if.end21, label %if.then20, !dbg !5621

if.then20:                                        ; preds = %for.body
  br label %for.end, !dbg !5622

if.end21:                                         ; preds = %for.body
  br label %for.inc, !dbg !5623

for.inc:                                          ; preds = %if.end21
  %40 = load i32, i32* %mode, align 4, !dbg !5624
  %dec = add i32 %40, -1, !dbg !5624
  store i32 %dec, i32* %mode, align 4, !dbg !5624
  br label %for.cond, !dbg !5625, !llvm.loop !5626

for.end:                                          ; preds = %if.then20, %for.cond
  %41 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface.addr, align 8, !dbg !5628
  %42 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5629
  %best_interface_config22 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %42, i32 0, i32 8, !dbg !5630
  store %struct.nand_interface_config* %41, %struct.nand_interface_config** %best_interface_config22, align 8, !dbg !5631
  store i32 0, i32* %retval, align 4, !dbg !5632
  br label %return, !dbg !5632

return:                                           ; preds = %for.end, %if.then6
  %43 = load i32, i32* %retval, align 4, !dbg !5633
  ret i32 %43, !dbg !5633
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noredzone
declare dso_local i32 @onfi_find_closest_sdr_mode(%struct.nand_sdr_timings*) #2

; Function Attrs: noredzone
declare dso_local void @onfi_fill_interface_config(%struct.nand_chip*, %struct.nand_interface_config*, i32, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_read_page_op(%struct.nand_chip* %chip, i32 %page, i32 %offset_in_page, i8* %buf, i32 %len) #0 !dbg !5634 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %offset_in_page.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5637, metadata !DIExpression()), !dbg !5638
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !5639, metadata !DIExpression()), !dbg !5640
  store i32 %offset_in_page, i32* %offset_in_page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_page.addr, metadata !5641, metadata !DIExpression()), !dbg !5642
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !5643, metadata !DIExpression()), !dbg !5644
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !5645, metadata !DIExpression()), !dbg !5646
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !5647, metadata !DIExpression()), !dbg !5648
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5649
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !5650
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !5648
  %1 = load i32, i32* %len.addr, align 4, !dbg !5651
  %tobool = icmp ne i32 %1, 0, !dbg !5651
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5653

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !5654
  %tobool1 = icmp ne i8* %2, null, !dbg !5654
  br i1 %tobool1, label %if.end, label %if.then, !dbg !5655

if.then:                                          ; preds = %land.lhs.true
  store i32 -22, i32* %retval, align 4, !dbg !5656
  br label %return, !dbg !5656

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %offset_in_page.addr, align 4, !dbg !5657
  %4 = load i32, i32* %len.addr, align 4, !dbg !5659
  %add = add i32 %3, %4, !dbg !5660
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !5661
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 4, !dbg !5662
  %6 = load i32, i32* %writesize, align 4, !dbg !5662
  %7 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !5663
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %7, i32 0, i32 6, !dbg !5664
  %8 = load i32, i32* %oobsize, align 4, !dbg !5664
  %add2 = add i32 %6, %8, !dbg !5665
  %cmp = icmp ugt i32 %add, %add2, !dbg !5666
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !5667

if.then3:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !5668
  br label %return, !dbg !5668

if.end4:                                          ; preds = %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5669
  %call5 = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %9) #8, !dbg !5671
  br i1 %call5, label %if.then6, label %if.end13, !dbg !5672

if.then6:                                         ; preds = %if.end4
  %10 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !5673
  %writesize7 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %10, i32 0, i32 4, !dbg !5676
  %11 = load i32, i32* %writesize7, align 4, !dbg !5676
  %cmp8 = icmp ugt i32 %11, 512, !dbg !5677
  br i1 %cmp8, label %if.then9, label %if.end11, !dbg !5678

if.then9:                                         ; preds = %if.then6
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5679
  %13 = load i32, i32* %page.addr, align 4, !dbg !5680
  %14 = load i32, i32* %offset_in_page.addr, align 4, !dbg !5681
  %15 = load i8*, i8** %buf.addr, align 8, !dbg !5682
  %16 = load i32, i32* %len.addr, align 4, !dbg !5683
  %call10 = call i32 @nand_lp_exec_read_page_op(%struct.nand_chip* %12, i32 %13, i32 %14, i8* %15, i32 %16) #8, !dbg !5684
  store i32 %call10, i32* %retval, align 4, !dbg !5685
  br label %return, !dbg !5685

if.end11:                                         ; preds = %if.then6
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5686
  %18 = load i32, i32* %page.addr, align 4, !dbg !5687
  %19 = load i32, i32* %offset_in_page.addr, align 4, !dbg !5688
  %20 = load i8*, i8** %buf.addr, align 8, !dbg !5689
  %21 = load i32, i32* %len.addr, align 4, !dbg !5690
  %call12 = call i32 @nand_sp_exec_read_page_op(%struct.nand_chip* %17, i32 %18, i32 %19, i8* %20, i32 %21) #8, !dbg !5691
  store i32 %call12, i32* %retval, align 4, !dbg !5692
  br label %return, !dbg !5692

if.end13:                                         ; preds = %if.end4
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5693
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %22, i32 0, i32 5, !dbg !5694
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !5695
  %23 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !5695
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5696
  %25 = load i32, i32* %offset_in_page.addr, align 4, !dbg !5697
  %26 = load i32, i32* %page.addr, align 4, !dbg !5698
  call void %23(%struct.nand_chip* %24, i32 0, i32 %25, i32 %26) #8, !dbg !5693
  %27 = load i32, i32* %len.addr, align 4, !dbg !5699
  %tobool14 = icmp ne i32 %27, 0, !dbg !5699
  br i1 %tobool14, label %if.then15, label %if.end17, !dbg !5701

if.then15:                                        ; preds = %if.end13
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5702
  %legacy16 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %28, i32 0, i32 5, !dbg !5703
  %read_buf = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy16, i32 0, i32 6, !dbg !5704
  %29 = load void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i8*, i32)** %read_buf, align 8, !dbg !5704
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5705
  %31 = load i8*, i8** %buf.addr, align 8, !dbg !5706
  %32 = load i32, i32* %len.addr, align 4, !dbg !5707
  call void %29(%struct.nand_chip* %30, i8* %31, i32 %32) #8, !dbg !5702
  br label %if.end17, !dbg !5702

if.end17:                                         ; preds = %if.then15, %if.end13
  store i32 0, i32* %retval, align 4, !dbg !5708
  br label %return, !dbg !5708

return:                                           ; preds = %if.end17, %if.end11, %if.then9, %if.then3, %if.then
  %33 = load i32, i32* %retval, align 4, !dbg !5709
  ret i32 %33, !dbg !5709
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_lp_exec_read_page_op(%struct.nand_chip* %chip, i32 %page, i32 %offset_in_page, i8* %buf, i32 %len) #0 !dbg !5710 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %offset_in_page.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %addrs = alloca [5 x i8], align 1
  %instrs = alloca [5 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp16 = alloca i64, align 8
  %tmp22 = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5711, metadata !DIExpression()), !dbg !5712
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !5713, metadata !DIExpression()), !dbg !5714
  store i32 %offset_in_page, i32* %offset_in_page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_page.addr, metadata !5715, metadata !DIExpression()), !dbg !5716
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !5717, metadata !DIExpression()), !dbg !5718
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !5719, metadata !DIExpression()), !dbg !5720
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !5721, metadata !DIExpression()), !dbg !5722
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5723
  %call = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %0) #8, !dbg !5724
  %call1 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call) #8, !dbg !5725
  store %struct.nand_sdr_timings* %call1, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5722
  call void @llvm.dbg.declare(metadata [5 x i8]* %addrs, metadata !5726, metadata !DIExpression()), !dbg !5730
  call void @llvm.dbg.declare(metadata [5 x %struct.nand_op_instr]* %instrs, metadata !5731, metadata !DIExpression()), !dbg !5733
  %arrayinit.begin = getelementptr inbounds [5 x %struct.nand_op_instr], [5 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5734
  %1 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !5734
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 40, i1 false), !dbg !5734
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !5735
  store i32 0, i32* %type, align 8, !dbg !5735
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !5735
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !5735
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !5735
  store i8 0, i8* %opcode, align 8, !dbg !5735
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !5735
  store i32 0, i32* %delay_ns, align 8, !dbg !5735
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !5734
  %type2 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !5736
  store i32 1, i32* %type2, align 8, !dbg !5736
  %ctx3 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !5736
  %addr = bitcast %union.anon.72* %ctx3 to %struct.nand_op_addr_instr*, !dbg !5736
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !5736
  store i32 4, i32* %naddrs, align 8, !dbg !5736
  %addrs4 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 1, !dbg !5736
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %addrs, i64 0, i64 0, !dbg !5736
  store i8* %arraydecay, i8** %addrs4, align 8, !dbg !5736
  %delay_ns5 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !5736
  store i32 0, i32* %delay_ns5, align 8, !dbg !5736
  %arrayinit.element6 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i64 1, !dbg !5734
  %2 = bitcast %struct.nand_op_instr* %arrayinit.element6 to i8*, !dbg !5734
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 40, i1 false), !dbg !5734
  %type7 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element6, i32 0, i32 0, !dbg !5737
  store i32 0, i32* %type7, align 8, !dbg !5737
  %ctx8 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element6, i32 0, i32 1, !dbg !5737
  %cmd9 = bitcast %union.anon.72* %ctx8 to %struct.nand_op_cmd_instr*, !dbg !5737
  %opcode10 = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd9, i32 0, i32 0, !dbg !5737
  store i8 48, i8* %opcode10, align 8, !dbg !5737
  %delay_ns11 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element6, i32 0, i32 2, !dbg !5737
  %3 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5738
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %3, i32 0, i32 32, !dbg !5738
  %4 = load i32, i32* %tWB_max, align 8, !dbg !5738
  %add = add i32 %4, 1000, !dbg !5738
  %sub = sub i32 %add, 1, !dbg !5738
  %div = udiv i32 %sub, 1000, !dbg !5738
  %conv = zext i32 %div to i64, !dbg !5738
  %conv12 = trunc i64 %conv to i32, !dbg !5738
  store i32 %conv12, i32* %tmp, align 4, !dbg !5737
  %5 = load i32, i32* %tmp, align 4, !dbg !5738
  store i32 %5, i32* %delay_ns11, align 8, !dbg !5737
  %arrayinit.element13 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element6, i64 1, !dbg !5734
  %type14 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element13, i32 0, i32 0, !dbg !5740
  store i32 4, i32* %type14, align 8, !dbg !5740
  %ctx15 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element13, i32 0, i32 1, !dbg !5740
  %6 = bitcast %union.anon.72* %ctx15 to i8*, !dbg !5740
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false), !dbg !5740
  %waitrdy = bitcast %union.anon.72* %ctx15 to %struct.nand_op_waitrdy_instr*, !dbg !5740
  %timeout_ms = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !5740
  %7 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5741
  %tR_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %7, i32 0, i32 3, !dbg !5741
  %8 = load i64, i64* %tR_max, align 8, !dbg !5741
  %add17 = add i64 %8, 1000000000, !dbg !5741
  %sub18 = sub i64 %add17, 1, !dbg !5741
  %div19 = udiv i64 %sub18, 1000000000, !dbg !5741
  store i64 %div19, i64* %tmp16, align 8, !dbg !5740
  %9 = load i64, i64* %tmp16, align 8, !dbg !5741
  %conv20 = trunc i64 %9 to i32, !dbg !5740
  store i32 %conv20, i32* %timeout_ms, align 8, !dbg !5740
  %delay_ns21 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element13, i32 0, i32 2, !dbg !5740
  %10 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5743
  %tRR_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %10, i32 0, i32 30, !dbg !5743
  %11 = load i32, i32* %tRR_min, align 8, !dbg !5743
  %add23 = add i32 %11, 1000, !dbg !5743
  %sub24 = sub i32 %add23, 1, !dbg !5743
  %div25 = udiv i32 %sub24, 1000, !dbg !5743
  %conv26 = zext i32 %div25 to i64, !dbg !5743
  %conv27 = trunc i64 %conv26 to i32, !dbg !5743
  store i32 %conv27, i32* %tmp22, align 4, !dbg !5740
  %12 = load i32, i32* %tmp22, align 4, !dbg !5743
  store i32 %12, i32* %delay_ns21, align 8, !dbg !5740
  %arrayinit.element28 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element13, i64 1, !dbg !5734
  %type29 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element28, i32 0, i32 0, !dbg !5745
  store i32 2, i32* %type29, align 8, !dbg !5745
  %ctx30 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element28, i32 0, i32 1, !dbg !5745
  %data = bitcast %union.anon.72* %ctx30 to %struct.nand_op_data_instr*, !dbg !5745
  %len31 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !5745
  %13 = load i32, i32* %len.addr, align 4, !dbg !5745
  store i32 %13, i32* %len31, align 8, !dbg !5745
  %buf32 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !5745
  %in = bitcast %union.anon.73* %buf32 to i8**, !dbg !5745
  %14 = load i8*, i8** %buf.addr, align 8, !dbg !5745
  store i8* %14, i8** %in, align 8, !dbg !5745
  %force_8bit = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !5745
  store i8 0, i8* %force_8bit, align 8, !dbg !5745
  %delay_ns33 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element28, i32 0, i32 2, !dbg !5745
  store i32 0, i32* %delay_ns33, align 8, !dbg !5745
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !5746, metadata !DIExpression()), !dbg !5747
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !5748
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5748
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 28, !dbg !5748
  %16 = load i32, i32* %cur_cs, align 4, !dbg !5748
  store i32 %16, i32* %cs, align 8, !dbg !5748
  %instrs34 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !5748
  %arraydecay35 = getelementptr inbounds [5 x %struct.nand_op_instr], [5 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5748
  store %struct.nand_op_instr* %arraydecay35, %struct.nand_op_instr** %instrs34, align 8, !dbg !5748
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5748
  store i32 5, i32* %ninstrs, align 8, !dbg !5748
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5749, metadata !DIExpression()), !dbg !5750
  %17 = load i32, i32* %len.addr, align 4, !dbg !5751
  %tobool = icmp ne i32 %17, 0, !dbg !5751
  br i1 %tobool, label %if.end, label %if.then, !dbg !5753

if.then:                                          ; preds = %entry
  %ninstrs36 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5754
  %18 = load i32, i32* %ninstrs36, align 8, !dbg !5755
  %dec = add i32 %18, -1, !dbg !5755
  store i32 %dec, i32* %ninstrs36, align 8, !dbg !5755
  br label %if.end, !dbg !5756

if.end:                                           ; preds = %if.then, %entry
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5757
  %arraydecay37 = getelementptr inbounds [5 x i8], [5 x i8]* %addrs, i64 0, i64 0, !dbg !5758
  %20 = load i32, i32* %offset_in_page.addr, align 4, !dbg !5759
  %call38 = call i32 @nand_fill_column_cycles(%struct.nand_chip* %19, i8* %arraydecay37, i32 %20) #8, !dbg !5760
  store i32 %call38, i32* %ret, align 4, !dbg !5761
  %21 = load i32, i32* %ret, align 4, !dbg !5762
  %cmp = icmp slt i32 %21, 0, !dbg !5764
  br i1 %cmp, label %if.then40, label %if.end41, !dbg !5765

if.then40:                                        ; preds = %if.end
  %22 = load i32, i32* %ret, align 4, !dbg !5766
  store i32 %22, i32* %retval, align 4, !dbg !5767
  br label %return, !dbg !5767

if.end41:                                         ; preds = %if.end
  %23 = load i32, i32* %page.addr, align 4, !dbg !5768
  %conv42 = trunc i32 %23 to i8, !dbg !5768
  %arrayidx = getelementptr [5 x i8], [5 x i8]* %addrs, i64 0, i64 2, !dbg !5769
  store i8 %conv42, i8* %arrayidx, align 1, !dbg !5770
  %24 = load i32, i32* %page.addr, align 4, !dbg !5771
  %shr = lshr i32 %24, 8, !dbg !5772
  %conv43 = trunc i32 %shr to i8, !dbg !5771
  %arrayidx44 = getelementptr [5 x i8], [5 x i8]* %addrs, i64 0, i64 3, !dbg !5773
  store i8 %conv43, i8* %arrayidx44, align 1, !dbg !5774
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5775
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %25, i32 0, i32 6, !dbg !5777
  %26 = load i32, i32* %options, align 8, !dbg !5777
  %conv45 = zext i32 %26 to i64, !dbg !5775
  %and = and i64 %conv45, 16384, !dbg !5778
  %tobool46 = icmp ne i64 %and, 0, !dbg !5778
  br i1 %tobool46, label %if.then47, label %if.end55, !dbg !5779

if.then47:                                        ; preds = %if.end41
  %27 = load i32, i32* %page.addr, align 4, !dbg !5780
  %shr48 = lshr i32 %27, 16, !dbg !5782
  %conv49 = trunc i32 %shr48 to i8, !dbg !5780
  %arrayidx50 = getelementptr [5 x i8], [5 x i8]* %addrs, i64 0, i64 4, !dbg !5783
  store i8 %conv49, i8* %arrayidx50, align 1, !dbg !5784
  %arrayidx51 = getelementptr [5 x %struct.nand_op_instr], [5 x %struct.nand_op_instr]* %instrs, i64 0, i64 1, !dbg !5785
  %ctx52 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx51, i32 0, i32 1, !dbg !5786
  %addr53 = bitcast %union.anon.72* %ctx52 to %struct.nand_op_addr_instr*, !dbg !5787
  %naddrs54 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr53, i32 0, i32 0, !dbg !5788
  %28 = load i32, i32* %naddrs54, align 8, !dbg !5789
  %inc = add i32 %28, 1, !dbg !5789
  store i32 %inc, i32* %naddrs54, align 8, !dbg !5789
  br label %if.end55, !dbg !5790

if.end55:                                         ; preds = %if.then47, %if.end41
  %29 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5791
  %call56 = call i32 @nand_exec_op(%struct.nand_chip* %29, %struct.nand_operation* %op) #8, !dbg !5792
  store i32 %call56, i32* %retval, align 4, !dbg !5793
  br label %return, !dbg !5793

return:                                           ; preds = %if.end55, %if.then40
  %30 = load i32, i32* %retval, align 4, !dbg !5794
  ret i32 %30, !dbg !5794
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_sp_exec_read_page_op(%struct.nand_chip* %chip, i32 %page, i32 %offset_in_page, i8* %buf, i32 %len) #0 !dbg !5795 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %offset_in_page.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %addrs = alloca [4 x i8], align 1
  %instrs = alloca [4 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp11 = alloca i64, align 8
  %tmp17 = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5796, metadata !DIExpression()), !dbg !5797
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !5798, metadata !DIExpression()), !dbg !5799
  store i32 %offset_in_page, i32* %offset_in_page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_page.addr, metadata !5800, metadata !DIExpression()), !dbg !5801
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !5802, metadata !DIExpression()), !dbg !5803
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !5804, metadata !DIExpression()), !dbg !5805
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !5806, metadata !DIExpression()), !dbg !5807
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5808
  %call = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %0) #8, !dbg !5809
  %call1 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call) #8, !dbg !5810
  store %struct.nand_sdr_timings* %call1, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5807
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !5811, metadata !DIExpression()), !dbg !5812
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5813
  %call2 = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %1) #8, !dbg !5814
  store %struct.mtd_info* %call2, %struct.mtd_info** %mtd, align 8, !dbg !5812
  call void @llvm.dbg.declare(metadata [4 x i8]* %addrs, metadata !5815, metadata !DIExpression()), !dbg !5816
  call void @llvm.dbg.declare(metadata [4 x %struct.nand_op_instr]* %instrs, metadata !5817, metadata !DIExpression()), !dbg !5819
  %arrayinit.begin = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5820
  %2 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !5820
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 40, i1 false), !dbg !5820
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !5821
  store i32 0, i32* %type, align 8, !dbg !5821
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !5821
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !5821
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !5821
  store i8 0, i8* %opcode, align 8, !dbg !5821
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !5821
  store i32 0, i32* %delay_ns, align 8, !dbg !5821
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !5820
  %type3 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !5822
  store i32 1, i32* %type3, align 8, !dbg !5822
  %ctx4 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !5822
  %addr = bitcast %union.anon.72* %ctx4 to %struct.nand_op_addr_instr*, !dbg !5822
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !5822
  store i32 3, i32* %naddrs, align 8, !dbg !5822
  %addrs5 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 1, !dbg !5822
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %addrs, i64 0, i64 0, !dbg !5822
  store i8* %arraydecay, i8** %addrs5, align 8, !dbg !5822
  %delay_ns6 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !5822
  %3 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5823
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %3, i32 0, i32 32, !dbg !5823
  %4 = load i32, i32* %tWB_max, align 8, !dbg !5823
  %add = add i32 %4, 1000, !dbg !5823
  %sub = sub i32 %add, 1, !dbg !5823
  %div = udiv i32 %sub, 1000, !dbg !5823
  %conv = zext i32 %div to i64, !dbg !5823
  %conv7 = trunc i64 %conv to i32, !dbg !5823
  store i32 %conv7, i32* %tmp, align 4, !dbg !5822
  %5 = load i32, i32* %tmp, align 4, !dbg !5823
  store i32 %5, i32* %delay_ns6, align 8, !dbg !5822
  %arrayinit.element8 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i64 1, !dbg !5820
  %type9 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i32 0, i32 0, !dbg !5825
  store i32 4, i32* %type9, align 8, !dbg !5825
  %ctx10 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i32 0, i32 1, !dbg !5825
  %6 = bitcast %union.anon.72* %ctx10 to i8*, !dbg !5825
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false), !dbg !5825
  %waitrdy = bitcast %union.anon.72* %ctx10 to %struct.nand_op_waitrdy_instr*, !dbg !5825
  %timeout_ms = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !5825
  %7 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5826
  %tR_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %7, i32 0, i32 3, !dbg !5826
  %8 = load i64, i64* %tR_max, align 8, !dbg !5826
  %add12 = add i64 %8, 1000000000, !dbg !5826
  %sub13 = sub i64 %add12, 1, !dbg !5826
  %div14 = udiv i64 %sub13, 1000000000, !dbg !5826
  store i64 %div14, i64* %tmp11, align 8, !dbg !5825
  %9 = load i64, i64* %tmp11, align 8, !dbg !5826
  %conv15 = trunc i64 %9 to i32, !dbg !5825
  store i32 %conv15, i32* %timeout_ms, align 8, !dbg !5825
  %delay_ns16 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i32 0, i32 2, !dbg !5825
  %10 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5828
  %tRR_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %10, i32 0, i32 30, !dbg !5828
  %11 = load i32, i32* %tRR_min, align 8, !dbg !5828
  %add18 = add i32 %11, 1000, !dbg !5828
  %sub19 = sub i32 %add18, 1, !dbg !5828
  %div20 = udiv i32 %sub19, 1000, !dbg !5828
  %conv21 = zext i32 %div20 to i64, !dbg !5828
  %conv22 = trunc i64 %conv21 to i32, !dbg !5828
  store i32 %conv22, i32* %tmp17, align 4, !dbg !5825
  %12 = load i32, i32* %tmp17, align 4, !dbg !5828
  store i32 %12, i32* %delay_ns16, align 8, !dbg !5825
  %arrayinit.element23 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i64 1, !dbg !5820
  %type24 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element23, i32 0, i32 0, !dbg !5830
  store i32 2, i32* %type24, align 8, !dbg !5830
  %ctx25 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element23, i32 0, i32 1, !dbg !5830
  %data = bitcast %union.anon.72* %ctx25 to %struct.nand_op_data_instr*, !dbg !5830
  %len26 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !5830
  %13 = load i32, i32* %len.addr, align 4, !dbg !5830
  store i32 %13, i32* %len26, align 8, !dbg !5830
  %buf27 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !5830
  %in = bitcast %union.anon.73* %buf27 to i8**, !dbg !5830
  %14 = load i8*, i8** %buf.addr, align 8, !dbg !5830
  store i8* %14, i8** %in, align 8, !dbg !5830
  %force_8bit = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !5830
  store i8 0, i8* %force_8bit, align 8, !dbg !5830
  %delay_ns28 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element23, i32 0, i32 2, !dbg !5830
  store i32 0, i32* %delay_ns28, align 8, !dbg !5830
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !5831, metadata !DIExpression()), !dbg !5832
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !5833
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5833
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 28, !dbg !5833
  %16 = load i32, i32* %cur_cs, align 4, !dbg !5833
  store i32 %16, i32* %cs, align 8, !dbg !5833
  %instrs29 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !5833
  %arraydecay30 = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5833
  store %struct.nand_op_instr* %arraydecay30, %struct.nand_op_instr** %instrs29, align 8, !dbg !5833
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5833
  store i32 4, i32* %ninstrs, align 8, !dbg !5833
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !5834, metadata !DIExpression()), !dbg !5835
  %17 = load i32, i32* %len.addr, align 4, !dbg !5836
  %tobool = icmp ne i32 %17, 0, !dbg !5836
  br i1 %tobool, label %if.end, label %if.then, !dbg !5838

if.then:                                          ; preds = %entry
  %ninstrs31 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5839
  %18 = load i32, i32* %ninstrs31, align 8, !dbg !5840
  %dec = add i32 %18, -1, !dbg !5840
  store i32 %dec, i32* %ninstrs31, align 8, !dbg !5840
  br label %if.end, !dbg !5841

if.end:                                           ; preds = %if.then, %entry
  %19 = load i32, i32* %offset_in_page.addr, align 4, !dbg !5842
  %20 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !5844
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %20, i32 0, i32 4, !dbg !5845
  %21 = load i32, i32* %writesize, align 4, !dbg !5845
  %cmp = icmp uge i32 %19, %21, !dbg !5846
  br i1 %cmp, label %if.then33, label %if.else, !dbg !5847

if.then33:                                        ; preds = %if.end
  %arrayidx = getelementptr [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5848
  %ctx34 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx, i32 0, i32 1, !dbg !5849
  %cmd35 = bitcast %union.anon.72* %ctx34 to %struct.nand_op_cmd_instr*, !dbg !5850
  %opcode36 = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd35, i32 0, i32 0, !dbg !5851
  store i8 80, i8* %opcode36, align 8, !dbg !5852
  br label %if.end47, !dbg !5848

if.else:                                          ; preds = %if.end
  %22 = load i32, i32* %offset_in_page.addr, align 4, !dbg !5853
  %cmp37 = icmp uge i32 %22, 256, !dbg !5855
  br i1 %cmp37, label %land.lhs.true, label %if.end46, !dbg !5856

land.lhs.true:                                    ; preds = %if.else
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5857
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %23, i32 0, i32 6, !dbg !5858
  %24 = load i32, i32* %options, align 8, !dbg !5858
  %conv39 = zext i32 %24 to i64, !dbg !5857
  %and = and i64 %conv39, 2, !dbg !5859
  %tobool40 = icmp ne i64 %and, 0, !dbg !5859
  br i1 %tobool40, label %if.end46, label %if.then41, !dbg !5860

if.then41:                                        ; preds = %land.lhs.true
  %arrayidx42 = getelementptr [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5861
  %ctx43 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx42, i32 0, i32 1, !dbg !5862
  %cmd44 = bitcast %union.anon.72* %ctx43 to %struct.nand_op_cmd_instr*, !dbg !5863
  %opcode45 = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd44, i32 0, i32 0, !dbg !5864
  store i8 1, i8* %opcode45, align 8, !dbg !5865
  br label %if.end46, !dbg !5861

if.end46:                                         ; preds = %if.then41, %land.lhs.true, %if.else
  br label %if.end47

if.end47:                                         ; preds = %if.end46, %if.then33
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5866
  %arraydecay48 = getelementptr inbounds [4 x i8], [4 x i8]* %addrs, i64 0, i64 0, !dbg !5867
  %26 = load i32, i32* %offset_in_page.addr, align 4, !dbg !5868
  %call49 = call i32 @nand_fill_column_cycles(%struct.nand_chip* %25, i8* %arraydecay48, i32 %26) #8, !dbg !5869
  store i32 %call49, i32* %ret, align 4, !dbg !5870
  %27 = load i32, i32* %ret, align 4, !dbg !5871
  %cmp50 = icmp slt i32 %27, 0, !dbg !5873
  br i1 %cmp50, label %if.then52, label %if.end53, !dbg !5874

if.then52:                                        ; preds = %if.end47
  %28 = load i32, i32* %ret, align 4, !dbg !5875
  store i32 %28, i32* %retval, align 4, !dbg !5876
  br label %return, !dbg !5876

if.end53:                                         ; preds = %if.end47
  %29 = load i32, i32* %page.addr, align 4, !dbg !5877
  %conv54 = trunc i32 %29 to i8, !dbg !5877
  %arrayidx55 = getelementptr [4 x i8], [4 x i8]* %addrs, i64 0, i64 1, !dbg !5878
  store i8 %conv54, i8* %arrayidx55, align 1, !dbg !5879
  %30 = load i32, i32* %page.addr, align 4, !dbg !5880
  %shr = lshr i32 %30, 8, !dbg !5881
  %conv56 = trunc i32 %shr to i8, !dbg !5880
  %arrayidx57 = getelementptr [4 x i8], [4 x i8]* %addrs, i64 0, i64 2, !dbg !5882
  store i8 %conv56, i8* %arrayidx57, align 1, !dbg !5883
  %31 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5884
  %options58 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %31, i32 0, i32 6, !dbg !5886
  %32 = load i32, i32* %options58, align 8, !dbg !5886
  %conv59 = zext i32 %32 to i64, !dbg !5884
  %and60 = and i64 %conv59, 16384, !dbg !5887
  %tobool61 = icmp ne i64 %and60, 0, !dbg !5887
  br i1 %tobool61, label %if.then62, label %if.end70, !dbg !5888

if.then62:                                        ; preds = %if.end53
  %33 = load i32, i32* %page.addr, align 4, !dbg !5889
  %shr63 = lshr i32 %33, 16, !dbg !5891
  %conv64 = trunc i32 %shr63 to i8, !dbg !5889
  %arrayidx65 = getelementptr [4 x i8], [4 x i8]* %addrs, i64 0, i64 3, !dbg !5892
  store i8 %conv64, i8* %arrayidx65, align 1, !dbg !5893
  %arrayidx66 = getelementptr [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 1, !dbg !5894
  %ctx67 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx66, i32 0, i32 1, !dbg !5895
  %addr68 = bitcast %union.anon.72* %ctx67 to %struct.nand_op_addr_instr*, !dbg !5896
  %naddrs69 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr68, i32 0, i32 0, !dbg !5897
  %34 = load i32, i32* %naddrs69, align 8, !dbg !5898
  %inc = add i32 %34, 1, !dbg !5898
  store i32 %inc, i32* %naddrs69, align 8, !dbg !5898
  br label %if.end70, !dbg !5899

if.end70:                                         ; preds = %if.then62, %if.end53
  %35 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5900
  %call71 = call i32 @nand_exec_op(%struct.nand_chip* %35, %struct.nand_operation* %op) #8, !dbg !5901
  store i32 %call71, i32* %retval, align 4, !dbg !5902
  br label %return, !dbg !5902

return:                                           ; preds = %if.end70, %if.then52
  %36 = load i32, i32* %retval, align 4, !dbg !5903
  ret i32 %36, !dbg !5903
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_read_param_page_op(%struct.nand_chip* %chip, i8 zeroext %page, i8* %buf, i32 %len) #0 !dbg !5904 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i8, align 1
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %p = alloca i8*, align 8
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %instrs = alloca [4 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp12 = alloca i64, align 8
  %tmp18 = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5907, metadata !DIExpression()), !dbg !5908
  store i8 %page, i8* %page.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %page.addr, metadata !5909, metadata !DIExpression()), !dbg !5910
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !5911, metadata !DIExpression()), !dbg !5912
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !5913, metadata !DIExpression()), !dbg !5914
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5915, metadata !DIExpression()), !dbg !5916
  call void @llvm.dbg.declare(metadata i8** %p, metadata !5917, metadata !DIExpression()), !dbg !5918
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !5919
  store i8* %0, i8** %p, align 8, !dbg !5918
  %1 = load i32, i32* %len.addr, align 4, !dbg !5920
  %tobool = icmp ne i32 %1, 0, !dbg !5920
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !5922

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !5923
  %tobool1 = icmp ne i8* %2, null, !dbg !5923
  br i1 %tobool1, label %if.end, label %if.then, !dbg !5924

if.then:                                          ; preds = %land.lhs.true
  store i32 -22, i32* %retval, align 4, !dbg !5925
  br label %return, !dbg !5925

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5926
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %3) #8, !dbg !5928
  br i1 %call, label %if.then2, label %if.end36, !dbg !5929

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !5930, metadata !DIExpression()), !dbg !5932
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5933
  %call3 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %4) #8, !dbg !5934
  %call4 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call3) #8, !dbg !5935
  store %struct.nand_sdr_timings* %call4, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5932
  call void @llvm.dbg.declare(metadata [4 x %struct.nand_op_instr]* %instrs, metadata !5936, metadata !DIExpression()), !dbg !5937
  %arrayinit.begin = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5938
  %5 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !5938
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 40, i1 false), !dbg !5938
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !5939
  store i32 0, i32* %type, align 8, !dbg !5939
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !5939
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !5939
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !5939
  store i8 -20, i8* %opcode, align 8, !dbg !5939
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !5939
  store i32 0, i32* %delay_ns, align 8, !dbg !5939
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !5938
  %type5 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !5940
  store i32 1, i32* %type5, align 8, !dbg !5940
  %ctx6 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !5940
  %addr = bitcast %union.anon.72* %ctx6 to %struct.nand_op_addr_instr*, !dbg !5940
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !5940
  store i32 1, i32* %naddrs, align 8, !dbg !5940
  %addrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 1, !dbg !5940
  store i8* %page.addr, i8** %addrs, align 8, !dbg !5940
  %delay_ns7 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !5940
  %6 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5941
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %6, i32 0, i32 32, !dbg !5941
  %7 = load i32, i32* %tWB_max, align 8, !dbg !5941
  %add = add i32 %7, 1000, !dbg !5941
  %sub = sub i32 %add, 1, !dbg !5941
  %div = udiv i32 %sub, 1000, !dbg !5941
  %conv = zext i32 %div to i64, !dbg !5941
  %conv8 = trunc i64 %conv to i32, !dbg !5941
  store i32 %conv8, i32* %tmp, align 4, !dbg !5940
  %8 = load i32, i32* %tmp, align 4, !dbg !5941
  store i32 %8, i32* %delay_ns7, align 8, !dbg !5940
  %arrayinit.element9 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i64 1, !dbg !5938
  %type10 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element9, i32 0, i32 0, !dbg !5943
  store i32 4, i32* %type10, align 8, !dbg !5943
  %ctx11 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element9, i32 0, i32 1, !dbg !5943
  %9 = bitcast %union.anon.72* %ctx11 to i8*, !dbg !5943
  call void @llvm.memset.p0i8.i64(i8* align 8 %9, i8 0, i64 24, i1 false), !dbg !5943
  %waitrdy = bitcast %union.anon.72* %ctx11 to %struct.nand_op_waitrdy_instr*, !dbg !5943
  %timeout_ms = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !5943
  %10 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5944
  %tR_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %10, i32 0, i32 3, !dbg !5944
  %11 = load i64, i64* %tR_max, align 8, !dbg !5944
  %add13 = add i64 %11, 1000000000, !dbg !5944
  %sub14 = sub i64 %add13, 1, !dbg !5944
  %div15 = udiv i64 %sub14, 1000000000, !dbg !5944
  store i64 %div15, i64* %tmp12, align 8, !dbg !5943
  %12 = load i64, i64* %tmp12, align 8, !dbg !5944
  %conv16 = trunc i64 %12 to i32, !dbg !5943
  store i32 %conv16, i32* %timeout_ms, align 8, !dbg !5943
  %delay_ns17 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element9, i32 0, i32 2, !dbg !5943
  %13 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !5946
  %tRR_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %13, i32 0, i32 30, !dbg !5946
  %14 = load i32, i32* %tRR_min, align 8, !dbg !5946
  %add19 = add i32 %14, 1000, !dbg !5946
  %sub20 = sub i32 %add19, 1, !dbg !5946
  %div21 = udiv i32 %sub20, 1000, !dbg !5946
  %conv22 = zext i32 %div21 to i64, !dbg !5946
  %conv23 = trunc i64 %conv22 to i32, !dbg !5946
  store i32 %conv23, i32* %tmp18, align 4, !dbg !5943
  %15 = load i32, i32* %tmp18, align 4, !dbg !5946
  store i32 %15, i32* %delay_ns17, align 8, !dbg !5943
  %arrayinit.element24 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element9, i64 1, !dbg !5938
  %type25 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element24, i32 0, i32 0, !dbg !5948
  store i32 2, i32* %type25, align 8, !dbg !5948
  %ctx26 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element24, i32 0, i32 1, !dbg !5948
  %data = bitcast %union.anon.72* %ctx26 to %struct.nand_op_data_instr*, !dbg !5948
  %len27 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !5948
  %16 = load i32, i32* %len.addr, align 4, !dbg !5948
  store i32 %16, i32* %len27, align 8, !dbg !5948
  %buf28 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !5948
  %in = bitcast %union.anon.73* %buf28 to i8**, !dbg !5948
  %17 = load i8*, i8** %buf.addr, align 8, !dbg !5948
  store i8* %17, i8** %in, align 8, !dbg !5948
  %force_8bit = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !5948
  store i8 1, i8* %force_8bit, align 8, !dbg !5948
  %delay_ns29 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element24, i32 0, i32 2, !dbg !5948
  store i32 0, i32* %delay_ns29, align 8, !dbg !5948
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !5949, metadata !DIExpression()), !dbg !5950
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !5951
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5951
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 28, !dbg !5951
  %19 = load i32, i32* %cur_cs, align 4, !dbg !5951
  store i32 %19, i32* %cs, align 8, !dbg !5951
  %instrs30 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !5951
  %arraydecay = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !5951
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs30, align 8, !dbg !5951
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5951
  store i32 4, i32* %ninstrs, align 8, !dbg !5951
  %20 = load i32, i32* %len.addr, align 4, !dbg !5952
  %tobool31 = icmp ne i32 %20, 0, !dbg !5952
  br i1 %tobool31, label %if.end34, label %if.then32, !dbg !5954

if.then32:                                        ; preds = %if.then2
  %ninstrs33 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !5955
  %21 = load i32, i32* %ninstrs33, align 8, !dbg !5956
  %dec = add i32 %21, -1, !dbg !5956
  store i32 %dec, i32* %ninstrs33, align 8, !dbg !5956
  br label %if.end34, !dbg !5957

if.end34:                                         ; preds = %if.then32, %if.then2
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5958
  %call35 = call i32 @nand_exec_op(%struct.nand_chip* %22, %struct.nand_operation* %op) #8, !dbg !5959
  store i32 %call35, i32* %retval, align 4, !dbg !5960
  br label %return, !dbg !5960

if.end36:                                         ; preds = %if.end
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5961
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %23, i32 0, i32 5, !dbg !5962
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !5963
  %24 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !5963
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5964
  %26 = load i8, i8* %page.addr, align 1, !dbg !5965
  %conv37 = zext i8 %26 to i32, !dbg !5965
  call void %24(%struct.nand_chip* %25, i32 236, i32 %conv37, i32 -1) #8, !dbg !5961
  store i32 0, i32* %i, align 4, !dbg !5966
  br label %for.cond, !dbg !5968

for.cond:                                         ; preds = %for.inc, %if.end36
  %27 = load i32, i32* %i, align 4, !dbg !5969
  %28 = load i32, i32* %len.addr, align 4, !dbg !5971
  %cmp = icmp ult i32 %27, %28, !dbg !5972
  br i1 %cmp, label %for.body, label %for.end, !dbg !5973

for.body:                                         ; preds = %for.cond
  %29 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5974
  %legacy39 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %29, i32 0, i32 5, !dbg !5975
  %read_byte = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy39, i32 0, i32 3, !dbg !5976
  %30 = load i8 (%struct.nand_chip*)*, i8 (%struct.nand_chip*)** %read_byte, align 8, !dbg !5976
  %31 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5977
  %call40 = call zeroext i8 %30(%struct.nand_chip* %31) #8, !dbg !5974
  %32 = load i8*, i8** %p, align 8, !dbg !5978
  %33 = load i32, i32* %i, align 4, !dbg !5979
  %idxprom = zext i32 %33 to i64, !dbg !5978
  %arrayidx = getelementptr i8, i8* %32, i64 %idxprom, !dbg !5978
  store i8 %call40, i8* %arrayidx, align 1, !dbg !5980
  br label %for.inc, !dbg !5978

for.inc:                                          ; preds = %for.body
  %34 = load i32, i32* %i, align 4, !dbg !5981
  %inc = add i32 %34, 1, !dbg !5981
  store i32 %inc, i32* %i, align 4, !dbg !5981
  br label %for.cond, !dbg !5982, !llvm.loop !5983

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !5985
  br label %return, !dbg !5985

return:                                           ; preds = %for.end, %if.end34, %if.then
  %35 = load i32, i32* %retval, align 4, !dbg !5986
  ret i32 %35, !dbg !5986
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_exec_op(%struct.nand_chip* %chip, %struct.nand_operation* %op) #0 !dbg !5987 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %op.addr = alloca %struct.nand_operation*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !5990, metadata !DIExpression()), !dbg !5991
  store %struct.nand_operation* %op, %struct.nand_operation** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_operation** %op.addr, metadata !5992, metadata !DIExpression()), !dbg !5993
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !5994
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %0) #8, !dbg !5996
  br i1 %call, label %if.end, label %if.then, !dbg !5997

if.then:                                          ; preds = %entry
  store i32 -524, i32* %retval, align 4, !dbg !5998
  br label %return, !dbg !5998

if.end:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !5999, metadata !DIExpression()), !dbg !6002
  %1 = load %struct.nand_operation*, %struct.nand_operation** %op.addr, align 8, !dbg !6002
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %1, i32 0, i32 0, !dbg !6002
  %2 = load i32, i32* %cs, align 8, !dbg !6002
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6002
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 0, !dbg !6002
  %call1 = call i32 @nanddev_ntargets(%struct.nand_device* %base) #8, !dbg !6002
  %cmp = icmp uge i32 %2, %call1, !dbg !6002
  %lnot = xor i1 %cmp, true, !dbg !6002
  %lnot2 = xor i1 %lnot, true, !dbg !6002
  %lnot.ext = zext i1 %lnot2 to i32, !dbg !6002
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !6002
  %4 = load i32, i32* %__ret_warn_on, align 4, !dbg !6003
  %tobool = icmp ne i32 %4, 0, !dbg !6003
  %lnot3 = xor i1 %tobool, true, !dbg !6003
  %lnot5 = xor i1 %lnot3, true, !dbg !6003
  %lnot.ext6 = zext i1 %lnot5 to i32, !dbg !6003
  %conv = sext i32 %lnot.ext6 to i64, !dbg !6003
  %tobool7 = icmp ne i64 %conv, 0, !dbg !6003
  br i1 %tobool7, label %if.then8, label %if.end15, !dbg !6002

if.then8:                                         ; preds = %if.end
  br label %do.body, !dbg !6003

do.body:                                          ; preds = %if.then8
  br label %do.body9, !dbg !6005

do.body9:                                         ; preds = %do.body
  br label %do.end, !dbg !6007

do.end:                                           ; preds = %do.body9
  br label %do.body10, !dbg !6005

do.body10:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i32 134, i32 2305, i64 12) #9, !dbg !6009, !srcloc !6011
  br label %do.end11, !dbg !6009

do.end11:                                         ; preds = %do.body10
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 241) #9, !dbg !6012, !srcloc !6014
  br label %do.body12, !dbg !6005

do.body12:                                        ; preds = %do.end11
  br label %do.end13, !dbg !6015

do.end13:                                         ; preds = %do.body12
  br label %do.end14, !dbg !6005

do.end14:                                         ; preds = %do.end13
  br label %if.end15, !dbg !6005

if.end15:                                         ; preds = %do.end14, %if.end
  %5 = load i32, i32* %__ret_warn_on, align 4, !dbg !6002
  %tobool16 = icmp ne i32 %5, 0, !dbg !6002
  %lnot17 = xor i1 %tobool16, true, !dbg !6002
  %lnot19 = xor i1 %lnot17, true, !dbg !6002
  %lnot.ext20 = zext i1 %lnot19 to i32, !dbg !6002
  %conv21 = sext i32 %lnot.ext20 to i64, !dbg !6002
  store i64 %conv21, i64* %tmp, align 8, !dbg !6003
  %6 = load i64, i64* %tmp, align 8, !dbg !6002
  %tobool22 = icmp ne i64 %6, 0, !dbg !6017
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !6018

if.then23:                                        ; preds = %if.end15
  store i32 -22, i32* %retval, align 4, !dbg !6019
  br label %return, !dbg !6019

if.end24:                                         ; preds = %if.end15
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6020
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 30, !dbg !6021
  %8 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !6021
  %ops = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %8, i32 0, i32 1, !dbg !6022
  %9 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !6022
  %exec_op = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %9, i32 0, i32 2, !dbg !6023
  %10 = load i32 (%struct.nand_chip*, %struct.nand_operation*, i1)*, i32 (%struct.nand_chip*, %struct.nand_operation*, i1)** %exec_op, align 8, !dbg !6023
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6024
  %12 = load %struct.nand_operation*, %struct.nand_operation** %op.addr, align 8, !dbg !6025
  %call25 = call i32 %10(%struct.nand_chip* %11, %struct.nand_operation* %12, i1 zeroext false) #8, !dbg !6020
  store i32 %call25, i32* %retval, align 4, !dbg !6026
  br label %return, !dbg !6026

return:                                           ; preds = %if.end24, %if.then23, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !6027
  ret i32 %13, !dbg !6027
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_change_read_column_op(%struct.nand_chip* %chip, i32 %offset_in_page, i8* %buf, i32 %len, i1 zeroext %force_8bit) #0 !dbg !6028 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %offset_in_page.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %force_8bit.addr = alloca i8, align 1
  %mtd = alloca %struct.mtd_info*, align 8
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %addrs = alloca [2 x i8], align 1
  %instrs = alloca [4 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6031, metadata !DIExpression()), !dbg !6032
  store i32 %offset_in_page, i32* %offset_in_page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_page.addr, metadata !6033, metadata !DIExpression()), !dbg !6034
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6035, metadata !DIExpression()), !dbg !6036
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !6037, metadata !DIExpression()), !dbg !6038
  %frombool = zext i1 %force_8bit to i8
  store i8 %frombool, i8* %force_8bit.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_8bit.addr, metadata !6039, metadata !DIExpression()), !dbg !6040
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !6041, metadata !DIExpression()), !dbg !6042
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6043
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !6044
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !6042
  %1 = load i32, i32* %len.addr, align 4, !dbg !6045
  %tobool = icmp ne i32 %1, 0, !dbg !6045
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6047

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6048
  %tobool1 = icmp ne i8* %2, null, !dbg !6048
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6049

if.then:                                          ; preds = %land.lhs.true
  store i32 -22, i32* %retval, align 4, !dbg !6050
  br label %return, !dbg !6050

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6051
  %4 = load i32, i32* %len.addr, align 4, !dbg !6053
  %add = add i32 %3, %4, !dbg !6054
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6055
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 4, !dbg !6056
  %6 = load i32, i32* %writesize, align 4, !dbg !6056
  %7 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6057
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %7, i32 0, i32 6, !dbg !6058
  %8 = load i32, i32* %oobsize, align 4, !dbg !6058
  %add2 = add i32 %6, %8, !dbg !6059
  %cmp = icmp ugt i32 %add, %add2, !dbg !6060
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !6061

if.then3:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !6062
  br label %return, !dbg !6062

if.end4:                                          ; preds = %if.end
  %9 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6063
  %writesize5 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %9, i32 0, i32 4, !dbg !6065
  %10 = load i32, i32* %writesize5, align 4, !dbg !6065
  %cmp6 = icmp ule i32 %10, 512, !dbg !6066
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !6067

if.then7:                                         ; preds = %if.end4
  store i32 -524, i32* %retval, align 4, !dbg !6068
  br label %return, !dbg !6068

if.end8:                                          ; preds = %if.end4
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6069
  %call9 = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %11) #8, !dbg !6071
  br i1 %call9, label %if.then10, label %if.end50, !dbg !6072

if.then10:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !6073, metadata !DIExpression()), !dbg !6075
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6076
  %call11 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %12) #8, !dbg !6077
  %call12 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call11) #8, !dbg !6078
  store %struct.nand_sdr_timings* %call12, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6075
  call void @llvm.dbg.declare(metadata [2 x i8]* %addrs, metadata !6079, metadata !DIExpression()), !dbg !6080
  %13 = bitcast [2 x i8]* %addrs to i8*, !dbg !6080
  call void @llvm.memset.p0i8.i64(i8* align 1 %13, i8 0, i64 2, i1 false), !dbg !6080
  call void @llvm.dbg.declare(metadata [4 x %struct.nand_op_instr]* %instrs, metadata !6081, metadata !DIExpression()), !dbg !6082
  %arrayinit.begin = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6083
  %14 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !6083
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 40, i1 false), !dbg !6083
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !6084
  store i32 0, i32* %type, align 8, !dbg !6084
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !6084
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !6084
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !6084
  store i8 5, i8* %opcode, align 8, !dbg !6084
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !6084
  store i32 0, i32* %delay_ns, align 8, !dbg !6084
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !6083
  %type13 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !6085
  store i32 1, i32* %type13, align 8, !dbg !6085
  %ctx14 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !6085
  %addr = bitcast %union.anon.72* %ctx14 to %struct.nand_op_addr_instr*, !dbg !6085
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !6085
  store i32 2, i32* %naddrs, align 8, !dbg !6085
  %addrs15 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 1, !dbg !6085
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %addrs, i64 0, i64 0, !dbg !6085
  store i8* %arraydecay, i8** %addrs15, align 8, !dbg !6085
  %delay_ns16 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !6085
  store i32 0, i32* %delay_ns16, align 8, !dbg !6085
  %arrayinit.element17 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i64 1, !dbg !6083
  %15 = bitcast %struct.nand_op_instr* %arrayinit.element17 to i8*, !dbg !6083
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 40, i1 false), !dbg !6083
  %type18 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element17, i32 0, i32 0, !dbg !6086
  store i32 0, i32* %type18, align 8, !dbg !6086
  %ctx19 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element17, i32 0, i32 1, !dbg !6086
  %cmd20 = bitcast %union.anon.72* %ctx19 to %struct.nand_op_cmd_instr*, !dbg !6086
  %opcode21 = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd20, i32 0, i32 0, !dbg !6086
  store i8 -32, i8* %opcode21, align 8, !dbg !6086
  %delay_ns22 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element17, i32 0, i32 2, !dbg !6086
  %16 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6087
  %tCCS_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %16, i32 0, i32 1, !dbg !6087
  %17 = load i32, i32* %tCCS_min, align 8, !dbg !6087
  %add23 = add i32 %17, 1000, !dbg !6087
  %sub = sub i32 %add23, 1, !dbg !6087
  %div = udiv i32 %sub, 1000, !dbg !6087
  %conv = zext i32 %div to i64, !dbg !6087
  %conv24 = trunc i64 %conv to i32, !dbg !6087
  store i32 %conv24, i32* %tmp, align 4, !dbg !6086
  %18 = load i32, i32* %tmp, align 4, !dbg !6087
  store i32 %18, i32* %delay_ns22, align 8, !dbg !6086
  %arrayinit.element25 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element17, i64 1, !dbg !6083
  %type26 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element25, i32 0, i32 0, !dbg !6089
  store i32 2, i32* %type26, align 8, !dbg !6089
  %ctx27 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element25, i32 0, i32 1, !dbg !6089
  %data = bitcast %union.anon.72* %ctx27 to %struct.nand_op_data_instr*, !dbg !6089
  %len28 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !6089
  %19 = load i32, i32* %len.addr, align 4, !dbg !6089
  store i32 %19, i32* %len28, align 8, !dbg !6089
  %buf29 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !6089
  %in = bitcast %union.anon.73* %buf29 to i8**, !dbg !6089
  %20 = load i8*, i8** %buf.addr, align 8, !dbg !6089
  store i8* %20, i8** %in, align 8, !dbg !6089
  %force_8bit30 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !6089
  store i8 0, i8* %force_8bit30, align 8, !dbg !6089
  %delay_ns31 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element25, i32 0, i32 2, !dbg !6089
  store i32 0, i32* %delay_ns31, align 8, !dbg !6089
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !6090, metadata !DIExpression()), !dbg !6091
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !6092
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6092
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 28, !dbg !6092
  %22 = load i32, i32* %cur_cs, align 4, !dbg !6092
  store i32 %22, i32* %cs, align 8, !dbg !6092
  %instrs32 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !6092
  %arraydecay33 = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6092
  store %struct.nand_op_instr* %arraydecay33, %struct.nand_op_instr** %instrs32, align 8, !dbg !6092
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6092
  store i32 4, i32* %ninstrs, align 8, !dbg !6092
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6093, metadata !DIExpression()), !dbg !6094
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6095
  %arraydecay34 = getelementptr inbounds [2 x i8], [2 x i8]* %addrs, i64 0, i64 0, !dbg !6096
  %24 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6097
  %call35 = call i32 @nand_fill_column_cycles(%struct.nand_chip* %23, i8* %arraydecay34, i32 %24) #8, !dbg !6098
  store i32 %call35, i32* %ret, align 4, !dbg !6099
  %25 = load i32, i32* %ret, align 4, !dbg !6100
  %cmp36 = icmp slt i32 %25, 0, !dbg !6102
  br i1 %cmp36, label %if.then38, label %if.end39, !dbg !6103

if.then38:                                        ; preds = %if.then10
  %26 = load i32, i32* %ret, align 4, !dbg !6104
  store i32 %26, i32* %retval, align 4, !dbg !6105
  br label %return, !dbg !6105

if.end39:                                         ; preds = %if.then10
  %27 = load i32, i32* %len.addr, align 4, !dbg !6106
  %tobool40 = icmp ne i32 %27, 0, !dbg !6106
  br i1 %tobool40, label %if.end43, label %if.then41, !dbg !6108

if.then41:                                        ; preds = %if.end39
  %ninstrs42 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6109
  %28 = load i32, i32* %ninstrs42, align 8, !dbg !6110
  %dec = add i32 %28, -1, !dbg !6110
  store i32 %dec, i32* %ninstrs42, align 8, !dbg !6110
  br label %if.end43, !dbg !6111

if.end43:                                         ; preds = %if.then41, %if.end39
  %29 = load i8, i8* %force_8bit.addr, align 1, !dbg !6112
  %tobool44 = trunc i8 %29 to i1, !dbg !6112
  %arrayidx = getelementptr [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 3, !dbg !6113
  %ctx45 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx, i32 0, i32 1, !dbg !6114
  %data46 = bitcast %union.anon.72* %ctx45 to %struct.nand_op_data_instr*, !dbg !6115
  %force_8bit47 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data46, i32 0, i32 2, !dbg !6116
  %frombool48 = zext i1 %tobool44 to i8, !dbg !6117
  store i8 %frombool48, i8* %force_8bit47, align 8, !dbg !6117
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6118
  %call49 = call i32 @nand_exec_op(%struct.nand_chip* %30, %struct.nand_operation* %op) #8, !dbg !6119
  store i32 %call49, i32* %retval, align 4, !dbg !6120
  br label %return, !dbg !6120

if.end50:                                         ; preds = %if.end8
  %31 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6121
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %31, i32 0, i32 5, !dbg !6122
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !6123
  %32 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !6123
  %33 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6124
  %34 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6125
  call void %32(%struct.nand_chip* %33, i32 5, i32 %34, i32 -1) #8, !dbg !6121
  %35 = load i32, i32* %len.addr, align 4, !dbg !6126
  %tobool51 = icmp ne i32 %35, 0, !dbg !6126
  br i1 %tobool51, label %if.then52, label %if.end54, !dbg !6128

if.then52:                                        ; preds = %if.end50
  %36 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6129
  %legacy53 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %36, i32 0, i32 5, !dbg !6130
  %read_buf = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy53, i32 0, i32 6, !dbg !6131
  %37 = load void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i8*, i32)** %read_buf, align 8, !dbg !6131
  %38 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6132
  %39 = load i8*, i8** %buf.addr, align 8, !dbg !6133
  %40 = load i32, i32* %len.addr, align 4, !dbg !6134
  call void %37(%struct.nand_chip* %38, i8* %39, i32 %40) #8, !dbg !6129
  br label %if.end54, !dbg !6129

if.end54:                                         ; preds = %if.then52, %if.end50
  store i32 0, i32* %retval, align 4, !dbg !6135
  br label %return, !dbg !6135

return:                                           ; preds = %if.end54, %if.end43, %if.then38, %if.then7, %if.then3, %if.then
  %41 = load i32, i32* %retval, align 4, !dbg !6136
  ret i32 %41, !dbg !6136
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_fill_column_cycles(%struct.nand_chip* %chip, i8* %addrs, i32 %offset_in_page) #0 !dbg !6137 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %addrs.addr = alloca i8*, align 8
  %offset_in_page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6140, metadata !DIExpression()), !dbg !6141
  store i8* %addrs, i8** %addrs.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %addrs.addr, metadata !6142, metadata !DIExpression()), !dbg !6143
  store i32 %offset_in_page, i32* %offset_in_page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_page.addr, metadata !6144, metadata !DIExpression()), !dbg !6145
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !6146, metadata !DIExpression()), !dbg !6147
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6148
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !6149
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !6147
  %1 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6150
  %2 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6152
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %2, i32 0, i32 4, !dbg !6153
  %3 = load i32, i32* %writesize, align 4, !dbg !6153
  %4 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6154
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %4, i32 0, i32 6, !dbg !6155
  %5 = load i32, i32* %oobsize, align 4, !dbg !6155
  %add = add i32 %3, %5, !dbg !6156
  %cmp = icmp ugt i32 %1, %add, !dbg !6157
  br i1 %cmp, label %if.then, label %if.end, !dbg !6158

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !6159
  br label %return, !dbg !6159

if.end:                                           ; preds = %entry
  %6 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6160
  %writesize1 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %6, i32 0, i32 4, !dbg !6162
  %7 = load i32, i32* %writesize1, align 4, !dbg !6162
  %cmp2 = icmp ule i32 %7, 512, !dbg !6163
  br i1 %cmp2, label %land.lhs.true, label %if.end7, !dbg !6164

land.lhs.true:                                    ; preds = %if.end
  %8 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6165
  %9 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6166
  %writesize3 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %9, i32 0, i32 4, !dbg !6167
  %10 = load i32, i32* %writesize3, align 4, !dbg !6167
  %cmp4 = icmp uge i32 %8, %10, !dbg !6168
  br i1 %cmp4, label %if.then5, label %if.end7, !dbg !6169

if.then5:                                         ; preds = %land.lhs.true
  %11 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6170
  %writesize6 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %11, i32 0, i32 4, !dbg !6171
  %12 = load i32, i32* %writesize6, align 4, !dbg !6171
  %13 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6172
  %sub = sub i32 %13, %12, !dbg !6172
  store i32 %sub, i32* %offset_in_page.addr, align 4, !dbg !6172
  br label %if.end7, !dbg !6173

if.end7:                                          ; preds = %if.then5, %land.lhs.true, %if.end
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6174
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %14, i32 0, i32 6, !dbg !6176
  %15 = load i32, i32* %options, align 8, !dbg !6176
  %conv = zext i32 %15 to i64, !dbg !6174
  %and = and i64 %conv, 2, !dbg !6177
  %tobool = icmp ne i64 %and, 0, !dbg !6177
  br i1 %tobool, label %if.then8, label %if.end35, !dbg !6178

if.then8:                                         ; preds = %if.end7
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !6179, metadata !DIExpression()), !dbg !6183
  %16 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6183
  %rem = urem i32 %16, 2, !dbg !6183
  %tobool9 = icmp ne i32 %rem, 0, !dbg !6183
  %lnot = xor i1 %tobool9, true, !dbg !6183
  %lnot10 = xor i1 %lnot, true, !dbg !6183
  %lnot.ext = zext i1 %lnot10 to i32, !dbg !6183
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !6183
  %17 = load i32, i32* %__ret_warn_on, align 4, !dbg !6184
  %tobool11 = icmp ne i32 %17, 0, !dbg !6184
  %lnot12 = xor i1 %tobool11, true, !dbg !6184
  %lnot14 = xor i1 %lnot12, true, !dbg !6184
  %lnot.ext15 = zext i1 %lnot14 to i32, !dbg !6184
  %conv16 = sext i32 %lnot.ext15 to i64, !dbg !6184
  %tobool17 = icmp ne i64 %conv16, 0, !dbg !6184
  br i1 %tobool17, label %if.then18, label %if.end25, !dbg !6183

if.then18:                                        ; preds = %if.then8
  br label %do.body, !dbg !6184

do.body:                                          ; preds = %if.then18
  br label %do.body19, !dbg !6186

do.body19:                                        ; preds = %do.body
  br label %do.end, !dbg !6188

do.end:                                           ; preds = %do.body19
  br label %do.body20, !dbg !6186

do.body20:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 984, i32 2305, i64 12) #9, !dbg !6190, !srcloc !6192
  br label %do.end21, !dbg !6190

do.end21:                                         ; preds = %do.body20
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 249) #9, !dbg !6193, !srcloc !6195
  br label %do.body22, !dbg !6186

do.body22:                                        ; preds = %do.end21
  br label %do.end23, !dbg !6196

do.end23:                                         ; preds = %do.body22
  br label %do.end24, !dbg !6186

do.end24:                                         ; preds = %do.end23
  br label %if.end25, !dbg !6186

if.end25:                                         ; preds = %do.end24, %if.then8
  %18 = load i32, i32* %__ret_warn_on, align 4, !dbg !6183
  %tobool26 = icmp ne i32 %18, 0, !dbg !6183
  %lnot27 = xor i1 %tobool26, true, !dbg !6183
  %lnot29 = xor i1 %lnot27, true, !dbg !6183
  %lnot.ext30 = zext i1 %lnot29 to i32, !dbg !6183
  %conv31 = sext i32 %lnot.ext30 to i64, !dbg !6183
  store i64 %conv31, i64* %tmp, align 8, !dbg !6184
  %19 = load i64, i64* %tmp, align 8, !dbg !6183
  %tobool32 = icmp ne i64 %19, 0, !dbg !6198
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !6199

if.then33:                                        ; preds = %if.end25
  store i32 -22, i32* %retval, align 4, !dbg !6200
  br label %return, !dbg !6200

if.end34:                                         ; preds = %if.end25
  %20 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6201
  %div = udiv i32 %20, 2, !dbg !6201
  store i32 %div, i32* %offset_in_page.addr, align 4, !dbg !6201
  br label %if.end35, !dbg !6202

if.end35:                                         ; preds = %if.end34, %if.end7
  %21 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6203
  %conv36 = trunc i32 %21 to i8, !dbg !6203
  %22 = load i8*, i8** %addrs.addr, align 8, !dbg !6204
  %arrayidx = getelementptr i8, i8* %22, i64 0, !dbg !6204
  store i8 %conv36, i8* %arrayidx, align 1, !dbg !6205
  %23 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6206
  %writesize37 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %23, i32 0, i32 4, !dbg !6208
  %24 = load i32, i32* %writesize37, align 4, !dbg !6208
  %cmp38 = icmp ule i32 %24, 512, !dbg !6209
  br i1 %cmp38, label %if.then40, label %if.end41, !dbg !6210

if.then40:                                        ; preds = %if.end35
  store i32 1, i32* %retval, align 4, !dbg !6211
  br label %return, !dbg !6211

if.end41:                                         ; preds = %if.end35
  %25 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6212
  %shr = lshr i32 %25, 8, !dbg !6213
  %conv42 = trunc i32 %shr to i8, !dbg !6212
  %26 = load i8*, i8** %addrs.addr, align 8, !dbg !6214
  %arrayidx43 = getelementptr i8, i8* %26, i64 1, !dbg !6214
  store i8 %conv42, i8* %arrayidx43, align 1, !dbg !6215
  store i32 2, i32* %retval, align 4, !dbg !6216
  br label %return, !dbg !6216

return:                                           ; preds = %if.end41, %if.then40, %if.then33, %if.then
  %27 = load i32, i32* %retval, align 4, !dbg !6217
  ret i32 %27, !dbg !6217
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_read_oob_op(%struct.nand_chip* %chip, i32 %page, i32 %offset_in_oob, i8* %buf, i32 %len) #0 !dbg !6218 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %offset_in_oob.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6219, metadata !DIExpression()), !dbg !6220
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !6221, metadata !DIExpression()), !dbg !6222
  store i32 %offset_in_oob, i32* %offset_in_oob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_oob.addr, metadata !6223, metadata !DIExpression()), !dbg !6224
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6225, metadata !DIExpression()), !dbg !6226
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !6227, metadata !DIExpression()), !dbg !6228
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !6229, metadata !DIExpression()), !dbg !6230
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6231
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !6232
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !6230
  %1 = load i32, i32* %len.addr, align 4, !dbg !6233
  %tobool = icmp ne i32 %1, 0, !dbg !6233
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6235

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6236
  %tobool1 = icmp ne i8* %2, null, !dbg !6236
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6237

if.then:                                          ; preds = %land.lhs.true
  store i32 -22, i32* %retval, align 4, !dbg !6238
  br label %return, !dbg !6238

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %offset_in_oob.addr, align 4, !dbg !6239
  %4 = load i32, i32* %len.addr, align 4, !dbg !6241
  %add = add i32 %3, %4, !dbg !6242
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6243
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 6, !dbg !6244
  %6 = load i32, i32* %oobsize, align 4, !dbg !6244
  %cmp = icmp ugt i32 %add, %6, !dbg !6245
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !6246

if.then2:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !6247
  br label %return, !dbg !6247

if.end3:                                          ; preds = %if.end
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6248
  %call4 = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %7) #8, !dbg !6250
  br i1 %call4, label %if.then5, label %if.end8, !dbg !6251

if.then5:                                         ; preds = %if.end3
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6252
  %9 = load i32, i32* %page.addr, align 4, !dbg !6253
  %10 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6254
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %10, i32 0, i32 4, !dbg !6255
  %11 = load i32, i32* %writesize, align 4, !dbg !6255
  %12 = load i32, i32* %offset_in_oob.addr, align 4, !dbg !6256
  %add6 = add i32 %11, %12, !dbg !6257
  %13 = load i8*, i8** %buf.addr, align 8, !dbg !6258
  %14 = load i32, i32* %len.addr, align 4, !dbg !6259
  %call7 = call i32 @nand_read_page_op(%struct.nand_chip* %8, i32 %9, i32 %add6, i8* %13, i32 %14) #8, !dbg !6260
  store i32 %call7, i32* %retval, align 4, !dbg !6261
  br label %return, !dbg !6261

if.end8:                                          ; preds = %if.end3
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6262
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 5, !dbg !6263
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !6264
  %16 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !6264
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6265
  %18 = load i32, i32* %offset_in_oob.addr, align 4, !dbg !6266
  %19 = load i32, i32* %page.addr, align 4, !dbg !6267
  call void %16(%struct.nand_chip* %17, i32 80, i32 %18, i32 %19) #8, !dbg !6262
  %20 = load i32, i32* %len.addr, align 4, !dbg !6268
  %tobool9 = icmp ne i32 %20, 0, !dbg !6268
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !6270

if.then10:                                        ; preds = %if.end8
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6271
  %legacy11 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 5, !dbg !6272
  %read_buf = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy11, i32 0, i32 6, !dbg !6273
  %22 = load void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i8*, i32)** %read_buf, align 8, !dbg !6273
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6274
  %24 = load i8*, i8** %buf.addr, align 8, !dbg !6275
  %25 = load i32, i32* %len.addr, align 4, !dbg !6276
  call void %22(%struct.nand_chip* %23, i8* %24, i32 %25) #8, !dbg !6271
  br label %if.end12, !dbg !6271

if.end12:                                         ; preds = %if.then10, %if.end8
  store i32 0, i32* %retval, align 4, !dbg !6277
  br label %return, !dbg !6277

return:                                           ; preds = %if.end12, %if.then5, %if.then2, %if.then
  %26 = load i32, i32* %retval, align 4, !dbg !6278
  ret i32 %26, !dbg !6278
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_prog_page_begin_op(%struct.nand_chip* %chip, i32 %page, i32 %offset_in_page, i8* %buf, i32 %len) #0 !dbg !6279 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %offset_in_page.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6282, metadata !DIExpression()), !dbg !6283
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !6284, metadata !DIExpression()), !dbg !6285
  store i32 %offset_in_page, i32* %offset_in_page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_page.addr, metadata !6286, metadata !DIExpression()), !dbg !6287
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6288, metadata !DIExpression()), !dbg !6289
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !6290, metadata !DIExpression()), !dbg !6291
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !6292, metadata !DIExpression()), !dbg !6293
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6294
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !6295
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !6293
  %1 = load i32, i32* %len.addr, align 4, !dbg !6296
  %tobool = icmp ne i32 %1, 0, !dbg !6296
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6298

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6299
  %tobool1 = icmp ne i8* %2, null, !dbg !6299
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6300

if.then:                                          ; preds = %land.lhs.true
  store i32 -22, i32* %retval, align 4, !dbg !6301
  br label %return, !dbg !6301

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6302
  %4 = load i32, i32* %len.addr, align 4, !dbg !6304
  %add = add i32 %3, %4, !dbg !6305
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6306
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 4, !dbg !6307
  %6 = load i32, i32* %writesize, align 4, !dbg !6307
  %7 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6308
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %7, i32 0, i32 6, !dbg !6309
  %8 = load i32, i32* %oobsize, align 4, !dbg !6309
  %add2 = add i32 %6, %8, !dbg !6310
  %cmp = icmp ugt i32 %add, %add2, !dbg !6311
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !6312

if.then3:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !6313
  br label %return, !dbg !6313

if.end4:                                          ; preds = %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6314
  %call5 = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %9) #8, !dbg !6316
  br i1 %call5, label %if.then6, label %if.end8, !dbg !6317

if.then6:                                         ; preds = %if.end4
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6318
  %11 = load i32, i32* %page.addr, align 4, !dbg !6319
  %12 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6320
  %13 = load i8*, i8** %buf.addr, align 8, !dbg !6321
  %14 = load i32, i32* %len.addr, align 4, !dbg !6322
  %call7 = call i32 @nand_exec_prog_page_op(%struct.nand_chip* %10, i32 %11, i32 %12, i8* %13, i32 %14, i1 zeroext false) #8, !dbg !6323
  store i32 %call7, i32* %retval, align 4, !dbg !6324
  br label %return, !dbg !6324

if.end8:                                          ; preds = %if.end4
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6325
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 5, !dbg !6326
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !6327
  %16 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !6327
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6328
  %18 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6329
  %19 = load i32, i32* %page.addr, align 4, !dbg !6330
  call void %16(%struct.nand_chip* %17, i32 128, i32 %18, i32 %19) #8, !dbg !6325
  %20 = load i8*, i8** %buf.addr, align 8, !dbg !6331
  %tobool9 = icmp ne i8* %20, null, !dbg !6331
  br i1 %tobool9, label %if.then10, label %if.end12, !dbg !6333

if.then10:                                        ; preds = %if.end8
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6334
  %legacy11 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 5, !dbg !6335
  %write_buf = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy11, i32 0, i32 5, !dbg !6336
  %22 = load void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i8*, i32)** %write_buf, align 8, !dbg !6336
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6337
  %24 = load i8*, i8** %buf.addr, align 8, !dbg !6338
  %25 = load i32, i32* %len.addr, align 4, !dbg !6339
  call void %22(%struct.nand_chip* %23, i8* %24, i32 %25) #8, !dbg !6334
  br label %if.end12, !dbg !6334

if.end12:                                         ; preds = %if.then10, %if.end8
  store i32 0, i32* %retval, align 4, !dbg !6340
  br label %return, !dbg !6340

return:                                           ; preds = %if.end12, %if.then6, %if.then3, %if.then
  %26 = load i32, i32* %retval, align 4, !dbg !6341
  ret i32 %26, !dbg !6341
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_exec_prog_page_op(%struct.nand_chip* %chip, i32 %page, i32 %offset_in_page, i8* %buf, i32 %len, i1 zeroext %prog) #0 !dbg !6342 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %offset_in_page.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %prog.addr = alloca i8, align 1
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %addrs = alloca [5 x i8], align 1
  %instrs = alloca [6 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp26 = alloca i32, align 4
  %tmp35 = alloca i64, align 8
  %op = alloca %struct.nand_operation, align 8
  %naddrs43 = alloca i32, align 4
  %ret = alloca i32, align 4
  %status = alloca i8, align 1
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6345, metadata !DIExpression()), !dbg !6346
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !6347, metadata !DIExpression()), !dbg !6348
  store i32 %offset_in_page, i32* %offset_in_page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_page.addr, metadata !6349, metadata !DIExpression()), !dbg !6350
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6351, metadata !DIExpression()), !dbg !6352
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !6353, metadata !DIExpression()), !dbg !6354
  %frombool = zext i1 %prog to i8
  store i8 %frombool, i8* %prog.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %prog.addr, metadata !6355, metadata !DIExpression()), !dbg !6356
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !6357, metadata !DIExpression()), !dbg !6358
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6359
  %call = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %0) #8, !dbg !6360
  %call1 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call) #8, !dbg !6361
  store %struct.nand_sdr_timings* %call1, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6358
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !6362, metadata !DIExpression()), !dbg !6363
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6364
  %call2 = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %1) #8, !dbg !6365
  store %struct.mtd_info* %call2, %struct.mtd_info** %mtd, align 8, !dbg !6363
  call void @llvm.dbg.declare(metadata [5 x i8]* %addrs, metadata !6366, metadata !DIExpression()), !dbg !6367
  %2 = bitcast [5 x i8]* %addrs to i8*, !dbg !6367
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 0, i64 5, i1 false), !dbg !6367
  call void @llvm.dbg.declare(metadata [6 x %struct.nand_op_instr]* %instrs, metadata !6368, metadata !DIExpression()), !dbg !6370
  %arrayinit.begin = getelementptr inbounds [6 x %struct.nand_op_instr], [6 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6371
  %3 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !6371
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 40, i1 false), !dbg !6371
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !6372
  store i32 0, i32* %type, align 8, !dbg !6372
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !6372
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !6372
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !6372
  store i8 0, i8* %opcode, align 8, !dbg !6372
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !6372
  store i32 0, i32* %delay_ns, align 8, !dbg !6372
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !6371
  %4 = bitcast %struct.nand_op_instr* %arrayinit.element to i8*, !dbg !6371
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 40, i1 false), !dbg !6371
  %type3 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !6373
  store i32 0, i32* %type3, align 8, !dbg !6373
  %ctx4 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !6373
  %cmd5 = bitcast %union.anon.72* %ctx4 to %struct.nand_op_cmd_instr*, !dbg !6373
  %opcode6 = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd5, i32 0, i32 0, !dbg !6373
  store i8 -128, i8* %opcode6, align 8, !dbg !6373
  %delay_ns7 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !6373
  store i32 0, i32* %delay_ns7, align 8, !dbg !6373
  %arrayinit.element8 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i64 1, !dbg !6371
  %type9 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i32 0, i32 0, !dbg !6374
  store i32 1, i32* %type9, align 8, !dbg !6374
  %ctx10 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i32 0, i32 1, !dbg !6374
  %addr = bitcast %union.anon.72* %ctx10 to %struct.nand_op_addr_instr*, !dbg !6374
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !6374
  store i32 0, i32* %naddrs, align 8, !dbg !6374
  %addrs11 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 1, !dbg !6374
  %arraydecay = getelementptr inbounds [5 x i8], [5 x i8]* %addrs, i64 0, i64 0, !dbg !6374
  store i8* %arraydecay, i8** %addrs11, align 8, !dbg !6374
  %delay_ns12 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i32 0, i32 2, !dbg !6374
  %5 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6375
  %tADL_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %5, i32 0, i32 5, !dbg !6375
  %6 = load i32, i32* %tADL_min, align 4, !dbg !6375
  %add = add i32 %6, 1000, !dbg !6375
  %sub = sub i32 %add, 1, !dbg !6375
  %div = udiv i32 %sub, 1000, !dbg !6375
  %conv = zext i32 %div to i64, !dbg !6375
  %conv13 = trunc i64 %conv to i32, !dbg !6375
  store i32 %conv13, i32* %tmp, align 4, !dbg !6374
  %7 = load i32, i32* %tmp, align 4, !dbg !6375
  store i32 %7, i32* %delay_ns12, align 8, !dbg !6374
  %arrayinit.element14 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i64 1, !dbg !6371
  %type15 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element14, i32 0, i32 0, !dbg !6377
  store i32 3, i32* %type15, align 8, !dbg !6377
  %ctx16 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element14, i32 0, i32 1, !dbg !6377
  %data = bitcast %union.anon.72* %ctx16 to %struct.nand_op_data_instr*, !dbg !6377
  %len17 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !6377
  %8 = load i32, i32* %len.addr, align 4, !dbg !6377
  store i32 %8, i32* %len17, align 8, !dbg !6377
  %buf18 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !6377
  %out = bitcast %union.anon.73* %buf18 to i8**, !dbg !6377
  %9 = load i8*, i8** %buf.addr, align 8, !dbg !6377
  store i8* %9, i8** %out, align 8, !dbg !6377
  %force_8bit = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !6377
  store i8 0, i8* %force_8bit, align 8, !dbg !6377
  %delay_ns19 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element14, i32 0, i32 2, !dbg !6377
  store i32 0, i32* %delay_ns19, align 8, !dbg !6377
  %arrayinit.element20 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element14, i64 1, !dbg !6371
  %10 = bitcast %struct.nand_op_instr* %arrayinit.element20 to i8*, !dbg !6371
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 40, i1 false), !dbg !6371
  %type21 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element20, i32 0, i32 0, !dbg !6378
  store i32 0, i32* %type21, align 8, !dbg !6378
  %ctx22 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element20, i32 0, i32 1, !dbg !6378
  %cmd23 = bitcast %union.anon.72* %ctx22 to %struct.nand_op_cmd_instr*, !dbg !6378
  %opcode24 = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd23, i32 0, i32 0, !dbg !6378
  store i8 16, i8* %opcode24, align 8, !dbg !6378
  %delay_ns25 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element20, i32 0, i32 2, !dbg !6378
  %11 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6379
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %11, i32 0, i32 32, !dbg !6379
  %12 = load i32, i32* %tWB_max, align 8, !dbg !6379
  %add27 = add i32 %12, 1000, !dbg !6379
  %sub28 = sub i32 %add27, 1, !dbg !6379
  %div29 = udiv i32 %sub28, 1000, !dbg !6379
  %conv30 = zext i32 %div29 to i64, !dbg !6379
  %conv31 = trunc i64 %conv30 to i32, !dbg !6379
  store i32 %conv31, i32* %tmp26, align 4, !dbg !6378
  %13 = load i32, i32* %tmp26, align 4, !dbg !6379
  store i32 %13, i32* %delay_ns25, align 8, !dbg !6378
  %arrayinit.element32 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element20, i64 1, !dbg !6371
  %type33 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element32, i32 0, i32 0, !dbg !6381
  store i32 4, i32* %type33, align 8, !dbg !6381
  %ctx34 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element32, i32 0, i32 1, !dbg !6381
  %14 = bitcast %union.anon.72* %ctx34 to i8*, !dbg !6381
  call void @llvm.memset.p0i8.i64(i8* align 8 %14, i8 0, i64 24, i1 false), !dbg !6381
  %waitrdy = bitcast %union.anon.72* %ctx34 to %struct.nand_op_waitrdy_instr*, !dbg !6381
  %timeout_ms = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !6381
  %15 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6382
  %tPROG_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %15, i32 0, i32 2, !dbg !6382
  %16 = load i64, i64* %tPROG_max, align 8, !dbg !6382
  %add36 = add i64 %16, 1000000000, !dbg !6382
  %sub37 = sub i64 %add36, 1, !dbg !6382
  %div38 = udiv i64 %sub37, 1000000000, !dbg !6382
  store i64 %div38, i64* %tmp35, align 8, !dbg !6381
  %17 = load i64, i64* %tmp35, align 8, !dbg !6382
  %conv39 = trunc i64 %17 to i32, !dbg !6381
  store i32 %conv39, i32* %timeout_ms, align 8, !dbg !6381
  %delay_ns40 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element32, i32 0, i32 2, !dbg !6381
  store i32 0, i32* %delay_ns40, align 8, !dbg !6381
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !6384, metadata !DIExpression()), !dbg !6385
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !6386
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6386
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 28, !dbg !6386
  %19 = load i32, i32* %cur_cs, align 4, !dbg !6386
  store i32 %19, i32* %cs, align 8, !dbg !6386
  %instrs41 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !6386
  %arraydecay42 = getelementptr inbounds [6 x %struct.nand_op_instr], [6 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6386
  store %struct.nand_op_instr* %arraydecay42, %struct.nand_op_instr** %instrs41, align 8, !dbg !6386
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6386
  store i32 6, i32* %ninstrs, align 8, !dbg !6386
  call void @llvm.dbg.declare(metadata i32* %naddrs43, metadata !6387, metadata !DIExpression()), !dbg !6388
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6389
  %arraydecay44 = getelementptr inbounds [5 x i8], [5 x i8]* %addrs, i64 0, i64 0, !dbg !6390
  %21 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6391
  %call45 = call i32 @nand_fill_column_cycles(%struct.nand_chip* %20, i8* %arraydecay44, i32 %21) #8, !dbg !6392
  store i32 %call45, i32* %naddrs43, align 4, !dbg !6388
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6393, metadata !DIExpression()), !dbg !6394
  call void @llvm.dbg.declare(metadata i8* %status, metadata !6395, metadata !DIExpression()), !dbg !6396
  %22 = load i32, i32* %naddrs43, align 4, !dbg !6397
  %cmp = icmp slt i32 %22, 0, !dbg !6399
  br i1 %cmp, label %if.then, label %if.end, !dbg !6400

if.then:                                          ; preds = %entry
  %23 = load i32, i32* %naddrs43, align 4, !dbg !6401
  store i32 %23, i32* %retval, align 4, !dbg !6402
  br label %return, !dbg !6402

if.end:                                           ; preds = %entry
  %24 = load i32, i32* %page.addr, align 4, !dbg !6403
  %conv47 = trunc i32 %24 to i8, !dbg !6403
  %25 = load i32, i32* %naddrs43, align 4, !dbg !6404
  %inc = add i32 %25, 1, !dbg !6404
  store i32 %inc, i32* %naddrs43, align 4, !dbg !6404
  %idxprom = sext i32 %25 to i64, !dbg !6405
  %arrayidx = getelementptr [5 x i8], [5 x i8]* %addrs, i64 0, i64 %idxprom, !dbg !6405
  store i8 %conv47, i8* %arrayidx, align 1, !dbg !6406
  %26 = load i32, i32* %page.addr, align 4, !dbg !6407
  %shr = lshr i32 %26, 8, !dbg !6408
  %conv48 = trunc i32 %shr to i8, !dbg !6407
  %27 = load i32, i32* %naddrs43, align 4, !dbg !6409
  %inc49 = add i32 %27, 1, !dbg !6409
  store i32 %inc49, i32* %naddrs43, align 4, !dbg !6409
  %idxprom50 = sext i32 %27 to i64, !dbg !6410
  %arrayidx51 = getelementptr [5 x i8], [5 x i8]* %addrs, i64 0, i64 %idxprom50, !dbg !6410
  store i8 %conv48, i8* %arrayidx51, align 1, !dbg !6411
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6412
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %28, i32 0, i32 6, !dbg !6414
  %29 = load i32, i32* %options, align 8, !dbg !6414
  %conv52 = zext i32 %29 to i64, !dbg !6412
  %and = and i64 %conv52, 16384, !dbg !6415
  %tobool = icmp ne i64 %and, 0, !dbg !6415
  br i1 %tobool, label %if.then53, label %if.end59, !dbg !6416

if.then53:                                        ; preds = %if.end
  %30 = load i32, i32* %page.addr, align 4, !dbg !6417
  %shr54 = lshr i32 %30, 16, !dbg !6418
  %conv55 = trunc i32 %shr54 to i8, !dbg !6417
  %31 = load i32, i32* %naddrs43, align 4, !dbg !6419
  %inc56 = add i32 %31, 1, !dbg !6419
  store i32 %inc56, i32* %naddrs43, align 4, !dbg !6419
  %idxprom57 = sext i32 %31 to i64, !dbg !6420
  %arrayidx58 = getelementptr [5 x i8], [5 x i8]* %addrs, i64 0, i64 %idxprom57, !dbg !6420
  store i8 %conv55, i8* %arrayidx58, align 1, !dbg !6421
  br label %if.end59, !dbg !6420

if.end59:                                         ; preds = %if.then53, %if.end
  %32 = load i32, i32* %naddrs43, align 4, !dbg !6422
  %arrayidx60 = getelementptr [6 x %struct.nand_op_instr], [6 x %struct.nand_op_instr]* %instrs, i64 0, i64 2, !dbg !6423
  %ctx61 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx60, i32 0, i32 1, !dbg !6424
  %addr62 = bitcast %union.anon.72* %ctx61 to %struct.nand_op_addr_instr*, !dbg !6425
  %naddrs63 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr62, i32 0, i32 0, !dbg !6426
  store i32 %32, i32* %naddrs63, align 8, !dbg !6427
  %33 = load i8, i8* %prog.addr, align 1, !dbg !6428
  %tobool64 = trunc i8 %33 to i1, !dbg !6428
  br i1 %tobool64, label %if.end72, label %if.then65, !dbg !6430

if.then65:                                        ; preds = %if.end59
  %ninstrs66 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6431
  %34 = load i32, i32* %ninstrs66, align 8, !dbg !6433
  %sub67 = sub i32 %34, 2, !dbg !6433
  store i32 %sub67, i32* %ninstrs66, align 8, !dbg !6433
  %35 = load i32, i32* %len.addr, align 4, !dbg !6434
  %tobool68 = icmp ne i32 %35, 0, !dbg !6434
  br i1 %tobool68, label %if.end71, label %if.then69, !dbg !6436

if.then69:                                        ; preds = %if.then65
  %ninstrs70 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6437
  %36 = load i32, i32* %ninstrs70, align 8, !dbg !6438
  %dec = add i32 %36, -1, !dbg !6438
  store i32 %dec, i32* %ninstrs70, align 8, !dbg !6438
  br label %if.end71, !dbg !6439

if.end71:                                         ; preds = %if.then69, %if.then65
  br label %if.end72, !dbg !6440

if.end72:                                         ; preds = %if.end71, %if.end59
  %37 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6441
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %37, i32 0, i32 4, !dbg !6443
  %38 = load i32, i32* %writesize, align 4, !dbg !6443
  %cmp73 = icmp ule i32 %38, 512, !dbg !6444
  br i1 %cmp73, label %if.then75, label %if.else97, !dbg !6445

if.then75:                                        ; preds = %if.end72
  %39 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6446
  %40 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6449
  %writesize76 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %40, i32 0, i32 4, !dbg !6450
  %41 = load i32, i32* %writesize76, align 4, !dbg !6450
  %cmp77 = icmp uge i32 %39, %41, !dbg !6451
  br i1 %cmp77, label %if.then79, label %if.else, !dbg !6452

if.then79:                                        ; preds = %if.then75
  %arrayidx80 = getelementptr [6 x %struct.nand_op_instr], [6 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6453
  %ctx81 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx80, i32 0, i32 1, !dbg !6454
  %cmd82 = bitcast %union.anon.72* %ctx81 to %struct.nand_op_cmd_instr*, !dbg !6455
  %opcode83 = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd82, i32 0, i32 0, !dbg !6456
  store i8 80, i8* %opcode83, align 8, !dbg !6457
  br label %if.end96, !dbg !6453

if.else:                                          ; preds = %if.then75
  %42 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6458
  %cmp84 = icmp uge i32 %42, 256, !dbg !6460
  br i1 %cmp84, label %land.lhs.true, label %if.end95, !dbg !6461

land.lhs.true:                                    ; preds = %if.else
  %43 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6462
  %options86 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %43, i32 0, i32 6, !dbg !6463
  %44 = load i32, i32* %options86, align 8, !dbg !6463
  %conv87 = zext i32 %44 to i64, !dbg !6462
  %and88 = and i64 %conv87, 2, !dbg !6464
  %tobool89 = icmp ne i64 %and88, 0, !dbg !6464
  br i1 %tobool89, label %if.end95, label %if.then90, !dbg !6465

if.then90:                                        ; preds = %land.lhs.true
  %arrayidx91 = getelementptr [6 x %struct.nand_op_instr], [6 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6466
  %ctx92 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx91, i32 0, i32 1, !dbg !6467
  %cmd93 = bitcast %union.anon.72* %ctx92 to %struct.nand_op_cmd_instr*, !dbg !6468
  %opcode94 = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd93, i32 0, i32 0, !dbg !6469
  store i8 1, i8* %opcode94, align 8, !dbg !6470
  br label %if.end95, !dbg !6466

if.end95:                                         ; preds = %if.then90, %land.lhs.true, %if.else
  br label %if.end96

if.end96:                                         ; preds = %if.end95, %if.then79
  br label %if.end101, !dbg !6471

if.else97:                                        ; preds = %if.end72
  %instrs98 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !6472
  %45 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs98, align 8, !dbg !6474
  %incdec.ptr = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %45, i32 1, !dbg !6474
  store %struct.nand_op_instr* %incdec.ptr, %struct.nand_op_instr** %instrs98, align 8, !dbg !6474
  %ninstrs99 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6475
  %46 = load i32, i32* %ninstrs99, align 8, !dbg !6476
  %dec100 = add i32 %46, -1, !dbg !6476
  store i32 %dec100, i32* %ninstrs99, align 8, !dbg !6476
  br label %if.end101

if.end101:                                        ; preds = %if.else97, %if.end96
  %47 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6477
  %call102 = call i32 @nand_exec_op(%struct.nand_chip* %47, %struct.nand_operation* %op) #8, !dbg !6478
  store i32 %call102, i32* %ret, align 4, !dbg !6479
  %48 = load i8, i8* %prog.addr, align 1, !dbg !6480
  %tobool103 = trunc i8 %48 to i1, !dbg !6480
  br i1 %tobool103, label %lor.lhs.false, label %if.then105, !dbg !6482

lor.lhs.false:                                    ; preds = %if.end101
  %49 = load i32, i32* %ret, align 4, !dbg !6483
  %tobool104 = icmp ne i32 %49, 0, !dbg !6483
  br i1 %tobool104, label %if.then105, label %if.end106, !dbg !6484

if.then105:                                       ; preds = %lor.lhs.false, %if.end101
  %50 = load i32, i32* %ret, align 4, !dbg !6485
  store i32 %50, i32* %retval, align 4, !dbg !6486
  br label %return, !dbg !6486

if.end106:                                        ; preds = %lor.lhs.false
  %51 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6487
  %call107 = call i32 @nand_status_op(%struct.nand_chip* %51, i8* %status) #8, !dbg !6488
  store i32 %call107, i32* %ret, align 4, !dbg !6489
  %52 = load i32, i32* %ret, align 4, !dbg !6490
  %tobool108 = icmp ne i32 %52, 0, !dbg !6490
  br i1 %tobool108, label %if.then109, label %if.end110, !dbg !6492

if.then109:                                       ; preds = %if.end106
  %53 = load i32, i32* %ret, align 4, !dbg !6493
  store i32 %53, i32* %retval, align 4, !dbg !6494
  br label %return, !dbg !6494

if.end110:                                        ; preds = %if.end106
  %54 = load i8, i8* %status, align 1, !dbg !6495
  %conv111 = zext i8 %54 to i32, !dbg !6495
  store i32 %conv111, i32* %retval, align 4, !dbg !6496
  br label %return, !dbg !6496

return:                                           ; preds = %if.end110, %if.then109, %if.then105, %if.then
  %55 = load i32, i32* %retval, align 4, !dbg !6497
  ret i32 %55, !dbg !6497
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_prog_page_end_op(%struct.nand_chip* %chip) #0 !dbg !6498 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %ret = alloca i32, align 4
  %status = alloca i8, align 1
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %instrs = alloca [2 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp6 = alloca i64, align 8
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6499, metadata !DIExpression()), !dbg !6500
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6501, metadata !DIExpression()), !dbg !6502
  call void @llvm.dbg.declare(metadata i8* %status, metadata !6503, metadata !DIExpression()), !dbg !6504
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6505
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %0) #8, !dbg !6507
  br i1 %call, label %if.then, label %if.else, !dbg !6508

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !6509, metadata !DIExpression()), !dbg !6511
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6512
  %call1 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %1) #8, !dbg !6513
  %call2 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call1) #8, !dbg !6514
  store %struct.nand_sdr_timings* %call2, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6511
  call void @llvm.dbg.declare(metadata [2 x %struct.nand_op_instr]* %instrs, metadata !6515, metadata !DIExpression()), !dbg !6516
  %arrayinit.begin = getelementptr inbounds [2 x %struct.nand_op_instr], [2 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6517
  %2 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !6517
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 40, i1 false), !dbg !6517
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !6518
  store i32 0, i32* %type, align 8, !dbg !6518
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !6518
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !6518
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !6518
  store i8 16, i8* %opcode, align 8, !dbg !6518
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !6518
  %3 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6519
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %3, i32 0, i32 32, !dbg !6519
  %4 = load i32, i32* %tWB_max, align 8, !dbg !6519
  %add = add i32 %4, 1000, !dbg !6519
  %sub = sub i32 %add, 1, !dbg !6519
  %div = udiv i32 %sub, 1000, !dbg !6519
  %conv = zext i32 %div to i64, !dbg !6519
  %conv3 = trunc i64 %conv to i32, !dbg !6519
  store i32 %conv3, i32* %tmp, align 4, !dbg !6518
  %5 = load i32, i32* %tmp, align 4, !dbg !6519
  store i32 %5, i32* %delay_ns, align 8, !dbg !6518
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !6517
  %type4 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !6521
  store i32 4, i32* %type4, align 8, !dbg !6521
  %ctx5 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !6521
  %6 = bitcast %union.anon.72* %ctx5 to i8*, !dbg !6521
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false), !dbg !6521
  %waitrdy = bitcast %union.anon.72* %ctx5 to %struct.nand_op_waitrdy_instr*, !dbg !6521
  %timeout_ms = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !6521
  %7 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6522
  %tPROG_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %7, i32 0, i32 2, !dbg !6522
  %8 = load i64, i64* %tPROG_max, align 8, !dbg !6522
  %add7 = add i64 %8, 1000000000, !dbg !6522
  %sub8 = sub i64 %add7, 1, !dbg !6522
  %div9 = udiv i64 %sub8, 1000000000, !dbg !6522
  store i64 %div9, i64* %tmp6, align 8, !dbg !6521
  %9 = load i64, i64* %tmp6, align 8, !dbg !6522
  %conv10 = trunc i64 %9 to i32, !dbg !6521
  store i32 %conv10, i32* %timeout_ms, align 8, !dbg !6521
  %delay_ns11 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !6521
  store i32 0, i32* %delay_ns11, align 8, !dbg !6521
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !6524, metadata !DIExpression()), !dbg !6525
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !6526
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6526
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 28, !dbg !6526
  %11 = load i32, i32* %cur_cs, align 4, !dbg !6526
  store i32 %11, i32* %cs, align 8, !dbg !6526
  %instrs12 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !6526
  %arraydecay = getelementptr inbounds [2 x %struct.nand_op_instr], [2 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6526
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs12, align 8, !dbg !6526
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6526
  store i32 2, i32* %ninstrs, align 8, !dbg !6526
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6527
  %call13 = call i32 @nand_exec_op(%struct.nand_chip* %12, %struct.nand_operation* %op) #8, !dbg !6528
  store i32 %call13, i32* %ret, align 4, !dbg !6529
  %13 = load i32, i32* %ret, align 4, !dbg !6530
  %tobool = icmp ne i32 %13, 0, !dbg !6530
  br i1 %tobool, label %if.then14, label %if.end, !dbg !6532

if.then14:                                        ; preds = %if.then
  %14 = load i32, i32* %ret, align 4, !dbg !6533
  store i32 %14, i32* %retval, align 4, !dbg !6534
  br label %return, !dbg !6534

if.end:                                           ; preds = %if.then
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6535
  %call15 = call i32 @nand_status_op(%struct.nand_chip* %15, i8* %status) #8, !dbg !6536
  store i32 %call15, i32* %ret, align 4, !dbg !6537
  %16 = load i32, i32* %ret, align 4, !dbg !6538
  %tobool16 = icmp ne i32 %16, 0, !dbg !6538
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !6540

if.then17:                                        ; preds = %if.end
  %17 = load i32, i32* %ret, align 4, !dbg !6541
  store i32 %17, i32* %retval, align 4, !dbg !6542
  br label %return, !dbg !6542

if.end18:                                         ; preds = %if.end
  br label %if.end25, !dbg !6543

if.else:                                          ; preds = %entry
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6544
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 5, !dbg !6546
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !6547
  %19 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !6547
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6548
  call void %19(%struct.nand_chip* %20, i32 16, i32 -1, i32 -1) #8, !dbg !6544
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6549
  %legacy19 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 5, !dbg !6550
  %waitfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy19, i32 0, i32 10, !dbg !6551
  %22 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %waitfunc, align 8, !dbg !6551
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6552
  %call20 = call i32 %22(%struct.nand_chip* %23) #8, !dbg !6549
  store i32 %call20, i32* %ret, align 4, !dbg !6553
  %24 = load i32, i32* %ret, align 4, !dbg !6554
  %cmp = icmp slt i32 %24, 0, !dbg !6556
  br i1 %cmp, label %if.then22, label %if.end23, !dbg !6557

if.then22:                                        ; preds = %if.else
  %25 = load i32, i32* %ret, align 4, !dbg !6558
  store i32 %25, i32* %retval, align 4, !dbg !6559
  br label %return, !dbg !6559

if.end23:                                         ; preds = %if.else
  %26 = load i32, i32* %ret, align 4, !dbg !6560
  %conv24 = trunc i32 %26 to i8, !dbg !6560
  store i8 %conv24, i8* %status, align 1, !dbg !6561
  br label %if.end25

if.end25:                                         ; preds = %if.end23, %if.end18
  %27 = load i8, i8* %status, align 1, !dbg !6562
  %conv26 = zext i8 %27 to i32, !dbg !6562
  %and = and i32 %conv26, 1, !dbg !6564
  %tobool27 = icmp ne i32 %and, 0, !dbg !6564
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !6565

if.then28:                                        ; preds = %if.end25
  store i32 -5, i32* %retval, align 4, !dbg !6566
  br label %return, !dbg !6566

if.end29:                                         ; preds = %if.end25
  store i32 0, i32* %retval, align 4, !dbg !6567
  br label %return, !dbg !6567

return:                                           ; preds = %if.end29, %if.then28, %if.then22, %if.then17, %if.then14
  %28 = load i32, i32* %retval, align 4, !dbg !6568
  ret i32 %28, !dbg !6568
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_prog_page_op(%struct.nand_chip* %chip, i32 %page, i32 %offset_in_page, i8* %buf, i32 %len) #0 !dbg !6569 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %offset_in_page.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %status = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6570, metadata !DIExpression()), !dbg !6571
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !6572, metadata !DIExpression()), !dbg !6573
  store i32 %offset_in_page, i32* %offset_in_page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_page.addr, metadata !6574, metadata !DIExpression()), !dbg !6575
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6576, metadata !DIExpression()), !dbg !6577
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !6578, metadata !DIExpression()), !dbg !6579
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !6580, metadata !DIExpression()), !dbg !6581
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6582
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !6583
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !6581
  call void @llvm.dbg.declare(metadata i32* %status, metadata !6584, metadata !DIExpression()), !dbg !6585
  %1 = load i32, i32* %len.addr, align 4, !dbg !6586
  %tobool = icmp ne i32 %1, 0, !dbg !6586
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !6588

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6589
  %tobool1 = icmp ne i8* %2, null, !dbg !6589
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6590

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -22, i32* %retval, align 4, !dbg !6591
  br label %return, !dbg !6591

if.end:                                           ; preds = %lor.lhs.false
  %3 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6592
  %4 = load i32, i32* %len.addr, align 4, !dbg !6594
  %add = add i32 %3, %4, !dbg !6595
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6596
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 4, !dbg !6597
  %6 = load i32, i32* %writesize, align 4, !dbg !6597
  %7 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6598
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %7, i32 0, i32 6, !dbg !6599
  %8 = load i32, i32* %oobsize, align 4, !dbg !6599
  %add2 = add i32 %6, %8, !dbg !6600
  %cmp = icmp ugt i32 %add, %add2, !dbg !6601
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !6602

if.then3:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !6603
  br label %return, !dbg !6603

if.end4:                                          ; preds = %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6604
  %call5 = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %9) #8, !dbg !6606
  br i1 %call5, label %if.then6, label %if.else, !dbg !6607

if.then6:                                         ; preds = %if.end4
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6608
  %11 = load i32, i32* %page.addr, align 4, !dbg !6610
  %12 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6611
  %13 = load i8*, i8** %buf.addr, align 8, !dbg !6612
  %14 = load i32, i32* %len.addr, align 4, !dbg !6613
  %call7 = call i32 @nand_exec_prog_page_op(%struct.nand_chip* %10, i32 %11, i32 %12, i8* %13, i32 %14, i1 zeroext true) #8, !dbg !6614
  store i32 %call7, i32* %status, align 4, !dbg !6615
  br label %if.end13, !dbg !6616

if.else:                                          ; preds = %if.end4
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6617
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 5, !dbg !6619
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !6620
  %16 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !6620
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6621
  %18 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6622
  %19 = load i32, i32* %page.addr, align 4, !dbg !6623
  call void %16(%struct.nand_chip* %17, i32 128, i32 %18, i32 %19) #8, !dbg !6617
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6624
  %legacy8 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %20, i32 0, i32 5, !dbg !6625
  %write_buf = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy8, i32 0, i32 5, !dbg !6626
  %21 = load void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i8*, i32)** %write_buf, align 8, !dbg !6626
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6627
  %23 = load i8*, i8** %buf.addr, align 8, !dbg !6628
  %24 = load i32, i32* %len.addr, align 4, !dbg !6629
  call void %21(%struct.nand_chip* %22, i8* %23, i32 %24) #8, !dbg !6624
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6630
  %legacy9 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %25, i32 0, i32 5, !dbg !6631
  %cmdfunc10 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy9, i32 0, i32 8, !dbg !6632
  %26 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc10, align 8, !dbg !6632
  %27 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6633
  call void %26(%struct.nand_chip* %27, i32 16, i32 -1, i32 -1) #8, !dbg !6630
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6634
  %legacy11 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %28, i32 0, i32 5, !dbg !6635
  %waitfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy11, i32 0, i32 10, !dbg !6636
  %29 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %waitfunc, align 8, !dbg !6636
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6637
  %call12 = call i32 %29(%struct.nand_chip* %30) #8, !dbg !6634
  store i32 %call12, i32* %status, align 4, !dbg !6638
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then6
  %31 = load i32, i32* %status, align 4, !dbg !6639
  %and = and i32 %31, 1, !dbg !6641
  %tobool14 = icmp ne i32 %and, 0, !dbg !6641
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !6642

if.then15:                                        ; preds = %if.end13
  store i32 -5, i32* %retval, align 4, !dbg !6643
  br label %return, !dbg !6643

if.end16:                                         ; preds = %if.end13
  store i32 0, i32* %retval, align 4, !dbg !6644
  br label %return, !dbg !6644

return:                                           ; preds = %if.end16, %if.then15, %if.then3, %if.then
  %32 = load i32, i32* %retval, align 4, !dbg !6645
  ret i32 %32, !dbg !6645
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_change_write_column_op(%struct.nand_chip* %chip, i32 %offset_in_page, i8* %buf, i32 %len, i1 zeroext %force_8bit) #0 !dbg !6646 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %offset_in_page.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %force_8bit.addr = alloca i8, align 1
  %mtd = alloca %struct.mtd_info*, align 8
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %addrs = alloca [2 x i8], align 1
  %instrs = alloca [3 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6649, metadata !DIExpression()), !dbg !6650
  store i32 %offset_in_page, i32* %offset_in_page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset_in_page.addr, metadata !6651, metadata !DIExpression()), !dbg !6652
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6653, metadata !DIExpression()), !dbg !6654
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !6655, metadata !DIExpression()), !dbg !6656
  %frombool = zext i1 %force_8bit to i8
  store i8 %frombool, i8* %force_8bit.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_8bit.addr, metadata !6657, metadata !DIExpression()), !dbg !6658
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !6659, metadata !DIExpression()), !dbg !6660
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6661
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !6662
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !6660
  %1 = load i32, i32* %len.addr, align 4, !dbg !6663
  %tobool = icmp ne i32 %1, 0, !dbg !6663
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6665

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6666
  %tobool1 = icmp ne i8* %2, null, !dbg !6666
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6667

if.then:                                          ; preds = %land.lhs.true
  store i32 -22, i32* %retval, align 4, !dbg !6668
  br label %return, !dbg !6668

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6669
  %4 = load i32, i32* %len.addr, align 4, !dbg !6671
  %add = add i32 %3, %4, !dbg !6672
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6673
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 4, !dbg !6674
  %6 = load i32, i32* %writesize, align 4, !dbg !6674
  %7 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6675
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %7, i32 0, i32 6, !dbg !6676
  %8 = load i32, i32* %oobsize, align 4, !dbg !6676
  %add2 = add i32 %6, %8, !dbg !6677
  %cmp = icmp ugt i32 %add, %add2, !dbg !6678
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !6679

if.then3:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !6680
  br label %return, !dbg !6680

if.end4:                                          ; preds = %if.end
  %9 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !6681
  %writesize5 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %9, i32 0, i32 4, !dbg !6683
  %10 = load i32, i32* %writesize5, align 4, !dbg !6683
  %cmp6 = icmp ule i32 %10, 512, !dbg !6684
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !6685

if.then7:                                         ; preds = %if.end4
  store i32 -524, i32* %retval, align 4, !dbg !6686
  br label %return, !dbg !6686

if.end8:                                          ; preds = %if.end4
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6687
  %call9 = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %11) #8, !dbg !6689
  br i1 %call9, label %if.then10, label %if.end44, !dbg !6690

if.then10:                                        ; preds = %if.end8
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !6691, metadata !DIExpression()), !dbg !6693
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6694
  %call11 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %12) #8, !dbg !6695
  %call12 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call11) #8, !dbg !6696
  store %struct.nand_sdr_timings* %call12, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6693
  call void @llvm.dbg.declare(metadata [2 x i8]* %addrs, metadata !6697, metadata !DIExpression()), !dbg !6698
  call void @llvm.dbg.declare(metadata [3 x %struct.nand_op_instr]* %instrs, metadata !6699, metadata !DIExpression()), !dbg !6701
  %arrayinit.begin = getelementptr inbounds [3 x %struct.nand_op_instr], [3 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6702
  %13 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !6702
  call void @llvm.memset.p0i8.i64(i8* align 8 %13, i8 0, i64 40, i1 false), !dbg !6702
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !6703
  store i32 0, i32* %type, align 8, !dbg !6703
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !6703
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !6703
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !6703
  store i8 -123, i8* %opcode, align 8, !dbg !6703
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !6703
  store i32 0, i32* %delay_ns, align 8, !dbg !6703
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !6702
  %type13 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !6704
  store i32 1, i32* %type13, align 8, !dbg !6704
  %ctx14 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !6704
  %addr = bitcast %union.anon.72* %ctx14 to %struct.nand_op_addr_instr*, !dbg !6704
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !6704
  store i32 2, i32* %naddrs, align 8, !dbg !6704
  %addrs15 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 1, !dbg !6704
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %addrs, i64 0, i64 0, !dbg !6704
  store i8* %arraydecay, i8** %addrs15, align 8, !dbg !6704
  %delay_ns16 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !6704
  %14 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6705
  %tCCS_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %14, i32 0, i32 1, !dbg !6705
  %15 = load i32, i32* %tCCS_min, align 8, !dbg !6705
  %add17 = add i32 %15, 1000, !dbg !6705
  %sub = sub i32 %add17, 1, !dbg !6705
  %div = udiv i32 %sub, 1000, !dbg !6705
  %conv = zext i32 %div to i64, !dbg !6705
  %conv18 = trunc i64 %conv to i32, !dbg !6705
  store i32 %conv18, i32* %tmp, align 4, !dbg !6704
  %16 = load i32, i32* %tmp, align 4, !dbg !6705
  store i32 %16, i32* %delay_ns16, align 8, !dbg !6704
  %arrayinit.element19 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i64 1, !dbg !6702
  %type20 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element19, i32 0, i32 0, !dbg !6707
  store i32 3, i32* %type20, align 8, !dbg !6707
  %ctx21 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element19, i32 0, i32 1, !dbg !6707
  %data = bitcast %union.anon.72* %ctx21 to %struct.nand_op_data_instr*, !dbg !6707
  %len22 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !6707
  %17 = load i32, i32* %len.addr, align 4, !dbg !6707
  store i32 %17, i32* %len22, align 8, !dbg !6707
  %buf23 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !6707
  %out = bitcast %union.anon.73* %buf23 to i8**, !dbg !6707
  %18 = load i8*, i8** %buf.addr, align 8, !dbg !6707
  store i8* %18, i8** %out, align 8, !dbg !6707
  %force_8bit24 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !6707
  store i8 0, i8* %force_8bit24, align 8, !dbg !6707
  %delay_ns25 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element19, i32 0, i32 2, !dbg !6707
  store i32 0, i32* %delay_ns25, align 8, !dbg !6707
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !6708, metadata !DIExpression()), !dbg !6709
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !6710
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6710
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %19, i32 0, i32 28, !dbg !6710
  %20 = load i32, i32* %cur_cs, align 4, !dbg !6710
  store i32 %20, i32* %cs, align 8, !dbg !6710
  %instrs26 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !6710
  %arraydecay27 = getelementptr inbounds [3 x %struct.nand_op_instr], [3 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6710
  store %struct.nand_op_instr* %arraydecay27, %struct.nand_op_instr** %instrs26, align 8, !dbg !6710
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6710
  store i32 3, i32* %ninstrs, align 8, !dbg !6710
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6711, metadata !DIExpression()), !dbg !6712
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6713
  %arraydecay28 = getelementptr inbounds [2 x i8], [2 x i8]* %addrs, i64 0, i64 0, !dbg !6714
  %22 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6715
  %call29 = call i32 @nand_fill_column_cycles(%struct.nand_chip* %21, i8* %arraydecay28, i32 %22) #8, !dbg !6716
  store i32 %call29, i32* %ret, align 4, !dbg !6717
  %23 = load i32, i32* %ret, align 4, !dbg !6718
  %cmp30 = icmp slt i32 %23, 0, !dbg !6720
  br i1 %cmp30, label %if.then32, label %if.end33, !dbg !6721

if.then32:                                        ; preds = %if.then10
  %24 = load i32, i32* %ret, align 4, !dbg !6722
  store i32 %24, i32* %retval, align 4, !dbg !6723
  br label %return, !dbg !6723

if.end33:                                         ; preds = %if.then10
  %25 = load i8, i8* %force_8bit.addr, align 1, !dbg !6724
  %tobool34 = trunc i8 %25 to i1, !dbg !6724
  %arrayidx = getelementptr [3 x %struct.nand_op_instr], [3 x %struct.nand_op_instr]* %instrs, i64 0, i64 2, !dbg !6725
  %ctx35 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx, i32 0, i32 1, !dbg !6726
  %data36 = bitcast %union.anon.72* %ctx35 to %struct.nand_op_data_instr*, !dbg !6727
  %force_8bit37 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data36, i32 0, i32 2, !dbg !6728
  %frombool38 = zext i1 %tobool34 to i8, !dbg !6729
  store i8 %frombool38, i8* %force_8bit37, align 8, !dbg !6729
  %26 = load i32, i32* %len.addr, align 4, !dbg !6730
  %tobool39 = icmp ne i32 %26, 0, !dbg !6730
  br i1 %tobool39, label %if.end42, label %if.then40, !dbg !6732

if.then40:                                        ; preds = %if.end33
  %ninstrs41 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6733
  %27 = load i32, i32* %ninstrs41, align 8, !dbg !6734
  %dec = add i32 %27, -1, !dbg !6734
  store i32 %dec, i32* %ninstrs41, align 8, !dbg !6734
  br label %if.end42, !dbg !6735

if.end42:                                         ; preds = %if.then40, %if.end33
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6736
  %call43 = call i32 @nand_exec_op(%struct.nand_chip* %28, %struct.nand_operation* %op) #8, !dbg !6737
  store i32 %call43, i32* %retval, align 4, !dbg !6738
  br label %return, !dbg !6738

if.end44:                                         ; preds = %if.end8
  %29 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6739
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %29, i32 0, i32 5, !dbg !6740
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !6741
  %30 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !6741
  %31 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6742
  %32 = load i32, i32* %offset_in_page.addr, align 4, !dbg !6743
  call void %30(%struct.nand_chip* %31, i32 133, i32 %32, i32 -1) #8, !dbg !6739
  %33 = load i32, i32* %len.addr, align 4, !dbg !6744
  %tobool45 = icmp ne i32 %33, 0, !dbg !6744
  br i1 %tobool45, label %if.then46, label %if.end48, !dbg !6746

if.then46:                                        ; preds = %if.end44
  %34 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6747
  %legacy47 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %34, i32 0, i32 5, !dbg !6748
  %write_buf = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy47, i32 0, i32 5, !dbg !6749
  %35 = load void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i8*, i32)** %write_buf, align 8, !dbg !6749
  %36 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6750
  %37 = load i8*, i8** %buf.addr, align 8, !dbg !6751
  %38 = load i32, i32* %len.addr, align 4, !dbg !6752
  call void %35(%struct.nand_chip* %36, i8* %37, i32 %38) #8, !dbg !6747
  br label %if.end48, !dbg !6747

if.end48:                                         ; preds = %if.then46, %if.end44
  store i32 0, i32* %retval, align 4, !dbg !6753
  br label %return, !dbg !6753

return:                                           ; preds = %if.end48, %if.end42, %if.then32, %if.then7, %if.then3, %if.then
  %39 = load i32, i32* %retval, align 4, !dbg !6754
  ret i32 %39, !dbg !6754
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_readid_op(%struct.nand_chip* %chip, i8 zeroext %addr, i8* %buf, i32 %len) #0 !dbg !6755 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %addr.addr = alloca i8, align 1
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %id = alloca i8*, align 8
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %instrs = alloca [3 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6756, metadata !DIExpression()), !dbg !6757
  store i8 %addr, i8* %addr.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %addr.addr, metadata !6758, metadata !DIExpression()), !dbg !6759
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6760, metadata !DIExpression()), !dbg !6761
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !6762, metadata !DIExpression()), !dbg !6763
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6764, metadata !DIExpression()), !dbg !6765
  call void @llvm.dbg.declare(metadata i8** %id, metadata !6766, metadata !DIExpression()), !dbg !6767
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6768
  store i8* %0, i8** %id, align 8, !dbg !6767
  %1 = load i32, i32* %len.addr, align 4, !dbg !6769
  %tobool = icmp ne i32 %1, 0, !dbg !6769
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !6771

land.lhs.true:                                    ; preds = %entry
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6772
  %tobool1 = icmp ne i8* %2, null, !dbg !6772
  br i1 %tobool1, label %if.end, label %if.then, !dbg !6773

if.then:                                          ; preds = %land.lhs.true
  store i32 -22, i32* %retval, align 4, !dbg !6774
  br label %return, !dbg !6774

if.end:                                           ; preds = %land.lhs.true, %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6775
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %3) #8, !dbg !6777
  br i1 %call, label %if.then2, label %if.end22, !dbg !6778

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !6779, metadata !DIExpression()), !dbg !6781
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6782
  %call3 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %4) #8, !dbg !6783
  %call4 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call3) #8, !dbg !6784
  store %struct.nand_sdr_timings* %call4, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6781
  call void @llvm.dbg.declare(metadata [3 x %struct.nand_op_instr]* %instrs, metadata !6785, metadata !DIExpression()), !dbg !6786
  %arrayinit.begin = getelementptr inbounds [3 x %struct.nand_op_instr], [3 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6787
  %5 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !6787
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 40, i1 false), !dbg !6787
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !6788
  store i32 0, i32* %type, align 8, !dbg !6788
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !6788
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !6788
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !6788
  store i8 -112, i8* %opcode, align 8, !dbg !6788
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !6788
  store i32 0, i32* %delay_ns, align 8, !dbg !6788
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !6787
  %type5 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !6789
  store i32 1, i32* %type5, align 8, !dbg !6789
  %ctx6 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !6789
  %addr7 = bitcast %union.anon.72* %ctx6 to %struct.nand_op_addr_instr*, !dbg !6789
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr7, i32 0, i32 0, !dbg !6789
  store i32 1, i32* %naddrs, align 8, !dbg !6789
  %addrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr7, i32 0, i32 1, !dbg !6789
  store i8* %addr.addr, i8** %addrs, align 8, !dbg !6789
  %delay_ns8 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !6789
  %6 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6790
  %tADL_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %6, i32 0, i32 5, !dbg !6790
  %7 = load i32, i32* %tADL_min, align 4, !dbg !6790
  %add = add i32 %7, 1000, !dbg !6790
  %sub = sub i32 %add, 1, !dbg !6790
  %div = udiv i32 %sub, 1000, !dbg !6790
  %conv = zext i32 %div to i64, !dbg !6790
  %conv9 = trunc i64 %conv to i32, !dbg !6790
  store i32 %conv9, i32* %tmp, align 4, !dbg !6789
  %8 = load i32, i32* %tmp, align 4, !dbg !6790
  store i32 %8, i32* %delay_ns8, align 8, !dbg !6789
  %arrayinit.element10 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i64 1, !dbg !6787
  %type11 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element10, i32 0, i32 0, !dbg !6792
  store i32 2, i32* %type11, align 8, !dbg !6792
  %ctx12 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element10, i32 0, i32 1, !dbg !6792
  %data = bitcast %union.anon.72* %ctx12 to %struct.nand_op_data_instr*, !dbg !6792
  %len13 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !6792
  %9 = load i32, i32* %len.addr, align 4, !dbg !6792
  store i32 %9, i32* %len13, align 8, !dbg !6792
  %buf14 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !6792
  %in = bitcast %union.anon.73* %buf14 to i8**, !dbg !6792
  %10 = load i8*, i8** %buf.addr, align 8, !dbg !6792
  store i8* %10, i8** %in, align 8, !dbg !6792
  %force_8bit = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !6792
  store i8 1, i8* %force_8bit, align 8, !dbg !6792
  %delay_ns15 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element10, i32 0, i32 2, !dbg !6792
  store i32 0, i32* %delay_ns15, align 8, !dbg !6792
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !6793, metadata !DIExpression()), !dbg !6794
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !6795
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6795
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 28, !dbg !6795
  %12 = load i32, i32* %cur_cs, align 4, !dbg !6795
  store i32 %12, i32* %cs, align 8, !dbg !6795
  %instrs16 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !6795
  %arraydecay = getelementptr inbounds [3 x %struct.nand_op_instr], [3 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6795
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs16, align 8, !dbg !6795
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6795
  store i32 3, i32* %ninstrs, align 8, !dbg !6795
  %13 = load i32, i32* %len.addr, align 4, !dbg !6796
  %tobool17 = icmp ne i32 %13, 0, !dbg !6796
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !6798

if.then18:                                        ; preds = %if.then2
  %ninstrs19 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6799
  %14 = load i32, i32* %ninstrs19, align 8, !dbg !6800
  %dec = add i32 %14, -1, !dbg !6800
  store i32 %dec, i32* %ninstrs19, align 8, !dbg !6800
  br label %if.end20, !dbg !6801

if.end20:                                         ; preds = %if.then18, %if.then2
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6802
  %call21 = call i32 @nand_exec_op(%struct.nand_chip* %15, %struct.nand_operation* %op) #8, !dbg !6803
  store i32 %call21, i32* %retval, align 4, !dbg !6804
  br label %return, !dbg !6804

if.end22:                                         ; preds = %if.end
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6805
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %16, i32 0, i32 5, !dbg !6806
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !6807
  %17 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !6807
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6808
  %19 = load i8, i8* %addr.addr, align 1, !dbg !6809
  %conv23 = zext i8 %19 to i32, !dbg !6809
  call void %17(%struct.nand_chip* %18, i32 144, i32 %conv23, i32 -1) #8, !dbg !6805
  store i32 0, i32* %i, align 4, !dbg !6810
  br label %for.cond, !dbg !6812

for.cond:                                         ; preds = %for.inc, %if.end22
  %20 = load i32, i32* %i, align 4, !dbg !6813
  %21 = load i32, i32* %len.addr, align 4, !dbg !6815
  %cmp = icmp ult i32 %20, %21, !dbg !6816
  br i1 %cmp, label %for.body, label %for.end, !dbg !6817

for.body:                                         ; preds = %for.cond
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6818
  %legacy25 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %22, i32 0, i32 5, !dbg !6819
  %read_byte = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy25, i32 0, i32 3, !dbg !6820
  %23 = load i8 (%struct.nand_chip*)*, i8 (%struct.nand_chip*)** %read_byte, align 8, !dbg !6820
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6821
  %call26 = call zeroext i8 %23(%struct.nand_chip* %24) #8, !dbg !6818
  %25 = load i8*, i8** %id, align 8, !dbg !6822
  %26 = load i32, i32* %i, align 4, !dbg !6823
  %idxprom = zext i32 %26 to i64, !dbg !6822
  %arrayidx = getelementptr i8, i8* %25, i64 %idxprom, !dbg !6822
  store i8 %call26, i8* %arrayidx, align 1, !dbg !6824
  br label %for.inc, !dbg !6822

for.inc:                                          ; preds = %for.body
  %27 = load i32, i32* %i, align 4, !dbg !6825
  %inc = add i32 %27, 1, !dbg !6825
  store i32 %inc, i32* %i, align 4, !dbg !6825
  br label %for.cond, !dbg !6826, !llvm.loop !6827

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !6829
  br label %return, !dbg !6829

return:                                           ; preds = %for.end, %if.end20, %if.then
  %28 = load i32, i32* %retval, align 4, !dbg !6830
  ret i32 %28, !dbg !6830
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_erase_op(%struct.nand_chip* %chip, i32 %eraseblock) #0 !dbg !6831 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %eraseblock.addr = alloca i32, align 4
  %page = alloca i32, align 4
  %ret = alloca i32, align 4
  %status = alloca i8, align 1
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %addrs = alloca [3 x i8], align 1
  %instrs = alloca [4 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp25 = alloca i64, align 8
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6834, metadata !DIExpression()), !dbg !6835
  store i32 %eraseblock, i32* %eraseblock.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %eraseblock.addr, metadata !6836, metadata !DIExpression()), !dbg !6837
  call void @llvm.dbg.declare(metadata i32* %page, metadata !6838, metadata !DIExpression()), !dbg !6839
  %0 = load i32, i32* %eraseblock.addr, align 4, !dbg !6840
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6841
  %phys_erase_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 18, !dbg !6842
  %2 = load i32, i32* %phys_erase_shift, align 4, !dbg !6842
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6843
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 17, !dbg !6844
  %4 = load i32, i32* %page_shift, align 8, !dbg !6844
  %sub = sub i32 %2, %4, !dbg !6845
  %shl = shl i32 %0, %sub, !dbg !6846
  store i32 %shl, i32* %page, align 4, !dbg !6839
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6847, metadata !DIExpression()), !dbg !6848
  call void @llvm.dbg.declare(metadata i8* %status, metadata !6849, metadata !DIExpression()), !dbg !6850
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6851
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %5) #8, !dbg !6853
  br i1 %call, label %if.then, label %if.else, !dbg !6854

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !6855, metadata !DIExpression()), !dbg !6857
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6858
  %call1 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %6) #8, !dbg !6859
  %call2 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call1) #8, !dbg !6860
  store %struct.nand_sdr_timings* %call2, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6857
  call void @llvm.dbg.declare(metadata [3 x i8]* %addrs, metadata !6861, metadata !DIExpression()), !dbg !6863
  %arrayinit.begin = getelementptr inbounds [3 x i8], [3 x i8]* %addrs, i64 0, i64 0, !dbg !6864
  %7 = load i32, i32* %page, align 4, !dbg !6865
  %conv = trunc i32 %7 to i8, !dbg !6865
  store i8 %conv, i8* %arrayinit.begin, align 1, !dbg !6864
  %arrayinit.element = getelementptr inbounds i8, i8* %arrayinit.begin, i64 1, !dbg !6864
  %8 = load i32, i32* %page, align 4, !dbg !6866
  %shr = lshr i32 %8, 8, !dbg !6867
  %conv3 = trunc i32 %shr to i8, !dbg !6866
  store i8 %conv3, i8* %arrayinit.element, align 1, !dbg !6864
  %arrayinit.element4 = getelementptr inbounds i8, i8* %arrayinit.element, i64 1, !dbg !6864
  %9 = load i32, i32* %page, align 4, !dbg !6868
  %shr5 = lshr i32 %9, 16, !dbg !6869
  %conv6 = trunc i32 %shr5 to i8, !dbg !6868
  store i8 %conv6, i8* %arrayinit.element4, align 1, !dbg !6864
  call void @llvm.dbg.declare(metadata [4 x %struct.nand_op_instr]* %instrs, metadata !6870, metadata !DIExpression()), !dbg !6871
  %arrayinit.begin7 = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6872
  %10 = bitcast %struct.nand_op_instr* %arrayinit.begin7 to i8*, !dbg !6872
  call void @llvm.memset.p0i8.i64(i8* align 8 %10, i8 0, i64 40, i1 false), !dbg !6872
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin7, i32 0, i32 0, !dbg !6873
  store i32 0, i32* %type, align 8, !dbg !6873
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin7, i32 0, i32 1, !dbg !6873
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !6873
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !6873
  store i8 96, i8* %opcode, align 8, !dbg !6873
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin7, i32 0, i32 2, !dbg !6873
  store i32 0, i32* %delay_ns, align 8, !dbg !6873
  %arrayinit.element8 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin7, i64 1, !dbg !6872
  %type9 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i32 0, i32 0, !dbg !6874
  store i32 1, i32* %type9, align 8, !dbg !6874
  %ctx10 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i32 0, i32 1, !dbg !6874
  %addr = bitcast %union.anon.72* %ctx10 to %struct.nand_op_addr_instr*, !dbg !6874
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !6874
  store i32 2, i32* %naddrs, align 8, !dbg !6874
  %addrs11 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 1, !dbg !6874
  %arraydecay = getelementptr inbounds [3 x i8], [3 x i8]* %addrs, i64 0, i64 0, !dbg !6874
  store i8* %arraydecay, i8** %addrs11, align 8, !dbg !6874
  %delay_ns12 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i32 0, i32 2, !dbg !6874
  store i32 0, i32* %delay_ns12, align 8, !dbg !6874
  %arrayinit.element13 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element8, i64 1, !dbg !6872
  %11 = bitcast %struct.nand_op_instr* %arrayinit.element13 to i8*, !dbg !6872
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 40, i1 false), !dbg !6872
  %type14 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element13, i32 0, i32 0, !dbg !6875
  store i32 0, i32* %type14, align 8, !dbg !6875
  %ctx15 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element13, i32 0, i32 1, !dbg !6875
  %cmd16 = bitcast %union.anon.72* %ctx15 to %struct.nand_op_cmd_instr*, !dbg !6875
  %opcode17 = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd16, i32 0, i32 0, !dbg !6875
  store i8 -48, i8* %opcode17, align 8, !dbg !6875
  %delay_ns18 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element13, i32 0, i32 2, !dbg !6875
  %12 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6876
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %12, i32 0, i32 32, !dbg !6876
  %13 = load i32, i32* %tWB_max, align 8, !dbg !6876
  %add = add i32 %13, 1000000000, !dbg !6876
  %sub19 = sub i32 %add, 1, !dbg !6876
  %div = udiv i32 %sub19, 1000000000, !dbg !6876
  %conv20 = zext i32 %div to i64, !dbg !6876
  %conv21 = trunc i64 %conv20 to i32, !dbg !6876
  store i32 %conv21, i32* %tmp, align 4, !dbg !6875
  %14 = load i32, i32* %tmp, align 4, !dbg !6876
  store i32 %14, i32* %delay_ns18, align 8, !dbg !6875
  %arrayinit.element22 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element13, i64 1, !dbg !6872
  %type23 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element22, i32 0, i32 0, !dbg !6878
  store i32 4, i32* %type23, align 8, !dbg !6878
  %ctx24 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element22, i32 0, i32 1, !dbg !6878
  %15 = bitcast %union.anon.72* %ctx24 to i8*, !dbg !6878
  call void @llvm.memset.p0i8.i64(i8* align 8 %15, i8 0, i64 24, i1 false), !dbg !6878
  %waitrdy = bitcast %union.anon.72* %ctx24 to %struct.nand_op_waitrdy_instr*, !dbg !6878
  %timeout_ms = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !6878
  %16 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6879
  %tBERS_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %16, i32 0, i32 0, !dbg !6879
  %17 = load i64, i64* %tBERS_max, align 8, !dbg !6879
  %add26 = add i64 %17, 1000000000, !dbg !6879
  %sub27 = sub i64 %add26, 1, !dbg !6879
  %div28 = udiv i64 %sub27, 1000000000, !dbg !6879
  store i64 %div28, i64* %tmp25, align 8, !dbg !6878
  %18 = load i64, i64* %tmp25, align 8, !dbg !6879
  %conv29 = trunc i64 %18 to i32, !dbg !6878
  store i32 %conv29, i32* %timeout_ms, align 8, !dbg !6878
  %delay_ns30 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element22, i32 0, i32 2, !dbg !6878
  store i32 0, i32* %delay_ns30, align 8, !dbg !6878
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !6881, metadata !DIExpression()), !dbg !6882
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !6883
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6883
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %19, i32 0, i32 28, !dbg !6883
  %20 = load i32, i32* %cur_cs, align 4, !dbg !6883
  store i32 %20, i32* %cs, align 8, !dbg !6883
  %instrs31 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !6883
  %arraydecay32 = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6883
  store %struct.nand_op_instr* %arraydecay32, %struct.nand_op_instr** %instrs31, align 8, !dbg !6883
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6883
  store i32 4, i32* %ninstrs, align 8, !dbg !6883
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6884
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 6, !dbg !6886
  %22 = load i32, i32* %options, align 8, !dbg !6886
  %conv33 = zext i32 %22 to i64, !dbg !6884
  %and = and i64 %conv33, 16384, !dbg !6887
  %tobool = icmp ne i64 %and, 0, !dbg !6887
  br i1 %tobool, label %if.then34, label %if.end, !dbg !6888

if.then34:                                        ; preds = %if.then
  %arrayidx = getelementptr [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 1, !dbg !6889
  %ctx35 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx, i32 0, i32 1, !dbg !6890
  %addr36 = bitcast %union.anon.72* %ctx35 to %struct.nand_op_addr_instr*, !dbg !6891
  %naddrs37 = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr36, i32 0, i32 0, !dbg !6892
  %23 = load i32, i32* %naddrs37, align 8, !dbg !6893
  %inc = add i32 %23, 1, !dbg !6893
  store i32 %inc, i32* %naddrs37, align 8, !dbg !6893
  br label %if.end, !dbg !6889

if.end:                                           ; preds = %if.then34, %if.then
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6894
  %call38 = call i32 @nand_exec_op(%struct.nand_chip* %24, %struct.nand_operation* %op) #8, !dbg !6895
  store i32 %call38, i32* %ret, align 4, !dbg !6896
  %25 = load i32, i32* %ret, align 4, !dbg !6897
  %tobool39 = icmp ne i32 %25, 0, !dbg !6897
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !6899

if.then40:                                        ; preds = %if.end
  %26 = load i32, i32* %ret, align 4, !dbg !6900
  store i32 %26, i32* %retval, align 4, !dbg !6901
  br label %return, !dbg !6901

if.end41:                                         ; preds = %if.end
  %27 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6902
  %call42 = call i32 @nand_status_op(%struct.nand_chip* %27, i8* %status) #8, !dbg !6903
  store i32 %call42, i32* %ret, align 4, !dbg !6904
  %28 = load i32, i32* %ret, align 4, !dbg !6905
  %tobool43 = icmp ne i32 %28, 0, !dbg !6905
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !6907

if.then44:                                        ; preds = %if.end41
  %29 = load i32, i32* %ret, align 4, !dbg !6908
  store i32 %29, i32* %retval, align 4, !dbg !6909
  br label %return, !dbg !6909

if.end45:                                         ; preds = %if.end41
  br label %if.end54, !dbg !6910

if.else:                                          ; preds = %entry
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6911
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %30, i32 0, i32 5, !dbg !6913
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !6914
  %31 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !6914
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6915
  %33 = load i32, i32* %page, align 4, !dbg !6916
  call void %31(%struct.nand_chip* %32, i32 96, i32 -1, i32 %33) #8, !dbg !6911
  %34 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6917
  %legacy46 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %34, i32 0, i32 5, !dbg !6918
  %cmdfunc47 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy46, i32 0, i32 8, !dbg !6919
  %35 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc47, align 8, !dbg !6919
  %36 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6920
  call void %35(%struct.nand_chip* %36, i32 208, i32 -1, i32 -1) #8, !dbg !6917
  %37 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6921
  %legacy48 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %37, i32 0, i32 5, !dbg !6922
  %waitfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy48, i32 0, i32 10, !dbg !6923
  %38 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %waitfunc, align 8, !dbg !6923
  %39 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6924
  %call49 = call i32 %38(%struct.nand_chip* %39) #8, !dbg !6921
  store i32 %call49, i32* %ret, align 4, !dbg !6925
  %40 = load i32, i32* %ret, align 4, !dbg !6926
  %cmp = icmp slt i32 %40, 0, !dbg !6928
  br i1 %cmp, label %if.then51, label %if.end52, !dbg !6929

if.then51:                                        ; preds = %if.else
  %41 = load i32, i32* %ret, align 4, !dbg !6930
  store i32 %41, i32* %retval, align 4, !dbg !6931
  br label %return, !dbg !6931

if.end52:                                         ; preds = %if.else
  %42 = load i32, i32* %ret, align 4, !dbg !6932
  %conv53 = trunc i32 %42 to i8, !dbg !6932
  store i8 %conv53, i8* %status, align 1, !dbg !6933
  br label %if.end54

if.end54:                                         ; preds = %if.end52, %if.end45
  %43 = load i8, i8* %status, align 1, !dbg !6934
  %conv55 = zext i8 %43 to i32, !dbg !6934
  %and56 = and i32 %conv55, 1, !dbg !6936
  %tobool57 = icmp ne i32 %and56, 0, !dbg !6936
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !6937

if.then58:                                        ; preds = %if.end54
  store i32 -5, i32* %retval, align 4, !dbg !6938
  br label %return, !dbg !6938

if.end59:                                         ; preds = %if.end54
  store i32 0, i32* %retval, align 4, !dbg !6939
  br label %return, !dbg !6939

return:                                           ; preds = %if.end59, %if.then58, %if.then51, %if.then44, %if.then40
  %44 = load i32, i32* %retval, align 4, !dbg !6940
  ret i32 %44, !dbg !6940
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_reset_op(%struct.nand_chip* %chip) #0 !dbg !6941 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %instrs = alloca [2 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp6 = alloca i64, align 8
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6942, metadata !DIExpression()), !dbg !6943
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6944
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %0) #8, !dbg !6946
  br i1 %call, label %if.then, label %if.end, !dbg !6947

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !6948, metadata !DIExpression()), !dbg !6950
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6951
  %call1 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %1) #8, !dbg !6952
  %call2 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call1) #8, !dbg !6953
  store %struct.nand_sdr_timings* %call2, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6950
  call void @llvm.dbg.declare(metadata [2 x %struct.nand_op_instr]* %instrs, metadata !6954, metadata !DIExpression()), !dbg !6955
  %arrayinit.begin = getelementptr inbounds [2 x %struct.nand_op_instr], [2 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6956
  %2 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !6956
  call void @llvm.memset.p0i8.i64(i8* align 8 %2, i8 0, i64 40, i1 false), !dbg !6956
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !6957
  store i32 0, i32* %type, align 8, !dbg !6957
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !6957
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !6957
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !6957
  store i8 -1, i8* %opcode, align 8, !dbg !6957
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !6957
  %3 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6958
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %3, i32 0, i32 32, !dbg !6958
  %4 = load i32, i32* %tWB_max, align 8, !dbg !6958
  %add = add i32 %4, 1000, !dbg !6958
  %sub = sub i32 %add, 1, !dbg !6958
  %div = udiv i32 %sub, 1000, !dbg !6958
  %conv = zext i32 %div to i64, !dbg !6958
  %conv3 = trunc i64 %conv to i32, !dbg !6958
  store i32 %conv3, i32* %tmp, align 4, !dbg !6957
  %5 = load i32, i32* %tmp, align 4, !dbg !6958
  store i32 %5, i32* %delay_ns, align 8, !dbg !6957
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !6956
  %type4 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !6960
  store i32 4, i32* %type4, align 8, !dbg !6960
  %ctx5 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !6960
  %6 = bitcast %union.anon.72* %ctx5 to i8*, !dbg !6960
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 24, i1 false), !dbg !6960
  %waitrdy = bitcast %union.anon.72* %ctx5 to %struct.nand_op_waitrdy_instr*, !dbg !6960
  %timeout_ms = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !6960
  %7 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !6961
  %tRST_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %7, i32 0, i32 31, !dbg !6961
  %8 = load i64, i64* %tRST_max, align 8, !dbg !6961
  %add7 = add i64 %8, 1000000000, !dbg !6961
  %sub8 = sub i64 %add7, 1, !dbg !6961
  %div9 = udiv i64 %sub8, 1000000000, !dbg !6961
  store i64 %div9, i64* %tmp6, align 8, !dbg !6960
  %9 = load i64, i64* %tmp6, align 8, !dbg !6961
  %conv10 = trunc i64 %9 to i32, !dbg !6960
  store i32 %conv10, i32* %timeout_ms, align 8, !dbg !6960
  %delay_ns11 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !6960
  store i32 0, i32* %delay_ns11, align 8, !dbg !6960
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !6963, metadata !DIExpression()), !dbg !6964
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !6965
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6965
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 28, !dbg !6965
  %11 = load i32, i32* %cur_cs, align 4, !dbg !6965
  store i32 %11, i32* %cs, align 8, !dbg !6965
  %instrs12 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !6965
  %arraydecay = getelementptr inbounds [2 x %struct.nand_op_instr], [2 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !6965
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs12, align 8, !dbg !6965
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !6965
  store i32 2, i32* %ninstrs, align 8, !dbg !6965
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6966
  %call13 = call i32 @nand_exec_op(%struct.nand_chip* %12, %struct.nand_operation* %op) #8, !dbg !6967
  store i32 %call13, i32* %retval, align 4, !dbg !6968
  br label %return, !dbg !6968

if.end:                                           ; preds = %entry
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6969
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %13, i32 0, i32 5, !dbg !6970
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !6971
  %14 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !6971
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6972
  call void %14(%struct.nand_chip* %15, i32 255, i32 -1, i32 -1) #8, !dbg !6969
  store i32 0, i32* %retval, align 4, !dbg !6973
  br label %return, !dbg !6973

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !6974
  ret i32 %16, !dbg !6974
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_check_op(%struct.nand_chip* %chip, %struct.nand_operation* %op) #0 !dbg !6975 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %op.addr = alloca %struct.nand_operation*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6976, metadata !DIExpression()), !dbg !6977
  store %struct.nand_operation* %op, %struct.nand_operation** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_operation** %op.addr, metadata !6978, metadata !DIExpression()), !dbg !6979
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6980
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %0) #8, !dbg !6982
  br i1 %call, label %if.end, label %if.then, !dbg !6983

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6984
  br label %return, !dbg !6984

if.end:                                           ; preds = %entry
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6985
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 30, !dbg !6986
  %2 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !6986
  %ops = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %2, i32 0, i32 1, !dbg !6987
  %3 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !6987
  %exec_op = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %3, i32 0, i32 2, !dbg !6988
  %4 = load i32 (%struct.nand_chip*, %struct.nand_operation*, i1)*, i32 (%struct.nand_chip*, %struct.nand_operation*, i1)** %exec_op, align 8, !dbg !6988
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !6989
  %6 = load %struct.nand_operation*, %struct.nand_operation** %op.addr, align 8, !dbg !6990
  %call1 = call i32 %4(%struct.nand_chip* %5, %struct.nand_operation* %6, i1 zeroext true) #8, !dbg !6985
  store i32 %call1, i32* %retval, align 4, !dbg !6991
  br label %return, !dbg !6991

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !6992
  ret i32 %7, !dbg !6992
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_write_data_op(%struct.nand_chip* %chip, i8* %buf, i32 %len, i1 zeroext %force_8bit) #0 !dbg !6993 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %force_8bit.addr = alloca i8, align 1
  %instrs = alloca [1 x %struct.nand_op_instr], align 16
  %op = alloca %struct.nand_operation, align 8
  %p = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !6996, metadata !DIExpression()), !dbg !6997
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6998, metadata !DIExpression()), !dbg !6999
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !7000, metadata !DIExpression()), !dbg !7001
  %frombool = zext i1 %force_8bit to i8
  store i8 %frombool, i8* %force_8bit.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_8bit.addr, metadata !7002, metadata !DIExpression()), !dbg !7003
  %0 = load i32, i32* %len.addr, align 4, !dbg !7004
  %tobool = icmp ne i32 %0, 0, !dbg !7004
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7006

lor.lhs.false:                                    ; preds = %entry
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !7007
  %tobool1 = icmp ne i8* %1, null, !dbg !7007
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7008

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -22, i32* %retval, align 4, !dbg !7009
  br label %return, !dbg !7009

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7010
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %2) #8, !dbg !7012
  br i1 %call, label %if.then2, label %if.end13, !dbg !7013

if.then2:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata [1 x %struct.nand_op_instr]* %instrs, metadata !7014, metadata !DIExpression()), !dbg !7016
  %arrayinit.begin = getelementptr inbounds [1 x %struct.nand_op_instr], [1 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !7017
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !7018
  store i32 3, i32* %type, align 8, !dbg !7018
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !7018
  %data = bitcast %union.anon.72* %ctx to %struct.nand_op_data_instr*, !dbg !7018
  %len3 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !7018
  %3 = load i32, i32* %len.addr, align 4, !dbg !7018
  store i32 %3, i32* %len3, align 8, !dbg !7018
  %buf4 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 1, !dbg !7018
  %out = bitcast %union.anon.73* %buf4 to i8**, !dbg !7018
  %4 = load i8*, i8** %buf.addr, align 8, !dbg !7018
  store i8* %4, i8** %out, align 8, !dbg !7018
  %force_8bit5 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 2, !dbg !7018
  store i8 0, i8* %force_8bit5, align 8, !dbg !7018
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !7018
  store i32 0, i32* %delay_ns, align 8, !dbg !7018
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !7019, metadata !DIExpression()), !dbg !7020
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !7021
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7021
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 28, !dbg !7021
  %6 = load i32, i32* %cur_cs, align 4, !dbg !7021
  store i32 %6, i32* %cs, align 8, !dbg !7021
  %instrs6 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !7021
  %arraydecay = getelementptr inbounds [1 x %struct.nand_op_instr], [1 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !7021
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs6, align 8, !dbg !7021
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !7021
  store i32 1, i32* %ninstrs, align 8, !dbg !7021
  %7 = load i8, i8* %force_8bit.addr, align 1, !dbg !7022
  %tobool7 = trunc i8 %7 to i1, !dbg !7022
  %arrayidx = getelementptr [1 x %struct.nand_op_instr], [1 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !7023
  %ctx8 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx, i32 0, i32 1, !dbg !7024
  %data9 = bitcast %union.anon.72* %ctx8 to %struct.nand_op_data_instr*, !dbg !7025
  %force_8bit10 = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data9, i32 0, i32 2, !dbg !7026
  %frombool11 = zext i1 %tobool7 to i8, !dbg !7027
  store i8 %frombool11, i8* %force_8bit10, align 8, !dbg !7027
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7028
  %call12 = call i32 @nand_exec_op(%struct.nand_chip* %8, %struct.nand_operation* %op) #8, !dbg !7029
  store i32 %call12, i32* %retval, align 4, !dbg !7030
  br label %return, !dbg !7030

if.end13:                                         ; preds = %if.end
  %9 = load i8, i8* %force_8bit.addr, align 1, !dbg !7031
  %tobool14 = trunc i8 %9 to i1, !dbg !7031
  br i1 %tobool14, label %if.then15, label %if.else, !dbg !7033

if.then15:                                        ; preds = %if.end13
  call void @llvm.dbg.declare(metadata i8** %p, metadata !7034, metadata !DIExpression()), !dbg !7036
  %10 = load i8*, i8** %buf.addr, align 8, !dbg !7037
  store i8* %10, i8** %p, align 8, !dbg !7036
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7038, metadata !DIExpression()), !dbg !7039
  store i32 0, i32* %i, align 4, !dbg !7040
  br label %for.cond, !dbg !7042

for.cond:                                         ; preds = %for.inc, %if.then15
  %11 = load i32, i32* %i, align 4, !dbg !7043
  %12 = load i32, i32* %len.addr, align 4, !dbg !7045
  %cmp = icmp ult i32 %11, %12, !dbg !7046
  br i1 %cmp, label %for.body, label %for.end, !dbg !7047

for.body:                                         ; preds = %for.cond
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7048
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %13, i32 0, i32 5, !dbg !7049
  %write_byte = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 4, !dbg !7050
  %14 = load void (%struct.nand_chip*, i8)*, void (%struct.nand_chip*, i8)** %write_byte, align 8, !dbg !7050
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7051
  %16 = load i8*, i8** %p, align 8, !dbg !7052
  %17 = load i32, i32* %i, align 4, !dbg !7053
  %idxprom = zext i32 %17 to i64, !dbg !7052
  %arrayidx16 = getelementptr i8, i8* %16, i64 %idxprom, !dbg !7052
  %18 = load i8, i8* %arrayidx16, align 1, !dbg !7052
  call void %14(%struct.nand_chip* %15, i8 zeroext %18) #8, !dbg !7048
  br label %for.inc, !dbg !7048

for.inc:                                          ; preds = %for.body
  %19 = load i32, i32* %i, align 4, !dbg !7054
  %inc = add i32 %19, 1, !dbg !7054
  store i32 %inc, i32* %i, align 4, !dbg !7054
  br label %for.cond, !dbg !7055, !llvm.loop !7056

for.end:                                          ; preds = %for.cond
  br label %if.end18, !dbg !7058

if.else:                                          ; preds = %if.end13
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7059
  %legacy17 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %20, i32 0, i32 5, !dbg !7061
  %write_buf = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy17, i32 0, i32 5, !dbg !7062
  %21 = load void (%struct.nand_chip*, i8*, i32)*, void (%struct.nand_chip*, i8*, i32)** %write_buf, align 8, !dbg !7062
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7063
  %23 = load i8*, i8** %buf.addr, align 8, !dbg !7064
  %24 = load i32, i32* %len.addr, align 4, !dbg !7065
  call void %21(%struct.nand_chip* %22, i8* %23, i32 %24) #8, !dbg !7059
  br label %if.end18

if.end18:                                         ; preds = %if.else, %for.end
  store i32 0, i32* %retval, align 4, !dbg !7066
  br label %return, !dbg !7066

return:                                           ; preds = %if.end18, %if.then2, %if.then
  %25 = load i32, i32* %retval, align 4, !dbg !7067
  ret i32 %25, !dbg !7067
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_op_parser_exec_op(%struct.nand_chip* %chip, %struct.nand_op_parser* %parser, %struct.nand_operation* %op, i1 zeroext %check_only) #0 !dbg !7068 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %parser.addr = alloca %struct.nand_op_parser*, align 8
  %op.addr = alloca %struct.nand_operation*, align 8
  %check_only.addr = alloca i8, align 1
  %ctx = alloca %struct.nand_op_parser_ctx, align 8
  %i = alloca i32, align 4
  %pattern = alloca %struct.nand_op_parser_pattern*, align 8
  %best_ctx = alloca %struct.nand_op_parser_ctx, align 8
  %ret = alloca i32, align 4
  %best_pattern = alloca i32, align 4
  %test_ctx = alloca %struct.nand_op_parser_ctx, align 8
  %tmp = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !7113, metadata !DIExpression()), !dbg !7114
  store %struct.nand_op_parser* %parser, %struct.nand_op_parser** %parser.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser** %parser.addr, metadata !7115, metadata !DIExpression()), !dbg !7116
  store %struct.nand_operation* %op, %struct.nand_operation** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_operation** %op.addr, metadata !7117, metadata !DIExpression()), !dbg !7118
  %frombool = zext i1 %check_only to i8
  store i8 %frombool, i8* %check_only.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %check_only.addr, metadata !7119, metadata !DIExpression()), !dbg !7120
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_ctx* %ctx, metadata !7121, metadata !DIExpression()), !dbg !7127
  %instrs = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 0, !dbg !7128
  %0 = load %struct.nand_operation*, %struct.nand_operation** %op.addr, align 8, !dbg !7129
  %instrs1 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %0, i32 0, i32 1, !dbg !7130
  %1 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs1, align 8, !dbg !7130
  store %struct.nand_op_instr* %1, %struct.nand_op_instr** %instrs, align 8, !dbg !7128
  %ninstrs = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 1, !dbg !7128
  %2 = load %struct.nand_operation*, %struct.nand_operation** %op.addr, align 8, !dbg !7131
  %ninstrs2 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %2, i32 0, i32 2, !dbg !7132
  %3 = load i32, i32* %ninstrs2, align 8, !dbg !7132
  store i32 %3, i32* %ninstrs, align 8, !dbg !7128
  %subop = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7128
  %cs = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop, i32 0, i32 0, !dbg !7133
  %4 = load %struct.nand_operation*, %struct.nand_operation** %op.addr, align 8, !dbg !7134
  %cs3 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %4, i32 0, i32 0, !dbg !7135
  %5 = load i32, i32* %cs3, align 8, !dbg !7135
  store i32 %5, i32* %cs, align 8, !dbg !7133
  %instrs4 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop, i32 0, i32 1, !dbg !7133
  %6 = load %struct.nand_operation*, %struct.nand_operation** %op.addr, align 8, !dbg !7136
  %instrs5 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %6, i32 0, i32 1, !dbg !7137
  %7 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs5, align 8, !dbg !7137
  store %struct.nand_op_instr* %7, %struct.nand_op_instr** %instrs4, align 8, !dbg !7133
  %ninstrs6 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop, i32 0, i32 2, !dbg !7133
  store i32 0, i32* %ninstrs6, align 8, !dbg !7133
  %first_instr_start_off = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop, i32 0, i32 3, !dbg !7133
  store i32 0, i32* %first_instr_start_off, align 4, !dbg !7133
  %last_instr_end_off = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop, i32 0, i32 4, !dbg !7133
  store i32 0, i32* %last_instr_end_off, align 8, !dbg !7133
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7138, metadata !DIExpression()), !dbg !7139
  br label %while.cond, !dbg !7140

while.cond:                                       ; preds = %if.end45, %entry
  %subop7 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7141
  %instrs8 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop7, i32 0, i32 1, !dbg !7142
  %8 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs8, align 8, !dbg !7142
  %9 = load %struct.nand_operation*, %struct.nand_operation** %op.addr, align 8, !dbg !7143
  %instrs9 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %9, i32 0, i32 1, !dbg !7144
  %10 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs9, align 8, !dbg !7144
  %11 = load %struct.nand_operation*, %struct.nand_operation** %op.addr, align 8, !dbg !7145
  %ninstrs10 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %11, i32 0, i32 2, !dbg !7146
  %12 = load i32, i32* %ninstrs10, align 8, !dbg !7146
  %idx.ext = zext i32 %12 to i64, !dbg !7147
  %add.ptr = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %10, i64 %idx.ext, !dbg !7147
  %cmp = icmp ult %struct.nand_op_instr* %8, %add.ptr, !dbg !7148
  br i1 %cmp, label %while.body, label %while.end, !dbg !7140

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_pattern** %pattern, metadata !7149, metadata !DIExpression()), !dbg !7151
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_ctx* %best_ctx, metadata !7152, metadata !DIExpression()), !dbg !7153
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7154, metadata !DIExpression()), !dbg !7155
  call void @llvm.dbg.declare(metadata i32* %best_pattern, metadata !7156, metadata !DIExpression()), !dbg !7157
  store i32 -1, i32* %best_pattern, align 4, !dbg !7157
  store i32 0, i32* %i, align 4, !dbg !7158
  br label %for.cond, !dbg !7160

for.cond:                                         ; preds = %for.inc, %while.body
  %13 = load i32, i32* %i, align 4, !dbg !7161
  %14 = load %struct.nand_op_parser*, %struct.nand_op_parser** %parser.addr, align 8, !dbg !7163
  %npatterns = getelementptr inbounds %struct.nand_op_parser, %struct.nand_op_parser* %14, i32 0, i32 1, !dbg !7164
  %15 = load i32, i32* %npatterns, align 8, !dbg !7164
  %cmp11 = icmp ult i32 %13, %15, !dbg !7165
  br i1 %cmp11, label %for.body, label %for.end, !dbg !7166

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_ctx* %test_ctx, metadata !7167, metadata !DIExpression()), !dbg !7169
  %16 = bitcast %struct.nand_op_parser_ctx* %test_ctx to i8*, !dbg !7170
  %17 = bitcast %struct.nand_op_parser_ctx* %ctx to i8*, !dbg !7170
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %16, i8* align 8 %17, i64 48, i1 false), !dbg !7170
  %18 = load %struct.nand_op_parser*, %struct.nand_op_parser** %parser.addr, align 8, !dbg !7171
  %patterns = getelementptr inbounds %struct.nand_op_parser, %struct.nand_op_parser* %18, i32 0, i32 0, !dbg !7172
  %19 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %patterns, align 8, !dbg !7172
  %20 = load i32, i32* %i, align 4, !dbg !7173
  %idxprom = zext i32 %20 to i64, !dbg !7171
  %arrayidx = getelementptr %struct.nand_op_parser_pattern, %struct.nand_op_parser_pattern* %19, i64 %idxprom, !dbg !7171
  store %struct.nand_op_parser_pattern* %arrayidx, %struct.nand_op_parser_pattern** %pattern, align 8, !dbg !7174
  %21 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %pattern, align 8, !dbg !7175
  %call = call zeroext i1 @nand_op_parser_match_pat(%struct.nand_op_parser_pattern* %21, %struct.nand_op_parser_ctx* %test_ctx) #8, !dbg !7177
  br i1 %call, label %if.end, label %if.then, !dbg !7178

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !7179

if.end:                                           ; preds = %for.body
  %22 = load i32, i32* %best_pattern, align 4, !dbg !7180
  %cmp12 = icmp sge i32 %22, 0, !dbg !7182
  br i1 %cmp12, label %land.lhs.true, label %if.end16, !dbg !7183

land.lhs.true:                                    ; preds = %if.end
  %call13 = call i32 @nand_op_parser_cmp_ctx(%struct.nand_op_parser_ctx* %test_ctx, %struct.nand_op_parser_ctx* %best_ctx) #8, !dbg !7184
  %cmp14 = icmp sle i32 %call13, 0, !dbg !7185
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !7186

if.then15:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !7187

if.end16:                                         ; preds = %land.lhs.true, %if.end
  %23 = load i32, i32* %i, align 4, !dbg !7188
  store i32 %23, i32* %best_pattern, align 4, !dbg !7189
  %24 = bitcast %struct.nand_op_parser_ctx* %best_ctx to i8*, !dbg !7190
  %25 = bitcast %struct.nand_op_parser_ctx* %test_ctx to i8*, !dbg !7190
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 48, i1 false), !dbg !7190
  br label %for.inc, !dbg !7191

for.inc:                                          ; preds = %if.end16, %if.then15, %if.then
  %26 = load i32, i32* %i, align 4, !dbg !7192
  %inc = add i32 %26, 1, !dbg !7192
  store i32 %inc, i32* %i, align 4, !dbg !7192
  br label %for.cond, !dbg !7193, !llvm.loop !7194

for.end:                                          ; preds = %for.cond
  %27 = load i32, i32* %best_pattern, align 4, !dbg !7196
  %cmp17 = icmp slt i32 %27, 0, !dbg !7198
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !7199

if.then18:                                        ; preds = %for.end
  store i32 0, i32* %tmp, align 4, !dbg !7200
  %28 = load i32, i32* %tmp, align 4, !dbg !7204
  store i32 -524, i32* %retval, align 4, !dbg !7205
  br label %return, !dbg !7205

if.end19:                                         ; preds = %for.end
  %29 = bitcast %struct.nand_op_parser_ctx* %ctx to i8*, !dbg !7206
  %30 = bitcast %struct.nand_op_parser_ctx* %best_ctx to i8*, !dbg !7206
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %29, i8* align 8 %30, i64 48, i1 false), !dbg !7206
  call void @nand_op_parser_trace(%struct.nand_op_parser_ctx* %ctx) #8, !dbg !7207
  %31 = load i8, i8* %check_only.addr, align 1, !dbg !7208
  %tobool = trunc i8 %31 to i1, !dbg !7208
  br i1 %tobool, label %if.end29, label %if.then20, !dbg !7210

if.then20:                                        ; preds = %if.end19
  %32 = load %struct.nand_op_parser*, %struct.nand_op_parser** %parser.addr, align 8, !dbg !7211
  %patterns21 = getelementptr inbounds %struct.nand_op_parser, %struct.nand_op_parser* %32, i32 0, i32 0, !dbg !7213
  %33 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %patterns21, align 8, !dbg !7213
  %34 = load i32, i32* %best_pattern, align 4, !dbg !7214
  %idxprom22 = sext i32 %34 to i64, !dbg !7211
  %arrayidx23 = getelementptr %struct.nand_op_parser_pattern, %struct.nand_op_parser_pattern* %33, i64 %idxprom22, !dbg !7211
  store %struct.nand_op_parser_pattern* %arrayidx23, %struct.nand_op_parser_pattern** %pattern, align 8, !dbg !7215
  %35 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %pattern, align 8, !dbg !7216
  %exec = getelementptr inbounds %struct.nand_op_parser_pattern, %struct.nand_op_parser_pattern* %35, i32 0, i32 2, !dbg !7217
  %36 = load i32 (%struct.nand_chip*, %struct.nand_subop*)*, i32 (%struct.nand_chip*, %struct.nand_subop*)** %exec, align 8, !dbg !7217
  %37 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7218
  %subop24 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7219
  %call25 = call i32 %36(%struct.nand_chip* %37, %struct.nand_subop* %subop24) #8, !dbg !7216
  store i32 %call25, i32* %ret, align 4, !dbg !7220
  %38 = load i32, i32* %ret, align 4, !dbg !7221
  %tobool26 = icmp ne i32 %38, 0, !dbg !7221
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !7223

if.then27:                                        ; preds = %if.then20
  %39 = load i32, i32* %ret, align 4, !dbg !7224
  store i32 %39, i32* %retval, align 4, !dbg !7225
  br label %return, !dbg !7225

if.end28:                                         ; preds = %if.then20
  br label %if.end29, !dbg !7226

if.end29:                                         ; preds = %if.end28, %if.end19
  %subop30 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7227
  %instrs31 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop30, i32 0, i32 1, !dbg !7228
  %40 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs31, align 8, !dbg !7228
  %subop32 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7229
  %ninstrs33 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop32, i32 0, i32 2, !dbg !7230
  %41 = load i32, i32* %ninstrs33, align 8, !dbg !7230
  %idx.ext34 = zext i32 %41 to i64, !dbg !7231
  %add.ptr35 = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %40, i64 %idx.ext34, !dbg !7231
  %subop36 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7232
  %instrs37 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop36, i32 0, i32 1, !dbg !7233
  store %struct.nand_op_instr* %add.ptr35, %struct.nand_op_instr** %instrs37, align 8, !dbg !7234
  %subop38 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7235
  %last_instr_end_off39 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop38, i32 0, i32 4, !dbg !7237
  %42 = load i32, i32* %last_instr_end_off39, align 8, !dbg !7237
  %tobool40 = icmp ne i32 %42, 0, !dbg !7238
  br i1 %tobool40, label %if.then41, label %if.end45, !dbg !7239

if.then41:                                        ; preds = %if.end29
  %subop42 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7240
  %instrs43 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop42, i32 0, i32 1, !dbg !7241
  %43 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs43, align 8, !dbg !7242
  %add.ptr44 = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %43, i64 -1, !dbg !7242
  store %struct.nand_op_instr* %add.ptr44, %struct.nand_op_instr** %instrs43, align 8, !dbg !7242
  br label %if.end45, !dbg !7243

if.end45:                                         ; preds = %if.then41, %if.end29
  %subop46 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7244
  %last_instr_end_off47 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop46, i32 0, i32 4, !dbg !7245
  %44 = load i32, i32* %last_instr_end_off47, align 8, !dbg !7245
  %subop48 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %ctx, i32 0, i32 2, !dbg !7246
  %first_instr_start_off49 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop48, i32 0, i32 3, !dbg !7247
  store i32 %44, i32* %first_instr_start_off49, align 4, !dbg !7248
  br label %while.cond, !dbg !7140, !llvm.loop !7249

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4, !dbg !7251
  br label %return, !dbg !7251

return:                                           ; preds = %while.end, %if.then27, %if.then18
  %45 = load i32, i32* %retval, align 4, !dbg !7252
  ret i32 %45, !dbg !7252
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @nand_op_parser_match_pat(%struct.nand_op_parser_pattern* %pat, %struct.nand_op_parser_ctx* %ctx) #0 !dbg !7253 {
entry:
  %retval = alloca i1, align 1
  %pat.addr = alloca %struct.nand_op_parser_pattern*, align 8
  %ctx.addr = alloca %struct.nand_op_parser_ctx*, align 8
  %instr_offset = alloca i32, align 4
  %end = alloca %struct.nand_op_instr*, align 8
  %instr = alloca %struct.nand_op_instr*, align 8
  %i = alloca i32, align 4
  %ninstrs3 = alloca i32, align 4
  store %struct.nand_op_parser_pattern* %pat, %struct.nand_op_parser_pattern** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_pattern** %pat.addr, metadata !7257, metadata !DIExpression()), !dbg !7258
  store %struct.nand_op_parser_ctx* %ctx, %struct.nand_op_parser_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_ctx** %ctx.addr, metadata !7259, metadata !DIExpression()), !dbg !7260
  call void @llvm.dbg.declare(metadata i32* %instr_offset, metadata !7261, metadata !DIExpression()), !dbg !7262
  %0 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %ctx.addr, align 8, !dbg !7263
  %subop = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %0, i32 0, i32 2, !dbg !7264
  %first_instr_start_off = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop, i32 0, i32 3, !dbg !7265
  %1 = load i32, i32* %first_instr_start_off, align 4, !dbg !7265
  store i32 %1, i32* %instr_offset, align 4, !dbg !7262
  call void @llvm.dbg.declare(metadata %struct.nand_op_instr** %end, metadata !7266, metadata !DIExpression()), !dbg !7267
  %2 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %ctx.addr, align 8, !dbg !7268
  %instrs = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %2, i32 0, i32 0, !dbg !7269
  %3 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs, align 8, !dbg !7269
  %4 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %ctx.addr, align 8, !dbg !7270
  %ninstrs = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %4, i32 0, i32 1, !dbg !7271
  %5 = load i32, i32* %ninstrs, align 8, !dbg !7271
  %idx.ext = zext i32 %5 to i64, !dbg !7272
  %add.ptr = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %3, i64 %idx.ext, !dbg !7272
  store %struct.nand_op_instr* %add.ptr, %struct.nand_op_instr** %end, align 8, !dbg !7267
  call void @llvm.dbg.declare(metadata %struct.nand_op_instr** %instr, metadata !7273, metadata !DIExpression()), !dbg !7274
  %6 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %ctx.addr, align 8, !dbg !7275
  %subop1 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %6, i32 0, i32 2, !dbg !7276
  %instrs2 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop1, i32 0, i32 1, !dbg !7277
  %7 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs2, align 8, !dbg !7277
  store %struct.nand_op_instr* %7, %struct.nand_op_instr** %instr, align 8, !dbg !7274
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7278, metadata !DIExpression()), !dbg !7279
  call void @llvm.dbg.declare(metadata i32* %ninstrs3, metadata !7280, metadata !DIExpression()), !dbg !7281
  store i32 0, i32* %i, align 4, !dbg !7282
  store i32 0, i32* %ninstrs3, align 4, !dbg !7284
  br label %for.cond, !dbg !7285

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load i32, i32* %i, align 4, !dbg !7286
  %9 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %pat.addr, align 8, !dbg !7288
  %nelems = getelementptr inbounds %struct.nand_op_parser_pattern, %struct.nand_op_parser_pattern* %9, i32 0, i32 1, !dbg !7289
  %10 = load i32, i32* %nelems, align 8, !dbg !7289
  %cmp = icmp ult i32 %8, %10, !dbg !7290
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !7291

land.rhs:                                         ; preds = %for.cond
  %11 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instr, align 8, !dbg !7292
  %12 = load %struct.nand_op_instr*, %struct.nand_op_instr** %end, align 8, !dbg !7293
  %cmp4 = icmp ult %struct.nand_op_instr* %11, %12, !dbg !7294
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %13 = phi i1 [ false, %for.cond ], [ %cmp4, %land.rhs ], !dbg !7295
  br i1 %13, label %for.body, label %for.end, !dbg !7296

for.body:                                         ; preds = %land.end
  %14 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instr, align 8, !dbg !7297
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %14, i32 0, i32 0, !dbg !7300
  %15 = load i32, i32* %type, align 8, !dbg !7300
  %16 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %pat.addr, align 8, !dbg !7301
  %elems = getelementptr inbounds %struct.nand_op_parser_pattern, %struct.nand_op_parser_pattern* %16, i32 0, i32 0, !dbg !7302
  %17 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %elems, align 8, !dbg !7302
  %18 = load i32, i32* %i, align 4, !dbg !7303
  %idxprom = zext i32 %18 to i64, !dbg !7301
  %arrayidx = getelementptr %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %17, i64 %idxprom, !dbg !7301
  %type5 = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %arrayidx, i32 0, i32 0, !dbg !7304
  %19 = load i32, i32* %type5, align 4, !dbg !7304
  %cmp6 = icmp ne i32 %15, %19, !dbg !7305
  br i1 %cmp6, label %if.then, label %if.end11, !dbg !7306

if.then:                                          ; preds = %for.body
  %20 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %pat.addr, align 8, !dbg !7307
  %elems7 = getelementptr inbounds %struct.nand_op_parser_pattern, %struct.nand_op_parser_pattern* %20, i32 0, i32 0, !dbg !7310
  %21 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %elems7, align 8, !dbg !7310
  %22 = load i32, i32* %i, align 4, !dbg !7311
  %idxprom8 = zext i32 %22 to i64, !dbg !7307
  %arrayidx9 = getelementptr %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %21, i64 %idxprom8, !dbg !7307
  %optional = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %arrayidx9, i32 0, i32 1, !dbg !7312
  %23 = load i8, i8* %optional, align 4, !dbg !7312
  %tobool = trunc i8 %23 to i1, !dbg !7312
  br i1 %tobool, label %if.end, label %if.then10, !dbg !7313

if.then10:                                        ; preds = %if.then
  store i1 false, i1* %retval, align 1, !dbg !7314
  br label %return, !dbg !7314

if.end:                                           ; preds = %if.then
  br label %for.inc, !dbg !7315

if.end11:                                         ; preds = %for.body
  %24 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %pat.addr, align 8, !dbg !7316
  %elems12 = getelementptr inbounds %struct.nand_op_parser_pattern, %struct.nand_op_parser_pattern* %24, i32 0, i32 0, !dbg !7318
  %25 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %elems12, align 8, !dbg !7318
  %26 = load i32, i32* %i, align 4, !dbg !7319
  %idxprom13 = zext i32 %26 to i64, !dbg !7316
  %arrayidx14 = getelementptr %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %25, i64 %idxprom13, !dbg !7316
  %27 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instr, align 8, !dbg !7320
  %call = call zeroext i1 @nand_op_parser_must_split_instr(%struct.nand_op_parser_pattern_elem* %arrayidx14, %struct.nand_op_instr* %27, i32* %instr_offset) #8, !dbg !7321
  br i1 %call, label %if.then15, label %if.end17, !dbg !7322

if.then15:                                        ; preds = %if.end11
  %28 = load i32, i32* %ninstrs3, align 4, !dbg !7323
  %inc = add i32 %28, 1, !dbg !7323
  store i32 %inc, i32* %ninstrs3, align 4, !dbg !7323
  %29 = load i32, i32* %i, align 4, !dbg !7325
  %inc16 = add i32 %29, 1, !dbg !7325
  store i32 %inc16, i32* %i, align 4, !dbg !7325
  br label %for.end, !dbg !7326

if.end17:                                         ; preds = %if.end11
  %30 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instr, align 8, !dbg !7327
  %incdec.ptr = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %30, i32 1, !dbg !7327
  store %struct.nand_op_instr* %incdec.ptr, %struct.nand_op_instr** %instr, align 8, !dbg !7327
  %31 = load i32, i32* %ninstrs3, align 4, !dbg !7328
  %inc18 = add i32 %31, 1, !dbg !7328
  store i32 %inc18, i32* %ninstrs3, align 4, !dbg !7328
  store i32 0, i32* %instr_offset, align 4, !dbg !7329
  br label %for.inc, !dbg !7330

for.inc:                                          ; preds = %if.end17, %if.end
  %32 = load i32, i32* %i, align 4, !dbg !7331
  %inc19 = add i32 %32, 1, !dbg !7331
  store i32 %inc19, i32* %i, align 4, !dbg !7331
  br label %for.cond, !dbg !7332, !llvm.loop !7333

for.end:                                          ; preds = %if.then15, %land.end
  %33 = load i32, i32* %ninstrs3, align 4, !dbg !7335
  %tobool20 = icmp ne i32 %33, 0, !dbg !7335
  br i1 %tobool20, label %if.end22, label %if.then21, !dbg !7337

if.then21:                                        ; preds = %for.end
  store i1 false, i1* %retval, align 1, !dbg !7338
  br label %return, !dbg !7338

if.end22:                                         ; preds = %for.end
  br label %for.cond23, !dbg !7339

for.cond23:                                       ; preds = %for.inc34, %if.end22
  %34 = load i32, i32* %i, align 4, !dbg !7340
  %35 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %pat.addr, align 8, !dbg !7343
  %nelems24 = getelementptr inbounds %struct.nand_op_parser_pattern, %struct.nand_op_parser_pattern* %35, i32 0, i32 1, !dbg !7344
  %36 = load i32, i32* %nelems24, align 8, !dbg !7344
  %cmp25 = icmp ult i32 %34, %36, !dbg !7345
  br i1 %cmp25, label %for.body26, label %for.end36, !dbg !7346

for.body26:                                       ; preds = %for.cond23
  %37 = load %struct.nand_op_parser_pattern*, %struct.nand_op_parser_pattern** %pat.addr, align 8, !dbg !7347
  %elems27 = getelementptr inbounds %struct.nand_op_parser_pattern, %struct.nand_op_parser_pattern* %37, i32 0, i32 0, !dbg !7350
  %38 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %elems27, align 8, !dbg !7350
  %39 = load i32, i32* %i, align 4, !dbg !7351
  %idxprom28 = zext i32 %39 to i64, !dbg !7347
  %arrayidx29 = getelementptr %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %38, i64 %idxprom28, !dbg !7347
  %optional30 = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %arrayidx29, i32 0, i32 1, !dbg !7352
  %40 = load i8, i8* %optional30, align 4, !dbg !7352
  %tobool31 = trunc i8 %40 to i1, !dbg !7352
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !7353

if.then32:                                        ; preds = %for.body26
  store i1 false, i1* %retval, align 1, !dbg !7354
  br label %return, !dbg !7354

if.end33:                                         ; preds = %for.body26
  br label %for.inc34, !dbg !7355

for.inc34:                                        ; preds = %if.end33
  %41 = load i32, i32* %i, align 4, !dbg !7356
  %inc35 = add i32 %41, 1, !dbg !7356
  store i32 %inc35, i32* %i, align 4, !dbg !7356
  br label %for.cond23, !dbg !7357, !llvm.loop !7358

for.end36:                                        ; preds = %for.cond23
  %42 = load i32, i32* %ninstrs3, align 4, !dbg !7360
  %43 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %ctx.addr, align 8, !dbg !7361
  %subop37 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %43, i32 0, i32 2, !dbg !7362
  %ninstrs38 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop37, i32 0, i32 2, !dbg !7363
  store i32 %42, i32* %ninstrs38, align 8, !dbg !7364
  %44 = load i32, i32* %instr_offset, align 4, !dbg !7365
  %45 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %ctx.addr, align 8, !dbg !7366
  %subop39 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %45, i32 0, i32 2, !dbg !7367
  %last_instr_end_off = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop39, i32 0, i32 4, !dbg !7368
  store i32 %44, i32* %last_instr_end_off, align 8, !dbg !7369
  store i1 true, i1* %retval, align 1, !dbg !7370
  br label %return, !dbg !7370

return:                                           ; preds = %for.end36, %if.then32, %if.then21, %if.then10
  %46 = load i1, i1* %retval, align 1, !dbg !7371
  ret i1 %46, !dbg !7371
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_op_parser_cmp_ctx(%struct.nand_op_parser_ctx* %a, %struct.nand_op_parser_ctx* %b) #0 !dbg !7372 {
entry:
  %retval = alloca i32, align 4
  %a.addr = alloca %struct.nand_op_parser_ctx*, align 8
  %b.addr = alloca %struct.nand_op_parser_ctx*, align 8
  store %struct.nand_op_parser_ctx* %a, %struct.nand_op_parser_ctx** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_ctx** %a.addr, metadata !7377, metadata !DIExpression()), !dbg !7378
  store %struct.nand_op_parser_ctx* %b, %struct.nand_op_parser_ctx** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_ctx** %b.addr, metadata !7379, metadata !DIExpression()), !dbg !7380
  %0 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %a.addr, align 8, !dbg !7381
  %subop = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %0, i32 0, i32 2, !dbg !7383
  %ninstrs = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop, i32 0, i32 2, !dbg !7384
  %1 = load i32, i32* %ninstrs, align 8, !dbg !7384
  %2 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %b.addr, align 8, !dbg !7385
  %subop1 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %2, i32 0, i32 2, !dbg !7386
  %ninstrs2 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop1, i32 0, i32 2, !dbg !7387
  %3 = load i32, i32* %ninstrs2, align 8, !dbg !7387
  %cmp = icmp ult i32 %1, %3, !dbg !7388
  br i1 %cmp, label %if.then, label %if.else, !dbg !7389

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !7390
  br label %return, !dbg !7390

if.else:                                          ; preds = %entry
  %4 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %a.addr, align 8, !dbg !7391
  %subop3 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %4, i32 0, i32 2, !dbg !7393
  %ninstrs4 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop3, i32 0, i32 2, !dbg !7394
  %5 = load i32, i32* %ninstrs4, align 8, !dbg !7394
  %6 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %b.addr, align 8, !dbg !7395
  %subop5 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %6, i32 0, i32 2, !dbg !7396
  %ninstrs6 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop5, i32 0, i32 2, !dbg !7397
  %7 = load i32, i32* %ninstrs6, align 8, !dbg !7397
  %cmp7 = icmp ugt i32 %5, %7, !dbg !7398
  br i1 %cmp7, label %if.then8, label %if.end, !dbg !7399

if.then8:                                         ; preds = %if.else
  store i32 1, i32* %retval, align 4, !dbg !7400
  br label %return, !dbg !7400

if.end:                                           ; preds = %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end
  %8 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %a.addr, align 8, !dbg !7401
  %subop10 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %8, i32 0, i32 2, !dbg !7403
  %last_instr_end_off = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop10, i32 0, i32 4, !dbg !7404
  %9 = load i32, i32* %last_instr_end_off, align 8, !dbg !7404
  %10 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %b.addr, align 8, !dbg !7405
  %subop11 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %10, i32 0, i32 2, !dbg !7406
  %last_instr_end_off12 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop11, i32 0, i32 4, !dbg !7407
  %11 = load i32, i32* %last_instr_end_off12, align 8, !dbg !7407
  %cmp13 = icmp ult i32 %9, %11, !dbg !7408
  br i1 %cmp13, label %if.then14, label %if.else15, !dbg !7409

if.then14:                                        ; preds = %if.end9
  store i32 -1, i32* %retval, align 4, !dbg !7410
  br label %return, !dbg !7410

if.else15:                                        ; preds = %if.end9
  %12 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %a.addr, align 8, !dbg !7411
  %subop16 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %12, i32 0, i32 2, !dbg !7413
  %last_instr_end_off17 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop16, i32 0, i32 4, !dbg !7414
  %13 = load i32, i32* %last_instr_end_off17, align 8, !dbg !7414
  %14 = load %struct.nand_op_parser_ctx*, %struct.nand_op_parser_ctx** %b.addr, align 8, !dbg !7415
  %subop18 = getelementptr inbounds %struct.nand_op_parser_ctx, %struct.nand_op_parser_ctx* %14, i32 0, i32 2, !dbg !7416
  %last_instr_end_off19 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %subop18, i32 0, i32 4, !dbg !7417
  %15 = load i32, i32* %last_instr_end_off19, align 8, !dbg !7417
  %cmp20 = icmp ugt i32 %13, %15, !dbg !7418
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !7419

if.then21:                                        ; preds = %if.else15
  store i32 1, i32* %retval, align 4, !dbg !7420
  br label %return, !dbg !7420

if.end22:                                         ; preds = %if.else15
  br label %if.end23

if.end23:                                         ; preds = %if.end22
  store i32 0, i32* %retval, align 4, !dbg !7421
  br label %return, !dbg !7421

return:                                           ; preds = %if.end23, %if.then21, %if.then14, %if.then8, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !7422
  ret i32 %16, !dbg !7422
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_op_parser_trace(%struct.nand_op_parser_ctx* %ctx) #0 !dbg !7423 {
entry:
  %ctx.addr = alloca %struct.nand_op_parser_ctx*, align 8
  store %struct.nand_op_parser_ctx* %ctx, %struct.nand_op_parser_ctx** %ctx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_ctx** %ctx.addr, metadata !7426, metadata !DIExpression()), !dbg !7427
  ret void, !dbg !7428
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_subop_get_addr_start_off(%struct.nand_subop* %subop, i32 %instr_idx) #0 !dbg !7429 {
entry:
  %retval = alloca i32, align 4
  %subop.addr = alloca %struct.nand_subop*, align 8
  %instr_idx.addr = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_subop* %subop, %struct.nand_subop** %subop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_subop** %subop.addr, metadata !7432, metadata !DIExpression()), !dbg !7433
  store i32 %instr_idx, i32* %instr_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %instr_idx.addr, metadata !7434, metadata !DIExpression()), !dbg !7435
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !7436, metadata !DIExpression()), !dbg !7439
  %0 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7439
  %1 = load i32, i32* %instr_idx.addr, align 4, !dbg !7439
  %call = call zeroext i1 @nand_subop_instr_is_valid(%struct.nand_subop* %0, i32 %1) #8, !dbg !7439
  br i1 %call, label %lor.rhs, label %lor.end, !dbg !7439

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7439
  %instrs = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %2, i32 0, i32 1, !dbg !7439
  %3 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs, align 8, !dbg !7439
  %4 = load i32, i32* %instr_idx.addr, align 4, !dbg !7439
  %idxprom = zext i32 %4 to i64, !dbg !7439
  %arrayidx = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %3, i64 %idxprom, !dbg !7439
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx, i32 0, i32 0, !dbg !7439
  %5 = load i32, i32* %type, align 8, !dbg !7439
  %cmp = icmp ne i32 %5, 1, !dbg !7439
  br label %lor.end, !dbg !7439

lor.end:                                          ; preds = %lor.rhs, %entry
  %6 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  %lnot = xor i1 %6, true, !dbg !7439
  %lnot1 = xor i1 %lnot, true, !dbg !7439
  %lnot.ext = zext i1 %lnot1 to i32, !dbg !7439
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !7439
  %7 = load i32, i32* %__ret_warn_on, align 4, !dbg !7440
  %tobool = icmp ne i32 %7, 0, !dbg !7440
  %lnot2 = xor i1 %tobool, true, !dbg !7440
  %lnot4 = xor i1 %lnot2, true, !dbg !7440
  %lnot.ext5 = zext i1 %lnot4 to i32, !dbg !7440
  %conv = sext i32 %lnot.ext5 to i64, !dbg !7440
  %tobool6 = icmp ne i64 %conv, 0, !dbg !7440
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7439

if.then:                                          ; preds = %lor.end
  br label %do.body, !dbg !7440

do.body:                                          ; preds = %if.then
  br label %do.body7, !dbg !7442

do.body7:                                         ; preds = %do.body
  br label %do.end, !dbg !7444

do.end:                                           ; preds = %do.body7
  br label %do.body8, !dbg !7442

do.body8:                                         ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 2267, i32 2305, i64 12) #9, !dbg !7446, !srcloc !7448
  br label %do.end9, !dbg !7446

do.end9:                                          ; preds = %do.body8
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 250) #9, !dbg !7449, !srcloc !7451
  br label %do.body10, !dbg !7442

do.body10:                                        ; preds = %do.end9
  br label %do.end11, !dbg !7452

do.end11:                                         ; preds = %do.body10
  br label %do.end12, !dbg !7442

do.end12:                                         ; preds = %do.end11
  br label %if.end, !dbg !7442

if.end:                                           ; preds = %do.end12, %lor.end
  %8 = load i32, i32* %__ret_warn_on, align 4, !dbg !7439
  %tobool13 = icmp ne i32 %8, 0, !dbg !7439
  %lnot14 = xor i1 %tobool13, true, !dbg !7439
  %lnot16 = xor i1 %lnot14, true, !dbg !7439
  %lnot.ext17 = zext i1 %lnot16 to i32, !dbg !7439
  %conv18 = sext i32 %lnot.ext17 to i64, !dbg !7439
  store i64 %conv18, i64* %tmp, align 8, !dbg !7440
  %9 = load i64, i64* %tmp, align 8, !dbg !7439
  %tobool19 = icmp ne i64 %9, 0, !dbg !7454
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !7455

if.then20:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7456
  br label %return, !dbg !7456

if.end21:                                         ; preds = %if.end
  %10 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7457
  %11 = load i32, i32* %instr_idx.addr, align 4, !dbg !7458
  %call22 = call i32 @nand_subop_get_start_off(%struct.nand_subop* %10, i32 %11) #8, !dbg !7459
  store i32 %call22, i32* %retval, align 4, !dbg !7460
  br label %return, !dbg !7460

return:                                           ; preds = %if.end21, %if.then20
  %12 = load i32, i32* %retval, align 4, !dbg !7461
  ret i32 %12, !dbg !7461
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @nand_subop_instr_is_valid(%struct.nand_subop* %subop, i32 %instr_idx) #0 !dbg !7462 {
entry:
  %subop.addr = alloca %struct.nand_subop*, align 8
  %instr_idx.addr = alloca i32, align 4
  store %struct.nand_subop* %subop, %struct.nand_subop** %subop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_subop** %subop.addr, metadata !7465, metadata !DIExpression()), !dbg !7466
  store i32 %instr_idx, i32* %instr_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %instr_idx.addr, metadata !7467, metadata !DIExpression()), !dbg !7468
  %0 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7469
  %tobool = icmp ne %struct.nand_subop* %0, null, !dbg !7469
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7470

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %instr_idx.addr, align 4, !dbg !7471
  %2 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7472
  %ninstrs = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %2, i32 0, i32 2, !dbg !7473
  %3 = load i32, i32* %ninstrs, align 8, !dbg !7473
  %cmp = icmp ult i32 %1, %3, !dbg !7474
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7475
  ret i1 %4, !dbg !7476
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_subop_get_start_off(%struct.nand_subop* %subop, i32 %instr_idx) #0 !dbg !7477 {
entry:
  %retval = alloca i32, align 4
  %subop.addr = alloca %struct.nand_subop*, align 8
  %instr_idx.addr = alloca i32, align 4
  store %struct.nand_subop* %subop, %struct.nand_subop** %subop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_subop** %subop.addr, metadata !7478, metadata !DIExpression()), !dbg !7479
  store i32 %instr_idx, i32* %instr_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %instr_idx.addr, metadata !7480, metadata !DIExpression()), !dbg !7481
  %0 = load i32, i32* %instr_idx.addr, align 4, !dbg !7482
  %tobool = icmp ne i32 %0, 0, !dbg !7482
  br i1 %tobool, label %if.then, label %if.end, !dbg !7484

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7485
  br label %return, !dbg !7485

if.end:                                           ; preds = %entry
  %1 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7486
  %first_instr_start_off = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %1, i32 0, i32 3, !dbg !7487
  %2 = load i32, i32* %first_instr_start_off, align 4, !dbg !7487
  store i32 %2, i32* %retval, align 4, !dbg !7488
  br label %return, !dbg !7488

return:                                           ; preds = %if.end, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !7489
  ret i32 %3, !dbg !7489
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_subop_get_num_addr_cyc(%struct.nand_subop* %subop, i32 %instr_idx) #0 !dbg !7490 {
entry:
  %retval = alloca i32, align 4
  %subop.addr = alloca %struct.nand_subop*, align 8
  %instr_idx.addr = alloca i32, align 4
  %start_off = alloca i32, align 4
  %end_off = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_subop* %subop, %struct.nand_subop** %subop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_subop** %subop.addr, metadata !7491, metadata !DIExpression()), !dbg !7492
  store i32 %instr_idx, i32* %instr_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %instr_idx.addr, metadata !7493, metadata !DIExpression()), !dbg !7494
  call void @llvm.dbg.declare(metadata i32* %start_off, metadata !7495, metadata !DIExpression()), !dbg !7496
  call void @llvm.dbg.declare(metadata i32* %end_off, metadata !7497, metadata !DIExpression()), !dbg !7498
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !7499, metadata !DIExpression()), !dbg !7502
  %0 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7502
  %1 = load i32, i32* %instr_idx.addr, align 4, !dbg !7502
  %call = call zeroext i1 @nand_subop_instr_is_valid(%struct.nand_subop* %0, i32 %1) #8, !dbg !7502
  br i1 %call, label %lor.rhs, label %lor.end, !dbg !7502

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7502
  %instrs = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %2, i32 0, i32 1, !dbg !7502
  %3 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs, align 8, !dbg !7502
  %4 = load i32, i32* %instr_idx.addr, align 4, !dbg !7502
  %idxprom = zext i32 %4 to i64, !dbg !7502
  %arrayidx = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %3, i64 %idxprom, !dbg !7502
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx, i32 0, i32 0, !dbg !7502
  %5 = load i32, i32* %type, align 8, !dbg !7502
  %cmp = icmp ne i32 %5, 1, !dbg !7502
  br label %lor.end, !dbg !7502

lor.end:                                          ; preds = %lor.rhs, %entry
  %6 = phi i1 [ true, %entry ], [ %cmp, %lor.rhs ]
  %lnot = xor i1 %6, true, !dbg !7502
  %lnot1 = xor i1 %lnot, true, !dbg !7502
  %lnot.ext = zext i1 %lnot1 to i32, !dbg !7502
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !7502
  %7 = load i32, i32* %__ret_warn_on, align 4, !dbg !7503
  %tobool = icmp ne i32 %7, 0, !dbg !7503
  %lnot2 = xor i1 %tobool, true, !dbg !7503
  %lnot4 = xor i1 %lnot2, true, !dbg !7503
  %lnot.ext5 = zext i1 %lnot4 to i32, !dbg !7503
  %conv = sext i32 %lnot.ext5 to i64, !dbg !7503
  %tobool6 = icmp ne i64 %conv, 0, !dbg !7503
  br i1 %tobool6, label %if.then, label %if.end, !dbg !7502

if.then:                                          ; preds = %lor.end
  br label %do.body, !dbg !7503

do.body:                                          ; preds = %if.then
  br label %do.body7, !dbg !7505

do.body7:                                         ; preds = %do.body
  br label %do.end, !dbg !7507

do.end:                                           ; preds = %do.body7
  br label %do.body8, !dbg !7505

do.body8:                                         ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 2291, i32 2305, i64 12) #9, !dbg !7509, !srcloc !7511
  br label %do.end9, !dbg !7509

do.end9:                                          ; preds = %do.body8
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 251) #9, !dbg !7512, !srcloc !7514
  br label %do.body10, !dbg !7505

do.body10:                                        ; preds = %do.end9
  br label %do.end11, !dbg !7515

do.end11:                                         ; preds = %do.body10
  br label %do.end12, !dbg !7505

do.end12:                                         ; preds = %do.end11
  br label %if.end, !dbg !7505

if.end:                                           ; preds = %do.end12, %lor.end
  %8 = load i32, i32* %__ret_warn_on, align 4, !dbg !7502
  %tobool13 = icmp ne i32 %8, 0, !dbg !7502
  %lnot14 = xor i1 %tobool13, true, !dbg !7502
  %lnot16 = xor i1 %lnot14, true, !dbg !7502
  %lnot.ext17 = zext i1 %lnot16 to i32, !dbg !7502
  %conv18 = sext i32 %lnot.ext17 to i64, !dbg !7502
  store i64 %conv18, i64* %tmp, align 8, !dbg !7503
  %9 = load i64, i64* %tmp, align 8, !dbg !7502
  %tobool19 = icmp ne i64 %9, 0, !dbg !7517
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !7518

if.then20:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7519
  br label %return, !dbg !7519

if.end21:                                         ; preds = %if.end
  %10 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7520
  %11 = load i32, i32* %instr_idx.addr, align 4, !dbg !7521
  %call22 = call i32 @nand_subop_get_addr_start_off(%struct.nand_subop* %10, i32 %11) #8, !dbg !7522
  store i32 %call22, i32* %start_off, align 4, !dbg !7523
  %12 = load i32, i32* %instr_idx.addr, align 4, !dbg !7524
  %13 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7526
  %ninstrs = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %13, i32 0, i32 2, !dbg !7527
  %14 = load i32, i32* %ninstrs, align 8, !dbg !7527
  %sub = sub i32 %14, 1, !dbg !7528
  %cmp23 = icmp eq i32 %12, %sub, !dbg !7529
  br i1 %cmp23, label %land.lhs.true, label %if.else, !dbg !7530

land.lhs.true:                                    ; preds = %if.end21
  %15 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7531
  %last_instr_end_off = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %15, i32 0, i32 4, !dbg !7532
  %16 = load i32, i32* %last_instr_end_off, align 8, !dbg !7532
  %tobool25 = icmp ne i32 %16, 0, !dbg !7531
  br i1 %tobool25, label %if.then26, label %if.else, !dbg !7533

if.then26:                                        ; preds = %land.lhs.true
  %17 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7534
  %last_instr_end_off27 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %17, i32 0, i32 4, !dbg !7535
  %18 = load i32, i32* %last_instr_end_off27, align 8, !dbg !7535
  store i32 %18, i32* %end_off, align 4, !dbg !7536
  br label %if.end31, !dbg !7537

if.else:                                          ; preds = %land.lhs.true, %if.end21
  %19 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7538
  %instrs28 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %19, i32 0, i32 1, !dbg !7539
  %20 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs28, align 8, !dbg !7539
  %21 = load i32, i32* %instr_idx.addr, align 4, !dbg !7540
  %idxprom29 = zext i32 %21 to i64, !dbg !7538
  %arrayidx30 = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %20, i64 %idxprom29, !dbg !7538
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx30, i32 0, i32 1, !dbg !7541
  %addr = bitcast %union.anon.72* %ctx to %struct.nand_op_addr_instr*, !dbg !7542
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !7543
  %22 = load i32, i32* %naddrs, align 8, !dbg !7543
  store i32 %22, i32* %end_off, align 4, !dbg !7544
  br label %if.end31

if.end31:                                         ; preds = %if.else, %if.then26
  %23 = load i32, i32* %end_off, align 4, !dbg !7545
  %24 = load i32, i32* %start_off, align 4, !dbg !7546
  %sub32 = sub i32 %23, %24, !dbg !7547
  store i32 %sub32, i32* %retval, align 4, !dbg !7548
  br label %return, !dbg !7548

return:                                           ; preds = %if.end31, %if.then20
  %25 = load i32, i32* %retval, align 4, !dbg !7549
  ret i32 %25, !dbg !7549
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_subop_get_data_start_off(%struct.nand_subop* %subop, i32 %instr_idx) #0 !dbg !7550 {
entry:
  %retval = alloca i32, align 4
  %subop.addr = alloca %struct.nand_subop*, align 8
  %instr_idx.addr = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_subop* %subop, %struct.nand_subop** %subop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_subop** %subop.addr, metadata !7551, metadata !DIExpression()), !dbg !7552
  store i32 %instr_idx, i32* %instr_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %instr_idx.addr, metadata !7553, metadata !DIExpression()), !dbg !7554
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !7555, metadata !DIExpression()), !dbg !7558
  %0 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7558
  %1 = load i32, i32* %instr_idx.addr, align 4, !dbg !7558
  %call = call zeroext i1 @nand_subop_instr_is_valid(%struct.nand_subop* %0, i32 %1) #8, !dbg !7558
  br i1 %call, label %lor.rhs, label %lor.end, !dbg !7558

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7558
  %instrs = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %2, i32 0, i32 1, !dbg !7558
  %3 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs, align 8, !dbg !7558
  %4 = load i32, i32* %instr_idx.addr, align 4, !dbg !7558
  %idxprom = zext i32 %4 to i64, !dbg !7558
  %arrayidx = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %3, i64 %idxprom, !dbg !7558
  %call1 = call zeroext i1 @nand_instr_is_data(%struct.nand_op_instr* %arrayidx) #8, !dbg !7558
  %lnot = xor i1 %call1, true, !dbg !7558
  br label %lor.end, !dbg !7558

lor.end:                                          ; preds = %lor.rhs, %entry
  %5 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lnot2 = xor i1 %5, true, !dbg !7558
  %lnot3 = xor i1 %lnot2, true, !dbg !7558
  %lnot.ext = zext i1 %lnot3 to i32, !dbg !7558
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !7558
  %6 = load i32, i32* %__ret_warn_on, align 4, !dbg !7559
  %tobool = icmp ne i32 %6, 0, !dbg !7559
  %lnot4 = xor i1 %tobool, true, !dbg !7559
  %lnot6 = xor i1 %lnot4, true, !dbg !7559
  %lnot.ext7 = zext i1 %lnot6 to i32, !dbg !7559
  %conv = sext i32 %lnot.ext7 to i64, !dbg !7559
  %tobool8 = icmp ne i64 %conv, 0, !dbg !7559
  br i1 %tobool8, label %if.then, label %if.end, !dbg !7558

if.then:                                          ; preds = %lor.end
  br label %do.body, !dbg !7559

do.body:                                          ; preds = %if.then
  br label %do.body9, !dbg !7561

do.body9:                                         ; preds = %do.body
  br label %do.end, !dbg !7563

do.end:                                           ; preds = %do.body9
  br label %do.body10, !dbg !7561

do.body10:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 2321, i32 2305, i64 12) #9, !dbg !7565, !srcloc !7567
  br label %do.end11, !dbg !7565

do.end11:                                         ; preds = %do.body10
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 252) #9, !dbg !7568, !srcloc !7570
  br label %do.body12, !dbg !7561

do.body12:                                        ; preds = %do.end11
  br label %do.end13, !dbg !7571

do.end13:                                         ; preds = %do.body12
  br label %do.end14, !dbg !7561

do.end14:                                         ; preds = %do.end13
  br label %if.end, !dbg !7561

if.end:                                           ; preds = %do.end14, %lor.end
  %7 = load i32, i32* %__ret_warn_on, align 4, !dbg !7558
  %tobool15 = icmp ne i32 %7, 0, !dbg !7558
  %lnot16 = xor i1 %tobool15, true, !dbg !7558
  %lnot18 = xor i1 %lnot16, true, !dbg !7558
  %lnot.ext19 = zext i1 %lnot18 to i32, !dbg !7558
  %conv20 = sext i32 %lnot.ext19 to i64, !dbg !7558
  store i64 %conv20, i64* %tmp, align 8, !dbg !7559
  %8 = load i64, i64* %tmp, align 8, !dbg !7558
  %tobool21 = icmp ne i64 %8, 0, !dbg !7573
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !7574

if.then22:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7575
  br label %return, !dbg !7575

if.end23:                                         ; preds = %if.end
  %9 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7576
  %10 = load i32, i32* %instr_idx.addr, align 4, !dbg !7577
  %call24 = call i32 @nand_subop_get_start_off(%struct.nand_subop* %9, i32 %10) #8, !dbg !7578
  store i32 %call24, i32* %retval, align 4, !dbg !7579
  br label %return, !dbg !7579

return:                                           ; preds = %if.end23, %if.then22
  %11 = load i32, i32* %retval, align 4, !dbg !7580
  ret i32 %11, !dbg !7580
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @nand_instr_is_data(%struct.nand_op_instr* %instr) #0 !dbg !7581 {
entry:
  %instr.addr = alloca %struct.nand_op_instr*, align 8
  store %struct.nand_op_instr* %instr, %struct.nand_op_instr** %instr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_op_instr** %instr.addr, metadata !7584, metadata !DIExpression()), !dbg !7585
  %0 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instr.addr, align 8, !dbg !7586
  %tobool = icmp ne %struct.nand_op_instr* %0, null, !dbg !7586
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7587

land.rhs:                                         ; preds = %entry
  %1 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instr.addr, align 8, !dbg !7588
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %1, i32 0, i32 0, !dbg !7589
  %2 = load i32, i32* %type, align 8, !dbg !7589
  %cmp = icmp eq i32 %2, 2, !dbg !7590
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !7591

lor.rhs:                                          ; preds = %land.rhs
  %3 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instr.addr, align 8, !dbg !7592
  %type1 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %3, i32 0, i32 0, !dbg !7593
  %4 = load i32, i32* %type1, align 8, !dbg !7593
  %cmp2 = icmp eq i32 %4, 3, !dbg !7594
  br label %lor.end, !dbg !7591

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %5 = phi i1 [ true, %land.rhs ], [ %cmp2, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %6 = phi i1 [ false, %entry ], [ %5, %lor.end ], !dbg !7595
  ret i1 %6, !dbg !7596
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_subop_get_data_len(%struct.nand_subop* %subop, i32 %instr_idx) #0 !dbg !7597 {
entry:
  %retval = alloca i32, align 4
  %subop.addr = alloca %struct.nand_subop*, align 8
  %instr_idx.addr = alloca i32, align 4
  %start_off = alloca i32, align 4
  %end_off = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_subop* %subop, %struct.nand_subop** %subop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_subop** %subop.addr, metadata !7598, metadata !DIExpression()), !dbg !7599
  store i32 %instr_idx, i32* %instr_idx.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %instr_idx.addr, metadata !7600, metadata !DIExpression()), !dbg !7601
  call void @llvm.dbg.declare(metadata i32* %start_off, metadata !7602, metadata !DIExpression()), !dbg !7603
  store i32 0, i32* %start_off, align 4, !dbg !7603
  call void @llvm.dbg.declare(metadata i32* %end_off, metadata !7604, metadata !DIExpression()), !dbg !7605
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !7606, metadata !DIExpression()), !dbg !7609
  %0 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7609
  %1 = load i32, i32* %instr_idx.addr, align 4, !dbg !7609
  %call = call zeroext i1 @nand_subop_instr_is_valid(%struct.nand_subop* %0, i32 %1) #8, !dbg !7609
  br i1 %call, label %lor.rhs, label %lor.end, !dbg !7609

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7609
  %instrs = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %2, i32 0, i32 1, !dbg !7609
  %3 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs, align 8, !dbg !7609
  %4 = load i32, i32* %instr_idx.addr, align 4, !dbg !7609
  %idxprom = zext i32 %4 to i64, !dbg !7609
  %arrayidx = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %3, i64 %idxprom, !dbg !7609
  %call1 = call zeroext i1 @nand_instr_is_data(%struct.nand_op_instr* %arrayidx) #8, !dbg !7609
  %lnot = xor i1 %call1, true, !dbg !7609
  br label %lor.end, !dbg !7609

lor.end:                                          ; preds = %lor.rhs, %entry
  %5 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lnot2 = xor i1 %5, true, !dbg !7609
  %lnot3 = xor i1 %lnot2, true, !dbg !7609
  %lnot.ext = zext i1 %lnot3 to i32, !dbg !7609
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !7609
  %6 = load i32, i32* %__ret_warn_on, align 4, !dbg !7610
  %tobool = icmp ne i32 %6, 0, !dbg !7610
  %lnot4 = xor i1 %tobool, true, !dbg !7610
  %lnot6 = xor i1 %lnot4, true, !dbg !7610
  %lnot.ext7 = zext i1 %lnot6 to i32, !dbg !7610
  %conv = sext i32 %lnot.ext7 to i64, !dbg !7610
  %tobool8 = icmp ne i64 %conv, 0, !dbg !7610
  br i1 %tobool8, label %if.then, label %if.end, !dbg !7609

if.then:                                          ; preds = %lor.end
  br label %do.body, !dbg !7610

do.body:                                          ; preds = %if.then
  br label %do.body9, !dbg !7612

do.body9:                                         ; preds = %do.body
  br label %do.end, !dbg !7614

do.end:                                           ; preds = %do.body9
  br label %do.body10, !dbg !7612

do.body10:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 2345, i32 2305, i64 12) #9, !dbg !7616, !srcloc !7618
  br label %do.end11, !dbg !7616

do.end11:                                         ; preds = %do.body10
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 253) #9, !dbg !7619, !srcloc !7621
  br label %do.body12, !dbg !7612

do.body12:                                        ; preds = %do.end11
  br label %do.end13, !dbg !7622

do.end13:                                         ; preds = %do.body12
  br label %do.end14, !dbg !7612

do.end14:                                         ; preds = %do.end13
  br label %if.end, !dbg !7612

if.end:                                           ; preds = %do.end14, %lor.end
  %7 = load i32, i32* %__ret_warn_on, align 4, !dbg !7609
  %tobool15 = icmp ne i32 %7, 0, !dbg !7609
  %lnot16 = xor i1 %tobool15, true, !dbg !7609
  %lnot18 = xor i1 %lnot16, true, !dbg !7609
  %lnot.ext19 = zext i1 %lnot18 to i32, !dbg !7609
  %conv20 = sext i32 %lnot.ext19 to i64, !dbg !7609
  store i64 %conv20, i64* %tmp, align 8, !dbg !7610
  %8 = load i64, i64* %tmp, align 8, !dbg !7609
  %tobool21 = icmp ne i64 %8, 0, !dbg !7624
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !7625

if.then22:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7626
  br label %return, !dbg !7626

if.end23:                                         ; preds = %if.end
  %9 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7627
  %10 = load i32, i32* %instr_idx.addr, align 4, !dbg !7628
  %call24 = call i32 @nand_subop_get_data_start_off(%struct.nand_subop* %9, i32 %10) #8, !dbg !7629
  store i32 %call24, i32* %start_off, align 4, !dbg !7630
  %11 = load i32, i32* %instr_idx.addr, align 4, !dbg !7631
  %12 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7633
  %ninstrs = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %12, i32 0, i32 2, !dbg !7634
  %13 = load i32, i32* %ninstrs, align 8, !dbg !7634
  %sub = sub i32 %13, 1, !dbg !7635
  %cmp = icmp eq i32 %11, %sub, !dbg !7636
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !7637

land.lhs.true:                                    ; preds = %if.end23
  %14 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7638
  %last_instr_end_off = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %14, i32 0, i32 4, !dbg !7639
  %15 = load i32, i32* %last_instr_end_off, align 8, !dbg !7639
  %tobool26 = icmp ne i32 %15, 0, !dbg !7638
  br i1 %tobool26, label %if.then27, label %if.else, !dbg !7640

if.then27:                                        ; preds = %land.lhs.true
  %16 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7641
  %last_instr_end_off28 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %16, i32 0, i32 4, !dbg !7642
  %17 = load i32, i32* %last_instr_end_off28, align 8, !dbg !7642
  store i32 %17, i32* %end_off, align 4, !dbg !7643
  br label %if.end32, !dbg !7644

if.else:                                          ; preds = %land.lhs.true, %if.end23
  %18 = load %struct.nand_subop*, %struct.nand_subop** %subop.addr, align 8, !dbg !7645
  %instrs29 = getelementptr inbounds %struct.nand_subop, %struct.nand_subop* %18, i32 0, i32 1, !dbg !7646
  %19 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instrs29, align 8, !dbg !7646
  %20 = load i32, i32* %instr_idx.addr, align 4, !dbg !7647
  %idxprom30 = zext i32 %20 to i64, !dbg !7645
  %arrayidx31 = getelementptr %struct.nand_op_instr, %struct.nand_op_instr* %19, i64 %idxprom30, !dbg !7645
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayidx31, i32 0, i32 1, !dbg !7648
  %data = bitcast %union.anon.72* %ctx to %struct.nand_op_data_instr*, !dbg !7649
  %len = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data, i32 0, i32 0, !dbg !7650
  %21 = load i32, i32* %len, align 8, !dbg !7650
  store i32 %21, i32* %end_off, align 4, !dbg !7651
  br label %if.end32

if.end32:                                         ; preds = %if.else, %if.then27
  %22 = load i32, i32* %end_off, align 4, !dbg !7652
  %23 = load i32, i32* %start_off, align 4, !dbg !7653
  %sub33 = sub i32 %22, %23, !dbg !7654
  store i32 %sub33, i32* %retval, align 4, !dbg !7655
  br label %return, !dbg !7655

return:                                           ; preds = %if.end32, %if.then22
  %24 = load i32, i32* %retval, align 4, !dbg !7656
  ret i32 %24, !dbg !7656
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_reset(%struct.nand_chip* %chip, i32 %chipnr) #0 !dbg !7657 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %chipnr.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !7658, metadata !DIExpression()), !dbg !7659
  store i32 %chipnr, i32* %chipnr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chipnr.addr, metadata !7660, metadata !DIExpression()), !dbg !7661
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7662, metadata !DIExpression()), !dbg !7663
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7664
  %1 = load i32, i32* %chipnr.addr, align 4, !dbg !7665
  %call = call i32 @nand_reset_interface(%struct.nand_chip* %0, i32 %1) #8, !dbg !7666
  store i32 %call, i32* %ret, align 4, !dbg !7667
  %2 = load i32, i32* %ret, align 4, !dbg !7668
  %tobool = icmp ne i32 %2, 0, !dbg !7668
  br i1 %tobool, label %if.then, label %if.end, !dbg !7670

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %ret, align 4, !dbg !7671
  store i32 %3, i32* %retval, align 4, !dbg !7672
  br label %return, !dbg !7672

if.end:                                           ; preds = %entry
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7673
  %5 = load i32, i32* %chipnr.addr, align 4, !dbg !7674
  call void @nand_select_target(%struct.nand_chip* %4, i32 %5) #8, !dbg !7675
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7676
  %call1 = call i32 @nand_reset_op(%struct.nand_chip* %6) #8, !dbg !7677
  store i32 %call1, i32* %ret, align 4, !dbg !7678
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7679
  call void @nand_deselect_target(%struct.nand_chip* %7) #8, !dbg !7680
  %8 = load i32, i32* %ret, align 4, !dbg !7681
  %tobool2 = icmp ne i32 %8, 0, !dbg !7681
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !7683

if.then3:                                         ; preds = %if.end
  %9 = load i32, i32* %ret, align 4, !dbg !7684
  store i32 %9, i32* %retval, align 4, !dbg !7685
  br label %return, !dbg !7685

if.end4:                                          ; preds = %if.end
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7686
  %11 = load i32, i32* %chipnr.addr, align 4, !dbg !7687
  %call5 = call i32 @nand_setup_interface(%struct.nand_chip* %10, i32 %11) #8, !dbg !7688
  store i32 %call5, i32* %ret, align 4, !dbg !7689
  %12 = load i32, i32* %ret, align 4, !dbg !7690
  %tobool6 = icmp ne i32 %12, 0, !dbg !7690
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !7692

if.then7:                                         ; preds = %if.end4
  %13 = load i32, i32* %ret, align 4, !dbg !7693
  store i32 %13, i32* %retval, align 4, !dbg !7694
  br label %return, !dbg !7694

if.end8:                                          ; preds = %if.end4
  store i32 0, i32* %retval, align 4, !dbg !7695
  br label %return, !dbg !7695

return:                                           ; preds = %if.end8, %if.then7, %if.then3, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !7696
  ret i32 %14, !dbg !7696
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_reset_interface(%struct.nand_chip* %chip, i32 %chipnr) #0 !dbg !7697 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %chipnr.addr = alloca i32, align 4
  %ops = alloca %struct.nand_controller_ops*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !7698, metadata !DIExpression()), !dbg !7699
  store i32 %chipnr, i32* %chipnr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chipnr.addr, metadata !7700, metadata !DIExpression()), !dbg !7701
  call void @llvm.dbg.declare(metadata %struct.nand_controller_ops** %ops, metadata !7702, metadata !DIExpression()), !dbg !7703
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7704
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 30, !dbg !7705
  %1 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !7705
  %ops1 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %1, i32 0, i32 1, !dbg !7706
  %2 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops1, align 8, !dbg !7706
  store %struct.nand_controller_ops* %2, %struct.nand_controller_ops** %ops, align 8, !dbg !7703
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7707, metadata !DIExpression()), !dbg !7708
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7709
  %call = call zeroext i1 @nand_controller_can_setup_interface(%struct.nand_chip* %3) #8, !dbg !7711
  br i1 %call, label %if.end, label %if.then, !dbg !7712

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7713
  br label %return, !dbg !7713

if.end:                                           ; preds = %entry
  %call2 = call %struct.nand_interface_config* @nand_get_reset_interface_config() #8, !dbg !7714
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7715
  %current_interface_config = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 7, !dbg !7716
  store %struct.nand_interface_config* %call2, %struct.nand_interface_config** %current_interface_config, align 8, !dbg !7717
  %5 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !7718
  %setup_interface = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %5, i32 0, i32 3, !dbg !7719
  %6 = load i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)*, i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)** %setup_interface, align 8, !dbg !7719
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7720
  %8 = load i32, i32* %chipnr.addr, align 4, !dbg !7721
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7722
  %current_interface_config3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 7, !dbg !7723
  %10 = load %struct.nand_interface_config*, %struct.nand_interface_config** %current_interface_config3, align 8, !dbg !7723
  %call4 = call i32 %6(%struct.nand_chip* %7, i32 %8, %struct.nand_interface_config* %10) #8, !dbg !7718
  store i32 %call4, i32* %ret, align 4, !dbg !7724
  %11 = load i32, i32* %ret, align 4, !dbg !7725
  %tobool = icmp ne i32 %11, 0, !dbg !7725
  br i1 %tobool, label %if.then5, label %if.end7, !dbg !7727

if.then5:                                         ; preds = %if.end
  %call6 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0)) #12, !dbg !7728
  br label %if.end7, !dbg !7728

if.end7:                                          ; preds = %if.then5, %if.end
  %12 = load i32, i32* %ret, align 4, !dbg !7729
  store i32 %12, i32* %retval, align 4, !dbg !7730
  br label %return, !dbg !7730

return:                                           ; preds = %if.end7, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !7731
  ret i32 %13, !dbg !7731
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_setup_interface(%struct.nand_chip* %chip, i32 %chipnr) #0 !dbg !7732 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %chipnr.addr = alloca i32, align 4
  %ops = alloca %struct.nand_controller_ops*, align 8
  %tmode_param = alloca [4 x i8], align 1
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !7733, metadata !DIExpression()), !dbg !7734
  store i32 %chipnr, i32* %chipnr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %chipnr.addr, metadata !7735, metadata !DIExpression()), !dbg !7736
  call void @llvm.dbg.declare(metadata %struct.nand_controller_ops** %ops, metadata !7737, metadata !DIExpression()), !dbg !7738
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7739
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 30, !dbg !7740
  %1 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !7740
  %ops1 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %1, i32 0, i32 1, !dbg !7741
  %2 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops1, align 8, !dbg !7741
  store %struct.nand_controller_ops* %2, %struct.nand_controller_ops** %ops, align 8, !dbg !7738
  call void @llvm.dbg.declare(metadata [4 x i8]* %tmode_param, metadata !7742, metadata !DIExpression()), !dbg !7743
  %3 = bitcast [4 x i8]* %tmode_param to i8*, !dbg !7743
  call void @llvm.memset.p0i8.i64(i8* align 1 %3, i8 0, i64 4, i1 false), !dbg !7743
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7744, metadata !DIExpression()), !dbg !7745
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7746
  %call = call zeroext i1 @nand_controller_can_setup_interface(%struct.nand_chip* %4) #8, !dbg !7748
  br i1 %call, label %if.end, label %if.then, !dbg !7749

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !7750
  br label %return, !dbg !7750

if.end:                                           ; preds = %entry
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7751
  %best_interface_config = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 8, !dbg !7753
  %6 = load %struct.nand_interface_config*, %struct.nand_interface_config** %best_interface_config, align 8, !dbg !7753
  %tobool = icmp ne %struct.nand_interface_config* %6, null, !dbg !7751
  br i1 %tobool, label %if.end3, label %if.then2, !dbg !7754

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7755
  br label %return, !dbg !7755

if.end3:                                          ; preds = %if.end
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7756
  %best_interface_config4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 8, !dbg !7757
  %8 = load %struct.nand_interface_config*, %struct.nand_interface_config** %best_interface_config4, align 8, !dbg !7757
  %timings = getelementptr inbounds %struct.nand_interface_config, %struct.nand_interface_config* %8, i32 0, i32 1, !dbg !7758
  %mode = getelementptr inbounds %struct.nand_timings, %struct.nand_timings* %timings, i32 0, i32 0, !dbg !7759
  %9 = load i32, i32* %mode, align 8, !dbg !7759
  %conv = trunc i32 %9 to i8, !dbg !7756
  %arrayidx = getelementptr [4 x i8], [4 x i8]* %tmode_param, i64 0, i64 0, !dbg !7760
  store i8 %conv, i8* %arrayidx, align 1, !dbg !7761
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7762
  %call5 = call zeroext i1 @nand_supports_set_features(%struct.nand_chip* %10, i32 1) #8, !dbg !7764
  br i1 %call5, label %if.then6, label %if.end11, !dbg !7765

if.then6:                                         ; preds = %if.end3
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7766
  %12 = load i32, i32* %chipnr.addr, align 4, !dbg !7768
  call void @nand_select_target(%struct.nand_chip* %11, i32 %12) #8, !dbg !7769
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7770
  %arraydecay = getelementptr inbounds [4 x i8], [4 x i8]* %tmode_param, i64 0, i64 0, !dbg !7771
  %call7 = call i32 @nand_set_features(%struct.nand_chip* %13, i32 1, i8* %arraydecay) #8, !dbg !7772
  store i32 %call7, i32* %ret, align 4, !dbg !7773
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7774
  call void @nand_deselect_target(%struct.nand_chip* %14) #8, !dbg !7775
  %15 = load i32, i32* %ret, align 4, !dbg !7776
  %tobool8 = icmp ne i32 %15, 0, !dbg !7776
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !7778

if.then9:                                         ; preds = %if.then6
  %16 = load i32, i32* %ret, align 4, !dbg !7779
  store i32 %16, i32* %retval, align 4, !dbg !7780
  br label %return, !dbg !7780

if.end10:                                         ; preds = %if.then6
  br label %if.end11, !dbg !7781

if.end11:                                         ; preds = %if.end10, %if.end3
  %17 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !7782
  %setup_interface = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %17, i32 0, i32 3, !dbg !7783
  %18 = load i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)*, i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)** %setup_interface, align 8, !dbg !7783
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7784
  %20 = load i32, i32* %chipnr.addr, align 4, !dbg !7785
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7786
  %best_interface_config12 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 8, !dbg !7787
  %22 = load %struct.nand_interface_config*, %struct.nand_interface_config** %best_interface_config12, align 8, !dbg !7787
  %call13 = call i32 %18(%struct.nand_chip* %19, i32 %20, %struct.nand_interface_config* %22) #8, !dbg !7782
  store i32 %call13, i32* %ret, align 4, !dbg !7788
  %23 = load i32, i32* %ret, align 4, !dbg !7789
  %tobool14 = icmp ne i32 %23, 0, !dbg !7789
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !7791

if.then15:                                        ; preds = %if.end11
  %24 = load i32, i32* %ret, align 4, !dbg !7792
  store i32 %24, i32* %retval, align 4, !dbg !7793
  br label %return, !dbg !7793

if.end16:                                         ; preds = %if.end11
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7794
  %call17 = call zeroext i1 @nand_supports_get_features(%struct.nand_chip* %25, i32 1) #8, !dbg !7796
  br i1 %call17, label %if.end19, label %if.then18, !dbg !7797

if.then18:                                        ; preds = %if.end16
  br label %update_interface_config, !dbg !7798

if.end19:                                         ; preds = %if.end16
  %arraydecay20 = getelementptr inbounds [4 x i8], [4 x i8]* %tmode_param, i64 0, i64 0, !dbg !7799
  call void @llvm.memset.p0i8.i64(i8* align 1 %arraydecay20, i8 0, i64 4, i1 false), !dbg !7799
  %26 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7800
  %27 = load i32, i32* %chipnr.addr, align 4, !dbg !7801
  call void @nand_select_target(%struct.nand_chip* %26, i32 %27) #8, !dbg !7802
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7803
  %arraydecay21 = getelementptr inbounds [4 x i8], [4 x i8]* %tmode_param, i64 0, i64 0, !dbg !7804
  %call22 = call i32 @nand_get_features(%struct.nand_chip* %28, i32 1, i8* %arraydecay21) #8, !dbg !7805
  store i32 %call22, i32* %ret, align 4, !dbg !7806
  %29 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7807
  call void @nand_deselect_target(%struct.nand_chip* %29) #8, !dbg !7808
  %30 = load i32, i32* %ret, align 4, !dbg !7809
  %tobool23 = icmp ne i32 %30, 0, !dbg !7809
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !7811

if.then24:                                        ; preds = %if.end19
  br label %err_reset_chip, !dbg !7812

if.end25:                                         ; preds = %if.end19
  %arrayidx26 = getelementptr [4 x i8], [4 x i8]* %tmode_param, i64 0, i64 0, !dbg !7813
  %31 = load i8, i8* %arrayidx26, align 1, !dbg !7813
  %conv27 = zext i8 %31 to i32, !dbg !7813
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7815
  %best_interface_config28 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %32, i32 0, i32 8, !dbg !7816
  %33 = load %struct.nand_interface_config*, %struct.nand_interface_config** %best_interface_config28, align 8, !dbg !7816
  %timings29 = getelementptr inbounds %struct.nand_interface_config, %struct.nand_interface_config* %33, i32 0, i32 1, !dbg !7817
  %mode30 = getelementptr inbounds %struct.nand_timings, %struct.nand_timings* %timings29, i32 0, i32 0, !dbg !7818
  %34 = load i32, i32* %mode30, align 8, !dbg !7818
  %cmp = icmp ne i32 %conv27, %34, !dbg !7819
  br i1 %cmp, label %if.then32, label %if.end37, !dbg !7820

if.then32:                                        ; preds = %if.end25
  %35 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7821
  %best_interface_config33 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %35, i32 0, i32 8, !dbg !7821
  %36 = load %struct.nand_interface_config*, %struct.nand_interface_config** %best_interface_config33, align 8, !dbg !7821
  %timings34 = getelementptr inbounds %struct.nand_interface_config, %struct.nand_interface_config* %36, i32 0, i32 1, !dbg !7821
  %mode35 = getelementptr inbounds %struct.nand_timings, %struct.nand_timings* %timings34, i32 0, i32 0, !dbg !7821
  %37 = load i32, i32* %mode35, align 8, !dbg !7821
  %call36 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.4, i64 0, i64 0), i32 %37) #12, !dbg !7821
  br label %err_reset_chip, !dbg !7823

if.end37:                                         ; preds = %if.end25
  br label %update_interface_config, !dbg !7818

update_interface_config:                          ; preds = %if.end37, %if.then18
  call void @llvm.dbg.label(metadata !7824), !dbg !7825
  %38 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7826
  %best_interface_config38 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %38, i32 0, i32 8, !dbg !7827
  %39 = load %struct.nand_interface_config*, %struct.nand_interface_config** %best_interface_config38, align 8, !dbg !7827
  %40 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7828
  %current_interface_config = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %40, i32 0, i32 7, !dbg !7829
  store %struct.nand_interface_config* %39, %struct.nand_interface_config** %current_interface_config, align 8, !dbg !7830
  store i32 0, i32* %retval, align 4, !dbg !7831
  br label %return, !dbg !7831

err_reset_chip:                                   ; preds = %if.then32, %if.then24
  call void @llvm.dbg.label(metadata !7832), !dbg !7833
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7834
  %42 = load i32, i32* %chipnr.addr, align 4, !dbg !7835
  %call39 = call i32 @nand_reset_interface(%struct.nand_chip* %41, i32 %42) #8, !dbg !7836
  %43 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7837
  %44 = load i32, i32* %chipnr.addr, align 4, !dbg !7838
  call void @nand_select_target(%struct.nand_chip* %43, i32 %44) #8, !dbg !7839
  %45 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7840
  %call40 = call i32 @nand_reset_op(%struct.nand_chip* %45) #8, !dbg !7841
  %46 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7842
  call void @nand_deselect_target(%struct.nand_chip* %46) #8, !dbg !7843
  %47 = load i32, i32* %ret, align 4, !dbg !7844
  store i32 %47, i32* %retval, align 4, !dbg !7845
  br label %return, !dbg !7845

return:                                           ; preds = %err_reset_chip, %update_interface_config, %if.then15, %if.then9, %if.then2, %if.then
  %48 = load i32, i32* %retval, align 4, !dbg !7846
  ret i32 %48, !dbg !7846
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_get_features(%struct.nand_chip* %chip, i32 %addr, i8* %subfeature_param) #0 !dbg !7847 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %addr.addr = alloca i32, align 4
  %subfeature_param.addr = alloca i8*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !7848, metadata !DIExpression()), !dbg !7849
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !7850, metadata !DIExpression()), !dbg !7851
  store i8* %subfeature_param, i8** %subfeature_param.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %subfeature_param.addr, metadata !7852, metadata !DIExpression()), !dbg !7853
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7854
  %1 = load i32, i32* %addr.addr, align 4, !dbg !7856
  %call = call zeroext i1 @nand_supports_get_features(%struct.nand_chip* %0, i32 %1) #8, !dbg !7857
  br i1 %call, label %if.end, label %if.then, !dbg !7858

if.then:                                          ; preds = %entry
  store i32 -524, i32* %retval, align 4, !dbg !7859
  br label %return, !dbg !7859

if.end:                                           ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7860
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 5, !dbg !7862
  %get_features = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 14, !dbg !7863
  %3 = load i32 (%struct.nand_chip*, i32, i8*)*, i32 (%struct.nand_chip*, i32, i8*)** %get_features, align 8, !dbg !7863
  %tobool = icmp ne i32 (%struct.nand_chip*, i32, i8*)* %3, null, !dbg !7860
  br i1 %tobool, label %if.then1, label %if.end5, !dbg !7864

if.then1:                                         ; preds = %if.end
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7865
  %legacy2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 5, !dbg !7866
  %get_features3 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy2, i32 0, i32 14, !dbg !7867
  %5 = load i32 (%struct.nand_chip*, i32, i8*)*, i32 (%struct.nand_chip*, i32, i8*)** %get_features3, align 8, !dbg !7867
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7868
  %7 = load i32, i32* %addr.addr, align 4, !dbg !7869
  %8 = load i8*, i8** %subfeature_param.addr, align 8, !dbg !7870
  %call4 = call i32 %5(%struct.nand_chip* %6, i32 %7, i8* %8) #8, !dbg !7865
  store i32 %call4, i32* %retval, align 4, !dbg !7871
  br label %return, !dbg !7871

if.end5:                                          ; preds = %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7872
  %10 = load i32, i32* %addr.addr, align 4, !dbg !7873
  %conv = trunc i32 %10 to i8, !dbg !7873
  %11 = load i8*, i8** %subfeature_param.addr, align 8, !dbg !7874
  %call6 = call i32 @nand_get_features_op(%struct.nand_chip* %9, i8 zeroext %conv, i8* %11) #8, !dbg !7875
  store i32 %call6, i32* %retval, align 4, !dbg !7876
  br label %return, !dbg !7876

return:                                           ; preds = %if.end5, %if.then1, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7877
  ret i32 %12, !dbg !7877
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @nand_supports_get_features(%struct.nand_chip* %chip, i32 %addr) #0 !dbg !7878 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %addr.addr = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !7881, metadata !DIExpression()), !dbg !7882
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !7883, metadata !DIExpression()), !dbg !7884
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7885
  %parameters = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 2, !dbg !7886
  %supports_set_get_features = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters, i32 0, i32 1, !dbg !7887
  %1 = load i8, i8* %supports_set_get_features, align 8, !dbg !7887
  %tobool = trunc i8 %1 to i1, !dbg !7887
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7888

land.rhs:                                         ; preds = %entry
  %2 = load i32, i32* %addr.addr, align 4, !dbg !7889
  %conv = sext i32 %2 to i64, !dbg !7889
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7890
  %parameters1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 2, !dbg !7891
  %get_feature_list = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters1, i32 0, i32 3, !dbg !7892
  %arraydecay = getelementptr inbounds [4 x i64], [4 x i64]* %get_feature_list, i64 0, i64 0, !dbg !7890
  %call = call zeroext i1 @test_bit(i64 %conv, i64* %arraydecay) #8, !dbg !7893
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %call, %land.rhs ], !dbg !7894
  ret i1 %4, !dbg !7895
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_get_features_op(%struct.nand_chip* %chip, i8 zeroext %feature, i8* %data) #0 !dbg !7896 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %feature.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  %params = alloca i8*, align 8
  %i = alloca i32, align 4
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %instrs = alloca [4 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp10 = alloca i32, align 4
  %tmp17 = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !7899, metadata !DIExpression()), !dbg !7900
  store i8 %feature, i8* %feature.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %feature.addr, metadata !7901, metadata !DIExpression()), !dbg !7902
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7903, metadata !DIExpression()), !dbg !7904
  call void @llvm.dbg.declare(metadata i8** %params, metadata !7905, metadata !DIExpression()), !dbg !7906
  %0 = load i8*, i8** %data.addr, align 8, !dbg !7907
  store i8* %0, i8** %params, align 8, !dbg !7906
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7908, metadata !DIExpression()), !dbg !7909
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7910
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %1) #8, !dbg !7912
  br i1 %call, label %if.then, label %if.end, !dbg !7913

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !7914, metadata !DIExpression()), !dbg !7916
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7917
  %call1 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %2) #8, !dbg !7918
  %call2 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call1) #8, !dbg !7919
  store %struct.nand_sdr_timings* %call2, %struct.nand_sdr_timings** %sdr, align 8, !dbg !7916
  call void @llvm.dbg.declare(metadata [4 x %struct.nand_op_instr]* %instrs, metadata !7920, metadata !DIExpression()), !dbg !7921
  %arrayinit.begin = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !7922
  %3 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !7922
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 40, i1 false), !dbg !7922
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !7923
  store i32 0, i32* %type, align 8, !dbg !7923
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !7923
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !7923
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !7923
  store i8 -18, i8* %opcode, align 8, !dbg !7923
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !7923
  store i32 0, i32* %delay_ns, align 8, !dbg !7923
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !7922
  %type3 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !7924
  store i32 1, i32* %type3, align 8, !dbg !7924
  %ctx4 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !7924
  %addr = bitcast %union.anon.72* %ctx4 to %struct.nand_op_addr_instr*, !dbg !7924
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !7924
  store i32 1, i32* %naddrs, align 8, !dbg !7924
  %addrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 1, !dbg !7924
  store i8* %feature.addr, i8** %addrs, align 8, !dbg !7924
  %delay_ns5 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !7924
  %4 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !7925
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %4, i32 0, i32 32, !dbg !7925
  %5 = load i32, i32* %tWB_max, align 8, !dbg !7925
  %add = add i32 %5, 1000, !dbg !7925
  %sub = sub i32 %add, 1, !dbg !7925
  %div = udiv i32 %sub, 1000, !dbg !7925
  %conv = zext i32 %div to i64, !dbg !7925
  %conv6 = trunc i64 %conv to i32, !dbg !7925
  store i32 %conv6, i32* %tmp, align 4, !dbg !7924
  %6 = load i32, i32* %tmp, align 4, !dbg !7925
  store i32 %6, i32* %delay_ns5, align 8, !dbg !7924
  %arrayinit.element7 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i64 1, !dbg !7922
  %type8 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element7, i32 0, i32 0, !dbg !7927
  store i32 4, i32* %type8, align 8, !dbg !7927
  %ctx9 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element7, i32 0, i32 1, !dbg !7927
  %7 = bitcast %union.anon.72* %ctx9 to i8*, !dbg !7927
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 24, i1 false), !dbg !7927
  %waitrdy = bitcast %union.anon.72* %ctx9 to %struct.nand_op_waitrdy_instr*, !dbg !7927
  %timeout_ms = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !7927
  %8 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !7928
  %tFEAT_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %8, i32 0, i32 19, !dbg !7928
  %9 = load i32, i32* %tFEAT_max, align 4, !dbg !7928
  %add11 = add i32 %9, 1000000000, !dbg !7928
  %sub12 = sub i32 %add11, 1, !dbg !7928
  %div13 = udiv i32 %sub12, 1000000000, !dbg !7928
  %conv14 = zext i32 %div13 to i64, !dbg !7928
  %conv15 = trunc i64 %conv14 to i32, !dbg !7928
  store i32 %conv15, i32* %tmp10, align 4, !dbg !7927
  %10 = load i32, i32* %tmp10, align 4, !dbg !7928
  store i32 %10, i32* %timeout_ms, align 8, !dbg !7927
  %delay_ns16 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element7, i32 0, i32 2, !dbg !7927
  %11 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !7930
  %tRR_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %11, i32 0, i32 30, !dbg !7930
  %12 = load i32, i32* %tRR_min, align 8, !dbg !7930
  %add18 = add i32 %12, 1000, !dbg !7930
  %sub19 = sub i32 %add18, 1, !dbg !7930
  %div20 = udiv i32 %sub19, 1000, !dbg !7930
  %conv21 = zext i32 %div20 to i64, !dbg !7930
  %conv22 = trunc i64 %conv21 to i32, !dbg !7930
  store i32 %conv22, i32* %tmp17, align 4, !dbg !7927
  %13 = load i32, i32* %tmp17, align 4, !dbg !7930
  store i32 %13, i32* %delay_ns16, align 8, !dbg !7927
  %arrayinit.element23 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element7, i64 1, !dbg !7922
  %type24 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element23, i32 0, i32 0, !dbg !7932
  store i32 2, i32* %type24, align 8, !dbg !7932
  %ctx25 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element23, i32 0, i32 1, !dbg !7932
  %data26 = bitcast %union.anon.72* %ctx25 to %struct.nand_op_data_instr*, !dbg !7932
  %len = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data26, i32 0, i32 0, !dbg !7932
  store i32 4, i32* %len, align 8, !dbg !7932
  %buf = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data26, i32 0, i32 1, !dbg !7932
  %in = bitcast %union.anon.73* %buf to i8**, !dbg !7932
  %14 = load i8*, i8** %data.addr, align 8, !dbg !7932
  store i8* %14, i8** %in, align 8, !dbg !7932
  %force_8bit = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data26, i32 0, i32 2, !dbg !7932
  store i8 1, i8* %force_8bit, align 8, !dbg !7932
  %delay_ns27 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element23, i32 0, i32 2, !dbg !7932
  store i32 0, i32* %delay_ns27, align 8, !dbg !7932
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !7933, metadata !DIExpression()), !dbg !7934
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !7935
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7935
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 28, !dbg !7935
  %16 = load i32, i32* %cur_cs, align 4, !dbg !7935
  store i32 %16, i32* %cs, align 8, !dbg !7935
  %instrs28 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !7935
  %arraydecay = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !7935
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs28, align 8, !dbg !7935
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !7935
  store i32 4, i32* %ninstrs, align 8, !dbg !7935
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7936
  %call29 = call i32 @nand_exec_op(%struct.nand_chip* %17, %struct.nand_operation* %op) #8, !dbg !7937
  store i32 %call29, i32* %retval, align 4, !dbg !7938
  br label %return, !dbg !7938

if.end:                                           ; preds = %entry
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7939
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 5, !dbg !7940
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !7941
  %19 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !7941
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7942
  %21 = load i8, i8* %feature.addr, align 1, !dbg !7943
  %conv30 = zext i8 %21 to i32, !dbg !7943
  call void %19(%struct.nand_chip* %20, i32 238, i32 %conv30, i32 -1) #8, !dbg !7939
  store i32 0, i32* %i, align 4, !dbg !7944
  br label %for.cond, !dbg !7946

for.cond:                                         ; preds = %for.inc, %if.end
  %22 = load i32, i32* %i, align 4, !dbg !7947
  %cmp = icmp slt i32 %22, 4, !dbg !7949
  br i1 %cmp, label %for.body, label %for.end, !dbg !7950

for.body:                                         ; preds = %for.cond
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7951
  %legacy32 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %23, i32 0, i32 5, !dbg !7952
  %read_byte = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy32, i32 0, i32 3, !dbg !7953
  %24 = load i8 (%struct.nand_chip*)*, i8 (%struct.nand_chip*)** %read_byte, align 8, !dbg !7953
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7954
  %call33 = call zeroext i8 %24(%struct.nand_chip* %25) #8, !dbg !7951
  %26 = load i8*, i8** %params, align 8, !dbg !7955
  %27 = load i32, i32* %i, align 4, !dbg !7956
  %idxprom = sext i32 %27 to i64, !dbg !7955
  %arrayidx = getelementptr i8, i8* %26, i64 %idxprom, !dbg !7955
  store i8 %call33, i8* %arrayidx, align 1, !dbg !7957
  br label %for.inc, !dbg !7955

for.inc:                                          ; preds = %for.body
  %28 = load i32, i32* %i, align 4, !dbg !7958
  %inc = add i32 %28, 1, !dbg !7958
  store i32 %inc, i32* %i, align 4, !dbg !7958
  br label %for.cond, !dbg !7959, !llvm.loop !7960

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7962
  br label %return, !dbg !7962

return:                                           ; preds = %for.end, %if.then
  %29 = load i32, i32* %retval, align 4, !dbg !7963
  ret i32 %29, !dbg !7963
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_set_features(%struct.nand_chip* %chip, i32 %addr, i8* %subfeature_param) #0 !dbg !7964 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %addr.addr = alloca i32, align 4
  %subfeature_param.addr = alloca i8*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !7965, metadata !DIExpression()), !dbg !7966
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !7967, metadata !DIExpression()), !dbg !7968
  store i8* %subfeature_param, i8** %subfeature_param.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %subfeature_param.addr, metadata !7969, metadata !DIExpression()), !dbg !7970
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7971
  %1 = load i32, i32* %addr.addr, align 4, !dbg !7973
  %call = call zeroext i1 @nand_supports_set_features(%struct.nand_chip* %0, i32 %1) #8, !dbg !7974
  br i1 %call, label %if.end, label %if.then, !dbg !7975

if.then:                                          ; preds = %entry
  store i32 -524, i32* %retval, align 4, !dbg !7976
  br label %return, !dbg !7976

if.end:                                           ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7977
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 5, !dbg !7979
  %set_features = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 13, !dbg !7980
  %3 = load i32 (%struct.nand_chip*, i32, i8*)*, i32 (%struct.nand_chip*, i32, i8*)** %set_features, align 8, !dbg !7980
  %tobool = icmp ne i32 (%struct.nand_chip*, i32, i8*)* %3, null, !dbg !7977
  br i1 %tobool, label %if.then1, label %if.end5, !dbg !7981

if.then1:                                         ; preds = %if.end
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7982
  %legacy2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 5, !dbg !7983
  %set_features3 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy2, i32 0, i32 13, !dbg !7984
  %5 = load i32 (%struct.nand_chip*, i32, i8*)*, i32 (%struct.nand_chip*, i32, i8*)** %set_features3, align 8, !dbg !7984
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7985
  %7 = load i32, i32* %addr.addr, align 4, !dbg !7986
  %8 = load i8*, i8** %subfeature_param.addr, align 8, !dbg !7987
  %call4 = call i32 %5(%struct.nand_chip* %6, i32 %7, i8* %8) #8, !dbg !7982
  store i32 %call4, i32* %retval, align 4, !dbg !7988
  br label %return, !dbg !7988

if.end5:                                          ; preds = %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !7989
  %10 = load i32, i32* %addr.addr, align 4, !dbg !7990
  %conv = trunc i32 %10 to i8, !dbg !7990
  %11 = load i8*, i8** %subfeature_param.addr, align 8, !dbg !7991
  %call6 = call i32 @nand_set_features_op(%struct.nand_chip* %9, i8 zeroext %conv, i8* %11) #8, !dbg !7992
  store i32 %call6, i32* %retval, align 4, !dbg !7993
  br label %return, !dbg !7993

return:                                           ; preds = %if.end5, %if.then1, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !7994
  ret i32 %12, !dbg !7994
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @nand_supports_set_features(%struct.nand_chip* %chip, i32 %addr) #0 !dbg !7995 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %addr.addr = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !7996, metadata !DIExpression()), !dbg !7997
  store i32 %addr, i32* %addr.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %addr.addr, metadata !7998, metadata !DIExpression()), !dbg !7999
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8000
  %parameters = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 2, !dbg !8001
  %supports_set_get_features = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters, i32 0, i32 1, !dbg !8002
  %1 = load i8, i8* %supports_set_get_features, align 8, !dbg !8002
  %tobool = trunc i8 %1 to i1, !dbg !8002
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8003

land.rhs:                                         ; preds = %entry
  %2 = load i32, i32* %addr.addr, align 4, !dbg !8004
  %conv = sext i32 %2 to i64, !dbg !8004
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8005
  %parameters1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 2, !dbg !8006
  %set_feature_list = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters1, i32 0, i32 2, !dbg !8007
  %arraydecay = getelementptr inbounds [4 x i64], [4 x i64]* %set_feature_list, i64 0, i64 0, !dbg !8005
  %call = call zeroext i1 @test_bit(i64 %conv, i64* %arraydecay) #8, !dbg !8008
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %call, %land.rhs ], !dbg !8009
  ret i1 %4, !dbg !8010
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_set_features_op(%struct.nand_chip* %chip, i8 zeroext %feature, i8* %data) #0 !dbg !8011 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %feature.addr = alloca i8, align 1
  %data.addr = alloca i8*, align 8
  %params = alloca i8*, align 8
  %i = alloca i32, align 4
  %ret = alloca i32, align 4
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %instrs = alloca [4 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp12 = alloca i32, align 4
  %tmp21 = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8014, metadata !DIExpression()), !dbg !8015
  store i8 %feature, i8* %feature.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %feature.addr, metadata !8016, metadata !DIExpression()), !dbg !8017
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8018, metadata !DIExpression()), !dbg !8019
  call void @llvm.dbg.declare(metadata i8** %params, metadata !8020, metadata !DIExpression()), !dbg !8021
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8022
  store i8* %0, i8** %params, align 8, !dbg !8021
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8023, metadata !DIExpression()), !dbg !8024
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8025, metadata !DIExpression()), !dbg !8026
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8027
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %1) #8, !dbg !8029
  br i1 %call, label %if.then, label %if.end, !dbg !8030

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !8031, metadata !DIExpression()), !dbg !8033
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8034
  %call1 = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %2) #8, !dbg !8035
  %call2 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call1) #8, !dbg !8036
  store %struct.nand_sdr_timings* %call2, %struct.nand_sdr_timings** %sdr, align 8, !dbg !8033
  call void @llvm.dbg.declare(metadata [4 x %struct.nand_op_instr]* %instrs, metadata !8037, metadata !DIExpression()), !dbg !8038
  %arrayinit.begin = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !8039
  %3 = bitcast %struct.nand_op_instr* %arrayinit.begin to i8*, !dbg !8039
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 40, i1 false), !dbg !8039
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !8040
  store i32 0, i32* %type, align 8, !dbg !8040
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !8040
  %cmd = bitcast %union.anon.72* %ctx to %struct.nand_op_cmd_instr*, !dbg !8040
  %opcode = getelementptr inbounds %struct.nand_op_cmd_instr, %struct.nand_op_cmd_instr* %cmd, i32 0, i32 0, !dbg !8040
  store i8 -17, i8* %opcode, align 8, !dbg !8040
  %delay_ns = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !8040
  store i32 0, i32* %delay_ns, align 8, !dbg !8040
  %arrayinit.element = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i64 1, !dbg !8039
  %type3 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 0, !dbg !8041
  store i32 1, i32* %type3, align 8, !dbg !8041
  %ctx4 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 1, !dbg !8041
  %addr = bitcast %union.anon.72* %ctx4 to %struct.nand_op_addr_instr*, !dbg !8041
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 0, !dbg !8041
  store i32 1, i32* %naddrs, align 8, !dbg !8041
  %addrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr, i32 0, i32 1, !dbg !8041
  store i8* %feature.addr, i8** %addrs, align 8, !dbg !8041
  %delay_ns5 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i32 0, i32 2, !dbg !8041
  %4 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !8042
  %tADL_min = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %4, i32 0, i32 5, !dbg !8042
  %5 = load i32, i32* %tADL_min, align 4, !dbg !8042
  %add = add i32 %5, 1000, !dbg !8042
  %sub = sub i32 %add, 1, !dbg !8042
  %div = udiv i32 %sub, 1000, !dbg !8042
  %conv = zext i32 %div to i64, !dbg !8042
  %conv6 = trunc i64 %conv to i32, !dbg !8042
  store i32 %conv6, i32* %tmp, align 4, !dbg !8041
  %6 = load i32, i32* %tmp, align 4, !dbg !8042
  store i32 %6, i32* %delay_ns5, align 8, !dbg !8041
  %arrayinit.element7 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element, i64 1, !dbg !8039
  %type8 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element7, i32 0, i32 0, !dbg !8044
  store i32 3, i32* %type8, align 8, !dbg !8044
  %ctx9 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element7, i32 0, i32 1, !dbg !8044
  %data10 = bitcast %union.anon.72* %ctx9 to %struct.nand_op_data_instr*, !dbg !8044
  %len = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data10, i32 0, i32 0, !dbg !8044
  store i32 4, i32* %len, align 8, !dbg !8044
  %buf = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data10, i32 0, i32 1, !dbg !8044
  %out = bitcast %union.anon.73* %buf to i8**, !dbg !8044
  %7 = load i8*, i8** %data.addr, align 8, !dbg !8044
  store i8* %7, i8** %out, align 8, !dbg !8044
  %force_8bit = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data10, i32 0, i32 2, !dbg !8044
  store i8 1, i8* %force_8bit, align 8, !dbg !8044
  %delay_ns11 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element7, i32 0, i32 2, !dbg !8044
  %8 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !8045
  %tWB_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %8, i32 0, i32 32, !dbg !8045
  %9 = load i32, i32* %tWB_max, align 8, !dbg !8045
  %add13 = add i32 %9, 1000, !dbg !8045
  %sub14 = sub i32 %add13, 1, !dbg !8045
  %div15 = udiv i32 %sub14, 1000, !dbg !8045
  %conv16 = zext i32 %div15 to i64, !dbg !8045
  %conv17 = trunc i64 %conv16 to i32, !dbg !8045
  store i32 %conv17, i32* %tmp12, align 4, !dbg !8044
  %10 = load i32, i32* %tmp12, align 4, !dbg !8045
  store i32 %10, i32* %delay_ns11, align 8, !dbg !8044
  %arrayinit.element18 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element7, i64 1, !dbg !8039
  %type19 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element18, i32 0, i32 0, !dbg !8047
  store i32 4, i32* %type19, align 8, !dbg !8047
  %ctx20 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element18, i32 0, i32 1, !dbg !8047
  %11 = bitcast %union.anon.72* %ctx20 to i8*, !dbg !8047
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 24, i1 false), !dbg !8047
  %waitrdy = bitcast %union.anon.72* %ctx20 to %struct.nand_op_waitrdy_instr*, !dbg !8047
  %timeout_ms = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !8047
  %12 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !8048
  %tFEAT_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %12, i32 0, i32 19, !dbg !8048
  %13 = load i32, i32* %tFEAT_max, align 4, !dbg !8048
  %add22 = add i32 %13, 1000000000, !dbg !8048
  %sub23 = sub i32 %add22, 1, !dbg !8048
  %div24 = udiv i32 %sub23, 1000000000, !dbg !8048
  %conv25 = zext i32 %div24 to i64, !dbg !8048
  %conv26 = trunc i64 %conv25 to i32, !dbg !8048
  store i32 %conv26, i32* %tmp21, align 4, !dbg !8047
  %14 = load i32, i32* %tmp21, align 4, !dbg !8048
  store i32 %14, i32* %timeout_ms, align 8, !dbg !8047
  %delay_ns27 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.element18, i32 0, i32 2, !dbg !8047
  store i32 0, i32* %delay_ns27, align 8, !dbg !8047
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !8050, metadata !DIExpression()), !dbg !8051
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !8052
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8052
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 28, !dbg !8052
  %16 = load i32, i32* %cur_cs, align 4, !dbg !8052
  store i32 %16, i32* %cs, align 8, !dbg !8052
  %instrs28 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !8052
  %arraydecay = getelementptr inbounds [4 x %struct.nand_op_instr], [4 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !8052
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs28, align 8, !dbg !8052
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !8052
  store i32 4, i32* %ninstrs, align 8, !dbg !8052
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8053
  %call29 = call i32 @nand_exec_op(%struct.nand_chip* %17, %struct.nand_operation* %op) #8, !dbg !8054
  store i32 %call29, i32* %retval, align 4, !dbg !8055
  br label %return, !dbg !8055

if.end:                                           ; preds = %entry
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8056
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 5, !dbg !8057
  %cmdfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 8, !dbg !8058
  %19 = load void (%struct.nand_chip*, i32, i32, i32)*, void (%struct.nand_chip*, i32, i32, i32)** %cmdfunc, align 8, !dbg !8058
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8059
  %21 = load i8, i8* %feature.addr, align 1, !dbg !8060
  %conv30 = zext i8 %21 to i32, !dbg !8060
  call void %19(%struct.nand_chip* %20, i32 239, i32 %conv30, i32 -1) #8, !dbg !8056
  store i32 0, i32* %i, align 4, !dbg !8061
  br label %for.cond, !dbg !8063

for.cond:                                         ; preds = %for.inc, %if.end
  %22 = load i32, i32* %i, align 4, !dbg !8064
  %cmp = icmp slt i32 %22, 4, !dbg !8066
  br i1 %cmp, label %for.body, label %for.end, !dbg !8067

for.body:                                         ; preds = %for.cond
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8068
  %legacy32 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %23, i32 0, i32 5, !dbg !8069
  %write_byte = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy32, i32 0, i32 4, !dbg !8070
  %24 = load void (%struct.nand_chip*, i8)*, void (%struct.nand_chip*, i8)** %write_byte, align 8, !dbg !8070
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8071
  %26 = load i8*, i8** %params, align 8, !dbg !8072
  %27 = load i32, i32* %i, align 4, !dbg !8073
  %idxprom = sext i32 %27 to i64, !dbg !8072
  %arrayidx = getelementptr i8, i8* %26, i64 %idxprom, !dbg !8072
  %28 = load i8, i8* %arrayidx, align 1, !dbg !8072
  call void %24(%struct.nand_chip* %25, i8 zeroext %28) #8, !dbg !8068
  br label %for.inc, !dbg !8068

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !dbg !8074
  %inc = add i32 %29, 1, !dbg !8074
  store i32 %inc, i32* %i, align 4, !dbg !8074
  br label %for.cond, !dbg !8075, !llvm.loop !8076

for.end:                                          ; preds = %for.cond
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8078
  %legacy33 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %30, i32 0, i32 5, !dbg !8079
  %waitfunc = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy33, i32 0, i32 10, !dbg !8080
  %31 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %waitfunc, align 8, !dbg !8080
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8081
  %call34 = call i32 %31(%struct.nand_chip* %32) #8, !dbg !8078
  store i32 %call34, i32* %ret, align 4, !dbg !8082
  %33 = load i32, i32* %ret, align 4, !dbg !8083
  %cmp35 = icmp slt i32 %33, 0, !dbg !8085
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !8086

if.then37:                                        ; preds = %for.end
  %34 = load i32, i32* %ret, align 4, !dbg !8087
  store i32 %34, i32* %retval, align 4, !dbg !8088
  br label %return, !dbg !8088

if.end38:                                         ; preds = %for.end
  %35 = load i32, i32* %ret, align 4, !dbg !8089
  %and = and i32 %35, 1, !dbg !8091
  %tobool = icmp ne i32 %and, 0, !dbg !8091
  br i1 %tobool, label %if.then39, label %if.end40, !dbg !8092

if.then39:                                        ; preds = %if.end38
  store i32 -5, i32* %retval, align 4, !dbg !8093
  br label %return, !dbg !8093

if.end40:                                         ; preds = %if.end38
  store i32 0, i32* %retval, align 4, !dbg !8094
  br label %return, !dbg !8094

return:                                           ; preds = %if.end40, %if.then39, %if.then37, %if.then
  %36 = load i32, i32* %retval, align 4, !dbg !8095
  ret i32 %36, !dbg !8095
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_check_erased_ecc_chunk(i8* %data, i32 %datalen, i8* %ecc, i32 %ecclen, i8* %extraoob, i32 %extraooblen, i32 %bitflips_threshold) #0 !dbg !8096 {
entry:
  %retval = alloca i32, align 4
  %data.addr = alloca i8*, align 8
  %datalen.addr = alloca i32, align 4
  %ecc.addr = alloca i8*, align 8
  %ecclen.addr = alloca i32, align 4
  %extraoob.addr = alloca i8*, align 8
  %extraooblen.addr = alloca i32, align 4
  %bitflips_threshold.addr = alloca i32, align 4
  %data_bitflips = alloca i32, align 4
  %ecc_bitflips = alloca i32, align 4
  %extraoob_bitflips = alloca i32, align 4
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !8099, metadata !DIExpression()), !dbg !8100
  store i32 %datalen, i32* %datalen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %datalen.addr, metadata !8101, metadata !DIExpression()), !dbg !8102
  store i8* %ecc, i8** %ecc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ecc.addr, metadata !8103, metadata !DIExpression()), !dbg !8104
  store i32 %ecclen, i32* %ecclen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ecclen.addr, metadata !8105, metadata !DIExpression()), !dbg !8106
  store i8* %extraoob, i8** %extraoob.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %extraoob.addr, metadata !8107, metadata !DIExpression()), !dbg !8108
  store i32 %extraooblen, i32* %extraooblen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %extraooblen.addr, metadata !8109, metadata !DIExpression()), !dbg !8110
  store i32 %bitflips_threshold, i32* %bitflips_threshold.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitflips_threshold.addr, metadata !8111, metadata !DIExpression()), !dbg !8112
  call void @llvm.dbg.declare(metadata i32* %data_bitflips, metadata !8113, metadata !DIExpression()), !dbg !8114
  store i32 0, i32* %data_bitflips, align 4, !dbg !8114
  call void @llvm.dbg.declare(metadata i32* %ecc_bitflips, metadata !8115, metadata !DIExpression()), !dbg !8116
  store i32 0, i32* %ecc_bitflips, align 4, !dbg !8116
  call void @llvm.dbg.declare(metadata i32* %extraoob_bitflips, metadata !8117, metadata !DIExpression()), !dbg !8118
  store i32 0, i32* %extraoob_bitflips, align 4, !dbg !8118
  %0 = load i8*, i8** %data.addr, align 8, !dbg !8119
  %1 = load i32, i32* %datalen.addr, align 4, !dbg !8120
  %2 = load i32, i32* %bitflips_threshold.addr, align 4, !dbg !8121
  %call = call i32 @nand_check_erased_buf(i8* %0, i32 %1, i32 %2) #8, !dbg !8122
  store i32 %call, i32* %data_bitflips, align 4, !dbg !8123
  %3 = load i32, i32* %data_bitflips, align 4, !dbg !8124
  %cmp = icmp slt i32 %3, 0, !dbg !8126
  br i1 %cmp, label %if.then, label %if.end, !dbg !8127

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %data_bitflips, align 4, !dbg !8128
  store i32 %4, i32* %retval, align 4, !dbg !8129
  br label %return, !dbg !8129

if.end:                                           ; preds = %entry
  %5 = load i32, i32* %data_bitflips, align 4, !dbg !8130
  %6 = load i32, i32* %bitflips_threshold.addr, align 4, !dbg !8131
  %sub = sub i32 %6, %5, !dbg !8131
  store i32 %sub, i32* %bitflips_threshold.addr, align 4, !dbg !8131
  %7 = load i8*, i8** %ecc.addr, align 8, !dbg !8132
  %8 = load i32, i32* %ecclen.addr, align 4, !dbg !8133
  %9 = load i32, i32* %bitflips_threshold.addr, align 4, !dbg !8134
  %call1 = call i32 @nand_check_erased_buf(i8* %7, i32 %8, i32 %9) #8, !dbg !8135
  store i32 %call1, i32* %ecc_bitflips, align 4, !dbg !8136
  %10 = load i32, i32* %ecc_bitflips, align 4, !dbg !8137
  %cmp2 = icmp slt i32 %10, 0, !dbg !8139
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !8140

if.then3:                                         ; preds = %if.end
  %11 = load i32, i32* %ecc_bitflips, align 4, !dbg !8141
  store i32 %11, i32* %retval, align 4, !dbg !8142
  br label %return, !dbg !8142

if.end4:                                          ; preds = %if.end
  %12 = load i32, i32* %ecc_bitflips, align 4, !dbg !8143
  %13 = load i32, i32* %bitflips_threshold.addr, align 4, !dbg !8144
  %sub5 = sub i32 %13, %12, !dbg !8144
  store i32 %sub5, i32* %bitflips_threshold.addr, align 4, !dbg !8144
  %14 = load i8*, i8** %extraoob.addr, align 8, !dbg !8145
  %15 = load i32, i32* %extraooblen.addr, align 4, !dbg !8146
  %16 = load i32, i32* %bitflips_threshold.addr, align 4, !dbg !8147
  %call6 = call i32 @nand_check_erased_buf(i8* %14, i32 %15, i32 %16) #8, !dbg !8148
  store i32 %call6, i32* %extraoob_bitflips, align 4, !dbg !8149
  %17 = load i32, i32* %extraoob_bitflips, align 4, !dbg !8150
  %cmp7 = icmp slt i32 %17, 0, !dbg !8152
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !8153

if.then8:                                         ; preds = %if.end4
  %18 = load i32, i32* %extraoob_bitflips, align 4, !dbg !8154
  store i32 %18, i32* %retval, align 4, !dbg !8155
  br label %return, !dbg !8155

if.end9:                                          ; preds = %if.end4
  %19 = load i32, i32* %data_bitflips, align 4, !dbg !8156
  %tobool = icmp ne i32 %19, 0, !dbg !8156
  br i1 %tobool, label %if.then10, label %if.end11, !dbg !8158

if.then10:                                        ; preds = %if.end9
  %20 = load i8*, i8** %data.addr, align 8, !dbg !8159
  %21 = load i32, i32* %datalen.addr, align 4, !dbg !8160
  %conv = sext i32 %21 to i64, !dbg !8160
  call void @llvm.memset.p0i8.i64(i8* align 1 %20, i8 -1, i64 %conv, i1 false), !dbg !8161
  br label %if.end11, !dbg !8161

if.end11:                                         ; preds = %if.then10, %if.end9
  %22 = load i32, i32* %ecc_bitflips, align 4, !dbg !8162
  %tobool12 = icmp ne i32 %22, 0, !dbg !8162
  br i1 %tobool12, label %if.then13, label %if.end15, !dbg !8164

if.then13:                                        ; preds = %if.end11
  %23 = load i8*, i8** %ecc.addr, align 8, !dbg !8165
  %24 = load i32, i32* %ecclen.addr, align 4, !dbg !8166
  %conv14 = sext i32 %24 to i64, !dbg !8166
  call void @llvm.memset.p0i8.i64(i8* align 1 %23, i8 -1, i64 %conv14, i1 false), !dbg !8167
  br label %if.end15, !dbg !8167

if.end15:                                         ; preds = %if.then13, %if.end11
  %25 = load i32, i32* %extraoob_bitflips, align 4, !dbg !8168
  %tobool16 = icmp ne i32 %25, 0, !dbg !8168
  br i1 %tobool16, label %if.then17, label %if.end19, !dbg !8170

if.then17:                                        ; preds = %if.end15
  %26 = load i8*, i8** %extraoob.addr, align 8, !dbg !8171
  %27 = load i32, i32* %extraooblen.addr, align 4, !dbg !8172
  %conv18 = sext i32 %27 to i64, !dbg !8172
  call void @llvm.memset.p0i8.i64(i8* align 1 %26, i8 -1, i64 %conv18, i1 false), !dbg !8173
  br label %if.end19, !dbg !8173

if.end19:                                         ; preds = %if.then17, %if.end15
  %28 = load i32, i32* %data_bitflips, align 4, !dbg !8174
  %29 = load i32, i32* %ecc_bitflips, align 4, !dbg !8175
  %add = add i32 %28, %29, !dbg !8176
  %30 = load i32, i32* %extraoob_bitflips, align 4, !dbg !8177
  %add20 = add i32 %add, %30, !dbg !8178
  store i32 %add20, i32* %retval, align 4, !dbg !8179
  br label %return, !dbg !8179

return:                                           ; preds = %if.end19, %if.then8, %if.then3, %if.then
  %31 = load i32, i32* %retval, align 4, !dbg !8180
  ret i32 %31, !dbg !8180
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_check_erased_buf(i8* %buf, i32 %len, i32 %bitflips_threshold) #0 !dbg !8181 {
entry:
  %w.addr.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %w.addr.i.i, metadata !8184, metadata !DIExpression()), !dbg !8189
  %res.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %res.i.i, metadata !8199, metadata !DIExpression()), !dbg !8200
  %w.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %w.addr.i, metadata !8201, metadata !DIExpression()), !dbg !8202
  %retval = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %len.addr = alloca i32, align 4
  %bitflips_threshold.addr = alloca i32, align 4
  %bitmap = alloca i8*, align 8
  %bitflips = alloca i32, align 4
  %weight = alloca i32, align 4
  %d = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !8203, metadata !DIExpression()), !dbg !8204
  store i32 %len, i32* %len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len.addr, metadata !8205, metadata !DIExpression()), !dbg !8206
  store i32 %bitflips_threshold, i32* %bitflips_threshold.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitflips_threshold.addr, metadata !8207, metadata !DIExpression()), !dbg !8208
  call void @llvm.dbg.declare(metadata i8** %bitmap, metadata !8209, metadata !DIExpression()), !dbg !8210
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !8211
  store i8* %0, i8** %bitmap, align 8, !dbg !8210
  call void @llvm.dbg.declare(metadata i32* %bitflips, metadata !8212, metadata !DIExpression()), !dbg !8213
  store i32 0, i32* %bitflips, align 4, !dbg !8213
  call void @llvm.dbg.declare(metadata i32* %weight, metadata !8214, metadata !DIExpression()), !dbg !8215
  br label %for.cond, !dbg !8216

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %len.addr, align 4, !dbg !8217
  %tobool = icmp ne i32 %1, 0, !dbg !8217
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8220

land.rhs:                                         ; preds = %for.cond
  %2 = load i8*, i8** %bitmap, align 8, !dbg !8221
  %3 = ptrtoint i8* %2 to i64, !dbg !8222
  %rem = urem i64 %3, 8, !dbg !8223
  %tobool1 = icmp ne i64 %rem, 0, !dbg !8220
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %4 = phi i1 [ false, %for.cond ], [ %tobool1, %land.rhs ], !dbg !8224
  br i1 %4, label %for.body, label %for.end, !dbg !8225

for.body:                                         ; preds = %land.end
  %5 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %6 = load i8, i8* %5, align 1, !dbg !8226
  %7 = call i1 @llvm.is.constant.i8(i8 %6), !dbg !8226
  br i1 %7, label %cond.true, label %cond.false, !dbg !8226

cond.true:                                        ; preds = %for.body
  %8 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %9 = load i8, i8* %8, align 1, !dbg !8226
  %conv = zext i8 %9 to i64, !dbg !8226
  %and = and i64 %conv, 1, !dbg !8226
  %tobool2 = icmp ne i64 %and, 0, !dbg !8226
  %lnot = xor i1 %tobool2, true, !dbg !8226
  %lnot3 = xor i1 %lnot, true, !dbg !8226
  %lnot.ext = zext i1 %lnot3 to i32, !dbg !8226
  %10 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %11 = load i8, i8* %10, align 1, !dbg !8226
  %conv4 = zext i8 %11 to i64, !dbg !8226
  %and5 = and i64 %conv4, 2, !dbg !8226
  %tobool6 = icmp ne i64 %and5, 0, !dbg !8226
  %lnot7 = xor i1 %tobool6, true, !dbg !8226
  %lnot9 = xor i1 %lnot7, true, !dbg !8226
  %lnot.ext10 = zext i1 %lnot9 to i32, !dbg !8226
  %add = add i32 %lnot.ext, %lnot.ext10, !dbg !8226
  %12 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %13 = load i8, i8* %12, align 1, !dbg !8226
  %conv11 = zext i8 %13 to i64, !dbg !8226
  %and12 = and i64 %conv11, 4, !dbg !8226
  %tobool13 = icmp ne i64 %and12, 0, !dbg !8226
  %lnot14 = xor i1 %tobool13, true, !dbg !8226
  %lnot16 = xor i1 %lnot14, true, !dbg !8226
  %lnot.ext17 = zext i1 %lnot16 to i32, !dbg !8226
  %add18 = add i32 %add, %lnot.ext17, !dbg !8226
  %14 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %15 = load i8, i8* %14, align 1, !dbg !8226
  %conv19 = zext i8 %15 to i64, !dbg !8226
  %and20 = and i64 %conv19, 8, !dbg !8226
  %tobool21 = icmp ne i64 %and20, 0, !dbg !8226
  %lnot22 = xor i1 %tobool21, true, !dbg !8226
  %lnot24 = xor i1 %lnot22, true, !dbg !8226
  %lnot.ext25 = zext i1 %lnot24 to i32, !dbg !8226
  %add26 = add i32 %add18, %lnot.ext25, !dbg !8226
  %16 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %17 = load i8, i8* %16, align 1, !dbg !8226
  %conv27 = zext i8 %17 to i64, !dbg !8226
  %and28 = and i64 %conv27, 16, !dbg !8226
  %tobool29 = icmp ne i64 %and28, 0, !dbg !8226
  %lnot30 = xor i1 %tobool29, true, !dbg !8226
  %lnot32 = xor i1 %lnot30, true, !dbg !8226
  %lnot.ext33 = zext i1 %lnot32 to i32, !dbg !8226
  %add34 = add i32 %add26, %lnot.ext33, !dbg !8226
  %18 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %19 = load i8, i8* %18, align 1, !dbg !8226
  %conv35 = zext i8 %19 to i64, !dbg !8226
  %and36 = and i64 %conv35, 32, !dbg !8226
  %tobool37 = icmp ne i64 %and36, 0, !dbg !8226
  %lnot38 = xor i1 %tobool37, true, !dbg !8226
  %lnot40 = xor i1 %lnot38, true, !dbg !8226
  %lnot.ext41 = zext i1 %lnot40 to i32, !dbg !8226
  %add42 = add i32 %add34, %lnot.ext41, !dbg !8226
  %20 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %21 = load i8, i8* %20, align 1, !dbg !8226
  %conv43 = zext i8 %21 to i64, !dbg !8226
  %and44 = and i64 %conv43, 64, !dbg !8226
  %tobool45 = icmp ne i64 %and44, 0, !dbg !8226
  %lnot46 = xor i1 %tobool45, true, !dbg !8226
  %lnot48 = xor i1 %lnot46, true, !dbg !8226
  %lnot.ext49 = zext i1 %lnot48 to i32, !dbg !8226
  %add50 = add i32 %add42, %lnot.ext49, !dbg !8226
  %22 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %23 = load i8, i8* %22, align 1, !dbg !8226
  %conv51 = zext i8 %23 to i64, !dbg !8226
  %and52 = and i64 %conv51, 128, !dbg !8226
  %tobool53 = icmp ne i64 %and52, 0, !dbg !8226
  %lnot54 = xor i1 %tobool53, true, !dbg !8226
  %lnot56 = xor i1 %lnot54, true, !dbg !8226
  %lnot.ext57 = zext i1 %lnot56 to i32, !dbg !8226
  %add58 = add i32 %add50, %lnot.ext57, !dbg !8226
  br label %cond.end, !dbg !8226

cond.false:                                       ; preds = %for.body
  %24 = load i8*, i8** %bitmap, align 8, !dbg !8226
  %25 = load i8, i8* %24, align 1, !dbg !8226
  %conv59 = zext i8 %25 to i32, !dbg !8226
  %call = call i32 @__arch_hweight8(i32 %conv59) #8, !dbg !8226
  br label %cond.end, !dbg !8226

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add58, %cond.true ], [ %call, %cond.false ], !dbg !8226
  store i32 %cond, i32* %weight, align 4, !dbg !8228
  %26 = load i32, i32* %weight, align 4, !dbg !8229
  %sub = sub i32 8, %26, !dbg !8230
  %27 = load i32, i32* %bitflips, align 4, !dbg !8231
  %add60 = add i32 %27, %sub, !dbg !8231
  store i32 %add60, i32* %bitflips, align 4, !dbg !8231
  %28 = load i32, i32* %bitflips, align 4, !dbg !8232
  %29 = load i32, i32* %bitflips_threshold.addr, align 4, !dbg !8232
  %cmp = icmp sgt i32 %28, %29, !dbg !8232
  %lnot62 = xor i1 %cmp, true, !dbg !8232
  %lnot64 = xor i1 %lnot62, true, !dbg !8232
  %lnot.ext65 = zext i1 %lnot64 to i32, !dbg !8232
  %conv66 = sext i32 %lnot.ext65 to i64, !dbg !8232
  %tobool67 = icmp ne i64 %conv66, 0, !dbg !8232
  br i1 %tobool67, label %if.then, label %if.end, !dbg !8234

if.then:                                          ; preds = %cond.end
  store i32 -74, i32* %retval, align 4, !dbg !8235
  br label %return, !dbg !8235

if.end:                                           ; preds = %cond.end
  br label %for.inc, !dbg !8236

for.inc:                                          ; preds = %if.end
  %30 = load i32, i32* %len.addr, align 4, !dbg !8237
  %dec = add i32 %30, -1, !dbg !8237
  store i32 %dec, i32* %len.addr, align 4, !dbg !8237
  %31 = load i8*, i8** %bitmap, align 8, !dbg !8238
  %incdec.ptr = getelementptr i8, i8* %31, i32 1, !dbg !8238
  store i8* %incdec.ptr, i8** %bitmap, align 8, !dbg !8238
  br label %for.cond, !dbg !8239, !llvm.loop !8240

for.end:                                          ; preds = %land.end
  br label %for.cond68, !dbg !8242

for.cond68:                                       ; preds = %for.inc91, %for.end
  %32 = load i32, i32* %len.addr, align 4, !dbg !8243
  %conv69 = sext i32 %32 to i64, !dbg !8243
  %cmp70 = icmp uge i64 %conv69, 8, !dbg !8244
  br i1 %cmp70, label %for.body72, label %for.end95, !dbg !8245

for.body72:                                       ; preds = %for.cond68
  call void @llvm.dbg.declare(metadata i64* %d, metadata !8246, metadata !DIExpression()), !dbg !8247
  %33 = load i8*, i8** %bitmap, align 8, !dbg !8248
  %34 = bitcast i8* %33 to i64*, !dbg !8249
  %35 = load i64, i64* %34, align 8, !dbg !8249
  store i64 %35, i64* %d, align 8, !dbg !8247
  %36 = load i64, i64* %d, align 8, !dbg !8250
  %cmp73 = icmp eq i64 %36, -1, !dbg !8252
  br i1 %cmp73, label %if.then75, label %if.end76, !dbg !8253

if.then75:                                        ; preds = %for.body72
  br label %for.inc91, !dbg !8254

if.end76:                                         ; preds = %for.body72
  %37 = load i64, i64* %d, align 8, !dbg !8255
  store i64 %37, i64* %w.addr.i, align 8
  %38 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %39 = call i1 @llvm.is.constant.i64(i64 %38) #9, !dbg !8256
  br i1 %39, label %cond.true.i, label %cond.false.i, !dbg !8256

cond.true.i:                                      ; preds = %if.end76
  %40 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %and.i = and i64 %40, 1, !dbg !8256
  %tobool.i = icmp ne i64 %and.i, 0, !dbg !8256
  %lnot.i = xor i1 %tobool.i, true, !dbg !8256
  %lnot.ext.i = zext i1 %tobool.i to i32, !dbg !8256
  %41 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %and2.i = and i64 %41, 2, !dbg !8256
  %tobool3.i = icmp ne i64 %and2.i, 0, !dbg !8256
  %lnot4.i = xor i1 %tobool3.i, true, !dbg !8256
  %lnot.ext7.i = zext i1 %tobool3.i to i32, !dbg !8256
  %add.i = add i32 %lnot.ext.i, %lnot.ext7.i, !dbg !8256
  %42 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %and8.i = and i64 %42, 4, !dbg !8256
  %tobool9.i = icmp ne i64 %and8.i, 0, !dbg !8256
  %lnot10.i = xor i1 %tobool9.i, true, !dbg !8256
  %lnot.ext13.i = zext i1 %tobool9.i to i32, !dbg !8256
  %add14.i = add i32 %add.i, %lnot.ext13.i, !dbg !8256
  %43 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %and15.i = and i64 %43, 8, !dbg !8256
  %tobool16.i = icmp ne i64 %and15.i, 0, !dbg !8256
  %lnot17.i = xor i1 %tobool16.i, true, !dbg !8256
  %lnot.ext20.i = zext i1 %tobool16.i to i32, !dbg !8256
  %add21.i = add i32 %add14.i, %lnot.ext20.i, !dbg !8256
  %44 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %and22.i = and i64 %44, 16, !dbg !8256
  %tobool23.i = icmp ne i64 %and22.i, 0, !dbg !8256
  %lnot24.i = xor i1 %tobool23.i, true, !dbg !8256
  %lnot.ext27.i = zext i1 %tobool23.i to i32, !dbg !8256
  %add28.i = add i32 %add21.i, %lnot.ext27.i, !dbg !8256
  %45 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %and29.i = and i64 %45, 32, !dbg !8256
  %tobool30.i = icmp ne i64 %and29.i, 0, !dbg !8256
  %lnot31.i = xor i1 %tobool30.i, true, !dbg !8256
  %lnot.ext34.i = zext i1 %tobool30.i to i32, !dbg !8256
  %add35.i = add i32 %add28.i, %lnot.ext34.i, !dbg !8256
  %46 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %and36.i = and i64 %46, 64, !dbg !8256
  %tobool37.i = icmp ne i64 %and36.i, 0, !dbg !8256
  %lnot38.i = xor i1 %tobool37.i, true, !dbg !8256
  %lnot.ext41.i = zext i1 %tobool37.i to i32, !dbg !8256
  %add42.i = add i32 %add35.i, %lnot.ext41.i, !dbg !8256
  %47 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %and43.i = and i64 %47, 128, !dbg !8256
  %tobool44.i = icmp ne i64 %and43.i, 0, !dbg !8256
  %lnot45.i = xor i1 %tobool44.i, true, !dbg !8256
  %lnot.ext48.i = zext i1 %tobool44.i to i32, !dbg !8256
  %add49.i = add i32 %add42.i, %lnot.ext48.i, !dbg !8256
  %48 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr.i = lshr i64 %48, 8, !dbg !8256
  %and50.i = and i64 %shr.i, 1, !dbg !8256
  %tobool51.i = icmp ne i64 %and50.i, 0, !dbg !8256
  %lnot52.i = xor i1 %tobool51.i, true, !dbg !8256
  %lnot.ext55.i = zext i1 %tobool51.i to i32, !dbg !8256
  %49 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr56.i = lshr i64 %49, 8, !dbg !8256
  %and57.i = and i64 %shr56.i, 2, !dbg !8256
  %tobool58.i = icmp ne i64 %and57.i, 0, !dbg !8256
  %lnot59.i = xor i1 %tobool58.i, true, !dbg !8256
  %lnot.ext62.i = zext i1 %tobool58.i to i32, !dbg !8256
  %add63.i = add i32 %lnot.ext55.i, %lnot.ext62.i, !dbg !8256
  %50 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr64.i = lshr i64 %50, 8, !dbg !8256
  %and65.i = and i64 %shr64.i, 4, !dbg !8256
  %tobool66.i = icmp ne i64 %and65.i, 0, !dbg !8256
  %lnot67.i = xor i1 %tobool66.i, true, !dbg !8256
  %lnot.ext70.i = zext i1 %tobool66.i to i32, !dbg !8256
  %add71.i = add i32 %add63.i, %lnot.ext70.i, !dbg !8256
  %51 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr72.i = lshr i64 %51, 8, !dbg !8256
  %and73.i = and i64 %shr72.i, 8, !dbg !8256
  %tobool74.i = icmp ne i64 %and73.i, 0, !dbg !8256
  %lnot75.i = xor i1 %tobool74.i, true, !dbg !8256
  %lnot.ext78.i = zext i1 %tobool74.i to i32, !dbg !8256
  %add79.i = add i32 %add71.i, %lnot.ext78.i, !dbg !8256
  %52 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr80.i = lshr i64 %52, 8, !dbg !8256
  %and81.i = and i64 %shr80.i, 16, !dbg !8256
  %tobool82.i = icmp ne i64 %and81.i, 0, !dbg !8256
  %lnot83.i = xor i1 %tobool82.i, true, !dbg !8256
  %lnot.ext86.i = zext i1 %tobool82.i to i32, !dbg !8256
  %add87.i = add i32 %add79.i, %lnot.ext86.i, !dbg !8256
  %53 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr88.i = lshr i64 %53, 8, !dbg !8256
  %and89.i = and i64 %shr88.i, 32, !dbg !8256
  %tobool90.i = icmp ne i64 %and89.i, 0, !dbg !8256
  %lnot91.i = xor i1 %tobool90.i, true, !dbg !8256
  %lnot.ext94.i = zext i1 %tobool90.i to i32, !dbg !8256
  %add95.i = add i32 %add87.i, %lnot.ext94.i, !dbg !8256
  %54 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr96.i = lshr i64 %54, 8, !dbg !8256
  %and97.i = and i64 %shr96.i, 64, !dbg !8256
  %tobool98.i = icmp ne i64 %and97.i, 0, !dbg !8256
  %lnot99.i = xor i1 %tobool98.i, true, !dbg !8256
  %lnot.ext102.i = zext i1 %tobool98.i to i32, !dbg !8256
  %add103.i = add i32 %add95.i, %lnot.ext102.i, !dbg !8256
  %55 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr104.i = lshr i64 %55, 8, !dbg !8256
  %and105.i = and i64 %shr104.i, 128, !dbg !8256
  %tobool106.i = icmp ne i64 %and105.i, 0, !dbg !8256
  %lnot107.i = xor i1 %tobool106.i, true, !dbg !8256
  %lnot.ext110.i = zext i1 %tobool106.i to i32, !dbg !8256
  %add111.i = add i32 %add103.i, %lnot.ext110.i, !dbg !8256
  %add112.i = add i32 %add49.i, %add111.i, !dbg !8256
  %56 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr113.i = lshr i64 %56, 16, !dbg !8256
  %and114.i = and i64 %shr113.i, 1, !dbg !8256
  %tobool115.i = icmp ne i64 %and114.i, 0, !dbg !8256
  %lnot116.i = xor i1 %tobool115.i, true, !dbg !8256
  %lnot.ext119.i = zext i1 %tobool115.i to i32, !dbg !8256
  %57 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr120.i = lshr i64 %57, 16, !dbg !8256
  %and121.i = and i64 %shr120.i, 2, !dbg !8256
  %tobool122.i = icmp ne i64 %and121.i, 0, !dbg !8256
  %lnot123.i = xor i1 %tobool122.i, true, !dbg !8256
  %lnot.ext126.i = zext i1 %tobool122.i to i32, !dbg !8256
  %add127.i = add i32 %lnot.ext119.i, %lnot.ext126.i, !dbg !8256
  %58 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr128.i = lshr i64 %58, 16, !dbg !8256
  %and129.i = and i64 %shr128.i, 4, !dbg !8256
  %tobool130.i = icmp ne i64 %and129.i, 0, !dbg !8256
  %lnot131.i = xor i1 %tobool130.i, true, !dbg !8256
  %lnot.ext134.i = zext i1 %tobool130.i to i32, !dbg !8256
  %add135.i = add i32 %add127.i, %lnot.ext134.i, !dbg !8256
  %59 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr136.i = lshr i64 %59, 16, !dbg !8256
  %and137.i = and i64 %shr136.i, 8, !dbg !8256
  %tobool138.i = icmp ne i64 %and137.i, 0, !dbg !8256
  %lnot139.i = xor i1 %tobool138.i, true, !dbg !8256
  %lnot.ext142.i = zext i1 %tobool138.i to i32, !dbg !8256
  %add143.i = add i32 %add135.i, %lnot.ext142.i, !dbg !8256
  %60 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr144.i = lshr i64 %60, 16, !dbg !8256
  %and145.i = and i64 %shr144.i, 16, !dbg !8256
  %tobool146.i = icmp ne i64 %and145.i, 0, !dbg !8256
  %lnot147.i = xor i1 %tobool146.i, true, !dbg !8256
  %lnot.ext150.i = zext i1 %tobool146.i to i32, !dbg !8256
  %add151.i = add i32 %add143.i, %lnot.ext150.i, !dbg !8256
  %61 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr152.i = lshr i64 %61, 16, !dbg !8256
  %and153.i = and i64 %shr152.i, 32, !dbg !8256
  %tobool154.i = icmp ne i64 %and153.i, 0, !dbg !8256
  %lnot155.i = xor i1 %tobool154.i, true, !dbg !8256
  %lnot.ext158.i = zext i1 %tobool154.i to i32, !dbg !8256
  %add159.i = add i32 %add151.i, %lnot.ext158.i, !dbg !8256
  %62 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr160.i = lshr i64 %62, 16, !dbg !8256
  %and161.i = and i64 %shr160.i, 64, !dbg !8256
  %tobool162.i = icmp ne i64 %and161.i, 0, !dbg !8256
  %lnot163.i = xor i1 %tobool162.i, true, !dbg !8256
  %lnot.ext166.i = zext i1 %tobool162.i to i32, !dbg !8256
  %add167.i = add i32 %add159.i, %lnot.ext166.i, !dbg !8256
  %63 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr168.i = lshr i64 %63, 16, !dbg !8256
  %and169.i = and i64 %shr168.i, 128, !dbg !8256
  %tobool170.i = icmp ne i64 %and169.i, 0, !dbg !8256
  %lnot171.i = xor i1 %tobool170.i, true, !dbg !8256
  %lnot.ext174.i = zext i1 %tobool170.i to i32, !dbg !8256
  %add175.i = add i32 %add167.i, %lnot.ext174.i, !dbg !8256
  %64 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr176.i = lshr i64 %64, 16, !dbg !8256
  %shr177.i = lshr i64 %shr176.i, 8, !dbg !8256
  %and178.i = and i64 %shr177.i, 1, !dbg !8256
  %tobool179.i = icmp ne i64 %and178.i, 0, !dbg !8256
  %lnot180.i = xor i1 %tobool179.i, true, !dbg !8256
  %lnot.ext183.i = zext i1 %tobool179.i to i32, !dbg !8256
  %65 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr184.i = lshr i64 %65, 16, !dbg !8256
  %shr185.i = lshr i64 %shr184.i, 8, !dbg !8256
  %and186.i = and i64 %shr185.i, 2, !dbg !8256
  %tobool187.i = icmp ne i64 %and186.i, 0, !dbg !8256
  %lnot188.i = xor i1 %tobool187.i, true, !dbg !8256
  %lnot.ext191.i = zext i1 %tobool187.i to i32, !dbg !8256
  %add192.i = add i32 %lnot.ext183.i, %lnot.ext191.i, !dbg !8256
  %66 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr193.i = lshr i64 %66, 16, !dbg !8256
  %shr194.i = lshr i64 %shr193.i, 8, !dbg !8256
  %and195.i = and i64 %shr194.i, 4, !dbg !8256
  %tobool196.i = icmp ne i64 %and195.i, 0, !dbg !8256
  %lnot197.i = xor i1 %tobool196.i, true, !dbg !8256
  %lnot.ext200.i = zext i1 %tobool196.i to i32, !dbg !8256
  %add201.i = add i32 %add192.i, %lnot.ext200.i, !dbg !8256
  %67 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr202.i = lshr i64 %67, 16, !dbg !8256
  %shr203.i = lshr i64 %shr202.i, 8, !dbg !8256
  %and204.i = and i64 %shr203.i, 8, !dbg !8256
  %tobool205.i = icmp ne i64 %and204.i, 0, !dbg !8256
  %lnot206.i = xor i1 %tobool205.i, true, !dbg !8256
  %lnot.ext209.i = zext i1 %tobool205.i to i32, !dbg !8256
  %add210.i = add i32 %add201.i, %lnot.ext209.i, !dbg !8256
  %68 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr211.i = lshr i64 %68, 16, !dbg !8256
  %shr212.i = lshr i64 %shr211.i, 8, !dbg !8256
  %and213.i = and i64 %shr212.i, 16, !dbg !8256
  %tobool214.i = icmp ne i64 %and213.i, 0, !dbg !8256
  %lnot215.i = xor i1 %tobool214.i, true, !dbg !8256
  %lnot.ext218.i = zext i1 %tobool214.i to i32, !dbg !8256
  %add219.i = add i32 %add210.i, %lnot.ext218.i, !dbg !8256
  %69 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr220.i = lshr i64 %69, 16, !dbg !8256
  %shr221.i = lshr i64 %shr220.i, 8, !dbg !8256
  %and222.i = and i64 %shr221.i, 32, !dbg !8256
  %tobool223.i = icmp ne i64 %and222.i, 0, !dbg !8256
  %lnot224.i = xor i1 %tobool223.i, true, !dbg !8256
  %lnot.ext227.i = zext i1 %tobool223.i to i32, !dbg !8256
  %add228.i = add i32 %add219.i, %lnot.ext227.i, !dbg !8256
  %70 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr229.i = lshr i64 %70, 16, !dbg !8256
  %shr230.i = lshr i64 %shr229.i, 8, !dbg !8256
  %and231.i = and i64 %shr230.i, 64, !dbg !8256
  %tobool232.i = icmp ne i64 %and231.i, 0, !dbg !8256
  %lnot233.i = xor i1 %tobool232.i, true, !dbg !8256
  %lnot.ext236.i = zext i1 %tobool232.i to i32, !dbg !8256
  %add237.i = add i32 %add228.i, %lnot.ext236.i, !dbg !8256
  %71 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr238.i = lshr i64 %71, 16, !dbg !8256
  %shr239.i = lshr i64 %shr238.i, 8, !dbg !8256
  %and240.i = and i64 %shr239.i, 128, !dbg !8256
  %tobool241.i = icmp ne i64 %and240.i, 0, !dbg !8256
  %lnot242.i = xor i1 %tobool241.i, true, !dbg !8256
  %lnot.ext245.i = zext i1 %tobool241.i to i32, !dbg !8256
  %add246.i = add i32 %add237.i, %lnot.ext245.i, !dbg !8256
  %add247.i = add i32 %add175.i, %add246.i, !dbg !8256
  %add248.i = add i32 %add112.i, %add247.i, !dbg !8256
  %72 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr249.i = lshr i64 %72, 32, !dbg !8256
  %and250.i = and i64 %shr249.i, 1, !dbg !8256
  %tobool251.i = icmp ne i64 %and250.i, 0, !dbg !8256
  %lnot252.i = xor i1 %tobool251.i, true, !dbg !8256
  %lnot.ext255.i = zext i1 %tobool251.i to i32, !dbg !8256
  %73 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr256.i = lshr i64 %73, 32, !dbg !8256
  %and257.i = and i64 %shr256.i, 2, !dbg !8256
  %tobool258.i = icmp ne i64 %and257.i, 0, !dbg !8256
  %lnot259.i = xor i1 %tobool258.i, true, !dbg !8256
  %lnot.ext262.i = zext i1 %tobool258.i to i32, !dbg !8256
  %add263.i = add i32 %lnot.ext255.i, %lnot.ext262.i, !dbg !8256
  %74 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr264.i = lshr i64 %74, 32, !dbg !8256
  %and265.i = and i64 %shr264.i, 4, !dbg !8256
  %tobool266.i = icmp ne i64 %and265.i, 0, !dbg !8256
  %lnot267.i = xor i1 %tobool266.i, true, !dbg !8256
  %lnot.ext270.i = zext i1 %tobool266.i to i32, !dbg !8256
  %add271.i = add i32 %add263.i, %lnot.ext270.i, !dbg !8256
  %75 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr272.i = lshr i64 %75, 32, !dbg !8256
  %and273.i = and i64 %shr272.i, 8, !dbg !8256
  %tobool274.i = icmp ne i64 %and273.i, 0, !dbg !8256
  %lnot275.i = xor i1 %tobool274.i, true, !dbg !8256
  %lnot.ext278.i = zext i1 %tobool274.i to i32, !dbg !8256
  %add279.i = add i32 %add271.i, %lnot.ext278.i, !dbg !8256
  %76 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr280.i = lshr i64 %76, 32, !dbg !8256
  %and281.i = and i64 %shr280.i, 16, !dbg !8256
  %tobool282.i = icmp ne i64 %and281.i, 0, !dbg !8256
  %lnot283.i = xor i1 %tobool282.i, true, !dbg !8256
  %lnot.ext286.i = zext i1 %tobool282.i to i32, !dbg !8256
  %add287.i = add i32 %add279.i, %lnot.ext286.i, !dbg !8256
  %77 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr288.i = lshr i64 %77, 32, !dbg !8256
  %and289.i = and i64 %shr288.i, 32, !dbg !8256
  %tobool290.i = icmp ne i64 %and289.i, 0, !dbg !8256
  %lnot291.i = xor i1 %tobool290.i, true, !dbg !8256
  %lnot.ext294.i = zext i1 %tobool290.i to i32, !dbg !8256
  %add295.i = add i32 %add287.i, %lnot.ext294.i, !dbg !8256
  %78 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr296.i = lshr i64 %78, 32, !dbg !8256
  %and297.i = and i64 %shr296.i, 64, !dbg !8256
  %tobool298.i = icmp ne i64 %and297.i, 0, !dbg !8256
  %lnot299.i = xor i1 %tobool298.i, true, !dbg !8256
  %lnot.ext302.i = zext i1 %tobool298.i to i32, !dbg !8256
  %add303.i = add i32 %add295.i, %lnot.ext302.i, !dbg !8256
  %79 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr304.i = lshr i64 %79, 32, !dbg !8256
  %and305.i = and i64 %shr304.i, 128, !dbg !8256
  %tobool306.i = icmp ne i64 %and305.i, 0, !dbg !8256
  %lnot307.i = xor i1 %tobool306.i, true, !dbg !8256
  %lnot.ext310.i = zext i1 %tobool306.i to i32, !dbg !8256
  %add311.i = add i32 %add303.i, %lnot.ext310.i, !dbg !8256
  %80 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr312.i = lshr i64 %80, 32, !dbg !8256
  %shr313.i = lshr i64 %shr312.i, 8, !dbg !8256
  %and314.i = and i64 %shr313.i, 1, !dbg !8256
  %tobool315.i = icmp ne i64 %and314.i, 0, !dbg !8256
  %lnot316.i = xor i1 %tobool315.i, true, !dbg !8256
  %lnot.ext319.i = zext i1 %tobool315.i to i32, !dbg !8256
  %81 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr320.i = lshr i64 %81, 32, !dbg !8256
  %shr321.i = lshr i64 %shr320.i, 8, !dbg !8256
  %and322.i = and i64 %shr321.i, 2, !dbg !8256
  %tobool323.i = icmp ne i64 %and322.i, 0, !dbg !8256
  %lnot324.i = xor i1 %tobool323.i, true, !dbg !8256
  %lnot.ext327.i = zext i1 %tobool323.i to i32, !dbg !8256
  %add328.i = add i32 %lnot.ext319.i, %lnot.ext327.i, !dbg !8256
  %82 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr329.i = lshr i64 %82, 32, !dbg !8256
  %shr330.i = lshr i64 %shr329.i, 8, !dbg !8256
  %and331.i = and i64 %shr330.i, 4, !dbg !8256
  %tobool332.i = icmp ne i64 %and331.i, 0, !dbg !8256
  %lnot333.i = xor i1 %tobool332.i, true, !dbg !8256
  %lnot.ext336.i = zext i1 %tobool332.i to i32, !dbg !8256
  %add337.i = add i32 %add328.i, %lnot.ext336.i, !dbg !8256
  %83 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr338.i = lshr i64 %83, 32, !dbg !8256
  %shr339.i = lshr i64 %shr338.i, 8, !dbg !8256
  %and340.i = and i64 %shr339.i, 8, !dbg !8256
  %tobool341.i = icmp ne i64 %and340.i, 0, !dbg !8256
  %lnot342.i = xor i1 %tobool341.i, true, !dbg !8256
  %lnot.ext345.i = zext i1 %tobool341.i to i32, !dbg !8256
  %add346.i = add i32 %add337.i, %lnot.ext345.i, !dbg !8256
  %84 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr347.i = lshr i64 %84, 32, !dbg !8256
  %shr348.i = lshr i64 %shr347.i, 8, !dbg !8256
  %and349.i = and i64 %shr348.i, 16, !dbg !8256
  %tobool350.i = icmp ne i64 %and349.i, 0, !dbg !8256
  %lnot351.i = xor i1 %tobool350.i, true, !dbg !8256
  %lnot.ext354.i = zext i1 %tobool350.i to i32, !dbg !8256
  %add355.i = add i32 %add346.i, %lnot.ext354.i, !dbg !8256
  %85 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr356.i = lshr i64 %85, 32, !dbg !8256
  %shr357.i = lshr i64 %shr356.i, 8, !dbg !8256
  %and358.i = and i64 %shr357.i, 32, !dbg !8256
  %tobool359.i = icmp ne i64 %and358.i, 0, !dbg !8256
  %lnot360.i = xor i1 %tobool359.i, true, !dbg !8256
  %lnot.ext363.i = zext i1 %tobool359.i to i32, !dbg !8256
  %add364.i = add i32 %add355.i, %lnot.ext363.i, !dbg !8256
  %86 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr365.i = lshr i64 %86, 32, !dbg !8256
  %shr366.i = lshr i64 %shr365.i, 8, !dbg !8256
  %and367.i = and i64 %shr366.i, 64, !dbg !8256
  %tobool368.i = icmp ne i64 %and367.i, 0, !dbg !8256
  %lnot369.i = xor i1 %tobool368.i, true, !dbg !8256
  %lnot.ext372.i = zext i1 %tobool368.i to i32, !dbg !8256
  %add373.i = add i32 %add364.i, %lnot.ext372.i, !dbg !8256
  %87 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr374.i = lshr i64 %87, 32, !dbg !8256
  %shr375.i = lshr i64 %shr374.i, 8, !dbg !8256
  %and376.i = and i64 %shr375.i, 128, !dbg !8256
  %tobool377.i = icmp ne i64 %and376.i, 0, !dbg !8256
  %lnot378.i = xor i1 %tobool377.i, true, !dbg !8256
  %lnot.ext381.i = zext i1 %tobool377.i to i32, !dbg !8256
  %add382.i = add i32 %add373.i, %lnot.ext381.i, !dbg !8256
  %add383.i = add i32 %add311.i, %add382.i, !dbg !8256
  %88 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr384.i = lshr i64 %88, 32, !dbg !8256
  %shr385.i = lshr i64 %shr384.i, 16, !dbg !8256
  %and386.i = and i64 %shr385.i, 1, !dbg !8256
  %tobool387.i = icmp ne i64 %and386.i, 0, !dbg !8256
  %lnot388.i = xor i1 %tobool387.i, true, !dbg !8256
  %lnot.ext391.i = zext i1 %tobool387.i to i32, !dbg !8256
  %89 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr392.i = lshr i64 %89, 32, !dbg !8256
  %shr393.i = lshr i64 %shr392.i, 16, !dbg !8256
  %and394.i = and i64 %shr393.i, 2, !dbg !8256
  %tobool395.i = icmp ne i64 %and394.i, 0, !dbg !8256
  %lnot396.i = xor i1 %tobool395.i, true, !dbg !8256
  %lnot.ext399.i = zext i1 %tobool395.i to i32, !dbg !8256
  %add400.i = add i32 %lnot.ext391.i, %lnot.ext399.i, !dbg !8256
  %90 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr401.i = lshr i64 %90, 32, !dbg !8256
  %shr402.i = lshr i64 %shr401.i, 16, !dbg !8256
  %and403.i = and i64 %shr402.i, 4, !dbg !8256
  %tobool404.i = icmp ne i64 %and403.i, 0, !dbg !8256
  %lnot405.i = xor i1 %tobool404.i, true, !dbg !8256
  %lnot.ext408.i = zext i1 %tobool404.i to i32, !dbg !8256
  %add409.i = add i32 %add400.i, %lnot.ext408.i, !dbg !8256
  %91 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr410.i = lshr i64 %91, 32, !dbg !8256
  %shr411.i = lshr i64 %shr410.i, 16, !dbg !8256
  %and412.i = and i64 %shr411.i, 8, !dbg !8256
  %tobool413.i = icmp ne i64 %and412.i, 0, !dbg !8256
  %lnot414.i = xor i1 %tobool413.i, true, !dbg !8256
  %lnot.ext417.i = zext i1 %tobool413.i to i32, !dbg !8256
  %add418.i = add i32 %add409.i, %lnot.ext417.i, !dbg !8256
  %92 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr419.i = lshr i64 %92, 32, !dbg !8256
  %shr420.i = lshr i64 %shr419.i, 16, !dbg !8256
  %and421.i = and i64 %shr420.i, 16, !dbg !8256
  %tobool422.i = icmp ne i64 %and421.i, 0, !dbg !8256
  %lnot423.i = xor i1 %tobool422.i, true, !dbg !8256
  %lnot.ext426.i = zext i1 %tobool422.i to i32, !dbg !8256
  %add427.i = add i32 %add418.i, %lnot.ext426.i, !dbg !8256
  %93 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr428.i = lshr i64 %93, 32, !dbg !8256
  %shr429.i = lshr i64 %shr428.i, 16, !dbg !8256
  %and430.i = and i64 %shr429.i, 32, !dbg !8256
  %tobool431.i = icmp ne i64 %and430.i, 0, !dbg !8256
  %lnot432.i = xor i1 %tobool431.i, true, !dbg !8256
  %lnot.ext435.i = zext i1 %tobool431.i to i32, !dbg !8256
  %add436.i = add i32 %add427.i, %lnot.ext435.i, !dbg !8256
  %94 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr437.i = lshr i64 %94, 32, !dbg !8256
  %shr438.i = lshr i64 %shr437.i, 16, !dbg !8256
  %and439.i = and i64 %shr438.i, 64, !dbg !8256
  %tobool440.i = icmp ne i64 %and439.i, 0, !dbg !8256
  %lnot441.i = xor i1 %tobool440.i, true, !dbg !8256
  %lnot.ext444.i = zext i1 %tobool440.i to i32, !dbg !8256
  %add445.i = add i32 %add436.i, %lnot.ext444.i, !dbg !8256
  %95 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr446.i = lshr i64 %95, 32, !dbg !8256
  %shr447.i = lshr i64 %shr446.i, 16, !dbg !8256
  %and448.i = and i64 %shr447.i, 128, !dbg !8256
  %tobool449.i = icmp ne i64 %and448.i, 0, !dbg !8256
  %lnot450.i = xor i1 %tobool449.i, true, !dbg !8256
  %lnot.ext453.i = zext i1 %tobool449.i to i32, !dbg !8256
  %add454.i = add i32 %add445.i, %lnot.ext453.i, !dbg !8256
  %96 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr455.i = lshr i64 %96, 32, !dbg !8256
  %shr456.i = lshr i64 %shr455.i, 16, !dbg !8256
  %shr457.i = lshr i64 %shr456.i, 8, !dbg !8256
  %and458.i = and i64 %shr457.i, 1, !dbg !8256
  %tobool459.i = icmp ne i64 %and458.i, 0, !dbg !8256
  %lnot460.i = xor i1 %tobool459.i, true, !dbg !8256
  %lnot.ext463.i = zext i1 %tobool459.i to i32, !dbg !8256
  %97 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr464.i = lshr i64 %97, 32, !dbg !8256
  %shr465.i = lshr i64 %shr464.i, 16, !dbg !8256
  %shr466.i = lshr i64 %shr465.i, 8, !dbg !8256
  %and467.i = and i64 %shr466.i, 2, !dbg !8256
  %tobool468.i = icmp ne i64 %and467.i, 0, !dbg !8256
  %lnot469.i = xor i1 %tobool468.i, true, !dbg !8256
  %lnot.ext472.i = zext i1 %tobool468.i to i32, !dbg !8256
  %add473.i = add i32 %lnot.ext463.i, %lnot.ext472.i, !dbg !8256
  %98 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr474.i = lshr i64 %98, 32, !dbg !8256
  %shr475.i = lshr i64 %shr474.i, 16, !dbg !8256
  %shr476.i = lshr i64 %shr475.i, 8, !dbg !8256
  %and477.i = and i64 %shr476.i, 4, !dbg !8256
  %tobool478.i = icmp ne i64 %and477.i, 0, !dbg !8256
  %lnot479.i = xor i1 %tobool478.i, true, !dbg !8256
  %lnot.ext482.i = zext i1 %tobool478.i to i32, !dbg !8256
  %add483.i = add i32 %add473.i, %lnot.ext482.i, !dbg !8256
  %99 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr484.i = lshr i64 %99, 32, !dbg !8256
  %shr485.i = lshr i64 %shr484.i, 16, !dbg !8256
  %shr486.i = lshr i64 %shr485.i, 8, !dbg !8256
  %and487.i = and i64 %shr486.i, 8, !dbg !8256
  %tobool488.i = icmp ne i64 %and487.i, 0, !dbg !8256
  %lnot489.i = xor i1 %tobool488.i, true, !dbg !8256
  %lnot.ext492.i = zext i1 %tobool488.i to i32, !dbg !8256
  %add493.i = add i32 %add483.i, %lnot.ext492.i, !dbg !8256
  %100 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr494.i = lshr i64 %100, 32, !dbg !8256
  %shr495.i = lshr i64 %shr494.i, 16, !dbg !8256
  %shr496.i = lshr i64 %shr495.i, 8, !dbg !8256
  %and497.i = and i64 %shr496.i, 16, !dbg !8256
  %tobool498.i = icmp ne i64 %and497.i, 0, !dbg !8256
  %lnot499.i = xor i1 %tobool498.i, true, !dbg !8256
  %lnot.ext502.i = zext i1 %tobool498.i to i32, !dbg !8256
  %add503.i = add i32 %add493.i, %lnot.ext502.i, !dbg !8256
  %101 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr504.i = lshr i64 %101, 32, !dbg !8256
  %shr505.i = lshr i64 %shr504.i, 16, !dbg !8256
  %shr506.i = lshr i64 %shr505.i, 8, !dbg !8256
  %and507.i = and i64 %shr506.i, 32, !dbg !8256
  %tobool508.i = icmp ne i64 %and507.i, 0, !dbg !8256
  %lnot509.i = xor i1 %tobool508.i, true, !dbg !8256
  %lnot.ext512.i = zext i1 %tobool508.i to i32, !dbg !8256
  %add513.i = add i32 %add503.i, %lnot.ext512.i, !dbg !8256
  %102 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr514.i = lshr i64 %102, 32, !dbg !8256
  %shr515.i = lshr i64 %shr514.i, 16, !dbg !8256
  %shr516.i = lshr i64 %shr515.i, 8, !dbg !8256
  %and517.i = and i64 %shr516.i, 64, !dbg !8256
  %tobool518.i = icmp ne i64 %and517.i, 0, !dbg !8256
  %lnot519.i = xor i1 %tobool518.i, true, !dbg !8256
  %lnot.ext522.i = zext i1 %tobool518.i to i32, !dbg !8256
  %add523.i = add i32 %add513.i, %lnot.ext522.i, !dbg !8256
  %103 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  %shr524.i = lshr i64 %103, 32, !dbg !8256
  %shr525.i = lshr i64 %shr524.i, 16, !dbg !8256
  %shr526.i = lshr i64 %shr525.i, 8, !dbg !8256
  %and527.i = and i64 %shr526.i, 128, !dbg !8256
  %tobool528.i = icmp ne i64 %and527.i, 0, !dbg !8256
  %lnot529.i = xor i1 %tobool528.i, true, !dbg !8256
  %lnot.ext532.i = zext i1 %tobool528.i to i32, !dbg !8256
  %add533.i = add i32 %add523.i, %lnot.ext532.i, !dbg !8256
  %add534.i = add i32 %add454.i, %add533.i, !dbg !8256
  %add535.i = add i32 %add383.i, %add534.i, !dbg !8256
  %add536.i = add i32 %add248.i, %add535.i, !dbg !8256
  %conv.i = zext i32 %add536.i to i64, !dbg !8256
  br label %hweight_long.exit, !dbg !8256

cond.false.i:                                     ; preds = %if.end76
  %104 = load i64, i64* %w.addr.i, align 8, !dbg !8256
  store i64 %104, i64* %w.addr.i.i, align 8
  %105 = load i64, i64* %w.addr.i.i, align 8, !dbg !8257
  %106 = call i64 asm "# ALT: oldnstr\0A661:\0A\09call __sw_hweight64\0A662:\0A# ALT: padding\0A.skip -(((6651f-6641f)-(662b-661b)) > 0) * ((6651f-6641f)-(662b-661b)),0x90\0A663:\0A.pushsection .altinstructions,\22a\22\0A .long 661b - .\0A .long 6641f - .\0A .word ( 4*32+23)\0A .byte 663b-661b\0A .byte 6651f-6641f\0A .byte 663b-662b\0A.popsection\0A.pushsection .altinstr_replacement, \22ax\22\0A# ALT: replacement 1\0A6641:\0A\09popcntq $1, $0\0A6651:\0A.popsection\0A", "={ax},{di},~{dirflag},~{fpsr},~{flags}"(i64 %105) #13, !dbg !8258, !srcloc !8259
  store i64 %106, i64* %res.i.i, align 8, !dbg !8258
  %107 = load i64, i64* %res.i.i, align 8, !dbg !8260
  br label %hweight_long.exit, !dbg !8256

hweight_long.exit:                                ; preds = %cond.true.i, %cond.false.i
  %cond.i = phi i64 [ %conv.i, %cond.true.i ], [ %107, %cond.false.i ], !dbg !8256
  %conv78 = trunc i64 %cond.i to i32, !dbg !8261
  store i32 %conv78, i32* %weight, align 4, !dbg !8262
  %108 = load i32, i32* %weight, align 4, !dbg !8263
  %sub79 = sub i32 64, %108, !dbg !8264
  %109 = load i32, i32* %bitflips, align 4, !dbg !8265
  %add80 = add i32 %109, %sub79, !dbg !8265
  store i32 %add80, i32* %bitflips, align 4, !dbg !8265
  %110 = load i32, i32* %bitflips, align 4, !dbg !8266
  %111 = load i32, i32* %bitflips_threshold.addr, align 4, !dbg !8266
  %cmp81 = icmp sgt i32 %110, %111, !dbg !8266
  %lnot83 = xor i1 %cmp81, true, !dbg !8266
  %lnot85 = xor i1 %lnot83, true, !dbg !8266
  %lnot.ext86 = zext i1 %lnot85 to i32, !dbg !8266
  %conv87 = sext i32 %lnot.ext86 to i64, !dbg !8266
  %tobool88 = icmp ne i64 %conv87, 0, !dbg !8266
  br i1 %tobool88, label %if.then89, label %if.end90, !dbg !8268

if.then89:                                        ; preds = %hweight_long.exit
  store i32 -74, i32* %retval, align 4, !dbg !8269
  br label %return, !dbg !8269

if.end90:                                         ; preds = %hweight_long.exit
  br label %for.inc91, !dbg !8270

for.inc91:                                        ; preds = %if.end90, %if.then75
  %112 = load i32, i32* %len.addr, align 4, !dbg !8271
  %conv92 = sext i32 %112 to i64, !dbg !8271
  %sub93 = sub i64 %conv92, 8, !dbg !8271
  %conv94 = trunc i64 %sub93 to i32, !dbg !8271
  store i32 %conv94, i32* %len.addr, align 4, !dbg !8271
  %113 = load i8*, i8** %bitmap, align 8, !dbg !8272
  %add.ptr = getelementptr i8, i8* %113, i64 8, !dbg !8272
  store i8* %add.ptr, i8** %bitmap, align 8, !dbg !8272
  br label %for.cond68, !dbg !8273, !llvm.loop !8274

for.end95:                                        ; preds = %for.cond68
  br label %for.cond96, !dbg !8276

for.cond96:                                       ; preds = %for.inc181, %for.end95
  %114 = load i32, i32* %len.addr, align 4, !dbg !8277
  %cmp97 = icmp sgt i32 %114, 0, !dbg !8280
  br i1 %cmp97, label %for.body99, label %for.end184, !dbg !8281

for.body99:                                       ; preds = %for.cond96
  %115 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %116 = load i8, i8* %115, align 1, !dbg !8282
  %117 = call i1 @llvm.is.constant.i8(i8 %116), !dbg !8282
  br i1 %117, label %cond.true100, label %cond.false164, !dbg !8282

cond.true100:                                     ; preds = %for.body99
  %118 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %119 = load i8, i8* %118, align 1, !dbg !8282
  %conv101 = zext i8 %119 to i64, !dbg !8282
  %and102 = and i64 %conv101, 1, !dbg !8282
  %tobool103 = icmp ne i64 %and102, 0, !dbg !8282
  %lnot104 = xor i1 %tobool103, true, !dbg !8282
  %lnot106 = xor i1 %lnot104, true, !dbg !8282
  %lnot.ext107 = zext i1 %lnot106 to i32, !dbg !8282
  %120 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %121 = load i8, i8* %120, align 1, !dbg !8282
  %conv108 = zext i8 %121 to i64, !dbg !8282
  %and109 = and i64 %conv108, 2, !dbg !8282
  %tobool110 = icmp ne i64 %and109, 0, !dbg !8282
  %lnot111 = xor i1 %tobool110, true, !dbg !8282
  %lnot113 = xor i1 %lnot111, true, !dbg !8282
  %lnot.ext114 = zext i1 %lnot113 to i32, !dbg !8282
  %add115 = add i32 %lnot.ext107, %lnot.ext114, !dbg !8282
  %122 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %123 = load i8, i8* %122, align 1, !dbg !8282
  %conv116 = zext i8 %123 to i64, !dbg !8282
  %and117 = and i64 %conv116, 4, !dbg !8282
  %tobool118 = icmp ne i64 %and117, 0, !dbg !8282
  %lnot119 = xor i1 %tobool118, true, !dbg !8282
  %lnot121 = xor i1 %lnot119, true, !dbg !8282
  %lnot.ext122 = zext i1 %lnot121 to i32, !dbg !8282
  %add123 = add i32 %add115, %lnot.ext122, !dbg !8282
  %124 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %125 = load i8, i8* %124, align 1, !dbg !8282
  %conv124 = zext i8 %125 to i64, !dbg !8282
  %and125 = and i64 %conv124, 8, !dbg !8282
  %tobool126 = icmp ne i64 %and125, 0, !dbg !8282
  %lnot127 = xor i1 %tobool126, true, !dbg !8282
  %lnot129 = xor i1 %lnot127, true, !dbg !8282
  %lnot.ext130 = zext i1 %lnot129 to i32, !dbg !8282
  %add131 = add i32 %add123, %lnot.ext130, !dbg !8282
  %126 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %127 = load i8, i8* %126, align 1, !dbg !8282
  %conv132 = zext i8 %127 to i64, !dbg !8282
  %and133 = and i64 %conv132, 16, !dbg !8282
  %tobool134 = icmp ne i64 %and133, 0, !dbg !8282
  %lnot135 = xor i1 %tobool134, true, !dbg !8282
  %lnot137 = xor i1 %lnot135, true, !dbg !8282
  %lnot.ext138 = zext i1 %lnot137 to i32, !dbg !8282
  %add139 = add i32 %add131, %lnot.ext138, !dbg !8282
  %128 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %129 = load i8, i8* %128, align 1, !dbg !8282
  %conv140 = zext i8 %129 to i64, !dbg !8282
  %and141 = and i64 %conv140, 32, !dbg !8282
  %tobool142 = icmp ne i64 %and141, 0, !dbg !8282
  %lnot143 = xor i1 %tobool142, true, !dbg !8282
  %lnot145 = xor i1 %lnot143, true, !dbg !8282
  %lnot.ext146 = zext i1 %lnot145 to i32, !dbg !8282
  %add147 = add i32 %add139, %lnot.ext146, !dbg !8282
  %130 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %131 = load i8, i8* %130, align 1, !dbg !8282
  %conv148 = zext i8 %131 to i64, !dbg !8282
  %and149 = and i64 %conv148, 64, !dbg !8282
  %tobool150 = icmp ne i64 %and149, 0, !dbg !8282
  %lnot151 = xor i1 %tobool150, true, !dbg !8282
  %lnot153 = xor i1 %lnot151, true, !dbg !8282
  %lnot.ext154 = zext i1 %lnot153 to i32, !dbg !8282
  %add155 = add i32 %add147, %lnot.ext154, !dbg !8282
  %132 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %133 = load i8, i8* %132, align 1, !dbg !8282
  %conv156 = zext i8 %133 to i64, !dbg !8282
  %and157 = and i64 %conv156, 128, !dbg !8282
  %tobool158 = icmp ne i64 %and157, 0, !dbg !8282
  %lnot159 = xor i1 %tobool158, true, !dbg !8282
  %lnot161 = xor i1 %lnot159, true, !dbg !8282
  %lnot.ext162 = zext i1 %lnot161 to i32, !dbg !8282
  %add163 = add i32 %add155, %lnot.ext162, !dbg !8282
  br label %cond.end167, !dbg !8282

cond.false164:                                    ; preds = %for.body99
  %134 = load i8*, i8** %bitmap, align 8, !dbg !8282
  %135 = load i8, i8* %134, align 1, !dbg !8282
  %conv165 = zext i8 %135 to i32, !dbg !8282
  %call166 = call i32 @__arch_hweight8(i32 %conv165) #8, !dbg !8282
  br label %cond.end167, !dbg !8282

cond.end167:                                      ; preds = %cond.false164, %cond.true100
  %cond168 = phi i32 [ %add163, %cond.true100 ], [ %call166, %cond.false164 ], !dbg !8282
  store i32 %cond168, i32* %weight, align 4, !dbg !8284
  %136 = load i32, i32* %weight, align 4, !dbg !8285
  %sub169 = sub i32 8, %136, !dbg !8286
  %137 = load i32, i32* %bitflips, align 4, !dbg !8287
  %add170 = add i32 %137, %sub169, !dbg !8287
  store i32 %add170, i32* %bitflips, align 4, !dbg !8287
  %138 = load i32, i32* %bitflips, align 4, !dbg !8288
  %139 = load i32, i32* %bitflips_threshold.addr, align 4, !dbg !8288
  %cmp171 = icmp sgt i32 %138, %139, !dbg !8288
  %lnot173 = xor i1 %cmp171, true, !dbg !8288
  %lnot175 = xor i1 %lnot173, true, !dbg !8288
  %lnot.ext176 = zext i1 %lnot175 to i32, !dbg !8288
  %conv177 = sext i32 %lnot.ext176 to i64, !dbg !8288
  %tobool178 = icmp ne i64 %conv177, 0, !dbg !8288
  br i1 %tobool178, label %if.then179, label %if.end180, !dbg !8290

if.then179:                                       ; preds = %cond.end167
  store i32 -74, i32* %retval, align 4, !dbg !8291
  br label %return, !dbg !8291

if.end180:                                        ; preds = %cond.end167
  br label %for.inc181, !dbg !8292

for.inc181:                                       ; preds = %if.end180
  %140 = load i32, i32* %len.addr, align 4, !dbg !8293
  %dec182 = add i32 %140, -1, !dbg !8293
  store i32 %dec182, i32* %len.addr, align 4, !dbg !8293
  %141 = load i8*, i8** %bitmap, align 8, !dbg !8294
  %incdec.ptr183 = getelementptr i8, i8* %141, i32 1, !dbg !8294
  store i8* %incdec.ptr183, i8** %bitmap, align 8, !dbg !8294
  br label %for.cond96, !dbg !8295, !llvm.loop !8296

for.end184:                                       ; preds = %for.cond96
  %142 = load i32, i32* %bitflips, align 4, !dbg !8298
  store i32 %142, i32* %retval, align 4, !dbg !8299
  br label %return, !dbg !8299

return:                                           ; preds = %for.end184, %if.then179, %if.then89, %if.then
  %143 = load i32, i32* %retval, align 4, !dbg !8300
  ret i32 %143, !dbg !8300
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_read_page_raw_notsupp(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !8301 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8304, metadata !DIExpression()), !dbg !8305
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !8306, metadata !DIExpression()), !dbg !8307
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !8308, metadata !DIExpression()), !dbg !8309
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !8310, metadata !DIExpression()), !dbg !8311
  ret i32 -524, !dbg !8312
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_read_page_raw(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !8313 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8314, metadata !DIExpression()), !dbg !8315
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !8316, metadata !DIExpression()), !dbg !8317
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !8318, metadata !DIExpression()), !dbg !8319
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !8320, metadata !DIExpression()), !dbg !8321
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !8322, metadata !DIExpression()), !dbg !8323
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8324
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !8325
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !8323
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8326, metadata !DIExpression()), !dbg !8327
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8328
  %2 = load i32, i32* %page.addr, align 4, !dbg !8329
  %3 = load i8*, i8** %buf.addr, align 8, !dbg !8330
  %4 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8331
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %4, i32 0, i32 4, !dbg !8332
  %5 = load i32, i32* %writesize, align 4, !dbg !8332
  %call1 = call i32 @nand_read_page_op(%struct.nand_chip* %1, i32 %2, i32 0, i8* %3, i32 %5) #8, !dbg !8333
  store i32 %call1, i32* %ret, align 4, !dbg !8334
  %6 = load i32, i32* %ret, align 4, !dbg !8335
  %tobool = icmp ne i32 %6, 0, !dbg !8335
  br i1 %tobool, label %if.then, label %if.end, !dbg !8337

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %ret, align 4, !dbg !8338
  store i32 %7, i32* %retval, align 4, !dbg !8339
  br label %return, !dbg !8339

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %oob_required.addr, align 4, !dbg !8340
  %tobool2 = icmp ne i32 %8, 0, !dbg !8340
  br i1 %tobool2, label %if.then3, label %if.end8, !dbg !8342

if.then3:                                         ; preds = %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8343
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8345
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 23, !dbg !8346
  %11 = load i8*, i8** %oob_poi, align 8, !dbg !8346
  %12 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8347
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %12, i32 0, i32 6, !dbg !8348
  %13 = load i32, i32* %oobsize, align 4, !dbg !8348
  %call4 = call i32 @nand_read_data_op(%struct.nand_chip* %9, i8* %11, i32 %13, i1 zeroext false, i1 zeroext false) #8, !dbg !8349
  store i32 %call4, i32* %ret, align 4, !dbg !8350
  %14 = load i32, i32* %ret, align 4, !dbg !8351
  %tobool5 = icmp ne i32 %14, 0, !dbg !8351
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !8353

if.then6:                                         ; preds = %if.then3
  %15 = load i32, i32* %ret, align 4, !dbg !8354
  store i32 %15, i32* %retval, align 4, !dbg !8355
  br label %return, !dbg !8355

if.end7:                                          ; preds = %if.then3
  br label %if.end8, !dbg !8356

if.end8:                                          ; preds = %if.end7, %if.end
  store i32 0, i32* %retval, align 4, !dbg !8357
  br label %return, !dbg !8357

return:                                           ; preds = %if.end8, %if.then6, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !8358
  ret i32 %16, !dbg !8358
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_monolithic_read_page_raw(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !8359 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %size = alloca i32, align 4
  %read_buf = alloca i8*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8360, metadata !DIExpression()), !dbg !8361
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !8362, metadata !DIExpression()), !dbg !8363
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !8364, metadata !DIExpression()), !dbg !8365
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !8366, metadata !DIExpression()), !dbg !8367
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !8368, metadata !DIExpression()), !dbg !8369
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8370
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !8371
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !8369
  call void @llvm.dbg.declare(metadata i32* %size, metadata !8372, metadata !DIExpression()), !dbg !8373
  %1 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8374
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %1, i32 0, i32 4, !dbg !8375
  %2 = load i32, i32* %writesize, align 4, !dbg !8375
  store i32 %2, i32* %size, align 4, !dbg !8373
  call void @llvm.dbg.declare(metadata i8** %read_buf, metadata !8376, metadata !DIExpression()), !dbg !8377
  %3 = load i8*, i8** %buf.addr, align 8, !dbg !8378
  store i8* %3, i8** %read_buf, align 8, !dbg !8377
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8379, metadata !DIExpression()), !dbg !8380
  %4 = load i32, i32* %oob_required.addr, align 4, !dbg !8381
  %tobool = icmp ne i32 %4, 0, !dbg !8381
  br i1 %tobool, label %if.then, label %if.end3, !dbg !8383

if.then:                                          ; preds = %entry
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8384
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 6, !dbg !8386
  %6 = load i32, i32* %oobsize, align 4, !dbg !8386
  %7 = load i32, i32* %size, align 4, !dbg !8387
  %add = add i32 %7, %6, !dbg !8387
  store i32 %add, i32* %size, align 4, !dbg !8387
  %8 = load i8*, i8** %buf.addr, align 8, !dbg !8388
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8390
  %data_buf = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 22, !dbg !8391
  %10 = load i8*, i8** %data_buf, align 8, !dbg !8391
  %cmp = icmp ne i8* %8, %10, !dbg !8392
  br i1 %cmp, label %if.then1, label %if.end, !dbg !8393

if.then1:                                         ; preds = %if.then
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8394
  %call2 = call i8* @nand_get_data_buf(%struct.nand_chip* %11) #8, !dbg !8395
  store i8* %call2, i8** %read_buf, align 8, !dbg !8396
  br label %if.end, !dbg !8397

if.end:                                           ; preds = %if.then1, %if.then
  br label %if.end3, !dbg !8398

if.end3:                                          ; preds = %if.end, %entry
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8399
  %13 = load i32, i32* %page.addr, align 4, !dbg !8400
  %14 = load i8*, i8** %read_buf, align 8, !dbg !8401
  %15 = load i32, i32* %size, align 4, !dbg !8402
  %call4 = call i32 @nand_read_page_op(%struct.nand_chip* %12, i32 %13, i32 0, i8* %14, i32 %15) #8, !dbg !8403
  store i32 %call4, i32* %ret, align 4, !dbg !8404
  %16 = load i32, i32* %ret, align 4, !dbg !8405
  %tobool5 = icmp ne i32 %16, 0, !dbg !8405
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !8407

if.then6:                                         ; preds = %if.end3
  %17 = load i32, i32* %ret, align 4, !dbg !8408
  store i32 %17, i32* %retval, align 4, !dbg !8409
  br label %return, !dbg !8409

if.end7:                                          ; preds = %if.end3
  %18 = load i8*, i8** %buf.addr, align 8, !dbg !8410
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8412
  %data_buf8 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %19, i32 0, i32 22, !dbg !8413
  %20 = load i8*, i8** %data_buf8, align 8, !dbg !8413
  %cmp9 = icmp ne i8* %18, %20, !dbg !8414
  br i1 %cmp9, label %if.then10, label %if.end12, !dbg !8415

if.then10:                                        ; preds = %if.end7
  %21 = load i8*, i8** %buf.addr, align 8, !dbg !8416
  %22 = load i8*, i8** %read_buf, align 8, !dbg !8417
  %23 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8418
  %writesize11 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %23, i32 0, i32 4, !dbg !8419
  %24 = load i32, i32* %writesize11, align 4, !dbg !8419
  %conv = zext i32 %24 to i64, !dbg !8418
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %21, i8* align 1 %22, i64 %conv, i1 false), !dbg !8420
  br label %if.end12, !dbg !8420

if.end12:                                         ; preds = %if.then10, %if.end7
  store i32 0, i32* %retval, align 4, !dbg !8421
  br label %return, !dbg !8421

return:                                           ; preds = %if.end12, %if.then6
  %25 = load i32, i32* %retval, align 4, !dbg !8422
  ret i32 %25, !dbg !8422
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @nand_get_data_buf(%struct.nand_chip* %chip) #0 !dbg !8423 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8426, metadata !DIExpression()), !dbg !8427
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8428
  %pagecache = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 24, !dbg !8429
  %page = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache, i32 0, i32 1, !dbg !8430
  store i32 -1, i32* %page, align 4, !dbg !8431
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8432
  %data_buf = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 22, !dbg !8433
  %2 = load i8*, i8** %data_buf, align 8, !dbg !8433
  ret i8* %2, !dbg !8434
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_read_oob_std(%struct.nand_chip* %chip, i32 %page) #0 !dbg !8435 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8436, metadata !DIExpression()), !dbg !8437
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !8438, metadata !DIExpression()), !dbg !8439
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !8440, metadata !DIExpression()), !dbg !8441
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8442
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !8443
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !8441
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8444
  %2 = load i32, i32* %page.addr, align 4, !dbg !8445
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8446
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 23, !dbg !8447
  %4 = load i8*, i8** %oob_poi, align 8, !dbg !8447
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8448
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 6, !dbg !8449
  %6 = load i32, i32* %oobsize, align 4, !dbg !8449
  %call1 = call i32 @nand_read_oob_op(%struct.nand_chip* %1, i32 %2, i32 0, i8* %4, i32 %6) #8, !dbg !8450
  ret i32 %call1, !dbg !8451
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_write_oob_std(%struct.nand_chip* %chip, i32 %page) #0 !dbg !8452 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8453, metadata !DIExpression()), !dbg !8454
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !8455, metadata !DIExpression()), !dbg !8456
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !8457, metadata !DIExpression()), !dbg !8458
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8459
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !8460
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !8458
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8461
  %2 = load i32, i32* %page.addr, align 4, !dbg !8462
  %3 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8463
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %3, i32 0, i32 4, !dbg !8464
  %4 = load i32, i32* %writesize, align 4, !dbg !8464
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8465
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 23, !dbg !8466
  %6 = load i8*, i8** %oob_poi, align 8, !dbg !8466
  %7 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8467
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %7, i32 0, i32 6, !dbg !8468
  %8 = load i32, i32* %oobsize, align 4, !dbg !8468
  %call1 = call i32 @nand_prog_page_op(%struct.nand_chip* %1, i32 %2, i32 %4, i8* %6, i32 %8) #8, !dbg !8469
  ret i32 %call1, !dbg !8470
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_write_page_raw_notsupp(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !8471 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8474, metadata !DIExpression()), !dbg !8475
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !8476, metadata !DIExpression()), !dbg !8477
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !8478, metadata !DIExpression()), !dbg !8479
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !8480, metadata !DIExpression()), !dbg !8481
  ret i32 -524, !dbg !8482
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_write_page_raw(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !8483 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8484, metadata !DIExpression()), !dbg !8485
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !8486, metadata !DIExpression()), !dbg !8487
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !8488, metadata !DIExpression()), !dbg !8489
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !8490, metadata !DIExpression()), !dbg !8491
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !8492, metadata !DIExpression()), !dbg !8493
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8494
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !8495
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !8493
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8496, metadata !DIExpression()), !dbg !8497
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8498
  %2 = load i32, i32* %page.addr, align 4, !dbg !8499
  %3 = load i8*, i8** %buf.addr, align 8, !dbg !8500
  %4 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8501
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %4, i32 0, i32 4, !dbg !8502
  %5 = load i32, i32* %writesize, align 4, !dbg !8502
  %call1 = call i32 @nand_prog_page_begin_op(%struct.nand_chip* %1, i32 %2, i32 0, i8* %3, i32 %5) #8, !dbg !8503
  store i32 %call1, i32* %ret, align 4, !dbg !8504
  %6 = load i32, i32* %ret, align 4, !dbg !8505
  %tobool = icmp ne i32 %6, 0, !dbg !8505
  br i1 %tobool, label %if.then, label %if.end, !dbg !8507

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %ret, align 4, !dbg !8508
  store i32 %7, i32* %retval, align 4, !dbg !8509
  br label %return, !dbg !8509

if.end:                                           ; preds = %entry
  %8 = load i32, i32* %oob_required.addr, align 4, !dbg !8510
  %tobool2 = icmp ne i32 %8, 0, !dbg !8510
  br i1 %tobool2, label %if.then3, label %if.end8, !dbg !8512

if.then3:                                         ; preds = %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8513
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8515
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 23, !dbg !8516
  %11 = load i8*, i8** %oob_poi, align 8, !dbg !8516
  %12 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8517
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %12, i32 0, i32 6, !dbg !8518
  %13 = load i32, i32* %oobsize, align 4, !dbg !8518
  %call4 = call i32 @nand_write_data_op(%struct.nand_chip* %9, i8* %11, i32 %13, i1 zeroext false) #8, !dbg !8519
  store i32 %call4, i32* %ret, align 4, !dbg !8520
  %14 = load i32, i32* %ret, align 4, !dbg !8521
  %tobool5 = icmp ne i32 %14, 0, !dbg !8521
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !8523

if.then6:                                         ; preds = %if.then3
  %15 = load i32, i32* %ret, align 4, !dbg !8524
  store i32 %15, i32* %retval, align 4, !dbg !8525
  br label %return, !dbg !8525

if.end7:                                          ; preds = %if.then3
  br label %if.end8, !dbg !8526

if.end8:                                          ; preds = %if.end7, %if.end
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8527
  %call9 = call i32 @nand_prog_page_end_op(%struct.nand_chip* %16) #8, !dbg !8528
  store i32 %call9, i32* %retval, align 4, !dbg !8529
  br label %return, !dbg !8529

return:                                           ; preds = %if.end8, %if.then6, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !8530
  ret i32 %17, !dbg !8530
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_monolithic_write_page_raw(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !8531 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %size = alloca i32, align 4
  %write_buf = alloca i8*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8532, metadata !DIExpression()), !dbg !8533
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !8534, metadata !DIExpression()), !dbg !8535
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !8536, metadata !DIExpression()), !dbg !8537
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !8538, metadata !DIExpression()), !dbg !8539
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !8540, metadata !DIExpression()), !dbg !8541
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8542
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !8543
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !8541
  call void @llvm.dbg.declare(metadata i32* %size, metadata !8544, metadata !DIExpression()), !dbg !8545
  %1 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8546
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %1, i32 0, i32 4, !dbg !8547
  %2 = load i32, i32* %writesize, align 4, !dbg !8547
  store i32 %2, i32* %size, align 4, !dbg !8545
  call void @llvm.dbg.declare(metadata i8** %write_buf, metadata !8548, metadata !DIExpression()), !dbg !8549
  %3 = load i8*, i8** %buf.addr, align 8, !dbg !8550
  store i8* %3, i8** %write_buf, align 8, !dbg !8549
  %4 = load i32, i32* %oob_required.addr, align 4, !dbg !8551
  %tobool = icmp ne i32 %4, 0, !dbg !8551
  br i1 %tobool, label %if.then, label %if.end4, !dbg !8553

if.then:                                          ; preds = %entry
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8554
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 6, !dbg !8556
  %6 = load i32, i32* %oobsize, align 4, !dbg !8556
  %7 = load i32, i32* %size, align 4, !dbg !8557
  %add = add i32 %7, %6, !dbg !8557
  store i32 %add, i32* %size, align 4, !dbg !8557
  %8 = load i8*, i8** %buf.addr, align 8, !dbg !8558
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8560
  %data_buf = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 22, !dbg !8561
  %10 = load i8*, i8** %data_buf, align 8, !dbg !8561
  %cmp = icmp ne i8* %8, %10, !dbg !8562
  br i1 %cmp, label %if.then1, label %if.end, !dbg !8563

if.then1:                                         ; preds = %if.then
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8564
  %call2 = call i8* @nand_get_data_buf(%struct.nand_chip* %11) #8, !dbg !8566
  store i8* %call2, i8** %write_buf, align 8, !dbg !8567
  %12 = load i8*, i8** %write_buf, align 8, !dbg !8568
  %13 = load i8*, i8** %buf.addr, align 8, !dbg !8569
  %14 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8570
  %writesize3 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %14, i32 0, i32 4, !dbg !8571
  %15 = load i32, i32* %writesize3, align 4, !dbg !8571
  %conv = zext i32 %15 to i64, !dbg !8570
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 %13, i64 %conv, i1 false), !dbg !8572
  br label %if.end, !dbg !8573

if.end:                                           ; preds = %if.then1, %if.then
  br label %if.end4, !dbg !8574

if.end4:                                          ; preds = %if.end, %entry
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8575
  %17 = load i32, i32* %page.addr, align 4, !dbg !8576
  %18 = load i8*, i8** %write_buf, align 8, !dbg !8577
  %19 = load i32, i32* %size, align 4, !dbg !8578
  %call5 = call i32 @nand_prog_page_op(%struct.nand_chip* %16, i32 %17, i32 0, i8* %18, i32 %19) #8, !dbg !8579
  ret i32 %call5, !dbg !8580
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_erase_nand(%struct.nand_chip* %chip, %struct.erase_info* %instr, i32 %allowbbt) #0 !dbg !8581 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %instr.addr = alloca %struct.erase_info*, align 8
  %allowbbt.addr = alloca i32, align 4
  %page = alloca i32, align 4
  %pages_per_block = alloca i32, align 4
  %ret = alloca i32, align 4
  %chipnr = alloca i32, align 4
  %len = alloca i64, align 8
  %tmp = alloca i32, align 4
  %tmp15 = alloca i32, align 4
  %tmp45 = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8584, metadata !DIExpression()), !dbg !8585
  store %struct.erase_info* %instr, %struct.erase_info** %instr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.erase_info** %instr.addr, metadata !8586, metadata !DIExpression()), !dbg !8587
  store i32 %allowbbt, i32* %allowbbt.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %allowbbt.addr, metadata !8588, metadata !DIExpression()), !dbg !8589
  call void @llvm.dbg.declare(metadata i32* %page, metadata !8590, metadata !DIExpression()), !dbg !8591
  call void @llvm.dbg.declare(metadata i32* %pages_per_block, metadata !8592, metadata !DIExpression()), !dbg !8593
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8594, metadata !DIExpression()), !dbg !8595
  call void @llvm.dbg.declare(metadata i32* %chipnr, metadata !8596, metadata !DIExpression()), !dbg !8597
  call void @llvm.dbg.declare(metadata i64* %len, metadata !8598, metadata !DIExpression()), !dbg !8599
  store i32 0, i32* %tmp, align 4, !dbg !8600
  %0 = load i32, i32* %tmp, align 4, !dbg !8603
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8604
  %2 = load %struct.erase_info*, %struct.erase_info** %instr.addr, align 8, !dbg !8606
  %addr = getelementptr inbounds %struct.erase_info, %struct.erase_info* %2, i32 0, i32 0, !dbg !8607
  %3 = load i64, i64* %addr, align 8, !dbg !8607
  %4 = load %struct.erase_info*, %struct.erase_info** %instr.addr, align 8, !dbg !8608
  %len1 = getelementptr inbounds %struct.erase_info, %struct.erase_info* %4, i32 0, i32 1, !dbg !8609
  %5 = load i64, i64* %len1, align 8, !dbg !8609
  %call = call i32 @check_offs_len(%struct.nand_chip* %1, i64 %3, i64 %5) #8, !dbg !8610
  %tobool = icmp ne i32 %call, 0, !dbg !8610
  br i1 %tobool, label %if.then, label %if.end, !dbg !8611

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !8612
  br label %return, !dbg !8612

if.end:                                           ; preds = %entry
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8613
  %call2 = call i32 @nand_get_device(%struct.nand_chip* %6) #8, !dbg !8614
  store i32 %call2, i32* %ret, align 4, !dbg !8615
  %7 = load i32, i32* %ret, align 4, !dbg !8616
  %tobool3 = icmp ne i32 %7, 0, !dbg !8616
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !8618

if.then4:                                         ; preds = %if.end
  %8 = load i32, i32* %ret, align 4, !dbg !8619
  store i32 %8, i32* %retval, align 4, !dbg !8620
  br label %return, !dbg !8620

if.end5:                                          ; preds = %if.end
  %9 = load %struct.erase_info*, %struct.erase_info** %instr.addr, align 8, !dbg !8621
  %addr6 = getelementptr inbounds %struct.erase_info, %struct.erase_info* %9, i32 0, i32 0, !dbg !8622
  %10 = load i64, i64* %addr6, align 8, !dbg !8622
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8623
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 17, !dbg !8624
  %12 = load i32, i32* %page_shift, align 8, !dbg !8624
  %sh_prom = zext i32 %12 to i64, !dbg !8625
  %shr = lshr i64 %10, %sh_prom, !dbg !8625
  %conv = trunc i64 %shr to i32, !dbg !8626
  store i32 %conv, i32* %page, align 4, !dbg !8627
  %13 = load %struct.erase_info*, %struct.erase_info** %instr.addr, align 8, !dbg !8628
  %addr7 = getelementptr inbounds %struct.erase_info, %struct.erase_info* %13, i32 0, i32 0, !dbg !8629
  %14 = load i64, i64* %addr7, align 8, !dbg !8629
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8630
  %chip_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 19, !dbg !8631
  %16 = load i32, i32* %chip_shift, align 8, !dbg !8631
  %sh_prom8 = zext i32 %16 to i64, !dbg !8632
  %shr9 = lshr i64 %14, %sh_prom8, !dbg !8632
  %conv10 = trunc i64 %shr9 to i32, !dbg !8633
  store i32 %conv10, i32* %chipnr, align 4, !dbg !8634
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8635
  %phys_erase_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %17, i32 0, i32 18, !dbg !8636
  %18 = load i32, i32* %phys_erase_shift, align 4, !dbg !8636
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8637
  %page_shift11 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %19, i32 0, i32 17, !dbg !8638
  %20 = load i32, i32* %page_shift11, align 8, !dbg !8638
  %sub = sub i32 %18, %20, !dbg !8639
  %shl = shl i32 1, %sub, !dbg !8640
  store i32 %shl, i32* %pages_per_block, align 4, !dbg !8641
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8642
  %22 = load i32, i32* %chipnr, align 4, !dbg !8643
  call void @nand_select_target(%struct.nand_chip* %21, i32 %22) #8, !dbg !8644
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8645
  %call12 = call i32 @nand_check_wp(%struct.nand_chip* %23) #8, !dbg !8647
  %tobool13 = icmp ne i32 %call12, 0, !dbg !8647
  br i1 %tobool13, label %if.then14, label %if.end16, !dbg !8648

if.then14:                                        ; preds = %if.end5
  store i32 0, i32* %tmp15, align 4, !dbg !8649
  %24 = load i32, i32* %tmp15, align 4, !dbg !8653
  store i32 -5, i32* %ret, align 4, !dbg !8654
  br label %erase_exit, !dbg !8655

if.end16:                                         ; preds = %if.end5
  %25 = load %struct.erase_info*, %struct.erase_info** %instr.addr, align 8, !dbg !8656
  %len17 = getelementptr inbounds %struct.erase_info, %struct.erase_info* %25, i32 0, i32 1, !dbg !8657
  %26 = load i64, i64* %len17, align 8, !dbg !8657
  store i64 %26, i64* %len, align 8, !dbg !8658
  br label %while.cond, !dbg !8659

while.cond:                                       ; preds = %if.end62, %if.end16
  %27 = load i64, i64* %len, align 8, !dbg !8660
  %tobool18 = icmp ne i64 %27, 0, !dbg !8659
  br i1 %tobool18, label %while.body, label %while.end, !dbg !8659

while.body:                                       ; preds = %while.cond
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8661
  %29 = load i32, i32* %page, align 4, !dbg !8664
  %conv19 = sext i32 %29 to i64, !dbg !8665
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8666
  %page_shift20 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %30, i32 0, i32 17, !dbg !8667
  %31 = load i32, i32* %page_shift20, align 8, !dbg !8667
  %sh_prom21 = zext i32 %31 to i64, !dbg !8668
  %shl22 = shl i64 %conv19, %sh_prom21, !dbg !8668
  %32 = load i32, i32* %allowbbt.addr, align 4, !dbg !8669
  %call23 = call i32 @nand_block_checkbad(%struct.nand_chip* %28, i64 %shl22, i32 %32) #8, !dbg !8670
  %tobool24 = icmp ne i32 %call23, 0, !dbg !8670
  br i1 %tobool24, label %if.then25, label %if.end27, !dbg !8671

if.then25:                                        ; preds = %while.body
  %33 = load i32, i32* %page, align 4, !dbg !8672
  %call26 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @__func__.nand_erase_nand, i64 0, i64 0), i32 %33) #12, !dbg !8672
  store i32 -5, i32* %ret, align 4, !dbg !8674
  br label %erase_exit, !dbg !8675

if.end27:                                         ; preds = %while.body
  %34 = load i32, i32* %page, align 4, !dbg !8676
  %35 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8678
  %pagecache = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %35, i32 0, i32 24, !dbg !8679
  %page28 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache, i32 0, i32 1, !dbg !8680
  %36 = load i32, i32* %page28, align 4, !dbg !8680
  %cmp = icmp sle i32 %34, %36, !dbg !8681
  br i1 %cmp, label %land.lhs.true, label %if.end37, !dbg !8682

land.lhs.true:                                    ; preds = %if.end27
  %37 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8683
  %pagecache30 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %37, i32 0, i32 24, !dbg !8684
  %page31 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache30, i32 0, i32 1, !dbg !8685
  %38 = load i32, i32* %page31, align 4, !dbg !8685
  %39 = load i32, i32* %page, align 4, !dbg !8686
  %40 = load i32, i32* %pages_per_block, align 4, !dbg !8687
  %add = add i32 %39, %40, !dbg !8688
  %cmp32 = icmp slt i32 %38, %add, !dbg !8689
  br i1 %cmp32, label %if.then34, label %if.end37, !dbg !8690

if.then34:                                        ; preds = %land.lhs.true
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8691
  %pagecache35 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %41, i32 0, i32 24, !dbg !8692
  %page36 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache35, i32 0, i32 1, !dbg !8693
  store i32 -1, i32* %page36, align 4, !dbg !8694
  br label %if.end37, !dbg !8691

if.end37:                                         ; preds = %if.then34, %land.lhs.true, %if.end27
  %42 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8695
  %43 = load i32, i32* %page, align 4, !dbg !8696
  %44 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8697
  %pagemask = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %44, i32 0, i32 20, !dbg !8698
  %45 = load i32, i32* %pagemask, align 4, !dbg !8698
  %and = and i32 %43, %45, !dbg !8699
  %46 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8700
  %phys_erase_shift38 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %46, i32 0, i32 18, !dbg !8701
  %47 = load i32, i32* %phys_erase_shift38, align 4, !dbg !8701
  %48 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8702
  %page_shift39 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %48, i32 0, i32 17, !dbg !8703
  %49 = load i32, i32* %page_shift39, align 8, !dbg !8703
  %sub40 = sub i32 %47, %49, !dbg !8704
  %shr41 = lshr i32 %and, %sub40, !dbg !8705
  %call42 = call i32 @nand_erase_op(%struct.nand_chip* %42, i32 %shr41) #8, !dbg !8706
  store i32 %call42, i32* %ret, align 4, !dbg !8707
  %50 = load i32, i32* %ret, align 4, !dbg !8708
  %tobool43 = icmp ne i32 %50, 0, !dbg !8708
  br i1 %tobool43, label %if.then44, label %if.end50, !dbg !8710

if.then44:                                        ; preds = %if.end37
  store i32 0, i32* %tmp45, align 4, !dbg !8711
  %51 = load i32, i32* %tmp45, align 4, !dbg !8715
  %52 = load i32, i32* %page, align 4, !dbg !8716
  %conv46 = sext i32 %52 to i64, !dbg !8717
  %53 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8718
  %page_shift47 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %53, i32 0, i32 17, !dbg !8719
  %54 = load i32, i32* %page_shift47, align 8, !dbg !8719
  %sh_prom48 = zext i32 %54 to i64, !dbg !8720
  %shl49 = shl i64 %conv46, %sh_prom48, !dbg !8720
  %55 = load %struct.erase_info*, %struct.erase_info** %instr.addr, align 8, !dbg !8721
  %fail_addr = getelementptr inbounds %struct.erase_info, %struct.erase_info* %55, i32 0, i32 2, !dbg !8722
  store i64 %shl49, i64* %fail_addr, align 8, !dbg !8723
  br label %erase_exit, !dbg !8724

if.end50:                                         ; preds = %if.end37
  %56 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8725
  %phys_erase_shift51 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %56, i32 0, i32 18, !dbg !8726
  %57 = load i32, i32* %phys_erase_shift51, align 4, !dbg !8726
  %sh_prom52 = zext i32 %57 to i64, !dbg !8727
  %shl53 = shl i64 1, %sh_prom52, !dbg !8727
  %58 = load i64, i64* %len, align 8, !dbg !8728
  %sub54 = sub i64 %58, %shl53, !dbg !8728
  store i64 %sub54, i64* %len, align 8, !dbg !8728
  %59 = load i32, i32* %pages_per_block, align 4, !dbg !8729
  %60 = load i32, i32* %page, align 4, !dbg !8730
  %add55 = add i32 %60, %59, !dbg !8730
  store i32 %add55, i32* %page, align 4, !dbg !8730
  %61 = load i64, i64* %len, align 8, !dbg !8731
  %tobool56 = icmp ne i64 %61, 0, !dbg !8731
  br i1 %tobool56, label %land.lhs.true57, label %if.end62, !dbg !8733

land.lhs.true57:                                  ; preds = %if.end50
  %62 = load i32, i32* %page, align 4, !dbg !8734
  %63 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8735
  %pagemask58 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %63, i32 0, i32 20, !dbg !8736
  %64 = load i32, i32* %pagemask58, align 4, !dbg !8736
  %and59 = and i32 %62, %64, !dbg !8737
  %tobool60 = icmp ne i32 %and59, 0, !dbg !8737
  br i1 %tobool60, label %if.end62, label %if.then61, !dbg !8738

if.then61:                                        ; preds = %land.lhs.true57
  %65 = load i32, i32* %chipnr, align 4, !dbg !8739
  %inc = add i32 %65, 1, !dbg !8739
  store i32 %inc, i32* %chipnr, align 4, !dbg !8739
  %66 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8741
  call void @nand_deselect_target(%struct.nand_chip* %66) #8, !dbg !8742
  %67 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8743
  %68 = load i32, i32* %chipnr, align 4, !dbg !8744
  call void @nand_select_target(%struct.nand_chip* %67, i32 %68) #8, !dbg !8745
  br label %if.end62, !dbg !8746

if.end62:                                         ; preds = %if.then61, %land.lhs.true57, %if.end50
  br label %while.cond, !dbg !8659, !llvm.loop !8747

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %ret, align 4, !dbg !8749
  br label %erase_exit, !dbg !8750

erase_exit:                                       ; preds = %while.end, %if.then44, %if.then25, %if.then14
  call void @llvm.dbg.label(metadata !8751), !dbg !8752
  %69 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8753
  call void @nand_deselect_target(%struct.nand_chip* %69) #8, !dbg !8754
  %70 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8755
  call void @nand_release_device(%struct.nand_chip* %70) #8, !dbg !8756
  %71 = load i32, i32* %ret, align 4, !dbg !8757
  store i32 %71, i32* %retval, align 4, !dbg !8758
  br label %return, !dbg !8758

return:                                           ; preds = %erase_exit, %if.then4, %if.then
  %72 = load i32, i32* %retval, align 4, !dbg !8759
  ret i32 %72, !dbg !8759
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @check_offs_len(%struct.nand_chip* %chip, i64 %ofs, i64 %len) #0 !dbg !8760 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %ofs.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp8 = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8761, metadata !DIExpression()), !dbg !8762
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !8763, metadata !DIExpression()), !dbg !8764
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !8765, metadata !DIExpression()), !dbg !8766
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8767, metadata !DIExpression()), !dbg !8768
  store i32 0, i32* %ret, align 4, !dbg !8768
  %0 = load i64, i64* %ofs.addr, align 8, !dbg !8769
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8771
  %phys_erase_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 18, !dbg !8772
  %2 = load i32, i32* %phys_erase_shift, align 4, !dbg !8772
  %sh_prom = zext i32 %2 to i64, !dbg !8773
  %shl = shl i64 1, %sh_prom, !dbg !8773
  %sub = sub i64 %shl, 1, !dbg !8774
  %and = and i64 %0, %sub, !dbg !8775
  %tobool = icmp ne i64 %and, 0, !dbg !8775
  br i1 %tobool, label %if.then, label %if.end, !dbg !8776

if.then:                                          ; preds = %entry
  store i32 0, i32* %tmp, align 4, !dbg !8777
  %3 = load i32, i32* %tmp, align 4, !dbg !8781
  store i32 -22, i32* %ret, align 4, !dbg !8782
  br label %if.end, !dbg !8783

if.end:                                           ; preds = %if.then, %entry
  %4 = load i64, i64* %len.addr, align 8, !dbg !8784
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8786
  %phys_erase_shift1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 18, !dbg !8787
  %6 = load i32, i32* %phys_erase_shift1, align 4, !dbg !8787
  %sh_prom2 = zext i32 %6 to i64, !dbg !8788
  %shl3 = shl i64 1, %sh_prom2, !dbg !8788
  %sub4 = sub i64 %shl3, 1, !dbg !8789
  %and5 = and i64 %4, %sub4, !dbg !8790
  %tobool6 = icmp ne i64 %and5, 0, !dbg !8790
  br i1 %tobool6, label %if.then7, label %if.end9, !dbg !8791

if.then7:                                         ; preds = %if.end
  store i32 0, i32* %tmp8, align 4, !dbg !8792
  %7 = load i32, i32* %tmp8, align 4, !dbg !8796
  store i32 -22, i32* %ret, align 4, !dbg !8797
  br label %if.end9, !dbg !8798

if.end9:                                          ; preds = %if.then7, %if.end
  %8 = load i32, i32* %ret, align 4, !dbg !8799
  ret i32 %8, !dbg !8800
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_get_device(%struct.nand_chip* %chip) #0 !dbg !8801 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8802, metadata !DIExpression()), !dbg !8803
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8804
  %lock = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 26, !dbg !8805
  call void @mutex_lock(%struct.mutex* %lock) #8, !dbg !8806
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8807
  %suspended = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 27, !dbg !8809
  %bf.load = load i8, i8* %suspended, align 8, !dbg !8809
  %bf.clear = and i8 %bf.load, 1, !dbg !8809
  %bf.cast = zext i8 %bf.clear to i32, !dbg !8809
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !8807
  br i1 %tobool, label %if.then, label %if.end, !dbg !8810

if.then:                                          ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8811
  %lock1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 26, !dbg !8813
  call void @mutex_unlock(%struct.mutex* %lock1) #8, !dbg !8814
  store i32 -16, i32* %retval, align 4, !dbg !8815
  br label %return, !dbg !8815

if.end:                                           ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8816
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 30, !dbg !8817
  %4 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !8817
  %lock2 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %4, i32 0, i32 0, !dbg !8818
  call void @mutex_lock(%struct.mutex* %lock2) #8, !dbg !8819
  store i32 0, i32* %retval, align 4, !dbg !8820
  br label %return, !dbg !8820

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !8821
  ret i32 %5, !dbg !8821
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_check_wp(%struct.nand_chip* %chip) #0 !dbg !8822 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %status = alloca i8, align 1
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8823, metadata !DIExpression()), !dbg !8824
  call void @llvm.dbg.declare(metadata i8* %status, metadata !8825, metadata !DIExpression()), !dbg !8826
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8827, metadata !DIExpression()), !dbg !8828
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8829
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 6, !dbg !8831
  %1 = load i32, i32* %options, align 8, !dbg !8831
  %conv = zext i32 %1 to i64, !dbg !8829
  %and = and i64 %conv, 1024, !dbg !8832
  %tobool = icmp ne i64 %and, 0, !dbg !8832
  br i1 %tobool, label %if.then, label %if.end, !dbg !8833

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !8834
  br label %return, !dbg !8834

if.end:                                           ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8835
  %call = call i32 @nand_status_op(%struct.nand_chip* %2, i8* %status) #8, !dbg !8836
  store i32 %call, i32* %ret, align 4, !dbg !8837
  %3 = load i32, i32* %ret, align 4, !dbg !8838
  %tobool1 = icmp ne i32 %3, 0, !dbg !8838
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !8840

if.then2:                                         ; preds = %if.end
  %4 = load i32, i32* %ret, align 4, !dbg !8841
  store i32 %4, i32* %retval, align 4, !dbg !8842
  br label %return, !dbg !8842

if.end3:                                          ; preds = %if.end
  %5 = load i8, i8* %status, align 1, !dbg !8843
  %conv4 = zext i8 %5 to i32, !dbg !8843
  %and5 = and i32 %conv4, 128, !dbg !8844
  %tobool6 = icmp ne i32 %and5, 0, !dbg !8843
  %6 = zext i1 %tobool6 to i64, !dbg !8843
  %cond = select i1 %tobool6, i32 0, i32 1, !dbg !8843
  store i32 %cond, i32* %retval, align 4, !dbg !8845
  br label %return, !dbg !8845

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !8846
  ret i32 %7, !dbg !8846
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_block_checkbad(%struct.nand_chip* %chip, i64 %ofs, i32 %allowbbt) #0 !dbg !8847 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %ofs.addr = alloca i64, align 8
  %allowbbt.addr = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8850, metadata !DIExpression()), !dbg !8851
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !8852, metadata !DIExpression()), !dbg !8853
  store i32 %allowbbt, i32* %allowbbt.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %allowbbt.addr, metadata !8854, metadata !DIExpression()), !dbg !8855
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8856
  %bbt = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 16, !dbg !8858
  %1 = load i8*, i8** %bbt, align 8, !dbg !8858
  %tobool = icmp ne i8* %1, null, !dbg !8856
  br i1 %tobool, label %if.then, label %if.end, !dbg !8859

if.then:                                          ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8860
  %3 = load i64, i64* %ofs.addr, align 8, !dbg !8861
  %4 = load i32, i32* %allowbbt.addr, align 4, !dbg !8862
  %call = call i32 @nand_isbad_bbt(%struct.nand_chip* %2, i64 %3, i32 %4) #8, !dbg !8863
  store i32 %call, i32* %retval, align 4, !dbg !8864
  br label %return, !dbg !8864

if.end:                                           ; preds = %entry
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8865
  %6 = load i64, i64* %ofs.addr, align 8, !dbg !8866
  %call1 = call i32 @nand_isbad_bbm(%struct.nand_chip* %5, i64 %6) #8, !dbg !8867
  store i32 %call1, i32* %retval, align 4, !dbg !8868
  br label %return, !dbg !8868

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !8869
  ret i32 %7, !dbg !8869
}

; Function Attrs: cold noredzone
declare dso_local i32 @printk(i8*, ...) #4

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_release_device(%struct.nand_chip* %chip) #0 !dbg !8870 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8871, metadata !DIExpression()), !dbg !8872
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8873
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 30, !dbg !8874
  %1 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !8874
  %lock = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %1, i32 0, i32 0, !dbg !8875
  call void @mutex_unlock(%struct.mutex* %lock) #8, !dbg !8876
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8877
  %lock1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 26, !dbg !8878
  call void @mutex_unlock(%struct.mutex* %lock1) #8, !dbg !8879
  ret void, !dbg !8880
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @sanitize_string(i8* %s, i64 %len) #0 !dbg !8881 {
entry:
  %s.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %i = alloca i64, align 8
  store i8* %s, i8** %s.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %s.addr, metadata !8884, metadata !DIExpression()), !dbg !8885
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !8886, metadata !DIExpression()), !dbg !8887
  call void @llvm.dbg.declare(metadata i64* %i, metadata !8888, metadata !DIExpression()), !dbg !8889
  %0 = load i8*, i8** %s.addr, align 8, !dbg !8890
  %1 = load i64, i64* %len.addr, align 8, !dbg !8891
  %sub = sub i64 %1, 1, !dbg !8892
  %arrayidx = getelementptr i8, i8* %0, i64 %sub, !dbg !8890
  store i8 0, i8* %arrayidx, align 1, !dbg !8893
  store i64 0, i64* %i, align 8, !dbg !8894
  br label %for.cond, !dbg !8896

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load i64, i64* %i, align 8, !dbg !8897
  %3 = load i64, i64* %len.addr, align 8, !dbg !8899
  %sub1 = sub i64 %3, 1, !dbg !8900
  %cmp = icmp ult i64 %2, %sub1, !dbg !8901
  br i1 %cmp, label %for.body, label %for.end, !dbg !8902

for.body:                                         ; preds = %for.cond
  %4 = load i8*, i8** %s.addr, align 8, !dbg !8903
  %5 = load i64, i64* %i, align 8, !dbg !8906
  %arrayidx2 = getelementptr i8, i8* %4, i64 %5, !dbg !8903
  %6 = load i8, i8* %arrayidx2, align 1, !dbg !8903
  %conv = zext i8 %6 to i32, !dbg !8903
  %cmp3 = icmp slt i32 %conv, 32, !dbg !8907
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !8908

lor.lhs.false:                                    ; preds = %for.body
  %7 = load i8*, i8** %s.addr, align 8, !dbg !8909
  %8 = load i64, i64* %i, align 8, !dbg !8910
  %arrayidx5 = getelementptr i8, i8* %7, i64 %8, !dbg !8909
  %9 = load i8, i8* %arrayidx5, align 1, !dbg !8909
  %conv6 = zext i8 %9 to i32, !dbg !8909
  %cmp7 = icmp sgt i32 %conv6, 127, !dbg !8911
  br i1 %cmp7, label %if.then, label %if.end, !dbg !8912

if.then:                                          ; preds = %lor.lhs.false, %for.body
  %10 = load i8*, i8** %s.addr, align 8, !dbg !8913
  %11 = load i64, i64* %i, align 8, !dbg !8914
  %arrayidx9 = getelementptr i8, i8* %10, i64 %11, !dbg !8913
  store i8 63, i8* %arrayidx9, align 1, !dbg !8915
  br label %if.end, !dbg !8913

if.end:                                           ; preds = %if.then, %lor.lhs.false
  br label %for.inc, !dbg !8916

for.inc:                                          ; preds = %if.end
  %12 = load i64, i64* %i, align 8, !dbg !8917
  %inc = add i64 %12, 1, !dbg !8917
  store i64 %inc, i64* %i, align 8, !dbg !8917
  br label %for.cond, !dbg !8918, !llvm.loop !8919

for.end:                                          ; preds = %for.cond
  %13 = load i8*, i8** %s.addr, align 8, !dbg !8921
  %call = call i8* @strim(i8* %13) #8, !dbg !8922
  ret void, !dbg !8923
}

; Function Attrs: noredzone
declare dso_local i8* @strim(i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @nand_decode_ext_id(%struct.nand_chip* %chip) #0 !dbg !8924 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %memorg = alloca %struct.nand_memory_organization*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %extid = alloca i32, align 4
  %id_data = alloca i8*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !8925, metadata !DIExpression()), !dbg !8926
  call void @llvm.dbg.declare(metadata %struct.nand_memory_organization** %memorg, metadata !8927, metadata !DIExpression()), !dbg !8929
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !8930, metadata !DIExpression()), !dbg !8931
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8932
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !8933
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !8931
  call void @llvm.dbg.declare(metadata i32* %extid, metadata !8934, metadata !DIExpression()), !dbg !8935
  call void @llvm.dbg.declare(metadata i8** %id_data, metadata !8936, metadata !DIExpression()), !dbg !8937
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8938
  %id = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 1, !dbg !8939
  %data = getelementptr inbounds %struct.nand_id, %struct.nand_id* %id, i32 0, i32 0, !dbg !8940
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %data, i64 0, i64 0, !dbg !8938
  store i8* %arraydecay, i8** %id_data, align 8, !dbg !8937
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !8941
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 0, !dbg !8942
  %call1 = call %struct.nand_memory_organization* @nanddev_get_memorg(%struct.nand_device* %base) #8, !dbg !8943
  store %struct.nand_memory_organization* %call1, %struct.nand_memory_organization** %memorg, align 8, !dbg !8944
  %3 = load i8*, i8** %id_data, align 8, !dbg !8945
  %arrayidx = getelementptr i8, i8* %3, i64 2, !dbg !8945
  %4 = load i8, i8* %arrayidx, align 1, !dbg !8945
  %call2 = call i32 @nand_get_bits_per_cell(i8 zeroext %4) #8, !dbg !8946
  %5 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !8947
  %bits_per_cell = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %5, i32 0, i32 0, !dbg !8948
  store i32 %call2, i32* %bits_per_cell, align 4, !dbg !8949
  %6 = load i8*, i8** %id_data, align 8, !dbg !8950
  %arrayidx3 = getelementptr i8, i8* %6, i64 3, !dbg !8950
  %7 = load i8, i8* %arrayidx3, align 1, !dbg !8950
  %conv = zext i8 %7 to i32, !dbg !8950
  store i32 %conv, i32* %extid, align 4, !dbg !8951
  %8 = load i32, i32* %extid, align 4, !dbg !8952
  %and = and i32 %8, 3, !dbg !8953
  %shl = shl i32 1024, %and, !dbg !8954
  %9 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !8955
  %pagesize = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %9, i32 0, i32 1, !dbg !8956
  store i32 %shl, i32* %pagesize, align 4, !dbg !8957
  %10 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !8958
  %pagesize4 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %10, i32 0, i32 1, !dbg !8959
  %11 = load i32, i32* %pagesize4, align 4, !dbg !8959
  %12 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8960
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %12, i32 0, i32 4, !dbg !8961
  store i32 %11, i32* %writesize, align 4, !dbg !8962
  %13 = load i32, i32* %extid, align 4, !dbg !8963
  %shr = ashr i32 %13, 2, !dbg !8963
  store i32 %shr, i32* %extid, align 4, !dbg !8963
  %14 = load i32, i32* %extid, align 4, !dbg !8964
  %and5 = and i32 %14, 1, !dbg !8965
  %shl6 = shl i32 8, %and5, !dbg !8966
  %15 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8967
  %writesize7 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %15, i32 0, i32 4, !dbg !8968
  %16 = load i32, i32* %writesize7, align 4, !dbg !8968
  %shr8 = lshr i32 %16, 9, !dbg !8969
  %mul = mul i32 %shl6, %shr8, !dbg !8970
  %17 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !8971
  %oobsize = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %17, i32 0, i32 2, !dbg !8972
  store i32 %mul, i32* %oobsize, align 4, !dbg !8973
  %18 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !8974
  %oobsize9 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %18, i32 0, i32 2, !dbg !8975
  %19 = load i32, i32* %oobsize9, align 4, !dbg !8975
  %20 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8976
  %oobsize10 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %20, i32 0, i32 6, !dbg !8977
  store i32 %19, i32* %oobsize10, align 4, !dbg !8978
  %21 = load i32, i32* %extid, align 4, !dbg !8979
  %shr11 = ashr i32 %21, 2, !dbg !8979
  store i32 %shr11, i32* %extid, align 4, !dbg !8979
  %22 = load i32, i32* %extid, align 4, !dbg !8980
  %and12 = and i32 %22, 3, !dbg !8981
  %shl13 = shl i32 65536, %and12, !dbg !8982
  %23 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !8983
  %pagesize14 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %23, i32 0, i32 1, !dbg !8984
  %24 = load i32, i32* %pagesize14, align 4, !dbg !8984
  %div = udiv i32 %shl13, %24, !dbg !8985
  %25 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !8986
  %pages_per_eraseblock = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %25, i32 0, i32 3, !dbg !8987
  store i32 %div, i32* %pages_per_eraseblock, align 4, !dbg !8988
  %26 = load i32, i32* %extid, align 4, !dbg !8989
  %and15 = and i32 %26, 3, !dbg !8990
  %shl16 = shl i32 65536, %and15, !dbg !8991
  %27 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !8992
  %erasesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %27, i32 0, i32 3, !dbg !8993
  store i32 %shl16, i32* %erasesize, align 8, !dbg !8994
  %28 = load i32, i32* %extid, align 4, !dbg !8995
  %shr17 = ashr i32 %28, 2, !dbg !8995
  store i32 %shr17, i32* %extid, align 4, !dbg !8995
  %29 = load i32, i32* %extid, align 4, !dbg !8996
  %and18 = and i32 %29, 1, !dbg !8998
  %tobool = icmp ne i32 %and18, 0, !dbg !8998
  br i1 %tobool, label %if.then, label %if.end, !dbg !8999

if.then:                                          ; preds = %entry
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9000
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %30, i32 0, i32 6, !dbg !9001
  %31 = load i32, i32* %options, align 8, !dbg !9002
  %conv19 = zext i32 %31 to i64, !dbg !9002
  %or = or i64 %conv19, 2, !dbg !9002
  %conv20 = trunc i64 %or to i32, !dbg !9002
  store i32 %conv20, i32* %options, align 8, !dbg !9002
  br label %if.end, !dbg !9000

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !9003
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.nand_memory_organization* @nanddev_get_memorg(%struct.nand_device* %nand) #0 !dbg !9004 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !9007, metadata !DIExpression()), !dbg !9008
  %0 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !9009
  %memorg = getelementptr inbounds %struct.nand_device, %struct.nand_device* %0, i32 0, i32 1, !dbg !9010
  ret %struct.nand_memory_organization* %memorg, !dbg !9011
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_get_bits_per_cell(i8 zeroext %cellinfo) #0 !dbg !9012 {
entry:
  %cellinfo.addr = alloca i8, align 1
  %bits = alloca i32, align 4
  store i8 %cellinfo, i8* %cellinfo.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %cellinfo.addr, metadata !9015, metadata !DIExpression()), !dbg !9016
  call void @llvm.dbg.declare(metadata i32* %bits, metadata !9017, metadata !DIExpression()), !dbg !9018
  %0 = load i8, i8* %cellinfo.addr, align 1, !dbg !9019
  %conv = zext i8 %0 to i32, !dbg !9019
  %and = and i32 %conv, 12, !dbg !9020
  store i32 %and, i32* %bits, align 4, !dbg !9021
  %1 = load i32, i32* %bits, align 4, !dbg !9022
  %shr = ashr i32 %1, 2, !dbg !9022
  store i32 %shr, i32* %bits, align 4, !dbg !9022
  %2 = load i32, i32* %bits, align 4, !dbg !9023
  %add = add i32 %2, 1, !dbg !9024
  ret i32 %add, !dbg !9025
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_ecc_choose_conf(%struct.nand_chip* %chip, %struct.nand_ecc_caps* %caps, i32 %oobavail) #0 !dbg !9026 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %caps.addr = alloca %struct.nand_ecc_caps*, align 8
  %oobavail.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %nanddev = alloca %struct.nand_device*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !9048, metadata !DIExpression()), !dbg !9049
  store %struct.nand_ecc_caps* %caps, %struct.nand_ecc_caps** %caps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_caps** %caps.addr, metadata !9050, metadata !DIExpression()), !dbg !9051
  store i32 %oobavail, i32* %oobavail.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oobavail.addr, metadata !9052, metadata !DIExpression()), !dbg !9053
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !9054, metadata !DIExpression()), !dbg !9055
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9056
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !9057
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !9055
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nanddev, metadata !9058, metadata !DIExpression()), !dbg !9059
  %1 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9060
  %call1 = call %struct.nand_device* @mtd_to_nanddev(%struct.mtd_info* %1) #8, !dbg !9061
  store %struct.nand_device* %call1, %struct.nand_device** %nanddev, align 8, !dbg !9059
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !9062, metadata !DIExpression()), !dbg !9065
  %2 = load i32, i32* %oobavail.addr, align 4, !dbg !9065
  %cmp = icmp slt i32 %2, 0, !dbg !9065
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !9065

lor.rhs:                                          ; preds = %entry
  %3 = load i32, i32* %oobavail.addr, align 4, !dbg !9065
  %4 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9065
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %4, i32 0, i32 6, !dbg !9065
  %5 = load i32, i32* %oobsize, align 4, !dbg !9065
  %cmp2 = icmp ugt i32 %3, %5, !dbg !9065
  br label %lor.end, !dbg !9065

lor.end:                                          ; preds = %lor.rhs, %entry
  %6 = phi i1 [ true, %entry ], [ %cmp2, %lor.rhs ]
  %lnot = xor i1 %6, true, !dbg !9065
  %lnot3 = xor i1 %lnot, true, !dbg !9065
  %lnot.ext = zext i1 %lnot3 to i32, !dbg !9065
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !9065
  %7 = load i32, i32* %__ret_warn_on, align 4, !dbg !9066
  %tobool = icmp ne i32 %7, 0, !dbg !9066
  %lnot4 = xor i1 %tobool, true, !dbg !9066
  %lnot6 = xor i1 %lnot4, true, !dbg !9066
  %lnot.ext7 = zext i1 %lnot6 to i32, !dbg !9066
  %conv = sext i32 %lnot.ext7 to i64, !dbg !9066
  %tobool8 = icmp ne i64 %conv, 0, !dbg !9066
  br i1 %tobool8, label %if.then, label %if.end, !dbg !9065

if.then:                                          ; preds = %lor.end
  br label %do.body, !dbg !9066

do.body:                                          ; preds = %if.then
  br label %do.body9, !dbg !9068

do.body9:                                         ; preds = %do.body
  br label %do.end, !dbg !9070

do.end:                                           ; preds = %do.body9
  br label %do.body10, !dbg !9068

do.body10:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5538, i32 2305, i64 12) #9, !dbg !9072, !srcloc !9074
  br label %do.end11, !dbg !9072

do.end11:                                         ; preds = %do.body10
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 298) #9, !dbg !9075, !srcloc !9077
  br label %do.body12, !dbg !9068

do.body12:                                        ; preds = %do.end11
  br label %do.end13, !dbg !9078

do.end13:                                         ; preds = %do.body12
  br label %do.end14, !dbg !9068

do.end14:                                         ; preds = %do.end13
  br label %if.end, !dbg !9068

if.end:                                           ; preds = %do.end14, %lor.end
  %8 = load i32, i32* %__ret_warn_on, align 4, !dbg !9065
  %tobool15 = icmp ne i32 %8, 0, !dbg !9065
  %lnot16 = xor i1 %tobool15, true, !dbg !9065
  %lnot18 = xor i1 %lnot16, true, !dbg !9065
  %lnot.ext19 = zext i1 %lnot18 to i32, !dbg !9065
  %conv20 = sext i32 %lnot.ext19 to i64, !dbg !9065
  store i64 %conv20, i64* %tmp, align 8, !dbg !9066
  %9 = load i64, i64* %tmp, align 8, !dbg !9065
  %tobool21 = icmp ne i64 %9, 0, !dbg !9080
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !9081

if.then22:                                        ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !9082
  br label %return, !dbg !9082

if.end23:                                         ; preds = %if.end
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9083
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 31, !dbg !9085
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !9086
  %11 = load i32, i32* %size, align 8, !dbg !9086
  %tobool24 = icmp ne i32 %11, 0, !dbg !9083
  br i1 %tobool24, label %land.lhs.true, label %if.end29, !dbg !9087

land.lhs.true:                                    ; preds = %if.end23
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9088
  %ecc25 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %12, i32 0, i32 31, !dbg !9089
  %strength = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc25, i32 0, i32 7, !dbg !9090
  %13 = load i32, i32* %strength, align 4, !dbg !9090
  %tobool26 = icmp ne i32 %13, 0, !dbg !9088
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !9091

if.then27:                                        ; preds = %land.lhs.true
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9092
  %15 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9093
  %16 = load i32, i32* %oobavail.addr, align 4, !dbg !9094
  %call28 = call i32 @nand_check_ecc_caps(%struct.nand_chip* %14, %struct.nand_ecc_caps* %15, i32 %16) #8, !dbg !9095
  store i32 %call28, i32* %retval, align 4, !dbg !9096
  br label %return, !dbg !9096

if.end29:                                         ; preds = %land.lhs.true, %if.end23
  %17 = load %struct.nand_device*, %struct.nand_device** %nanddev, align 8, !dbg !9097
  %ecc30 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %17, i32 0, i32 2, !dbg !9099
  %user_conf = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc30, i32 0, i32 2, !dbg !9100
  %flags = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %user_conf, i32 0, i32 5, !dbg !9101
  %18 = load i32, i32* %flags, align 4, !dbg !9101
  %conv31 = zext i32 %18 to i64, !dbg !9097
  %and = and i64 %conv31, 1, !dbg !9102
  %tobool32 = icmp ne i64 %and, 0, !dbg !9102
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !9103

if.then33:                                        ; preds = %if.end29
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9104
  %20 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9105
  %21 = load i32, i32* %oobavail.addr, align 4, !dbg !9106
  %call34 = call i32 @nand_maximize_ecc(%struct.nand_chip* %19, %struct.nand_ecc_caps* %20, i32 %21) #8, !dbg !9107
  store i32 %call34, i32* %retval, align 4, !dbg !9108
  br label %return, !dbg !9108

if.end35:                                         ; preds = %if.end29
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9109
  %23 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9111
  %24 = load i32, i32* %oobavail.addr, align 4, !dbg !9112
  %call36 = call i32 @nand_match_ecc_req(%struct.nand_chip* %22, %struct.nand_ecc_caps* %23, i32 %24) #8, !dbg !9113
  %tobool37 = icmp ne i32 %call36, 0, !dbg !9113
  br i1 %tobool37, label %if.end39, label %if.then38, !dbg !9114

if.then38:                                        ; preds = %if.end35
  store i32 0, i32* %retval, align 4, !dbg !9115
  br label %return, !dbg !9115

if.end39:                                         ; preds = %if.end35
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9116
  %26 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9117
  %27 = load i32, i32* %oobavail.addr, align 4, !dbg !9118
  %call40 = call i32 @nand_maximize_ecc(%struct.nand_chip* %25, %struct.nand_ecc_caps* %26, i32 %27) #8, !dbg !9119
  store i32 %call40, i32* %retval, align 4, !dbg !9120
  br label %return, !dbg !9120

return:                                           ; preds = %if.end39, %if.then38, %if.then33, %if.then27, %if.then22
  %28 = load i32, i32* %retval, align 4, !dbg !9121
  ret i32 %28, !dbg !9121
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.nand_device* @mtd_to_nanddev(%struct.mtd_info* %mtd) #0 !dbg !9122 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %__mptr = alloca i8*, align 8
  %tmp = alloca %struct.nand_device*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !9125, metadata !DIExpression()), !dbg !9126
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !9127, metadata !DIExpression()), !dbg !9129
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !9129
  %1 = bitcast %struct.mtd_info* %0 to i8*, !dbg !9129
  store i8* %1, i8** %__mptr, align 8, !dbg !9129
  br label %do.body, !dbg !9129

do.body:                                          ; preds = %entry
  br label %do.end, !dbg !9130

do.end:                                           ; preds = %do.body
  %2 = load i8*, i8** %__mptr, align 8, !dbg !9129
  %add.ptr = getelementptr i8, i8* %2, i64 0, !dbg !9129
  %3 = bitcast i8* %add.ptr to %struct.nand_device*, !dbg !9129
  store %struct.nand_device* %3, %struct.nand_device** %tmp, align 8, !dbg !9130
  %4 = load %struct.nand_device*, %struct.nand_device** %tmp, align 8, !dbg !9129
  ret %struct.nand_device* %4, !dbg !9132
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_check_ecc_caps(%struct.nand_chip* %chip, %struct.nand_ecc_caps* %caps, i32 %oobavail) #0 !dbg !9133 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %caps.addr = alloca %struct.nand_ecc_caps*, align 8
  %oobavail.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %stepinfo = alloca %struct.nand_ecc_step_info*, align 8
  %preset_step = alloca i32, align 4
  %preset_strength = alloca i32, align 4
  %ecc_bytes = alloca i32, align 4
  %nsteps = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !9134, metadata !DIExpression()), !dbg !9135
  store %struct.nand_ecc_caps* %caps, %struct.nand_ecc_caps** %caps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_caps** %caps.addr, metadata !9136, metadata !DIExpression()), !dbg !9137
  store i32 %oobavail, i32* %oobavail.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oobavail.addr, metadata !9138, metadata !DIExpression()), !dbg !9139
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !9140, metadata !DIExpression()), !dbg !9141
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9142
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !9143
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !9141
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_step_info** %stepinfo, metadata !9144, metadata !DIExpression()), !dbg !9145
  call void @llvm.dbg.declare(metadata i32* %preset_step, metadata !9146, metadata !DIExpression()), !dbg !9147
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9148
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !9149
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !9150
  %2 = load i32, i32* %size, align 8, !dbg !9150
  store i32 %2, i32* %preset_step, align 4, !dbg !9147
  call void @llvm.dbg.declare(metadata i32* %preset_strength, metadata !9151, metadata !DIExpression()), !dbg !9152
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9153
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !9154
  %strength = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 7, !dbg !9155
  %4 = load i32, i32* %strength, align 4, !dbg !9155
  store i32 %4, i32* %preset_strength, align 4, !dbg !9152
  call void @llvm.dbg.declare(metadata i32* %ecc_bytes, metadata !9156, metadata !DIExpression()), !dbg !9157
  call void @llvm.dbg.declare(metadata i32* %nsteps, metadata !9158, metadata !DIExpression()), !dbg !9159
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9160
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %5, i32 0, i32 4, !dbg !9161
  %6 = load i32, i32* %writesize, align 4, !dbg !9161
  %7 = load i32, i32* %preset_step, align 4, !dbg !9162
  %div = udiv i32 %6, %7, !dbg !9163
  store i32 %div, i32* %nsteps, align 4, !dbg !9159
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9164, metadata !DIExpression()), !dbg !9165
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9166, metadata !DIExpression()), !dbg !9167
  store i32 0, i32* %i, align 4, !dbg !9168
  br label %for.cond, !dbg !9170

for.cond:                                         ; preds = %for.inc42, %entry
  %8 = load i32, i32* %i, align 4, !dbg !9171
  %9 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9173
  %nstepinfos = getelementptr inbounds %struct.nand_ecc_caps, %struct.nand_ecc_caps* %9, i32 0, i32 1, !dbg !9174
  %10 = load i32, i32* %nstepinfos, align 8, !dbg !9174
  %cmp = icmp slt i32 %8, %10, !dbg !9175
  br i1 %cmp, label %for.body, label %for.end44, !dbg !9176

for.body:                                         ; preds = %for.cond
  %11 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9177
  %stepinfos = getelementptr inbounds %struct.nand_ecc_caps, %struct.nand_ecc_caps* %11, i32 0, i32 0, !dbg !9179
  %12 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfos, align 8, !dbg !9179
  %13 = load i32, i32* %i, align 4, !dbg !9180
  %idxprom = sext i32 %13 to i64, !dbg !9177
  %arrayidx = getelementptr %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %12, i64 %idxprom, !dbg !9177
  store %struct.nand_ecc_step_info* %arrayidx, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9181
  %14 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9182
  %stepsize = getelementptr inbounds %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %14, i32 0, i32 0, !dbg !9184
  %15 = load i32, i32* %stepsize, align 8, !dbg !9184
  %16 = load i32, i32* %preset_step, align 4, !dbg !9185
  %cmp2 = icmp ne i32 %15, %16, !dbg !9186
  br i1 %cmp2, label %if.then, label %if.end, !dbg !9187

if.then:                                          ; preds = %for.body
  br label %for.inc42, !dbg !9188

if.end:                                           ; preds = %for.body
  store i32 0, i32* %j, align 4, !dbg !9189
  br label %for.cond3, !dbg !9191

for.cond3:                                        ; preds = %for.inc, %if.end
  %17 = load i32, i32* %j, align 4, !dbg !9192
  %18 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9194
  %nstrengths = getelementptr inbounds %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %18, i32 0, i32 2, !dbg !9195
  %19 = load i32, i32* %nstrengths, align 8, !dbg !9195
  %cmp4 = icmp slt i32 %17, %19, !dbg !9196
  br i1 %cmp4, label %for.body5, label %for.end, !dbg !9197

for.body5:                                        ; preds = %for.cond3
  %20 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9198
  %strengths = getelementptr inbounds %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %20, i32 0, i32 1, !dbg !9201
  %21 = load i32*, i32** %strengths, align 8, !dbg !9201
  %22 = load i32, i32* %j, align 4, !dbg !9202
  %idxprom6 = sext i32 %22 to i64, !dbg !9198
  %arrayidx7 = getelementptr i32, i32* %21, i64 %idxprom6, !dbg !9198
  %23 = load i32, i32* %arrayidx7, align 4, !dbg !9198
  %24 = load i32, i32* %preset_strength, align 4, !dbg !9203
  %cmp8 = icmp ne i32 %23, %24, !dbg !9204
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !9205

if.then9:                                         ; preds = %for.body5
  br label %for.inc, !dbg !9206

if.end10:                                         ; preds = %for.body5
  %25 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9207
  %calc_ecc_bytes = getelementptr inbounds %struct.nand_ecc_caps, %struct.nand_ecc_caps* %25, i32 0, i32 2, !dbg !9208
  %26 = load i32 (i32, i32)*, i32 (i32, i32)** %calc_ecc_bytes, align 8, !dbg !9208
  %27 = load i32, i32* %preset_step, align 4, !dbg !9209
  %28 = load i32, i32* %preset_strength, align 4, !dbg !9210
  %call11 = call i32 %26(i32 %27, i32 %28) #8, !dbg !9207
  store i32 %call11, i32* %ecc_bytes, align 4, !dbg !9211
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !9212, metadata !DIExpression()), !dbg !9215
  %29 = load i32, i32* %ecc_bytes, align 4, !dbg !9215
  %cmp12 = icmp slt i32 %29, 0, !dbg !9215
  %lnot = xor i1 %cmp12, true, !dbg !9215
  %lnot13 = xor i1 %lnot, true, !dbg !9215
  %lnot.ext = zext i1 %lnot13 to i32, !dbg !9215
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !9215
  %30 = load i32, i32* %__ret_warn_on, align 4, !dbg !9216
  %tobool = icmp ne i32 %30, 0, !dbg !9216
  %lnot14 = xor i1 %tobool, true, !dbg !9216
  %lnot16 = xor i1 %lnot14, true, !dbg !9216
  %lnot.ext17 = zext i1 %lnot16 to i32, !dbg !9216
  %conv = sext i32 %lnot.ext17 to i64, !dbg !9216
  %tobool18 = icmp ne i64 %conv, 0, !dbg !9216
  br i1 %tobool18, label %if.then19, label %if.end26, !dbg !9215

if.then19:                                        ; preds = %if.end10
  br label %do.body, !dbg !9216

do.body:                                          ; preds = %if.then19
  br label %do.body20, !dbg !9218

do.body20:                                        ; preds = %do.body
  br label %do.end, !dbg !9220

do.end:                                           ; preds = %do.body20
  br label %do.body21, !dbg !9218

do.body21:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5339, i32 2307, i64 12) #9, !dbg !9222, !srcloc !9224
  br label %do.end22, !dbg !9222

do.end22:                                         ; preds = %do.body21
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 295) #9, !dbg !9225, !srcloc !9227
  br label %do.body23, !dbg !9218

do.body23:                                        ; preds = %do.end22
  br label %do.end24, !dbg !9228

do.end24:                                         ; preds = %do.body23
  br label %do.end25, !dbg !9218

do.end25:                                         ; preds = %do.end24
  br label %if.end26, !dbg !9218

if.end26:                                         ; preds = %do.end25, %if.end10
  %31 = load i32, i32* %__ret_warn_on, align 4, !dbg !9215
  %tobool27 = icmp ne i32 %31, 0, !dbg !9215
  %lnot28 = xor i1 %tobool27, true, !dbg !9215
  %lnot30 = xor i1 %lnot28, true, !dbg !9215
  %lnot.ext31 = zext i1 %lnot30 to i32, !dbg !9215
  %conv32 = sext i32 %lnot.ext31 to i64, !dbg !9215
  store i64 %conv32, i64* %tmp, align 8, !dbg !9216
  %32 = load i64, i64* %tmp, align 8, !dbg !9215
  %tobool33 = icmp ne i64 %32, 0, !dbg !9230
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !9231

if.then34:                                        ; preds = %if.end26
  %33 = load i32, i32* %ecc_bytes, align 4, !dbg !9232
  store i32 %33, i32* %retval, align 4, !dbg !9233
  br label %return, !dbg !9233

if.end35:                                         ; preds = %if.end26
  %34 = load i32, i32* %ecc_bytes, align 4, !dbg !9234
  %35 = load i32, i32* %nsteps, align 4, !dbg !9236
  %mul = mul i32 %34, %35, !dbg !9237
  %36 = load i32, i32* %oobavail.addr, align 4, !dbg !9238
  %cmp36 = icmp sgt i32 %mul, %36, !dbg !9239
  br i1 %cmp36, label %if.then38, label %if.end40, !dbg !9240

if.then38:                                        ; preds = %if.end35
  %37 = load i32, i32* %preset_step, align 4, !dbg !9241
  %38 = load i32, i32* %preset_strength, align 4, !dbg !9241
  %call39 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.5, i64 0, i64 0), i32 %37, i32 %38) #12, !dbg !9241
  store i32 -28, i32* %retval, align 4, !dbg !9243
  br label %return, !dbg !9243

if.end40:                                         ; preds = %if.end35
  %39 = load i32, i32* %ecc_bytes, align 4, !dbg !9244
  %40 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9245
  %ecc41 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %40, i32 0, i32 31, !dbg !9246
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc41, i32 0, i32 5, !dbg !9247
  store i32 %39, i32* %bytes, align 4, !dbg !9248
  store i32 0, i32* %retval, align 4, !dbg !9249
  br label %return, !dbg !9249

for.inc:                                          ; preds = %if.then9
  %41 = load i32, i32* %j, align 4, !dbg !9250
  %inc = add i32 %41, 1, !dbg !9250
  store i32 %inc, i32* %j, align 4, !dbg !9250
  br label %for.cond3, !dbg !9251, !llvm.loop !9252

for.end:                                          ; preds = %for.cond3
  br label %for.inc42, !dbg !9254

for.inc42:                                        ; preds = %for.end, %if.then
  %42 = load i32, i32* %i, align 4, !dbg !9255
  %inc43 = add i32 %42, 1, !dbg !9255
  store i32 %inc43, i32* %i, align 4, !dbg !9255
  br label %for.cond, !dbg !9256, !llvm.loop !9257

for.end44:                                        ; preds = %for.cond
  %43 = load i32, i32* %preset_step, align 4, !dbg !9259
  %44 = load i32, i32* %preset_strength, align 4, !dbg !9259
  %call45 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.6, i64 0, i64 0), i32 %43, i32 %44) #12, !dbg !9259
  store i32 -524, i32* %retval, align 4, !dbg !9260
  br label %return, !dbg !9260

return:                                           ; preds = %for.end44, %if.end40, %if.then38, %if.then34
  %45 = load i32, i32* %retval, align 4, !dbg !9261
  ret i32 %45, !dbg !9261
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_maximize_ecc(%struct.nand_chip* %chip, %struct.nand_ecc_caps* %caps, i32 %oobavail) #0 !dbg !9262 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %caps.addr = alloca %struct.nand_ecc_caps*, align 8
  %oobavail.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %stepinfo = alloca %struct.nand_ecc_step_info*, align 8
  %step_size = alloca i32, align 4
  %strength = alloca i32, align 4
  %nsteps = alloca i32, align 4
  %ecc_bytes = alloca i32, align 4
  %corr = alloca i32, align 4
  %best_corr = alloca i32, align 4
  %best_step = alloca i32, align 4
  %best_strength = alloca i32, align 4
  %best_ecc_bytes = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !9263, metadata !DIExpression()), !dbg !9264
  store %struct.nand_ecc_caps* %caps, %struct.nand_ecc_caps** %caps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_caps** %caps.addr, metadata !9265, metadata !DIExpression()), !dbg !9266
  store i32 %oobavail, i32* %oobavail.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oobavail.addr, metadata !9267, metadata !DIExpression()), !dbg !9268
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !9269, metadata !DIExpression()), !dbg !9270
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9271
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !9272
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !9270
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_step_info** %stepinfo, metadata !9273, metadata !DIExpression()), !dbg !9274
  call void @llvm.dbg.declare(metadata i32* %step_size, metadata !9275, metadata !DIExpression()), !dbg !9276
  call void @llvm.dbg.declare(metadata i32* %strength, metadata !9277, metadata !DIExpression()), !dbg !9278
  call void @llvm.dbg.declare(metadata i32* %nsteps, metadata !9279, metadata !DIExpression()), !dbg !9280
  call void @llvm.dbg.declare(metadata i32* %ecc_bytes, metadata !9281, metadata !DIExpression()), !dbg !9282
  call void @llvm.dbg.declare(metadata i32* %corr, metadata !9283, metadata !DIExpression()), !dbg !9284
  call void @llvm.dbg.declare(metadata i32* %best_corr, metadata !9285, metadata !DIExpression()), !dbg !9286
  store i32 0, i32* %best_corr, align 4, !dbg !9286
  call void @llvm.dbg.declare(metadata i32* %best_step, metadata !9287, metadata !DIExpression()), !dbg !9288
  store i32 0, i32* %best_step, align 4, !dbg !9288
  call void @llvm.dbg.declare(metadata i32* %best_strength, metadata !9289, metadata !DIExpression()), !dbg !9290
  call void @llvm.dbg.declare(metadata i32* %best_ecc_bytes, metadata !9291, metadata !DIExpression()), !dbg !9292
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9293, metadata !DIExpression()), !dbg !9294
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9295, metadata !DIExpression()), !dbg !9296
  store i32 0, i32* %i, align 4, !dbg !9297
  br label %for.cond, !dbg !9299

for.cond:                                         ; preds = %for.inc53, %entry
  %1 = load i32, i32* %i, align 4, !dbg !9300
  %2 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9302
  %nstepinfos = getelementptr inbounds %struct.nand_ecc_caps, %struct.nand_ecc_caps* %2, i32 0, i32 1, !dbg !9303
  %3 = load i32, i32* %nstepinfos, align 8, !dbg !9303
  %cmp = icmp slt i32 %1, %3, !dbg !9304
  br i1 %cmp, label %for.body, label %for.end55, !dbg !9305

for.body:                                         ; preds = %for.cond
  %4 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9306
  %stepinfos = getelementptr inbounds %struct.nand_ecc_caps, %struct.nand_ecc_caps* %4, i32 0, i32 0, !dbg !9308
  %5 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfos, align 8, !dbg !9308
  %6 = load i32, i32* %i, align 4, !dbg !9309
  %idxprom = sext i32 %6 to i64, !dbg !9306
  %arrayidx = getelementptr %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %5, i64 %idxprom, !dbg !9306
  store %struct.nand_ecc_step_info* %arrayidx, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9310
  %7 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9311
  %stepsize = getelementptr inbounds %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %7, i32 0, i32 0, !dbg !9312
  %8 = load i32, i32* %stepsize, align 8, !dbg !9312
  store i32 %8, i32* %step_size, align 4, !dbg !9313
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9314
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 31, !dbg !9316
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !9317
  %10 = load i32, i32* %size, align 8, !dbg !9317
  %tobool = icmp ne i32 %10, 0, !dbg !9314
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9318

land.lhs.true:                                    ; preds = %for.body
  %11 = load i32, i32* %step_size, align 4, !dbg !9319
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9320
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %12, i32 0, i32 31, !dbg !9321
  %size2 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 4, !dbg !9322
  %13 = load i32, i32* %size2, align 8, !dbg !9322
  %cmp3 = icmp ne i32 %11, %13, !dbg !9323
  br i1 %cmp3, label %if.then, label %if.end, !dbg !9324

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc53, !dbg !9325

if.end:                                           ; preds = %land.lhs.true, %for.body
  store i32 0, i32* %j, align 4, !dbg !9326
  br label %for.cond4, !dbg !9328

for.cond4:                                        ; preds = %for.inc, %if.end
  %14 = load i32, i32* %j, align 4, !dbg !9329
  %15 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9331
  %nstrengths = getelementptr inbounds %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %15, i32 0, i32 2, !dbg !9332
  %16 = load i32, i32* %nstrengths, align 8, !dbg !9332
  %cmp5 = icmp slt i32 %14, %16, !dbg !9333
  br i1 %cmp5, label %for.body6, label %for.end, !dbg !9334

for.body6:                                        ; preds = %for.cond4
  %17 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9335
  %strengths = getelementptr inbounds %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %17, i32 0, i32 1, !dbg !9337
  %18 = load i32*, i32** %strengths, align 8, !dbg !9337
  %19 = load i32, i32* %j, align 4, !dbg !9338
  %idxprom7 = sext i32 %19 to i64, !dbg !9335
  %arrayidx8 = getelementptr i32, i32* %18, i64 %idxprom7, !dbg !9335
  %20 = load i32, i32* %arrayidx8, align 4, !dbg !9335
  store i32 %20, i32* %strength, align 4, !dbg !9339
  %21 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9340
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %21, i32 0, i32 4, !dbg !9342
  %22 = load i32, i32* %writesize, align 4, !dbg !9342
  %23 = load i32, i32* %step_size, align 4, !dbg !9343
  %rem = urem i32 %22, %23, !dbg !9344
  %tobool9 = icmp ne i32 %rem, 0, !dbg !9344
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !9345

if.then10:                                        ; preds = %for.body6
  br label %for.inc, !dbg !9346

if.end11:                                         ; preds = %for.body6
  %24 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9347
  %writesize12 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %24, i32 0, i32 4, !dbg !9348
  %25 = load i32, i32* %writesize12, align 4, !dbg !9348
  %26 = load i32, i32* %step_size, align 4, !dbg !9349
  %div = udiv i32 %25, %26, !dbg !9350
  store i32 %div, i32* %nsteps, align 4, !dbg !9351
  %27 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9352
  %calc_ecc_bytes = getelementptr inbounds %struct.nand_ecc_caps, %struct.nand_ecc_caps* %27, i32 0, i32 2, !dbg !9353
  %28 = load i32 (i32, i32)*, i32 (i32, i32)** %calc_ecc_bytes, align 8, !dbg !9353
  %29 = load i32, i32* %step_size, align 4, !dbg !9354
  %30 = load i32, i32* %strength, align 4, !dbg !9355
  %call13 = call i32 %28(i32 %29, i32 %30) #8, !dbg !9352
  store i32 %call13, i32* %ecc_bytes, align 4, !dbg !9356
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !9357, metadata !DIExpression()), !dbg !9360
  %31 = load i32, i32* %ecc_bytes, align 4, !dbg !9360
  %cmp14 = icmp slt i32 %31, 0, !dbg !9360
  %lnot = xor i1 %cmp14, true, !dbg !9360
  %lnot15 = xor i1 %lnot, true, !dbg !9360
  %lnot.ext = zext i1 %lnot15 to i32, !dbg !9360
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !9360
  %32 = load i32, i32* %__ret_warn_on, align 4, !dbg !9361
  %tobool16 = icmp ne i32 %32, 0, !dbg !9361
  %lnot17 = xor i1 %tobool16, true, !dbg !9361
  %lnot19 = xor i1 %lnot17, true, !dbg !9361
  %lnot.ext20 = zext i1 %lnot19 to i32, !dbg !9361
  %conv = sext i32 %lnot.ext20 to i64, !dbg !9361
  %tobool21 = icmp ne i64 %conv, 0, !dbg !9361
  br i1 %tobool21, label %if.then22, label %if.end29, !dbg !9360

if.then22:                                        ; preds = %if.end11
  br label %do.body, !dbg !9361

do.body:                                          ; preds = %if.then22
  br label %do.body23, !dbg !9363

do.body23:                                        ; preds = %do.body
  br label %do.end, !dbg !9365

do.end:                                           ; preds = %do.body23
  br label %do.body24, !dbg !9363

do.body24:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5482, i32 2307, i64 12) #9, !dbg !9367, !srcloc !9369
  br label %do.end25, !dbg !9367

do.end25:                                         ; preds = %do.body24
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 297) #9, !dbg !9370, !srcloc !9372
  br label %do.body26, !dbg !9363

do.body26:                                        ; preds = %do.end25
  br label %do.end27, !dbg !9373

do.end27:                                         ; preds = %do.body26
  br label %do.end28, !dbg !9363

do.end28:                                         ; preds = %do.end27
  br label %if.end29, !dbg !9363

if.end29:                                         ; preds = %do.end28, %if.end11
  %33 = load i32, i32* %__ret_warn_on, align 4, !dbg !9360
  %tobool30 = icmp ne i32 %33, 0, !dbg !9360
  %lnot31 = xor i1 %tobool30, true, !dbg !9360
  %lnot33 = xor i1 %lnot31, true, !dbg !9360
  %lnot.ext34 = zext i1 %lnot33 to i32, !dbg !9360
  %conv35 = sext i32 %lnot.ext34 to i64, !dbg !9360
  store i64 %conv35, i64* %tmp, align 8, !dbg !9361
  %34 = load i64, i64* %tmp, align 8, !dbg !9360
  %tobool36 = icmp ne i64 %34, 0, !dbg !9375
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !9376

if.then37:                                        ; preds = %if.end29
  br label %for.inc, !dbg !9377

if.end38:                                         ; preds = %if.end29
  %35 = load i32, i32* %ecc_bytes, align 4, !dbg !9378
  %36 = load i32, i32* %nsteps, align 4, !dbg !9380
  %mul = mul i32 %35, %36, !dbg !9381
  %37 = load i32, i32* %oobavail.addr, align 4, !dbg !9382
  %cmp39 = icmp sgt i32 %mul, %37, !dbg !9383
  br i1 %cmp39, label %if.then41, label %if.end42, !dbg !9384

if.then41:                                        ; preds = %if.end38
  br label %for.inc, !dbg !9385

if.end42:                                         ; preds = %if.end38
  %38 = load i32, i32* %strength, align 4, !dbg !9386
  %39 = load i32, i32* %nsteps, align 4, !dbg !9387
  %mul43 = mul i32 %38, %39, !dbg !9388
  store i32 %mul43, i32* %corr, align 4, !dbg !9389
  %40 = load i32, i32* %corr, align 4, !dbg !9390
  %41 = load i32, i32* %best_corr, align 4, !dbg !9392
  %cmp44 = icmp sgt i32 %40, %41, !dbg !9393
  br i1 %cmp44, label %if.then51, label %lor.lhs.false, !dbg !9394

lor.lhs.false:                                    ; preds = %if.end42
  %42 = load i32, i32* %corr, align 4, !dbg !9395
  %43 = load i32, i32* %best_corr, align 4, !dbg !9396
  %cmp46 = icmp eq i32 %42, %43, !dbg !9397
  br i1 %cmp46, label %land.lhs.true48, label %if.end52, !dbg !9398

land.lhs.true48:                                  ; preds = %lor.lhs.false
  %44 = load i32, i32* %step_size, align 4, !dbg !9399
  %45 = load i32, i32* %best_step, align 4, !dbg !9400
  %cmp49 = icmp sgt i32 %44, %45, !dbg !9401
  br i1 %cmp49, label %if.then51, label %if.end52, !dbg !9402

if.then51:                                        ; preds = %land.lhs.true48, %if.end42
  %46 = load i32, i32* %corr, align 4, !dbg !9403
  store i32 %46, i32* %best_corr, align 4, !dbg !9405
  %47 = load i32, i32* %step_size, align 4, !dbg !9406
  store i32 %47, i32* %best_step, align 4, !dbg !9407
  %48 = load i32, i32* %strength, align 4, !dbg !9408
  store i32 %48, i32* %best_strength, align 4, !dbg !9409
  %49 = load i32, i32* %ecc_bytes, align 4, !dbg !9410
  store i32 %49, i32* %best_ecc_bytes, align 4, !dbg !9411
  br label %if.end52, !dbg !9412

if.end52:                                         ; preds = %if.then51, %land.lhs.true48, %lor.lhs.false
  br label %for.inc, !dbg !9413

for.inc:                                          ; preds = %if.end52, %if.then41, %if.then37, %if.then10
  %50 = load i32, i32* %j, align 4, !dbg !9414
  %inc = add i32 %50, 1, !dbg !9414
  store i32 %inc, i32* %j, align 4, !dbg !9414
  br label %for.cond4, !dbg !9415, !llvm.loop !9416

for.end:                                          ; preds = %for.cond4
  br label %for.inc53, !dbg !9418

for.inc53:                                        ; preds = %for.end, %if.then
  %51 = load i32, i32* %i, align 4, !dbg !9419
  %inc54 = add i32 %51, 1, !dbg !9419
  store i32 %inc54, i32* %i, align 4, !dbg !9419
  br label %for.cond, !dbg !9420, !llvm.loop !9421

for.end55:                                        ; preds = %for.cond
  %52 = load i32, i32* %best_corr, align 4, !dbg !9423
  %tobool56 = icmp ne i32 %52, 0, !dbg !9423
  br i1 %tobool56, label %if.end58, label %if.then57, !dbg !9425

if.then57:                                        ; preds = %for.end55
  store i32 -524, i32* %retval, align 4, !dbg !9426
  br label %return, !dbg !9426

if.end58:                                         ; preds = %for.end55
  %53 = load i32, i32* %best_step, align 4, !dbg !9427
  %54 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9428
  %ecc59 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %54, i32 0, i32 31, !dbg !9429
  %size60 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc59, i32 0, i32 4, !dbg !9430
  store i32 %53, i32* %size60, align 8, !dbg !9431
  %55 = load i32, i32* %best_strength, align 4, !dbg !9432
  %56 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9433
  %ecc61 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %56, i32 0, i32 31, !dbg !9434
  %strength62 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc61, i32 0, i32 7, !dbg !9435
  store i32 %55, i32* %strength62, align 4, !dbg !9436
  %57 = load i32, i32* %best_ecc_bytes, align 4, !dbg !9437
  %58 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9438
  %ecc63 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %58, i32 0, i32 31, !dbg !9439
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc63, i32 0, i32 5, !dbg !9440
  store i32 %57, i32* %bytes, align 4, !dbg !9441
  store i32 0, i32* %retval, align 4, !dbg !9442
  br label %return, !dbg !9442

return:                                           ; preds = %if.end58, %if.then57
  %59 = load i32, i32* %retval, align 4, !dbg !9443
  ret i32 %59, !dbg !9443
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_match_ecc_req(%struct.nand_chip* %chip, %struct.nand_ecc_caps* %caps, i32 %oobavail) #0 !dbg !9444 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %caps.addr = alloca %struct.nand_ecc_caps*, align 8
  %oobavail.addr = alloca i32, align 4
  %requirements = alloca %struct.nand_ecc_props*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %stepinfo = alloca %struct.nand_ecc_step_info*, align 8
  %req_step = alloca i32, align 4
  %req_strength = alloca i32, align 4
  %req_corr = alloca i32, align 4
  %step_size2 = alloca i32, align 4
  %strength3 = alloca i32, align 4
  %nsteps = alloca i32, align 4
  %ecc_bytes = alloca i32, align 4
  %ecc_bytes_total = alloca i32, align 4
  %best_step = alloca i32, align 4
  %best_strength = alloca i32, align 4
  %best_ecc_bytes = alloca i32, align 4
  %best_ecc_bytes_total = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !9445, metadata !DIExpression()), !dbg !9446
  store %struct.nand_ecc_caps* %caps, %struct.nand_ecc_caps** %caps.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_caps** %caps.addr, metadata !9447, metadata !DIExpression()), !dbg !9448
  store i32 %oobavail, i32* %oobavail.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oobavail.addr, metadata !9449, metadata !DIExpression()), !dbg !9450
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_props** %requirements, metadata !9451, metadata !DIExpression()), !dbg !9454
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9455
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 0, !dbg !9456
  %call = call %struct.nand_ecc_props* @nanddev_get_ecc_requirements(%struct.nand_device* %base) #8, !dbg !9457
  store %struct.nand_ecc_props* %call, %struct.nand_ecc_props** %requirements, align 8, !dbg !9454
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !9458, metadata !DIExpression()), !dbg !9459
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9460
  %call1 = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %1) #8, !dbg !9461
  store %struct.mtd_info* %call1, %struct.mtd_info** %mtd, align 8, !dbg !9459
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_step_info** %stepinfo, metadata !9462, metadata !DIExpression()), !dbg !9463
  call void @llvm.dbg.declare(metadata i32* %req_step, metadata !9464, metadata !DIExpression()), !dbg !9465
  %2 = load %struct.nand_ecc_props*, %struct.nand_ecc_props** %requirements, align 8, !dbg !9466
  %step_size = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %2, i32 0, i32 4, !dbg !9467
  %3 = load i32, i32* %step_size, align 4, !dbg !9467
  store i32 %3, i32* %req_step, align 4, !dbg !9465
  call void @llvm.dbg.declare(metadata i32* %req_strength, metadata !9468, metadata !DIExpression()), !dbg !9469
  %4 = load %struct.nand_ecc_props*, %struct.nand_ecc_props** %requirements, align 8, !dbg !9470
  %strength = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %4, i32 0, i32 3, !dbg !9471
  %5 = load i32, i32* %strength, align 4, !dbg !9471
  store i32 %5, i32* %req_strength, align 4, !dbg !9469
  call void @llvm.dbg.declare(metadata i32* %req_corr, metadata !9472, metadata !DIExpression()), !dbg !9473
  call void @llvm.dbg.declare(metadata i32* %step_size2, metadata !9474, metadata !DIExpression()), !dbg !9475
  call void @llvm.dbg.declare(metadata i32* %strength3, metadata !9476, metadata !DIExpression()), !dbg !9477
  call void @llvm.dbg.declare(metadata i32* %nsteps, metadata !9478, metadata !DIExpression()), !dbg !9479
  call void @llvm.dbg.declare(metadata i32* %ecc_bytes, metadata !9480, metadata !DIExpression()), !dbg !9481
  call void @llvm.dbg.declare(metadata i32* %ecc_bytes_total, metadata !9482, metadata !DIExpression()), !dbg !9483
  call void @llvm.dbg.declare(metadata i32* %best_step, metadata !9484, metadata !DIExpression()), !dbg !9485
  call void @llvm.dbg.declare(metadata i32* %best_strength, metadata !9486, metadata !DIExpression()), !dbg !9487
  call void @llvm.dbg.declare(metadata i32* %best_ecc_bytes, metadata !9488, metadata !DIExpression()), !dbg !9489
  call void @llvm.dbg.declare(metadata i32* %best_ecc_bytes_total, metadata !9490, metadata !DIExpression()), !dbg !9491
  store i32 2147483647, i32* %best_ecc_bytes_total, align 4, !dbg !9491
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9492, metadata !DIExpression()), !dbg !9493
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9494, metadata !DIExpression()), !dbg !9495
  %6 = load i32, i32* %req_step, align 4, !dbg !9496
  %tobool = icmp ne i32 %6, 0, !dbg !9496
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !9498

lor.lhs.false:                                    ; preds = %entry
  %7 = load i32, i32* %req_strength, align 4, !dbg !9499
  %tobool4 = icmp ne i32 %7, 0, !dbg !9499
  br i1 %tobool4, label %if.end, label %if.then, !dbg !9500

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -524, i32* %retval, align 4, !dbg !9501
  br label %return, !dbg !9501

if.end:                                           ; preds = %lor.lhs.false
  %8 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9502
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %8, i32 0, i32 4, !dbg !9503
  %9 = load i32, i32* %writesize, align 4, !dbg !9503
  %10 = load i32, i32* %req_step, align 4, !dbg !9504
  %div = udiv i32 %9, %10, !dbg !9505
  %11 = load i32, i32* %req_strength, align 4, !dbg !9506
  %mul = mul i32 %div, %11, !dbg !9507
  store i32 %mul, i32* %req_corr, align 4, !dbg !9508
  store i32 0, i32* %i, align 4, !dbg !9509
  br label %for.cond, !dbg !9511

for.cond:                                         ; preds = %for.inc59, %if.end
  %12 = load i32, i32* %i, align 4, !dbg !9512
  %13 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9514
  %nstepinfos = getelementptr inbounds %struct.nand_ecc_caps, %struct.nand_ecc_caps* %13, i32 0, i32 1, !dbg !9515
  %14 = load i32, i32* %nstepinfos, align 8, !dbg !9515
  %cmp = icmp slt i32 %12, %14, !dbg !9516
  br i1 %cmp, label %for.body, label %for.end61, !dbg !9517

for.body:                                         ; preds = %for.cond
  %15 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9518
  %stepinfos = getelementptr inbounds %struct.nand_ecc_caps, %struct.nand_ecc_caps* %15, i32 0, i32 0, !dbg !9520
  %16 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfos, align 8, !dbg !9520
  %17 = load i32, i32* %i, align 4, !dbg !9521
  %idxprom = sext i32 %17 to i64, !dbg !9518
  %arrayidx = getelementptr %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %16, i64 %idxprom, !dbg !9518
  store %struct.nand_ecc_step_info* %arrayidx, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9522
  %18 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9523
  %stepsize = getelementptr inbounds %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %18, i32 0, i32 0, !dbg !9524
  %19 = load i32, i32* %stepsize, align 8, !dbg !9524
  store i32 %19, i32* %step_size2, align 4, !dbg !9525
  store i32 0, i32* %j, align 4, !dbg !9526
  br label %for.cond5, !dbg !9528

for.cond5:                                        ; preds = %for.inc, %for.body
  %20 = load i32, i32* %j, align 4, !dbg !9529
  %21 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9531
  %nstrengths = getelementptr inbounds %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %21, i32 0, i32 2, !dbg !9532
  %22 = load i32, i32* %nstrengths, align 8, !dbg !9532
  %cmp6 = icmp slt i32 %20, %22, !dbg !9533
  br i1 %cmp6, label %for.body7, label %for.end, !dbg !9534

for.body7:                                        ; preds = %for.cond5
  %23 = load %struct.nand_ecc_step_info*, %struct.nand_ecc_step_info** %stepinfo, align 8, !dbg !9535
  %strengths = getelementptr inbounds %struct.nand_ecc_step_info, %struct.nand_ecc_step_info* %23, i32 0, i32 1, !dbg !9537
  %24 = load i32*, i32** %strengths, align 8, !dbg !9537
  %25 = load i32, i32* %j, align 4, !dbg !9538
  %idxprom8 = sext i32 %25 to i64, !dbg !9535
  %arrayidx9 = getelementptr i32, i32* %24, i64 %idxprom8, !dbg !9535
  %26 = load i32, i32* %arrayidx9, align 4, !dbg !9535
  store i32 %26, i32* %strength3, align 4, !dbg !9539
  %27 = load i32, i32* %step_size2, align 4, !dbg !9540
  %28 = load i32, i32* %req_step, align 4, !dbg !9542
  %cmp10 = icmp slt i32 %27, %28, !dbg !9543
  br i1 %cmp10, label %land.lhs.true, label %if.end13, !dbg !9544

land.lhs.true:                                    ; preds = %for.body7
  %29 = load i32, i32* %strength3, align 4, !dbg !9545
  %30 = load i32, i32* %req_strength, align 4, !dbg !9546
  %cmp11 = icmp slt i32 %29, %30, !dbg !9547
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !9548

if.then12:                                        ; preds = %land.lhs.true
  br label %for.inc, !dbg !9549

if.end13:                                         ; preds = %land.lhs.true, %for.body7
  %31 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9550
  %writesize14 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %31, i32 0, i32 4, !dbg !9552
  %32 = load i32, i32* %writesize14, align 4, !dbg !9552
  %33 = load i32, i32* %step_size2, align 4, !dbg !9553
  %rem = urem i32 %32, %33, !dbg !9554
  %tobool15 = icmp ne i32 %rem, 0, !dbg !9554
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !9555

if.then16:                                        ; preds = %if.end13
  br label %for.inc, !dbg !9556

if.end17:                                         ; preds = %if.end13
  %34 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9557
  %writesize18 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %34, i32 0, i32 4, !dbg !9558
  %35 = load i32, i32* %writesize18, align 4, !dbg !9558
  %36 = load i32, i32* %step_size2, align 4, !dbg !9559
  %div19 = udiv i32 %35, %36, !dbg !9560
  store i32 %div19, i32* %nsteps, align 4, !dbg !9561
  %37 = load %struct.nand_ecc_caps*, %struct.nand_ecc_caps** %caps.addr, align 8, !dbg !9562
  %calc_ecc_bytes = getelementptr inbounds %struct.nand_ecc_caps, %struct.nand_ecc_caps* %37, i32 0, i32 2, !dbg !9563
  %38 = load i32 (i32, i32)*, i32 (i32, i32)** %calc_ecc_bytes, align 8, !dbg !9563
  %39 = load i32, i32* %step_size2, align 4, !dbg !9564
  %40 = load i32, i32* %strength3, align 4, !dbg !9565
  %call20 = call i32 %38(i32 %39, i32 %40) #8, !dbg !9562
  store i32 %call20, i32* %ecc_bytes, align 4, !dbg !9566
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !9567, metadata !DIExpression()), !dbg !9570
  %41 = load i32, i32* %ecc_bytes, align 4, !dbg !9570
  %cmp21 = icmp slt i32 %41, 0, !dbg !9570
  %lnot = xor i1 %cmp21, true, !dbg !9570
  %lnot22 = xor i1 %lnot, true, !dbg !9570
  %lnot.ext = zext i1 %lnot22 to i32, !dbg !9570
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !9570
  %42 = load i32, i32* %__ret_warn_on, align 4, !dbg !9571
  %tobool23 = icmp ne i32 %42, 0, !dbg !9571
  %lnot24 = xor i1 %tobool23, true, !dbg !9571
  %lnot26 = xor i1 %lnot24, true, !dbg !9571
  %lnot.ext27 = zext i1 %lnot26 to i32, !dbg !9571
  %conv = sext i32 %lnot.ext27 to i64, !dbg !9571
  %tobool28 = icmp ne i64 %conv, 0, !dbg !9571
  br i1 %tobool28, label %if.then29, label %if.end36, !dbg !9570

if.then29:                                        ; preds = %if.end17
  br label %do.body, !dbg !9571

do.body:                                          ; preds = %if.then29
  br label %do.body30, !dbg !9573

do.body30:                                        ; preds = %do.body
  br label %do.end, !dbg !9575

do.end:                                           ; preds = %do.body30
  br label %do.body31, !dbg !9573

do.body31:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5413, i32 2307, i64 12) #9, !dbg !9577, !srcloc !9579
  br label %do.end32, !dbg !9577

do.end32:                                         ; preds = %do.body31
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 296) #9, !dbg !9580, !srcloc !9582
  br label %do.body33, !dbg !9573

do.body33:                                        ; preds = %do.end32
  br label %do.end34, !dbg !9583

do.end34:                                         ; preds = %do.body33
  br label %do.end35, !dbg !9573

do.end35:                                         ; preds = %do.end34
  br label %if.end36, !dbg !9573

if.end36:                                         ; preds = %do.end35, %if.end17
  %43 = load i32, i32* %__ret_warn_on, align 4, !dbg !9570
  %tobool37 = icmp ne i32 %43, 0, !dbg !9570
  %lnot38 = xor i1 %tobool37, true, !dbg !9570
  %lnot40 = xor i1 %lnot38, true, !dbg !9570
  %lnot.ext41 = zext i1 %lnot40 to i32, !dbg !9570
  %conv42 = sext i32 %lnot.ext41 to i64, !dbg !9570
  store i64 %conv42, i64* %tmp, align 8, !dbg !9571
  %44 = load i64, i64* %tmp, align 8, !dbg !9570
  %tobool43 = icmp ne i64 %44, 0, !dbg !9585
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !9586

if.then44:                                        ; preds = %if.end36
  br label %for.inc, !dbg !9587

if.end45:                                         ; preds = %if.end36
  %45 = load i32, i32* %ecc_bytes, align 4, !dbg !9588
  %46 = load i32, i32* %nsteps, align 4, !dbg !9589
  %mul46 = mul i32 %45, %46, !dbg !9590
  store i32 %mul46, i32* %ecc_bytes_total, align 4, !dbg !9591
  %47 = load i32, i32* %ecc_bytes_total, align 4, !dbg !9592
  %48 = load i32, i32* %oobavail.addr, align 4, !dbg !9594
  %cmp47 = icmp sgt i32 %47, %48, !dbg !9595
  br i1 %cmp47, label %if.then53, label %lor.lhs.false49, !dbg !9596

lor.lhs.false49:                                  ; preds = %if.end45
  %49 = load i32, i32* %strength3, align 4, !dbg !9597
  %50 = load i32, i32* %nsteps, align 4, !dbg !9598
  %mul50 = mul i32 %49, %50, !dbg !9599
  %51 = load i32, i32* %req_corr, align 4, !dbg !9600
  %cmp51 = icmp slt i32 %mul50, %51, !dbg !9601
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !9602

if.then53:                                        ; preds = %lor.lhs.false49, %if.end45
  br label %for.inc, !dbg !9603

if.end54:                                         ; preds = %lor.lhs.false49
  %52 = load i32, i32* %ecc_bytes_total, align 4, !dbg !9604
  %53 = load i32, i32* %best_ecc_bytes_total, align 4, !dbg !9606
  %cmp55 = icmp slt i32 %52, %53, !dbg !9607
  br i1 %cmp55, label %if.then57, label %if.end58, !dbg !9608

if.then57:                                        ; preds = %if.end54
  %54 = load i32, i32* %ecc_bytes_total, align 4, !dbg !9609
  store i32 %54, i32* %best_ecc_bytes_total, align 4, !dbg !9611
  %55 = load i32, i32* %step_size2, align 4, !dbg !9612
  store i32 %55, i32* %best_step, align 4, !dbg !9613
  %56 = load i32, i32* %strength3, align 4, !dbg !9614
  store i32 %56, i32* %best_strength, align 4, !dbg !9615
  %57 = load i32, i32* %ecc_bytes, align 4, !dbg !9616
  store i32 %57, i32* %best_ecc_bytes, align 4, !dbg !9617
  br label %if.end58, !dbg !9618

if.end58:                                         ; preds = %if.then57, %if.end54
  br label %for.inc, !dbg !9619

for.inc:                                          ; preds = %if.end58, %if.then53, %if.then44, %if.then16, %if.then12
  %58 = load i32, i32* %j, align 4, !dbg !9620
  %inc = add i32 %58, 1, !dbg !9620
  store i32 %inc, i32* %j, align 4, !dbg !9620
  br label %for.cond5, !dbg !9621, !llvm.loop !9622

for.end:                                          ; preds = %for.cond5
  br label %for.inc59, !dbg !9624

for.inc59:                                        ; preds = %for.end
  %59 = load i32, i32* %i, align 4, !dbg !9625
  %inc60 = add i32 %59, 1, !dbg !9625
  store i32 %inc60, i32* %i, align 4, !dbg !9625
  br label %for.cond, !dbg !9626, !llvm.loop !9627

for.end61:                                        ; preds = %for.cond
  %60 = load i32, i32* %best_ecc_bytes_total, align 4, !dbg !9629
  %cmp62 = icmp eq i32 %60, 2147483647, !dbg !9631
  br i1 %cmp62, label %if.then64, label %if.end65, !dbg !9632

if.then64:                                        ; preds = %for.end61
  store i32 -524, i32* %retval, align 4, !dbg !9633
  br label %return, !dbg !9633

if.end65:                                         ; preds = %for.end61
  %61 = load i32, i32* %best_step, align 4, !dbg !9634
  %62 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9635
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %62, i32 0, i32 31, !dbg !9636
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !9637
  store i32 %61, i32* %size, align 8, !dbg !9638
  %63 = load i32, i32* %best_strength, align 4, !dbg !9639
  %64 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9640
  %ecc66 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %64, i32 0, i32 31, !dbg !9641
  %strength67 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc66, i32 0, i32 7, !dbg !9642
  store i32 %63, i32* %strength67, align 4, !dbg !9643
  %65 = load i32, i32* %best_ecc_bytes, align 4, !dbg !9644
  %66 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9645
  %ecc68 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %66, i32 0, i32 31, !dbg !9646
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc68, i32 0, i32 5, !dbg !9647
  store i32 %65, i32* %bytes, align 4, !dbg !9648
  store i32 0, i32* %retval, align 4, !dbg !9649
  br label %return, !dbg !9649

return:                                           ; preds = %if.end65, %if.then64, %if.then
  %67 = load i32, i32* %retval, align 4, !dbg !9650
  ret i32 %67, !dbg !9650
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @nand_scan_with_ids(%struct.nand_chip* %chip, i32 %maxchips, %struct.nand_flash_dev* %ids) #0 !dbg !9651 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %maxchips.addr = alloca i32, align 4
  %ids.addr = alloca %struct.nand_flash_dev*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !9652, metadata !DIExpression()), !dbg !9653
  store i32 %maxchips, i32* %maxchips.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %maxchips.addr, metadata !9654, metadata !DIExpression()), !dbg !9655
  store %struct.nand_flash_dev* %ids, %struct.nand_flash_dev** %ids.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_flash_dev** %ids.addr, metadata !9656, metadata !DIExpression()), !dbg !9657
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9658, metadata !DIExpression()), !dbg !9659
  %0 = load i32, i32* %maxchips.addr, align 4, !dbg !9660
  %tobool = icmp ne i32 %0, 0, !dbg !9660
  br i1 %tobool, label %if.end, label %if.then, !dbg !9662

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !9663
  br label %return, !dbg !9663

if.end:                                           ; preds = %entry
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9664
  %2 = load i32, i32* %maxchips.addr, align 4, !dbg !9665
  %3 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %ids.addr, align 8, !dbg !9666
  %call = call i32 @nand_scan_ident(%struct.nand_chip* %1, i32 %2, %struct.nand_flash_dev* %3) #8, !dbg !9667
  store i32 %call, i32* %ret, align 4, !dbg !9668
  %4 = load i32, i32* %ret, align 4, !dbg !9669
  %tobool1 = icmp ne i32 %4, 0, !dbg !9669
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !9671

if.then2:                                         ; preds = %if.end
  %5 = load i32, i32* %ret, align 4, !dbg !9672
  store i32 %5, i32* %retval, align 4, !dbg !9673
  br label %return, !dbg !9673

if.end3:                                          ; preds = %if.end
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9674
  %call4 = call i32 @nand_attach(%struct.nand_chip* %6) #8, !dbg !9675
  store i32 %call4, i32* %ret, align 4, !dbg !9676
  %7 = load i32, i32* %ret, align 4, !dbg !9677
  %tobool5 = icmp ne i32 %7, 0, !dbg !9677
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !9679

if.then6:                                         ; preds = %if.end3
  br label %cleanup_ident, !dbg !9680

if.end7:                                          ; preds = %if.end3
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9681
  %call8 = call i32 @nand_scan_tail(%struct.nand_chip* %8) #8, !dbg !9682
  store i32 %call8, i32* %ret, align 4, !dbg !9683
  %9 = load i32, i32* %ret, align 4, !dbg !9684
  %tobool9 = icmp ne i32 %9, 0, !dbg !9684
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !9686

if.then10:                                        ; preds = %if.end7
  br label %detach_chip, !dbg !9687

if.end11:                                         ; preds = %if.end7
  store i32 0, i32* %retval, align 4, !dbg !9688
  br label %return, !dbg !9688

detach_chip:                                      ; preds = %if.then10
  call void @llvm.dbg.label(metadata !9689), !dbg !9690
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9691
  call void @nand_detach(%struct.nand_chip* %10) #8, !dbg !9692
  br label %cleanup_ident, !dbg !9692

cleanup_ident:                                    ; preds = %detach_chip, %if.then6
  call void @llvm.dbg.label(metadata !9693), !dbg !9694
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9695
  call void @nand_scan_ident_cleanup(%struct.nand_chip* %11) #8, !dbg !9696
  %12 = load i32, i32* %ret, align 4, !dbg !9697
  store i32 %12, i32* %retval, align 4, !dbg !9698
  br label %return, !dbg !9698

return:                                           ; preds = %cleanup_ident, %if.end11, %if.then2, %if.then
  %13 = load i32, i32* %retval, align 4, !dbg !9699
  ret i32 %13, !dbg !9699
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_scan_ident(%struct.nand_chip* %chip, i32 %maxchips, %struct.nand_flash_dev* %table) #0 !dbg !4597 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %maxchips.addr = alloca i32, align 4
  %table.addr = alloca %struct.nand_flash_dev*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %memorg = alloca %struct.nand_memory_organization*, align 8
  %nand_maf_id = alloca i32, align 4
  %nand_dev_id = alloca i32, align 4
  %i = alloca i32, align 4
  %ret = alloca i32, align 4
  %id30 = alloca [2 x i8], align 1
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !9700, metadata !DIExpression()), !dbg !9701
  store i32 %maxchips, i32* %maxchips.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %maxchips.addr, metadata !9702, metadata !DIExpression()), !dbg !9703
  store %struct.nand_flash_dev* %table, %struct.nand_flash_dev** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_flash_dev** %table.addr, metadata !9704, metadata !DIExpression()), !dbg !9705
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !9706, metadata !DIExpression()), !dbg !9707
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9708
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !9709
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !9707
  call void @llvm.dbg.declare(metadata %struct.nand_memory_organization** %memorg, metadata !9710, metadata !DIExpression()), !dbg !9711
  call void @llvm.dbg.declare(metadata i32* %nand_maf_id, metadata !9712, metadata !DIExpression()), !dbg !9713
  call void @llvm.dbg.declare(metadata i32* %nand_dev_id, metadata !9714, metadata !DIExpression()), !dbg !9715
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9716, metadata !DIExpression()), !dbg !9717
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9718, metadata !DIExpression()), !dbg !9719
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9720
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 0, !dbg !9721
  %call1 = call %struct.nand_memory_organization* @nanddev_get_memorg(%struct.nand_device* %base) #8, !dbg !9722
  store %struct.nand_memory_organization* %call1, %struct.nand_memory_organization** %memorg, align 8, !dbg !9723
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9724
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 28, !dbg !9725
  store i32 -1, i32* %cur_cs, align 4, !dbg !9726
  br label %do.body, !dbg !9727

do.body:                                          ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9728
  %lock = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 26, !dbg !9728
  call void @__mutex_init(%struct.mutex* %lock, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0), %struct.lock_class_key* @nand_scan_ident.__key) #8, !dbg !9728
  br label %do.end, !dbg !9728

do.end:                                           ; preds = %do.body
  %call2 = call %struct.nand_interface_config* @nand_get_reset_interface_config() #8, !dbg !9730
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9731
  %current_interface_config = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 7, !dbg !9732
  store %struct.nand_interface_config* %call2, %struct.nand_interface_config** %current_interface_config, align 8, !dbg !9733
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9734
  %call3 = call i32 @rawnand_dt_init(%struct.nand_chip* %5) #8, !dbg !9735
  store i32 %call3, i32* %ret, align 4, !dbg !9736
  %6 = load i32, i32* %ret, align 4, !dbg !9737
  %tobool = icmp ne i32 %6, 0, !dbg !9737
  br i1 %tobool, label %if.then, label %if.end, !dbg !9739

if.then:                                          ; preds = %do.end
  %7 = load i32, i32* %ret, align 4, !dbg !9740
  store i32 %7, i32* %retval, align 4, !dbg !9741
  br label %return, !dbg !9741

if.end:                                           ; preds = %do.end
  %8 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9742
  %name = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %8, i32 0, i32 13, !dbg !9744
  %9 = load i8*, i8** %name, align 8, !dbg !9744
  %tobool4 = icmp ne i8* %9, null, !dbg !9742
  br i1 %tobool4, label %if.end11, label %land.lhs.true, !dbg !9745

land.lhs.true:                                    ; preds = %if.end
  %10 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9746
  %dev = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %10, i32 0, i32 55, !dbg !9747
  %parent = getelementptr inbounds %struct.device, %struct.device* %dev, i32 0, i32 1, !dbg !9748
  %11 = load %struct.device*, %struct.device** %parent, align 8, !dbg !9748
  %tobool5 = icmp ne %struct.device* %11, null, !dbg !9746
  br i1 %tobool5, label %if.then6, label %if.end11, !dbg !9749

if.then6:                                         ; preds = %land.lhs.true
  %12 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9750
  %dev7 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %12, i32 0, i32 55, !dbg !9751
  %parent8 = getelementptr inbounds %struct.device, %struct.device* %dev7, i32 0, i32 1, !dbg !9752
  %13 = load %struct.device*, %struct.device** %parent8, align 8, !dbg !9752
  %call9 = call i8* @dev_name(%struct.device* %13) #8, !dbg !9753
  %14 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9754
  %name10 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %14, i32 0, i32 13, !dbg !9755
  store i8* %call9, i8** %name10, align 8, !dbg !9756
  br label %if.end11, !dbg !9754

if.end11:                                         ; preds = %if.then6, %land.lhs.true, %if.end
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9757
  call void @nand_set_defaults(%struct.nand_chip* %15) #8, !dbg !9758
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9759
  %call12 = call i32 @nand_legacy_check_hooks(%struct.nand_chip* %16) #8, !dbg !9760
  store i32 %call12, i32* %ret, align 4, !dbg !9761
  %17 = load i32, i32* %ret, align 4, !dbg !9762
  %tobool13 = icmp ne i32 %17, 0, !dbg !9762
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !9764

if.then14:                                        ; preds = %if.end11
  %18 = load i32, i32* %ret, align 4, !dbg !9765
  store i32 %18, i32* %retval, align 4, !dbg !9766
  br label %return, !dbg !9766

if.end15:                                         ; preds = %if.end11
  %19 = load i32, i32* %maxchips.addr, align 4, !dbg !9767
  %20 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !9768
  %ntargets = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %20, i32 0, i32 8, !dbg !9769
  store i32 %19, i32* %ntargets, align 4, !dbg !9770
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9771
  %22 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %table.addr, align 8, !dbg !9772
  %call16 = call i32 @nand_detect(%struct.nand_chip* %21, %struct.nand_flash_dev* %22) #8, !dbg !9773
  store i32 %call16, i32* %ret, align 4, !dbg !9774
  %23 = load i32, i32* %ret, align 4, !dbg !9775
  %tobool17 = icmp ne i32 %23, 0, !dbg !9775
  br i1 %tobool17, label %if.then18, label %if.end23, !dbg !9777

if.then18:                                        ; preds = %if.end15
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9778
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %24, i32 0, i32 6, !dbg !9781
  %25 = load i32, i32* %options, align 8, !dbg !9781
  %conv = zext i32 %25 to i64, !dbg !9778
  %and = and i64 %conv, 262144, !dbg !9782
  %tobool19 = icmp ne i64 %and, 0, !dbg !9782
  br i1 %tobool19, label %if.end22, label %if.then20, !dbg !9783

if.then20:                                        ; preds = %if.then18
  %call21 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0)) #12, !dbg !9784
  br label %if.end22, !dbg !9784

if.end22:                                         ; preds = %if.then20, %if.then18
  %26 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9785
  call void @nand_deselect_target(%struct.nand_chip* %26) #8, !dbg !9786
  %27 = load i32, i32* %ret, align 4, !dbg !9787
  store i32 %27, i32* %retval, align 4, !dbg !9788
  br label %return, !dbg !9788

if.end23:                                         ; preds = %if.end15
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9789
  %id = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %28, i32 0, i32 1, !dbg !9790
  %data = getelementptr inbounds %struct.nand_id, %struct.nand_id* %id, i32 0, i32 0, !dbg !9791
  %arrayidx = getelementptr [8 x i8], [8 x i8]* %data, i64 0, i64 0, !dbg !9789
  %29 = load i8, i8* %arrayidx, align 8, !dbg !9789
  %conv24 = zext i8 %29 to i32, !dbg !9789
  store i32 %conv24, i32* %nand_maf_id, align 4, !dbg !9792
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9793
  %id25 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %30, i32 0, i32 1, !dbg !9794
  %data26 = getelementptr inbounds %struct.nand_id, %struct.nand_id* %id25, i32 0, i32 0, !dbg !9795
  %arrayidx27 = getelementptr [8 x i8], [8 x i8]* %data26, i64 0, i64 1, !dbg !9793
  %31 = load i8, i8* %arrayidx27, align 1, !dbg !9793
  %conv28 = zext i8 %31 to i32, !dbg !9793
  store i32 %conv28, i32* %nand_dev_id, align 4, !dbg !9796
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9797
  call void @nand_deselect_target(%struct.nand_chip* %32) #8, !dbg !9798
  store i32 1, i32* %i, align 4, !dbg !9799
  br label %for.cond, !dbg !9801

for.cond:                                         ; preds = %for.inc, %if.end23
  %33 = load i32, i32* %i, align 4, !dbg !9802
  %34 = load i32, i32* %maxchips.addr, align 4, !dbg !9804
  %cmp = icmp ult i32 %33, %34, !dbg !9805
  br i1 %cmp, label %for.body, label %for.end, !dbg !9806

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata [2 x i8]* %id30, metadata !9807, metadata !DIExpression()), !dbg !9809
  %35 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9810
  %36 = load i32, i32* %i, align 4, !dbg !9811
  %call31 = call i32 @nand_reset(%struct.nand_chip* %35, i32 %36) #8, !dbg !9812
  store i32 %call31, i32* %ret, align 4, !dbg !9813
  %37 = load i32, i32* %ret, align 4, !dbg !9814
  %tobool32 = icmp ne i32 %37, 0, !dbg !9814
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !9816

if.then33:                                        ; preds = %for.body
  br label %for.end, !dbg !9817

if.end34:                                         ; preds = %for.body
  %38 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9818
  %39 = load i32, i32* %i, align 4, !dbg !9819
  call void @nand_select_target(%struct.nand_chip* %38, i32 %39) #8, !dbg !9820
  %40 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9821
  %arraydecay = getelementptr inbounds [2 x i8], [2 x i8]* %id30, i64 0, i64 0, !dbg !9822
  %call35 = call i32 @nand_readid_op(%struct.nand_chip* %40, i8 zeroext 0, i8* %arraydecay, i32 2) #8, !dbg !9823
  store i32 %call35, i32* %ret, align 4, !dbg !9824
  %41 = load i32, i32* %ret, align 4, !dbg !9825
  %tobool36 = icmp ne i32 %41, 0, !dbg !9825
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !9827

if.then37:                                        ; preds = %if.end34
  br label %for.end, !dbg !9828

if.end38:                                         ; preds = %if.end34
  %42 = load i32, i32* %nand_maf_id, align 4, !dbg !9829
  %arrayidx39 = getelementptr [2 x i8], [2 x i8]* %id30, i64 0, i64 0, !dbg !9831
  %43 = load i8, i8* %arrayidx39, align 1, !dbg !9831
  %conv40 = zext i8 %43 to i32, !dbg !9831
  %cmp41 = icmp ne i32 %42, %conv40, !dbg !9832
  br i1 %cmp41, label %if.then47, label %lor.lhs.false, !dbg !9833

lor.lhs.false:                                    ; preds = %if.end38
  %44 = load i32, i32* %nand_dev_id, align 4, !dbg !9834
  %arrayidx43 = getelementptr [2 x i8], [2 x i8]* %id30, i64 0, i64 1, !dbg !9835
  %45 = load i8, i8* %arrayidx43, align 1, !dbg !9835
  %conv44 = zext i8 %45 to i32, !dbg !9835
  %cmp45 = icmp ne i32 %44, %conv44, !dbg !9836
  br i1 %cmp45, label %if.then47, label %if.end48, !dbg !9837

if.then47:                                        ; preds = %lor.lhs.false, %if.end38
  %46 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9838
  call void @nand_deselect_target(%struct.nand_chip* %46) #8, !dbg !9840
  br label %for.end, !dbg !9841

if.end48:                                         ; preds = %lor.lhs.false
  %47 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9842
  call void @nand_deselect_target(%struct.nand_chip* %47) #8, !dbg !9843
  br label %for.inc, !dbg !9844

for.inc:                                          ; preds = %if.end48
  %48 = load i32, i32* %i, align 4, !dbg !9845
  %inc = add i32 %48, 1, !dbg !9845
  store i32 %inc, i32* %i, align 4, !dbg !9845
  br label %for.cond, !dbg !9846, !llvm.loop !9847

for.end:                                          ; preds = %if.then47, %if.then37, %if.then33, %for.cond
  %49 = load i32, i32* %i, align 4, !dbg !9849
  %cmp49 = icmp ugt i32 %49, 1, !dbg !9851
  br i1 %cmp49, label %if.then51, label %if.end53, !dbg !9852

if.then51:                                        ; preds = %for.end
  %50 = load i32, i32* %i, align 4, !dbg !9853
  %call52 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0), i32 %50) #12, !dbg !9853
  br label %if.end53, !dbg !9853

if.end53:                                         ; preds = %if.then51, %for.end
  %51 = load i32, i32* %i, align 4, !dbg !9854
  %52 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !9855
  %ntargets54 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %52, i32 0, i32 8, !dbg !9856
  store i32 %51, i32* %ntargets54, align 4, !dbg !9857
  %53 = load i32, i32* %i, align 4, !dbg !9858
  %conv55 = zext i32 %53 to i64, !dbg !9858
  %54 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9859
  %base56 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %54, i32 0, i32 0, !dbg !9860
  %call57 = call i64 @nanddev_target_size(%struct.nand_device* %base56) #8, !dbg !9861
  %mul = mul i64 %conv55, %call57, !dbg !9862
  %55 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !9863
  %size = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %55, i32 0, i32 2, !dbg !9864
  store i64 %mul, i64* %size, align 8, !dbg !9865
  store i32 0, i32* %retval, align 4, !dbg !9866
  br label %return, !dbg !9866

return:                                           ; preds = %if.end53, %if.end22, %if.then14, %if.then
  %56 = load i32, i32* %retval, align 4, !dbg !9867
  ret i32 %56, !dbg !9867
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_attach(%struct.nand_chip* %chip) #0 !dbg !9868 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !9869, metadata !DIExpression()), !dbg !9870
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9871
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 30, !dbg !9873
  %1 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !9873
  %ops = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %1, i32 0, i32 1, !dbg !9874
  %2 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !9874
  %tobool = icmp ne %struct.nand_controller_ops* %2, null, !dbg !9871
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9875

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9876
  %controller1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 30, !dbg !9877
  %4 = load %struct.nand_controller*, %struct.nand_controller** %controller1, align 8, !dbg !9877
  %ops2 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %4, i32 0, i32 1, !dbg !9878
  %5 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops2, align 8, !dbg !9878
  %attach_chip = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %5, i32 0, i32 0, !dbg !9879
  %6 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %attach_chip, align 8, !dbg !9879
  %tobool3 = icmp ne i32 (%struct.nand_chip*)* %6, null, !dbg !9876
  br i1 %tobool3, label %if.then, label %if.end, !dbg !9880

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9881
  %controller4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 30, !dbg !9882
  %8 = load %struct.nand_controller*, %struct.nand_controller** %controller4, align 8, !dbg !9882
  %ops5 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %8, i32 0, i32 1, !dbg !9883
  %9 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops5, align 8, !dbg !9883
  %attach_chip6 = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %9, i32 0, i32 0, !dbg !9884
  %10 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %attach_chip6, align 8, !dbg !9884
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9885
  %call = call i32 %10(%struct.nand_chip* %11) #8, !dbg !9881
  store i32 %call, i32* %retval, align 4, !dbg !9886
  br label %return, !dbg !9886

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !9887
  br label %return, !dbg !9887

return:                                           ; preds = %if.end, %if.then
  %12 = load i32, i32* %retval, align 4, !dbg !9888
  ret i32 %12, !dbg !9888
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_scan_tail(%struct.nand_chip* %chip) #0 !dbg !9889 {
entry:
  %s.addr.i.i579 = alloca %struct.kmem_cache*, align 8
  call void @llvm.dbg.declare(metadata %struct.kmem_cache** %s.addr.i.i579, metadata !9890, metadata !DIExpression()), !dbg !9894
  %flags.addr.i17.i580 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i17.i580, metadata !9904, metadata !DIExpression()), !dbg !9905
  %size.addr.i18.i581 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i18.i581, metadata !9906, metadata !DIExpression()), !dbg !9907
  %ret.i.i582 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %ret.i.i582, metadata !9908, metadata !DIExpression()), !dbg !9909
  %retval.i12.i583 = alloca i32, align 4
  %flags.addr.i13.i584 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i13.i584, metadata !9910, metadata !DIExpression()), !dbg !9914
  %retval.i.i585 = alloca i32, align 4
  %size.addr.i11.i586 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i11.i586, metadata !9916, metadata !DIExpression()), !dbg !9920
  %size.addr.i.i.i587 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i.i587, metadata !9922, metadata !DIExpression()), !dbg !9926
  %flags.addr.i.i.i588 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i.i588, metadata !9931, metadata !DIExpression()), !dbg !9932
  %order.addr.i.i.i589 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.addr.i.i.i589, metadata !9933, metadata !DIExpression()), !dbg !9934
  %size.addr.i.i590 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i590, metadata !9935, metadata !DIExpression()), !dbg !9936
  %flags.addr.i.i591 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i591, metadata !9937, metadata !DIExpression()), !dbg !9938
  %order.i.i592 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.i.i592, metadata !9939, metadata !DIExpression()), !dbg !9940
  %retval.i593 = alloca i8*, align 8
  %size.addr.i594 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i594, metadata !9941, metadata !DIExpression()), !dbg !9942
  %flags.addr.i595 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i595, metadata !9943, metadata !DIExpression()), !dbg !9944
  %index.i596 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %index.i596, metadata !9945, metadata !DIExpression()), !dbg !9946
  %s.addr.i.i434 = alloca %struct.kmem_cache*, align 8
  call void @llvm.dbg.declare(metadata %struct.kmem_cache** %s.addr.i.i434, metadata !9890, metadata !DIExpression()), !dbg !9947
  %flags.addr.i17.i435 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i17.i435, metadata !9904, metadata !DIExpression()), !dbg !9950
  %size.addr.i18.i436 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i18.i436, metadata !9906, metadata !DIExpression()), !dbg !9951
  %ret.i.i437 = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %ret.i.i437, metadata !9908, metadata !DIExpression()), !dbg !9952
  %retval.i12.i438 = alloca i32, align 4
  %flags.addr.i13.i439 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i13.i439, metadata !9910, metadata !DIExpression()), !dbg !9953
  %retval.i.i440 = alloca i32, align 4
  %size.addr.i11.i441 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i11.i441, metadata !9916, metadata !DIExpression()), !dbg !9955
  %size.addr.i.i.i442 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i.i442, metadata !9922, metadata !DIExpression()), !dbg !9957
  %flags.addr.i.i.i443 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i.i443, metadata !9931, metadata !DIExpression()), !dbg !9960
  %order.addr.i.i.i444 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.addr.i.i.i444, metadata !9933, metadata !DIExpression()), !dbg !9961
  %size.addr.i.i445 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i445, metadata !9935, metadata !DIExpression()), !dbg !9962
  %flags.addr.i.i446 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i446, metadata !9937, metadata !DIExpression()), !dbg !9963
  %order.i.i447 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.i.i447, metadata !9939, metadata !DIExpression()), !dbg !9964
  %retval.i448 = alloca i8*, align 8
  %size.addr.i449 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i449, metadata !9941, metadata !DIExpression()), !dbg !9965
  %flags.addr.i450 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i450, metadata !9943, metadata !DIExpression()), !dbg !9966
  %index.i451 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %index.i451, metadata !9945, metadata !DIExpression()), !dbg !9967
  %s.addr.i.i = alloca %struct.kmem_cache*, align 8
  call void @llvm.dbg.declare(metadata %struct.kmem_cache** %s.addr.i.i, metadata !9890, metadata !DIExpression()), !dbg !9968
  %flags.addr.i17.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i17.i, metadata !9904, metadata !DIExpression()), !dbg !9971
  %size.addr.i18.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i18.i, metadata !9906, metadata !DIExpression()), !dbg !9972
  %ret.i.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %ret.i.i, metadata !9908, metadata !DIExpression()), !dbg !9973
  %retval.i12.i = alloca i32, align 4
  %flags.addr.i13.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i13.i, metadata !9910, metadata !DIExpression()), !dbg !9974
  %retval.i.i = alloca i32, align 4
  %size.addr.i11.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i11.i, metadata !9916, metadata !DIExpression()), !dbg !9976
  %size.addr.i.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i.i, metadata !9922, metadata !DIExpression()), !dbg !9978
  %flags.addr.i.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i.i, metadata !9931, metadata !DIExpression()), !dbg !9981
  %order.addr.i.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.addr.i.i.i, metadata !9933, metadata !DIExpression()), !dbg !9982
  %size.addr.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i, metadata !9935, metadata !DIExpression()), !dbg !9983
  %flags.addr.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i, metadata !9937, metadata !DIExpression()), !dbg !9984
  %order.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.i.i, metadata !9939, metadata !DIExpression()), !dbg !9985
  %retval.i = alloca i8*, align 8
  %size.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i, metadata !9941, metadata !DIExpression()), !dbg !9986
  %flags.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i, metadata !9943, metadata !DIExpression()), !dbg !9987
  %index.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %index.i, metadata !9945, metadata !DIExpression()), !dbg !9988
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %ecc = alloca %struct.nand_ecc_ctrl*, align 8
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on56 = alloca i32, align 4
  %tmp81 = alloca i64, align 8
  %__ret_warn_on101 = alloca i32, align 4
  %tmp125 = alloca i64, align 8
  %__ret_warn_on148 = alloca i32, align 4
  %tmp172 = alloca i64, align 8
  %__ret_warn_on198 = alloca i32, align 4
  %tmp223 = alloca i64, align 8
  %__ret_warn_on269 = alloca i32, align 4
  %tmp293 = alloca i64, align 8
  %__ret_warn_on312 = alloca i32, align 4
  %tmp336 = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !9989, metadata !DIExpression()), !dbg !9990
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !9991, metadata !DIExpression()), !dbg !9992
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9993
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !9994
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !9992
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_ctrl** %ecc, metadata !9995, metadata !DIExpression()), !dbg !9997
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !9998
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !9999
  store %struct.nand_ecc_ctrl* %ecc1, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !9997
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10000, metadata !DIExpression()), !dbg !10001
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10002, metadata !DIExpression()), !dbg !10003
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !10004, metadata !DIExpression()), !dbg !10007
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10007
  %bbt_options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 10, !dbg !10007
  %3 = load i32, i32* %bbt_options, align 4, !dbg !10007
  %and = and i32 %3, 524288, !dbg !10007
  %tobool = icmp ne i32 %and, 0, !dbg !10007
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !10007

land.rhs:                                         ; preds = %entry
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10007
  %bbt_options2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 10, !dbg !10007
  %5 = load i32, i32* %bbt_options2, align 4, !dbg !10007
  %and3 = and i32 %5, 131072, !dbg !10007
  %tobool4 = icmp ne i32 %and3, 0, !dbg !10007
  %lnot = xor i1 %tobool4, true, !dbg !10007
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %lnot, %land.rhs ], !dbg !10008
  %lnot5 = xor i1 %6, true, !dbg !10007
  %lnot6 = xor i1 %lnot5, true, !dbg !10007
  %lnot.ext = zext i1 %lnot6 to i32, !dbg !10007
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !10007
  %7 = load i32, i32* %__ret_warn_on, align 4, !dbg !10009
  %tobool7 = icmp ne i32 %7, 0, !dbg !10009
  %lnot8 = xor i1 %tobool7, true, !dbg !10009
  %lnot10 = xor i1 %lnot8, true, !dbg !10009
  %lnot.ext11 = zext i1 %lnot10 to i32, !dbg !10009
  %conv = sext i32 %lnot.ext11 to i64, !dbg !10009
  %tobool12 = icmp ne i64 %conv, 0, !dbg !10009
  br i1 %tobool12, label %if.then, label %if.end, !dbg !10007

if.then:                                          ; preds = %land.end
  br label %do.body, !dbg !10009

do.body:                                          ; preds = %if.then
  br label %do.body13, !dbg !10011

do.body13:                                        ; preds = %do.body
  br label %do.end, !dbg !10013

do.end:                                           ; preds = %do.body13
  br label %do.body14, !dbg !10011

do.body14:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5614, i32 2305, i64 12) #9, !dbg !10015, !srcloc !10017
  br label %do.end15, !dbg !10015

do.end15:                                         ; preds = %do.body14
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 302) #9, !dbg !10018, !srcloc !10020
  br label %do.body16, !dbg !10011

do.body16:                                        ; preds = %do.end15
  br label %do.end17, !dbg !10021

do.end17:                                         ; preds = %do.body16
  br label %do.end18, !dbg !10011

do.end18:                                         ; preds = %do.end17
  br label %if.end, !dbg !10011

if.end:                                           ; preds = %do.end18, %land.end
  %8 = load i32, i32* %__ret_warn_on, align 4, !dbg !10007
  %tobool19 = icmp ne i32 %8, 0, !dbg !10007
  %lnot20 = xor i1 %tobool19, true, !dbg !10007
  %lnot22 = xor i1 %lnot20, true, !dbg !10007
  %lnot.ext23 = zext i1 %lnot22 to i32, !dbg !10007
  %conv24 = sext i32 %lnot.ext23 to i64, !dbg !10007
  store i64 %conv24, i64* %tmp, align 8, !dbg !10009
  %9 = load i64, i64* %tmp, align 8, !dbg !10007
  %tobool25 = icmp ne i64 %9, 0, !dbg !10023
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !10024

if.then26:                                        ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !10025
  br label %return, !dbg !10025

if.end27:                                         ; preds = %if.end
  %10 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10027
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %10, i32 0, i32 4, !dbg !10028
  %11 = load i32, i32* %writesize, align 4, !dbg !10028
  %12 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10029
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %12, i32 0, i32 6, !dbg !10030
  %13 = load i32, i32* %oobsize, align 4, !dbg !10030
  %add = add i32 %11, %13, !dbg !10031
  %conv28 = zext i32 %add to i64, !dbg !10027
  store i64 %conv28, i64* %size.addr.i, align 8
  store i32 3264, i32* %flags.addr.i, align 4
  %14 = load i64, i64* %size.addr.i, align 8, !dbg !10032
  %15 = call i1 @llvm.is.constant.i64(i64 %14) #9, !dbg !10033
  br i1 %15, label %if.then.i, label %if.end9.i, !dbg !10034

if.then.i:                                        ; preds = %if.end27
  %16 = load i64, i64* %size.addr.i, align 8, !dbg !10035
  %cmp.i = icmp ugt i64 %16, 8192, !dbg !10036
  br i1 %cmp.i, label %if.then1.i, label %if.end.i, !dbg !10037

if.then1.i:                                       ; preds = %if.then.i
  %17 = load i64, i64* %size.addr.i, align 8, !dbg !10038
  %18 = load i32, i32* %flags.addr.i, align 4, !dbg !10039
  store i64 %17, i64* %size.addr.i.i, align 8
  store i32 %18, i32* %flags.addr.i.i, align 4
  %19 = load i64, i64* %size.addr.i.i, align 8, !dbg !10040
  %call.i.i = call i32 @get_order(i64 %19) #14, !dbg !10041
  store i32 %call.i.i, i32* %order.i.i, align 4, !dbg !9985
  %20 = load i64, i64* %size.addr.i.i, align 8, !dbg !10042
  %21 = load i32, i32* %flags.addr.i.i, align 4, !dbg !10043
  %22 = load i32, i32* %order.i.i, align 4, !dbg !10044
  store i64 %20, i64* %size.addr.i.i.i, align 8
  store i32 %21, i32* %flags.addr.i.i.i, align 4
  store i32 %22, i32* %order.addr.i.i.i, align 4
  %23 = load i64, i64* %size.addr.i.i.i, align 8, !dbg !10045
  %24 = load i32, i32* %flags.addr.i.i.i, align 4, !dbg !10046
  %25 = load i32, i32* %order.addr.i.i.i, align 4, !dbg !10047
  %call.i.i.i = call noalias i8* @kmalloc_order(i64 %23, i32 %24, i32 %25) #10, !dbg !10048
  %ptrint.i.i.i = ptrtoint i8* %call.i.i.i to i64, !dbg !10048
  %maskedptr.i.i.i = and i64 %ptrint.i.i.i, 4095, !dbg !10048
  %maskcond.i.i.i = icmp eq i64 %maskedptr.i.i.i, 0, !dbg !10048
  call void @llvm.assume(i1 %maskcond.i.i.i) #9, !dbg !10048
  store i8* %call.i.i.i, i8** %retval.i, align 8, !dbg !10049
  br label %kmalloc.exit, !dbg !10049

if.end.i:                                         ; preds = %if.then.i
  %26 = load i64, i64* %size.addr.i, align 8, !dbg !10050
  store i64 %26, i64* %size.addr.i11.i, align 8
  %27 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10051
  %tobool.i.i = icmp ne i64 %27, 0, !dbg !10051
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i, !dbg !10053

if.then.i.i:                                      ; preds = %if.end.i
  store i32 0, i32* %retval.i.i, align 4, !dbg !10054
  br label %kmalloc_index.exit.i, !dbg !10054

if.end.i.i:                                       ; preds = %if.end.i
  %28 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10055
  %cmp.i.i = icmp ule i64 %28, 8, !dbg !10057
  br i1 %cmp.i.i, label %if.then1.i.i, label %if.end2.i.i, !dbg !10058

if.then1.i.i:                                     ; preds = %if.end.i.i
  store i32 3, i32* %retval.i.i, align 4, !dbg !10059
  br label %kmalloc_index.exit.i, !dbg !10059

if.end2.i.i:                                      ; preds = %if.end.i.i
  %29 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10060
  %cmp3.i.i = icmp ugt i64 %29, 64, !dbg !10062
  br i1 %cmp3.i.i, label %land.lhs.true.i.i, label %if.end6.i.i, !dbg !10063

land.lhs.true.i.i:                                ; preds = %if.end2.i.i
  %30 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10064
  %cmp4.i.i = icmp ule i64 %30, 96, !dbg !10065
  br i1 %cmp4.i.i, label %if.then5.i.i, label %if.end6.i.i, !dbg !10066

if.then5.i.i:                                     ; preds = %land.lhs.true.i.i
  store i32 1, i32* %retval.i.i, align 4, !dbg !10067
  br label %kmalloc_index.exit.i, !dbg !10067

if.end6.i.i:                                      ; preds = %land.lhs.true.i.i, %if.end2.i.i
  %31 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10068
  %cmp7.i.i = icmp ugt i64 %31, 128, !dbg !10070
  br i1 %cmp7.i.i, label %land.lhs.true8.i.i, label %if.end11.i.i, !dbg !10071

land.lhs.true8.i.i:                               ; preds = %if.end6.i.i
  %32 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10072
  %cmp9.i.i = icmp ule i64 %32, 192, !dbg !10073
  br i1 %cmp9.i.i, label %if.then10.i.i, label %if.end11.i.i, !dbg !10074

if.then10.i.i:                                    ; preds = %land.lhs.true8.i.i
  store i32 2, i32* %retval.i.i, align 4, !dbg !10075
  br label %kmalloc_index.exit.i, !dbg !10075

if.end11.i.i:                                     ; preds = %land.lhs.true8.i.i, %if.end6.i.i
  %33 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10076
  %cmp12.i.i = icmp ule i64 %33, 8, !dbg !10078
  br i1 %cmp12.i.i, label %if.then13.i.i, label %if.end14.i.i, !dbg !10079

if.then13.i.i:                                    ; preds = %if.end11.i.i
  store i32 3, i32* %retval.i.i, align 4, !dbg !10080
  br label %kmalloc_index.exit.i, !dbg !10080

if.end14.i.i:                                     ; preds = %if.end11.i.i
  %34 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10081
  %cmp15.i.i = icmp ule i64 %34, 16, !dbg !10083
  br i1 %cmp15.i.i, label %if.then16.i.i, label %if.end17.i.i, !dbg !10084

if.then16.i.i:                                    ; preds = %if.end14.i.i
  store i32 4, i32* %retval.i.i, align 4, !dbg !10085
  br label %kmalloc_index.exit.i, !dbg !10085

if.end17.i.i:                                     ; preds = %if.end14.i.i
  %35 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10086
  %cmp18.i.i = icmp ule i64 %35, 32, !dbg !10088
  br i1 %cmp18.i.i, label %if.then19.i.i, label %if.end20.i.i, !dbg !10089

if.then19.i.i:                                    ; preds = %if.end17.i.i
  store i32 5, i32* %retval.i.i, align 4, !dbg !10090
  br label %kmalloc_index.exit.i, !dbg !10090

if.end20.i.i:                                     ; preds = %if.end17.i.i
  %36 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10091
  %cmp21.i.i = icmp ule i64 %36, 64, !dbg !10093
  br i1 %cmp21.i.i, label %if.then22.i.i, label %if.end23.i.i, !dbg !10094

if.then22.i.i:                                    ; preds = %if.end20.i.i
  store i32 6, i32* %retval.i.i, align 4, !dbg !10095
  br label %kmalloc_index.exit.i, !dbg !10095

if.end23.i.i:                                     ; preds = %if.end20.i.i
  %37 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10096
  %cmp24.i.i = icmp ule i64 %37, 128, !dbg !10098
  br i1 %cmp24.i.i, label %if.then25.i.i, label %if.end26.i.i, !dbg !10099

if.then25.i.i:                                    ; preds = %if.end23.i.i
  store i32 7, i32* %retval.i.i, align 4, !dbg !10100
  br label %kmalloc_index.exit.i, !dbg !10100

if.end26.i.i:                                     ; preds = %if.end23.i.i
  %38 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10101
  %cmp27.i.i = icmp ule i64 %38, 256, !dbg !10103
  br i1 %cmp27.i.i, label %if.then28.i.i, label %if.end29.i.i, !dbg !10104

if.then28.i.i:                                    ; preds = %if.end26.i.i
  store i32 8, i32* %retval.i.i, align 4, !dbg !10105
  br label %kmalloc_index.exit.i, !dbg !10105

if.end29.i.i:                                     ; preds = %if.end26.i.i
  %39 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10106
  %cmp30.i.i = icmp ule i64 %39, 512, !dbg !10108
  br i1 %cmp30.i.i, label %if.then31.i.i, label %if.end32.i.i, !dbg !10109

if.then31.i.i:                                    ; preds = %if.end29.i.i
  store i32 9, i32* %retval.i.i, align 4, !dbg !10110
  br label %kmalloc_index.exit.i, !dbg !10110

if.end32.i.i:                                     ; preds = %if.end29.i.i
  %40 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10111
  %cmp33.i.i = icmp ule i64 %40, 1024, !dbg !10113
  br i1 %cmp33.i.i, label %if.then34.i.i, label %if.end35.i.i, !dbg !10114

if.then34.i.i:                                    ; preds = %if.end32.i.i
  store i32 10, i32* %retval.i.i, align 4, !dbg !10115
  br label %kmalloc_index.exit.i, !dbg !10115

if.end35.i.i:                                     ; preds = %if.end32.i.i
  %41 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10116
  %cmp36.i.i = icmp ule i64 %41, 2048, !dbg !10118
  br i1 %cmp36.i.i, label %if.then37.i.i, label %if.end38.i.i, !dbg !10119

if.then37.i.i:                                    ; preds = %if.end35.i.i
  store i32 11, i32* %retval.i.i, align 4, !dbg !10120
  br label %kmalloc_index.exit.i, !dbg !10120

if.end38.i.i:                                     ; preds = %if.end35.i.i
  %42 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10121
  %cmp39.i.i = icmp ule i64 %42, 4096, !dbg !10123
  br i1 %cmp39.i.i, label %if.then40.i.i, label %if.end41.i.i, !dbg !10124

if.then40.i.i:                                    ; preds = %if.end38.i.i
  store i32 12, i32* %retval.i.i, align 4, !dbg !10125
  br label %kmalloc_index.exit.i, !dbg !10125

if.end41.i.i:                                     ; preds = %if.end38.i.i
  %43 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10126
  %cmp42.i.i = icmp ule i64 %43, 8192, !dbg !10128
  br i1 %cmp42.i.i, label %if.then43.i.i, label %if.end44.i.i, !dbg !10129

if.then43.i.i:                                    ; preds = %if.end41.i.i
  store i32 13, i32* %retval.i.i, align 4, !dbg !10130
  br label %kmalloc_index.exit.i, !dbg !10130

if.end44.i.i:                                     ; preds = %if.end41.i.i
  %44 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10131
  %cmp45.i.i = icmp ule i64 %44, 16384, !dbg !10133
  br i1 %cmp45.i.i, label %if.then46.i.i, label %if.end47.i.i, !dbg !10134

if.then46.i.i:                                    ; preds = %if.end44.i.i
  store i32 14, i32* %retval.i.i, align 4, !dbg !10135
  br label %kmalloc_index.exit.i, !dbg !10135

if.end47.i.i:                                     ; preds = %if.end44.i.i
  %45 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10136
  %cmp48.i.i = icmp ule i64 %45, 32768, !dbg !10138
  br i1 %cmp48.i.i, label %if.then49.i.i, label %if.end50.i.i, !dbg !10139

if.then49.i.i:                                    ; preds = %if.end47.i.i
  store i32 15, i32* %retval.i.i, align 4, !dbg !10140
  br label %kmalloc_index.exit.i, !dbg !10140

if.end50.i.i:                                     ; preds = %if.end47.i.i
  %46 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10141
  %cmp51.i.i = icmp ule i64 %46, 65536, !dbg !10143
  br i1 %cmp51.i.i, label %if.then52.i.i, label %if.end53.i.i, !dbg !10144

if.then52.i.i:                                    ; preds = %if.end50.i.i
  store i32 16, i32* %retval.i.i, align 4, !dbg !10145
  br label %kmalloc_index.exit.i, !dbg !10145

if.end53.i.i:                                     ; preds = %if.end50.i.i
  %47 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10146
  %cmp54.i.i = icmp ule i64 %47, 131072, !dbg !10148
  br i1 %cmp54.i.i, label %if.then55.i.i, label %if.end56.i.i, !dbg !10149

if.then55.i.i:                                    ; preds = %if.end53.i.i
  store i32 17, i32* %retval.i.i, align 4, !dbg !10150
  br label %kmalloc_index.exit.i, !dbg !10150

if.end56.i.i:                                     ; preds = %if.end53.i.i
  %48 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10151
  %cmp57.i.i = icmp ule i64 %48, 262144, !dbg !10153
  br i1 %cmp57.i.i, label %if.then58.i.i, label %if.end59.i.i, !dbg !10154

if.then58.i.i:                                    ; preds = %if.end56.i.i
  store i32 18, i32* %retval.i.i, align 4, !dbg !10155
  br label %kmalloc_index.exit.i, !dbg !10155

if.end59.i.i:                                     ; preds = %if.end56.i.i
  %49 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10156
  %cmp60.i.i = icmp ule i64 %49, 524288, !dbg !10158
  br i1 %cmp60.i.i, label %if.then61.i.i, label %if.end62.i.i, !dbg !10159

if.then61.i.i:                                    ; preds = %if.end59.i.i
  store i32 19, i32* %retval.i.i, align 4, !dbg !10160
  br label %kmalloc_index.exit.i, !dbg !10160

if.end62.i.i:                                     ; preds = %if.end59.i.i
  %50 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10161
  %cmp63.i.i = icmp ule i64 %50, 1048576, !dbg !10163
  br i1 %cmp63.i.i, label %if.then64.i.i, label %if.end65.i.i, !dbg !10164

if.then64.i.i:                                    ; preds = %if.end62.i.i
  store i32 20, i32* %retval.i.i, align 4, !dbg !10165
  br label %kmalloc_index.exit.i, !dbg !10165

if.end65.i.i:                                     ; preds = %if.end62.i.i
  %51 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10166
  %cmp66.i.i = icmp ule i64 %51, 2097152, !dbg !10168
  br i1 %cmp66.i.i, label %if.then67.i.i, label %if.end68.i.i, !dbg !10169

if.then67.i.i:                                    ; preds = %if.end65.i.i
  store i32 21, i32* %retval.i.i, align 4, !dbg !10170
  br label %kmalloc_index.exit.i, !dbg !10170

if.end68.i.i:                                     ; preds = %if.end65.i.i
  %52 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10171
  %cmp69.i.i = icmp ule i64 %52, 4194304, !dbg !10173
  br i1 %cmp69.i.i, label %if.then70.i.i, label %if.end71.i.i, !dbg !10174

if.then70.i.i:                                    ; preds = %if.end68.i.i
  store i32 22, i32* %retval.i.i, align 4, !dbg !10175
  br label %kmalloc_index.exit.i, !dbg !10175

if.end71.i.i:                                     ; preds = %if.end68.i.i
  %53 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10176
  %cmp72.i.i = icmp ule i64 %53, 8388608, !dbg !10178
  br i1 %cmp72.i.i, label %if.then73.i.i, label %if.end74.i.i, !dbg !10179

if.then73.i.i:                                    ; preds = %if.end71.i.i
  store i32 23, i32* %retval.i.i, align 4, !dbg !10180
  br label %kmalloc_index.exit.i, !dbg !10180

if.end74.i.i:                                     ; preds = %if.end71.i.i
  %54 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10181
  %cmp75.i.i = icmp ule i64 %54, 16777216, !dbg !10183
  br i1 %cmp75.i.i, label %if.then76.i.i, label %if.end77.i.i, !dbg !10184

if.then76.i.i:                                    ; preds = %if.end74.i.i
  store i32 24, i32* %retval.i.i, align 4, !dbg !10185
  br label %kmalloc_index.exit.i, !dbg !10185

if.end77.i.i:                                     ; preds = %if.end74.i.i
  %55 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10186
  %cmp78.i.i = icmp ule i64 %55, 33554432, !dbg !10188
  br i1 %cmp78.i.i, label %if.then79.i.i, label %if.end80.i.i, !dbg !10189

if.then79.i.i:                                    ; preds = %if.end77.i.i
  store i32 25, i32* %retval.i.i, align 4, !dbg !10190
  br label %kmalloc_index.exit.i, !dbg !10190

if.end80.i.i:                                     ; preds = %if.end77.i.i
  %56 = load i64, i64* %size.addr.i11.i, align 8, !dbg !10191
  %cmp81.i.i = icmp ule i64 %56, 67108864, !dbg !10193
  br i1 %cmp81.i.i, label %if.then82.i.i, label %if.end83.i.i, !dbg !10194

if.then82.i.i:                                    ; preds = %if.end80.i.i
  store i32 26, i32* %retval.i.i, align 4, !dbg !10195
  br label %kmalloc_index.exit.i, !dbg !10195

if.end83.i.i:                                     ; preds = %if.end80.i.i
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0), i32 382, i32 0, i64 12) #9, !dbg !10196, !srcloc !10199
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 159) #9, !dbg !10200, !srcloc !10203
  unreachable, !dbg !10204

kmalloc_index.exit.i:                             ; preds = %if.then82.i.i, %if.then79.i.i, %if.then76.i.i, %if.then73.i.i, %if.then70.i.i, %if.then67.i.i, %if.then64.i.i, %if.then61.i.i, %if.then58.i.i, %if.then55.i.i, %if.then52.i.i, %if.then49.i.i, %if.then46.i.i, %if.then43.i.i, %if.then40.i.i, %if.then37.i.i, %if.then34.i.i, %if.then31.i.i, %if.then28.i.i, %if.then25.i.i, %if.then22.i.i, %if.then19.i.i, %if.then16.i.i, %if.then13.i.i, %if.then10.i.i, %if.then5.i.i, %if.then1.i.i, %if.then.i.i
  %57 = load i32, i32* %retval.i.i, align 4, !dbg !10205
  store i32 %57, i32* %index.i, align 4, !dbg !10206
  %58 = load i32, i32* %index.i, align 4, !dbg !10207
  %tobool.i = icmp ne i32 %58, 0, !dbg !10207
  br i1 %tobool.i, label %if.end4.i, label %if.then3.i, !dbg !10209

if.then3.i:                                       ; preds = %kmalloc_index.exit.i
  store i8* inttoptr (i64 16 to i8*), i8** %retval.i, align 8, !dbg !10210
  br label %kmalloc.exit, !dbg !10210

if.end4.i:                                        ; preds = %kmalloc_index.exit.i
  %59 = load i32, i32* %flags.addr.i, align 4, !dbg !10211
  store i32 %59, i32* %flags.addr.i13.i, align 4
  %60 = load i32, i32* %flags.addr.i13.i, align 4, !dbg !10212
  %and.i.i = and i32 %60, 17, !dbg !10212
  %cmp.i14.i = icmp eq i32 %and.i.i, 0, !dbg !10212
  %lnot.i.i = xor i1 %cmp.i14.i, true, !dbg !10212
  %lnot.ext.i.i = zext i1 %cmp.i14.i to i32, !dbg !10212
  %conv.i.i = sext i32 %lnot.ext.i.i to i64, !dbg !10212
  br i1 %cmp.i14.i, label %if.then.i15.i, label %if.end.i16.i, !dbg !10214

if.then.i15.i:                                    ; preds = %if.end4.i
  store i32 0, i32* %retval.i12.i, align 4, !dbg !10215
  br label %kmalloc_type.exit.i, !dbg !10215

if.end.i16.i:                                     ; preds = %if.end4.i
  %61 = load i32, i32* %flags.addr.i13.i, align 4, !dbg !10216
  %and2.i.i = and i32 %61, 1, !dbg !10217
  %tobool3.i.i = icmp ne i32 %and2.i.i, 0, !dbg !10216
  %62 = zext i1 %tobool3.i.i to i64, !dbg !10216
  %cond.i.i = select i1 %tobool3.i.i, i32 2, i32 1, !dbg !10216
  store i32 %cond.i.i, i32* %retval.i12.i, align 4, !dbg !10218
  br label %kmalloc_type.exit.i, !dbg !10218

kmalloc_type.exit.i:                              ; preds = %if.end.i16.i, %if.then.i15.i
  %63 = load i32, i32* %retval.i12.i, align 4, !dbg !10219
  %idxprom.i = zext i32 %63 to i64, !dbg !10220
  %arrayidx.i = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %idxprom.i, !dbg !10220
  %64 = load i32, i32* %index.i, align 4, !dbg !10221
  %idxprom6.i = zext i32 %64 to i64, !dbg !10220
  %arrayidx7.i = getelementptr [14 x %struct.kmem_cache*], [14 x %struct.kmem_cache*]* %arrayidx.i, i64 0, i64 %idxprom6.i, !dbg !10220
  %65 = load %struct.kmem_cache*, %struct.kmem_cache** %arrayidx7.i, align 8, !dbg !10220
  %66 = load i32, i32* %flags.addr.i, align 4, !dbg !10222
  %67 = load i64, i64* %size.addr.i, align 8, !dbg !10223
  store %struct.kmem_cache* %65, %struct.kmem_cache** %s.addr.i.i, align 8
  store i32 %66, i32* %flags.addr.i17.i, align 4
  store i64 %67, i64* %size.addr.i18.i, align 8
  %68 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i, align 8, !dbg !10224
  %69 = load i32, i32* %flags.addr.i17.i, align 4, !dbg !10225
  %call.i19.i = call noalias i8* @kmem_cache_alloc(%struct.kmem_cache* %68, i32 %69) #10, !dbg !10226
  %ptrint.i.i = ptrtoint i8* %call.i19.i to i64, !dbg !10226
  %maskedptr.i.i = and i64 %ptrint.i.i, 7, !dbg !10226
  %maskcond.i.i = icmp eq i64 %maskedptr.i.i, 0, !dbg !10226
  call void @llvm.assume(i1 %maskcond.i.i) #9, !dbg !10226
  store i8* %call.i19.i, i8** %ret.i.i, align 8, !dbg !9973
  %70 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i, align 8, !dbg !10227
  %71 = load i8*, i8** %ret.i.i, align 8, !dbg !10228
  %72 = load i64, i64* %size.addr.i18.i, align 8, !dbg !10229
  %73 = load i32, i32* %flags.addr.i17.i, align 4, !dbg !10230
  %call1.i.i = call i8* @kasan_kmalloc(%struct.kmem_cache* %70, i8* %71, i64 %72, i32 %73) #10, !dbg !10231
  store i8* %call1.i.i, i8** %ret.i.i, align 8, !dbg !10232
  %74 = load i8*, i8** %ret.i.i, align 8, !dbg !10233
  store i8* %74, i8** %retval.i, align 8, !dbg !10234
  br label %kmalloc.exit, !dbg !10234

if.end9.i:                                        ; preds = %if.end27
  %75 = load i64, i64* %size.addr.i, align 8, !dbg !10235
  %76 = load i32, i32* %flags.addr.i, align 4, !dbg !10236
  %call10.i = call noalias i8* @__kmalloc(i64 %75, i32 %76) #10, !dbg !10237
  %ptrint.i = ptrtoint i8* %call10.i to i64, !dbg !10237
  %maskedptr.i = and i64 %ptrint.i, 7, !dbg !10237
  %maskcond.i = icmp eq i64 %maskedptr.i, 0, !dbg !10237
  call void @llvm.assume(i1 %maskcond.i) #9, !dbg !10237
  store i8* %call10.i, i8** %retval.i, align 8, !dbg !10238
  br label %kmalloc.exit, !dbg !10238

kmalloc.exit:                                     ; preds = %if.then1.i, %if.then3.i, %kmalloc_type.exit.i, %if.end9.i
  %77 = load i8*, i8** %retval.i, align 8, !dbg !10239
  %78 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10240
  %data_buf = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %78, i32 0, i32 22, !dbg !10241
  store i8* %77, i8** %data_buf, align 8, !dbg !10242
  %79 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10243
  %data_buf30 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %79, i32 0, i32 22, !dbg !10245
  %80 = load i8*, i8** %data_buf30, align 8, !dbg !10245
  %tobool31 = icmp ne i8* %80, null, !dbg !10243
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !10246

if.then32:                                        ; preds = %kmalloc.exit
  store i32 -12, i32* %retval, align 4, !dbg !10247
  br label %return, !dbg !10247

if.end33:                                         ; preds = %kmalloc.exit
  %81 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10248
  call void @nand_select_target(%struct.nand_chip* %81, i32 0) #8, !dbg !10249
  %82 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10250
  %call34 = call i32 @nand_manufacturer_init(%struct.nand_chip* %82) #8, !dbg !10251
  store i32 %call34, i32* %ret, align 4, !dbg !10252
  %83 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10253
  call void @nand_deselect_target(%struct.nand_chip* %83) #8, !dbg !10254
  %84 = load i32, i32* %ret, align 4, !dbg !10255
  %tobool35 = icmp ne i32 %84, 0, !dbg !10255
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !10257

if.then36:                                        ; preds = %if.end33
  br label %err_free_buf, !dbg !10258

if.end37:                                         ; preds = %if.end33
  %85 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10259
  %data_buf38 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %85, i32 0, i32 22, !dbg !10260
  %86 = load i8*, i8** %data_buf38, align 8, !dbg !10260
  %87 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10261
  %writesize39 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %87, i32 0, i32 4, !dbg !10262
  %88 = load i32, i32* %writesize39, align 4, !dbg !10262
  %idx.ext = zext i32 %88 to i64, !dbg !10263
  %add.ptr = getelementptr i8, i8* %86, i64 %idx.ext, !dbg !10263
  %89 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10264
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %89, i32 0, i32 23, !dbg !10265
  store i8* %add.ptr, i8** %oob_poi, align 8, !dbg !10266
  %90 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10267
  %ooblayout = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %90, i32 0, i32 15, !dbg !10269
  %91 = load %struct.mtd_ooblayout_ops*, %struct.mtd_ooblayout_ops** %ooblayout, align 8, !dbg !10269
  %tobool40 = icmp ne %struct.mtd_ooblayout_ops* %91, null, !dbg !10267
  br i1 %tobool40, label %if.end88, label %land.lhs.true, !dbg !10270

land.lhs.true:                                    ; preds = %if.end37
  %92 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10271
  %engine_type = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %92, i32 0, i32 0, !dbg !10272
  %93 = load i32, i32* %engine_type, align 8, !dbg !10272
  %cmp = icmp eq i32 %93, 2, !dbg !10273
  br i1 %cmp, label %land.lhs.true42, label %if.then45, !dbg !10274

land.lhs.true42:                                  ; preds = %land.lhs.true
  %94 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10275
  %algo = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %94, i32 0, i32 2, !dbg !10276
  %95 = load i32, i32* %algo, align 8, !dbg !10276
  %cmp43 = icmp eq i32 %95, 2, !dbg !10277
  br i1 %cmp43, label %if.end88, label %if.then45, !dbg !10278

if.then45:                                        ; preds = %land.lhs.true42, %land.lhs.true
  %96 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10279
  %oobsize46 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %96, i32 0, i32 6, !dbg !10281
  %97 = load i32, i32* %oobsize46, align 4, !dbg !10281
  switch i32 %97, label %sw.default [
    i32 8, label %sw.bb
    i32 16, label %sw.bb
    i32 64, label %sw.bb48
    i32 128, label %sw.bb48
  ], !dbg !10282

sw.bb:                                            ; preds = %if.then45, %if.then45
  %98 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10283
  %call47 = call %struct.mtd_ooblayout_ops* @nand_get_small_page_ooblayout() #8, !dbg !10285
  call void @mtd_set_ooblayout(%struct.mtd_info* %98, %struct.mtd_ooblayout_ops* %call47) #8, !dbg !10286
  br label %sw.epilog, !dbg !10287

sw.bb48:                                          ; preds = %if.then45, %if.then45
  %99 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10288
  %call49 = call %struct.mtd_ooblayout_ops* @nand_get_large_page_hamming_ooblayout() #8, !dbg !10289
  call void @mtd_set_ooblayout(%struct.mtd_info* %99, %struct.mtd_ooblayout_ops* %call49) #8, !dbg !10290
  br label %sw.epilog, !dbg !10291

sw.default:                                       ; preds = %if.then45
  %100 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10292
  %engine_type50 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %100, i32 0, i32 0, !dbg !10294
  %101 = load i32, i32* %engine_type50, align 8, !dbg !10294
  %cmp51 = icmp eq i32 %101, 1, !dbg !10295
  br i1 %cmp51, label %if.then53, label %if.end55, !dbg !10296

if.then53:                                        ; preds = %sw.default
  %102 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10297
  %call54 = call %struct.mtd_ooblayout_ops* @nand_get_large_page_ooblayout() #8, !dbg !10299
  call void @mtd_set_ooblayout(%struct.mtd_info* %102, %struct.mtd_ooblayout_ops* %call54) #8, !dbg !10300
  br label %sw.epilog, !dbg !10301

if.end55:                                         ; preds = %sw.default
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on56, metadata !10302, metadata !DIExpression()), !dbg !10304
  store i32 1, i32* %__ret_warn_on56, align 4, !dbg !10304
  %103 = load i32, i32* %__ret_warn_on56, align 4, !dbg !10305
  %tobool57 = icmp ne i32 %103, 0, !dbg !10305
  %lnot58 = xor i1 %tobool57, true, !dbg !10305
  %lnot60 = xor i1 %lnot58, true, !dbg !10305
  %lnot.ext61 = zext i1 %lnot60 to i32, !dbg !10305
  %conv62 = sext i32 %lnot.ext61 to i64, !dbg !10305
  %tobool63 = icmp ne i64 %conv62, 0, !dbg !10305
  br i1 %tobool63, label %if.then64, label %if.end80, !dbg !10304

if.then64:                                        ; preds = %if.end55
  br label %do.body65, !dbg !10305

do.body65:                                        ; preds = %if.then64
  br label %do.body66, !dbg !10307

do.body66:                                        ; preds = %do.body65
  br label %do.end67, !dbg !10309

do.end67:                                         ; preds = %do.body66
  %104 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10307
  %oobsize68 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %104, i32 0, i32 6, !dbg !10307
  %105 = load i32, i32* %oobsize68, align 4, !dbg !10307
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.31, i64 0, i64 0), i32 %105) #8, !dbg !10307
  br label %do.body69, !dbg !10307

do.body69:                                        ; preds = %do.end67
  br label %do.body70, !dbg !10311

do.body70:                                        ; preds = %do.body69
  br label %do.end71, !dbg !10313

do.end71:                                         ; preds = %do.body70
  br label %do.body72, !dbg !10311

do.body72:                                        ; preds = %do.end71
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5668, i32 2313, i64 12) #9, !dbg !10315, !srcloc !10317
  br label %do.end73, !dbg !10315

do.end73:                                         ; preds = %do.body72
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 303) #9, !dbg !10318, !srcloc !10320
  br label %do.body74, !dbg !10311

do.body74:                                        ; preds = %do.end73
  br label %do.end75, !dbg !10321

do.end75:                                         ; preds = %do.body74
  br label %do.end76, !dbg !10311

do.end76:                                         ; preds = %do.end75
  br label %do.body77, !dbg !10307

do.body77:                                        ; preds = %do.end76
  br label %do.end78, !dbg !10323

do.end78:                                         ; preds = %do.body77
  br label %do.end79, !dbg !10307

do.end79:                                         ; preds = %do.end78
  br label %if.end80, !dbg !10307

if.end80:                                         ; preds = %do.end79, %if.end55
  %106 = load i32, i32* %__ret_warn_on56, align 4, !dbg !10304
  %tobool82 = icmp ne i32 %106, 0, !dbg !10304
  %lnot83 = xor i1 %tobool82, true, !dbg !10304
  %lnot85 = xor i1 %lnot83, true, !dbg !10304
  %lnot.ext86 = zext i1 %lnot85 to i32, !dbg !10304
  %conv87 = sext i32 %lnot.ext86 to i64, !dbg !10304
  store i64 %conv87, i64* %tmp81, align 8, !dbg !10305
  %107 = load i64, i64* %tmp81, align 8, !dbg !10304
  store i32 -22, i32* %ret, align 4, !dbg !10325
  br label %err_nand_manuf_cleanup, !dbg !10326

sw.epilog:                                        ; preds = %if.then53, %sw.bb48, %sw.bb
  br label %if.end88, !dbg !10327

if.end88:                                         ; preds = %sw.epilog, %land.lhs.true42, %if.end37
  %108 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10328
  %engine_type89 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %108, i32 0, i32 0, !dbg !10329
  %109 = load i32, i32* %engine_type89, align 8, !dbg !10329
  switch i32 %109, label %sw.default197 [
    i32 3, label %sw.bb90
    i32 2, label %sw.bb139
    i32 4, label %sw.bb144
    i32 1, label %sw.bb188
  ], !dbg !10330

sw.bb90:                                          ; preds = %if.end88
  %110 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10331
  %call91 = call i32 @nand_set_ecc_on_host_ops(%struct.nand_chip* %110) #8, !dbg !10333
  store i32 %call91, i32* %ret, align 4, !dbg !10334
  %111 = load i32, i32* %ret, align 4, !dbg !10335
  %tobool92 = icmp ne i32 %111, 0, !dbg !10335
  br i1 %tobool92, label %if.then93, label %if.end94, !dbg !10337

if.then93:                                        ; preds = %sw.bb90
  br label %err_nand_manuf_cleanup, !dbg !10338

if.end94:                                         ; preds = %sw.bb90
  %112 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10339
  %writesize95 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %112, i32 0, i32 4, !dbg !10341
  %113 = load i32, i32* %writesize95, align 4, !dbg !10341
  %114 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10342
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %114, i32 0, i32 4, !dbg !10343
  %115 = load i32, i32* %size, align 8, !dbg !10343
  %cmp96 = icmp uge i32 %113, %115, !dbg !10344
  br i1 %cmp96, label %if.then98, label %if.end133, !dbg !10345

if.then98:                                        ; preds = %if.end94
  %116 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10346
  %strength = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %116, i32 0, i32 7, !dbg !10349
  %117 = load i32, i32* %strength, align 4, !dbg !10349
  %tobool99 = icmp ne i32 %117, 0, !dbg !10346
  br i1 %tobool99, label %if.end132, label %if.then100, !dbg !10350

if.then100:                                       ; preds = %if.then98
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on101, metadata !10351, metadata !DIExpression()), !dbg !10354
  store i32 1, i32* %__ret_warn_on101, align 4, !dbg !10354
  %118 = load i32, i32* %__ret_warn_on101, align 4, !dbg !10355
  %tobool102 = icmp ne i32 %118, 0, !dbg !10355
  %lnot103 = xor i1 %tobool102, true, !dbg !10355
  %lnot105 = xor i1 %lnot103, true, !dbg !10355
  %lnot.ext106 = zext i1 %lnot105 to i32, !dbg !10355
  %conv107 = sext i32 %lnot.ext106 to i64, !dbg !10355
  %tobool108 = icmp ne i64 %conv107, 0, !dbg !10355
  br i1 %tobool108, label %if.then109, label %if.end124, !dbg !10354

if.then109:                                       ; preds = %if.then100
  br label %do.body110, !dbg !10355

do.body110:                                       ; preds = %if.then109
  br label %do.body111, !dbg !10357

do.body111:                                       ; preds = %do.body110
  br label %do.end112, !dbg !10359

do.end112:                                        ; preds = %do.body111
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.32, i64 0, i64 0)) #8, !dbg !10357
  br label %do.body113, !dbg !10357

do.body113:                                       ; preds = %do.end112
  br label %do.body114, !dbg !10361

do.body114:                                       ; preds = %do.body113
  br label %do.end115, !dbg !10363

do.end115:                                        ; preds = %do.body114
  br label %do.body116, !dbg !10361

do.body116:                                       ; preds = %do.end115
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5687, i32 2313, i64 12) #9, !dbg !10365, !srcloc !10367
  br label %do.end117, !dbg !10365

do.end117:                                        ; preds = %do.body116
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 304) #9, !dbg !10368, !srcloc !10370
  br label %do.body118, !dbg !10361

do.body118:                                       ; preds = %do.end117
  br label %do.end119, !dbg !10371

do.end119:                                        ; preds = %do.body118
  br label %do.end120, !dbg !10361

do.end120:                                        ; preds = %do.end119
  br label %do.body121, !dbg !10357

do.body121:                                       ; preds = %do.end120
  br label %do.end122, !dbg !10373

do.end122:                                        ; preds = %do.body121
  br label %do.end123, !dbg !10357

do.end123:                                        ; preds = %do.end122
  br label %if.end124, !dbg !10357

if.end124:                                        ; preds = %do.end123, %if.then100
  %119 = load i32, i32* %__ret_warn_on101, align 4, !dbg !10354
  %tobool126 = icmp ne i32 %119, 0, !dbg !10354
  %lnot127 = xor i1 %tobool126, true, !dbg !10354
  %lnot129 = xor i1 %lnot127, true, !dbg !10354
  %lnot.ext130 = zext i1 %lnot129 to i32, !dbg !10354
  %conv131 = sext i32 %lnot.ext130 to i64, !dbg !10354
  store i64 %conv131, i64* %tmp125, align 8, !dbg !10355
  %120 = load i64, i64* %tmp125, align 8, !dbg !10354
  store i32 -22, i32* %ret, align 4, !dbg !10375
  br label %err_nand_manuf_cleanup, !dbg !10376

if.end132:                                        ; preds = %if.then98
  br label %sw.epilog230, !dbg !10377

if.end133:                                        ; preds = %if.end94
  %121 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10378
  %size134 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %121, i32 0, i32 4, !dbg !10378
  %122 = load i32, i32* %size134, align 8, !dbg !10378
  %123 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10378
  %writesize135 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %123, i32 0, i32 4, !dbg !10378
  %124 = load i32, i32* %writesize135, align 4, !dbg !10378
  %call136 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.33, i64 0, i64 0), i32 %122, i32 %124) #12, !dbg !10378
  %125 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10379
  %engine_type137 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %125, i32 0, i32 0, !dbg !10380
  store i32 2, i32* %engine_type137, align 8, !dbg !10381
  %126 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10382
  %algo138 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %126, i32 0, i32 2, !dbg !10383
  store i32 1, i32* %algo138, align 8, !dbg !10384
  br label %sw.bb139, !dbg !10382

sw.bb139:                                         ; preds = %if.end88, %if.end133
  %127 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10385
  %call140 = call i32 @nand_set_ecc_soft_ops(%struct.nand_chip* %127) #8, !dbg !10386
  store i32 %call140, i32* %ret, align 4, !dbg !10387
  %128 = load i32, i32* %ret, align 4, !dbg !10388
  %tobool141 = icmp ne i32 %128, 0, !dbg !10388
  br i1 %tobool141, label %if.then142, label %if.end143, !dbg !10390

if.then142:                                       ; preds = %sw.bb139
  br label %err_nand_manuf_cleanup, !dbg !10391

if.end143:                                        ; preds = %sw.bb139
  br label %sw.epilog230, !dbg !10392

sw.bb144:                                         ; preds = %if.end88
  %129 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10393
  %read_page = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %129, i32 0, i32 19, !dbg !10395
  %130 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page, align 8, !dbg !10395
  %tobool145 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %130, null, !dbg !10393
  br i1 %tobool145, label %lor.lhs.false, label %if.then147, !dbg !10396

lor.lhs.false:                                    ; preds = %sw.bb144
  %131 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10397
  %write_page = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %131, i32 0, i32 22, !dbg !10398
  %132 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page, align 8, !dbg !10398
  %tobool146 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %132, null, !dbg !10397
  br i1 %tobool146, label %if.end179, label %if.then147, !dbg !10399

if.then147:                                       ; preds = %lor.lhs.false, %sw.bb144
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on148, metadata !10400, metadata !DIExpression()), !dbg !10403
  store i32 1, i32* %__ret_warn_on148, align 4, !dbg !10403
  %133 = load i32, i32* %__ret_warn_on148, align 4, !dbg !10404
  %tobool149 = icmp ne i32 %133, 0, !dbg !10404
  %lnot150 = xor i1 %tobool149, true, !dbg !10404
  %lnot152 = xor i1 %lnot150, true, !dbg !10404
  %lnot.ext153 = zext i1 %lnot152 to i32, !dbg !10404
  %conv154 = sext i32 %lnot.ext153 to i64, !dbg !10404
  %tobool155 = icmp ne i64 %conv154, 0, !dbg !10404
  br i1 %tobool155, label %if.then156, label %if.end171, !dbg !10403

if.then156:                                       ; preds = %if.then147
  br label %do.body157, !dbg !10404

do.body157:                                       ; preds = %if.then156
  br label %do.body158, !dbg !10406

do.body158:                                       ; preds = %do.body157
  br label %do.end159, !dbg !10408

do.end159:                                        ; preds = %do.body158
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.34, i64 0, i64 0)) #8, !dbg !10406
  br label %do.body160, !dbg !10406

do.body160:                                       ; preds = %do.end159
  br label %do.body161, !dbg !10410

do.body161:                                       ; preds = %do.body160
  br label %do.end162, !dbg !10412

do.end162:                                        ; preds = %do.body161
  br label %do.body163, !dbg !10410

do.body163:                                       ; preds = %do.end162
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5707, i32 2313, i64 12) #9, !dbg !10414, !srcloc !10416
  br label %do.end164, !dbg !10414

do.end164:                                        ; preds = %do.body163
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 305) #9, !dbg !10417, !srcloc !10419
  br label %do.body165, !dbg !10410

do.body165:                                       ; preds = %do.end164
  br label %do.end166, !dbg !10420

do.end166:                                        ; preds = %do.body165
  br label %do.end167, !dbg !10410

do.end167:                                        ; preds = %do.end166
  br label %do.body168, !dbg !10406

do.body168:                                       ; preds = %do.end167
  br label %do.end169, !dbg !10422

do.end169:                                        ; preds = %do.body168
  br label %do.end170, !dbg !10406

do.end170:                                        ; preds = %do.end169
  br label %if.end171, !dbg !10406

if.end171:                                        ; preds = %do.end170, %if.then147
  %134 = load i32, i32* %__ret_warn_on148, align 4, !dbg !10403
  %tobool173 = icmp ne i32 %134, 0, !dbg !10403
  %lnot174 = xor i1 %tobool173, true, !dbg !10403
  %lnot176 = xor i1 %lnot174, true, !dbg !10403
  %lnot.ext177 = zext i1 %lnot176 to i32, !dbg !10403
  %conv178 = sext i32 %lnot.ext177 to i64, !dbg !10403
  store i64 %conv178, i64* %tmp172, align 8, !dbg !10404
  %135 = load i64, i64* %tmp172, align 8, !dbg !10403
  store i32 -22, i32* %ret, align 4, !dbg !10424
  br label %err_nand_manuf_cleanup, !dbg !10425

if.end179:                                        ; preds = %lor.lhs.false
  %136 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10426
  %read_oob = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %136, i32 0, i32 25, !dbg !10428
  %137 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %read_oob, align 8, !dbg !10428
  %tobool180 = icmp ne i32 (%struct.nand_chip*, i32)* %137, null, !dbg !10426
  br i1 %tobool180, label %if.end183, label %if.then181, !dbg !10429

if.then181:                                       ; preds = %if.end179
  %138 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10430
  %read_oob182 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %138, i32 0, i32 25, !dbg !10431
  store i32 (%struct.nand_chip*, i32)* @nand_read_oob_std, i32 (%struct.nand_chip*, i32)** %read_oob182, align 8, !dbg !10432
  br label %if.end183, !dbg !10430

if.end183:                                        ; preds = %if.then181, %if.end179
  %139 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10433
  %write_oob = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %139, i32 0, i32 26, !dbg !10435
  %140 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %write_oob, align 8, !dbg !10435
  %tobool184 = icmp ne i32 (%struct.nand_chip*, i32)* %140, null, !dbg !10433
  br i1 %tobool184, label %if.end187, label %if.then185, !dbg !10436

if.then185:                                       ; preds = %if.end183
  %141 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10437
  %write_oob186 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %141, i32 0, i32 26, !dbg !10438
  store i32 (%struct.nand_chip*, i32)* @nand_write_oob_std, i32 (%struct.nand_chip*, i32)** %write_oob186, align 8, !dbg !10439
  br label %if.end187, !dbg !10437

if.end187:                                        ; preds = %if.then185, %if.end183
  br label %sw.epilog230, !dbg !10440

sw.bb188:                                         ; preds = %if.end88
  %call189 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.35, i64 0, i64 0)) #12, !dbg !10441
  %142 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10442
  %read_page190 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %142, i32 0, i32 19, !dbg !10443
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page190, align 8, !dbg !10444
  %143 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10445
  %write_page191 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %143, i32 0, i32 22, !dbg !10446
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page191, align 8, !dbg !10447
  %144 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10448
  %read_oob192 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %144, i32 0, i32 25, !dbg !10449
  store i32 (%struct.nand_chip*, i32)* @nand_read_oob_std, i32 (%struct.nand_chip*, i32)** %read_oob192, align 8, !dbg !10450
  %145 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10451
  %read_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %145, i32 0, i32 17, !dbg !10452
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw, align 8, !dbg !10453
  %146 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10454
  %write_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %146, i32 0, i32 18, !dbg !10455
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw, align 8, !dbg !10456
  %147 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10457
  %write_oob193 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %147, i32 0, i32 26, !dbg !10458
  store i32 (%struct.nand_chip*, i32)* @nand_write_oob_std, i32 (%struct.nand_chip*, i32)** %write_oob193, align 8, !dbg !10459
  %148 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10460
  %writesize194 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %148, i32 0, i32 4, !dbg !10461
  %149 = load i32, i32* %writesize194, align 4, !dbg !10461
  %150 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10462
  %size195 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %150, i32 0, i32 4, !dbg !10463
  store i32 %149, i32* %size195, align 8, !dbg !10464
  %151 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10465
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %151, i32 0, i32 5, !dbg !10466
  store i32 0, i32* %bytes, align 4, !dbg !10467
  %152 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10468
  %strength196 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %152, i32 0, i32 7, !dbg !10469
  store i32 0, i32* %strength196, align 4, !dbg !10470
  br label %sw.epilog230, !dbg !10471

sw.default197:                                    ; preds = %if.end88
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on198, metadata !10472, metadata !DIExpression()), !dbg !10474
  store i32 1, i32* %__ret_warn_on198, align 4, !dbg !10474
  %153 = load i32, i32* %__ret_warn_on198, align 4, !dbg !10475
  %tobool199 = icmp ne i32 %153, 0, !dbg !10475
  %lnot200 = xor i1 %tobool199, true, !dbg !10475
  %lnot202 = xor i1 %lnot200, true, !dbg !10475
  %lnot.ext203 = zext i1 %lnot202 to i32, !dbg !10475
  %conv204 = sext i32 %lnot.ext203 to i64, !dbg !10475
  %tobool205 = icmp ne i64 %conv204, 0, !dbg !10475
  br i1 %tobool205, label %if.then206, label %if.end222, !dbg !10474

if.then206:                                       ; preds = %sw.default197
  br label %do.body207, !dbg !10475

do.body207:                                       ; preds = %if.then206
  br label %do.body208, !dbg !10477

do.body208:                                       ; preds = %do.body207
  br label %do.end209, !dbg !10479

do.end209:                                        ; preds = %do.body208
  %154 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10477
  %engine_type210 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %154, i32 0, i32 0, !dbg !10477
  %155 = load i32, i32* %engine_type210, align 8, !dbg !10477
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.36, i64 0, i64 0), i32 %155) #8, !dbg !10477
  br label %do.body211, !dbg !10477

do.body211:                                       ; preds = %do.end209
  br label %do.body212, !dbg !10481

do.body212:                                       ; preds = %do.body211
  br label %do.end213, !dbg !10483

do.end213:                                        ; preds = %do.body212
  br label %do.body214, !dbg !10481

do.body214:                                       ; preds = %do.end213
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5731, i32 2313, i64 12) #9, !dbg !10485, !srcloc !10487
  br label %do.end215, !dbg !10485

do.end215:                                        ; preds = %do.body214
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 306) #9, !dbg !10488, !srcloc !10490
  br label %do.body216, !dbg !10481

do.body216:                                       ; preds = %do.end215
  br label %do.end217, !dbg !10491

do.end217:                                        ; preds = %do.body216
  br label %do.end218, !dbg !10481

do.end218:                                        ; preds = %do.end217
  br label %do.body219, !dbg !10477

do.body219:                                       ; preds = %do.end218
  br label %do.end220, !dbg !10493

do.end220:                                        ; preds = %do.body219
  br label %do.end221, !dbg !10477

do.end221:                                        ; preds = %do.end220
  br label %if.end222, !dbg !10477

if.end222:                                        ; preds = %do.end221, %sw.default197
  %156 = load i32, i32* %__ret_warn_on198, align 4, !dbg !10474
  %tobool224 = icmp ne i32 %156, 0, !dbg !10474
  %lnot225 = xor i1 %tobool224, true, !dbg !10474
  %lnot227 = xor i1 %lnot225, true, !dbg !10474
  %lnot.ext228 = zext i1 %lnot227 to i32, !dbg !10474
  %conv229 = sext i32 %lnot.ext228 to i64, !dbg !10474
  store i64 %conv229, i64* %tmp223, align 8, !dbg !10475
  %157 = load i64, i64* %tmp223, align 8, !dbg !10474
  store i32 -22, i32* %ret, align 4, !dbg !10495
  br label %err_nand_manuf_cleanup, !dbg !10496

sw.epilog230:                                     ; preds = %sw.bb188, %if.end187, %if.end143, %if.end132
  %158 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10497
  %correct = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %158, i32 0, i32 16, !dbg !10498
  %159 = load i32 (%struct.nand_chip*, i8*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*, i8*)** %correct, align 8, !dbg !10498
  %tobool231 = icmp ne i32 (%struct.nand_chip*, i8*, i8*, i8*)* %159, null, !dbg !10497
  br i1 %tobool231, label %if.then234, label %lor.lhs.false232, !dbg !10499

lor.lhs.false232:                                 ; preds = %sw.epilog230
  %160 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10500
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %160, i32 0, i32 15, !dbg !10501
  %161 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !10501
  %tobool233 = icmp ne i32 (%struct.nand_chip*, i8*, i8*)* %161, null, !dbg !10500
  br i1 %tobool233, label %if.then234, label %if.end248, !dbg !10502

if.then234:                                       ; preds = %lor.lhs.false232, %sw.epilog230
  %162 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10503
  %oobsize235 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %162, i32 0, i32 6, !dbg !10504
  %163 = load i32, i32* %oobsize235, align 4, !dbg !10504
  %conv236 = zext i32 %163 to i64, !dbg !10503
  store i64 %conv236, i64* %size.addr.i449, align 8
  store i32 3264, i32* %flags.addr.i450, align 4
  %164 = load i64, i64* %size.addr.i449, align 8, !dbg !10505
  %165 = call i1 @llvm.is.constant.i64(i64 %164) #9, !dbg !10506
  br i1 %165, label %if.then.i453, label %if.end9.i577, !dbg !10507

if.then.i453:                                     ; preds = %if.then234
  %166 = load i64, i64* %size.addr.i449, align 8, !dbg !10508
  %cmp.i452 = icmp ugt i64 %166, 8192, !dbg !10509
  br i1 %cmp.i452, label %if.then1.i459, label %if.end.i461, !dbg !10510

if.then1.i459:                                    ; preds = %if.then.i453
  %167 = load i64, i64* %size.addr.i449, align 8, !dbg !10511
  %168 = load i32, i32* %flags.addr.i450, align 4, !dbg !10512
  store i64 %167, i64* %size.addr.i.i445, align 8
  store i32 %168, i32* %flags.addr.i.i446, align 4
  %169 = load i64, i64* %size.addr.i.i445, align 8, !dbg !10513
  %call.i.i454 = call i32 @get_order(i64 %169) #14, !dbg !10514
  store i32 %call.i.i454, i32* %order.i.i447, align 4, !dbg !9964
  %170 = load i64, i64* %size.addr.i.i445, align 8, !dbg !10515
  %171 = load i32, i32* %flags.addr.i.i446, align 4, !dbg !10516
  %172 = load i32, i32* %order.i.i447, align 4, !dbg !10517
  store i64 %170, i64* %size.addr.i.i.i442, align 8
  store i32 %171, i32* %flags.addr.i.i.i443, align 4
  store i32 %172, i32* %order.addr.i.i.i444, align 4
  %173 = load i64, i64* %size.addr.i.i.i442, align 8, !dbg !10518
  %174 = load i32, i32* %flags.addr.i.i.i443, align 4, !dbg !10519
  %175 = load i32, i32* %order.addr.i.i.i444, align 4, !dbg !10520
  %call.i.i.i455 = call noalias i8* @kmalloc_order(i64 %173, i32 %174, i32 %175) #10, !dbg !10521
  %ptrint.i.i.i456 = ptrtoint i8* %call.i.i.i455 to i64, !dbg !10521
  %maskedptr.i.i.i457 = and i64 %ptrint.i.i.i456, 4095, !dbg !10521
  %maskcond.i.i.i458 = icmp eq i64 %maskedptr.i.i.i457, 0, !dbg !10521
  call void @llvm.assume(i1 %maskcond.i.i.i458) #9, !dbg !10521
  store i8* %call.i.i.i455, i8** %retval.i448, align 8, !dbg !10522
  br label %kmalloc.exit578, !dbg !10522

if.end.i461:                                      ; preds = %if.then.i453
  %176 = load i64, i64* %size.addr.i449, align 8, !dbg !10523
  store i64 %176, i64* %size.addr.i11.i441, align 8
  %177 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10524
  %tobool.i.i460 = icmp ne i64 %177, 0, !dbg !10524
  br i1 %tobool.i.i460, label %if.end.i.i464, label %if.then.i.i462, !dbg !10525

if.then.i.i462:                                   ; preds = %if.end.i461
  store i32 0, i32* %retval.i.i440, align 4, !dbg !10526
  br label %kmalloc_index.exit.i550, !dbg !10526

if.end.i.i464:                                    ; preds = %if.end.i461
  %178 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10527
  %cmp.i.i463 = icmp ule i64 %178, 8, !dbg !10528
  br i1 %cmp.i.i463, label %if.then1.i.i465, label %if.end2.i.i467, !dbg !10529

if.then1.i.i465:                                  ; preds = %if.end.i.i464
  store i32 3, i32* %retval.i.i440, align 4, !dbg !10530
  br label %kmalloc_index.exit.i550, !dbg !10530

if.end2.i.i467:                                   ; preds = %if.end.i.i464
  %179 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10531
  %cmp3.i.i466 = icmp ugt i64 %179, 64, !dbg !10532
  br i1 %cmp3.i.i466, label %land.lhs.true.i.i469, label %if.end6.i.i472, !dbg !10533

land.lhs.true.i.i469:                             ; preds = %if.end2.i.i467
  %180 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10534
  %cmp4.i.i468 = icmp ule i64 %180, 96, !dbg !10535
  br i1 %cmp4.i.i468, label %if.then5.i.i470, label %if.end6.i.i472, !dbg !10536

if.then5.i.i470:                                  ; preds = %land.lhs.true.i.i469
  store i32 1, i32* %retval.i.i440, align 4, !dbg !10537
  br label %kmalloc_index.exit.i550, !dbg !10537

if.end6.i.i472:                                   ; preds = %land.lhs.true.i.i469, %if.end2.i.i467
  %181 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10538
  %cmp7.i.i471 = icmp ugt i64 %181, 128, !dbg !10539
  br i1 %cmp7.i.i471, label %land.lhs.true8.i.i474, label %if.end11.i.i477, !dbg !10540

land.lhs.true8.i.i474:                            ; preds = %if.end6.i.i472
  %182 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10541
  %cmp9.i.i473 = icmp ule i64 %182, 192, !dbg !10542
  br i1 %cmp9.i.i473, label %if.then10.i.i475, label %if.end11.i.i477, !dbg !10543

if.then10.i.i475:                                 ; preds = %land.lhs.true8.i.i474
  store i32 2, i32* %retval.i.i440, align 4, !dbg !10544
  br label %kmalloc_index.exit.i550, !dbg !10544

if.end11.i.i477:                                  ; preds = %land.lhs.true8.i.i474, %if.end6.i.i472
  %183 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10545
  %cmp12.i.i476 = icmp ule i64 %183, 8, !dbg !10546
  br i1 %cmp12.i.i476, label %if.then13.i.i478, label %if.end14.i.i480, !dbg !10547

if.then13.i.i478:                                 ; preds = %if.end11.i.i477
  store i32 3, i32* %retval.i.i440, align 4, !dbg !10548
  br label %kmalloc_index.exit.i550, !dbg !10548

if.end14.i.i480:                                  ; preds = %if.end11.i.i477
  %184 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10549
  %cmp15.i.i479 = icmp ule i64 %184, 16, !dbg !10550
  br i1 %cmp15.i.i479, label %if.then16.i.i481, label %if.end17.i.i483, !dbg !10551

if.then16.i.i481:                                 ; preds = %if.end14.i.i480
  store i32 4, i32* %retval.i.i440, align 4, !dbg !10552
  br label %kmalloc_index.exit.i550, !dbg !10552

if.end17.i.i483:                                  ; preds = %if.end14.i.i480
  %185 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10553
  %cmp18.i.i482 = icmp ule i64 %185, 32, !dbg !10554
  br i1 %cmp18.i.i482, label %if.then19.i.i484, label %if.end20.i.i486, !dbg !10555

if.then19.i.i484:                                 ; preds = %if.end17.i.i483
  store i32 5, i32* %retval.i.i440, align 4, !dbg !10556
  br label %kmalloc_index.exit.i550, !dbg !10556

if.end20.i.i486:                                  ; preds = %if.end17.i.i483
  %186 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10557
  %cmp21.i.i485 = icmp ule i64 %186, 64, !dbg !10558
  br i1 %cmp21.i.i485, label %if.then22.i.i487, label %if.end23.i.i489, !dbg !10559

if.then22.i.i487:                                 ; preds = %if.end20.i.i486
  store i32 6, i32* %retval.i.i440, align 4, !dbg !10560
  br label %kmalloc_index.exit.i550, !dbg !10560

if.end23.i.i489:                                  ; preds = %if.end20.i.i486
  %187 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10561
  %cmp24.i.i488 = icmp ule i64 %187, 128, !dbg !10562
  br i1 %cmp24.i.i488, label %if.then25.i.i490, label %if.end26.i.i492, !dbg !10563

if.then25.i.i490:                                 ; preds = %if.end23.i.i489
  store i32 7, i32* %retval.i.i440, align 4, !dbg !10564
  br label %kmalloc_index.exit.i550, !dbg !10564

if.end26.i.i492:                                  ; preds = %if.end23.i.i489
  %188 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10565
  %cmp27.i.i491 = icmp ule i64 %188, 256, !dbg !10566
  br i1 %cmp27.i.i491, label %if.then28.i.i493, label %if.end29.i.i495, !dbg !10567

if.then28.i.i493:                                 ; preds = %if.end26.i.i492
  store i32 8, i32* %retval.i.i440, align 4, !dbg !10568
  br label %kmalloc_index.exit.i550, !dbg !10568

if.end29.i.i495:                                  ; preds = %if.end26.i.i492
  %189 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10569
  %cmp30.i.i494 = icmp ule i64 %189, 512, !dbg !10570
  br i1 %cmp30.i.i494, label %if.then31.i.i496, label %if.end32.i.i498, !dbg !10571

if.then31.i.i496:                                 ; preds = %if.end29.i.i495
  store i32 9, i32* %retval.i.i440, align 4, !dbg !10572
  br label %kmalloc_index.exit.i550, !dbg !10572

if.end32.i.i498:                                  ; preds = %if.end29.i.i495
  %190 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10573
  %cmp33.i.i497 = icmp ule i64 %190, 1024, !dbg !10574
  br i1 %cmp33.i.i497, label %if.then34.i.i499, label %if.end35.i.i501, !dbg !10575

if.then34.i.i499:                                 ; preds = %if.end32.i.i498
  store i32 10, i32* %retval.i.i440, align 4, !dbg !10576
  br label %kmalloc_index.exit.i550, !dbg !10576

if.end35.i.i501:                                  ; preds = %if.end32.i.i498
  %191 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10577
  %cmp36.i.i500 = icmp ule i64 %191, 2048, !dbg !10578
  br i1 %cmp36.i.i500, label %if.then37.i.i502, label %if.end38.i.i504, !dbg !10579

if.then37.i.i502:                                 ; preds = %if.end35.i.i501
  store i32 11, i32* %retval.i.i440, align 4, !dbg !10580
  br label %kmalloc_index.exit.i550, !dbg !10580

if.end38.i.i504:                                  ; preds = %if.end35.i.i501
  %192 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10581
  %cmp39.i.i503 = icmp ule i64 %192, 4096, !dbg !10582
  br i1 %cmp39.i.i503, label %if.then40.i.i505, label %if.end41.i.i507, !dbg !10583

if.then40.i.i505:                                 ; preds = %if.end38.i.i504
  store i32 12, i32* %retval.i.i440, align 4, !dbg !10584
  br label %kmalloc_index.exit.i550, !dbg !10584

if.end41.i.i507:                                  ; preds = %if.end38.i.i504
  %193 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10585
  %cmp42.i.i506 = icmp ule i64 %193, 8192, !dbg !10586
  br i1 %cmp42.i.i506, label %if.then43.i.i508, label %if.end44.i.i510, !dbg !10587

if.then43.i.i508:                                 ; preds = %if.end41.i.i507
  store i32 13, i32* %retval.i.i440, align 4, !dbg !10588
  br label %kmalloc_index.exit.i550, !dbg !10588

if.end44.i.i510:                                  ; preds = %if.end41.i.i507
  %194 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10589
  %cmp45.i.i509 = icmp ule i64 %194, 16384, !dbg !10590
  br i1 %cmp45.i.i509, label %if.then46.i.i511, label %if.end47.i.i513, !dbg !10591

if.then46.i.i511:                                 ; preds = %if.end44.i.i510
  store i32 14, i32* %retval.i.i440, align 4, !dbg !10592
  br label %kmalloc_index.exit.i550, !dbg !10592

if.end47.i.i513:                                  ; preds = %if.end44.i.i510
  %195 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10593
  %cmp48.i.i512 = icmp ule i64 %195, 32768, !dbg !10594
  br i1 %cmp48.i.i512, label %if.then49.i.i514, label %if.end50.i.i516, !dbg !10595

if.then49.i.i514:                                 ; preds = %if.end47.i.i513
  store i32 15, i32* %retval.i.i440, align 4, !dbg !10596
  br label %kmalloc_index.exit.i550, !dbg !10596

if.end50.i.i516:                                  ; preds = %if.end47.i.i513
  %196 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10597
  %cmp51.i.i515 = icmp ule i64 %196, 65536, !dbg !10598
  br i1 %cmp51.i.i515, label %if.then52.i.i517, label %if.end53.i.i519, !dbg !10599

if.then52.i.i517:                                 ; preds = %if.end50.i.i516
  store i32 16, i32* %retval.i.i440, align 4, !dbg !10600
  br label %kmalloc_index.exit.i550, !dbg !10600

if.end53.i.i519:                                  ; preds = %if.end50.i.i516
  %197 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10601
  %cmp54.i.i518 = icmp ule i64 %197, 131072, !dbg !10602
  br i1 %cmp54.i.i518, label %if.then55.i.i520, label %if.end56.i.i522, !dbg !10603

if.then55.i.i520:                                 ; preds = %if.end53.i.i519
  store i32 17, i32* %retval.i.i440, align 4, !dbg !10604
  br label %kmalloc_index.exit.i550, !dbg !10604

if.end56.i.i522:                                  ; preds = %if.end53.i.i519
  %198 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10605
  %cmp57.i.i521 = icmp ule i64 %198, 262144, !dbg !10606
  br i1 %cmp57.i.i521, label %if.then58.i.i523, label %if.end59.i.i525, !dbg !10607

if.then58.i.i523:                                 ; preds = %if.end56.i.i522
  store i32 18, i32* %retval.i.i440, align 4, !dbg !10608
  br label %kmalloc_index.exit.i550, !dbg !10608

if.end59.i.i525:                                  ; preds = %if.end56.i.i522
  %199 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10609
  %cmp60.i.i524 = icmp ule i64 %199, 524288, !dbg !10610
  br i1 %cmp60.i.i524, label %if.then61.i.i526, label %if.end62.i.i528, !dbg !10611

if.then61.i.i526:                                 ; preds = %if.end59.i.i525
  store i32 19, i32* %retval.i.i440, align 4, !dbg !10612
  br label %kmalloc_index.exit.i550, !dbg !10612

if.end62.i.i528:                                  ; preds = %if.end59.i.i525
  %200 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10613
  %cmp63.i.i527 = icmp ule i64 %200, 1048576, !dbg !10614
  br i1 %cmp63.i.i527, label %if.then64.i.i529, label %if.end65.i.i531, !dbg !10615

if.then64.i.i529:                                 ; preds = %if.end62.i.i528
  store i32 20, i32* %retval.i.i440, align 4, !dbg !10616
  br label %kmalloc_index.exit.i550, !dbg !10616

if.end65.i.i531:                                  ; preds = %if.end62.i.i528
  %201 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10617
  %cmp66.i.i530 = icmp ule i64 %201, 2097152, !dbg !10618
  br i1 %cmp66.i.i530, label %if.then67.i.i532, label %if.end68.i.i534, !dbg !10619

if.then67.i.i532:                                 ; preds = %if.end65.i.i531
  store i32 21, i32* %retval.i.i440, align 4, !dbg !10620
  br label %kmalloc_index.exit.i550, !dbg !10620

if.end68.i.i534:                                  ; preds = %if.end65.i.i531
  %202 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10621
  %cmp69.i.i533 = icmp ule i64 %202, 4194304, !dbg !10622
  br i1 %cmp69.i.i533, label %if.then70.i.i535, label %if.end71.i.i537, !dbg !10623

if.then70.i.i535:                                 ; preds = %if.end68.i.i534
  store i32 22, i32* %retval.i.i440, align 4, !dbg !10624
  br label %kmalloc_index.exit.i550, !dbg !10624

if.end71.i.i537:                                  ; preds = %if.end68.i.i534
  %203 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10625
  %cmp72.i.i536 = icmp ule i64 %203, 8388608, !dbg !10626
  br i1 %cmp72.i.i536, label %if.then73.i.i538, label %if.end74.i.i540, !dbg !10627

if.then73.i.i538:                                 ; preds = %if.end71.i.i537
  store i32 23, i32* %retval.i.i440, align 4, !dbg !10628
  br label %kmalloc_index.exit.i550, !dbg !10628

if.end74.i.i540:                                  ; preds = %if.end71.i.i537
  %204 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10629
  %cmp75.i.i539 = icmp ule i64 %204, 16777216, !dbg !10630
  br i1 %cmp75.i.i539, label %if.then76.i.i541, label %if.end77.i.i543, !dbg !10631

if.then76.i.i541:                                 ; preds = %if.end74.i.i540
  store i32 24, i32* %retval.i.i440, align 4, !dbg !10632
  br label %kmalloc_index.exit.i550, !dbg !10632

if.end77.i.i543:                                  ; preds = %if.end74.i.i540
  %205 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10633
  %cmp78.i.i542 = icmp ule i64 %205, 33554432, !dbg !10634
  br i1 %cmp78.i.i542, label %if.then79.i.i544, label %if.end80.i.i546, !dbg !10635

if.then79.i.i544:                                 ; preds = %if.end77.i.i543
  store i32 25, i32* %retval.i.i440, align 4, !dbg !10636
  br label %kmalloc_index.exit.i550, !dbg !10636

if.end80.i.i546:                                  ; preds = %if.end77.i.i543
  %206 = load i64, i64* %size.addr.i11.i441, align 8, !dbg !10637
  %cmp81.i.i545 = icmp ule i64 %206, 67108864, !dbg !10638
  br i1 %cmp81.i.i545, label %if.then82.i.i547, label %if.end83.i.i548, !dbg !10639

if.then82.i.i547:                                 ; preds = %if.end80.i.i546
  store i32 26, i32* %retval.i.i440, align 4, !dbg !10640
  br label %kmalloc_index.exit.i550, !dbg !10640

if.end83.i.i548:                                  ; preds = %if.end80.i.i546
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0), i32 382, i32 0, i64 12) #9, !dbg !10641, !srcloc !10199
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 159) #9, !dbg !10642, !srcloc !10203
  unreachable, !dbg !10643

kmalloc_index.exit.i550:                          ; preds = %if.then82.i.i547, %if.then79.i.i544, %if.then76.i.i541, %if.then73.i.i538, %if.then70.i.i535, %if.then67.i.i532, %if.then64.i.i529, %if.then61.i.i526, %if.then58.i.i523, %if.then55.i.i520, %if.then52.i.i517, %if.then49.i.i514, %if.then46.i.i511, %if.then43.i.i508, %if.then40.i.i505, %if.then37.i.i502, %if.then34.i.i499, %if.then31.i.i496, %if.then28.i.i493, %if.then25.i.i490, %if.then22.i.i487, %if.then19.i.i484, %if.then16.i.i481, %if.then13.i.i478, %if.then10.i.i475, %if.then5.i.i470, %if.then1.i.i465, %if.then.i.i462
  %207 = load i32, i32* %retval.i.i440, align 4, !dbg !10644
  store i32 %207, i32* %index.i451, align 4, !dbg !10645
  %208 = load i32, i32* %index.i451, align 4, !dbg !10646
  %tobool.i549 = icmp ne i32 %208, 0, !dbg !10646
  br i1 %tobool.i549, label %if.end4.i557, label %if.then3.i551, !dbg !10647

if.then3.i551:                                    ; preds = %kmalloc_index.exit.i550
  store i8* inttoptr (i64 16 to i8*), i8** %retval.i448, align 8, !dbg !10648
  br label %kmalloc.exit578, !dbg !10648

if.end4.i557:                                     ; preds = %kmalloc_index.exit.i550
  %209 = load i32, i32* %flags.addr.i450, align 4, !dbg !10649
  store i32 %209, i32* %flags.addr.i13.i439, align 4
  %210 = load i32, i32* %flags.addr.i13.i439, align 4, !dbg !10650
  %and.i.i552 = and i32 %210, 17, !dbg !10650
  %cmp.i14.i553 = icmp eq i32 %and.i.i552, 0, !dbg !10650
  %lnot.i.i554 = xor i1 %cmp.i14.i553, true, !dbg !10650
  %lnot.ext.i.i555 = zext i1 %cmp.i14.i553 to i32, !dbg !10650
  %conv.i.i556 = sext i32 %lnot.ext.i.i555 to i64, !dbg !10650
  br i1 %cmp.i14.i553, label %if.then.i15.i558, label %if.end.i16.i562, !dbg !10651

if.then.i15.i558:                                 ; preds = %if.end4.i557
  store i32 0, i32* %retval.i12.i438, align 4, !dbg !10652
  br label %kmalloc_type.exit.i572, !dbg !10652

if.end.i16.i562:                                  ; preds = %if.end4.i557
  %211 = load i32, i32* %flags.addr.i13.i439, align 4, !dbg !10653
  %and2.i.i559 = and i32 %211, 1, !dbg !10654
  %tobool3.i.i560 = icmp ne i32 %and2.i.i559, 0, !dbg !10653
  %212 = zext i1 %tobool3.i.i560 to i64, !dbg !10653
  %cond.i.i561 = select i1 %tobool3.i.i560, i32 2, i32 1, !dbg !10653
  store i32 %cond.i.i561, i32* %retval.i12.i438, align 4, !dbg !10655
  br label %kmalloc_type.exit.i572, !dbg !10655

kmalloc_type.exit.i572:                           ; preds = %if.end.i16.i562, %if.then.i15.i558
  %213 = load i32, i32* %retval.i12.i438, align 4, !dbg !10656
  %idxprom.i563 = zext i32 %213 to i64, !dbg !10657
  %arrayidx.i564 = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %idxprom.i563, !dbg !10657
  %214 = load i32, i32* %index.i451, align 4, !dbg !10658
  %idxprom6.i565 = zext i32 %214 to i64, !dbg !10657
  %arrayidx7.i566 = getelementptr [14 x %struct.kmem_cache*], [14 x %struct.kmem_cache*]* %arrayidx.i564, i64 0, i64 %idxprom6.i565, !dbg !10657
  %215 = load %struct.kmem_cache*, %struct.kmem_cache** %arrayidx7.i566, align 8, !dbg !10657
  %216 = load i32, i32* %flags.addr.i450, align 4, !dbg !10659
  %217 = load i64, i64* %size.addr.i449, align 8, !dbg !10660
  store %struct.kmem_cache* %215, %struct.kmem_cache** %s.addr.i.i434, align 8
  store i32 %216, i32* %flags.addr.i17.i435, align 4
  store i64 %217, i64* %size.addr.i18.i436, align 8
  %218 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i434, align 8, !dbg !10661
  %219 = load i32, i32* %flags.addr.i17.i435, align 4, !dbg !10662
  %call.i19.i567 = call noalias i8* @kmem_cache_alloc(%struct.kmem_cache* %218, i32 %219) #10, !dbg !10663
  %ptrint.i.i568 = ptrtoint i8* %call.i19.i567 to i64, !dbg !10663
  %maskedptr.i.i569 = and i64 %ptrint.i.i568, 7, !dbg !10663
  %maskcond.i.i570 = icmp eq i64 %maskedptr.i.i569, 0, !dbg !10663
  call void @llvm.assume(i1 %maskcond.i.i570) #9, !dbg !10663
  store i8* %call.i19.i567, i8** %ret.i.i437, align 8, !dbg !9952
  %220 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i434, align 8, !dbg !10664
  %221 = load i8*, i8** %ret.i.i437, align 8, !dbg !10665
  %222 = load i64, i64* %size.addr.i18.i436, align 8, !dbg !10666
  %223 = load i32, i32* %flags.addr.i17.i435, align 4, !dbg !10667
  %call1.i.i571 = call i8* @kasan_kmalloc(%struct.kmem_cache* %220, i8* %221, i64 %222, i32 %223) #10, !dbg !10668
  store i8* %call1.i.i571, i8** %ret.i.i437, align 8, !dbg !10669
  %224 = load i8*, i8** %ret.i.i437, align 8, !dbg !10670
  store i8* %224, i8** %retval.i448, align 8, !dbg !10671
  br label %kmalloc.exit578, !dbg !10671

if.end9.i577:                                     ; preds = %if.then234
  %225 = load i64, i64* %size.addr.i449, align 8, !dbg !10672
  %226 = load i32, i32* %flags.addr.i450, align 4, !dbg !10673
  %call10.i573 = call noalias i8* @__kmalloc(i64 %225, i32 %226) #10, !dbg !10674
  %ptrint.i574 = ptrtoint i8* %call10.i573 to i64, !dbg !10674
  %maskedptr.i575 = and i64 %ptrint.i574, 7, !dbg !10674
  %maskcond.i576 = icmp eq i64 %maskedptr.i575, 0, !dbg !10674
  call void @llvm.assume(i1 %maskcond.i576) #9, !dbg !10674
  store i8* %call10.i573, i8** %retval.i448, align 8, !dbg !10675
  br label %kmalloc.exit578, !dbg !10675

kmalloc.exit578:                                  ; preds = %if.then1.i459, %if.then3.i551, %kmalloc_type.exit.i572, %if.end9.i577
  %227 = load i8*, i8** %retval.i448, align 8, !dbg !10676
  %228 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10677
  %calc_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %228, i32 0, i32 12, !dbg !10678
  store i8* %227, i8** %calc_buf, align 8, !dbg !10679
  %229 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10680
  %oobsize238 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %229, i32 0, i32 6, !dbg !10681
  %230 = load i32, i32* %oobsize238, align 4, !dbg !10681
  %conv239 = zext i32 %230 to i64, !dbg !10680
  store i64 %conv239, i64* %size.addr.i594, align 8
  store i32 3264, i32* %flags.addr.i595, align 4
  %231 = load i64, i64* %size.addr.i594, align 8, !dbg !10682
  %232 = call i1 @llvm.is.constant.i64(i64 %231) #9, !dbg !10683
  br i1 %232, label %if.then.i598, label %if.end9.i722, !dbg !10684

if.then.i598:                                     ; preds = %kmalloc.exit578
  %233 = load i64, i64* %size.addr.i594, align 8, !dbg !10685
  %cmp.i597 = icmp ugt i64 %233, 8192, !dbg !10686
  br i1 %cmp.i597, label %if.then1.i604, label %if.end.i606, !dbg !10687

if.then1.i604:                                    ; preds = %if.then.i598
  %234 = load i64, i64* %size.addr.i594, align 8, !dbg !10688
  %235 = load i32, i32* %flags.addr.i595, align 4, !dbg !10689
  store i64 %234, i64* %size.addr.i.i590, align 8
  store i32 %235, i32* %flags.addr.i.i591, align 4
  %236 = load i64, i64* %size.addr.i.i590, align 8, !dbg !10690
  %call.i.i599 = call i32 @get_order(i64 %236) #14, !dbg !10691
  store i32 %call.i.i599, i32* %order.i.i592, align 4, !dbg !9940
  %237 = load i64, i64* %size.addr.i.i590, align 8, !dbg !10692
  %238 = load i32, i32* %flags.addr.i.i591, align 4, !dbg !10693
  %239 = load i32, i32* %order.i.i592, align 4, !dbg !10694
  store i64 %237, i64* %size.addr.i.i.i587, align 8
  store i32 %238, i32* %flags.addr.i.i.i588, align 4
  store i32 %239, i32* %order.addr.i.i.i589, align 4
  %240 = load i64, i64* %size.addr.i.i.i587, align 8, !dbg !10695
  %241 = load i32, i32* %flags.addr.i.i.i588, align 4, !dbg !10696
  %242 = load i32, i32* %order.addr.i.i.i589, align 4, !dbg !10697
  %call.i.i.i600 = call noalias i8* @kmalloc_order(i64 %240, i32 %241, i32 %242) #10, !dbg !10698
  %ptrint.i.i.i601 = ptrtoint i8* %call.i.i.i600 to i64, !dbg !10698
  %maskedptr.i.i.i602 = and i64 %ptrint.i.i.i601, 4095, !dbg !10698
  %maskcond.i.i.i603 = icmp eq i64 %maskedptr.i.i.i602, 0, !dbg !10698
  call void @llvm.assume(i1 %maskcond.i.i.i603) #9, !dbg !10698
  store i8* %call.i.i.i600, i8** %retval.i593, align 8, !dbg !10699
  br label %kmalloc.exit723, !dbg !10699

if.end.i606:                                      ; preds = %if.then.i598
  %243 = load i64, i64* %size.addr.i594, align 8, !dbg !10700
  store i64 %243, i64* %size.addr.i11.i586, align 8
  %244 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10701
  %tobool.i.i605 = icmp ne i64 %244, 0, !dbg !10701
  br i1 %tobool.i.i605, label %if.end.i.i609, label %if.then.i.i607, !dbg !10702

if.then.i.i607:                                   ; preds = %if.end.i606
  store i32 0, i32* %retval.i.i585, align 4, !dbg !10703
  br label %kmalloc_index.exit.i695, !dbg !10703

if.end.i.i609:                                    ; preds = %if.end.i606
  %245 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10704
  %cmp.i.i608 = icmp ule i64 %245, 8, !dbg !10705
  br i1 %cmp.i.i608, label %if.then1.i.i610, label %if.end2.i.i612, !dbg !10706

if.then1.i.i610:                                  ; preds = %if.end.i.i609
  store i32 3, i32* %retval.i.i585, align 4, !dbg !10707
  br label %kmalloc_index.exit.i695, !dbg !10707

if.end2.i.i612:                                   ; preds = %if.end.i.i609
  %246 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10708
  %cmp3.i.i611 = icmp ugt i64 %246, 64, !dbg !10709
  br i1 %cmp3.i.i611, label %land.lhs.true.i.i614, label %if.end6.i.i617, !dbg !10710

land.lhs.true.i.i614:                             ; preds = %if.end2.i.i612
  %247 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10711
  %cmp4.i.i613 = icmp ule i64 %247, 96, !dbg !10712
  br i1 %cmp4.i.i613, label %if.then5.i.i615, label %if.end6.i.i617, !dbg !10713

if.then5.i.i615:                                  ; preds = %land.lhs.true.i.i614
  store i32 1, i32* %retval.i.i585, align 4, !dbg !10714
  br label %kmalloc_index.exit.i695, !dbg !10714

if.end6.i.i617:                                   ; preds = %land.lhs.true.i.i614, %if.end2.i.i612
  %248 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10715
  %cmp7.i.i616 = icmp ugt i64 %248, 128, !dbg !10716
  br i1 %cmp7.i.i616, label %land.lhs.true8.i.i619, label %if.end11.i.i622, !dbg !10717

land.lhs.true8.i.i619:                            ; preds = %if.end6.i.i617
  %249 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10718
  %cmp9.i.i618 = icmp ule i64 %249, 192, !dbg !10719
  br i1 %cmp9.i.i618, label %if.then10.i.i620, label %if.end11.i.i622, !dbg !10720

if.then10.i.i620:                                 ; preds = %land.lhs.true8.i.i619
  store i32 2, i32* %retval.i.i585, align 4, !dbg !10721
  br label %kmalloc_index.exit.i695, !dbg !10721

if.end11.i.i622:                                  ; preds = %land.lhs.true8.i.i619, %if.end6.i.i617
  %250 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10722
  %cmp12.i.i621 = icmp ule i64 %250, 8, !dbg !10723
  br i1 %cmp12.i.i621, label %if.then13.i.i623, label %if.end14.i.i625, !dbg !10724

if.then13.i.i623:                                 ; preds = %if.end11.i.i622
  store i32 3, i32* %retval.i.i585, align 4, !dbg !10725
  br label %kmalloc_index.exit.i695, !dbg !10725

if.end14.i.i625:                                  ; preds = %if.end11.i.i622
  %251 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10726
  %cmp15.i.i624 = icmp ule i64 %251, 16, !dbg !10727
  br i1 %cmp15.i.i624, label %if.then16.i.i626, label %if.end17.i.i628, !dbg !10728

if.then16.i.i626:                                 ; preds = %if.end14.i.i625
  store i32 4, i32* %retval.i.i585, align 4, !dbg !10729
  br label %kmalloc_index.exit.i695, !dbg !10729

if.end17.i.i628:                                  ; preds = %if.end14.i.i625
  %252 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10730
  %cmp18.i.i627 = icmp ule i64 %252, 32, !dbg !10731
  br i1 %cmp18.i.i627, label %if.then19.i.i629, label %if.end20.i.i631, !dbg !10732

if.then19.i.i629:                                 ; preds = %if.end17.i.i628
  store i32 5, i32* %retval.i.i585, align 4, !dbg !10733
  br label %kmalloc_index.exit.i695, !dbg !10733

if.end20.i.i631:                                  ; preds = %if.end17.i.i628
  %253 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10734
  %cmp21.i.i630 = icmp ule i64 %253, 64, !dbg !10735
  br i1 %cmp21.i.i630, label %if.then22.i.i632, label %if.end23.i.i634, !dbg !10736

if.then22.i.i632:                                 ; preds = %if.end20.i.i631
  store i32 6, i32* %retval.i.i585, align 4, !dbg !10737
  br label %kmalloc_index.exit.i695, !dbg !10737

if.end23.i.i634:                                  ; preds = %if.end20.i.i631
  %254 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10738
  %cmp24.i.i633 = icmp ule i64 %254, 128, !dbg !10739
  br i1 %cmp24.i.i633, label %if.then25.i.i635, label %if.end26.i.i637, !dbg !10740

if.then25.i.i635:                                 ; preds = %if.end23.i.i634
  store i32 7, i32* %retval.i.i585, align 4, !dbg !10741
  br label %kmalloc_index.exit.i695, !dbg !10741

if.end26.i.i637:                                  ; preds = %if.end23.i.i634
  %255 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10742
  %cmp27.i.i636 = icmp ule i64 %255, 256, !dbg !10743
  br i1 %cmp27.i.i636, label %if.then28.i.i638, label %if.end29.i.i640, !dbg !10744

if.then28.i.i638:                                 ; preds = %if.end26.i.i637
  store i32 8, i32* %retval.i.i585, align 4, !dbg !10745
  br label %kmalloc_index.exit.i695, !dbg !10745

if.end29.i.i640:                                  ; preds = %if.end26.i.i637
  %256 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10746
  %cmp30.i.i639 = icmp ule i64 %256, 512, !dbg !10747
  br i1 %cmp30.i.i639, label %if.then31.i.i641, label %if.end32.i.i643, !dbg !10748

if.then31.i.i641:                                 ; preds = %if.end29.i.i640
  store i32 9, i32* %retval.i.i585, align 4, !dbg !10749
  br label %kmalloc_index.exit.i695, !dbg !10749

if.end32.i.i643:                                  ; preds = %if.end29.i.i640
  %257 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10750
  %cmp33.i.i642 = icmp ule i64 %257, 1024, !dbg !10751
  br i1 %cmp33.i.i642, label %if.then34.i.i644, label %if.end35.i.i646, !dbg !10752

if.then34.i.i644:                                 ; preds = %if.end32.i.i643
  store i32 10, i32* %retval.i.i585, align 4, !dbg !10753
  br label %kmalloc_index.exit.i695, !dbg !10753

if.end35.i.i646:                                  ; preds = %if.end32.i.i643
  %258 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10754
  %cmp36.i.i645 = icmp ule i64 %258, 2048, !dbg !10755
  br i1 %cmp36.i.i645, label %if.then37.i.i647, label %if.end38.i.i649, !dbg !10756

if.then37.i.i647:                                 ; preds = %if.end35.i.i646
  store i32 11, i32* %retval.i.i585, align 4, !dbg !10757
  br label %kmalloc_index.exit.i695, !dbg !10757

if.end38.i.i649:                                  ; preds = %if.end35.i.i646
  %259 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10758
  %cmp39.i.i648 = icmp ule i64 %259, 4096, !dbg !10759
  br i1 %cmp39.i.i648, label %if.then40.i.i650, label %if.end41.i.i652, !dbg !10760

if.then40.i.i650:                                 ; preds = %if.end38.i.i649
  store i32 12, i32* %retval.i.i585, align 4, !dbg !10761
  br label %kmalloc_index.exit.i695, !dbg !10761

if.end41.i.i652:                                  ; preds = %if.end38.i.i649
  %260 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10762
  %cmp42.i.i651 = icmp ule i64 %260, 8192, !dbg !10763
  br i1 %cmp42.i.i651, label %if.then43.i.i653, label %if.end44.i.i655, !dbg !10764

if.then43.i.i653:                                 ; preds = %if.end41.i.i652
  store i32 13, i32* %retval.i.i585, align 4, !dbg !10765
  br label %kmalloc_index.exit.i695, !dbg !10765

if.end44.i.i655:                                  ; preds = %if.end41.i.i652
  %261 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10766
  %cmp45.i.i654 = icmp ule i64 %261, 16384, !dbg !10767
  br i1 %cmp45.i.i654, label %if.then46.i.i656, label %if.end47.i.i658, !dbg !10768

if.then46.i.i656:                                 ; preds = %if.end44.i.i655
  store i32 14, i32* %retval.i.i585, align 4, !dbg !10769
  br label %kmalloc_index.exit.i695, !dbg !10769

if.end47.i.i658:                                  ; preds = %if.end44.i.i655
  %262 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10770
  %cmp48.i.i657 = icmp ule i64 %262, 32768, !dbg !10771
  br i1 %cmp48.i.i657, label %if.then49.i.i659, label %if.end50.i.i661, !dbg !10772

if.then49.i.i659:                                 ; preds = %if.end47.i.i658
  store i32 15, i32* %retval.i.i585, align 4, !dbg !10773
  br label %kmalloc_index.exit.i695, !dbg !10773

if.end50.i.i661:                                  ; preds = %if.end47.i.i658
  %263 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10774
  %cmp51.i.i660 = icmp ule i64 %263, 65536, !dbg !10775
  br i1 %cmp51.i.i660, label %if.then52.i.i662, label %if.end53.i.i664, !dbg !10776

if.then52.i.i662:                                 ; preds = %if.end50.i.i661
  store i32 16, i32* %retval.i.i585, align 4, !dbg !10777
  br label %kmalloc_index.exit.i695, !dbg !10777

if.end53.i.i664:                                  ; preds = %if.end50.i.i661
  %264 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10778
  %cmp54.i.i663 = icmp ule i64 %264, 131072, !dbg !10779
  br i1 %cmp54.i.i663, label %if.then55.i.i665, label %if.end56.i.i667, !dbg !10780

if.then55.i.i665:                                 ; preds = %if.end53.i.i664
  store i32 17, i32* %retval.i.i585, align 4, !dbg !10781
  br label %kmalloc_index.exit.i695, !dbg !10781

if.end56.i.i667:                                  ; preds = %if.end53.i.i664
  %265 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10782
  %cmp57.i.i666 = icmp ule i64 %265, 262144, !dbg !10783
  br i1 %cmp57.i.i666, label %if.then58.i.i668, label %if.end59.i.i670, !dbg !10784

if.then58.i.i668:                                 ; preds = %if.end56.i.i667
  store i32 18, i32* %retval.i.i585, align 4, !dbg !10785
  br label %kmalloc_index.exit.i695, !dbg !10785

if.end59.i.i670:                                  ; preds = %if.end56.i.i667
  %266 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10786
  %cmp60.i.i669 = icmp ule i64 %266, 524288, !dbg !10787
  br i1 %cmp60.i.i669, label %if.then61.i.i671, label %if.end62.i.i673, !dbg !10788

if.then61.i.i671:                                 ; preds = %if.end59.i.i670
  store i32 19, i32* %retval.i.i585, align 4, !dbg !10789
  br label %kmalloc_index.exit.i695, !dbg !10789

if.end62.i.i673:                                  ; preds = %if.end59.i.i670
  %267 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10790
  %cmp63.i.i672 = icmp ule i64 %267, 1048576, !dbg !10791
  br i1 %cmp63.i.i672, label %if.then64.i.i674, label %if.end65.i.i676, !dbg !10792

if.then64.i.i674:                                 ; preds = %if.end62.i.i673
  store i32 20, i32* %retval.i.i585, align 4, !dbg !10793
  br label %kmalloc_index.exit.i695, !dbg !10793

if.end65.i.i676:                                  ; preds = %if.end62.i.i673
  %268 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10794
  %cmp66.i.i675 = icmp ule i64 %268, 2097152, !dbg !10795
  br i1 %cmp66.i.i675, label %if.then67.i.i677, label %if.end68.i.i679, !dbg !10796

if.then67.i.i677:                                 ; preds = %if.end65.i.i676
  store i32 21, i32* %retval.i.i585, align 4, !dbg !10797
  br label %kmalloc_index.exit.i695, !dbg !10797

if.end68.i.i679:                                  ; preds = %if.end65.i.i676
  %269 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10798
  %cmp69.i.i678 = icmp ule i64 %269, 4194304, !dbg !10799
  br i1 %cmp69.i.i678, label %if.then70.i.i680, label %if.end71.i.i682, !dbg !10800

if.then70.i.i680:                                 ; preds = %if.end68.i.i679
  store i32 22, i32* %retval.i.i585, align 4, !dbg !10801
  br label %kmalloc_index.exit.i695, !dbg !10801

if.end71.i.i682:                                  ; preds = %if.end68.i.i679
  %270 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10802
  %cmp72.i.i681 = icmp ule i64 %270, 8388608, !dbg !10803
  br i1 %cmp72.i.i681, label %if.then73.i.i683, label %if.end74.i.i685, !dbg !10804

if.then73.i.i683:                                 ; preds = %if.end71.i.i682
  store i32 23, i32* %retval.i.i585, align 4, !dbg !10805
  br label %kmalloc_index.exit.i695, !dbg !10805

if.end74.i.i685:                                  ; preds = %if.end71.i.i682
  %271 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10806
  %cmp75.i.i684 = icmp ule i64 %271, 16777216, !dbg !10807
  br i1 %cmp75.i.i684, label %if.then76.i.i686, label %if.end77.i.i688, !dbg !10808

if.then76.i.i686:                                 ; preds = %if.end74.i.i685
  store i32 24, i32* %retval.i.i585, align 4, !dbg !10809
  br label %kmalloc_index.exit.i695, !dbg !10809

if.end77.i.i688:                                  ; preds = %if.end74.i.i685
  %272 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10810
  %cmp78.i.i687 = icmp ule i64 %272, 33554432, !dbg !10811
  br i1 %cmp78.i.i687, label %if.then79.i.i689, label %if.end80.i.i691, !dbg !10812

if.then79.i.i689:                                 ; preds = %if.end77.i.i688
  store i32 25, i32* %retval.i.i585, align 4, !dbg !10813
  br label %kmalloc_index.exit.i695, !dbg !10813

if.end80.i.i691:                                  ; preds = %if.end77.i.i688
  %273 = load i64, i64* %size.addr.i11.i586, align 8, !dbg !10814
  %cmp81.i.i690 = icmp ule i64 %273, 67108864, !dbg !10815
  br i1 %cmp81.i.i690, label %if.then82.i.i692, label %if.end83.i.i693, !dbg !10816

if.then82.i.i692:                                 ; preds = %if.end80.i.i691
  store i32 26, i32* %retval.i.i585, align 4, !dbg !10817
  br label %kmalloc_index.exit.i695, !dbg !10817

if.end83.i.i693:                                  ; preds = %if.end80.i.i691
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0), i32 382, i32 0, i64 12) #9, !dbg !10818, !srcloc !10199
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 159) #9, !dbg !10819, !srcloc !10203
  unreachable, !dbg !10820

kmalloc_index.exit.i695:                          ; preds = %if.then82.i.i692, %if.then79.i.i689, %if.then76.i.i686, %if.then73.i.i683, %if.then70.i.i680, %if.then67.i.i677, %if.then64.i.i674, %if.then61.i.i671, %if.then58.i.i668, %if.then55.i.i665, %if.then52.i.i662, %if.then49.i.i659, %if.then46.i.i656, %if.then43.i.i653, %if.then40.i.i650, %if.then37.i.i647, %if.then34.i.i644, %if.then31.i.i641, %if.then28.i.i638, %if.then25.i.i635, %if.then22.i.i632, %if.then19.i.i629, %if.then16.i.i626, %if.then13.i.i623, %if.then10.i.i620, %if.then5.i.i615, %if.then1.i.i610, %if.then.i.i607
  %274 = load i32, i32* %retval.i.i585, align 4, !dbg !10821
  store i32 %274, i32* %index.i596, align 4, !dbg !10822
  %275 = load i32, i32* %index.i596, align 4, !dbg !10823
  %tobool.i694 = icmp ne i32 %275, 0, !dbg !10823
  br i1 %tobool.i694, label %if.end4.i702, label %if.then3.i696, !dbg !10824

if.then3.i696:                                    ; preds = %kmalloc_index.exit.i695
  store i8* inttoptr (i64 16 to i8*), i8** %retval.i593, align 8, !dbg !10825
  br label %kmalloc.exit723, !dbg !10825

if.end4.i702:                                     ; preds = %kmalloc_index.exit.i695
  %276 = load i32, i32* %flags.addr.i595, align 4, !dbg !10826
  store i32 %276, i32* %flags.addr.i13.i584, align 4
  %277 = load i32, i32* %flags.addr.i13.i584, align 4, !dbg !10827
  %and.i.i697 = and i32 %277, 17, !dbg !10827
  %cmp.i14.i698 = icmp eq i32 %and.i.i697, 0, !dbg !10827
  %lnot.i.i699 = xor i1 %cmp.i14.i698, true, !dbg !10827
  %lnot.ext.i.i700 = zext i1 %cmp.i14.i698 to i32, !dbg !10827
  %conv.i.i701 = sext i32 %lnot.ext.i.i700 to i64, !dbg !10827
  br i1 %cmp.i14.i698, label %if.then.i15.i703, label %if.end.i16.i707, !dbg !10828

if.then.i15.i703:                                 ; preds = %if.end4.i702
  store i32 0, i32* %retval.i12.i583, align 4, !dbg !10829
  br label %kmalloc_type.exit.i717, !dbg !10829

if.end.i16.i707:                                  ; preds = %if.end4.i702
  %278 = load i32, i32* %flags.addr.i13.i584, align 4, !dbg !10830
  %and2.i.i704 = and i32 %278, 1, !dbg !10831
  %tobool3.i.i705 = icmp ne i32 %and2.i.i704, 0, !dbg !10830
  %279 = zext i1 %tobool3.i.i705 to i64, !dbg !10830
  %cond.i.i706 = select i1 %tobool3.i.i705, i32 2, i32 1, !dbg !10830
  store i32 %cond.i.i706, i32* %retval.i12.i583, align 4, !dbg !10832
  br label %kmalloc_type.exit.i717, !dbg !10832

kmalloc_type.exit.i717:                           ; preds = %if.end.i16.i707, %if.then.i15.i703
  %280 = load i32, i32* %retval.i12.i583, align 4, !dbg !10833
  %idxprom.i708 = zext i32 %280 to i64, !dbg !10834
  %arrayidx.i709 = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %idxprom.i708, !dbg !10834
  %281 = load i32, i32* %index.i596, align 4, !dbg !10835
  %idxprom6.i710 = zext i32 %281 to i64, !dbg !10834
  %arrayidx7.i711 = getelementptr [14 x %struct.kmem_cache*], [14 x %struct.kmem_cache*]* %arrayidx.i709, i64 0, i64 %idxprom6.i710, !dbg !10834
  %282 = load %struct.kmem_cache*, %struct.kmem_cache** %arrayidx7.i711, align 8, !dbg !10834
  %283 = load i32, i32* %flags.addr.i595, align 4, !dbg !10836
  %284 = load i64, i64* %size.addr.i594, align 8, !dbg !10837
  store %struct.kmem_cache* %282, %struct.kmem_cache** %s.addr.i.i579, align 8
  store i32 %283, i32* %flags.addr.i17.i580, align 4
  store i64 %284, i64* %size.addr.i18.i581, align 8
  %285 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i579, align 8, !dbg !10838
  %286 = load i32, i32* %flags.addr.i17.i580, align 4, !dbg !10839
  %call.i19.i712 = call noalias i8* @kmem_cache_alloc(%struct.kmem_cache* %285, i32 %286) #10, !dbg !10840
  %ptrint.i.i713 = ptrtoint i8* %call.i19.i712 to i64, !dbg !10840
  %maskedptr.i.i714 = and i64 %ptrint.i.i713, 7, !dbg !10840
  %maskcond.i.i715 = icmp eq i64 %maskedptr.i.i714, 0, !dbg !10840
  call void @llvm.assume(i1 %maskcond.i.i715) #9, !dbg !10840
  store i8* %call.i19.i712, i8** %ret.i.i582, align 8, !dbg !9909
  %287 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i579, align 8, !dbg !10841
  %288 = load i8*, i8** %ret.i.i582, align 8, !dbg !10842
  %289 = load i64, i64* %size.addr.i18.i581, align 8, !dbg !10843
  %290 = load i32, i32* %flags.addr.i17.i580, align 4, !dbg !10844
  %call1.i.i716 = call i8* @kasan_kmalloc(%struct.kmem_cache* %287, i8* %288, i64 %289, i32 %290) #10, !dbg !10845
  store i8* %call1.i.i716, i8** %ret.i.i582, align 8, !dbg !10846
  %291 = load i8*, i8** %ret.i.i582, align 8, !dbg !10847
  store i8* %291, i8** %retval.i593, align 8, !dbg !10848
  br label %kmalloc.exit723, !dbg !10848

if.end9.i722:                                     ; preds = %kmalloc.exit578
  %292 = load i64, i64* %size.addr.i594, align 8, !dbg !10849
  %293 = load i32, i32* %flags.addr.i595, align 4, !dbg !10850
  %call10.i718 = call noalias i8* @__kmalloc(i64 %292, i32 %293) #10, !dbg !10851
  %ptrint.i719 = ptrtoint i8* %call10.i718 to i64, !dbg !10851
  %maskedptr.i720 = and i64 %ptrint.i719, 7, !dbg !10851
  %maskcond.i721 = icmp eq i64 %maskedptr.i720, 0, !dbg !10851
  call void @llvm.assume(i1 %maskcond.i721) #9, !dbg !10851
  store i8* %call10.i718, i8** %retval.i593, align 8, !dbg !10852
  br label %kmalloc.exit723, !dbg !10852

kmalloc.exit723:                                  ; preds = %if.then1.i604, %if.then3.i696, %kmalloc_type.exit.i717, %if.end9.i722
  %294 = load i8*, i8** %retval.i593, align 8, !dbg !10853
  %295 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10854
  %code_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %295, i32 0, i32 13, !dbg !10855
  store i8* %294, i8** %code_buf, align 8, !dbg !10856
  %296 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10857
  %calc_buf241 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %296, i32 0, i32 12, !dbg !10859
  %297 = load i8*, i8** %calc_buf241, align 8, !dbg !10859
  %tobool242 = icmp ne i8* %297, null, !dbg !10857
  br i1 %tobool242, label %lor.lhs.false243, label %if.then246, !dbg !10860

lor.lhs.false243:                                 ; preds = %kmalloc.exit723
  %298 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10861
  %code_buf244 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %298, i32 0, i32 13, !dbg !10862
  %299 = load i8*, i8** %code_buf244, align 8, !dbg !10862
  %tobool245 = icmp ne i8* %299, null, !dbg !10861
  br i1 %tobool245, label %if.end247, label %if.then246, !dbg !10863

if.then246:                                       ; preds = %lor.lhs.false243, %kmalloc.exit723
  store i32 -12, i32* %ret, align 4, !dbg !10864
  br label %err_nand_manuf_cleanup, !dbg !10866

if.end247:                                        ; preds = %lor.lhs.false243
  br label %if.end248, !dbg !10867

if.end248:                                        ; preds = %if.end247, %lor.lhs.false232
  %300 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10868
  %read_oob_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %300, i32 0, i32 24, !dbg !10870
  %301 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %read_oob_raw, align 8, !dbg !10870
  %tobool249 = icmp ne i32 (%struct.nand_chip*, i32)* %301, null, !dbg !10868
  br i1 %tobool249, label %if.end253, label %if.then250, !dbg !10871

if.then250:                                       ; preds = %if.end248
  %302 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10872
  %read_oob251 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %302, i32 0, i32 25, !dbg !10873
  %303 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %read_oob251, align 8, !dbg !10873
  %304 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10874
  %read_oob_raw252 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %304, i32 0, i32 24, !dbg !10875
  store i32 (%struct.nand_chip*, i32)* %303, i32 (%struct.nand_chip*, i32)** %read_oob_raw252, align 8, !dbg !10876
  br label %if.end253, !dbg !10874

if.end253:                                        ; preds = %if.then250, %if.end248
  %305 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10877
  %write_oob_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %305, i32 0, i32 23, !dbg !10879
  %306 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %write_oob_raw, align 8, !dbg !10879
  %tobool254 = icmp ne i32 (%struct.nand_chip*, i32)* %306, null, !dbg !10877
  br i1 %tobool254, label %if.end258, label %if.then255, !dbg !10880

if.then255:                                       ; preds = %if.end253
  %307 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10881
  %write_oob256 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %307, i32 0, i32 26, !dbg !10882
  %308 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %write_oob256, align 8, !dbg !10882
  %309 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10883
  %write_oob_raw257 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %309, i32 0, i32 23, !dbg !10884
  store i32 (%struct.nand_chip*, i32)* %308, i32 (%struct.nand_chip*, i32)** %write_oob_raw257, align 8, !dbg !10885
  br label %if.end258, !dbg !10883

if.end258:                                        ; preds = %if.then255, %if.end253
  %310 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10886
  %strength259 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %310, i32 0, i32 7, !dbg !10887
  %311 = load i32, i32* %strength259, align 4, !dbg !10887
  %312 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10888
  %ecc_strength = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %312, i32 0, i32 18, !dbg !10889
  store i32 %311, i32* %ecc_strength, align 4, !dbg !10890
  %313 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10891
  %size260 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %313, i32 0, i32 4, !dbg !10892
  %314 = load i32, i32* %size260, align 8, !dbg !10892
  %315 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10893
  %ecc_step_size = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %315, i32 0, i32 17, !dbg !10894
  store i32 %314, i32* %ecc_step_size, align 8, !dbg !10895
  %316 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10896
  %writesize261 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %316, i32 0, i32 4, !dbg !10897
  %317 = load i32, i32* %writesize261, align 4, !dbg !10897
  %318 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10898
  %size262 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %318, i32 0, i32 4, !dbg !10899
  %319 = load i32, i32* %size262, align 8, !dbg !10899
  %div = udiv i32 %317, %319, !dbg !10900
  %320 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10901
  %steps = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %320, i32 0, i32 3, !dbg !10902
  store i32 %div, i32* %steps, align 4, !dbg !10903
  %321 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10904
  %steps263 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %321, i32 0, i32 3, !dbg !10906
  %322 = load i32, i32* %steps263, align 4, !dbg !10906
  %323 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10907
  %size264 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %323, i32 0, i32 4, !dbg !10908
  %324 = load i32, i32* %size264, align 8, !dbg !10908
  %mul = mul i32 %322, %324, !dbg !10909
  %325 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10910
  %writesize265 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %325, i32 0, i32 4, !dbg !10911
  %326 = load i32, i32* %writesize265, align 4, !dbg !10911
  %cmp266 = icmp ne i32 %mul, %326, !dbg !10912
  br i1 %cmp266, label %if.then268, label %if.end300, !dbg !10913

if.then268:                                       ; preds = %if.end258
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on269, metadata !10914, metadata !DIExpression()), !dbg !10917
  store i32 1, i32* %__ret_warn_on269, align 4, !dbg !10917
  %327 = load i32, i32* %__ret_warn_on269, align 4, !dbg !10918
  %tobool270 = icmp ne i32 %327, 0, !dbg !10918
  %lnot271 = xor i1 %tobool270, true, !dbg !10918
  %lnot273 = xor i1 %lnot271, true, !dbg !10918
  %lnot.ext274 = zext i1 %lnot273 to i32, !dbg !10918
  %conv275 = sext i32 %lnot.ext274 to i64, !dbg !10918
  %tobool276 = icmp ne i64 %conv275, 0, !dbg !10918
  br i1 %tobool276, label %if.then277, label %if.end292, !dbg !10917

if.then277:                                       ; preds = %if.then268
  br label %do.body278, !dbg !10918

do.body278:                                       ; preds = %if.then277
  br label %do.body279, !dbg !10920

do.body279:                                       ; preds = %do.body278
  br label %do.end280, !dbg !10922

do.end280:                                        ; preds = %do.body279
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.37, i64 0, i64 0)) #8, !dbg !10920
  br label %do.body281, !dbg !10920

do.body281:                                       ; preds = %do.end280
  br label %do.body282, !dbg !10924

do.body282:                                       ; preds = %do.body281
  br label %do.end283, !dbg !10926

do.end283:                                        ; preds = %do.body282
  br label %do.body284, !dbg !10924

do.body284:                                       ; preds = %do.end283
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5761, i32 2313, i64 12) #9, !dbg !10928, !srcloc !10930
  br label %do.end285, !dbg !10928

do.end285:                                        ; preds = %do.body284
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 307) #9, !dbg !10931, !srcloc !10933
  br label %do.body286, !dbg !10924

do.body286:                                       ; preds = %do.end285
  br label %do.end287, !dbg !10934

do.end287:                                        ; preds = %do.body286
  br label %do.end288, !dbg !10924

do.end288:                                        ; preds = %do.end287
  br label %do.body289, !dbg !10920

do.body289:                                       ; preds = %do.end288
  br label %do.end290, !dbg !10936

do.end290:                                        ; preds = %do.body289
  br label %do.end291, !dbg !10920

do.end291:                                        ; preds = %do.end290
  br label %if.end292, !dbg !10920

if.end292:                                        ; preds = %do.end291, %if.then268
  %328 = load i32, i32* %__ret_warn_on269, align 4, !dbg !10917
  %tobool294 = icmp ne i32 %328, 0, !dbg !10917
  %lnot295 = xor i1 %tobool294, true, !dbg !10917
  %lnot297 = xor i1 %lnot295, true, !dbg !10917
  %lnot.ext298 = zext i1 %lnot297 to i32, !dbg !10917
  %conv299 = sext i32 %lnot.ext298 to i64, !dbg !10917
  store i64 %conv299, i64* %tmp293, align 8, !dbg !10918
  %329 = load i64, i64* %tmp293, align 8, !dbg !10917
  store i32 -22, i32* %ret, align 4, !dbg !10938
  br label %err_nand_manuf_cleanup, !dbg !10939

if.end300:                                        ; preds = %if.end258
  %330 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10940
  %steps301 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %330, i32 0, i32 3, !dbg !10941
  %331 = load i32, i32* %steps301, align 4, !dbg !10941
  %332 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10942
  %bytes302 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %332, i32 0, i32 5, !dbg !10943
  %333 = load i32, i32* %bytes302, align 4, !dbg !10943
  %mul303 = mul i32 %331, %333, !dbg !10944
  %334 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10945
  %total = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %334, i32 0, i32 6, !dbg !10946
  store i32 %mul303, i32* %total, align 8, !dbg !10947
  %335 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10948
  %total304 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %335, i32 0, i32 6, !dbg !10949
  %336 = load i32, i32* %total304, align 8, !dbg !10949
  %337 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !10950
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %337, i32 0, i32 0, !dbg !10951
  %ecc305 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %base, i32 0, i32 2, !dbg !10952
  %ctx = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc305, i32 0, i32 3, !dbg !10953
  %total306 = getelementptr inbounds %struct.nand_ecc_context, %struct.nand_ecc_context* %ctx, i32 0, i32 1, !dbg !10954
  store i32 %336, i32* %total306, align 8, !dbg !10955
  %338 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !10956
  %total307 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %338, i32 0, i32 6, !dbg !10958
  %339 = load i32, i32* %total307, align 8, !dbg !10958
  %340 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10959
  %oobsize308 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %340, i32 0, i32 6, !dbg !10960
  %341 = load i32, i32* %oobsize308, align 4, !dbg !10960
  %cmp309 = icmp ugt i32 %339, %341, !dbg !10961
  br i1 %cmp309, label %if.then311, label %if.end343, !dbg !10962

if.then311:                                       ; preds = %if.end300
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on312, metadata !10963, metadata !DIExpression()), !dbg !10966
  store i32 1, i32* %__ret_warn_on312, align 4, !dbg !10966
  %342 = load i32, i32* %__ret_warn_on312, align 4, !dbg !10967
  %tobool313 = icmp ne i32 %342, 0, !dbg !10967
  %lnot314 = xor i1 %tobool313, true, !dbg !10967
  %lnot316 = xor i1 %lnot314, true, !dbg !10967
  %lnot.ext317 = zext i1 %lnot316 to i32, !dbg !10967
  %conv318 = sext i32 %lnot.ext317 to i64, !dbg !10967
  %tobool319 = icmp ne i64 %conv318, 0, !dbg !10967
  br i1 %tobool319, label %if.then320, label %if.end335, !dbg !10966

if.then320:                                       ; preds = %if.then311
  br label %do.body321, !dbg !10967

do.body321:                                       ; preds = %if.then320
  br label %do.body322, !dbg !10969

do.body322:                                       ; preds = %do.body321
  br label %do.end323, !dbg !10971

do.end323:                                        ; preds = %do.body322
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.38, i64 0, i64 0)) #8, !dbg !10969
  br label %do.body324, !dbg !10969

do.body324:                                       ; preds = %do.end323
  br label %do.body325, !dbg !10973

do.body325:                                       ; preds = %do.body324
  br label %do.end326, !dbg !10975

do.end326:                                        ; preds = %do.body325
  br label %do.body327, !dbg !10973

do.body327:                                       ; preds = %do.end326
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5770, i32 2313, i64 12) #9, !dbg !10977, !srcloc !10979
  br label %do.end328, !dbg !10977

do.end328:                                        ; preds = %do.body327
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 308) #9, !dbg !10980, !srcloc !10982
  br label %do.body329, !dbg !10973

do.body329:                                       ; preds = %do.end328
  br label %do.end330, !dbg !10983

do.end330:                                        ; preds = %do.body329
  br label %do.end331, !dbg !10973

do.end331:                                        ; preds = %do.end330
  br label %do.body332, !dbg !10969

do.body332:                                       ; preds = %do.end331
  br label %do.end333, !dbg !10985

do.end333:                                        ; preds = %do.body332
  br label %do.end334, !dbg !10969

do.end334:                                        ; preds = %do.end333
  br label %if.end335, !dbg !10969

if.end335:                                        ; preds = %do.end334, %if.then311
  %343 = load i32, i32* %__ret_warn_on312, align 4, !dbg !10966
  %tobool337 = icmp ne i32 %343, 0, !dbg !10966
  %lnot338 = xor i1 %tobool337, true, !dbg !10966
  %lnot340 = xor i1 %lnot338, true, !dbg !10966
  %lnot.ext341 = zext i1 %lnot340 to i32, !dbg !10966
  %conv342 = sext i32 %lnot.ext341 to i64, !dbg !10966
  store i64 %conv342, i64* %tmp336, align 8, !dbg !10967
  %344 = load i64, i64* %tmp336, align 8, !dbg !10966
  store i32 -22, i32* %ret, align 4, !dbg !10987
  br label %err_nand_manuf_cleanup, !dbg !10988

if.end343:                                        ; preds = %if.end300
  %345 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10989
  %call344 = call i32 @mtd_ooblayout_count_freebytes(%struct.mtd_info* %345) #8, !dbg !10990
  store i32 %call344, i32* %ret, align 4, !dbg !10991
  %346 = load i32, i32* %ret, align 4, !dbg !10992
  %cmp345 = icmp slt i32 %346, 0, !dbg !10994
  br i1 %cmp345, label %if.then347, label %if.end348, !dbg !10995

if.then347:                                       ; preds = %if.end343
  store i32 0, i32* %ret, align 4, !dbg !10996
  br label %if.end348, !dbg !10997

if.end348:                                        ; preds = %if.then347, %if.end343
  %347 = load i32, i32* %ret, align 4, !dbg !10998
  %348 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !10999
  %oobavail = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %348, i32 0, i32 7, !dbg !11000
  store i32 %347, i32* %oobavail, align 8, !dbg !11001
  %349 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11002
  %base349 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %349, i32 0, i32 0, !dbg !11004
  %call350 = call zeroext i1 @nand_ecc_is_strong_enough(%struct.nand_device* %base349) #8, !dbg !11005
  br i1 %call350, label %if.end362, label %if.then351, !dbg !11006

if.then351:                                       ; preds = %if.end348
  %350 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11007
  %name = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %350, i32 0, i32 13, !dbg !11007
  %351 = load i8*, i8** %name, align 8, !dbg !11007
  %352 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11007
  %ecc352 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %352, i32 0, i32 31, !dbg !11007
  %strength353 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc352, i32 0, i32 7, !dbg !11007
  %353 = load i32, i32* %strength353, align 4, !dbg !11007
  %354 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11007
  %ecc354 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %354, i32 0, i32 31, !dbg !11007
  %size355 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc354, i32 0, i32 4, !dbg !11007
  %355 = load i32, i32* %size355, align 8, !dbg !11007
  %356 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11007
  %base356 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %356, i32 0, i32 0, !dbg !11007
  %call357 = call %struct.nand_ecc_props* @nanddev_get_ecc_requirements(%struct.nand_device* %base356) #8, !dbg !11007
  %strength358 = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %call357, i32 0, i32 3, !dbg !11007
  %357 = load i32, i32* %strength358, align 4, !dbg !11007
  %358 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11007
  %base359 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %358, i32 0, i32 0, !dbg !11007
  %call360 = call %struct.nand_ecc_props* @nanddev_get_ecc_requirements(%struct.nand_device* %base359) #8, !dbg !11007
  %step_size = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %call360, i32 0, i32 4, !dbg !11007
  %359 = load i32, i32* %step_size, align 4, !dbg !11007
  %call361 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.39, i64 0, i64 0), i8* %351, i32 %353, i32 %355, i32 %357, i32 %359) #12, !dbg !11007
  br label %if.end362, !dbg !11007

if.end362:                                        ; preds = %if.then351, %if.end348
  %360 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11008
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %360, i32 0, i32 6, !dbg !11010
  %361 = load i32, i32* %options, align 8, !dbg !11010
  %conv363 = zext i32 %361 to i64, !dbg !11008
  %and364 = and i64 %conv363, 512, !dbg !11011
  %tobool365 = icmp ne i64 %and364, 0, !dbg !11011
  br i1 %tobool365, label %if.end375, label %land.lhs.true366, !dbg !11012

land.lhs.true366:                                 ; preds = %if.end362
  %362 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11013
  %call367 = call zeroext i1 @nand_is_slc(%struct.nand_chip* %362) #8, !dbg !11014
  br i1 %call367, label %if.then369, label %if.end375, !dbg !11015

if.then369:                                       ; preds = %land.lhs.true366
  %363 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !11016
  %steps370 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %363, i32 0, i32 3, !dbg !11018
  %364 = load i32, i32* %steps370, align 4, !dbg !11018
  switch i32 %364, label %sw.epilog374 [
    i32 2, label %sw.bb371
    i32 4, label %sw.bb372
    i32 8, label %sw.bb372
    i32 16, label %sw.bb372
  ], !dbg !11019

sw.bb371:                                         ; preds = %if.then369
  %365 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11020
  %subpage_sft = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %365, i32 0, i32 52, !dbg !11022
  store i32 1, i32* %subpage_sft, align 8, !dbg !11023
  br label %sw.epilog374, !dbg !11024

sw.bb372:                                         ; preds = %if.then369, %if.then369, %if.then369
  %366 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11025
  %subpage_sft373 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %366, i32 0, i32 52, !dbg !11026
  store i32 2, i32* %subpage_sft373, align 8, !dbg !11027
  br label %sw.epilog374, !dbg !11028

sw.epilog374:                                     ; preds = %if.then369, %sw.bb372, %sw.bb371
  br label %if.end375, !dbg !11029

if.end375:                                        ; preds = %sw.epilog374, %land.lhs.true366, %if.end362
  %367 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11030
  %writesize376 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %367, i32 0, i32 4, !dbg !11031
  %368 = load i32, i32* %writesize376, align 4, !dbg !11031
  %369 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11032
  %subpage_sft377 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %369, i32 0, i32 52, !dbg !11033
  %370 = load i32, i32* %subpage_sft377, align 8, !dbg !11033
  %shr = lshr i32 %368, %370, !dbg !11034
  %371 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11035
  %subpagesize = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %371, i32 0, i32 21, !dbg !11036
  store i32 %shr, i32* %subpagesize, align 8, !dbg !11037
  %372 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11038
  %pagecache = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %372, i32 0, i32 24, !dbg !11039
  %page = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache, i32 0, i32 1, !dbg !11040
  store i32 -1, i32* %page, align 4, !dbg !11041
  %373 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !11042
  %engine_type378 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %373, i32 0, i32 0, !dbg !11043
  %374 = load i32, i32* %engine_type378, align 8, !dbg !11043
  switch i32 %374, label %sw.default387 [
    i32 2, label %sw.bb379
  ], !dbg !11044

sw.bb379:                                         ; preds = %if.end375
  %375 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11045
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %375, i32 0, i32 17, !dbg !11048
  %376 = load i32, i32* %page_shift, align 8, !dbg !11048
  %cmp380 = icmp ugt i32 %376, 9, !dbg !11049
  br i1 %cmp380, label %if.then382, label %if.end386, !dbg !11050

if.then382:                                       ; preds = %sw.bb379
  %377 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11051
  %options383 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %377, i32 0, i32 6, !dbg !11052
  %378 = load i32, i32* %options383, align 8, !dbg !11053
  %conv384 = zext i32 %378 to i64, !dbg !11053
  %or = or i64 %conv384, 4096, !dbg !11053
  %conv385 = trunc i64 %or to i32, !dbg !11053
  store i32 %conv385, i32* %options383, align 8, !dbg !11053
  br label %if.end386, !dbg !11051

if.end386:                                        ; preds = %if.then382, %sw.bb379
  br label %sw.epilog388, !dbg !11054

sw.default387:                                    ; preds = %if.end375
  br label %sw.epilog388, !dbg !11055

sw.epilog388:                                     ; preds = %sw.default387, %if.end386
  %379 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11056
  %base389 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %379, i32 0, i32 0, !dbg !11057
  %380 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11058
  %owner = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %380, i32 0, i32 54, !dbg !11059
  %381 = load %struct.module*, %struct.module** %owner, align 8, !dbg !11059
  %call390 = call i32 @nanddev_init(%struct.nand_device* %base389, %struct.nand_ops* @rawnand_ops, %struct.module* %381) #8, !dbg !11060
  store i32 %call390, i32* %ret, align 4, !dbg !11061
  %382 = load i32, i32* %ret, align 4, !dbg !11062
  %tobool391 = icmp ne i32 %382, 0, !dbg !11062
  br i1 %tobool391, label %if.then392, label %if.end393, !dbg !11064

if.then392:                                       ; preds = %sw.epilog388
  br label %err_nand_manuf_cleanup, !dbg !11065

if.end393:                                        ; preds = %sw.epilog388
  %383 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11066
  %options394 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %383, i32 0, i32 6, !dbg !11068
  %384 = load i32, i32* %options394, align 8, !dbg !11068
  %conv395 = zext i32 %384 to i64, !dbg !11066
  %and396 = and i64 %conv395, 2048, !dbg !11069
  %tobool397 = icmp ne i64 %and396, 0, !dbg !11069
  br i1 %tobool397, label %if.then398, label %if.end399, !dbg !11070

if.then398:                                       ; preds = %if.end393
  %385 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11071
  %flags = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %385, i32 0, i32 1, !dbg !11072
  store i32 0, i32* %flags, align 4, !dbg !11073
  br label %if.end399, !dbg !11071

if.end399:                                        ; preds = %if.then398, %if.end393
  %386 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11074
  %_erase = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %386, i32 0, i32 21, !dbg !11075
  store i32 (%struct.mtd_info*, %struct.erase_info*)* @nand_erase, i32 (%struct.mtd_info*, %struct.erase_info*)** %_erase, align 8, !dbg !11076
  %387 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11077
  %_point = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %387, i32 0, i32 22, !dbg !11078
  store i32 (%struct.mtd_info*, i64, i64, i64*, i8**, i64*)* null, i32 (%struct.mtd_info*, i64, i64, i64*, i8**, i64*)** %_point, align 8, !dbg !11079
  %388 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11080
  %_unpoint = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %388, i32 0, i32 23, !dbg !11081
  store i32 (%struct.mtd_info*, i64, i64)* null, i32 (%struct.mtd_info*, i64, i64)** %_unpoint, align 8, !dbg !11082
  %389 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11083
  %_panic_write = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %389, i32 0, i32 26, !dbg !11084
  store i32 (%struct.mtd_info*, i64, i64, i64*, i8*)* @panic_nand_write, i32 (%struct.mtd_info*, i64, i64, i64*, i8*)** %_panic_write, align 8, !dbg !11085
  %390 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11086
  %_read_oob = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %390, i32 0, i32 27, !dbg !11087
  store i32 (%struct.mtd_info*, i64, %struct.mtd_oob_ops*)* @nand_read_oob, i32 (%struct.mtd_info*, i64, %struct.mtd_oob_ops*)** %_read_oob, align 8, !dbg !11088
  %391 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11089
  %_write_oob = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %391, i32 0, i32 28, !dbg !11090
  store i32 (%struct.mtd_info*, i64, %struct.mtd_oob_ops*)* @nand_write_oob, i32 (%struct.mtd_info*, i64, %struct.mtd_oob_ops*)** %_write_oob, align 8, !dbg !11091
  %392 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11092
  %_sync = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %392, i32 0, i32 36, !dbg !11093
  store void (%struct.mtd_info*)* @nand_sync, void (%struct.mtd_info*)** %_sync, align 8, !dbg !11094
  %393 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11095
  %_lock = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %393, i32 0, i32 37, !dbg !11096
  store i32 (%struct.mtd_info*, i64, i64)* @nand_lock, i32 (%struct.mtd_info*, i64, i64)** %_lock, align 8, !dbg !11097
  %394 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11098
  %_unlock = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %394, i32 0, i32 38, !dbg !11099
  store i32 (%struct.mtd_info*, i64, i64)* @nand_unlock, i32 (%struct.mtd_info*, i64, i64)** %_unlock, align 8, !dbg !11100
  %395 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11101
  %_suspend = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %395, i32 0, i32 44, !dbg !11102
  store i32 (%struct.mtd_info*)* @nand_suspend, i32 (%struct.mtd_info*)** %_suspend, align 8, !dbg !11103
  %396 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11104
  %_resume = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %396, i32 0, i32 45, !dbg !11105
  store void (%struct.mtd_info*)* @nand_resume, void (%struct.mtd_info*)** %_resume, align 8, !dbg !11106
  %397 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11107
  %_reboot = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %397, i32 0, i32 46, !dbg !11108
  store void (%struct.mtd_info*)* @nand_shutdown, void (%struct.mtd_info*)** %_reboot, align 8, !dbg !11109
  %398 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11110
  %_block_isreserved = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %398, i32 0, i32 40, !dbg !11111
  store i32 (%struct.mtd_info*, i64)* @nand_block_isreserved, i32 (%struct.mtd_info*, i64)** %_block_isreserved, align 8, !dbg !11112
  %399 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11113
  %_block_isbad = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %399, i32 0, i32 41, !dbg !11114
  store i32 (%struct.mtd_info*, i64)* @nand_block_isbad, i32 (%struct.mtd_info*, i64)** %_block_isbad, align 8, !dbg !11115
  %400 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11116
  %_block_markbad = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %400, i32 0, i32 42, !dbg !11117
  store i32 (%struct.mtd_info*, i64)* @nand_block_markbad, i32 (%struct.mtd_info*, i64)** %_block_markbad, align 8, !dbg !11118
  %401 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11119
  %_max_bad_blocks = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %401, i32 0, i32 43, !dbg !11120
  store i32 (%struct.mtd_info*, i64, i64)* @nanddev_mtd_max_bad_blocks, i32 (%struct.mtd_info*, i64, i64)** %_max_bad_blocks, align 8, !dbg !11121
  %402 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11122
  %bitflip_threshold = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %402, i32 0, i32 12, !dbg !11124
  %403 = load i32, i32* %bitflip_threshold, align 4, !dbg !11124
  %tobool400 = icmp ne i32 %403, 0, !dbg !11122
  br i1 %tobool400, label %if.end407, label %if.then401, !dbg !11125

if.then401:                                       ; preds = %if.end399
  %404 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11126
  %ecc_strength402 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %404, i32 0, i32 18, !dbg !11126
  %405 = load i32, i32* %ecc_strength402, align 4, !dbg !11126
  %mul403 = mul i32 %405, 3, !dbg !11126
  %add404 = add i32 %mul403, 4, !dbg !11126
  %sub = sub i32 %add404, 1, !dbg !11126
  %div405 = udiv i32 %sub, 4, !dbg !11126
  %406 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11127
  %bitflip_threshold406 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %406, i32 0, i32 12, !dbg !11128
  store i32 %div405, i32* %bitflip_threshold406, align 4, !dbg !11129
  br label %if.end407, !dbg !11127

if.end407:                                        ; preds = %if.then401, %if.end399
  %407 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11130
  %call408 = call i32 @nand_choose_interface_config(%struct.nand_chip* %407) #8, !dbg !11131
  store i32 %call408, i32* %ret, align 4, !dbg !11132
  %408 = load i32, i32* %ret, align 4, !dbg !11133
  %tobool409 = icmp ne i32 %408, 0, !dbg !11133
  br i1 %tobool409, label %if.then410, label %if.end411, !dbg !11135

if.then410:                                       ; preds = %if.end407
  br label %err_nanddev_cleanup, !dbg !11136

if.end411:                                        ; preds = %if.end407
  store i32 0, i32* %i, align 4, !dbg !11137
  br label %for.cond, !dbg !11139

for.cond:                                         ; preds = %for.inc, %if.end411
  %409 = load i32, i32* %i, align 4, !dbg !11140
  %410 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11142
  %base412 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %410, i32 0, i32 0, !dbg !11143
  %call413 = call i32 @nanddev_ntargets(%struct.nand_device* %base412) #8, !dbg !11144
  %cmp414 = icmp ult i32 %409, %call413, !dbg !11145
  br i1 %cmp414, label %for.body, label %for.end, !dbg !11146

for.body:                                         ; preds = %for.cond
  %411 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11147
  %412 = load i32, i32* %i, align 4, !dbg !11149
  %call416 = call i32 @nand_setup_interface(%struct.nand_chip* %411, i32 %412) #8, !dbg !11150
  store i32 %call416, i32* %ret, align 4, !dbg !11151
  %413 = load i32, i32* %ret, align 4, !dbg !11152
  %tobool417 = icmp ne i32 %413, 0, !dbg !11152
  br i1 %tobool417, label %if.then418, label %if.end419, !dbg !11154

if.then418:                                       ; preds = %for.body
  br label %err_free_interface_config, !dbg !11155

if.end419:                                        ; preds = %for.body
  br label %for.inc, !dbg !11156

for.inc:                                          ; preds = %if.end419
  %414 = load i32, i32* %i, align 4, !dbg !11157
  %inc = add i32 %414, 1, !dbg !11157
  store i32 %inc, i32* %i, align 4, !dbg !11157
  br label %for.cond, !dbg !11158, !llvm.loop !11159

for.end:                                          ; preds = %for.cond
  %415 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11161
  %options420 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %415, i32 0, i32 6, !dbg !11163
  %416 = load i32, i32* %options420, align 8, !dbg !11163
  %conv421 = zext i32 %416 to i64, !dbg !11161
  %and422 = and i64 %conv421, 65536, !dbg !11164
  %tobool423 = icmp ne i64 %and422, 0, !dbg !11164
  br i1 %tobool423, label %if.then424, label %if.end425, !dbg !11165

if.then424:                                       ; preds = %for.end
  store i32 0, i32* %retval, align 4, !dbg !11166
  br label %return, !dbg !11166

if.end425:                                        ; preds = %for.end
  %417 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11167
  %call426 = call i32 @nand_create_bbt(%struct.nand_chip* %417) #8, !dbg !11168
  store i32 %call426, i32* %ret, align 4, !dbg !11169
  %418 = load i32, i32* %ret, align 4, !dbg !11170
  %tobool427 = icmp ne i32 %418, 0, !dbg !11170
  br i1 %tobool427, label %if.then428, label %if.end429, !dbg !11172

if.then428:                                       ; preds = %if.end425
  br label %err_free_interface_config, !dbg !11173

if.end429:                                        ; preds = %if.end425
  store i32 0, i32* %retval, align 4, !dbg !11174
  br label %return, !dbg !11174

err_free_interface_config:                        ; preds = %if.then428, %if.then418
  call void @llvm.dbg.label(metadata !11175), !dbg !11176
  %419 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11177
  %best_interface_config = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %419, i32 0, i32 8, !dbg !11178
  %420 = load %struct.nand_interface_config*, %struct.nand_interface_config** %best_interface_config, align 8, !dbg !11178
  %421 = bitcast %struct.nand_interface_config* %420 to i8*, !dbg !11177
  call void @kfree(i8* %421) #8, !dbg !11179
  br label %err_nanddev_cleanup, !dbg !11179

err_nanddev_cleanup:                              ; preds = %err_free_interface_config, %if.then410
  call void @llvm.dbg.label(metadata !11180), !dbg !11181
  %422 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11182
  %base430 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %422, i32 0, i32 0, !dbg !11183
  call void @nanddev_cleanup(%struct.nand_device* %base430) #8, !dbg !11184
  br label %err_nand_manuf_cleanup, !dbg !11184

err_nand_manuf_cleanup:                           ; preds = %err_nanddev_cleanup, %if.then392, %if.end335, %if.end292, %if.then246, %if.end222, %if.end171, %if.then142, %if.end124, %if.then93, %if.end80
  call void @llvm.dbg.label(metadata !11185), !dbg !11186
  %423 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11187
  call void @nand_manufacturer_cleanup(%struct.nand_chip* %423) #8, !dbg !11188
  br label %err_free_buf, !dbg !11188

err_free_buf:                                     ; preds = %err_nand_manuf_cleanup, %if.then36
  call void @llvm.dbg.label(metadata !11189), !dbg !11190
  %424 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11191
  %data_buf431 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %424, i32 0, i32 22, !dbg !11192
  %425 = load i8*, i8** %data_buf431, align 8, !dbg !11192
  call void @kfree(i8* %425) #8, !dbg !11193
  %426 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !11194
  %code_buf432 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %426, i32 0, i32 13, !dbg !11195
  %427 = load i8*, i8** %code_buf432, align 8, !dbg !11195
  call void @kfree(i8* %427) #8, !dbg !11196
  %428 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !11197
  %calc_buf433 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %428, i32 0, i32 12, !dbg !11198
  %429 = load i8*, i8** %calc_buf433, align 8, !dbg !11198
  call void @kfree(i8* %429) #8, !dbg !11199
  %430 = load i32, i32* %ret, align 4, !dbg !11200
  store i32 %430, i32* %retval, align 4, !dbg !11201
  br label %return, !dbg !11201

return:                                           ; preds = %err_free_buf, %if.end429, %if.then424, %if.then32, %if.then26
  %431 = load i32, i32* %retval, align 4, !dbg !11202
  ret i32 %431, !dbg !11202
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_detach(%struct.nand_chip* %chip) #0 !dbg !11203 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11204, metadata !DIExpression()), !dbg !11205
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11206
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 30, !dbg !11208
  %1 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !11208
  %ops = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %1, i32 0, i32 1, !dbg !11209
  %2 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !11209
  %tobool = icmp ne %struct.nand_controller_ops* %2, null, !dbg !11206
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11210

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11211
  %controller1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 30, !dbg !11212
  %4 = load %struct.nand_controller*, %struct.nand_controller** %controller1, align 8, !dbg !11212
  %ops2 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %4, i32 0, i32 1, !dbg !11213
  %5 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops2, align 8, !dbg !11213
  %detach_chip = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %5, i32 0, i32 1, !dbg !11214
  %6 = load void (%struct.nand_chip*)*, void (%struct.nand_chip*)** %detach_chip, align 8, !dbg !11214
  %tobool3 = icmp ne void (%struct.nand_chip*)* %6, null, !dbg !11211
  br i1 %tobool3, label %if.then, label %if.end, !dbg !11215

if.then:                                          ; preds = %land.lhs.true
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11216
  %controller4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 30, !dbg !11217
  %8 = load %struct.nand_controller*, %struct.nand_controller** %controller4, align 8, !dbg !11217
  %ops5 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %8, i32 0, i32 1, !dbg !11218
  %9 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops5, align 8, !dbg !11218
  %detach_chip6 = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %9, i32 0, i32 1, !dbg !11219
  %10 = load void (%struct.nand_chip*)*, void (%struct.nand_chip*)** %detach_chip6, align 8, !dbg !11219
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11220
  call void %10(%struct.nand_chip* %11) #8, !dbg !11216
  br label %if.end, !dbg !11216

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !11221
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_scan_ident_cleanup(%struct.nand_chip* %chip) #0 !dbg !11222 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11223, metadata !DIExpression()), !dbg !11224
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11225
  %parameters = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 2, !dbg !11226
  %model = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters, i32 0, i32 0, !dbg !11227
  %1 = load i8*, i8** %model, align 8, !dbg !11227
  call void @kfree(i8* %1) #8, !dbg !11228
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11229
  %parameters1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 2, !dbg !11230
  %onfi = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters1, i32 0, i32 4, !dbg !11231
  %3 = load %struct.onfi_params*, %struct.onfi_params** %onfi, align 8, !dbg !11231
  %4 = bitcast %struct.onfi_params* %3 to i8*, !dbg !11229
  call void @kfree(i8* %4) #8, !dbg !11232
  ret void, !dbg !11233
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @nand_cleanup(%struct.nand_chip* %chip) #0 !dbg !11234 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11235, metadata !DIExpression()), !dbg !11236
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11237
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 31, !dbg !11239
  %engine_type = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 0, !dbg !11240
  %1 = load i32, i32* %engine_type, align 8, !dbg !11240
  %cmp = icmp eq i32 %1, 2, !dbg !11241
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !11242

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11243
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 31, !dbg !11244
  %algo = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 2, !dbg !11245
  %3 = load i32, i32* %algo, align 8, !dbg !11245
  %cmp2 = icmp eq i32 %3, 2, !dbg !11246
  br i1 %cmp2, label %if.then, label %if.end, !dbg !11247

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11248
  %ecc3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 31, !dbg !11249
  %priv = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc3, i32 0, i32 11, !dbg !11250
  %5 = load i8*, i8** %priv, align 8, !dbg !11250
  %6 = bitcast i8* %5 to %struct.nand_bch_control*, !dbg !11251
  call void @nand_bch_free(%struct.nand_bch_control* %6) #8, !dbg !11252
  br label %if.end, !dbg !11252

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11253
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 0, !dbg !11254
  call void @nanddev_cleanup(%struct.nand_device* %base) #8, !dbg !11255
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11256
  %bbt = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %8, i32 0, i32 16, !dbg !11257
  %9 = load i8*, i8** %bbt, align 8, !dbg !11257
  call void @kfree(i8* %9) #8, !dbg !11258
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11259
  %data_buf = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 22, !dbg !11260
  %11 = load i8*, i8** %data_buf, align 8, !dbg !11260
  call void @kfree(i8* %11) #8, !dbg !11261
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11262
  %ecc4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %12, i32 0, i32 31, !dbg !11263
  %code_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc4, i32 0, i32 13, !dbg !11264
  %13 = load i8*, i8** %code_buf, align 8, !dbg !11264
  call void @kfree(i8* %13) #8, !dbg !11265
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11266
  %ecc5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %14, i32 0, i32 31, !dbg !11267
  %calc_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc5, i32 0, i32 12, !dbg !11268
  %15 = load i8*, i8** %calc_buf, align 8, !dbg !11268
  call void @kfree(i8* %15) #8, !dbg !11269
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11270
  %badblock_pattern = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %16, i32 0, i32 15, !dbg !11272
  %17 = load %struct.nand_bbt_descr*, %struct.nand_bbt_descr** %badblock_pattern, align 8, !dbg !11272
  %tobool = icmp ne %struct.nand_bbt_descr* %17, null, !dbg !11270
  br i1 %tobool, label %land.lhs.true6, label %if.end11, !dbg !11273

land.lhs.true6:                                   ; preds = %if.end
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11274
  %badblock_pattern7 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 15, !dbg !11275
  %19 = load %struct.nand_bbt_descr*, %struct.nand_bbt_descr** %badblock_pattern7, align 8, !dbg !11275
  %options = getelementptr inbounds %struct.nand_bbt_descr, %struct.nand_bbt_descr* %19, i32 0, i32 0, !dbg !11276
  %20 = load i32, i32* %options, align 8, !dbg !11276
  %and = and i32 %20, -2147483648, !dbg !11277
  %tobool8 = icmp ne i32 %and, 0, !dbg !11277
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !11278

if.then9:                                         ; preds = %land.lhs.true6
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11279
  %badblock_pattern10 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 15, !dbg !11280
  %22 = load %struct.nand_bbt_descr*, %struct.nand_bbt_descr** %badblock_pattern10, align 8, !dbg !11280
  %23 = bitcast %struct.nand_bbt_descr* %22 to i8*, !dbg !11279
  call void @kfree(i8* %23) #8, !dbg !11281
  br label %if.end11, !dbg !11281

if.end11:                                         ; preds = %if.then9, %land.lhs.true6, %if.end
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11282
  %best_interface_config = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %24, i32 0, i32 8, !dbg !11283
  %25 = load %struct.nand_interface_config*, %struct.nand_interface_config** %best_interface_config, align 8, !dbg !11283
  %26 = bitcast %struct.nand_interface_config* %25 to i8*, !dbg !11282
  call void @kfree(i8* %26) #8, !dbg !11284
  %27 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11285
  call void @nand_manufacturer_cleanup(%struct.nand_chip* %27) #8, !dbg !11286
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11287
  call void @nand_detach(%struct.nand_chip* %28) #8, !dbg !11288
  %29 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11289
  call void @nand_scan_ident_cleanup(%struct.nand_chip* %29) #8, !dbg !11290
  ret void, !dbg !11291
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_bch_free(%struct.nand_bch_control* %nbc) #0 !dbg !11292 {
entry:
  %nbc.addr = alloca %struct.nand_bch_control*, align 8
  store %struct.nand_bch_control* %nbc, %struct.nand_bch_control** %nbc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_bch_control** %nbc.addr, metadata !11295, metadata !DIExpression()), !dbg !11296
  ret void, !dbg !11297
}

; Function Attrs: noredzone
declare dso_local void @nanddev_cleanup(%struct.nand_device*) #2

; Function Attrs: noredzone
declare dso_local void @kfree(i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_manufacturer_cleanup(%struct.nand_chip* %chip) #0 !dbg !11298 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11299, metadata !DIExpression()), !dbg !11300
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11301
  %manufacturer = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 3, !dbg !11303
  %desc = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer, i32 0, i32 0, !dbg !11304
  %1 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc, align 8, !dbg !11304
  %tobool = icmp ne %struct.nand_manufacturer_desc* %1, null, !dbg !11301
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !11305

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11306
  %manufacturer1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 3, !dbg !11307
  %desc2 = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer1, i32 0, i32 0, !dbg !11308
  %3 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc2, align 8, !dbg !11308
  %ops = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %3, i32 0, i32 2, !dbg !11309
  %4 = load %struct.nand_manufacturer_ops*, %struct.nand_manufacturer_ops** %ops, align 8, !dbg !11309
  %tobool3 = icmp ne %struct.nand_manufacturer_ops* %4, null, !dbg !11306
  br i1 %tobool3, label %land.lhs.true4, label %if.end, !dbg !11310

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11311
  %manufacturer5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 3, !dbg !11312
  %desc6 = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer5, i32 0, i32 0, !dbg !11313
  %6 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc6, align 8, !dbg !11313
  %ops7 = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %6, i32 0, i32 2, !dbg !11314
  %7 = load %struct.nand_manufacturer_ops*, %struct.nand_manufacturer_ops** %ops7, align 8, !dbg !11314
  %cleanup = getelementptr inbounds %struct.nand_manufacturer_ops, %struct.nand_manufacturer_ops* %7, i32 0, i32 2, !dbg !11315
  %8 = load void (%struct.nand_chip*)*, void (%struct.nand_chip*)** %cleanup, align 8, !dbg !11315
  %tobool8 = icmp ne void (%struct.nand_chip*)* %8, null, !dbg !11311
  br i1 %tobool8, label %if.then, label %if.end, !dbg !11316

if.then:                                          ; preds = %land.lhs.true4
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11317
  %manufacturer9 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 3, !dbg !11318
  %desc10 = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer9, i32 0, i32 0, !dbg !11319
  %10 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc10, align 8, !dbg !11319
  %ops11 = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %10, i32 0, i32 2, !dbg !11320
  %11 = load %struct.nand_manufacturer_ops*, %struct.nand_manufacturer_ops** %ops11, align 8, !dbg !11320
  %cleanup12 = getelementptr inbounds %struct.nand_manufacturer_ops, %struct.nand_manufacturer_ops* %11, i32 0, i32 2, !dbg !11321
  %12 = load void (%struct.nand_chip*)*, void (%struct.nand_chip*)** %cleanup12, align 8, !dbg !11321
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11322
  call void %12(%struct.nand_chip* %13) #8, !dbg !11317
  br label %if.end, !dbg !11317

if.end:                                           ; preds = %if.then, %land.lhs.true4, %land.lhs.true, %entry
  ret void, !dbg !11323
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_do_write_oob(%struct.nand_chip* %chip, i64 %to, %struct.mtd_oob_ops* %ops) #0 !dbg !11324 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %to.addr = alloca i64, align 8
  %ops.addr = alloca %struct.mtd_oob_ops*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %chipnr = alloca i32, align 4
  %page = alloca i32, align 4
  %status = alloca i32, align 4
  %len = alloca i32, align 4
  %ret = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp4 = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11327, metadata !DIExpression()), !dbg !11328
  store i64 %to, i64* %to.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %to.addr, metadata !11329, metadata !DIExpression()), !dbg !11330
  store %struct.mtd_oob_ops* %ops, %struct.mtd_oob_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops** %ops.addr, metadata !11331, metadata !DIExpression()), !dbg !11332
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !11333, metadata !DIExpression()), !dbg !11334
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11335
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !11336
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !11334
  call void @llvm.dbg.declare(metadata i32* %chipnr, metadata !11337, metadata !DIExpression()), !dbg !11338
  call void @llvm.dbg.declare(metadata i32* %page, metadata !11339, metadata !DIExpression()), !dbg !11340
  call void @llvm.dbg.declare(metadata i32* %status, metadata !11341, metadata !DIExpression()), !dbg !11342
  call void @llvm.dbg.declare(metadata i32* %len, metadata !11343, metadata !DIExpression()), !dbg !11344
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !11345, metadata !DIExpression()), !dbg !11346
  store i32 0, i32* %tmp, align 4, !dbg !11347
  %1 = load i32, i32* %tmp, align 4, !dbg !11350
  %2 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11351
  %3 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11352
  %call1 = call i32 @mtd_oobavail(%struct.mtd_info* %2, %struct.mtd_oob_ops* %3) #8, !dbg !11353
  store i32 %call1, i32* %len, align 4, !dbg !11354
  %4 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11355
  %ooboffs = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %4, i32 0, i32 5, !dbg !11357
  %5 = load i32, i32* %ooboffs, align 8, !dbg !11357
  %conv = zext i32 %5 to i64, !dbg !11355
  %6 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11358
  %ooblen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %6, i32 0, i32 3, !dbg !11359
  %7 = load i64, i64* %ooblen, align 8, !dbg !11359
  %add = add i64 %conv, %7, !dbg !11360
  %8 = load i32, i32* %len, align 4, !dbg !11361
  %conv2 = sext i32 %8 to i64, !dbg !11361
  %cmp = icmp ugt i64 %add, %conv2, !dbg !11362
  br i1 %cmp, label %if.then, label %if.end, !dbg !11363

if.then:                                          ; preds = %entry
  store i32 0, i32* %tmp4, align 4, !dbg !11364
  %9 = load i32, i32* %tmp4, align 4, !dbg !11368
  store i32 -22, i32* %retval, align 4, !dbg !11369
  br label %return, !dbg !11369

if.end:                                           ; preds = %entry
  %10 = load i64, i64* %to.addr, align 8, !dbg !11370
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11371
  %chip_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 19, !dbg !11372
  %12 = load i32, i32* %chip_shift, align 8, !dbg !11372
  %sh_prom = zext i32 %12 to i64, !dbg !11373
  %shr = ashr i64 %10, %sh_prom, !dbg !11373
  %conv5 = trunc i64 %shr to i32, !dbg !11374
  store i32 %conv5, i32* %chipnr, align 4, !dbg !11375
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11376
  %14 = load i32, i32* %chipnr, align 4, !dbg !11377
  %call6 = call i32 @nand_reset(%struct.nand_chip* %13, i32 %14) #8, !dbg !11378
  store i32 %call6, i32* %ret, align 4, !dbg !11379
  %15 = load i32, i32* %ret, align 4, !dbg !11380
  %tobool = icmp ne i32 %15, 0, !dbg !11380
  br i1 %tobool, label %if.then7, label %if.end8, !dbg !11382

if.then7:                                         ; preds = %if.end
  %16 = load i32, i32* %ret, align 4, !dbg !11383
  store i32 %16, i32* %retval, align 4, !dbg !11384
  br label %return, !dbg !11384

if.end8:                                          ; preds = %if.end
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11385
  %18 = load i32, i32* %chipnr, align 4, !dbg !11386
  call void @nand_select_target(%struct.nand_chip* %17, i32 %18) #8, !dbg !11387
  %19 = load i64, i64* %to.addr, align 8, !dbg !11388
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11389
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %20, i32 0, i32 17, !dbg !11390
  %21 = load i32, i32* %page_shift, align 8, !dbg !11390
  %sh_prom9 = zext i32 %21 to i64, !dbg !11391
  %shr10 = ashr i64 %19, %sh_prom9, !dbg !11391
  %conv11 = trunc i64 %shr10 to i32, !dbg !11392
  store i32 %conv11, i32* %page, align 4, !dbg !11393
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11394
  %call12 = call i32 @nand_check_wp(%struct.nand_chip* %22) #8, !dbg !11396
  %tobool13 = icmp ne i32 %call12, 0, !dbg !11396
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !11397

if.then14:                                        ; preds = %if.end8
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11398
  call void @nand_deselect_target(%struct.nand_chip* %23) #8, !dbg !11400
  store i32 -30, i32* %retval, align 4, !dbg !11401
  br label %return, !dbg !11401

if.end15:                                         ; preds = %if.end8
  %24 = load i32, i32* %page, align 4, !dbg !11402
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11404
  %pagecache = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %25, i32 0, i32 24, !dbg !11405
  %page16 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache, i32 0, i32 1, !dbg !11406
  %26 = load i32, i32* %page16, align 4, !dbg !11406
  %cmp17 = icmp eq i32 %24, %26, !dbg !11407
  br i1 %cmp17, label %if.then19, label %if.end22, !dbg !11408

if.then19:                                        ; preds = %if.end15
  %27 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11409
  %pagecache20 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %27, i32 0, i32 24, !dbg !11410
  %page21 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache20, i32 0, i32 1, !dbg !11411
  store i32 -1, i32* %page21, align 4, !dbg !11412
  br label %if.end22, !dbg !11409

if.end22:                                         ; preds = %if.then19, %if.end15
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11413
  %29 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11414
  %oobbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %29, i32 0, i32 7, !dbg !11415
  %30 = load i8*, i8** %oobbuf, align 8, !dbg !11415
  %31 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11416
  %ooblen23 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %31, i32 0, i32 3, !dbg !11417
  %32 = load i64, i64* %ooblen23, align 8, !dbg !11417
  %33 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11418
  %call24 = call i8* @nand_fill_oob(%struct.nand_chip* %28, i8* %30, i64 %32, %struct.mtd_oob_ops* %33) #8, !dbg !11419
  %34 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11420
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %34, i32 0, i32 0, !dbg !11422
  %35 = load i32, i32* %mode, align 8, !dbg !11422
  %cmp25 = icmp eq i32 %35, 2, !dbg !11423
  br i1 %cmp25, label %if.then27, label %if.else, !dbg !11424

if.then27:                                        ; preds = %if.end22
  %36 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11425
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %36, i32 0, i32 31, !dbg !11426
  %write_oob_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 23, !dbg !11427
  %37 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %write_oob_raw, align 8, !dbg !11427
  %38 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11428
  %39 = load i32, i32* %page, align 4, !dbg !11429
  %40 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11430
  %pagemask = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %40, i32 0, i32 20, !dbg !11431
  %41 = load i32, i32* %pagemask, align 4, !dbg !11431
  %and = and i32 %39, %41, !dbg !11432
  %call28 = call i32 %37(%struct.nand_chip* %38, i32 %and) #8, !dbg !11425
  store i32 %call28, i32* %status, align 4, !dbg !11433
  br label %if.end33, !dbg !11434

if.else:                                          ; preds = %if.end22
  %42 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11435
  %ecc29 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %42, i32 0, i32 31, !dbg !11436
  %write_oob = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc29, i32 0, i32 26, !dbg !11437
  %43 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %write_oob, align 8, !dbg !11437
  %44 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11438
  %45 = load i32, i32* %page, align 4, !dbg !11439
  %46 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11440
  %pagemask30 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %46, i32 0, i32 20, !dbg !11441
  %47 = load i32, i32* %pagemask30, align 4, !dbg !11441
  %and31 = and i32 %45, %47, !dbg !11442
  %call32 = call i32 %43(%struct.nand_chip* %44, i32 %and31) #8, !dbg !11435
  store i32 %call32, i32* %status, align 4, !dbg !11443
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.then27
  %48 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11444
  call void @nand_deselect_target(%struct.nand_chip* %48) #8, !dbg !11445
  %49 = load i32, i32* %status, align 4, !dbg !11446
  %tobool34 = icmp ne i32 %49, 0, !dbg !11446
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !11448

if.then35:                                        ; preds = %if.end33
  %50 = load i32, i32* %status, align 4, !dbg !11449
  store i32 %50, i32* %retval, align 4, !dbg !11450
  br label %return, !dbg !11450

if.end36:                                         ; preds = %if.end33
  %51 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11451
  %ooblen37 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %51, i32 0, i32 3, !dbg !11452
  %52 = load i64, i64* %ooblen37, align 8, !dbg !11452
  %53 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11453
  %oobretlen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %53, i32 0, i32 4, !dbg !11454
  store i64 %52, i64* %oobretlen, align 8, !dbg !11455
  store i32 0, i32* %retval, align 4, !dbg !11456
  br label %return, !dbg !11456

return:                                           ; preds = %if.end36, %if.then35, %if.then14, %if.then7, %if.then
  %54 = load i32, i32* %retval, align 4, !dbg !11457
  ret i32 %54, !dbg !11457
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @mtd_oobavail(%struct.mtd_info* %mtd, %struct.mtd_oob_ops* %ops) #0 !dbg !11458 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %ops.addr = alloca %struct.mtd_oob_ops*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !11461, metadata !DIExpression()), !dbg !11462
  store %struct.mtd_oob_ops* %ops, %struct.mtd_oob_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops** %ops.addr, metadata !11463, metadata !DIExpression()), !dbg !11464
  %0 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11465
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %0, i32 0, i32 0, !dbg !11466
  %1 = load i32, i32* %mode, align 8, !dbg !11466
  %cmp = icmp eq i32 %1, 1, !dbg !11467
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11465

cond.true:                                        ; preds = %entry
  %2 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !11468
  %oobavail = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %2, i32 0, i32 7, !dbg !11469
  %3 = load i32, i32* %oobavail, align 8, !dbg !11469
  br label %cond.end, !dbg !11465

cond.false:                                       ; preds = %entry
  %4 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !11470
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %4, i32 0, i32 6, !dbg !11471
  %5 = load i32, i32* %oobsize, align 4, !dbg !11471
  br label %cond.end, !dbg !11465

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ %5, %cond.false ], !dbg !11465
  ret i32 %cond, !dbg !11472
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @nand_fill_oob(%struct.nand_chip* %chip, i8* %oob, i64 %len, %struct.mtd_oob_ops* %ops) #0 !dbg !11473 {
entry:
  %retval = alloca i8*, align 8
  %chip.addr = alloca %struct.nand_chip*, align 8
  %oob.addr = alloca i8*, align 8
  %len.addr = alloca i64, align 8
  %ops.addr = alloca %struct.mtd_oob_ops*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11476, metadata !DIExpression()), !dbg !11477
  store i8* %oob, i8** %oob.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %oob.addr, metadata !11478, metadata !DIExpression()), !dbg !11479
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !11480, metadata !DIExpression()), !dbg !11481
  store %struct.mtd_oob_ops* %ops, %struct.mtd_oob_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops** %ops.addr, metadata !11482, metadata !DIExpression()), !dbg !11483
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !11484, metadata !DIExpression()), !dbg !11485
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11486
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !11487
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !11485
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !11488, metadata !DIExpression()), !dbg !11489
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11490
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 23, !dbg !11491
  %2 = load i8*, i8** %oob_poi, align 8, !dbg !11491
  %3 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11492
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %3, i32 0, i32 6, !dbg !11493
  %4 = load i32, i32* %oobsize, align 4, !dbg !11493
  %conv = zext i32 %4 to i64, !dbg !11492
  call void @llvm.memset.p0i8.i64(i8* align 1 %2, i8 -1, i64 %conv, i1 false), !dbg !11494
  %5 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11495
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %5, i32 0, i32 0, !dbg !11496
  %6 = load i32, i32* %mode, align 8, !dbg !11496
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb3
  ], !dbg !11497

sw.bb:                                            ; preds = %entry, %entry
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11498
  %oob_poi1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 23, !dbg !11500
  %8 = load i8*, i8** %oob_poi1, align 8, !dbg !11500
  %9 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11501
  %ooboffs = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %9, i32 0, i32 5, !dbg !11502
  %10 = load i32, i32* %ooboffs, align 8, !dbg !11502
  %idx.ext = zext i32 %10 to i64, !dbg !11503
  %add.ptr = getelementptr i8, i8* %8, i64 %idx.ext, !dbg !11503
  %11 = load i8*, i8** %oob.addr, align 8, !dbg !11504
  %12 = load i64, i64* %len.addr, align 8, !dbg !11505
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr, i8* align 1 %11, i64 %12, i1 false), !dbg !11506
  %13 = load i8*, i8** %oob.addr, align 8, !dbg !11507
  %14 = load i64, i64* %len.addr, align 8, !dbg !11508
  %add.ptr2 = getelementptr i8, i8* %13, i64 %14, !dbg !11509
  store i8* %add.ptr2, i8** %retval, align 8, !dbg !11510
  br label %return, !dbg !11510

sw.bb3:                                           ; preds = %entry
  %15 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !11511
  %16 = load i8*, i8** %oob.addr, align 8, !dbg !11512
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11513
  %oob_poi4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %17, i32 0, i32 23, !dbg !11514
  %18 = load i8*, i8** %oob_poi4, align 8, !dbg !11514
  %19 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !11515
  %ooboffs5 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %19, i32 0, i32 5, !dbg !11516
  %20 = load i32, i32* %ooboffs5, align 8, !dbg !11516
  %21 = load i64, i64* %len.addr, align 8, !dbg !11517
  %conv6 = trunc i64 %21 to i32, !dbg !11517
  %call7 = call i32 @mtd_ooblayout_set_databytes(%struct.mtd_info* %15, i8* %16, i8* %18, i32 %20, i32 %conv6) #8, !dbg !11518
  store i32 %call7, i32* %ret, align 4, !dbg !11519
  br label %do.body, !dbg !11520

do.body:                                          ; preds = %sw.bb3
  %22 = load i32, i32* %ret, align 4, !dbg !11521
  %tobool = icmp ne i32 %22, 0, !dbg !11521
  %lnot = xor i1 %tobool, true, !dbg !11521
  %lnot8 = xor i1 %lnot, true, !dbg !11521
  %lnot.ext = zext i1 %lnot8 to i32, !dbg !11521
  %conv9 = sext i32 %lnot.ext to i64, !dbg !11521
  %tobool10 = icmp ne i64 %conv9, 0, !dbg !11521
  br i1 %tobool10, label %if.then, label %if.end, !dbg !11524

if.then:                                          ; preds = %do.body
  br label %do.body11, !dbg !11521

do.body11:                                        ; preds = %if.then
  br label %do.body12, !dbg !11525

do.body12:                                        ; preds = %do.body11
  br label %do.end, !dbg !11527

do.end:                                           ; preds = %do.body12
  br label %do.body13, !dbg !11525

do.body13:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 365, i32 0, i64 12) #9, !dbg !11529, !srcloc !11531
  br label %do.end14, !dbg !11529

do.end14:                                         ; preds = %do.body13
  br label %do.body15, !dbg !11525

do.body15:                                        ; preds = %do.end14
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 247) #9, !dbg !11532, !srcloc !11535
  unreachable, !dbg !11536

do.end16:                                         ; No predecessors!
  br label %do.end17, !dbg !11525

do.end17:                                         ; preds = %do.end16
  br label %if.end, !dbg !11525

if.end:                                           ; preds = %do.end17, %do.body
  br label %do.end18, !dbg !11524

do.end18:                                         ; preds = %if.end
  %23 = load i8*, i8** %oob.addr, align 8, !dbg !11537
  %24 = load i64, i64* %len.addr, align 8, !dbg !11538
  %add.ptr19 = getelementptr i8, i8* %23, i64 %24, !dbg !11539
  store i8* %add.ptr19, i8** %retval, align 8, !dbg !11540
  br label %return, !dbg !11540

sw.default:                                       ; preds = %entry
  br label %do.body20, !dbg !11541

do.body20:                                        ; preds = %sw.default
  br label %do.body21, !dbg !11542

do.body21:                                        ; preds = %do.body20
  br label %do.end22, !dbg !11544

do.end22:                                         ; preds = %do.body21
  br label %do.body23, !dbg !11542

do.body23:                                        ; preds = %do.end22
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 369, i32 0, i64 12) #9, !dbg !11546, !srcloc !11548
  br label %do.end24, !dbg !11546

do.end24:                                         ; preds = %do.body23
  br label %do.body25, !dbg !11542

do.body25:                                        ; preds = %do.end24
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 248) #9, !dbg !11549, !srcloc !11552
  unreachable, !dbg !11553

do.end26:                                         ; No predecessors!
  br label %do.end27, !dbg !11542

do.end27:                                         ; preds = %do.end26
  br label %sw.epilog, !dbg !11554

sw.epilog:                                        ; preds = %do.end27
  store i8* null, i8** %retval, align 8, !dbg !11555
  br label %return, !dbg !11555

return:                                           ; preds = %sw.epilog, %do.end18, %sw.bb
  %25 = load i8*, i8** %retval, align 8, !dbg !11556
  ret i8* %25, !dbg !11556
}

; Function Attrs: noredzone
declare dso_local i32 @mtd_ooblayout_set_databytes(%struct.mtd_info*, i8*, i8*, i32, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @ERR_PTR(i64 %error) #0 !dbg !11557 {
entry:
  %error.addr = alloca i64, align 8
  store i64 %error, i64* %error.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %error.addr, metadata !11561, metadata !DIExpression()), !dbg !11562
  %0 = load i64, i64* %error.addr, align 8, !dbg !11563
  %1 = inttoptr i64 %0 to i8*, !dbg !11564
  ret i8* %1, !dbg !11565
}

; Function Attrs: nounwind readnone willreturn
declare i1 @llvm.is.constant.i32(i32) #5

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i64 @_msecs_to_jiffies(i32 %m) #0 !dbg !11566 {
entry:
  %m.addr = alloca i32, align 4
  store i32 %m, i32* %m.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %m.addr, metadata !11567, metadata !DIExpression()), !dbg !11568
  %0 = load i32, i32* %m.addr, align 4, !dbg !11569
  %conv = zext i32 %0 to i64, !dbg !11569
  %add = add i64 %conv, 4, !dbg !11570
  %sub = sub i64 %add, 1, !dbg !11571
  %div = sdiv i64 %sub, 4, !dbg !11572
  ret i64 %div, !dbg !11573
}

; Function Attrs: noredzone
declare dso_local i64 @__msecs_to_jiffies(i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @nand_op_parser_must_split_instr(%struct.nand_op_parser_pattern_elem* %pat, %struct.nand_op_instr* %instr, i32* %start_offset) #0 !dbg !11574 {
entry:
  %retval = alloca i1, align 1
  %pat.addr = alloca %struct.nand_op_parser_pattern_elem*, align 8
  %instr.addr = alloca %struct.nand_op_instr*, align 8
  %start_offset.addr = alloca i32*, align 8
  store %struct.nand_op_parser_pattern_elem* %pat, %struct.nand_op_parser_pattern_elem** %pat.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_op_parser_pattern_elem** %pat.addr, metadata !11577, metadata !DIExpression()), !dbg !11578
  store %struct.nand_op_instr* %instr, %struct.nand_op_instr** %instr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_op_instr** %instr.addr, metadata !11579, metadata !DIExpression()), !dbg !11580
  store i32* %start_offset, i32** %start_offset.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %start_offset.addr, metadata !11581, metadata !DIExpression()), !dbg !11582
  %0 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %pat.addr, align 8, !dbg !11583
  %type = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %0, i32 0, i32 0, !dbg !11584
  %1 = load i32, i32* %type, align 4, !dbg !11584
  switch i32 %1, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb11
    i32 3, label %sw.bb11
  ], !dbg !11585

sw.bb:                                            ; preds = %entry
  %2 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %pat.addr, align 8, !dbg !11586
  %ctx = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %2, i32 0, i32 2, !dbg !11589
  %addr = bitcast %union.anon.75* %ctx to %struct.nand_op_parser_addr_constraints*, !dbg !11590
  %maxcycles = getelementptr inbounds %struct.nand_op_parser_addr_constraints, %struct.nand_op_parser_addr_constraints* %addr, i32 0, i32 0, !dbg !11591
  %3 = load i32, i32* %maxcycles, align 4, !dbg !11591
  %tobool = icmp ne i32 %3, 0, !dbg !11586
  br i1 %tobool, label %if.end, label %if.then, !dbg !11592

if.then:                                          ; preds = %sw.bb
  br label %sw.epilog, !dbg !11593

if.end:                                           ; preds = %sw.bb
  %4 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instr.addr, align 8, !dbg !11594
  %ctx1 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %4, i32 0, i32 1, !dbg !11596
  %addr2 = bitcast %union.anon.72* %ctx1 to %struct.nand_op_addr_instr*, !dbg !11597
  %naddrs = getelementptr inbounds %struct.nand_op_addr_instr, %struct.nand_op_addr_instr* %addr2, i32 0, i32 0, !dbg !11598
  %5 = load i32, i32* %naddrs, align 8, !dbg !11598
  %6 = load i32*, i32** %start_offset.addr, align 8, !dbg !11599
  %7 = load i32, i32* %6, align 4, !dbg !11600
  %sub = sub i32 %5, %7, !dbg !11601
  %8 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %pat.addr, align 8, !dbg !11602
  %ctx3 = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %8, i32 0, i32 2, !dbg !11603
  %addr4 = bitcast %union.anon.75* %ctx3 to %struct.nand_op_parser_addr_constraints*, !dbg !11604
  %maxcycles5 = getelementptr inbounds %struct.nand_op_parser_addr_constraints, %struct.nand_op_parser_addr_constraints* %addr4, i32 0, i32 0, !dbg !11605
  %9 = load i32, i32* %maxcycles5, align 4, !dbg !11605
  %cmp = icmp ugt i32 %sub, %9, !dbg !11606
  br i1 %cmp, label %if.then6, label %if.end10, !dbg !11607

if.then6:                                         ; preds = %if.end
  %10 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %pat.addr, align 8, !dbg !11608
  %ctx7 = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %10, i32 0, i32 2, !dbg !11610
  %addr8 = bitcast %union.anon.75* %ctx7 to %struct.nand_op_parser_addr_constraints*, !dbg !11611
  %maxcycles9 = getelementptr inbounds %struct.nand_op_parser_addr_constraints, %struct.nand_op_parser_addr_constraints* %addr8, i32 0, i32 0, !dbg !11612
  %11 = load i32, i32* %maxcycles9, align 4, !dbg !11612
  %12 = load i32*, i32** %start_offset.addr, align 8, !dbg !11613
  %13 = load i32, i32* %12, align 4, !dbg !11614
  %add = add i32 %13, %11, !dbg !11614
  store i32 %add, i32* %12, align 4, !dbg !11614
  store i1 true, i1* %retval, align 1, !dbg !11615
  br label %return, !dbg !11615

if.end10:                                         ; preds = %if.end
  br label %sw.epilog, !dbg !11616

sw.bb11:                                          ; preds = %entry, %entry
  %14 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %pat.addr, align 8, !dbg !11617
  %ctx12 = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %14, i32 0, i32 2, !dbg !11619
  %data = bitcast %union.anon.75* %ctx12 to %struct.nand_op_parser_data_constraints*, !dbg !11620
  %maxlen = getelementptr inbounds %struct.nand_op_parser_data_constraints, %struct.nand_op_parser_data_constraints* %data, i32 0, i32 0, !dbg !11621
  %15 = load i32, i32* %maxlen, align 4, !dbg !11621
  %tobool13 = icmp ne i32 %15, 0, !dbg !11617
  br i1 %tobool13, label %if.end15, label %if.then14, !dbg !11622

if.then14:                                        ; preds = %sw.bb11
  br label %sw.epilog, !dbg !11623

if.end15:                                         ; preds = %sw.bb11
  %16 = load %struct.nand_op_instr*, %struct.nand_op_instr** %instr.addr, align 8, !dbg !11624
  %ctx16 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %16, i32 0, i32 1, !dbg !11626
  %data17 = bitcast %union.anon.72* %ctx16 to %struct.nand_op_data_instr*, !dbg !11627
  %len = getelementptr inbounds %struct.nand_op_data_instr, %struct.nand_op_data_instr* %data17, i32 0, i32 0, !dbg !11628
  %17 = load i32, i32* %len, align 8, !dbg !11628
  %18 = load i32*, i32** %start_offset.addr, align 8, !dbg !11629
  %19 = load i32, i32* %18, align 4, !dbg !11630
  %sub18 = sub i32 %17, %19, !dbg !11631
  %20 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %pat.addr, align 8, !dbg !11632
  %ctx19 = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %20, i32 0, i32 2, !dbg !11633
  %data20 = bitcast %union.anon.75* %ctx19 to %struct.nand_op_parser_data_constraints*, !dbg !11634
  %maxlen21 = getelementptr inbounds %struct.nand_op_parser_data_constraints, %struct.nand_op_parser_data_constraints* %data20, i32 0, i32 0, !dbg !11635
  %21 = load i32, i32* %maxlen21, align 4, !dbg !11635
  %cmp22 = icmp ugt i32 %sub18, %21, !dbg !11636
  br i1 %cmp22, label %if.then23, label %if.end28, !dbg !11637

if.then23:                                        ; preds = %if.end15
  %22 = load %struct.nand_op_parser_pattern_elem*, %struct.nand_op_parser_pattern_elem** %pat.addr, align 8, !dbg !11638
  %ctx24 = getelementptr inbounds %struct.nand_op_parser_pattern_elem, %struct.nand_op_parser_pattern_elem* %22, i32 0, i32 2, !dbg !11640
  %data25 = bitcast %union.anon.75* %ctx24 to %struct.nand_op_parser_data_constraints*, !dbg !11641
  %maxlen26 = getelementptr inbounds %struct.nand_op_parser_data_constraints, %struct.nand_op_parser_data_constraints* %data25, i32 0, i32 0, !dbg !11642
  %23 = load i32, i32* %maxlen26, align 4, !dbg !11642
  %24 = load i32*, i32** %start_offset.addr, align 8, !dbg !11643
  %25 = load i32, i32* %24, align 4, !dbg !11644
  %add27 = add i32 %25, %23, !dbg !11644
  store i32 %add27, i32* %24, align 4, !dbg !11644
  store i1 true, i1* %retval, align 1, !dbg !11645
  br label %return, !dbg !11645

if.end28:                                         ; preds = %if.end15
  br label %sw.epilog, !dbg !11646

sw.default:                                       ; preds = %entry
  br label %sw.epilog, !dbg !11647

sw.epilog:                                        ; preds = %sw.default, %if.end28, %if.then14, %if.end10, %if.then
  store i1 false, i1* %retval, align 1, !dbg !11648
  br label %return, !dbg !11648

return:                                           ; preds = %sw.epilog, %if.then23, %if.then6
  %26 = load i1, i1* %retval, align 1, !dbg !11649
  ret i1 %26, !dbg !11649
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @nand_controller_can_setup_interface(%struct.nand_chip* %chip) #0 !dbg !11650 {
entry:
  %retval = alloca i1, align 1
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11651, metadata !DIExpression()), !dbg !11652
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11653
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 30, !dbg !11655
  %1 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !11655
  %tobool = icmp ne %struct.nand_controller* %1, null, !dbg !11653
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !11656

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11657
  %controller1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 30, !dbg !11658
  %3 = load %struct.nand_controller*, %struct.nand_controller** %controller1, align 8, !dbg !11658
  %ops = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %3, i32 0, i32 1, !dbg !11659
  %4 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops, align 8, !dbg !11659
  %tobool2 = icmp ne %struct.nand_controller_ops* %4, null, !dbg !11657
  br i1 %tobool2, label %lor.lhs.false3, label %if.then, !dbg !11660

lor.lhs.false3:                                   ; preds = %lor.lhs.false
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11661
  %controller4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 30, !dbg !11662
  %6 = load %struct.nand_controller*, %struct.nand_controller** %controller4, align 8, !dbg !11662
  %ops5 = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %6, i32 0, i32 1, !dbg !11663
  %7 = load %struct.nand_controller_ops*, %struct.nand_controller_ops** %ops5, align 8, !dbg !11663
  %setup_interface = getelementptr inbounds %struct.nand_controller_ops, %struct.nand_controller_ops* %7, i32 0, i32 3, !dbg !11664
  %8 = load i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)*, i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)** %setup_interface, align 8, !dbg !11664
  %tobool6 = icmp ne i32 (%struct.nand_chip*, i32, %struct.nand_interface_config*)* %8, null, !dbg !11661
  br i1 %tobool6, label %if.end, label %if.then, !dbg !11665

if.then:                                          ; preds = %lor.lhs.false3, %lor.lhs.false, %entry
  store i1 false, i1* %retval, align 1, !dbg !11666
  br label %return, !dbg !11666

if.end:                                           ; preds = %lor.lhs.false3
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11667
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 6, !dbg !11669
  %10 = load i32, i32* %options, align 8, !dbg !11669
  %conv = zext i32 %10 to i64, !dbg !11667
  %and = and i64 %conv, 8388608, !dbg !11670
  %tobool7 = icmp ne i64 %and, 0, !dbg !11670
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !11671

if.then8:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1, !dbg !11672
  br label %return, !dbg !11672

if.end9:                                          ; preds = %if.end
  store i1 true, i1* %retval, align 1, !dbg !11673
  br label %return, !dbg !11673

return:                                           ; preds = %if.end9, %if.then8, %if.then
  %11 = load i1, i1* %retval, align 1, !dbg !11674
  ret i1 %11, !dbg !11674
}

; Function Attrs: noredzone
declare dso_local %struct.nand_interface_config* @nand_get_reset_interface_config() #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @test_bit(i64 %nr, i64* %addr) #0 !dbg !11675 {
entry:
  %nr.addr.i3 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %nr.addr.i3, metadata !11682, metadata !DIExpression()), !dbg !11684
  %addr.addr.i4 = alloca i64*, align 8
  call void @llvm.dbg.declare(metadata i64** %addr.addr.i4, metadata !11686, metadata !DIExpression()), !dbg !11687
  %oldbit.i = alloca i8, align 1
  call void @llvm.dbg.declare(metadata i8* %oldbit.i, metadata !11688, metadata !DIExpression()), !dbg !11689
  %nr.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %nr.addr.i, metadata !11690, metadata !DIExpression()), !dbg !11692
  %addr.addr.i = alloca i64*, align 8
  call void @llvm.dbg.declare(metadata i64** %addr.addr.i, metadata !11694, metadata !DIExpression()), !dbg !11695
  %v.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %v.addr.i, metadata !11696, metadata !DIExpression()), !dbg !11704
  %size.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i, metadata !11706, metadata !DIExpression()), !dbg !11707
  %nr.addr = alloca i64, align 8
  %addr.addr = alloca i64*, align 8
  store i64 %nr, i64* %nr.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %nr.addr, metadata !11708, metadata !DIExpression()), !dbg !11709
  store i64* %addr, i64** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %addr.addr, metadata !11710, metadata !DIExpression()), !dbg !11711
  %0 = load i64*, i64** %addr.addr, align 8, !dbg !11712
  %1 = load i64, i64* %nr.addr, align 8, !dbg !11713
  %div = sdiv i64 %1, 64, !dbg !11713
  %add.ptr = getelementptr i64, i64* %0, i64 %div, !dbg !11714
  %2 = bitcast i64* %add.ptr to i8*, !dbg !11712
  store i8* %2, i8** %v.addr.i, align 8
  store i64 8, i64* %size.addr.i, align 8
  %3 = load i8*, i8** %v.addr.i, align 8, !dbg !11715
  %4 = load i64, i64* %size.addr.i, align 8, !dbg !11716
  %conv.i = trunc i64 %4 to i32, !dbg !11716
  %call.i = call zeroext i1 @kasan_check_read(i8* %3, i32 %conv.i) #10, !dbg !11717
  %5 = load i8*, i8** %v.addr.i, align 8, !dbg !11718
  %6 = load i64, i64* %size.addr.i, align 8, !dbg !11718
  call void @kcsan_check_access(i8* %5, i64 %6, i32 4) #10, !dbg !11718
  %7 = load i64, i64* %nr.addr, align 8, !dbg !11719
  %8 = call i1 @llvm.is.constant.i64(i64 %7), !dbg !11719
  br i1 %8, label %cond.true, label %cond.false, !dbg !11719

cond.true:                                        ; preds = %entry
  %9 = load i64, i64* %nr.addr, align 8, !dbg !11719
  %10 = load i64*, i64** %addr.addr, align 8, !dbg !11719
  store i64 %9, i64* %nr.addr.i, align 8
  store i64* %10, i64** %addr.addr.i, align 8
  %11 = load i64, i64* %nr.addr.i, align 8, !dbg !11720
  %and.i = and i64 %11, 63, !dbg !11721
  %shl.i = shl i64 1, %and.i, !dbg !11722
  %12 = load i64*, i64** %addr.addr.i, align 8, !dbg !11723
  %13 = load i64, i64* %nr.addr.i, align 8, !dbg !11724
  %shr.i = ashr i64 %13, 6, !dbg !11725
  %arrayidx.i = getelementptr i64, i64* %12, i64 %shr.i, !dbg !11723
  %14 = load volatile i64, i64* %arrayidx.i, align 8, !dbg !11723
  %and1.i = and i64 %shl.i, %14, !dbg !11726
  %cmp.i = icmp ne i64 %and1.i, 0, !dbg !11727
  %conv = zext i1 %cmp.i to i32, !dbg !11719
  br label %cond.end, !dbg !11719

cond.false:                                       ; preds = %entry
  %15 = load i64, i64* %nr.addr, align 8, !dbg !11719
  %16 = load i64*, i64** %addr.addr, align 8, !dbg !11719
  store i64 %15, i64* %nr.addr.i3, align 8
  store i64* %16, i64** %addr.addr.i4, align 8
  %17 = load i64*, i64** %addr.addr.i4, align 8, !dbg !11728
  %18 = load i64, i64* %nr.addr.i3, align 8, !dbg !11729
  %19 = call i8 asm sideeffect " btq  $2,$1\0A\09/* output condition code c*/\0A", "={@ccc},*m,Ir,~{memory},~{dirflag},~{fpsr},~{flags}"(i64* %17, i64 %18) #9, !dbg !11730, !srcloc !11731
  store i8 %19, i8* %oldbit.i, align 1, !dbg !11730
  %20 = load i8, i8* %oldbit.i, align 1, !dbg !11732
  %tobool.i = trunc i8 %20 to i1, !dbg !11732
  %conv2 = zext i1 %tobool.i to i32, !dbg !11719
  br label %cond.end, !dbg !11719

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv, %cond.true ], [ %conv2, %cond.false ], !dbg !11719
  %tobool = icmp ne i32 %cond, 0, !dbg !11719
  ret i1 %tobool, !dbg !11733
}

; Function Attrs: nounwind readnone willreturn
declare i1 @llvm.is.constant.i64(i64) #5

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @kasan_check_read(i8* %p, i32 %size) #0 !dbg !11734 {
entry:
  %p.addr = alloca i8*, align 8
  %size.addr = alloca i32, align 4
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !11738, metadata !DIExpression()), !dbg !11739
  store i32 %size, i32* %size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size.addr, metadata !11740, metadata !DIExpression()), !dbg !11741
  ret i1 true, !dbg !11742
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @kcsan_check_access(i8* %ptr, i64 %size, i32 %type) #0 !dbg !11743 {
entry:
  %ptr.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %type.addr = alloca i32, align 4
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !11747, metadata !DIExpression()), !dbg !11748
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !11749, metadata !DIExpression()), !dbg !11750
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !11751, metadata !DIExpression()), !dbg !11752
  ret void, !dbg !11753
}

; Function Attrs: nounwind readnone willreturn
declare i1 @llvm.is.constant.i8(i8) #5

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @__arch_hweight8(i32 %w) #0 !dbg !11754 {
entry:
  %w.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %w.addr.i, metadata !11757, metadata !DIExpression()), !dbg !11759
  %res.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %res.i, metadata !11761, metadata !DIExpression()), !dbg !11762
  %w.addr = alloca i32, align 4
  store i32 %w, i32* %w.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %w.addr, metadata !11763, metadata !DIExpression()), !dbg !11764
  %0 = load i32, i32* %w.addr, align 4, !dbg !11765
  %and = and i32 %0, 255, !dbg !11766
  store i32 %and, i32* %w.addr.i, align 4
  %1 = load i32, i32* %w.addr.i, align 4, !dbg !11767
  %2 = call i32 asm "# ALT: oldnstr\0A661:\0A\09call __sw_hweight32\0A662:\0A# ALT: padding\0A.skip -(((6651f-6641f)-(662b-661b)) > 0) * ((6651f-6641f)-(662b-661b)),0x90\0A663:\0A.pushsection .altinstructions,\22a\22\0A .long 661b - .\0A .long 6641f - .\0A .word ( 4*32+23)\0A .byte 663b-661b\0A .byte 6651f-6641f\0A .byte 663b-662b\0A.popsection\0A.pushsection .altinstr_replacement, \22ax\22\0A# ALT: replacement 1\0A6641:\0A\09popcntl $1, $0\0A6651:\0A.popsection\0A", "={ax},{di},~{dirflag},~{fpsr},~{flags}"(i32 %1) #13, !dbg !11768, !srcloc !11769
  store i32 %2, i32* %res.i, align 4, !dbg !11768
  %3 = load i32, i32* %res.i, align 4, !dbg !11770
  ret i32 %3, !dbg !11771
}

; Function Attrs: noredzone
declare dso_local void @mutex_lock(%struct.mutex*) #2

; Function Attrs: noredzone
declare dso_local void @mutex_unlock(%struct.mutex*) #2

; Function Attrs: noredzone
declare dso_local i32 @nand_isbad_bbt(%struct.nand_chip*, i64, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_isbad_bbm(%struct.nand_chip* %chip, i64 %ofs) #0 !dbg !11772 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %ofs.addr = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11773, metadata !DIExpression()), !dbg !11774
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !11775, metadata !DIExpression()), !dbg !11776
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11777
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 6, !dbg !11779
  %1 = load i32, i32* %options, align 8, !dbg !11779
  %conv = zext i32 %1 to i64, !dbg !11777
  %and = and i64 %conv, 134217728, !dbg !11780
  %tobool = icmp ne i64 %and, 0, !dbg !11780
  br i1 %tobool, label %if.then, label %if.end, !dbg !11781

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !11782
  br label %return, !dbg !11782

if.end:                                           ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11783
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 5, !dbg !11785
  %block_bad = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 11, !dbg !11786
  %3 = load i32 (%struct.nand_chip*, i64)*, i32 (%struct.nand_chip*, i64)** %block_bad, align 8, !dbg !11786
  %tobool1 = icmp ne i32 (%struct.nand_chip*, i64)* %3, null, !dbg !11783
  br i1 %tobool1, label %if.then2, label %if.end5, !dbg !11787

if.then2:                                         ; preds = %if.end
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11788
  %legacy3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 5, !dbg !11789
  %block_bad4 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy3, i32 0, i32 11, !dbg !11790
  %5 = load i32 (%struct.nand_chip*, i64)*, i32 (%struct.nand_chip*, i64)** %block_bad4, align 8, !dbg !11790
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11791
  %7 = load i64, i64* %ofs.addr, align 8, !dbg !11792
  %call = call i32 %5(%struct.nand_chip* %6, i64 %7) #8, !dbg !11788
  store i32 %call, i32* %retval, align 4, !dbg !11793
  br label %return, !dbg !11793

if.end5:                                          ; preds = %if.end
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11794
  %9 = load i64, i64* %ofs.addr, align 8, !dbg !11795
  %call6 = call i32 @nand_block_bad(%struct.nand_chip* %8, i64 %9) #8, !dbg !11796
  store i32 %call6, i32* %retval, align 4, !dbg !11797
  br label %return, !dbg !11797

return:                                           ; preds = %if.end5, %if.then2, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !11798
  ret i32 %10, !dbg !11798
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_block_bad(%struct.nand_chip* %chip, i64 %ofs) #0 !dbg !11799 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %ofs.addr = alloca i64, align 8
  %first_page = alloca i32, align 4
  %page_offset = alloca i32, align 4
  %res = alloca i32, align 4
  %bad = alloca i8, align 1
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11800, metadata !DIExpression()), !dbg !11801
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !11802, metadata !DIExpression()), !dbg !11803
  call void @llvm.dbg.declare(metadata i32* %first_page, metadata !11804, metadata !DIExpression()), !dbg !11805
  call void @llvm.dbg.declare(metadata i32* %page_offset, metadata !11806, metadata !DIExpression()), !dbg !11807
  call void @llvm.dbg.declare(metadata i32* %res, metadata !11808, metadata !DIExpression()), !dbg !11809
  call void @llvm.dbg.declare(metadata i8* %bad, metadata !11810, metadata !DIExpression()), !dbg !11811
  %0 = load i64, i64* %ofs.addr, align 8, !dbg !11812
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11813
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 17, !dbg !11814
  %2 = load i32, i32* %page_shift, align 8, !dbg !11814
  %sh_prom = zext i32 %2 to i64, !dbg !11815
  %shr = ashr i64 %0, %sh_prom, !dbg !11815
  %conv = trunc i64 %shr to i32, !dbg !11816
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11817
  %pagemask = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 20, !dbg !11818
  %4 = load i32, i32* %pagemask, align 4, !dbg !11818
  %and = and i32 %conv, %4, !dbg !11819
  store i32 %and, i32* %first_page, align 4, !dbg !11820
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11821
  %call = call i32 @nand_bbm_get_next_page(%struct.nand_chip* %5, i32 0) #8, !dbg !11822
  store i32 %call, i32* %page_offset, align 4, !dbg !11823
  br label %while.cond, !dbg !11824

while.cond:                                       ; preds = %if.end84, %entry
  %6 = load i32, i32* %page_offset, align 4, !dbg !11825
  %cmp = icmp sge i32 %6, 0, !dbg !11826
  br i1 %cmp, label %while.body, label %while.end, !dbg !11824

while.body:                                       ; preds = %while.cond
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11827
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 31, !dbg !11829
  %read_oob = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 25, !dbg !11830
  %8 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %read_oob, align 8, !dbg !11830
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11831
  %10 = load i32, i32* %first_page, align 4, !dbg !11832
  %11 = load i32, i32* %page_offset, align 4, !dbg !11833
  %add = add i32 %10, %11, !dbg !11834
  %call2 = call i32 %8(%struct.nand_chip* %9, i32 %add) #8, !dbg !11827
  store i32 %call2, i32* %res, align 4, !dbg !11835
  %12 = load i32, i32* %res, align 4, !dbg !11836
  %cmp3 = icmp slt i32 %12, 0, !dbg !11838
  br i1 %cmp3, label %if.then, label %if.end, !dbg !11839

if.then:                                          ; preds = %while.body
  %13 = load i32, i32* %res, align 4, !dbg !11840
  store i32 %13, i32* %retval, align 4, !dbg !11841
  br label %return, !dbg !11841

if.end:                                           ; preds = %while.body
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11842
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %14, i32 0, i32 23, !dbg !11843
  %15 = load i8*, i8** %oob_poi, align 8, !dbg !11843
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11844
  %badblockpos = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %16, i32 0, i32 11, !dbg !11845
  %17 = load i32, i32* %badblockpos, align 8, !dbg !11845
  %idxprom = zext i32 %17 to i64, !dbg !11842
  %arrayidx = getelementptr i8, i8* %15, i64 %idxprom, !dbg !11842
  %18 = load i8, i8* %arrayidx, align 1, !dbg !11842
  store i8 %18, i8* %bad, align 1, !dbg !11846
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11847
  %badblockbits = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %19, i32 0, i32 12, !dbg !11847
  %20 = load i32, i32* %badblockbits, align 4, !dbg !11847
  %cmp5 = icmp eq i32 %20, 8, !dbg !11847
  %lnot = xor i1 %cmp5, true, !dbg !11847
  %lnot7 = xor i1 %lnot, true, !dbg !11847
  %lnot.ext = zext i1 %lnot7 to i32, !dbg !11847
  %conv8 = sext i32 %lnot.ext to i64, !dbg !11847
  %tobool = icmp ne i64 %conv8, 0, !dbg !11847
  br i1 %tobool, label %if.then9, label %if.else, !dbg !11849

if.then9:                                         ; preds = %if.end
  %21 = load i8, i8* %bad, align 1, !dbg !11850
  %conv10 = zext i8 %21 to i32, !dbg !11850
  %cmp11 = icmp ne i32 %conv10, 255, !dbg !11851
  %conv12 = zext i1 %cmp11 to i32, !dbg !11851
  store i32 %conv12, i32* %res, align 4, !dbg !11852
  br label %if.end81, !dbg !11853

if.else:                                          ; preds = %if.end
  %22 = load i8, i8* %bad, align 1, !dbg !11854
  %23 = call i1 @llvm.is.constant.i8(i8 %22), !dbg !11854
  br i1 %23, label %cond.true, label %cond.false, !dbg !11854

cond.true:                                        ; preds = %if.else
  %24 = load i8, i8* %bad, align 1, !dbg !11854
  %conv13 = zext i8 %24 to i64, !dbg !11854
  %and14 = and i64 %conv13, 1, !dbg !11854
  %tobool15 = icmp ne i64 %and14, 0, !dbg !11854
  %lnot16 = xor i1 %tobool15, true, !dbg !11854
  %lnot18 = xor i1 %lnot16, true, !dbg !11854
  %lnot.ext19 = zext i1 %lnot18 to i32, !dbg !11854
  %25 = load i8, i8* %bad, align 1, !dbg !11854
  %conv20 = zext i8 %25 to i64, !dbg !11854
  %and21 = and i64 %conv20, 2, !dbg !11854
  %tobool22 = icmp ne i64 %and21, 0, !dbg !11854
  %lnot23 = xor i1 %tobool22, true, !dbg !11854
  %lnot25 = xor i1 %lnot23, true, !dbg !11854
  %lnot.ext26 = zext i1 %lnot25 to i32, !dbg !11854
  %add27 = add i32 %lnot.ext19, %lnot.ext26, !dbg !11854
  %26 = load i8, i8* %bad, align 1, !dbg !11854
  %conv28 = zext i8 %26 to i64, !dbg !11854
  %and29 = and i64 %conv28, 4, !dbg !11854
  %tobool30 = icmp ne i64 %and29, 0, !dbg !11854
  %lnot31 = xor i1 %tobool30, true, !dbg !11854
  %lnot33 = xor i1 %lnot31, true, !dbg !11854
  %lnot.ext34 = zext i1 %lnot33 to i32, !dbg !11854
  %add35 = add i32 %add27, %lnot.ext34, !dbg !11854
  %27 = load i8, i8* %bad, align 1, !dbg !11854
  %conv36 = zext i8 %27 to i64, !dbg !11854
  %and37 = and i64 %conv36, 8, !dbg !11854
  %tobool38 = icmp ne i64 %and37, 0, !dbg !11854
  %lnot39 = xor i1 %tobool38, true, !dbg !11854
  %lnot41 = xor i1 %lnot39, true, !dbg !11854
  %lnot.ext42 = zext i1 %lnot41 to i32, !dbg !11854
  %add43 = add i32 %add35, %lnot.ext42, !dbg !11854
  %28 = load i8, i8* %bad, align 1, !dbg !11854
  %conv44 = zext i8 %28 to i64, !dbg !11854
  %and45 = and i64 %conv44, 16, !dbg !11854
  %tobool46 = icmp ne i64 %and45, 0, !dbg !11854
  %lnot47 = xor i1 %tobool46, true, !dbg !11854
  %lnot49 = xor i1 %lnot47, true, !dbg !11854
  %lnot.ext50 = zext i1 %lnot49 to i32, !dbg !11854
  %add51 = add i32 %add43, %lnot.ext50, !dbg !11854
  %29 = load i8, i8* %bad, align 1, !dbg !11854
  %conv52 = zext i8 %29 to i64, !dbg !11854
  %and53 = and i64 %conv52, 32, !dbg !11854
  %tobool54 = icmp ne i64 %and53, 0, !dbg !11854
  %lnot55 = xor i1 %tobool54, true, !dbg !11854
  %lnot57 = xor i1 %lnot55, true, !dbg !11854
  %lnot.ext58 = zext i1 %lnot57 to i32, !dbg !11854
  %add59 = add i32 %add51, %lnot.ext58, !dbg !11854
  %30 = load i8, i8* %bad, align 1, !dbg !11854
  %conv60 = zext i8 %30 to i64, !dbg !11854
  %and61 = and i64 %conv60, 64, !dbg !11854
  %tobool62 = icmp ne i64 %and61, 0, !dbg !11854
  %lnot63 = xor i1 %tobool62, true, !dbg !11854
  %lnot65 = xor i1 %lnot63, true, !dbg !11854
  %lnot.ext66 = zext i1 %lnot65 to i32, !dbg !11854
  %add67 = add i32 %add59, %lnot.ext66, !dbg !11854
  %31 = load i8, i8* %bad, align 1, !dbg !11854
  %conv68 = zext i8 %31 to i64, !dbg !11854
  %and69 = and i64 %conv68, 128, !dbg !11854
  %tobool70 = icmp ne i64 %and69, 0, !dbg !11854
  %lnot71 = xor i1 %tobool70, true, !dbg !11854
  %lnot73 = xor i1 %lnot71, true, !dbg !11854
  %lnot.ext74 = zext i1 %lnot73 to i32, !dbg !11854
  %add75 = add i32 %add67, %lnot.ext74, !dbg !11854
  br label %cond.end, !dbg !11854

cond.false:                                       ; preds = %if.else
  %32 = load i8, i8* %bad, align 1, !dbg !11854
  %conv76 = zext i8 %32 to i32, !dbg !11854
  %call77 = call i32 @__arch_hweight8(i32 %conv76) #8, !dbg !11854
  br label %cond.end, !dbg !11854

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %add75, %cond.true ], [ %call77, %cond.false ], !dbg !11854
  %33 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11855
  %badblockbits78 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %33, i32 0, i32 12, !dbg !11856
  %34 = load i32, i32* %badblockbits78, align 4, !dbg !11856
  %cmp79 = icmp ult i32 %cond, %34, !dbg !11857
  %conv80 = zext i1 %cmp79 to i32, !dbg !11857
  store i32 %conv80, i32* %res, align 4, !dbg !11858
  br label %if.end81

if.end81:                                         ; preds = %cond.end, %if.then9
  %35 = load i32, i32* %res, align 4, !dbg !11859
  %tobool82 = icmp ne i32 %35, 0, !dbg !11859
  br i1 %tobool82, label %if.then83, label %if.end84, !dbg !11861

if.then83:                                        ; preds = %if.end81
  %36 = load i32, i32* %res, align 4, !dbg !11862
  store i32 %36, i32* %retval, align 4, !dbg !11863
  br label %return, !dbg !11863

if.end84:                                         ; preds = %if.end81
  %37 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11864
  %38 = load i32, i32* %page_offset, align 4, !dbg !11865
  %add85 = add i32 %38, 1, !dbg !11866
  %call86 = call i32 @nand_bbm_get_next_page(%struct.nand_chip* %37, i32 %add85) #8, !dbg !11867
  store i32 %call86, i32* %page_offset, align 4, !dbg !11868
  br label %while.cond, !dbg !11824, !llvm.loop !11869

while.end:                                        ; preds = %while.cond
  store i32 0, i32* %retval, align 4, !dbg !11871
  br label %return, !dbg !11871

return:                                           ; preds = %while.end, %if.then83, %if.then
  %39 = load i32, i32* %retval, align 4, !dbg !11872
  ret i32 %39, !dbg !11872
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.nand_ecc_props* @nanddev_get_ecc_requirements(%struct.nand_device* %nand) #0 !dbg !11873 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !11876, metadata !DIExpression()), !dbg !11877
  %0 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !11878
  %ecc = getelementptr inbounds %struct.nand_device, %struct.nand_device* %0, i32 0, i32 2, !dbg !11879
  %requirements = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc, i32 0, i32 1, !dbg !11880
  ret %struct.nand_ecc_props* %requirements, !dbg !11881
}

; Function Attrs: noredzone
declare dso_local void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @rawnand_dt_init(%struct.nand_chip* %chip) #0 !dbg !11882 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %nand = alloca %struct.nand_device*, align 8
  %dn = alloca %struct.device_node*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !11883, metadata !DIExpression()), !dbg !11884
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand, metadata !11885, metadata !DIExpression()), !dbg !11886
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11887
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !11888
  %call1 = call %struct.nand_device* @mtd_to_nanddev(%struct.mtd_info* %call) #8, !dbg !11889
  store %struct.nand_device* %call1, %struct.nand_device** %nand, align 8, !dbg !11886
  call void @llvm.dbg.declare(metadata %struct.device_node** %dn, metadata !11890, metadata !DIExpression()), !dbg !11891
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11892
  %call2 = call %struct.device_node* @nand_get_flash_node(%struct.nand_chip* %1) #8, !dbg !11893
  store %struct.device_node* %call2, %struct.device_node** %dn, align 8, !dbg !11891
  %2 = load %struct.device_node*, %struct.device_node** %dn, align 8, !dbg !11894
  %tobool = icmp ne %struct.device_node* %2, null, !dbg !11894
  br i1 %tobool, label %if.end, label %if.then, !dbg !11896

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !11897
  br label %return, !dbg !11897

if.end:                                           ; preds = %entry
  %3 = load %struct.device_node*, %struct.device_node** %dn, align 8, !dbg !11898
  %call3 = call i32 @of_get_nand_bus_width(%struct.device_node* %3) #8, !dbg !11900
  %cmp = icmp eq i32 %call3, 16, !dbg !11901
  br i1 %cmp, label %if.then4, label %if.end6, !dbg !11902

if.then4:                                         ; preds = %if.end
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11903
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 6, !dbg !11904
  %5 = load i32, i32* %options, align 8, !dbg !11905
  %conv = zext i32 %5 to i64, !dbg !11905
  %or = or i64 %conv, 2, !dbg !11905
  %conv5 = trunc i64 %or to i32, !dbg !11905
  store i32 %conv5, i32* %options, align 8, !dbg !11905
  br label %if.end6, !dbg !11903

if.end6:                                          ; preds = %if.then4, %if.end
  %6 = load %struct.device_node*, %struct.device_node** %dn, align 8, !dbg !11906
  %call7 = call zeroext i1 @of_property_read_bool(%struct.device_node* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0)) #8, !dbg !11908
  br i1 %call7, label %if.then8, label %if.end13, !dbg !11909

if.then8:                                         ; preds = %if.end6
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11910
  %options9 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 6, !dbg !11911
  %8 = load i32, i32* %options9, align 8, !dbg !11912
  %conv10 = zext i32 %8 to i64, !dbg !11912
  %or11 = or i64 %conv10, 4194304, !dbg !11912
  %conv12 = trunc i64 %or11 to i32, !dbg !11912
  store i32 %conv12, i32* %options9, align 8, !dbg !11912
  br label %if.end13, !dbg !11910

if.end13:                                         ; preds = %if.then8, %if.end6
  %9 = load %struct.device_node*, %struct.device_node** %dn, align 8, !dbg !11913
  %call14 = call zeroext i1 @of_get_nand_on_flash_bbt(%struct.device_node* %9) #8, !dbg !11915
  br i1 %call14, label %if.then15, label %if.end17, !dbg !11916

if.then15:                                        ; preds = %if.end13
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11917
  %bbt_options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 10, !dbg !11918
  %11 = load i32, i32* %bbt_options, align 4, !dbg !11919
  %or16 = or i32 %11, 131072, !dbg !11919
  store i32 %or16, i32* %bbt_options, align 4, !dbg !11919
  br label %if.end17, !dbg !11917

if.end17:                                         ; preds = %if.then15, %if.end13
  %12 = load %struct.nand_device*, %struct.nand_device** %nand, align 8, !dbg !11920
  call void @of_get_nand_ecc_user_config(%struct.nand_device* %12) #8, !dbg !11921
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11922
  call void @of_get_nand_ecc_legacy_user_config(%struct.nand_chip* %13) #8, !dbg !11923
  %14 = load %struct.nand_device*, %struct.nand_device** %nand, align 8, !dbg !11924
  %ecc = getelementptr inbounds %struct.nand_device, %struct.nand_device* %14, i32 0, i32 2, !dbg !11925
  %defaults = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc, i32 0, i32 0, !dbg !11926
  %engine_type = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %defaults, i32 0, i32 0, !dbg !11927
  store i32 3, i32* %engine_type, align 8, !dbg !11928
  %15 = load %struct.nand_device*, %struct.nand_device** %nand, align 8, !dbg !11929
  %ecc18 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %15, i32 0, i32 2, !dbg !11931
  %user_conf = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc18, i32 0, i32 2, !dbg !11932
  %engine_type19 = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %user_conf, i32 0, i32 0, !dbg !11933
  %16 = load i32, i32* %engine_type19, align 8, !dbg !11933
  %cmp20 = icmp ne i32 %16, 0, !dbg !11934
  br i1 %cmp20, label %if.then22, label %if.end28, !dbg !11935

if.then22:                                        ; preds = %if.end17
  %17 = load %struct.nand_device*, %struct.nand_device** %nand, align 8, !dbg !11936
  %ecc23 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %17, i32 0, i32 2, !dbg !11937
  %user_conf24 = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc23, i32 0, i32 2, !dbg !11938
  %engine_type25 = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %user_conf24, i32 0, i32 0, !dbg !11939
  %18 = load i32, i32* %engine_type25, align 8, !dbg !11939
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11940
  %ecc26 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %19, i32 0, i32 31, !dbg !11941
  %engine_type27 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc26, i32 0, i32 0, !dbg !11942
  store i32 %18, i32* %engine_type27, align 8, !dbg !11943
  br label %if.end28, !dbg !11940

if.end28:                                         ; preds = %if.then22, %if.end17
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11944
  %ecc29 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %20, i32 0, i32 31, !dbg !11946
  %engine_type30 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc29, i32 0, i32 0, !dbg !11947
  %21 = load i32, i32* %engine_type30, align 8, !dbg !11947
  %cmp31 = icmp eq i32 %21, 0, !dbg !11948
  br i1 %cmp31, label %if.then33, label %if.end39, !dbg !11949

if.then33:                                        ; preds = %if.end28
  %22 = load %struct.nand_device*, %struct.nand_device** %nand, align 8, !dbg !11950
  %ecc34 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %22, i32 0, i32 2, !dbg !11951
  %defaults35 = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc34, i32 0, i32 0, !dbg !11952
  %engine_type36 = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %defaults35, i32 0, i32 0, !dbg !11953
  %23 = load i32, i32* %engine_type36, align 8, !dbg !11953
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11954
  %ecc37 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %24, i32 0, i32 31, !dbg !11955
  %engine_type38 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc37, i32 0, i32 0, !dbg !11956
  store i32 %23, i32* %engine_type38, align 8, !dbg !11957
  br label %if.end39, !dbg !11954

if.end39:                                         ; preds = %if.then33, %if.end28
  %25 = load %struct.nand_device*, %struct.nand_device** %nand, align 8, !dbg !11958
  %ecc40 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %25, i32 0, i32 2, !dbg !11959
  %user_conf41 = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc40, i32 0, i32 2, !dbg !11960
  %placement = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %user_conf41, i32 0, i32 1, !dbg !11961
  %26 = load i32, i32* %placement, align 4, !dbg !11961
  %27 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11962
  %ecc42 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %27, i32 0, i32 31, !dbg !11963
  %placement43 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc42, i32 0, i32 1, !dbg !11964
  store i32 %26, i32* %placement43, align 4, !dbg !11965
  %28 = load %struct.nand_device*, %struct.nand_device** %nand, align 8, !dbg !11966
  %ecc44 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %28, i32 0, i32 2, !dbg !11967
  %user_conf45 = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc44, i32 0, i32 2, !dbg !11968
  %algo = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %user_conf45, i32 0, i32 2, !dbg !11969
  %29 = load i32, i32* %algo, align 8, !dbg !11969
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11970
  %ecc46 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %30, i32 0, i32 31, !dbg !11971
  %algo47 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc46, i32 0, i32 2, !dbg !11972
  store i32 %29, i32* %algo47, align 8, !dbg !11973
  %31 = load %struct.nand_device*, %struct.nand_device** %nand, align 8, !dbg !11974
  %ecc48 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %31, i32 0, i32 2, !dbg !11975
  %user_conf49 = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc48, i32 0, i32 2, !dbg !11976
  %strength = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %user_conf49, i32 0, i32 3, !dbg !11977
  %32 = load i32, i32* %strength, align 4, !dbg !11977
  %33 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11978
  %ecc50 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %33, i32 0, i32 31, !dbg !11979
  %strength51 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc50, i32 0, i32 7, !dbg !11980
  store i32 %32, i32* %strength51, align 4, !dbg !11981
  %34 = load %struct.nand_device*, %struct.nand_device** %nand, align 8, !dbg !11982
  %ecc52 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %34, i32 0, i32 2, !dbg !11983
  %user_conf53 = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc52, i32 0, i32 2, !dbg !11984
  %step_size = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %user_conf53, i32 0, i32 4, !dbg !11985
  %35 = load i32, i32* %step_size, align 8, !dbg !11985
  %36 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !11986
  %ecc54 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %36, i32 0, i32 31, !dbg !11987
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc54, i32 0, i32 4, !dbg !11988
  store i32 %35, i32* %size, align 8, !dbg !11989
  store i32 0, i32* %retval, align 4, !dbg !11990
  br label %return, !dbg !11990

return:                                           ; preds = %if.end39, %if.then
  %37 = load i32, i32* %retval, align 4, !dbg !11991
  ret i32 %37, !dbg !11991
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @dev_name(%struct.device* %dev) #0 !dbg !11992 {
entry:
  %retval = alloca i8*, align 8
  %dev.addr = alloca %struct.device*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !11995, metadata !DIExpression()), !dbg !11996
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !11997
  %init_name = getelementptr inbounds %struct.device, %struct.device* %0, i32 0, i32 3, !dbg !11999
  %1 = load i8*, i8** %init_name, align 8, !dbg !11999
  %tobool = icmp ne i8* %1, null, !dbg !11997
  br i1 %tobool, label %if.then, label %if.end, !dbg !12000

if.then:                                          ; preds = %entry
  %2 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !12001
  %init_name1 = getelementptr inbounds %struct.device, %struct.device* %2, i32 0, i32 3, !dbg !12002
  %3 = load i8*, i8** %init_name1, align 8, !dbg !12002
  store i8* %3, i8** %retval, align 8, !dbg !12003
  br label %return, !dbg !12003

if.end:                                           ; preds = %entry
  %4 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !12004
  %kobj = getelementptr inbounds %struct.device, %struct.device* %4, i32 0, i32 0, !dbg !12005
  %call = call i8* @kobject_name(%struct.kobject* %kobj) #8, !dbg !12006
  store i8* %call, i8** %retval, align 8, !dbg !12007
  br label %return, !dbg !12007

return:                                           ; preds = %if.end, %if.then
  %5 = load i8*, i8** %retval, align 8, !dbg !12008
  ret i8* %5, !dbg !12008
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_set_defaults(%struct.nand_chip* %chip) #0 !dbg !12009 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !12010, metadata !DIExpression()), !dbg !12011
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12012
  %controller = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 30, !dbg !12014
  %1 = load %struct.nand_controller*, %struct.nand_controller** %controller, align 8, !dbg !12014
  %tobool = icmp ne %struct.nand_controller* %1, null, !dbg !12012
  br i1 %tobool, label %if.end, label %if.then, !dbg !12015

if.then:                                          ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12016
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 5, !dbg !12018
  %dummy_controller = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 16, !dbg !12019
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12020
  %controller1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 30, !dbg !12021
  store %struct.nand_controller* %dummy_controller, %struct.nand_controller** %controller1, align 8, !dbg !12022
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12023
  %controller2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 30, !dbg !12024
  %5 = load %struct.nand_controller*, %struct.nand_controller** %controller2, align 8, !dbg !12024
  call void @nand_controller_init(%struct.nand_controller* %5) #8, !dbg !12025
  br label %if.end, !dbg !12026

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12027
  call void @nand_legacy_set_defaults(%struct.nand_chip* %6) #8, !dbg !12028
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12029
  %buf_align = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 25, !dbg !12031
  %8 = load i64, i64* %buf_align, align 8, !dbg !12031
  %tobool3 = icmp ne i64 %8, 0, !dbg !12029
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !12032

if.then4:                                         ; preds = %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12033
  %buf_align5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 25, !dbg !12034
  store i64 1, i64* %buf_align5, align 8, !dbg !12035
  br label %if.end6, !dbg !12033

if.end6:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !12036
}

; Function Attrs: noredzone
declare dso_local i32 @nand_legacy_check_hooks(%struct.nand_chip*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_detect(%struct.nand_chip* %chip, %struct.nand_flash_dev* %type) #0 !dbg !12037 {
entry:
  %x.addr.i222 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i222, metadata !12040, metadata !DIExpression()), !dbg !12042
  %r.i223 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %r.i223, metadata !12046, metadata !DIExpression()), !dbg !12047
  %x.addr.i219 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i219, metadata !12040, metadata !DIExpression()), !dbg !12048
  %r.i220 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %r.i220, metadata !12046, metadata !DIExpression()), !dbg !12050
  %x.addr.i216 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i216, metadata !12040, metadata !DIExpression()), !dbg !12051
  %r.i217 = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %r.i217, metadata !12046, metadata !DIExpression()), !dbg !12053
  %x.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i, metadata !12040, metadata !DIExpression()), !dbg !12054
  %r.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %r.i, metadata !12046, metadata !DIExpression()), !dbg !12056
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %type.addr = alloca %struct.nand_flash_dev*, align 8
  %manufacturer_desc = alloca %struct.nand_manufacturer_desc*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %memorg = alloca %struct.nand_memory_organization*, align 8
  %busw = alloca i32, align 4
  %ret = alloca i32, align 4
  %id_data = alloca i8*, align 8
  %maf_id = alloca i8, align 1
  %dev_id = alloca i8, align 1
  %targetsize = alloca i64, align 8
  %_tmp = alloca i64, align 8
  %__base = alloca i32, align 4
  %__rem = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp103 = alloca i64, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp136 = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !12057, metadata !DIExpression()), !dbg !12058
  store %struct.nand_flash_dev* %type, %struct.nand_flash_dev** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_flash_dev** %type.addr, metadata !12059, metadata !DIExpression()), !dbg !12060
  call void @llvm.dbg.declare(metadata %struct.nand_manufacturer_desc** %manufacturer_desc, metadata !12061, metadata !DIExpression()), !dbg !12062
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !12063, metadata !DIExpression()), !dbg !12064
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12065
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !12066
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !12064
  call void @llvm.dbg.declare(metadata %struct.nand_memory_organization** %memorg, metadata !12067, metadata !DIExpression()), !dbg !12068
  call void @llvm.dbg.declare(metadata i32* %busw, metadata !12069, metadata !DIExpression()), !dbg !12070
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !12071, metadata !DIExpression()), !dbg !12072
  call void @llvm.dbg.declare(metadata i8** %id_data, metadata !12073, metadata !DIExpression()), !dbg !12074
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12075
  %id = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 1, !dbg !12076
  %data = getelementptr inbounds %struct.nand_id, %struct.nand_id* %id, i32 0, i32 0, !dbg !12077
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %data, i64 0, i64 0, !dbg !12075
  store i8* %arraydecay, i8** %id_data, align 8, !dbg !12074
  call void @llvm.dbg.declare(metadata i8* %maf_id, metadata !12078, metadata !DIExpression()), !dbg !12079
  call void @llvm.dbg.declare(metadata i8* %dev_id, metadata !12080, metadata !DIExpression()), !dbg !12081
  call void @llvm.dbg.declare(metadata i64* %targetsize, metadata !12082, metadata !DIExpression()), !dbg !12083
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12084
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 0, !dbg !12085
  %call1 = call %struct.nand_memory_organization* @nanddev_get_memorg(%struct.nand_device* %base) #8, !dbg !12086
  store %struct.nand_memory_organization* %call1, %struct.nand_memory_organization** %memorg, align 8, !dbg !12087
  %3 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12088
  %planes_per_lun = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %3, i32 0, i32 6, !dbg !12089
  store i32 1, i32* %planes_per_lun, align 4, !dbg !12090
  %4 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12091
  %luns_per_target = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %4, i32 0, i32 7, !dbg !12092
  store i32 1, i32* %luns_per_target, align 4, !dbg !12093
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12094
  %call2 = call i32 @nand_reset(%struct.nand_chip* %5, i32 0) #8, !dbg !12095
  store i32 %call2, i32* %ret, align 4, !dbg !12096
  %6 = load i32, i32* %ret, align 4, !dbg !12097
  %tobool = icmp ne i32 %6, 0, !dbg !12097
  br i1 %tobool, label %if.then, label %if.end, !dbg !12099

if.then:                                          ; preds = %entry
  %7 = load i32, i32* %ret, align 4, !dbg !12100
  store i32 %7, i32* %retval, align 4, !dbg !12101
  br label %return, !dbg !12101

if.end:                                           ; preds = %entry
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12102
  call void @nand_select_target(%struct.nand_chip* %8, i32 0) #8, !dbg !12103
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12104
  %10 = load i8*, i8** %id_data, align 8, !dbg !12105
  %call3 = call i32 @nand_readid_op(%struct.nand_chip* %9, i8 zeroext 0, i8* %10, i32 2) #8, !dbg !12106
  store i32 %call3, i32* %ret, align 4, !dbg !12107
  %11 = load i32, i32* %ret, align 4, !dbg !12108
  %tobool4 = icmp ne i32 %11, 0, !dbg !12108
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !12110

if.then5:                                         ; preds = %if.end
  %12 = load i32, i32* %ret, align 4, !dbg !12111
  store i32 %12, i32* %retval, align 4, !dbg !12112
  br label %return, !dbg !12112

if.end6:                                          ; preds = %if.end
  %13 = load i8*, i8** %id_data, align 8, !dbg !12113
  %arrayidx = getelementptr i8, i8* %13, i64 0, !dbg !12113
  %14 = load i8, i8* %arrayidx, align 1, !dbg !12113
  store i8 %14, i8* %maf_id, align 1, !dbg !12114
  %15 = load i8*, i8** %id_data, align 8, !dbg !12115
  %arrayidx7 = getelementptr i8, i8* %15, i64 1, !dbg !12115
  %16 = load i8, i8* %arrayidx7, align 1, !dbg !12115
  store i8 %16, i8* %dev_id, align 1, !dbg !12116
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12117
  %18 = load i8*, i8** %id_data, align 8, !dbg !12118
  %call8 = call i32 @nand_readid_op(%struct.nand_chip* %17, i8 zeroext 0, i8* %18, i32 8) #8, !dbg !12119
  store i32 %call8, i32* %ret, align 4, !dbg !12120
  %19 = load i32, i32* %ret, align 4, !dbg !12121
  %tobool9 = icmp ne i32 %19, 0, !dbg !12121
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !12123

if.then10:                                        ; preds = %if.end6
  %20 = load i32, i32* %ret, align 4, !dbg !12124
  store i32 %20, i32* %retval, align 4, !dbg !12125
  br label %return, !dbg !12125

if.end11:                                         ; preds = %if.end6
  %21 = load i8*, i8** %id_data, align 8, !dbg !12126
  %arrayidx12 = getelementptr i8, i8* %21, i64 0, !dbg !12126
  %22 = load i8, i8* %arrayidx12, align 1, !dbg !12126
  %conv = zext i8 %22 to i32, !dbg !12126
  %23 = load i8, i8* %maf_id, align 1, !dbg !12128
  %conv13 = zext i8 %23 to i32, !dbg !12128
  %cmp = icmp ne i32 %conv, %conv13, !dbg !12129
  br i1 %cmp, label %if.then20, label %lor.lhs.false, !dbg !12130

lor.lhs.false:                                    ; preds = %if.end11
  %24 = load i8*, i8** %id_data, align 8, !dbg !12131
  %arrayidx15 = getelementptr i8, i8* %24, i64 1, !dbg !12131
  %25 = load i8, i8* %arrayidx15, align 1, !dbg !12131
  %conv16 = zext i8 %25 to i32, !dbg !12131
  %26 = load i8, i8* %dev_id, align 1, !dbg !12132
  %conv17 = zext i8 %26 to i32, !dbg !12132
  %cmp18 = icmp ne i32 %conv16, %conv17, !dbg !12133
  br i1 %cmp18, label %if.then20, label %if.end28, !dbg !12134

if.then20:                                        ; preds = %lor.lhs.false, %if.end11
  %27 = load i8, i8* %maf_id, align 1, !dbg !12135
  %conv21 = zext i8 %27 to i32, !dbg !12135
  %28 = load i8, i8* %dev_id, align 1, !dbg !12135
  %conv22 = zext i8 %28 to i32, !dbg !12135
  %29 = load i8*, i8** %id_data, align 8, !dbg !12135
  %arrayidx23 = getelementptr i8, i8* %29, i64 0, !dbg !12135
  %30 = load i8, i8* %arrayidx23, align 1, !dbg !12135
  %conv24 = zext i8 %30 to i32, !dbg !12135
  %31 = load i8*, i8** %id_data, align 8, !dbg !12135
  %arrayidx25 = getelementptr i8, i8* %31, i64 1, !dbg !12135
  %32 = load i8, i8* %arrayidx25, align 1, !dbg !12135
  %conv26 = zext i8 %32 to i32, !dbg !12135
  %call27 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.21, i64 0, i64 0), i32 %conv21, i32 %conv22, i32 %conv24, i32 %conv26) #12, !dbg !12135
  store i32 -19, i32* %retval, align 4, !dbg !12137
  br label %return, !dbg !12137

if.end28:                                         ; preds = %lor.lhs.false
  %33 = load i8*, i8** %id_data, align 8, !dbg !12138
  %call29 = call i32 @nand_id_len(i8* %33, i32 8) #8, !dbg !12139
  %34 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12140
  %id30 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %34, i32 0, i32 1, !dbg !12141
  %len = getelementptr inbounds %struct.nand_id, %struct.nand_id* %id30, i32 0, i32 1, !dbg !12142
  store i32 %call29, i32* %len, align 8, !dbg !12143
  %35 = load i8, i8* %maf_id, align 1, !dbg !12144
  %call31 = call %struct.nand_manufacturer_desc* @nand_get_manufacturer_desc(i8 zeroext %35) #8, !dbg !12145
  store %struct.nand_manufacturer_desc* %call31, %struct.nand_manufacturer_desc** %manufacturer_desc, align 8, !dbg !12146
  %36 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %manufacturer_desc, align 8, !dbg !12147
  %37 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12148
  %manufacturer = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %37, i32 0, i32 3, !dbg !12149
  %desc = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer, i32 0, i32 0, !dbg !12150
  store %struct.nand_manufacturer_desc* %36, %struct.nand_manufacturer_desc** %desc, align 8, !dbg !12151
  %38 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12152
  %tobool32 = icmp ne %struct.nand_flash_dev* %38, null, !dbg !12152
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !12154

if.then33:                                        ; preds = %if.end28
  store %struct.nand_flash_dev* getelementptr inbounds ([0 x %struct.nand_flash_dev], [0 x %struct.nand_flash_dev]* @nand_flash_ids, i64 0, i64 0), %struct.nand_flash_dev** %type.addr, align 8, !dbg !12155
  br label %if.end34, !dbg !12156

if.end34:                                         ; preds = %if.then33, %if.end28
  %39 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12157
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %39, i32 0, i32 6, !dbg !12158
  %40 = load i32, i32* %options, align 8, !dbg !12158
  %conv35 = zext i32 %40 to i64, !dbg !12157
  %and = and i64 %conv35, 2, !dbg !12159
  %conv36 = trunc i64 %and to i32, !dbg !12157
  store i32 %conv36, i32* %busw, align 4, !dbg !12160
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12161
  %options37 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %41, i32 0, i32 6, !dbg !12162
  %42 = load i32, i32* %options37, align 8, !dbg !12163
  %conv38 = zext i32 %42 to i64, !dbg !12163
  %and39 = and i64 %conv38, -3, !dbg !12163
  %conv40 = trunc i64 %and39 to i32, !dbg !12163
  store i32 %conv40, i32* %options37, align 8, !dbg !12163
  br label %for.cond, !dbg !12164

for.cond:                                         ; preds = %for.inc, %if.end34
  %43 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12165
  %name = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %43, i32 0, i32 0, !dbg !12168
  %44 = load i8*, i8** %name, align 8, !dbg !12168
  %cmp41 = icmp ne i8* %44, null, !dbg !12169
  br i1 %cmp41, label %for.body, label %for.end, !dbg !12170

for.body:                                         ; preds = %for.cond
  %45 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12171
  %call43 = call zeroext i1 @is_full_id_nand(%struct.nand_flash_dev* %45) #8, !dbg !12174
  br i1 %call43, label %if.then44, label %if.else, !dbg !12175

if.then44:                                        ; preds = %for.body
  %46 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12176
  %47 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12179
  %call45 = call zeroext i1 @find_full_id_nand(%struct.nand_chip* %46, %struct.nand_flash_dev* %47) #8, !dbg !12180
  br i1 %call45, label %if.then46, label %if.end47, !dbg !12181

if.then46:                                        ; preds = %if.then44
  br label %ident_done, !dbg !12182

if.end47:                                         ; preds = %if.then44
  br label %if.end55, !dbg !12183

if.else:                                          ; preds = %for.body
  %48 = load i8, i8* %dev_id, align 1, !dbg !12184
  %conv48 = zext i8 %48 to i32, !dbg !12184
  %49 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12186
  %50 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %49, i32 0, i32 1, !dbg !12187
  %51 = bitcast %union.anon.76* %50 to %struct.anon.77*, !dbg !12187
  %dev_id49 = getelementptr inbounds %struct.anon.77, %struct.anon.77* %51, i32 0, i32 1, !dbg !12187
  %52 = load i8, i8* %dev_id49, align 1, !dbg !12187
  %conv50 = zext i8 %52 to i32, !dbg !12186
  %cmp51 = icmp eq i32 %conv48, %conv50, !dbg !12188
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !12189

if.then53:                                        ; preds = %if.else
  br label %for.end, !dbg !12190

if.end54:                                         ; preds = %if.else
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end47
  br label %for.inc, !dbg !12192

for.inc:                                          ; preds = %if.end55
  %53 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12193
  %incdec.ptr = getelementptr %struct.nand_flash_dev, %struct.nand_flash_dev* %53, i32 1, !dbg !12193
  store %struct.nand_flash_dev* %incdec.ptr, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12193
  br label %for.cond, !dbg !12194, !llvm.loop !12195

for.end:                                          ; preds = %if.then53, %for.cond
  %54 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12197
  %name56 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %54, i32 0, i32 0, !dbg !12199
  %55 = load i8*, i8** %name56, align 8, !dbg !12199
  %tobool57 = icmp ne i8* %55, null, !dbg !12197
  br i1 %tobool57, label %lor.lhs.false58, label %if.then60, !dbg !12200

lor.lhs.false58:                                  ; preds = %for.end
  %56 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12201
  %pagesize = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %56, i32 0, i32 2, !dbg !12202
  %57 = load i32, i32* %pagesize, align 8, !dbg !12202
  %tobool59 = icmp ne i32 %57, 0, !dbg !12201
  br i1 %tobool59, label %if.end79, label %if.then60, !dbg !12203

if.then60:                                        ; preds = %lor.lhs.false58, %for.end
  %58 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12204
  %call61 = call i32 @nand_onfi_detect(%struct.nand_chip* %58) #8, !dbg !12206
  store i32 %call61, i32* %ret, align 4, !dbg !12207
  %59 = load i32, i32* %ret, align 4, !dbg !12208
  %cmp62 = icmp slt i32 %59, 0, !dbg !12210
  br i1 %cmp62, label %if.then64, label %if.else65, !dbg !12211

if.then64:                                        ; preds = %if.then60
  %60 = load i32, i32* %ret, align 4, !dbg !12212
  store i32 %60, i32* %retval, align 4, !dbg !12213
  br label %return, !dbg !12213

if.else65:                                        ; preds = %if.then60
  %61 = load i32, i32* %ret, align 4, !dbg !12214
  %tobool66 = icmp ne i32 %61, 0, !dbg !12214
  br i1 %tobool66, label %if.then67, label %if.end68, !dbg !12216

if.then67:                                        ; preds = %if.else65
  br label %ident_done, !dbg !12217

if.end68:                                         ; preds = %if.else65
  br label %if.end69

if.end69:                                         ; preds = %if.end68
  %62 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12218
  %call70 = call i32 @nand_jedec_detect(%struct.nand_chip* %62) #8, !dbg !12219
  store i32 %call70, i32* %ret, align 4, !dbg !12220
  %63 = load i32, i32* %ret, align 4, !dbg !12221
  %cmp71 = icmp slt i32 %63, 0, !dbg !12223
  br i1 %cmp71, label %if.then73, label %if.else74, !dbg !12224

if.then73:                                        ; preds = %if.end69
  %64 = load i32, i32* %ret, align 4, !dbg !12225
  store i32 %64, i32* %retval, align 4, !dbg !12226
  br label %return, !dbg !12226

if.else74:                                        ; preds = %if.end69
  %65 = load i32, i32* %ret, align 4, !dbg !12227
  %tobool75 = icmp ne i32 %65, 0, !dbg !12227
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !12229

if.then76:                                        ; preds = %if.else74
  br label %ident_done, !dbg !12230

if.end77:                                         ; preds = %if.else74
  br label %if.end78

if.end78:                                         ; preds = %if.end77
  br label %if.end79, !dbg !12231

if.end79:                                         ; preds = %if.end78, %lor.lhs.false58
  %66 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12232
  %name80 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %66, i32 0, i32 0, !dbg !12234
  %67 = load i8*, i8** %name80, align 8, !dbg !12234
  %tobool81 = icmp ne i8* %67, null, !dbg !12232
  br i1 %tobool81, label %if.end83, label %if.then82, !dbg !12235

if.then82:                                        ; preds = %if.end79
  store i32 -19, i32* %retval, align 4, !dbg !12236
  br label %return, !dbg !12236

if.end83:                                         ; preds = %if.end79
  %68 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12237
  %name84 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %68, i32 0, i32 0, !dbg !12238
  %69 = load i8*, i8** %name84, align 8, !dbg !12238
  %call85 = call noalias i8* @kstrdup(i8* %69, i32 3264) #8, !dbg !12239
  %70 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12240
  %parameters = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %70, i32 0, i32 2, !dbg !12241
  %model = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters, i32 0, i32 0, !dbg !12242
  store i8* %call85, i8** %model, align 8, !dbg !12243
  %71 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12244
  %parameters86 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %71, i32 0, i32 2, !dbg !12246
  %model87 = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters86, i32 0, i32 0, !dbg !12247
  %72 = load i8*, i8** %model87, align 8, !dbg !12247
  %tobool88 = icmp ne i8* %72, null, !dbg !12244
  br i1 %tobool88, label %if.end90, label %if.then89, !dbg !12248

if.then89:                                        ; preds = %if.end83
  store i32 -12, i32* %retval, align 4, !dbg !12249
  br label %return, !dbg !12249

if.end90:                                         ; preds = %if.end83
  %73 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12250
  %pagesize91 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %73, i32 0, i32 2, !dbg !12252
  %74 = load i32, i32* %pagesize91, align 8, !dbg !12252
  %tobool92 = icmp ne i32 %74, 0, !dbg !12250
  br i1 %tobool92, label %if.else94, label %if.then93, !dbg !12253

if.then93:                                        ; preds = %if.end90
  %75 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12254
  call void @nand_manufacturer_detect(%struct.nand_chip* %75) #8, !dbg !12255
  br label %if.end95, !dbg !12255

if.else94:                                        ; preds = %if.end90
  %76 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12256
  %77 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12257
  call void @nand_decode_id(%struct.nand_chip* %76, %struct.nand_flash_dev* %77) #8, !dbg !12258
  br label %if.end95

if.end95:                                         ; preds = %if.else94, %if.then93
  %78 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12259
  %options96 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %78, i32 0, i32 5, !dbg !12260
  %79 = load i32, i32* %options96, align 4, !dbg !12260
  %80 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12261
  %options97 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %80, i32 0, i32 6, !dbg !12262
  %81 = load i32, i32* %options97, align 8, !dbg !12263
  %or = or i32 %81, %79, !dbg !12263
  store i32 %or, i32* %options97, align 8, !dbg !12263
  call void @llvm.dbg.declare(metadata i64* %_tmp, metadata !12264, metadata !DIExpression()), !dbg !12266
  %82 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12266
  %chipsize = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %82, i32 0, i32 3, !dbg !12266
  %83 = load i32, i32* %chipsize, align 4, !dbg !12266
  %conv98 = zext i32 %83 to i64, !dbg !12266
  %shl = shl i64 %conv98, 20, !dbg !12266
  store i64 %shl, i64* %_tmp, align 8, !dbg !12266
  call void @llvm.dbg.declare(metadata i32* %__base, metadata !12267, metadata !DIExpression()), !dbg !12269
  %84 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12269
  %pagesize99 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %84, i32 0, i32 1, !dbg !12269
  %85 = load i32, i32* %pagesize99, align 4, !dbg !12269
  %86 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12269
  %pages_per_eraseblock = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %86, i32 0, i32 3, !dbg !12269
  %87 = load i32, i32* %pages_per_eraseblock, align 4, !dbg !12269
  %mul = mul i32 %85, %87, !dbg !12269
  store i32 %mul, i32* %__base, align 4, !dbg !12269
  call void @llvm.dbg.declare(metadata i32* %__rem, metadata !12270, metadata !DIExpression()), !dbg !12269
  %88 = load i64, i64* %_tmp, align 8, !dbg !12269
  %89 = load i32, i32* %__base, align 4, !dbg !12269
  %conv100 = zext i32 %89 to i64, !dbg !12269
  %rem = urem i64 %88, %conv100, !dbg !12269
  %conv101 = trunc i64 %rem to i32, !dbg !12269
  store i32 %conv101, i32* %__rem, align 4, !dbg !12269
  %90 = load i64, i64* %_tmp, align 8, !dbg !12269
  %91 = load i32, i32* %__base, align 4, !dbg !12269
  %conv102 = zext i32 %91 to i64, !dbg !12269
  %div = udiv i64 %90, %conv102, !dbg !12269
  store i64 %div, i64* %_tmp, align 8, !dbg !12269
  %92 = load i32, i32* %__rem, align 4, !dbg !12269
  store i32 %92, i32* %tmp, align 4, !dbg !12269
  %93 = load i32, i32* %tmp, align 4, !dbg !12269
  %94 = load i64, i64* %_tmp, align 8, !dbg !12266
  store i64 %94, i64* %tmp103, align 8, !dbg !12266
  %95 = load i64, i64* %tmp103, align 8, !dbg !12266
  %conv104 = trunc i64 %95 to i32, !dbg !12271
  %96 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12272
  %eraseblocks_per_lun = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %96, i32 0, i32 4, !dbg !12273
  store i32 %conv104, i32* %eraseblocks_per_lun, align 4, !dbg !12274
  br label %ident_done, !dbg !12272

ident_done:                                       ; preds = %if.end95, %if.then76, %if.then67, %if.then46
  call void @llvm.dbg.label(metadata !12275), !dbg !12276
  %97 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12277
  %name105 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %97, i32 0, i32 13, !dbg !12279
  %98 = load i8*, i8** %name105, align 8, !dbg !12279
  %tobool106 = icmp ne i8* %98, null, !dbg !12277
  br i1 %tobool106, label %if.end111, label %if.then107, !dbg !12280

if.then107:                                       ; preds = %ident_done
  %99 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12281
  %parameters108 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %99, i32 0, i32 2, !dbg !12282
  %model109 = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters108, i32 0, i32 0, !dbg !12283
  %100 = load i8*, i8** %model109, align 8, !dbg !12283
  %101 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12284
  %name110 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %101, i32 0, i32 13, !dbg !12285
  store i8* %100, i8** %name110, align 8, !dbg !12286
  br label %if.end111, !dbg !12284

if.end111:                                        ; preds = %if.then107, %ident_done
  %102 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12287
  %options112 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %102, i32 0, i32 6, !dbg !12289
  %103 = load i32, i32* %options112, align 8, !dbg !12289
  %conv113 = zext i32 %103 to i64, !dbg !12287
  %and114 = and i64 %conv113, 524288, !dbg !12290
  %tobool115 = icmp ne i64 %and114, 0, !dbg !12290
  br i1 %tobool115, label %if.then116, label %if.else143, !dbg !12291

if.then116:                                       ; preds = %if.end111
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !12292, metadata !DIExpression()), !dbg !12295
  %104 = load i32, i32* %busw, align 4, !dbg !12295
  %conv117 = sext i32 %104 to i64, !dbg !12295
  %and118 = and i64 %conv117, 2, !dbg !12295
  %tobool119 = icmp ne i64 %and118, 0, !dbg !12295
  %lnot = xor i1 %tobool119, true, !dbg !12295
  %lnot120 = xor i1 %lnot, true, !dbg !12295
  %lnot.ext = zext i1 %lnot120 to i32, !dbg !12295
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !12295
  %105 = load i32, i32* %__ret_warn_on, align 4, !dbg !12296
  %tobool121 = icmp ne i32 %105, 0, !dbg !12296
  %lnot122 = xor i1 %tobool121, true, !dbg !12296
  %lnot124 = xor i1 %lnot122, true, !dbg !12296
  %lnot.ext125 = zext i1 %lnot124 to i32, !dbg !12296
  %conv126 = sext i32 %lnot.ext125 to i64, !dbg !12296
  %tobool127 = icmp ne i64 %conv126, 0, !dbg !12296
  br i1 %tobool127, label %if.then128, label %if.end135, !dbg !12295

if.then128:                                       ; preds = %if.then116
  br label %do.body, !dbg !12296

do.body:                                          ; preds = %if.then128
  br label %do.body129, !dbg !12298

do.body129:                                       ; preds = %do.body
  br label %do.end, !dbg !12300

do.end:                                           ; preds = %do.body129
  br label %do.body130, !dbg !12298

do.body130:                                       ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 4823, i32 2305, i64 12) #9, !dbg !12302, !srcloc !12304
  br label %do.end131, !dbg !12302

do.end131:                                        ; preds = %do.body130
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 288) #9, !dbg !12305, !srcloc !12307
  br label %do.body132, !dbg !12298

do.body132:                                       ; preds = %do.end131
  br label %do.end133, !dbg !12308

do.end133:                                        ; preds = %do.body132
  br label %do.end134, !dbg !12298

do.end134:                                        ; preds = %do.end133
  br label %if.end135, !dbg !12298

if.end135:                                        ; preds = %do.end134, %if.then116
  %106 = load i32, i32* %__ret_warn_on, align 4, !dbg !12295
  %tobool137 = icmp ne i32 %106, 0, !dbg !12295
  %lnot138 = xor i1 %tobool137, true, !dbg !12295
  %lnot140 = xor i1 %lnot138, true, !dbg !12295
  %lnot.ext141 = zext i1 %lnot140 to i32, !dbg !12295
  %conv142 = sext i32 %lnot.ext141 to i64, !dbg !12295
  store i64 %conv142, i64* %tmp136, align 8, !dbg !12296
  %107 = load i64, i64* %tmp136, align 8, !dbg !12295
  %108 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12310
  call void @nand_set_defaults(%struct.nand_chip* %108) #8, !dbg !12311
  br label %if.end165, !dbg !12312

if.else143:                                       ; preds = %if.end111
  %109 = load i32, i32* %busw, align 4, !dbg !12313
  %conv144 = sext i32 %109 to i64, !dbg !12313
  %110 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12315
  %options145 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %110, i32 0, i32 6, !dbg !12316
  %111 = load i32, i32* %options145, align 8, !dbg !12316
  %conv146 = zext i32 %111 to i64, !dbg !12315
  %and147 = and i64 %conv146, 2, !dbg !12317
  %cmp148 = icmp ne i64 %conv144, %and147, !dbg !12318
  br i1 %cmp148, label %if.then150, label %if.end164, !dbg !12319

if.then150:                                       ; preds = %if.else143
  %112 = load i8, i8* %maf_id, align 1, !dbg !12320
  %conv151 = zext i8 %112 to i32, !dbg !12320
  %113 = load i8, i8* %dev_id, align 1, !dbg !12320
  %conv152 = zext i8 %113 to i32, !dbg !12320
  %call153 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.22, i64 0, i64 0), i32 %conv151, i32 %conv152) #12, !dbg !12320
  %114 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %manufacturer_desc, align 8, !dbg !12322
  %call154 = call i8* @nand_manufacturer_name(%struct.nand_manufacturer_desc* %114) #8, !dbg !12322
  %115 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12322
  %name155 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %115, i32 0, i32 13, !dbg !12322
  %116 = load i8*, i8** %name155, align 8, !dbg !12322
  %call156 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i64 0, i64 0), i8* %call154, i8* %116) #12, !dbg !12322
  %117 = load i32, i32* %busw, align 4, !dbg !12323
  %tobool157 = icmp ne i32 %117, 0, !dbg !12323
  %118 = zext i1 %tobool157 to i64, !dbg !12323
  %cond = select i1 %tobool157, i32 16, i32 8, !dbg !12323
  %119 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12323
  %options158 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %119, i32 0, i32 6, !dbg !12323
  %120 = load i32, i32* %options158, align 8, !dbg !12323
  %conv159 = zext i32 %120 to i64, !dbg !12323
  %and160 = and i64 %conv159, 2, !dbg !12323
  %tobool161 = icmp ne i64 %and160, 0, !dbg !12323
  %121 = zext i1 %tobool161 to i64, !dbg !12323
  %cond162 = select i1 %tobool161, i32 16, i32 8, !dbg !12323
  %call163 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.24, i64 0, i64 0), i32 %cond, i32 %cond162) #12, !dbg !12323
  store i32 -22, i32* %ret, align 4, !dbg !12324
  br label %free_detect_allocation, !dbg !12325

if.end164:                                        ; preds = %if.else143
  br label %if.end165

if.end165:                                        ; preds = %if.end164, %if.end135
  %122 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12326
  call void @nand_decode_bbm_options(%struct.nand_chip* %122) #8, !dbg !12327
  %123 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12328
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %123, i32 0, i32 4, !dbg !12329
  %124 = load i32, i32* %writesize, align 4, !dbg !12329
  store i32 %124, i32* %x.addr.i, align 4
  %125 = load i32, i32* %x.addr.i, align 4, !dbg !12330
  %126 = call i32 asm "bsfl $1,$0", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %125, i32 -1) #11, !dbg !12331, !srcloc !12332
  store i32 %126, i32* %r.i, align 4, !dbg !12331
  %127 = load i32, i32* %r.i, align 4, !dbg !12333
  %add.i = add i32 %127, 1, !dbg !12334
  %sub = sub i32 %add.i, 1, !dbg !12335
  %128 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12336
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %128, i32 0, i32 17, !dbg !12337
  store i32 %sub, i32* %page_shift, align 8, !dbg !12338
  %129 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12339
  %base167 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %129, i32 0, i32 0, !dbg !12340
  %call168 = call i64 @nanddev_target_size(%struct.nand_device* %base167) #8, !dbg !12341
  store i64 %call168, i64* %targetsize, align 8, !dbg !12342
  %130 = load i64, i64* %targetsize, align 8, !dbg !12343
  %131 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12344
  %page_shift169 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %131, i32 0, i32 17, !dbg !12345
  %132 = load i32, i32* %page_shift169, align 8, !dbg !12345
  %sh_prom = zext i32 %132 to i64, !dbg !12346
  %shr = lshr i64 %130, %sh_prom, !dbg !12346
  %sub170 = sub i64 %shr, 1, !dbg !12347
  %conv171 = trunc i64 %sub170 to i32, !dbg !12348
  %133 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12349
  %pagemask = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %133, i32 0, i32 20, !dbg !12350
  store i32 %conv171, i32* %pagemask, align 4, !dbg !12351
  %134 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12352
  %erasesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %134, i32 0, i32 3, !dbg !12353
  %135 = load i32, i32* %erasesize, align 8, !dbg !12353
  store i32 %135, i32* %x.addr.i216, align 4
  %136 = load i32, i32* %x.addr.i216, align 4, !dbg !12354
  %137 = call i32 asm "bsfl $1,$0", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %136, i32 -1) #11, !dbg !12355, !srcloc !12332
  store i32 %137, i32* %r.i217, align 4, !dbg !12355
  %138 = load i32, i32* %r.i217, align 4, !dbg !12356
  %add.i218 = add i32 %138, 1, !dbg !12357
  %sub173 = sub i32 %add.i218, 1, !dbg !12358
  %139 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12359
  %phys_erase_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %139, i32 0, i32 18, !dbg !12360
  store i32 %sub173, i32* %phys_erase_shift, align 4, !dbg !12361
  %140 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12362
  %bbt_erase_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %140, i32 0, i32 9, !dbg !12363
  store i32 %sub173, i32* %bbt_erase_shift, align 8, !dbg !12364
  %141 = load i64, i64* %targetsize, align 8, !dbg !12365
  %and174 = and i64 %141, 4294967295, !dbg !12366
  %tobool175 = icmp ne i64 %and174, 0, !dbg !12366
  br i1 %tobool175, label %if.then176, label %if.else180, !dbg !12367

if.then176:                                       ; preds = %if.end165
  %142 = load i64, i64* %targetsize, align 8, !dbg !12368
  %conv177 = trunc i64 %142 to i32, !dbg !12369
  store i32 %conv177, i32* %x.addr.i219, align 4
  %143 = load i32, i32* %x.addr.i219, align 4, !dbg !12370
  %144 = call i32 asm "bsfl $1,$0", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %143, i32 -1) #11, !dbg !12371, !srcloc !12332
  store i32 %144, i32* %r.i220, align 4, !dbg !12371
  %145 = load i32, i32* %r.i220, align 4, !dbg !12372
  %add.i221 = add i32 %145, 1, !dbg !12373
  %sub179 = sub i32 %add.i221, 1, !dbg !12374
  %146 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12375
  %chip_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %146, i32 0, i32 19, !dbg !12376
  store i32 %sub179, i32* %chip_shift, align 8, !dbg !12377
  br label %if.end186, !dbg !12375

if.else180:                                       ; preds = %if.end165
  %147 = load i64, i64* %targetsize, align 8, !dbg !12378
  %shr181 = lshr i64 %147, 32, !dbg !12379
  %conv182 = trunc i64 %shr181 to i32, !dbg !12380
  store i32 %conv182, i32* %x.addr.i222, align 4
  %148 = load i32, i32* %x.addr.i222, align 4, !dbg !12381
  %149 = call i32 asm "bsfl $1,$0", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %148, i32 -1) #11, !dbg !12382, !srcloc !12332
  store i32 %149, i32* %r.i223, align 4, !dbg !12382
  %150 = load i32, i32* %r.i223, align 4, !dbg !12383
  %add.i224 = add i32 %150, 1, !dbg !12384
  %151 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12385
  %chip_shift184 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %151, i32 0, i32 19, !dbg !12386
  store i32 %add.i224, i32* %chip_shift184, align 8, !dbg !12387
  %152 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12388
  %chip_shift185 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %152, i32 0, i32 19, !dbg !12389
  %153 = load i32, i32* %chip_shift185, align 8, !dbg !12390
  %add = add i32 %153, 31, !dbg !12390
  store i32 %add, i32* %chip_shift185, align 8, !dbg !12390
  br label %if.end186

if.end186:                                        ; preds = %if.else180, %if.then176
  %154 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12391
  %chip_shift187 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %154, i32 0, i32 19, !dbg !12393
  %155 = load i32, i32* %chip_shift187, align 8, !dbg !12393
  %156 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12394
  %page_shift188 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %156, i32 0, i32 17, !dbg !12395
  %157 = load i32, i32* %page_shift188, align 8, !dbg !12395
  %sub189 = sub i32 %155, %157, !dbg !12396
  %cmp190 = icmp ugt i32 %sub189, 16, !dbg !12397
  br i1 %cmp190, label %if.then192, label %if.end197, !dbg !12398

if.then192:                                       ; preds = %if.end186
  %158 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12399
  %options193 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %158, i32 0, i32 6, !dbg !12400
  %159 = load i32, i32* %options193, align 8, !dbg !12401
  %conv194 = zext i32 %159 to i64, !dbg !12401
  %or195 = or i64 %conv194, 16384, !dbg !12401
  %conv196 = trunc i64 %or195 to i32, !dbg !12401
  store i32 %conv196, i32* %options193, align 8, !dbg !12401
  br label %if.end197, !dbg !12399

if.end197:                                        ; preds = %if.then192, %if.end186
  %160 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12402
  %badblockbits = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %160, i32 0, i32 12, !dbg !12403
  store i32 8, i32* %badblockbits, align 4, !dbg !12404
  %161 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12405
  call void @nand_legacy_adjust_cmdfunc(%struct.nand_chip* %161) #8, !dbg !12406
  %162 = load i8, i8* %maf_id, align 1, !dbg !12407
  %conv198 = zext i8 %162 to i32, !dbg !12407
  %163 = load i8, i8* %dev_id, align 1, !dbg !12407
  %conv199 = zext i8 %163 to i32, !dbg !12407
  %call200 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.22, i64 0, i64 0), i32 %conv198, i32 %conv199) #12, !dbg !12407
  %164 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %manufacturer_desc, align 8, !dbg !12408
  %call201 = call i8* @nand_manufacturer_name(%struct.nand_manufacturer_desc* %164) #8, !dbg !12408
  %165 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12408
  %parameters202 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %165, i32 0, i32 2, !dbg !12408
  %model203 = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters202, i32 0, i32 0, !dbg !12408
  %166 = load i8*, i8** %model203, align 8, !dbg !12408
  %call204 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.23, i64 0, i64 0), i8* %call201, i8* %166) #12, !dbg !12408
  %167 = load i64, i64* %targetsize, align 8, !dbg !12409
  %shr205 = lshr i64 %167, 20, !dbg !12409
  %conv206 = trunc i64 %shr205 to i32, !dbg !12409
  %168 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12409
  %call207 = call zeroext i1 @nand_is_slc(%struct.nand_chip* %168) #8, !dbg !12409
  %169 = zext i1 %call207 to i64, !dbg !12409
  %cond209 = select i1 %call207, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.27, i64 0, i64 0), !dbg !12409
  %170 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12409
  %erasesize210 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %170, i32 0, i32 3, !dbg !12409
  %171 = load i32, i32* %erasesize210, align 8, !dbg !12409
  %shr211 = lshr i32 %171, 10, !dbg !12409
  %172 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12409
  %writesize212 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %172, i32 0, i32 4, !dbg !12409
  %173 = load i32, i32* %writesize212, align 4, !dbg !12409
  %174 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12409
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %174, i32 0, i32 6, !dbg !12409
  %175 = load i32, i32* %oobsize, align 4, !dbg !12409
  %call213 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.25, i64 0, i64 0), i32 %conv206, i8* %cond209, i32 %shr211, i32 %173, i32 %175) #12, !dbg !12409
  store i32 0, i32* %retval, align 4, !dbg !12410
  br label %return, !dbg !12410

free_detect_allocation:                           ; preds = %if.then150
  call void @llvm.dbg.label(metadata !12411), !dbg !12412
  %176 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12413
  %parameters214 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %176, i32 0, i32 2, !dbg !12414
  %model215 = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters214, i32 0, i32 0, !dbg !12415
  %177 = load i8*, i8** %model215, align 8, !dbg !12415
  call void @kfree(i8* %177) #8, !dbg !12416
  %178 = load i32, i32* %ret, align 4, !dbg !12417
  store i32 %178, i32* %retval, align 4, !dbg !12418
  br label %return, !dbg !12418

return:                                           ; preds = %free_detect_allocation, %if.end197, %if.then89, %if.then82, %if.then73, %if.then64, %if.then20, %if.then10, %if.then5, %if.then
  %179 = load i32, i32* %retval, align 4, !dbg !12419
  ret i32 %179, !dbg !12419
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i64 @nanddev_target_size(%struct.nand_device* %nand) #0 !dbg !12420 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !12423, metadata !DIExpression()), !dbg !12424
  %0 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !12425
  %memorg = getelementptr inbounds %struct.nand_device, %struct.nand_device* %0, i32 0, i32 1, !dbg !12426
  %luns_per_target = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg, i32 0, i32 7, !dbg !12427
  %1 = load i32, i32* %luns_per_target, align 4, !dbg !12427
  %conv = zext i32 %1 to i64, !dbg !12428
  %2 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !12429
  %memorg1 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %2, i32 0, i32 1, !dbg !12430
  %eraseblocks_per_lun = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg1, i32 0, i32 4, !dbg !12431
  %3 = load i32, i32* %eraseblocks_per_lun, align 8, !dbg !12431
  %conv2 = zext i32 %3 to i64, !dbg !12429
  %mul = mul i64 %conv, %conv2, !dbg !12432
  %4 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !12433
  %memorg3 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %4, i32 0, i32 1, !dbg !12434
  %pages_per_eraseblock = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg3, i32 0, i32 3, !dbg !12435
  %5 = load i32, i32* %pages_per_eraseblock, align 4, !dbg !12435
  %conv4 = zext i32 %5 to i64, !dbg !12433
  %mul5 = mul i64 %mul, %conv4, !dbg !12436
  %6 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !12437
  %memorg6 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %6, i32 0, i32 1, !dbg !12438
  %pagesize = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg6, i32 0, i32 1, !dbg !12439
  %7 = load i32, i32* %pagesize, align 4, !dbg !12439
  %conv7 = zext i32 %7 to i64, !dbg !12437
  %mul8 = mul i64 %mul5, %conv7, !dbg !12440
  ret i64 %mul8, !dbg !12441
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.device_node* @nand_get_flash_node(%struct.nand_chip* %chip) #0 !dbg !12442 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !12445, metadata !DIExpression()), !dbg !12446
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12447
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !12448
  %call1 = call %struct.device_node* @mtd_get_of_node(%struct.mtd_info* %call) #8, !dbg !12449
  ret %struct.device_node* %call1, !dbg !12450
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @of_get_nand_bus_width(%struct.device_node* %np) #0 !dbg !12451 {
entry:
  %retval = alloca i32, align 4
  %np.addr = alloca %struct.device_node*, align 8
  %val = alloca i32, align 4
  store %struct.device_node* %np, %struct.device_node** %np.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device_node** %np.addr, metadata !12454, metadata !DIExpression()), !dbg !12455
  call void @llvm.dbg.declare(metadata i32* %val, metadata !12456, metadata !DIExpression()), !dbg !12457
  %0 = load %struct.device_node*, %struct.device_node** %np.addr, align 8, !dbg !12458
  %call = call i32 @of_property_read_u32(%struct.device_node* %0, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.11, i64 0, i64 0), i32* %val) #8, !dbg !12460
  %tobool = icmp ne i32 %call, 0, !dbg !12460
  br i1 %tobool, label %if.then, label %if.end, !dbg !12461

if.then:                                          ; preds = %entry
  store i32 8, i32* %retval, align 4, !dbg !12462
  br label %return, !dbg !12462

if.end:                                           ; preds = %entry
  %1 = load i32, i32* %val, align 4, !dbg !12463
  switch i32 %1, label %sw.default [
    i32 8, label %sw.bb
    i32 16, label %sw.bb
  ], !dbg !12464

sw.bb:                                            ; preds = %if.end, %if.end
  %2 = load i32, i32* %val, align 4, !dbg !12465
  store i32 %2, i32* %retval, align 4, !dbg !12467
  br label %return, !dbg !12467

sw.default:                                       ; preds = %if.end
  store i32 -5, i32* %retval, align 4, !dbg !12468
  br label %return, !dbg !12468

return:                                           ; preds = %sw.default, %sw.bb, %if.then
  %3 = load i32, i32* %retval, align 4, !dbg !12469
  ret i32 %3, !dbg !12469
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @of_property_read_bool(%struct.device_node* %np, i8* %propname) #0 !dbg !12470 {
entry:
  %np.addr = alloca %struct.device_node*, align 8
  %propname.addr = alloca i8*, align 8
  %prop = alloca %struct.property*, align 8
  store %struct.device_node* %np, %struct.device_node** %np.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device_node** %np.addr, metadata !12475, metadata !DIExpression()), !dbg !12476
  store i8* %propname, i8** %propname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %propname.addr, metadata !12477, metadata !DIExpression()), !dbg !12478
  call void @llvm.dbg.declare(metadata %struct.property** %prop, metadata !12479, metadata !DIExpression()), !dbg !12480
  %0 = load %struct.device_node*, %struct.device_node** %np.addr, align 8, !dbg !12481
  %1 = load i8*, i8** %propname.addr, align 8, !dbg !12482
  %call = call %struct.property* @of_find_property(%struct.device_node* %0, i8* %1, i32* null) #8, !dbg !12483
  store %struct.property* %call, %struct.property** %prop, align 8, !dbg !12480
  %2 = load %struct.property*, %struct.property** %prop, align 8, !dbg !12484
  %tobool = icmp ne %struct.property* %2, null, !dbg !12484
  %3 = zext i1 %tobool to i64, !dbg !12484
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !12484
  %tobool1 = icmp ne i32 %cond, 0, !dbg !12484
  ret i1 %tobool1, !dbg !12485
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @of_get_nand_on_flash_bbt(%struct.device_node* %np) #0 !dbg !12486 {
entry:
  %np.addr = alloca %struct.device_node*, align 8
  store %struct.device_node* %np, %struct.device_node** %np.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device_node** %np.addr, metadata !12489, metadata !DIExpression()), !dbg !12490
  %0 = load %struct.device_node*, %struct.device_node** %np.addr, align 8, !dbg !12491
  %call = call zeroext i1 @of_property_read_bool(%struct.device_node* %0, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.12, i64 0, i64 0)) #8, !dbg !12492
  ret i1 %call, !dbg !12493
}

; Function Attrs: noredzone
declare dso_local void @of_get_nand_ecc_user_config(%struct.nand_device*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @of_get_nand_ecc_legacy_user_config(%struct.nand_chip* %chip) #0 !dbg !12494 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %dn = alloca %struct.device_node*, align 8
  %user_conf = alloca %struct.nand_ecc_props*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !12495, metadata !DIExpression()), !dbg !12496
  call void @llvm.dbg.declare(metadata %struct.device_node** %dn, metadata !12497, metadata !DIExpression()), !dbg !12498
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12499
  %call = call %struct.device_node* @nand_get_flash_node(%struct.nand_chip* %0) #8, !dbg !12500
  store %struct.device_node* %call, %struct.device_node** %dn, align 8, !dbg !12498
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_props** %user_conf, metadata !12501, metadata !DIExpression()), !dbg !12503
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12504
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 0, !dbg !12505
  %ecc = getelementptr inbounds %struct.nand_device, %struct.nand_device* %base, i32 0, i32 2, !dbg !12506
  %user_conf1 = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc, i32 0, i32 2, !dbg !12507
  store %struct.nand_ecc_props* %user_conf1, %struct.nand_ecc_props** %user_conf, align 8, !dbg !12503
  %2 = load %struct.nand_ecc_props*, %struct.nand_ecc_props** %user_conf, align 8, !dbg !12508
  %engine_type = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %2, i32 0, i32 0, !dbg !12510
  %3 = load i32, i32* %engine_type, align 4, !dbg !12510
  %cmp = icmp eq i32 %3, 0, !dbg !12511
  br i1 %cmp, label %if.then, label %if.end, !dbg !12512

if.then:                                          ; preds = %entry
  %4 = load %struct.device_node*, %struct.device_node** %dn, align 8, !dbg !12513
  %call2 = call i32 @of_get_rawnand_ecc_engine_type_legacy(%struct.device_node* %4) #8, !dbg !12514
  %5 = load %struct.nand_ecc_props*, %struct.nand_ecc_props** %user_conf, align 8, !dbg !12515
  %engine_type3 = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %5, i32 0, i32 0, !dbg !12516
  store i32 %call2, i32* %engine_type3, align 4, !dbg !12517
  br label %if.end, !dbg !12515

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.nand_ecc_props*, %struct.nand_ecc_props** %user_conf, align 8, !dbg !12518
  %algo = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %6, i32 0, i32 2, !dbg !12520
  %7 = load i32, i32* %algo, align 4, !dbg !12520
  %cmp4 = icmp eq i32 %7, 0, !dbg !12521
  br i1 %cmp4, label %if.then5, label %if.end8, !dbg !12522

if.then5:                                         ; preds = %if.end
  %8 = load %struct.device_node*, %struct.device_node** %dn, align 8, !dbg !12523
  %call6 = call i32 @of_get_rawnand_ecc_algo_legacy(%struct.device_node* %8) #8, !dbg !12524
  %9 = load %struct.nand_ecc_props*, %struct.nand_ecc_props** %user_conf, align 8, !dbg !12525
  %algo7 = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %9, i32 0, i32 2, !dbg !12526
  store i32 %call6, i32* %algo7, align 4, !dbg !12527
  br label %if.end8, !dbg !12525

if.end8:                                          ; preds = %if.then5, %if.end
  %10 = load %struct.nand_ecc_props*, %struct.nand_ecc_props** %user_conf, align 8, !dbg !12528
  %placement = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %10, i32 0, i32 1, !dbg !12530
  %11 = load i32, i32* %placement, align 4, !dbg !12530
  %cmp9 = icmp eq i32 %11, 0, !dbg !12531
  br i1 %cmp9, label %if.then10, label %if.end13, !dbg !12532

if.then10:                                        ; preds = %if.end8
  %12 = load %struct.device_node*, %struct.device_node** %dn, align 8, !dbg !12533
  %call11 = call i32 @of_get_rawnand_ecc_placement_legacy(%struct.device_node* %12) #8, !dbg !12534
  %13 = load %struct.nand_ecc_props*, %struct.nand_ecc_props** %user_conf, align 8, !dbg !12535
  %placement12 = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %13, i32 0, i32 1, !dbg !12536
  store i32 %call11, i32* %placement12, align 4, !dbg !12537
  br label %if.end13, !dbg !12535

if.end13:                                         ; preds = %if.then10, %if.end8
  ret void, !dbg !12538
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.device_node* @mtd_get_of_node(%struct.mtd_info* %mtd) #0 !dbg !12539 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !12542, metadata !DIExpression()), !dbg !12543
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !12544
  %dev = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %0, i32 0, i32 55, !dbg !12545
  %call = call %struct.device_node* @dev_of_node(%struct.device* %dev) #8, !dbg !12546
  ret %struct.device_node* %call, !dbg !12547
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.device_node* @dev_of_node(%struct.device* %dev) #0 !dbg !12548 {
entry:
  %retval = alloca %struct.device_node*, align 8
  %dev.addr = alloca %struct.device*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !12551, metadata !DIExpression()), !dbg !12552
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !12553
  %tobool = icmp ne %struct.device* %0, null, !dbg !12553
  br i1 %tobool, label %if.end, label %if.then, !dbg !12555

if.then:                                          ; preds = %entry
  store %struct.device_node* null, %struct.device_node** %retval, align 8, !dbg !12556
  br label %return, !dbg !12556

if.end:                                           ; preds = %entry
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !12557
  %of_node = getelementptr inbounds %struct.device, %struct.device* %1, i32 0, i32 23, !dbg !12558
  %2 = load %struct.device_node*, %struct.device_node** %of_node, align 8, !dbg !12558
  store %struct.device_node* %2, %struct.device_node** %retval, align 8, !dbg !12559
  br label %return, !dbg !12559

return:                                           ; preds = %if.end, %if.then
  %3 = load %struct.device_node*, %struct.device_node** %retval, align 8, !dbg !12560
  ret %struct.device_node* %3, !dbg !12560
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @of_property_read_u32(%struct.device_node* %np, i8* %propname, i32* %out_value) #0 !dbg !12561 {
entry:
  %np.addr = alloca %struct.device_node*, align 8
  %propname.addr = alloca i8*, align 8
  %out_value.addr = alloca i32*, align 8
  store %struct.device_node* %np, %struct.device_node** %np.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device_node** %np.addr, metadata !12564, metadata !DIExpression()), !dbg !12565
  store i8* %propname, i8** %propname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %propname.addr, metadata !12566, metadata !DIExpression()), !dbg !12567
  store i32* %out_value, i32** %out_value.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %out_value.addr, metadata !12568, metadata !DIExpression()), !dbg !12569
  %0 = load %struct.device_node*, %struct.device_node** %np.addr, align 8, !dbg !12570
  %1 = load i8*, i8** %propname.addr, align 8, !dbg !12571
  %2 = load i32*, i32** %out_value.addr, align 8, !dbg !12572
  %call = call i32 @of_property_read_u32_array(%struct.device_node* %0, i8* %1, i32* %2, i64 1) #8, !dbg !12573
  ret i32 %call, !dbg !12574
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @of_property_read_u32_array(%struct.device_node* %np, i8* %propname, i32* %out_values, i64 %sz) #0 !dbg !12575 {
entry:
  %retval = alloca i32, align 4
  %np.addr = alloca %struct.device_node*, align 8
  %propname.addr = alloca i8*, align 8
  %out_values.addr = alloca i32*, align 8
  %sz.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  store %struct.device_node* %np, %struct.device_node** %np.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device_node** %np.addr, metadata !12578, metadata !DIExpression()), !dbg !12579
  store i8* %propname, i8** %propname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %propname.addr, metadata !12580, metadata !DIExpression()), !dbg !12581
  store i32* %out_values, i32** %out_values.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %out_values.addr, metadata !12582, metadata !DIExpression()), !dbg !12583
  store i64 %sz, i64* %sz.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %sz.addr, metadata !12584, metadata !DIExpression()), !dbg !12585
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !12586, metadata !DIExpression()), !dbg !12587
  %0 = load %struct.device_node*, %struct.device_node** %np.addr, align 8, !dbg !12588
  %1 = load i8*, i8** %propname.addr, align 8, !dbg !12589
  %2 = load i32*, i32** %out_values.addr, align 8, !dbg !12590
  %3 = load i64, i64* %sz.addr, align 8, !dbg !12591
  %call = call i32 @of_property_read_variable_u32_array(%struct.device_node* %0, i8* %1, i32* %2, i64 %3, i64 0) #8, !dbg !12592
  store i32 %call, i32* %ret, align 4, !dbg !12587
  %4 = load i32, i32* %ret, align 4, !dbg !12593
  %cmp = icmp sge i32 %4, 0, !dbg !12595
  br i1 %cmp, label %if.then, label %if.else, !dbg !12596

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !12597
  br label %return, !dbg !12597

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %ret, align 4, !dbg !12598
  store i32 %5, i32* %retval, align 4, !dbg !12599
  br label %return, !dbg !12599

return:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !12600
  ret i32 %6, !dbg !12600
}

; Function Attrs: noredzone
declare dso_local i32 @of_property_read_variable_u32_array(%struct.device_node*, i8*, i32*, i64, i64) #2

; Function Attrs: noredzone
declare dso_local %struct.property* @of_find_property(%struct.device_node*, i8*, i32*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @of_get_rawnand_ecc_engine_type_legacy(%struct.device_node* %np) #0 !dbg !139 {
entry:
  %retval = alloca i32, align 4
  %np.addr = alloca %struct.device_node*, align 8
  %nand_ecc_legacy_modes = alloca [7 x i8*], align 16
  %eng_type = alloca i32, align 4
  %pm = alloca i8*, align 8
  %err = alloca i32, align 4
  store %struct.device_node* %np, %struct.device_node** %np.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device_node** %np.addr, metadata !12601, metadata !DIExpression()), !dbg !12602
  call void @llvm.dbg.declare(metadata [7 x i8*]* %nand_ecc_legacy_modes, metadata !12603, metadata !DIExpression()), !dbg !12608
  %0 = bitcast [7 x i8*]* %nand_ecc_legacy_modes to i8*, !dbg !12608
  call void @llvm.memset.p0i8.i64(i8* align 16 %0, i8 0, i64 56, i1 false), !dbg !12608
  %1 = bitcast i8* %0 to [7 x i8*]*, !dbg !12608
  %2 = getelementptr inbounds [7 x i8*], [7 x i8*]* %1, i32 0, i32 1, !dbg !12608
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i32 0, i32 0), i8** %2, align 8, !dbg !12608
  %3 = getelementptr inbounds [7 x i8*], [7 x i8*]* %1, i32 0, i32 2, !dbg !12608
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i32 0, i32 0), i8** %3, align 16, !dbg !12608
  %4 = getelementptr inbounds [7 x i8*], [7 x i8*]* %1, i32 0, i32 3, !dbg !12608
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i32 0, i32 0), i8** %4, align 8, !dbg !12608
  %5 = getelementptr inbounds [7 x i8*], [7 x i8*]* %1, i32 0, i32 4, !dbg !12608
  store i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i32 0, i32 0), i8** %5, align 16, !dbg !12608
  %6 = getelementptr inbounds [7 x i8*], [7 x i8*]* %1, i32 0, i32 5, !dbg !12608
  store i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0), i8** %6, align 8, !dbg !12608
  %7 = getelementptr inbounds [7 x i8*], [7 x i8*]* %1, i32 0, i32 6, !dbg !12608
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i32 0, i32 0), i8** %7, align 16, !dbg !12608
  call void @llvm.dbg.declare(metadata i32* %eng_type, metadata !12609, metadata !DIExpression()), !dbg !12610
  call void @llvm.dbg.declare(metadata i8** %pm, metadata !12611, metadata !DIExpression()), !dbg !12612
  call void @llvm.dbg.declare(metadata i32* %err, metadata !12613, metadata !DIExpression()), !dbg !12614
  %8 = load %struct.device_node*, %struct.device_node** %np.addr, align 8, !dbg !12615
  %call = call i32 @of_property_read_string(%struct.device_node* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8** %pm) #8, !dbg !12616
  store i32 %call, i32* %err, align 4, !dbg !12617
  %9 = load i32, i32* %err, align 4, !dbg !12618
  %tobool = icmp ne i32 %9, 0, !dbg !12618
  br i1 %tobool, label %if.then, label %if.end, !dbg !12620

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !12621
  br label %return, !dbg !12621

if.end:                                           ; preds = %entry
  store i32 1, i32* %eng_type, align 4, !dbg !12622
  br label %for.cond, !dbg !12624

for.cond:                                         ; preds = %for.inc, %if.end
  %10 = load i32, i32* %eng_type, align 4, !dbg !12625
  %conv = zext i32 %10 to i64, !dbg !12625
  %cmp = icmp ult i64 %conv, 7, !dbg !12627
  br i1 %cmp, label %for.body, label %for.end, !dbg !12628

for.body:                                         ; preds = %for.cond
  %11 = load i8*, i8** %pm, align 8, !dbg !12629
  %12 = load i32, i32* %eng_type, align 4, !dbg !12632
  %idxprom = zext i32 %12 to i64, !dbg !12633
  %arrayidx = getelementptr [7 x i8*], [7 x i8*]* %nand_ecc_legacy_modes, i64 0, i64 %idxprom, !dbg !12633
  %13 = load i8*, i8** %arrayidx, align 8, !dbg !12633
  %call2 = call i32 @strcasecmp(i8* %11, i8* %13) #8, !dbg !12634
  %tobool3 = icmp ne i32 %call2, 0, !dbg !12634
  br i1 %tobool3, label %if.end8, label %if.then4, !dbg !12635

if.then4:                                         ; preds = %for.body
  %14 = load i32, i32* %eng_type, align 4, !dbg !12636
  switch i32 %14, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb5
    i32 3, label %sw.bb5
    i32 4, label %sw.bb6
    i32 5, label %sw.bb6
    i32 6, label %sw.bb7
  ], !dbg !12638

sw.bb:                                            ; preds = %if.then4
  store i32 1, i32* %retval, align 4, !dbg !12639
  br label %return, !dbg !12639

sw.bb5:                                           ; preds = %if.then4, %if.then4
  store i32 2, i32* %retval, align 4, !dbg !12641
  br label %return, !dbg !12641

sw.bb6:                                           ; preds = %if.then4, %if.then4
  store i32 3, i32* %retval, align 4, !dbg !12642
  br label %return, !dbg !12642

sw.bb7:                                           ; preds = %if.then4
  store i32 4, i32* %retval, align 4, !dbg !12643
  br label %return, !dbg !12643

sw.default:                                       ; preds = %if.then4
  br label %sw.epilog, !dbg !12644

sw.epilog:                                        ; preds = %sw.default
  br label %if.end8, !dbg !12645

if.end8:                                          ; preds = %sw.epilog, %for.body
  br label %for.inc, !dbg !12646

for.inc:                                          ; preds = %if.end8
  %15 = load i32, i32* %eng_type, align 4, !dbg !12647
  %inc = add i32 %15, 1, !dbg !12647
  store i32 %inc, i32* %eng_type, align 4, !dbg !12647
  br label %for.cond, !dbg !12648, !llvm.loop !12649

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !12651
  br label %return, !dbg !12651

return:                                           ; preds = %for.end, %sw.bb7, %sw.bb6, %sw.bb5, %sw.bb, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !12652
  ret i32 %16, !dbg !12652
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @of_get_rawnand_ecc_algo_legacy(%struct.device_node* %np) #0 !dbg !12653 {
entry:
  %retval = alloca i32, align 4
  %np.addr = alloca %struct.device_node*, align 8
  %pm = alloca i8*, align 8
  %err = alloca i32, align 4
  store %struct.device_node* %np, %struct.device_node** %np.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device_node** %np.addr, metadata !12656, metadata !DIExpression()), !dbg !12657
  call void @llvm.dbg.declare(metadata i8** %pm, metadata !12658, metadata !DIExpression()), !dbg !12659
  call void @llvm.dbg.declare(metadata i32* %err, metadata !12660, metadata !DIExpression()), !dbg !12661
  %0 = load %struct.device_node*, %struct.device_node** %np.addr, align 8, !dbg !12662
  %call = call i32 @of_property_read_string(%struct.device_node* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8** %pm) #8, !dbg !12663
  store i32 %call, i32* %err, align 4, !dbg !12664
  %1 = load i32, i32* %err, align 4, !dbg !12665
  %tobool = icmp ne i32 %1, 0, !dbg !12665
  br i1 %tobool, label %if.end8, label %if.then, !dbg !12667

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %pm, align 8, !dbg !12668
  %call1 = call i32 @strcasecmp(i8* %2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)) #8, !dbg !12671
  %tobool2 = icmp ne i32 %call1, 0, !dbg !12671
  br i1 %tobool2, label %if.else, label %if.then3, !dbg !12672

if.then3:                                         ; preds = %if.then
  store i32 1, i32* %retval, align 4, !dbg !12673
  br label %return, !dbg !12673

if.else:                                          ; preds = %if.then
  %3 = load i8*, i8** %pm, align 8, !dbg !12674
  %call4 = call i32 @strcasecmp(i8* %3, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0)) #8, !dbg !12676
  %tobool5 = icmp ne i32 %call4, 0, !dbg !12676
  br i1 %tobool5, label %if.end, label %if.then6, !dbg !12677

if.then6:                                         ; preds = %if.else
  store i32 2, i32* %retval, align 4, !dbg !12678
  br label %return, !dbg !12678

if.end:                                           ; preds = %if.else
  br label %if.end7

if.end7:                                          ; preds = %if.end
  br label %if.end8, !dbg !12679

if.end8:                                          ; preds = %if.end7, %entry
  store i32 0, i32* %retval, align 4, !dbg !12680
  br label %return, !dbg !12680

return:                                           ; preds = %if.end8, %if.then6, %if.then3
  %4 = load i32, i32* %retval, align 4, !dbg !12681
  ret i32 %4, !dbg !12681
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @of_get_rawnand_ecc_placement_legacy(%struct.device_node* %np) #0 !dbg !12682 {
entry:
  %retval = alloca i32, align 4
  %np.addr = alloca %struct.device_node*, align 8
  %pm = alloca i8*, align 8
  %err = alloca i32, align 4
  store %struct.device_node* %np, %struct.device_node** %np.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device_node** %np.addr, metadata !12685, metadata !DIExpression()), !dbg !12686
  call void @llvm.dbg.declare(metadata i8** %pm, metadata !12687, metadata !DIExpression()), !dbg !12688
  call void @llvm.dbg.declare(metadata i32* %err, metadata !12689, metadata !DIExpression()), !dbg !12690
  %0 = load %struct.device_node*, %struct.device_node** %np.addr, align 8, !dbg !12691
  %call = call i32 @of_property_read_string(%struct.device_node* %0, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.19, i64 0, i64 0), i8** %pm) #8, !dbg !12692
  store i32 %call, i32* %err, align 4, !dbg !12693
  %1 = load i32, i32* %err, align 4, !dbg !12694
  %tobool = icmp ne i32 %1, 0, !dbg !12694
  br i1 %tobool, label %if.end4, label %if.then, !dbg !12696

if.then:                                          ; preds = %entry
  %2 = load i8*, i8** %pm, align 8, !dbg !12697
  %call1 = call i32 @strcasecmp(i8* %2, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i64 0, i64 0)) #8, !dbg !12700
  %tobool2 = icmp ne i32 %call1, 0, !dbg !12700
  br i1 %tobool2, label %if.end, label %if.then3, !dbg !12701

if.then3:                                         ; preds = %if.then
  store i32 2, i32* %retval, align 4, !dbg !12702
  br label %return, !dbg !12702

if.end:                                           ; preds = %if.then
  br label %if.end4, !dbg !12703

if.end4:                                          ; preds = %if.end, %entry
  store i32 0, i32* %retval, align 4, !dbg !12704
  br label %return, !dbg !12704

return:                                           ; preds = %if.end4, %if.then3
  %3 = load i32, i32* %retval, align 4, !dbg !12705
  ret i32 %3, !dbg !12705
}

; Function Attrs: noredzone
declare dso_local i32 @of_property_read_string(%struct.device_node*, i8*, i8**) #2

; Function Attrs: noredzone
declare dso_local i32 @strcasecmp(i8*, i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @kobject_name(%struct.kobject* %kobj) #0 !dbg !12706 {
entry:
  %kobj.addr = alloca %struct.kobject*, align 8
  store %struct.kobject* %kobj, %struct.kobject** %kobj.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.kobject** %kobj.addr, metadata !12711, metadata !DIExpression()), !dbg !12712
  %0 = load %struct.kobject*, %struct.kobject** %kobj.addr, align 8, !dbg !12713
  %name = getelementptr inbounds %struct.kobject, %struct.kobject* %0, i32 0, i32 0, !dbg !12714
  %1 = load i8*, i8** %name, align 8, !dbg !12714
  ret i8* %1, !dbg !12715
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_controller_init(%struct.nand_controller* %nfc) #0 !dbg !4627 {
entry:
  %nfc.addr = alloca %struct.nand_controller*, align 8
  store %struct.nand_controller* %nfc, %struct.nand_controller** %nfc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_controller** %nfc.addr, metadata !12716, metadata !DIExpression()), !dbg !12717
  br label %do.body, !dbg !12718

do.body:                                          ; preds = %entry
  %0 = load %struct.nand_controller*, %struct.nand_controller** %nfc.addr, align 8, !dbg !12719
  %lock = getelementptr inbounds %struct.nand_controller, %struct.nand_controller* %0, i32 0, i32 0, !dbg !12719
  call void @__mutex_init(%struct.mutex* %lock, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), %struct.lock_class_key* @nand_controller_init.__key) #8, !dbg !12719
  br label %do.end, !dbg !12719

do.end:                                           ; preds = %do.body
  ret void, !dbg !12721
}

; Function Attrs: noredzone
declare dso_local void @nand_legacy_set_defaults(%struct.nand_chip*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_id_len(i8* %id_data, i32 %arrlen) #0 !dbg !12722 {
entry:
  %retval = alloca i32, align 4
  %id_data.addr = alloca i8*, align 8
  %arrlen.addr = alloca i32, align 4
  %last_nonzero = alloca i32, align 4
  %period = alloca i32, align 4
  store i8* %id_data, i8** %id_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %id_data.addr, metadata !12725, metadata !DIExpression()), !dbg !12726
  store i32 %arrlen, i32* %arrlen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %arrlen.addr, metadata !12727, metadata !DIExpression()), !dbg !12728
  call void @llvm.dbg.declare(metadata i32* %last_nonzero, metadata !12729, metadata !DIExpression()), !dbg !12730
  call void @llvm.dbg.declare(metadata i32* %period, metadata !12731, metadata !DIExpression()), !dbg !12732
  %0 = load i32, i32* %arrlen.addr, align 4, !dbg !12733
  %sub = sub i32 %0, 1, !dbg !12735
  store i32 %sub, i32* %last_nonzero, align 4, !dbg !12736
  br label %for.cond, !dbg !12737

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %last_nonzero, align 4, !dbg !12738
  %cmp = icmp sge i32 %1, 0, !dbg !12740
  br i1 %cmp, label %for.body, label %for.end, !dbg !12741

for.body:                                         ; preds = %for.cond
  %2 = load i8*, i8** %id_data.addr, align 8, !dbg !12742
  %3 = load i32, i32* %last_nonzero, align 4, !dbg !12744
  %idxprom = sext i32 %3 to i64, !dbg !12742
  %arrayidx = getelementptr i8, i8* %2, i64 %idxprom, !dbg !12742
  %4 = load i8, i8* %arrayidx, align 1, !dbg !12742
  %tobool = icmp ne i8 %4, 0, !dbg !12742
  br i1 %tobool, label %if.then, label %if.end, !dbg !12745

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !12746

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !12747

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %last_nonzero, align 4, !dbg !12748
  %dec = add i32 %5, -1, !dbg !12748
  store i32 %dec, i32* %last_nonzero, align 4, !dbg !12748
  br label %for.cond, !dbg !12749, !llvm.loop !12750

for.end:                                          ; preds = %if.then, %for.cond
  %6 = load i32, i32* %last_nonzero, align 4, !dbg !12752
  %cmp1 = icmp slt i32 %6, 0, !dbg !12754
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !12755

if.then2:                                         ; preds = %for.end
  store i32 0, i32* %retval, align 4, !dbg !12756
  br label %return, !dbg !12756

if.end3:                                          ; preds = %for.end
  store i32 1, i32* %period, align 4, !dbg !12757
  br label %for.cond4, !dbg !12759

for.cond4:                                        ; preds = %for.inc10, %if.end3
  %7 = load i32, i32* %period, align 4, !dbg !12760
  %8 = load i32, i32* %arrlen.addr, align 4, !dbg !12762
  %cmp5 = icmp slt i32 %7, %8, !dbg !12763
  br i1 %cmp5, label %for.body6, label %for.end11, !dbg !12764

for.body6:                                        ; preds = %for.cond4
  %9 = load i8*, i8** %id_data.addr, align 8, !dbg !12765
  %10 = load i32, i32* %arrlen.addr, align 4, !dbg !12767
  %11 = load i32, i32* %period, align 4, !dbg !12768
  %call = call i32 @nand_id_has_period(i8* %9, i32 %10, i32 %11) #8, !dbg !12769
  %tobool7 = icmp ne i32 %call, 0, !dbg !12769
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !12770

if.then8:                                         ; preds = %for.body6
  br label %for.end11, !dbg !12771

if.end9:                                          ; preds = %for.body6
  br label %for.inc10, !dbg !12772

for.inc10:                                        ; preds = %if.end9
  %12 = load i32, i32* %period, align 4, !dbg !12773
  %inc = add i32 %12, 1, !dbg !12773
  store i32 %inc, i32* %period, align 4, !dbg !12773
  br label %for.cond4, !dbg !12774, !llvm.loop !12775

for.end11:                                        ; preds = %if.then8, %for.cond4
  %13 = load i32, i32* %period, align 4, !dbg !12777
  %14 = load i32, i32* %arrlen.addr, align 4, !dbg !12779
  %cmp12 = icmp slt i32 %13, %14, !dbg !12780
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !12781

if.then13:                                        ; preds = %for.end11
  %15 = load i32, i32* %period, align 4, !dbg !12782
  store i32 %15, i32* %retval, align 4, !dbg !12783
  br label %return, !dbg !12783

if.end14:                                         ; preds = %for.end11
  %16 = load i32, i32* %last_nonzero, align 4, !dbg !12784
  %17 = load i32, i32* %arrlen.addr, align 4, !dbg !12786
  %sub15 = sub i32 %17, 1, !dbg !12787
  %cmp16 = icmp slt i32 %16, %sub15, !dbg !12788
  br i1 %cmp16, label %if.then17, label %if.end18, !dbg !12789

if.then17:                                        ; preds = %if.end14
  %18 = load i32, i32* %last_nonzero, align 4, !dbg !12790
  %add = add i32 %18, 1, !dbg !12791
  store i32 %add, i32* %retval, align 4, !dbg !12792
  br label %return, !dbg !12792

if.end18:                                         ; preds = %if.end14
  %19 = load i32, i32* %arrlen.addr, align 4, !dbg !12793
  store i32 %19, i32* %retval, align 4, !dbg !12794
  br label %return, !dbg !12794

return:                                           ; preds = %if.end18, %if.then17, %if.then13, %if.then2
  %20 = load i32, i32* %retval, align 4, !dbg !12795
  ret i32 %20, !dbg !12795
}

; Function Attrs: noredzone
declare dso_local %struct.nand_manufacturer_desc* @nand_get_manufacturer_desc(i8 zeroext) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @is_full_id_nand(%struct.nand_flash_dev* %type) #0 !dbg !12796 {
entry:
  %type.addr = alloca %struct.nand_flash_dev*, align 8
  store %struct.nand_flash_dev* %type, %struct.nand_flash_dev** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_flash_dev** %type.addr, metadata !12799, metadata !DIExpression()), !dbg !12800
  %0 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12801
  %id_len = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %0, i32 0, i32 6, !dbg !12802
  %1 = load i16, i16* %id_len, align 8, !dbg !12802
  %tobool = icmp ne i16 %1, 0, !dbg !12801
  ret i1 %tobool, !dbg !12803
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @find_full_id_nand(%struct.nand_chip* %chip, %struct.nand_flash_dev* %type) #0 !dbg !12804 {
entry:
  %retval = alloca i1, align 1
  %chip.addr = alloca %struct.nand_chip*, align 8
  %type.addr = alloca %struct.nand_flash_dev*, align 8
  %base = alloca %struct.nand_device*, align 8
  %requirements = alloca %struct.nand_ecc_props, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %memorg = alloca %struct.nand_memory_organization*, align 8
  %id_data = alloca i8*, align 8
  %_tmp = alloca i64, align 8
  %__base = alloca i32, align 4
  %__rem = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp24 = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !12807, metadata !DIExpression()), !dbg !12808
  store %struct.nand_flash_dev* %type, %struct.nand_flash_dev** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_flash_dev** %type.addr, metadata !12809, metadata !DIExpression()), !dbg !12810
  call void @llvm.dbg.declare(metadata %struct.nand_device** %base, metadata !12811, metadata !DIExpression()), !dbg !12812
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12813
  %base1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 0, !dbg !12814
  store %struct.nand_device* %base1, %struct.nand_device** %base, align 8, !dbg !12812
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_props* %requirements, metadata !12815, metadata !DIExpression()), !dbg !12816
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !12817, metadata !DIExpression()), !dbg !12818
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12819
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %1) #8, !dbg !12820
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !12818
  call void @llvm.dbg.declare(metadata %struct.nand_memory_organization** %memorg, metadata !12821, metadata !DIExpression()), !dbg !12822
  call void @llvm.dbg.declare(metadata i8** %id_data, metadata !12823, metadata !DIExpression()), !dbg !12824
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12825
  %id = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 1, !dbg !12826
  %data = getelementptr inbounds %struct.nand_id, %struct.nand_id* %id, i32 0, i32 0, !dbg !12827
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %data, i64 0, i64 0, !dbg !12825
  store i8* %arraydecay, i8** %id_data, align 8, !dbg !12824
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12828
  %base2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 0, !dbg !12829
  %call3 = call %struct.nand_memory_organization* @nanddev_get_memorg(%struct.nand_device* %base2) #8, !dbg !12830
  store %struct.nand_memory_organization* %call3, %struct.nand_memory_organization** %memorg, align 8, !dbg !12831
  %4 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12832
  %5 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %4, i32 0, i32 1, !dbg !12834
  %id4 = bitcast %union.anon.76* %5 to [8 x i8]*, !dbg !12834
  %arraydecay5 = getelementptr inbounds [8 x i8], [8 x i8]* %id4, i64 0, i64 0, !dbg !12832
  %6 = load i8*, i8** %id_data, align 8, !dbg !12835
  %7 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12836
  %id_len = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %7, i32 0, i32 6, !dbg !12837
  %8 = load i16, i16* %id_len, align 8, !dbg !12837
  %conv = zext i16 %8 to i64, !dbg !12836
  %call6 = call i32 @strncmp(i8* %arraydecay5, i8* %6, i64 %conv) #8, !dbg !12838
  %tobool = icmp ne i32 %call6, 0, !dbg !12838
  br i1 %tobool, label %if.end35, label %if.then, !dbg !12839

if.then:                                          ; preds = %entry
  %9 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12840
  %pagesize = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %9, i32 0, i32 2, !dbg !12842
  %10 = load i32, i32* %pagesize, align 8, !dbg !12842
  %11 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12843
  %pagesize7 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %11, i32 0, i32 1, !dbg !12844
  store i32 %10, i32* %pagesize7, align 4, !dbg !12845
  %12 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12846
  %pagesize8 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %12, i32 0, i32 1, !dbg !12847
  %13 = load i32, i32* %pagesize8, align 4, !dbg !12847
  %14 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12848
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %14, i32 0, i32 4, !dbg !12849
  store i32 %13, i32* %writesize, align 4, !dbg !12850
  %15 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12851
  %erasesize = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %15, i32 0, i32 4, !dbg !12852
  %16 = load i32, i32* %erasesize, align 8, !dbg !12852
  %17 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12853
  %pagesize9 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %17, i32 0, i32 2, !dbg !12854
  %18 = load i32, i32* %pagesize9, align 8, !dbg !12854
  %div = udiv i32 %16, %18, !dbg !12855
  %19 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12856
  %pages_per_eraseblock = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %19, i32 0, i32 3, !dbg !12857
  store i32 %div, i32* %pages_per_eraseblock, align 4, !dbg !12858
  %20 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12859
  %erasesize10 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %20, i32 0, i32 4, !dbg !12860
  %21 = load i32, i32* %erasesize10, align 8, !dbg !12860
  %22 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12861
  %erasesize11 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %22, i32 0, i32 3, !dbg !12862
  store i32 %21, i32* %erasesize11, align 8, !dbg !12863
  %23 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12864
  %oobsize = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %23, i32 0, i32 7, !dbg !12865
  %24 = load i16, i16* %oobsize, align 2, !dbg !12865
  %conv12 = zext i16 %24 to i32, !dbg !12864
  %25 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12866
  %oobsize13 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %25, i32 0, i32 2, !dbg !12867
  store i32 %conv12, i32* %oobsize13, align 4, !dbg !12868
  %26 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12869
  %oobsize14 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %26, i32 0, i32 2, !dbg !12870
  %27 = load i32, i32* %oobsize14, align 4, !dbg !12870
  %28 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12871
  %oobsize15 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %28, i32 0, i32 6, !dbg !12872
  store i32 %27, i32* %oobsize15, align 4, !dbg !12873
  %29 = load i8*, i8** %id_data, align 8, !dbg !12874
  %arrayidx = getelementptr i8, i8* %29, i64 2, !dbg !12874
  %30 = load i8, i8* %arrayidx, align 1, !dbg !12874
  %call16 = call i32 @nand_get_bits_per_cell(i8 zeroext %30) #8, !dbg !12875
  %31 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12876
  %bits_per_cell = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %31, i32 0, i32 0, !dbg !12877
  store i32 %call16, i32* %bits_per_cell, align 4, !dbg !12878
  call void @llvm.dbg.declare(metadata i64* %_tmp, metadata !12879, metadata !DIExpression()), !dbg !12881
  %32 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12881
  %chipsize = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %32, i32 0, i32 3, !dbg !12881
  %33 = load i32, i32* %chipsize, align 4, !dbg !12881
  %conv17 = zext i32 %33 to i64, !dbg !12881
  %shl = shl i64 %conv17, 20, !dbg !12881
  store i64 %shl, i64* %_tmp, align 8, !dbg !12881
  call void @llvm.dbg.declare(metadata i32* %__base, metadata !12882, metadata !DIExpression()), !dbg !12884
  %34 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12884
  %pagesize18 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %34, i32 0, i32 1, !dbg !12884
  %35 = load i32, i32* %pagesize18, align 4, !dbg !12884
  %36 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12884
  %pages_per_eraseblock19 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %36, i32 0, i32 3, !dbg !12884
  %37 = load i32, i32* %pages_per_eraseblock19, align 4, !dbg !12884
  %mul = mul i32 %35, %37, !dbg !12884
  store i32 %mul, i32* %__base, align 4, !dbg !12884
  call void @llvm.dbg.declare(metadata i32* %__rem, metadata !12885, metadata !DIExpression()), !dbg !12884
  %38 = load i64, i64* %_tmp, align 8, !dbg !12884
  %39 = load i32, i32* %__base, align 4, !dbg !12884
  %conv20 = zext i32 %39 to i64, !dbg !12884
  %rem = urem i64 %38, %conv20, !dbg !12884
  %conv21 = trunc i64 %rem to i32, !dbg !12884
  store i32 %conv21, i32* %__rem, align 4, !dbg !12884
  %40 = load i64, i64* %_tmp, align 8, !dbg !12884
  %41 = load i32, i32* %__base, align 4, !dbg !12884
  %conv22 = zext i32 %41 to i64, !dbg !12884
  %div23 = udiv i64 %40, %conv22, !dbg !12884
  store i64 %div23, i64* %_tmp, align 8, !dbg !12884
  %42 = load i32, i32* %__rem, align 4, !dbg !12884
  store i32 %42, i32* %tmp, align 4, !dbg !12884
  %43 = load i32, i32* %tmp, align 4, !dbg !12884
  %44 = load i64, i64* %_tmp, align 8, !dbg !12881
  store i64 %44, i64* %tmp24, align 8, !dbg !12881
  %45 = load i64, i64* %tmp24, align 8, !dbg !12881
  %conv25 = trunc i64 %45 to i32, !dbg !12886
  %46 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12887
  %eraseblocks_per_lun = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %46, i32 0, i32 4, !dbg !12888
  store i32 %conv25, i32* %eraseblocks_per_lun, align 4, !dbg !12889
  %47 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12890
  %options = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %47, i32 0, i32 5, !dbg !12891
  %48 = load i32, i32* %options, align 4, !dbg !12891
  %49 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12892
  %options26 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %49, i32 0, i32 6, !dbg !12893
  %50 = load i32, i32* %options26, align 8, !dbg !12894
  %or = or i32 %50, %48, !dbg !12894
  store i32 %or, i32* %options26, align 8, !dbg !12894
  %51 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12895
  %ecc = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %51, i32 0, i32 8, !dbg !12895
  %strength_ds = getelementptr inbounds %struct.anon.78, %struct.anon.78* %ecc, i32 0, i32 0, !dbg !12895
  %52 = load i16, i16* %strength_ds, align 4, !dbg !12895
  %conv27 = zext i16 %52 to i32, !dbg !12895
  %strength = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %requirements, i32 0, i32 3, !dbg !12896
  store i32 %conv27, i32* %strength, align 4, !dbg !12897
  %53 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12898
  %ecc28 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %53, i32 0, i32 8, !dbg !12898
  %step_ds = getelementptr inbounds %struct.anon.78, %struct.anon.78* %ecc28, i32 0, i32 1, !dbg !12898
  %54 = load i16, i16* %step_ds, align 2, !dbg !12898
  %conv29 = zext i16 %54 to i32, !dbg !12898
  %step_size = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %requirements, i32 0, i32 4, !dbg !12899
  store i32 %conv29, i32* %step_size, align 4, !dbg !12900
  %55 = load %struct.nand_device*, %struct.nand_device** %base, align 8, !dbg !12901
  call void @nanddev_set_ecc_requirements(%struct.nand_device* %55, %struct.nand_ecc_props* %requirements) #8, !dbg !12902
  %56 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12903
  %name = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %56, i32 0, i32 0, !dbg !12904
  %57 = load i8*, i8** %name, align 8, !dbg !12904
  %call30 = call noalias i8* @kstrdup(i8* %57, i32 3264) #8, !dbg !12905
  %58 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12906
  %parameters = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %58, i32 0, i32 2, !dbg !12907
  %model = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters, i32 0, i32 0, !dbg !12908
  store i8* %call30, i8** %model, align 8, !dbg !12909
  %59 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12910
  %parameters31 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %59, i32 0, i32 2, !dbg !12912
  %model32 = getelementptr inbounds %struct.nand_parameters, %struct.nand_parameters* %parameters31, i32 0, i32 0, !dbg !12913
  %60 = load i8*, i8** %model32, align 8, !dbg !12913
  %tobool33 = icmp ne i8* %60, null, !dbg !12910
  br i1 %tobool33, label %if.end, label %if.then34, !dbg !12914

if.then34:                                        ; preds = %if.then
  store i1 false, i1* %retval, align 1, !dbg !12915
  br label %return, !dbg !12915

if.end:                                           ; preds = %if.then
  store i1 true, i1* %retval, align 1, !dbg !12916
  br label %return, !dbg !12916

if.end35:                                         ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !12917
  br label %return, !dbg !12917

return:                                           ; preds = %if.end35, %if.end, %if.then34
  %61 = load i1, i1* %retval, align 1, !dbg !12918
  ret i1 %61, !dbg !12918
}

; Function Attrs: noredzone
declare dso_local i32 @nand_onfi_detect(%struct.nand_chip*) #2

; Function Attrs: noredzone
declare dso_local i32 @nand_jedec_detect(%struct.nand_chip*) #2

; Function Attrs: noredzone
declare dso_local noalias i8* @kstrdup(i8*, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_manufacturer_detect(%struct.nand_chip* %chip) #0 !dbg !12919 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %memorg = alloca %struct.nand_memory_organization*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !12920, metadata !DIExpression()), !dbg !12921
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12922
  %manufacturer = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 3, !dbg !12924
  %desc = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer, i32 0, i32 0, !dbg !12925
  %1 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc, align 8, !dbg !12925
  %tobool = icmp ne %struct.nand_manufacturer_desc* %1, null, !dbg !12922
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !12926

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12927
  %manufacturer1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 3, !dbg !12928
  %desc2 = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer1, i32 0, i32 0, !dbg !12929
  %3 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc2, align 8, !dbg !12929
  %ops = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %3, i32 0, i32 2, !dbg !12930
  %4 = load %struct.nand_manufacturer_ops*, %struct.nand_manufacturer_ops** %ops, align 8, !dbg !12930
  %tobool3 = icmp ne %struct.nand_manufacturer_ops* %4, null, !dbg !12927
  br i1 %tobool3, label %land.lhs.true4, label %if.else, !dbg !12931

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12932
  %manufacturer5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 3, !dbg !12933
  %desc6 = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer5, i32 0, i32 0, !dbg !12934
  %6 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc6, align 8, !dbg !12934
  %ops7 = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %6, i32 0, i32 2, !dbg !12935
  %7 = load %struct.nand_manufacturer_ops*, %struct.nand_manufacturer_ops** %ops7, align 8, !dbg !12935
  %detect = getelementptr inbounds %struct.nand_manufacturer_ops, %struct.nand_manufacturer_ops* %7, i32 0, i32 0, !dbg !12936
  %8 = load void (%struct.nand_chip*)*, void (%struct.nand_chip*)** %detect, align 8, !dbg !12936
  %tobool8 = icmp ne void (%struct.nand_chip*)* %8, null, !dbg !12932
  br i1 %tobool8, label %if.then, label %if.else, !dbg !12937

if.then:                                          ; preds = %land.lhs.true4
  call void @llvm.dbg.declare(metadata %struct.nand_memory_organization** %memorg, metadata !12938, metadata !DIExpression()), !dbg !12940
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12941
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 0, !dbg !12942
  %call = call %struct.nand_memory_organization* @nanddev_get_memorg(%struct.nand_device* %base) #8, !dbg !12943
  store %struct.nand_memory_organization* %call, %struct.nand_memory_organization** %memorg, align 8, !dbg !12944
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12945
  %id = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 1, !dbg !12946
  %data = getelementptr inbounds %struct.nand_id, %struct.nand_id* %id, i32 0, i32 0, !dbg !12947
  %arrayidx = getelementptr [8 x i8], [8 x i8]* %data, i64 0, i64 2, !dbg !12945
  %11 = load i8, i8* %arrayidx, align 2, !dbg !12945
  %call9 = call i32 @nand_get_bits_per_cell(i8 zeroext %11) #8, !dbg !12948
  %12 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12949
  %bits_per_cell = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %12, i32 0, i32 0, !dbg !12950
  store i32 %call9, i32* %bits_per_cell, align 4, !dbg !12951
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12952
  %manufacturer10 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %13, i32 0, i32 3, !dbg !12953
  %desc11 = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer10, i32 0, i32 0, !dbg !12954
  %14 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc11, align 8, !dbg !12954
  %ops12 = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %14, i32 0, i32 2, !dbg !12955
  %15 = load %struct.nand_manufacturer_ops*, %struct.nand_manufacturer_ops** %ops12, align 8, !dbg !12955
  %detect13 = getelementptr inbounds %struct.nand_manufacturer_ops, %struct.nand_manufacturer_ops* %15, i32 0, i32 0, !dbg !12956
  %16 = load void (%struct.nand_chip*)*, void (%struct.nand_chip*)** %detect13, align 8, !dbg !12956
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12957
  call void %16(%struct.nand_chip* %17) #8, !dbg !12952
  br label %if.end, !dbg !12958

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12959
  call void @nand_decode_ext_id(%struct.nand_chip* %18) #8, !dbg !12961
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !12962
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_decode_id(%struct.nand_chip* %chip, %struct.nand_flash_dev* %type) #0 !dbg !12963 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %type.addr = alloca %struct.nand_flash_dev*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %memorg = alloca %struct.nand_memory_organization*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !12966, metadata !DIExpression()), !dbg !12967
  store %struct.nand_flash_dev* %type, %struct.nand_flash_dev** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_flash_dev** %type.addr, metadata !12968, metadata !DIExpression()), !dbg !12969
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !12970, metadata !DIExpression()), !dbg !12971
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12972
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !12973
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !12971
  call void @llvm.dbg.declare(metadata %struct.nand_memory_organization** %memorg, metadata !12974, metadata !DIExpression()), !dbg !12975
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !12976
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 0, !dbg !12977
  %call1 = call %struct.nand_memory_organization* @nanddev_get_memorg(%struct.nand_device* %base) #8, !dbg !12978
  store %struct.nand_memory_organization* %call1, %struct.nand_memory_organization** %memorg, align 8, !dbg !12979
  %2 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12980
  %erasesize = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %2, i32 0, i32 4, !dbg !12981
  %3 = load i32, i32* %erasesize, align 8, !dbg !12981
  %4 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12982
  %pagesize = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %4, i32 0, i32 2, !dbg !12983
  %5 = load i32, i32* %pagesize, align 8, !dbg !12983
  %div = udiv i32 %3, %5, !dbg !12984
  %6 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12985
  %pages_per_eraseblock = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %6, i32 0, i32 3, !dbg !12986
  store i32 %div, i32* %pages_per_eraseblock, align 4, !dbg !12987
  %7 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12988
  %erasesize2 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %7, i32 0, i32 4, !dbg !12989
  %8 = load i32, i32* %erasesize2, align 8, !dbg !12989
  %9 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !12990
  %erasesize3 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %9, i32 0, i32 3, !dbg !12991
  store i32 %8, i32* %erasesize3, align 8, !dbg !12992
  %10 = load %struct.nand_flash_dev*, %struct.nand_flash_dev** %type.addr, align 8, !dbg !12993
  %pagesize4 = getelementptr inbounds %struct.nand_flash_dev, %struct.nand_flash_dev* %10, i32 0, i32 2, !dbg !12994
  %11 = load i32, i32* %pagesize4, align 8, !dbg !12994
  %12 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12995
  %pagesize5 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %12, i32 0, i32 1, !dbg !12996
  store i32 %11, i32* %pagesize5, align 4, !dbg !12997
  %13 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !12998
  %pagesize6 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %13, i32 0, i32 1, !dbg !12999
  %14 = load i32, i32* %pagesize6, align 4, !dbg !12999
  %15 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13000
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %15, i32 0, i32 4, !dbg !13001
  store i32 %14, i32* %writesize, align 4, !dbg !13002
  %16 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !13003
  %pagesize7 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %16, i32 0, i32 1, !dbg !13004
  %17 = load i32, i32* %pagesize7, align 4, !dbg !13004
  %div8 = udiv i32 %17, 32, !dbg !13005
  %18 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !13006
  %oobsize = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %18, i32 0, i32 2, !dbg !13007
  store i32 %div8, i32* %oobsize, align 4, !dbg !13008
  %19 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !13009
  %oobsize9 = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %19, i32 0, i32 2, !dbg !13010
  %20 = load i32, i32* %oobsize9, align 4, !dbg !13010
  %21 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13011
  %oobsize10 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %21, i32 0, i32 6, !dbg !13012
  store i32 %20, i32* %oobsize10, align 4, !dbg !13013
  %22 = load %struct.nand_memory_organization*, %struct.nand_memory_organization** %memorg, align 8, !dbg !13014
  %bits_per_cell = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %22, i32 0, i32 0, !dbg !13015
  store i32 1, i32* %bits_per_cell, align 4, !dbg !13016
  ret void, !dbg !13017
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @nand_manufacturer_name(%struct.nand_manufacturer_desc* %manufacturer_desc) #0 !dbg !13018 {
entry:
  %manufacturer_desc.addr = alloca %struct.nand_manufacturer_desc*, align 8
  store %struct.nand_manufacturer_desc* %manufacturer_desc, %struct.nand_manufacturer_desc** %manufacturer_desc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_manufacturer_desc** %manufacturer_desc.addr, metadata !13021, metadata !DIExpression()), !dbg !13022
  %0 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %manufacturer_desc.addr, align 8, !dbg !13023
  %tobool = icmp ne %struct.nand_manufacturer_desc* %0, null, !dbg !13023
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13023

cond.true:                                        ; preds = %entry
  %1 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %manufacturer_desc.addr, align 8, !dbg !13024
  %name = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %1, i32 0, i32 1, !dbg !13025
  %2 = load i8*, i8** %name, align 8, !dbg !13025
  br label %cond.end, !dbg !13023

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13023

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %2, %cond.true ], [ getelementptr inbounds ([8 x i8], [8 x i8]* @.str.28, i64 0, i64 0), %cond.false ], !dbg !13023
  ret i8* %cond, !dbg !13026
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_decode_bbm_options(%struct.nand_chip* %chip) #0 !dbg !13027 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !13028, metadata !DIExpression()), !dbg !13029
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !13030, metadata !DIExpression()), !dbg !13031
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13032
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !13033
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !13031
  %1 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13034
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %1, i32 0, i32 4, !dbg !13036
  %2 = load i32, i32* %writesize, align 4, !dbg !13036
  %cmp = icmp ugt i32 %2, 512, !dbg !13037
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !13038

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13039
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 6, !dbg !13040
  %4 = load i32, i32* %options, align 8, !dbg !13040
  %conv = zext i32 %4 to i64, !dbg !13039
  %and = and i64 %conv, 2, !dbg !13041
  %tobool = icmp ne i64 %and, 0, !dbg !13041
  br i1 %tobool, label %if.then, label %if.else, !dbg !13042

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13043
  %badblockpos = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 11, !dbg !13044
  store i32 0, i32* %badblockpos, align 8, !dbg !13045
  br label %if.end, !dbg !13043

if.else:                                          ; preds = %lor.lhs.false
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13046
  %badblockpos1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %6, i32 0, i32 11, !dbg !13047
  store i32 5, i32* %badblockpos1, align 8, !dbg !13048
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !13049
}

; Function Attrs: noredzone
declare dso_local void @nand_legacy_adjust_cmdfunc(%struct.nand_chip*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @nand_is_slc(%struct.nand_chip* %chip) #0 !dbg !13050 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !13051, metadata !DIExpression()), !dbg !13052
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !13053, metadata !DIExpression()), !dbg !13055
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13055
  %base = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 0, !dbg !13055
  %call = call i32 @nanddev_bits_per_cell(%struct.nand_device* %base) #8, !dbg !13055
  %cmp = icmp eq i32 %call, 0, !dbg !13055
  %lnot = xor i1 %cmp, true, !dbg !13055
  %lnot1 = xor i1 %lnot, true, !dbg !13055
  %lnot.ext = zext i1 %lnot1 to i32, !dbg !13055
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !13055
  %1 = load i32, i32* %__ret_warn_on, align 4, !dbg !13056
  %tobool = icmp ne i32 %1, 0, !dbg !13056
  %lnot2 = xor i1 %tobool, true, !dbg !13056
  %lnot4 = xor i1 %lnot2, true, !dbg !13056
  %lnot.ext5 = zext i1 %lnot4 to i32, !dbg !13056
  %conv = sext i32 %lnot.ext5 to i64, !dbg !13056
  %tobool6 = icmp ne i64 %conv, 0, !dbg !13056
  br i1 %tobool6, label %if.then, label %if.end, !dbg !13055

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !13056

do.body:                                          ; preds = %if.then
  br label %do.body7, !dbg !13058

do.body7:                                         ; preds = %do.body
  br label %do.end, !dbg !13060

do.end:                                           ; preds = %do.body7
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.29, i64 0, i64 0)) #8, !dbg !13058
  br label %do.body8, !dbg !13058

do.body8:                                         ; preds = %do.end
  br label %do.body9, !dbg !13062

do.body9:                                         ; preds = %do.body8
  br label %do.end10, !dbg !13064

do.end10:                                         ; preds = %do.body9
  br label %do.body11, !dbg !13062

do.body11:                                        ; preds = %do.end10
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.30, i64 0, i64 0), i32 1284, i32 2313, i64 12) #9, !dbg !13066, !srcloc !13068
  br label %do.end12, !dbg !13066

do.end12:                                         ; preds = %do.body11
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 240) #9, !dbg !13069, !srcloc !13071
  br label %do.body13, !dbg !13062

do.body13:                                        ; preds = %do.end12
  br label %do.end14, !dbg !13072

do.end14:                                         ; preds = %do.body13
  br label %do.end15, !dbg !13062

do.end15:                                         ; preds = %do.end14
  br label %do.body16, !dbg !13058

do.body16:                                        ; preds = %do.end15
  br label %do.end17, !dbg !13074

do.end17:                                         ; preds = %do.body16
  br label %do.end18, !dbg !13058

do.end18:                                         ; preds = %do.end17
  br label %if.end, !dbg !13058

if.end:                                           ; preds = %do.end18, %entry
  %2 = load i32, i32* %__ret_warn_on, align 4, !dbg !13055
  %tobool19 = icmp ne i32 %2, 0, !dbg !13055
  %lnot20 = xor i1 %tobool19, true, !dbg !13055
  %lnot22 = xor i1 %lnot20, true, !dbg !13055
  %lnot.ext23 = zext i1 %lnot22 to i32, !dbg !13055
  %conv24 = sext i32 %lnot.ext23 to i64, !dbg !13055
  store i64 %conv24, i64* %tmp, align 8, !dbg !13056
  %3 = load i64, i64* %tmp, align 8, !dbg !13055
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13076
  %base25 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 0, !dbg !13077
  %call26 = call i32 @nanddev_bits_per_cell(%struct.nand_device* %base25) #8, !dbg !13078
  %cmp27 = icmp eq i32 %call26, 1, !dbg !13079
  ret i1 %cmp27, !dbg !13080
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_id_has_period(i8* %id_data, i32 %arrlen, i32 %period) #0 !dbg !13081 {
entry:
  %retval = alloca i32, align 4
  %id_data.addr = alloca i8*, align 8
  %arrlen.addr = alloca i32, align 4
  %period.addr = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i8* %id_data, i8** %id_data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %id_data.addr, metadata !13084, metadata !DIExpression()), !dbg !13085
  store i32 %arrlen, i32* %arrlen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %arrlen.addr, metadata !13086, metadata !DIExpression()), !dbg !13087
  store i32 %period, i32* %period.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %period.addr, metadata !13088, metadata !DIExpression()), !dbg !13089
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13090, metadata !DIExpression()), !dbg !13091
  call void @llvm.dbg.declare(metadata i32* %j, metadata !13092, metadata !DIExpression()), !dbg !13093
  store i32 0, i32* %i, align 4, !dbg !13094
  br label %for.cond, !dbg !13096

for.cond:                                         ; preds = %for.inc10, %entry
  %0 = load i32, i32* %i, align 4, !dbg !13097
  %1 = load i32, i32* %period.addr, align 4, !dbg !13099
  %cmp = icmp slt i32 %0, %1, !dbg !13100
  br i1 %cmp, label %for.body, label %for.end11, !dbg !13101

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %i, align 4, !dbg !13102
  %3 = load i32, i32* %period.addr, align 4, !dbg !13104
  %add = add i32 %2, %3, !dbg !13105
  store i32 %add, i32* %j, align 4, !dbg !13106
  br label %for.cond1, !dbg !13107

for.cond1:                                        ; preds = %for.inc, %for.body
  %4 = load i32, i32* %j, align 4, !dbg !13108
  %5 = load i32, i32* %arrlen.addr, align 4, !dbg !13110
  %cmp2 = icmp slt i32 %4, %5, !dbg !13111
  br i1 %cmp2, label %for.body3, label %for.end, !dbg !13112

for.body3:                                        ; preds = %for.cond1
  %6 = load i8*, i8** %id_data.addr, align 8, !dbg !13113
  %7 = load i32, i32* %i, align 4, !dbg !13115
  %idxprom = sext i32 %7 to i64, !dbg !13113
  %arrayidx = getelementptr i8, i8* %6, i64 %idxprom, !dbg !13113
  %8 = load i8, i8* %arrayidx, align 1, !dbg !13113
  %conv = zext i8 %8 to i32, !dbg !13113
  %9 = load i8*, i8** %id_data.addr, align 8, !dbg !13116
  %10 = load i32, i32* %j, align 4, !dbg !13117
  %idxprom4 = sext i32 %10 to i64, !dbg !13116
  %arrayidx5 = getelementptr i8, i8* %9, i64 %idxprom4, !dbg !13116
  %11 = load i8, i8* %arrayidx5, align 1, !dbg !13116
  %conv6 = zext i8 %11 to i32, !dbg !13116
  %cmp7 = icmp ne i32 %conv, %conv6, !dbg !13118
  br i1 %cmp7, label %if.then, label %if.end, !dbg !13119

if.then:                                          ; preds = %for.body3
  store i32 0, i32* %retval, align 4, !dbg !13120
  br label %return, !dbg !13120

if.end:                                           ; preds = %for.body3
  br label %for.inc, !dbg !13121

for.inc:                                          ; preds = %if.end
  %12 = load i32, i32* %period.addr, align 4, !dbg !13122
  %13 = load i32, i32* %j, align 4, !dbg !13123
  %add9 = add i32 %13, %12, !dbg !13123
  store i32 %add9, i32* %j, align 4, !dbg !13123
  br label %for.cond1, !dbg !13124, !llvm.loop !13125

for.end:                                          ; preds = %for.cond1
  br label %for.inc10, !dbg !13126

for.inc10:                                        ; preds = %for.end
  %14 = load i32, i32* %i, align 4, !dbg !13127
  %inc = add i32 %14, 1, !dbg !13127
  store i32 %inc, i32* %i, align 4, !dbg !13127
  br label %for.cond, !dbg !13128, !llvm.loop !13129

for.end11:                                        ; preds = %for.cond
  store i32 1, i32* %retval, align 4, !dbg !13131
  br label %return, !dbg !13131

return:                                           ; preds = %for.end11, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !13132
  ret i32 %15, !dbg !13132
}

; Function Attrs: noredzone
declare dso_local i32 @strncmp(i8*, i8*, i64) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nanddev_set_ecc_requirements(%struct.nand_device* %nand, %struct.nand_ecc_props* %reqs) #0 !dbg !13133 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  %reqs.addr = alloca %struct.nand_ecc_props*, align 8
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !13136, metadata !DIExpression()), !dbg !13137
  store %struct.nand_ecc_props* %reqs, %struct.nand_ecc_props** %reqs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_props** %reqs.addr, metadata !13138, metadata !DIExpression()), !dbg !13139
  %0 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !13140
  %ecc = getelementptr inbounds %struct.nand_device, %struct.nand_device* %0, i32 0, i32 2, !dbg !13141
  %requirements = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc, i32 0, i32 1, !dbg !13142
  %1 = load %struct.nand_ecc_props*, %struct.nand_ecc_props** %reqs.addr, align 8, !dbg !13143
  %2 = bitcast %struct.nand_ecc_props* %requirements to i8*, !dbg !13144
  %3 = bitcast %struct.nand_ecc_props* %1 to i8*, !dbg !13144
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 4 %3, i64 24, i1 false), !dbg !13144
  ret void, !dbg !13145
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nanddev_bits_per_cell(%struct.nand_device* %nand) #0 !dbg !13146 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !13147, metadata !DIExpression()), !dbg !13148
  %0 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !13149
  %memorg = getelementptr inbounds %struct.nand_device, %struct.nand_device* %0, i32 0, i32 1, !dbg !13150
  %bits_per_cell = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg, i32 0, i32 0, !dbg !13151
  %1 = load i32, i32* %bits_per_cell, align 8, !dbg !13151
  ret i32 %1, !dbg !13152
}

; Function Attrs: noredzone
declare dso_local void @__warn_printk(i8*, ...) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_manufacturer_init(%struct.nand_chip* %chip) #0 !dbg !13153 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !13154, metadata !DIExpression()), !dbg !13155
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13156
  %manufacturer = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 3, !dbg !13158
  %desc = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer, i32 0, i32 0, !dbg !13159
  %1 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc, align 8, !dbg !13159
  %tobool = icmp ne %struct.nand_manufacturer_desc* %1, null, !dbg !13156
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !13160

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13161
  %manufacturer1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 3, !dbg !13162
  %desc2 = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer1, i32 0, i32 0, !dbg !13163
  %3 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc2, align 8, !dbg !13163
  %ops = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %3, i32 0, i32 2, !dbg !13164
  %4 = load %struct.nand_manufacturer_ops*, %struct.nand_manufacturer_ops** %ops, align 8, !dbg !13164
  %tobool3 = icmp ne %struct.nand_manufacturer_ops* %4, null, !dbg !13161
  br i1 %tobool3, label %lor.lhs.false4, label %if.then, !dbg !13165

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13166
  %manufacturer5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 3, !dbg !13167
  %desc6 = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer5, i32 0, i32 0, !dbg !13168
  %6 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc6, align 8, !dbg !13168
  %ops7 = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %6, i32 0, i32 2, !dbg !13169
  %7 = load %struct.nand_manufacturer_ops*, %struct.nand_manufacturer_ops** %ops7, align 8, !dbg !13169
  %init = getelementptr inbounds %struct.nand_manufacturer_ops, %struct.nand_manufacturer_ops* %7, i32 0, i32 1, !dbg !13170
  %8 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %init, align 8, !dbg !13170
  %tobool8 = icmp ne i32 (%struct.nand_chip*)* %8, null, !dbg !13166
  br i1 %tobool8, label %if.end, label %if.then, !dbg !13171

if.then:                                          ; preds = %lor.lhs.false4, %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !13172
  br label %return, !dbg !13172

if.end:                                           ; preds = %lor.lhs.false4
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13173
  %manufacturer9 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 3, !dbg !13174
  %desc10 = getelementptr inbounds %struct.nand_manufacturer, %struct.nand_manufacturer* %manufacturer9, i32 0, i32 0, !dbg !13175
  %10 = load %struct.nand_manufacturer_desc*, %struct.nand_manufacturer_desc** %desc10, align 8, !dbg !13175
  %ops11 = getelementptr inbounds %struct.nand_manufacturer_desc, %struct.nand_manufacturer_desc* %10, i32 0, i32 2, !dbg !13176
  %11 = load %struct.nand_manufacturer_ops*, %struct.nand_manufacturer_ops** %ops11, align 8, !dbg !13176
  %init12 = getelementptr inbounds %struct.nand_manufacturer_ops, %struct.nand_manufacturer_ops* %11, i32 0, i32 1, !dbg !13177
  %12 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %init12, align 8, !dbg !13177
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13178
  %call = call i32 %12(%struct.nand_chip* %13) #8, !dbg !13173
  store i32 %call, i32* %retval, align 4, !dbg !13179
  br label %return, !dbg !13179

return:                                           ; preds = %if.end, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !13180
  ret i32 %14, !dbg !13180
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @mtd_set_ooblayout(%struct.mtd_info* %mtd, %struct.mtd_ooblayout_ops* %ooblayout) #0 !dbg !13181 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %ooblayout.addr = alloca %struct.mtd_ooblayout_ops*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13184, metadata !DIExpression()), !dbg !13185
  store %struct.mtd_ooblayout_ops* %ooblayout, %struct.mtd_ooblayout_ops** %ooblayout.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_ooblayout_ops** %ooblayout.addr, metadata !13186, metadata !DIExpression()), !dbg !13187
  %0 = load %struct.mtd_ooblayout_ops*, %struct.mtd_ooblayout_ops** %ooblayout.addr, align 8, !dbg !13188
  %1 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13189
  %ooblayout1 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %1, i32 0, i32 15, !dbg !13190
  store %struct.mtd_ooblayout_ops* %0, %struct.mtd_ooblayout_ops** %ooblayout1, align 8, !dbg !13191
  ret void, !dbg !13192
}

; Function Attrs: noredzone
declare dso_local %struct.mtd_ooblayout_ops* @nand_get_small_page_ooblayout() #2

; Function Attrs: noredzone
declare dso_local %struct.mtd_ooblayout_ops* @nand_get_large_page_hamming_ooblayout() #2

; Function Attrs: noredzone
declare dso_local %struct.mtd_ooblayout_ops* @nand_get_large_page_ooblayout() #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_set_ecc_on_host_ops(%struct.nand_chip* %chip) #0 !dbg !13193 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %ecc = alloca %struct.nand_ecc_ctrl*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !13194, metadata !DIExpression()), !dbg !13195
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_ctrl** %ecc, metadata !13196, metadata !DIExpression()), !dbg !13197
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13198
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 31, !dbg !13199
  store %struct.nand_ecc_ctrl* %ecc1, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13197
  %1 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13200
  %placement = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %1, i32 0, i32 1, !dbg !13201
  %2 = load i32, i32* %placement, align 4, !dbg !13201
  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb34
  ], !dbg !13202

sw.bb:                                            ; preds = %entry, %entry
  %3 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13203
  %read_page = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %3, i32 0, i32 19, !dbg !13206
  %4 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page, align 8, !dbg !13206
  %tobool = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %4, null, !dbg !13203
  br i1 %tobool, label %if.end, label %if.then, !dbg !13207

if.then:                                          ; preds = %sw.bb
  %5 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13208
  %read_page2 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %5, i32 0, i32 19, !dbg !13209
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_hwecc, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page2, align 8, !dbg !13210
  br label %if.end, !dbg !13208

if.end:                                           ; preds = %if.then, %sw.bb
  %6 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13211
  %write_page = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %6, i32 0, i32 22, !dbg !13213
  %7 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page, align 8, !dbg !13213
  %tobool3 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %7, null, !dbg !13211
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !13214

if.then4:                                         ; preds = %if.end
  %8 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13215
  %write_page5 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %8, i32 0, i32 22, !dbg !13216
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_hwecc, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page5, align 8, !dbg !13217
  br label %if.end6, !dbg !13215

if.end6:                                          ; preds = %if.then4, %if.end
  %9 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13218
  %read_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %9, i32 0, i32 17, !dbg !13220
  %10 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw, align 8, !dbg !13220
  %tobool7 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %10, null, !dbg !13218
  br i1 %tobool7, label %if.end10, label %if.then8, !dbg !13221

if.then8:                                         ; preds = %if.end6
  %11 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13222
  %read_page_raw9 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %11, i32 0, i32 17, !dbg !13223
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw9, align 8, !dbg !13224
  br label %if.end10, !dbg !13222

if.end10:                                         ; preds = %if.then8, %if.end6
  %12 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13225
  %write_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %12, i32 0, i32 18, !dbg !13227
  %13 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw, align 8, !dbg !13227
  %tobool11 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %13, null, !dbg !13225
  br i1 %tobool11, label %if.end14, label %if.then12, !dbg !13228

if.then12:                                        ; preds = %if.end10
  %14 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13229
  %write_page_raw13 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %14, i32 0, i32 18, !dbg !13230
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw13, align 8, !dbg !13231
  br label %if.end14, !dbg !13229

if.end14:                                         ; preds = %if.then12, %if.end10
  %15 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13232
  %read_oob = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %15, i32 0, i32 25, !dbg !13234
  %16 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %read_oob, align 8, !dbg !13234
  %tobool15 = icmp ne i32 (%struct.nand_chip*, i32)* %16, null, !dbg !13232
  br i1 %tobool15, label %if.end18, label %if.then16, !dbg !13235

if.then16:                                        ; preds = %if.end14
  %17 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13236
  %read_oob17 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %17, i32 0, i32 25, !dbg !13237
  store i32 (%struct.nand_chip*, i32)* @nand_read_oob_std, i32 (%struct.nand_chip*, i32)** %read_oob17, align 8, !dbg !13238
  br label %if.end18, !dbg !13236

if.end18:                                         ; preds = %if.then16, %if.end14
  %18 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13239
  %write_oob = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %18, i32 0, i32 26, !dbg !13241
  %19 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %write_oob, align 8, !dbg !13241
  %tobool19 = icmp ne i32 (%struct.nand_chip*, i32)* %19, null, !dbg !13239
  br i1 %tobool19, label %if.end22, label %if.then20, !dbg !13242

if.then20:                                        ; preds = %if.end18
  %20 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13243
  %write_oob21 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %20, i32 0, i32 26, !dbg !13244
  store i32 (%struct.nand_chip*, i32)* @nand_write_oob_std, i32 (%struct.nand_chip*, i32)** %write_oob21, align 8, !dbg !13245
  br label %if.end22, !dbg !13243

if.end22:                                         ; preds = %if.then20, %if.end18
  %21 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13246
  %read_subpage = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %21, i32 0, i32 20, !dbg !13248
  %22 = load i32 (%struct.nand_chip*, i32, i32, i8*, i32)*, i32 (%struct.nand_chip*, i32, i32, i8*, i32)** %read_subpage, align 8, !dbg !13248
  %tobool23 = icmp ne i32 (%struct.nand_chip*, i32, i32, i8*, i32)* %22, null, !dbg !13246
  br i1 %tobool23, label %if.end26, label %if.then24, !dbg !13249

if.then24:                                        ; preds = %if.end22
  %23 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13250
  %read_subpage25 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %23, i32 0, i32 20, !dbg !13251
  store i32 (%struct.nand_chip*, i32, i32, i8*, i32)* @nand_read_subpage, i32 (%struct.nand_chip*, i32, i32, i8*, i32)** %read_subpage25, align 8, !dbg !13252
  br label %if.end26, !dbg !13250

if.end26:                                         ; preds = %if.then24, %if.end22
  %24 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13253
  %write_subpage = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %24, i32 0, i32 21, !dbg !13255
  %25 = load i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)*, i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)** %write_subpage, align 8, !dbg !13255
  %tobool27 = icmp ne i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)* %25, null, !dbg !13253
  br i1 %tobool27, label %if.end33, label %land.lhs.true, !dbg !13256

land.lhs.true:                                    ; preds = %if.end26
  %26 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13257
  %hwctl = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %26, i32 0, i32 14, !dbg !13258
  %27 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %hwctl, align 8, !dbg !13258
  %tobool28 = icmp ne void (%struct.nand_chip*, i32)* %27, null, !dbg !13257
  br i1 %tobool28, label %land.lhs.true29, label %if.end33, !dbg !13259

land.lhs.true29:                                  ; preds = %land.lhs.true
  %28 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13260
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %28, i32 0, i32 15, !dbg !13261
  %29 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !13261
  %tobool30 = icmp ne i32 (%struct.nand_chip*, i8*, i8*)* %29, null, !dbg !13260
  br i1 %tobool30, label %if.then31, label %if.end33, !dbg !13262

if.then31:                                        ; preds = %land.lhs.true29
  %30 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13263
  %write_subpage32 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %30, i32 0, i32 21, !dbg !13264
  store i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)* @nand_write_subpage_hwecc, i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)** %write_subpage32, align 8, !dbg !13265
  br label %if.end33, !dbg !13263

if.end33:                                         ; preds = %if.then31, %land.lhs.true29, %land.lhs.true, %if.end26
  br label %sw.bb34, !dbg !13261

sw.bb34:                                          ; preds = %entry, %if.end33
  %31 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13266
  %calculate35 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %31, i32 0, i32 15, !dbg !13268
  %32 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate35, align 8, !dbg !13268
  %tobool36 = icmp ne i32 (%struct.nand_chip*, i8*, i8*)* %32, null, !dbg !13266
  br i1 %tobool36, label %lor.lhs.false, label %land.lhs.true41, !dbg !13269

lor.lhs.false:                                    ; preds = %sw.bb34
  %33 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13270
  %correct = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %33, i32 0, i32 16, !dbg !13271
  %34 = load i32 (%struct.nand_chip*, i8*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*, i8*)** %correct, align 8, !dbg !13271
  %tobool37 = icmp ne i32 (%struct.nand_chip*, i8*, i8*, i8*)* %34, null, !dbg !13270
  br i1 %tobool37, label %lor.lhs.false38, label %land.lhs.true41, !dbg !13272

lor.lhs.false38:                                  ; preds = %lor.lhs.false
  %35 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13273
  %hwctl39 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %35, i32 0, i32 14, !dbg !13274
  %36 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %hwctl39, align 8, !dbg !13274
  %tobool40 = icmp ne void (%struct.nand_chip*, i32)* %36, null, !dbg !13273
  br i1 %tobool40, label %if.end76, label %land.lhs.true41, !dbg !13275

land.lhs.true41:                                  ; preds = %lor.lhs.false38, %lor.lhs.false, %sw.bb34
  %37 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13276
  %read_page42 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %37, i32 0, i32 19, !dbg !13277
  %38 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page42, align 8, !dbg !13277
  %tobool43 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %38, null, !dbg !13276
  br i1 %tobool43, label %lor.lhs.false44, label %if.then52, !dbg !13278

lor.lhs.false44:                                  ; preds = %land.lhs.true41
  %39 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13279
  %read_page45 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %39, i32 0, i32 19, !dbg !13280
  %40 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page45, align 8, !dbg !13280
  %cmp = icmp eq i32 (%struct.nand_chip*, i8*, i32, i32)* %40, @nand_read_page_hwecc, !dbg !13281
  br i1 %cmp, label %if.then52, label %lor.lhs.false46, !dbg !13282

lor.lhs.false46:                                  ; preds = %lor.lhs.false44
  %41 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13283
  %write_page47 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %41, i32 0, i32 22, !dbg !13284
  %42 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page47, align 8, !dbg !13284
  %tobool48 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %42, null, !dbg !13283
  br i1 %tobool48, label %lor.lhs.false49, label %if.then52, !dbg !13285

lor.lhs.false49:                                  ; preds = %lor.lhs.false46
  %43 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13286
  %write_page50 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %43, i32 0, i32 22, !dbg !13287
  %44 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page50, align 8, !dbg !13287
  %cmp51 = icmp eq i32 (%struct.nand_chip*, i8*, i32, i32)* %44, @nand_write_page_hwecc, !dbg !13288
  br i1 %cmp51, label %if.then52, label %if.end76, !dbg !13289

if.then52:                                        ; preds = %lor.lhs.false49, %lor.lhs.false46, %lor.lhs.false44, %land.lhs.true41
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !13290, metadata !DIExpression()), !dbg !13293
  store i32 1, i32* %__ret_warn_on, align 4, !dbg !13293
  %45 = load i32, i32* %__ret_warn_on, align 4, !dbg !13294
  %tobool53 = icmp ne i32 %45, 0, !dbg !13294
  %lnot = xor i1 %tobool53, true, !dbg !13294
  %lnot54 = xor i1 %lnot, true, !dbg !13294
  %lnot.ext = zext i1 %lnot54 to i32, !dbg !13294
  %conv = sext i32 %lnot.ext to i64, !dbg !13294
  %tobool55 = icmp ne i64 %conv, 0, !dbg !13294
  br i1 %tobool55, label %if.then56, label %if.end69, !dbg !13293

if.then56:                                        ; preds = %if.then52
  br label %do.body, !dbg !13294

do.body:                                          ; preds = %if.then56
  br label %do.body57, !dbg !13296

do.body57:                                        ; preds = %do.body
  br label %do.end, !dbg !13298

do.end:                                           ; preds = %do.body57
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.41, i64 0, i64 0)) #8, !dbg !13296
  br label %do.body58, !dbg !13296

do.body58:                                        ; preds = %do.end
  br label %do.body59, !dbg !13300

do.body59:                                        ; preds = %do.body58
  br label %do.end60, !dbg !13302

do.end60:                                         ; preds = %do.body59
  br label %do.body61, !dbg !13300

do.body61:                                        ; preds = %do.end60
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5174, i32 2313, i64 12) #9, !dbg !13304, !srcloc !13306
  br label %do.end62, !dbg !13304

do.end62:                                         ; preds = %do.body61
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 289) #9, !dbg !13307, !srcloc !13309
  br label %do.body63, !dbg !13300

do.body63:                                        ; preds = %do.end62
  br label %do.end64, !dbg !13310

do.end64:                                         ; preds = %do.body63
  br label %do.end65, !dbg !13300

do.end65:                                         ; preds = %do.end64
  br label %do.body66, !dbg !13296

do.body66:                                        ; preds = %do.end65
  br label %do.end67, !dbg !13312

do.end67:                                         ; preds = %do.body66
  br label %do.end68, !dbg !13296

do.end68:                                         ; preds = %do.end67
  br label %if.end69, !dbg !13296

if.end69:                                         ; preds = %do.end68, %if.then52
  %46 = load i32, i32* %__ret_warn_on, align 4, !dbg !13293
  %tobool70 = icmp ne i32 %46, 0, !dbg !13293
  %lnot71 = xor i1 %tobool70, true, !dbg !13293
  %lnot73 = xor i1 %lnot71, true, !dbg !13293
  %lnot.ext74 = zext i1 %lnot73 to i32, !dbg !13293
  %conv75 = sext i32 %lnot.ext74 to i64, !dbg !13293
  store i64 %conv75, i64* %tmp, align 8, !dbg !13294
  %47 = load i64, i64* %tmp, align 8, !dbg !13293
  store i32 -22, i32* %retval, align 4, !dbg !13314
  br label %return, !dbg !13314

if.end76:                                         ; preds = %lor.lhs.false49, %lor.lhs.false38
  %48 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13315
  %read_page77 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %48, i32 0, i32 19, !dbg !13317
  %49 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page77, align 8, !dbg !13317
  %tobool78 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %49, null, !dbg !13315
  br i1 %tobool78, label %if.end81, label %if.then79, !dbg !13318

if.then79:                                        ; preds = %if.end76
  %50 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13319
  %read_page80 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %50, i32 0, i32 19, !dbg !13320
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_syndrome, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page80, align 8, !dbg !13321
  br label %if.end81, !dbg !13319

if.end81:                                         ; preds = %if.then79, %if.end76
  %51 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13322
  %write_page82 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %51, i32 0, i32 22, !dbg !13324
  %52 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page82, align 8, !dbg !13324
  %tobool83 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %52, null, !dbg !13322
  br i1 %tobool83, label %if.end86, label %if.then84, !dbg !13325

if.then84:                                        ; preds = %if.end81
  %53 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13326
  %write_page85 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %53, i32 0, i32 22, !dbg !13327
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_syndrome, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page85, align 8, !dbg !13328
  br label %if.end86, !dbg !13326

if.end86:                                         ; preds = %if.then84, %if.end81
  %54 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13329
  %read_page_raw87 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %54, i32 0, i32 17, !dbg !13331
  %55 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw87, align 8, !dbg !13331
  %tobool88 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %55, null, !dbg !13329
  br i1 %tobool88, label %if.end91, label %if.then89, !dbg !13332

if.then89:                                        ; preds = %if.end86
  %56 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13333
  %read_page_raw90 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %56, i32 0, i32 17, !dbg !13334
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_raw_syndrome, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw90, align 8, !dbg !13335
  br label %if.end91, !dbg !13333

if.end91:                                         ; preds = %if.then89, %if.end86
  %57 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13336
  %write_page_raw92 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %57, i32 0, i32 18, !dbg !13338
  %58 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw92, align 8, !dbg !13338
  %tobool93 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %58, null, !dbg !13336
  br i1 %tobool93, label %if.end96, label %if.then94, !dbg !13339

if.then94:                                        ; preds = %if.end91
  %59 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13340
  %write_page_raw95 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %59, i32 0, i32 18, !dbg !13341
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_raw_syndrome, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw95, align 8, !dbg !13342
  br label %if.end96, !dbg !13340

if.end96:                                         ; preds = %if.then94, %if.end91
  %60 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13343
  %read_oob97 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %60, i32 0, i32 25, !dbg !13345
  %61 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %read_oob97, align 8, !dbg !13345
  %tobool98 = icmp ne i32 (%struct.nand_chip*, i32)* %61, null, !dbg !13343
  br i1 %tobool98, label %if.end101, label %if.then99, !dbg !13346

if.then99:                                        ; preds = %if.end96
  %62 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13347
  %read_oob100 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %62, i32 0, i32 25, !dbg !13348
  store i32 (%struct.nand_chip*, i32)* @nand_read_oob_syndrome, i32 (%struct.nand_chip*, i32)** %read_oob100, align 8, !dbg !13349
  br label %if.end101, !dbg !13347

if.end101:                                        ; preds = %if.then99, %if.end96
  %63 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13350
  %write_oob102 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %63, i32 0, i32 26, !dbg !13352
  %64 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %write_oob102, align 8, !dbg !13352
  %tobool103 = icmp ne i32 (%struct.nand_chip*, i32)* %64, null, !dbg !13350
  br i1 %tobool103, label %if.end106, label %if.then104, !dbg !13353

if.then104:                                       ; preds = %if.end101
  %65 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13354
  %write_oob105 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %65, i32 0, i32 26, !dbg !13355
  store i32 (%struct.nand_chip*, i32)* @nand_write_oob_syndrome, i32 (%struct.nand_chip*, i32)** %write_oob105, align 8, !dbg !13356
  br label %if.end106, !dbg !13354

if.end106:                                        ; preds = %if.then104, %if.end101
  br label %sw.epilog, !dbg !13357

sw.default:                                       ; preds = %entry
  %66 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13358
  %placement107 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %66, i32 0, i32 1, !dbg !13358
  %67 = load i32, i32* %placement107, align 4, !dbg !13358
  %call = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.42, i64 0, i64 0), i32 %67) #12, !dbg !13358
  store i32 -22, i32* %retval, align 4, !dbg !13359
  br label %return, !dbg !13359

sw.epilog:                                        ; preds = %if.end106
  store i32 0, i32* %retval, align 4, !dbg !13360
  br label %return, !dbg !13360

return:                                           ; preds = %sw.epilog, %sw.default, %if.end69
  %68 = load i32, i32* %retval, align 4, !dbg !13361
  ret i32 %68, !dbg !13361
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_set_ecc_soft_ops(%struct.nand_chip* %chip) #0 !dbg !13362 {
entry:
  %x.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i, metadata !5519, metadata !DIExpression()), !dbg !13363
  %r.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %r.i, metadata !5529, metadata !DIExpression()), !dbg !13368
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %nanddev = alloca %struct.nand_device*, align 8
  %ecc = alloca %struct.nand_ecc_ctrl*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %__ret_warn_on40 = alloca i32, align 4
  %tmp64 = alloca i64, align 8
  %__ret_warn_on103 = alloca i32, align 4
  %tmp127 = alloca i64, align 8
  %steps = alloca i32, align 4
  %bytes146 = alloca i32, align 4
  %__ret_warn_on162 = alloca i32, align 4
  %tmp186 = alloca i64, align 8
  %__ret_warn_on194 = alloca i32, align 4
  %tmp218 = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !13369, metadata !DIExpression()), !dbg !13370
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !13371, metadata !DIExpression()), !dbg !13372
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13373
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !13374
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !13372
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nanddev, metadata !13375, metadata !DIExpression()), !dbg !13376
  %1 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13377
  %call1 = call %struct.nand_device* @mtd_to_nanddev(%struct.mtd_info* %1) #8, !dbg !13378
  store %struct.nand_device* %call1, %struct.nand_device** %nanddev, align 8, !dbg !13376
  call void @llvm.dbg.declare(metadata %struct.nand_ecc_ctrl** %ecc, metadata !13379, metadata !DIExpression()), !dbg !13380
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !13381
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 31, !dbg !13382
  store %struct.nand_ecc_ctrl* %ecc2, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13380
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !13383, metadata !DIExpression()), !dbg !13386
  %3 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13386
  %engine_type = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %3, i32 0, i32 0, !dbg !13386
  %4 = load i32, i32* %engine_type, align 8, !dbg !13386
  %cmp = icmp ne i32 %4, 2, !dbg !13386
  %lnot = xor i1 %cmp, true, !dbg !13386
  %lnot3 = xor i1 %lnot, true, !dbg !13386
  %lnot.ext = zext i1 %lnot3 to i32, !dbg !13386
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !13386
  %5 = load i32, i32* %__ret_warn_on, align 4, !dbg !13387
  %tobool = icmp ne i32 %5, 0, !dbg !13387
  %lnot4 = xor i1 %tobool, true, !dbg !13387
  %lnot6 = xor i1 %lnot4, true, !dbg !13387
  %lnot.ext7 = zext i1 %lnot6 to i32, !dbg !13387
  %conv = sext i32 %lnot.ext7 to i64, !dbg !13387
  %tobool8 = icmp ne i64 %conv, 0, !dbg !13387
  br i1 %tobool8, label %if.then, label %if.end, !dbg !13386

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !13387

do.body:                                          ; preds = %if.then
  br label %do.body9, !dbg !13389

do.body9:                                         ; preds = %do.body
  br label %do.end, !dbg !13391

do.end:                                           ; preds = %do.body9
  br label %do.body10, !dbg !13389

do.body10:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5207, i32 2305, i64 12) #9, !dbg !13393, !srcloc !13395
  br label %do.end11, !dbg !13393

do.end11:                                         ; preds = %do.body10
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 290) #9, !dbg !13396, !srcloc !13398
  br label %do.body12, !dbg !13389

do.body12:                                        ; preds = %do.end11
  br label %do.end13, !dbg !13399

do.end13:                                         ; preds = %do.body12
  br label %do.end14, !dbg !13389

do.end14:                                         ; preds = %do.end13
  br label %if.end, !dbg !13389

if.end:                                           ; preds = %do.end14, %entry
  %6 = load i32, i32* %__ret_warn_on, align 4, !dbg !13386
  %tobool15 = icmp ne i32 %6, 0, !dbg !13386
  %lnot16 = xor i1 %tobool15, true, !dbg !13386
  %lnot18 = xor i1 %lnot16, true, !dbg !13386
  %lnot.ext19 = zext i1 %lnot18 to i32, !dbg !13386
  %conv20 = sext i32 %lnot.ext19 to i64, !dbg !13386
  store i64 %conv20, i64* %tmp, align 8, !dbg !13387
  %7 = load i64, i64* %tmp, align 8, !dbg !13386
  %tobool21 = icmp ne i64 %7, 0, !dbg !13401
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !13402

if.then22:                                        ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !13403
  br label %return, !dbg !13403

if.end23:                                         ; preds = %if.end
  %8 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13404
  %algo = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %8, i32 0, i32 2, !dbg !13405
  %9 = load i32, i32* %algo, align 8, !dbg !13405
  switch i32 %9, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb36
  ], !dbg !13406

sw.bb:                                            ; preds = %if.end23
  %10 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13407
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %10, i32 0, i32 15, !dbg !13408
  store i32 (%struct.nand_chip*, i8*, i8*)* @nand_calculate_ecc, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !13409
  %11 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13410
  %correct = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %11, i32 0, i32 16, !dbg !13411
  store i32 (%struct.nand_chip*, i8*, i8*, i8*)* @nand_correct_data, i32 (%struct.nand_chip*, i8*, i8*, i8*)** %correct, align 8, !dbg !13412
  %12 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13413
  %read_page = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %12, i32 0, i32 19, !dbg !13414
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_swecc, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page, align 8, !dbg !13415
  %13 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13416
  %read_subpage = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %13, i32 0, i32 20, !dbg !13417
  store i32 (%struct.nand_chip*, i32, i32, i8*, i32)* @nand_read_subpage, i32 (%struct.nand_chip*, i32, i32, i8*, i32)** %read_subpage, align 8, !dbg !13418
  %14 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13419
  %write_page = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %14, i32 0, i32 22, !dbg !13420
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_swecc, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page, align 8, !dbg !13421
  %15 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13422
  %read_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %15, i32 0, i32 17, !dbg !13424
  %16 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw, align 8, !dbg !13424
  %tobool24 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %16, null, !dbg !13422
  br i1 %tobool24, label %if.end27, label %if.then25, !dbg !13425

if.then25:                                        ; preds = %sw.bb
  %17 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13426
  %read_page_raw26 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %17, i32 0, i32 17, !dbg !13427
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw26, align 8, !dbg !13428
  br label %if.end27, !dbg !13426

if.end27:                                         ; preds = %if.then25, %sw.bb
  %18 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13429
  %write_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %18, i32 0, i32 18, !dbg !13431
  %19 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw, align 8, !dbg !13431
  %tobool28 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %19, null, !dbg !13429
  br i1 %tobool28, label %if.end31, label %if.then29, !dbg !13432

if.then29:                                        ; preds = %if.end27
  %20 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13433
  %write_page_raw30 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %20, i32 0, i32 18, !dbg !13434
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw30, align 8, !dbg !13435
  br label %if.end31, !dbg !13433

if.end31:                                         ; preds = %if.then29, %if.end27
  %21 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13436
  %read_oob = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %21, i32 0, i32 25, !dbg !13437
  store i32 (%struct.nand_chip*, i32)* @nand_read_oob_std, i32 (%struct.nand_chip*, i32)** %read_oob, align 8, !dbg !13438
  %22 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13439
  %write_oob = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %22, i32 0, i32 26, !dbg !13440
  store i32 (%struct.nand_chip*, i32)* @nand_write_oob_std, i32 (%struct.nand_chip*, i32)** %write_oob, align 8, !dbg !13441
  %23 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13442
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %23, i32 0, i32 4, !dbg !13444
  %24 = load i32, i32* %size, align 8, !dbg !13444
  %tobool32 = icmp ne i32 %24, 0, !dbg !13442
  br i1 %tobool32, label %if.end35, label %if.then33, !dbg !13445

if.then33:                                        ; preds = %if.end31
  %25 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13446
  %size34 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %25, i32 0, i32 4, !dbg !13447
  store i32 256, i32* %size34, align 8, !dbg !13448
  br label %if.end35, !dbg !13446

if.end35:                                         ; preds = %if.then33, %if.end31
  %26 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13449
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %26, i32 0, i32 5, !dbg !13450
  store i32 3, i32* %bytes, align 4, !dbg !13451
  %27 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13452
  %strength = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %27, i32 0, i32 7, !dbg !13453
  store i32 1, i32* %strength, align 4, !dbg !13454
  store i32 0, i32* %retval, align 4, !dbg !13455
  br label %return, !dbg !13455

sw.bb36:                                          ; preds = %if.end23
  %call37 = call i32 @mtd_nand_has_bch() #8, !dbg !13456
  %tobool38 = icmp ne i32 %call37, 0, !dbg !13456
  br i1 %tobool38, label %if.end71, label %if.then39, !dbg !13458

if.then39:                                        ; preds = %sw.bb36
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on40, metadata !13459, metadata !DIExpression()), !dbg !13462
  store i32 1, i32* %__ret_warn_on40, align 4, !dbg !13462
  %28 = load i32, i32* %__ret_warn_on40, align 4, !dbg !13463
  %tobool41 = icmp ne i32 %28, 0, !dbg !13463
  %lnot42 = xor i1 %tobool41, true, !dbg !13463
  %lnot44 = xor i1 %lnot42, true, !dbg !13463
  %lnot.ext45 = zext i1 %lnot44 to i32, !dbg !13463
  %conv46 = sext i32 %lnot.ext45 to i64, !dbg !13463
  %tobool47 = icmp ne i64 %conv46, 0, !dbg !13463
  br i1 %tobool47, label %if.then48, label %if.end63, !dbg !13462

if.then48:                                        ; preds = %if.then39
  br label %do.body49, !dbg !13463

do.body49:                                        ; preds = %if.then48
  br label %do.body50, !dbg !13465

do.body50:                                        ; preds = %do.body49
  br label %do.end51, !dbg !13467

do.end51:                                         ; preds = %do.body50
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.43, i64 0, i64 0)) #8, !dbg !13465
  br label %do.body52, !dbg !13465

do.body52:                                        ; preds = %do.end51
  br label %do.body53, !dbg !13469

do.body53:                                        ; preds = %do.body52
  br label %do.end54, !dbg !13471

do.end54:                                         ; preds = %do.body53
  br label %do.body55, !dbg !13469

do.body55:                                        ; preds = %do.end54
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5234, i32 2313, i64 12) #9, !dbg !13473, !srcloc !13475
  br label %do.end56, !dbg !13473

do.end56:                                         ; preds = %do.body55
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 291) #9, !dbg !13476, !srcloc !13478
  br label %do.body57, !dbg !13469

do.body57:                                        ; preds = %do.end56
  br label %do.end58, !dbg !13479

do.end58:                                         ; preds = %do.body57
  br label %do.end59, !dbg !13469

do.end59:                                         ; preds = %do.end58
  br label %do.body60, !dbg !13465

do.body60:                                        ; preds = %do.end59
  br label %do.end61, !dbg !13481

do.end61:                                         ; preds = %do.body60
  br label %do.end62, !dbg !13465

do.end62:                                         ; preds = %do.end61
  br label %if.end63, !dbg !13465

if.end63:                                         ; preds = %do.end62, %if.then39
  %29 = load i32, i32* %__ret_warn_on40, align 4, !dbg !13462
  %tobool65 = icmp ne i32 %29, 0, !dbg !13462
  %lnot66 = xor i1 %tobool65, true, !dbg !13462
  %lnot68 = xor i1 %lnot66, true, !dbg !13462
  %lnot.ext69 = zext i1 %lnot68 to i32, !dbg !13462
  %conv70 = sext i32 %lnot.ext69 to i64, !dbg !13462
  store i64 %conv70, i64* %tmp64, align 8, !dbg !13463
  %30 = load i64, i64* %tmp64, align 8, !dbg !13462
  store i32 -22, i32* %retval, align 4, !dbg !13483
  br label %return, !dbg !13483

if.end71:                                         ; preds = %sw.bb36
  %31 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13484
  %calculate72 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %31, i32 0, i32 15, !dbg !13485
  store i32 (%struct.nand_chip*, i8*, i8*)* @nand_bch_calculate_ecc, i32 (%struct.nand_chip*, i8*, i8*)** %calculate72, align 8, !dbg !13486
  %32 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13487
  %correct73 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %32, i32 0, i32 16, !dbg !13488
  store i32 (%struct.nand_chip*, i8*, i8*, i8*)* @nand_bch_correct_data, i32 (%struct.nand_chip*, i8*, i8*, i8*)** %correct73, align 8, !dbg !13489
  %33 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13490
  %read_page74 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %33, i32 0, i32 19, !dbg !13491
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_swecc, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page74, align 8, !dbg !13492
  %34 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13493
  %read_subpage75 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %34, i32 0, i32 20, !dbg !13494
  store i32 (%struct.nand_chip*, i32, i32, i8*, i32)* @nand_read_subpage, i32 (%struct.nand_chip*, i32, i32, i8*, i32)** %read_subpage75, align 8, !dbg !13495
  %35 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13496
  %write_page76 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %35, i32 0, i32 22, !dbg !13497
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_swecc, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page76, align 8, !dbg !13498
  %36 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13499
  %read_page_raw77 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %36, i32 0, i32 17, !dbg !13501
  %37 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw77, align 8, !dbg !13501
  %tobool78 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %37, null, !dbg !13499
  br i1 %tobool78, label %if.end81, label %if.then79, !dbg !13502

if.then79:                                        ; preds = %if.end71
  %38 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13503
  %read_page_raw80 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %38, i32 0, i32 17, !dbg !13504
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_read_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw80, align 8, !dbg !13505
  br label %if.end81, !dbg !13503

if.end81:                                         ; preds = %if.then79, %if.end71
  %39 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13506
  %write_page_raw82 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %39, i32 0, i32 18, !dbg !13508
  %40 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw82, align 8, !dbg !13508
  %tobool83 = icmp ne i32 (%struct.nand_chip*, i8*, i32, i32)* %40, null, !dbg !13506
  br i1 %tobool83, label %if.end86, label %if.then84, !dbg !13509

if.then84:                                        ; preds = %if.end81
  %41 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13510
  %write_page_raw85 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %41, i32 0, i32 18, !dbg !13511
  store i32 (%struct.nand_chip*, i8*, i32, i32)* @nand_write_page_raw, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw85, align 8, !dbg !13512
  br label %if.end86, !dbg !13510

if.end86:                                         ; preds = %if.then84, %if.end81
  %42 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13513
  %read_oob87 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %42, i32 0, i32 25, !dbg !13514
  store i32 (%struct.nand_chip*, i32)* @nand_read_oob_std, i32 (%struct.nand_chip*, i32)** %read_oob87, align 8, !dbg !13515
  %43 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13516
  %write_oob88 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %43, i32 0, i32 26, !dbg !13517
  store i32 (%struct.nand_chip*, i32)* @nand_write_oob_std, i32 (%struct.nand_chip*, i32)** %write_oob88, align 8, !dbg !13518
  %44 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13519
  %size89 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %44, i32 0, i32 4, !dbg !13521
  %45 = load i32, i32* %size89, align 8, !dbg !13521
  %tobool90 = icmp ne i32 %45, 0, !dbg !13519
  br i1 %tobool90, label %if.end96, label %land.lhs.true, !dbg !13522

land.lhs.true:                                    ; preds = %if.end86
  %46 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13523
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %46, i32 0, i32 6, !dbg !13524
  %47 = load i32, i32* %oobsize, align 4, !dbg !13524
  %cmp91 = icmp uge i32 %47, 64, !dbg !13525
  br i1 %cmp91, label %if.then93, label %if.end96, !dbg !13526

if.then93:                                        ; preds = %land.lhs.true
  %48 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13527
  %size94 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %48, i32 0, i32 4, !dbg !13529
  store i32 512, i32* %size94, align 8, !dbg !13530
  %49 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13531
  %strength95 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %49, i32 0, i32 7, !dbg !13532
  store i32 4, i32* %strength95, align 4, !dbg !13533
  br label %if.end96, !dbg !13534

if.end96:                                         ; preds = %if.then93, %land.lhs.true, %if.end86
  %50 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13535
  %ooblayout = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %50, i32 0, i32 15, !dbg !13537
  %51 = load %struct.mtd_ooblayout_ops*, %struct.mtd_ooblayout_ops** %ooblayout, align 8, !dbg !13537
  %tobool97 = icmp ne %struct.mtd_ooblayout_ops* %51, null, !dbg !13535
  br i1 %tobool97, label %if.end136, label %if.then98, !dbg !13538

if.then98:                                        ; preds = %if.end96
  %52 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13539
  %oobsize99 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %52, i32 0, i32 6, !dbg !13542
  %53 = load i32, i32* %oobsize99, align 4, !dbg !13542
  %cmp100 = icmp ult i32 %53, 64, !dbg !13543
  br i1 %cmp100, label %if.then102, label %if.end134, !dbg !13544

if.then102:                                       ; preds = %if.then98
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on103, metadata !13545, metadata !DIExpression()), !dbg !13548
  store i32 1, i32* %__ret_warn_on103, align 4, !dbg !13548
  %54 = load i32, i32* %__ret_warn_on103, align 4, !dbg !13549
  %tobool104 = icmp ne i32 %54, 0, !dbg !13549
  %lnot105 = xor i1 %tobool104, true, !dbg !13549
  %lnot107 = xor i1 %lnot105, true, !dbg !13549
  %lnot.ext108 = zext i1 %lnot107 to i32, !dbg !13549
  %conv109 = sext i32 %lnot.ext108 to i64, !dbg !13549
  %tobool110 = icmp ne i64 %conv109, 0, !dbg !13549
  br i1 %tobool110, label %if.then111, label %if.end126, !dbg !13548

if.then111:                                       ; preds = %if.then102
  br label %do.body112, !dbg !13549

do.body112:                                       ; preds = %if.then111
  br label %do.body113, !dbg !13551

do.body113:                                       ; preds = %do.body112
  br label %do.end114, !dbg !13553

do.end114:                                        ; preds = %do.body113
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.44, i64 0, i64 0)) #8, !dbg !13551
  br label %do.body115, !dbg !13551

do.body115:                                       ; preds = %do.end114
  br label %do.body116, !dbg !13555

do.body116:                                       ; preds = %do.body115
  br label %do.end117, !dbg !13557

do.end117:                                        ; preds = %do.body116
  br label %do.body118, !dbg !13555

do.body118:                                       ; preds = %do.end117
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5266, i32 2313, i64 12) #9, !dbg !13559, !srcloc !13561
  br label %do.end119, !dbg !13559

do.end119:                                        ; preds = %do.body118
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 292) #9, !dbg !13562, !srcloc !13564
  br label %do.body120, !dbg !13555

do.body120:                                       ; preds = %do.end119
  br label %do.end121, !dbg !13565

do.end121:                                        ; preds = %do.body120
  br label %do.end122, !dbg !13555

do.end122:                                        ; preds = %do.end121
  br label %do.body123, !dbg !13551

do.body123:                                       ; preds = %do.end122
  br label %do.end124, !dbg !13567

do.end124:                                        ; preds = %do.body123
  br label %do.end125, !dbg !13551

do.end125:                                        ; preds = %do.end124
  br label %if.end126, !dbg !13551

if.end126:                                        ; preds = %do.end125, %if.then102
  %55 = load i32, i32* %__ret_warn_on103, align 4, !dbg !13548
  %tobool128 = icmp ne i32 %55, 0, !dbg !13548
  %lnot129 = xor i1 %tobool128, true, !dbg !13548
  %lnot131 = xor i1 %lnot129, true, !dbg !13548
  %lnot.ext132 = zext i1 %lnot131 to i32, !dbg !13548
  %conv133 = sext i32 %lnot.ext132 to i64, !dbg !13548
  store i64 %conv133, i64* %tmp127, align 8, !dbg !13549
  %56 = load i64, i64* %tmp127, align 8, !dbg !13548
  store i32 -22, i32* %retval, align 4, !dbg !13569
  br label %return, !dbg !13569

if.end134:                                        ; preds = %if.then98
  %57 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13570
  %call135 = call %struct.mtd_ooblayout_ops* @nand_get_large_page_ooblayout() #8, !dbg !13571
  call void @mtd_set_ooblayout(%struct.mtd_info* %57, %struct.mtd_ooblayout_ops* %call135) #8, !dbg !13572
  br label %if.end136, !dbg !13573

if.end136:                                        ; preds = %if.end134, %if.end96
  %58 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13574
  %ooblayout137 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %58, i32 0, i32 15, !dbg !13575
  %59 = load %struct.mtd_ooblayout_ops*, %struct.mtd_ooblayout_ops** %ooblayout137, align 8, !dbg !13575
  %call138 = call %struct.mtd_ooblayout_ops* @nand_get_large_page_ooblayout() #8, !dbg !13576
  %cmp139 = icmp eq %struct.mtd_ooblayout_ops* %59, %call138, !dbg !13577
  br i1 %cmp139, label %land.lhs.true141, label %if.end156, !dbg !13578

land.lhs.true141:                                 ; preds = %if.end136
  %60 = load %struct.nand_device*, %struct.nand_device** %nanddev, align 8, !dbg !13579
  %ecc142 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %60, i32 0, i32 2, !dbg !13580
  %user_conf = getelementptr inbounds %struct.nand_ecc, %struct.nand_ecc* %ecc142, i32 0, i32 2, !dbg !13581
  %flags = getelementptr inbounds %struct.nand_ecc_props, %struct.nand_ecc_props* %user_conf, i32 0, i32 5, !dbg !13582
  %61 = load i32, i32* %flags, align 4, !dbg !13582
  %conv143 = zext i32 %61 to i64, !dbg !13579
  %and = and i64 %conv143, 1, !dbg !13583
  %tobool144 = icmp ne i64 %and, 0, !dbg !13583
  br i1 %tobool144, label %if.then145, label %if.end156, !dbg !13584

if.then145:                                       ; preds = %land.lhs.true141
  call void @llvm.dbg.declare(metadata i32* %steps, metadata !13585, metadata !DIExpression()), !dbg !13586
  call void @llvm.dbg.declare(metadata i32* %bytes146, metadata !13587, metadata !DIExpression()), !dbg !13588
  %62 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13589
  %size147 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %62, i32 0, i32 4, !dbg !13590
  store i32 1024, i32* %size147, align 8, !dbg !13591
  %63 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13592
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %63, i32 0, i32 4, !dbg !13593
  %64 = load i32, i32* %writesize, align 4, !dbg !13593
  %65 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13594
  %size148 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %65, i32 0, i32 4, !dbg !13595
  %66 = load i32, i32* %size148, align 8, !dbg !13595
  %div = udiv i32 %64, %66, !dbg !13596
  store i32 %div, i32* %steps, align 4, !dbg !13597
  %67 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13598
  %oobsize149 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %67, i32 0, i32 6, !dbg !13599
  %68 = load i32, i32* %oobsize149, align 4, !dbg !13599
  %sub = sub i32 %68, 2, !dbg !13600
  %69 = load i32, i32* %steps, align 4, !dbg !13601
  %div150 = udiv i32 %sub, %69, !dbg !13602
  store i32 %div150, i32* %bytes146, align 4, !dbg !13603
  %70 = load i32, i32* %bytes146, align 4, !dbg !13604
  %mul = mul i32 %70, 8, !dbg !13605
  %71 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13606
  %size151 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %71, i32 0, i32 4, !dbg !13607
  %72 = load i32, i32* %size151, align 8, !dbg !13607
  %mul152 = mul i32 8, %72, !dbg !13608
  store i32 %mul152, i32* %x.addr.i, align 4
  %73 = load i32, i32* %x.addr.i, align 4, !dbg !13609
  %74 = call i32 asm "bsrl $1,$0", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %73, i32 -1) #11, !dbg !13610, !srcloc !5595
  store i32 %74, i32* %r.i, align 4, !dbg !13610
  %75 = load i32, i32* %r.i, align 4, !dbg !13611
  %add.i = add i32 %75, 1, !dbg !13612
  %div154 = sdiv i32 %mul, %add.i, !dbg !13613
  %76 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13614
  %strength155 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %76, i32 0, i32 7, !dbg !13615
  store i32 %div154, i32* %strength155, align 4, !dbg !13616
  br label %if.end156, !dbg !13617

if.end156:                                        ; preds = %if.then145, %land.lhs.true141, %if.end136
  %77 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13618
  %bytes157 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %77, i32 0, i32 5, !dbg !13619
  store i32 0, i32* %bytes157, align 4, !dbg !13620
  %78 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !13621
  %call158 = call %struct.nand_bch_control* @nand_bch_init(%struct.mtd_info* %78) #8, !dbg !13622
  %79 = bitcast %struct.nand_bch_control* %call158 to i8*, !dbg !13622
  %80 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13623
  %priv = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %80, i32 0, i32 11, !dbg !13624
  store i8* %79, i8** %priv, align 8, !dbg !13625
  %81 = load %struct.nand_ecc_ctrl*, %struct.nand_ecc_ctrl** %ecc, align 8, !dbg !13626
  %priv159 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %81, i32 0, i32 11, !dbg !13628
  %82 = load i8*, i8** %priv159, align 8, !dbg !13628
  %tobool160 = icmp ne i8* %82, null, !dbg !13626
  br i1 %tobool160, label %if.end193, label %if.then161, !dbg !13629

if.then161:                                       ; preds = %if.end156
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on162, metadata !13630, metadata !DIExpression()), !dbg !13633
  store i32 1, i32* %__ret_warn_on162, align 4, !dbg !13633
  %83 = load i32, i32* %__ret_warn_on162, align 4, !dbg !13634
  %tobool163 = icmp ne i32 %83, 0, !dbg !13634
  %lnot164 = xor i1 %tobool163, true, !dbg !13634
  %lnot166 = xor i1 %lnot164, true, !dbg !13634
  %lnot.ext167 = zext i1 %lnot166 to i32, !dbg !13634
  %conv168 = sext i32 %lnot.ext167 to i64, !dbg !13634
  %tobool169 = icmp ne i64 %conv168, 0, !dbg !13634
  br i1 %tobool169, label %if.then170, label %if.end185, !dbg !13633

if.then170:                                       ; preds = %if.then161
  br label %do.body171, !dbg !13634

do.body171:                                       ; preds = %if.then170
  br label %do.body172, !dbg !13636

do.body172:                                       ; preds = %do.body171
  br label %do.end173, !dbg !13638

do.end173:                                        ; preds = %do.body172
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.45, i64 0, i64 0)) #8, !dbg !13636
  br label %do.body174, !dbg !13636

do.body174:                                       ; preds = %do.end173
  br label %do.body175, !dbg !13640

do.body175:                                       ; preds = %do.body174
  br label %do.end176, !dbg !13642

do.end176:                                        ; preds = %do.body175
  br label %do.body177, !dbg !13640

do.body177:                                       ; preds = %do.end176
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5296, i32 2313, i64 12) #9, !dbg !13644, !srcloc !13646
  br label %do.end178, !dbg !13644

do.end178:                                        ; preds = %do.body177
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 293) #9, !dbg !13647, !srcloc !13649
  br label %do.body179, !dbg !13640

do.body179:                                       ; preds = %do.end178
  br label %do.end180, !dbg !13650

do.end180:                                        ; preds = %do.body179
  br label %do.end181, !dbg !13640

do.end181:                                        ; preds = %do.end180
  br label %do.body182, !dbg !13636

do.body182:                                       ; preds = %do.end181
  br label %do.end183, !dbg !13652

do.end183:                                        ; preds = %do.body182
  br label %do.end184, !dbg !13636

do.end184:                                        ; preds = %do.end183
  br label %if.end185, !dbg !13636

if.end185:                                        ; preds = %do.end184, %if.then161
  %84 = load i32, i32* %__ret_warn_on162, align 4, !dbg !13633
  %tobool187 = icmp ne i32 %84, 0, !dbg !13633
  %lnot188 = xor i1 %tobool187, true, !dbg !13633
  %lnot190 = xor i1 %lnot188, true, !dbg !13633
  %lnot.ext191 = zext i1 %lnot190 to i32, !dbg !13633
  %conv192 = sext i32 %lnot.ext191 to i64, !dbg !13633
  store i64 %conv192, i64* %tmp186, align 8, !dbg !13634
  %85 = load i64, i64* %tmp186, align 8, !dbg !13633
  store i32 -22, i32* %retval, align 4, !dbg !13654
  br label %return, !dbg !13654

if.end193:                                        ; preds = %if.end156
  store i32 0, i32* %retval, align 4, !dbg !13655
  br label %return, !dbg !13655

sw.default:                                       ; preds = %if.end23
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on194, metadata !13656, metadata !DIExpression()), !dbg !13658
  store i32 1, i32* %__ret_warn_on194, align 4, !dbg !13658
  %86 = load i32, i32* %__ret_warn_on194, align 4, !dbg !13659
  %tobool195 = icmp ne i32 %86, 0, !dbg !13659
  %lnot196 = xor i1 %tobool195, true, !dbg !13659
  %lnot198 = xor i1 %lnot196, true, !dbg !13659
  %lnot.ext199 = zext i1 %lnot198 to i32, !dbg !13659
  %conv200 = sext i32 %lnot.ext199 to i64, !dbg !13659
  %tobool201 = icmp ne i64 %conv200, 0, !dbg !13659
  br i1 %tobool201, label %if.then202, label %if.end217, !dbg !13658

if.then202:                                       ; preds = %sw.default
  br label %do.body203, !dbg !13659

do.body203:                                       ; preds = %if.then202
  br label %do.body204, !dbg !13661

do.body204:                                       ; preds = %do.body203
  br label %do.end205, !dbg !13663

do.end205:                                        ; preds = %do.body204
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.46, i64 0, i64 0)) #8, !dbg !13661
  br label %do.body206, !dbg !13661

do.body206:                                       ; preds = %do.end205
  br label %do.body207, !dbg !13665

do.body207:                                       ; preds = %do.body206
  br label %do.end208, !dbg !13667

do.end208:                                        ; preds = %do.body207
  br label %do.body209, !dbg !13665

do.body209:                                       ; preds = %do.end208
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 5301, i32 2313, i64 12) #9, !dbg !13669, !srcloc !13671
  br label %do.end210, !dbg !13669

do.end210:                                        ; preds = %do.body209
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 294) #9, !dbg !13672, !srcloc !13674
  br label %do.body211, !dbg !13665

do.body211:                                       ; preds = %do.end210
  br label %do.end212, !dbg !13675

do.end212:                                        ; preds = %do.body211
  br label %do.end213, !dbg !13665

do.end213:                                        ; preds = %do.end212
  br label %do.body214, !dbg !13661

do.body214:                                       ; preds = %do.end213
  br label %do.end215, !dbg !13677

do.end215:                                        ; preds = %do.body214
  br label %do.end216, !dbg !13661

do.end216:                                        ; preds = %do.end215
  br label %if.end217, !dbg !13661

if.end217:                                        ; preds = %do.end216, %sw.default
  %87 = load i32, i32* %__ret_warn_on194, align 4, !dbg !13658
  %tobool219 = icmp ne i32 %87, 0, !dbg !13658
  %lnot220 = xor i1 %tobool219, true, !dbg !13658
  %lnot222 = xor i1 %lnot220, true, !dbg !13658
  %lnot.ext223 = zext i1 %lnot222 to i32, !dbg !13658
  %conv224 = sext i32 %lnot.ext223 to i64, !dbg !13658
  store i64 %conv224, i64* %tmp218, align 8, !dbg !13659
  %88 = load i64, i64* %tmp218, align 8, !dbg !13658
  store i32 -22, i32* %retval, align 4, !dbg !13679
  br label %return, !dbg !13679

return:                                           ; preds = %if.end217, %if.end193, %if.end185, %if.end126, %if.end63, %if.end35, %if.then22
  %89 = load i32, i32* %retval, align 4, !dbg !13680
  ret i32 %89, !dbg !13680
}

; Function Attrs: noredzone
declare dso_local i32 @mtd_ooblayout_count_freebytes(%struct.mtd_info*) #2

; Function Attrs: noredzone
declare dso_local zeroext i1 @nand_ecc_is_strong_enough(%struct.nand_device*) #2

; Function Attrs: noredzone
declare dso_local i32 @nanddev_init(%struct.nand_device*, %struct.nand_ops*, %struct.module*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_erase(%struct.mtd_info* %mtd, %struct.erase_info* %instr) #0 !dbg !13681 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %instr.addr = alloca %struct.erase_info*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13682, metadata !DIExpression()), !dbg !13683
  store %struct.erase_info* %instr, %struct.erase_info** %instr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.erase_info** %instr.addr, metadata !13684, metadata !DIExpression()), !dbg !13685
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13686
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !13687
  %1 = load %struct.erase_info*, %struct.erase_info** %instr.addr, align 8, !dbg !13688
  %call1 = call i32 @nand_erase_nand(%struct.nand_chip* %call, %struct.erase_info* %1, i32 0) #8, !dbg !13689
  ret i32 %call1, !dbg !13690
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @panic_nand_write(%struct.mtd_info* %mtd, i64 %to, i64 %len, i64* %retlen, i8* %buf) #0 !dbg !13691 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %to.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %retlen.addr = alloca i64*, align 8
  %buf.addr = alloca i8*, align 8
  %chip = alloca %struct.nand_chip*, align 8
  %chipnr = alloca i32, align 4
  %ops = alloca %struct.mtd_oob_ops, align 8
  %ret = alloca i32, align 4
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13694, metadata !DIExpression()), !dbg !13695
  store i64 %to, i64* %to.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %to.addr, metadata !13696, metadata !DIExpression()), !dbg !13697
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !13698, metadata !DIExpression()), !dbg !13699
  store i64* %retlen, i64** %retlen.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %retlen.addr, metadata !13700, metadata !DIExpression()), !dbg !13701
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !13702, metadata !DIExpression()), !dbg !13703
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !13704, metadata !DIExpression()), !dbg !13705
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13706
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !13707
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !13705
  call void @llvm.dbg.declare(metadata i32* %chipnr, metadata !13708, metadata !DIExpression()), !dbg !13709
  %1 = load i64, i64* %to.addr, align 8, !dbg !13710
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13711
  %chip_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 19, !dbg !13712
  %3 = load i32, i32* %chip_shift, align 8, !dbg !13712
  %sh_prom = zext i32 %3 to i64, !dbg !13713
  %shr = ashr i64 %1, %sh_prom, !dbg !13713
  %conv = trunc i64 %shr to i32, !dbg !13714
  store i32 %conv, i32* %chipnr, align 4, !dbg !13709
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops* %ops, metadata !13715, metadata !DIExpression()), !dbg !13716
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !13717, metadata !DIExpression()), !dbg !13718
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13719
  %5 = load i32, i32* %chipnr, align 4, !dbg !13720
  call void @nand_select_target(%struct.nand_chip* %4, i32 %5) #8, !dbg !13721
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13722
  call void @panic_nand_wait(%struct.nand_chip* %6, i64 400) #8, !dbg !13723
  %7 = bitcast %struct.mtd_oob_ops* %ops to i8*, !dbg !13724
  call void @llvm.memset.p0i8.i64(i8* align 8 %7, i8 0, i64 64, i1 false), !dbg !13724
  %8 = load i64, i64* %len.addr, align 8, !dbg !13725
  %len1 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 1, !dbg !13726
  store i64 %8, i64* %len1, align 8, !dbg !13727
  %9 = load i8*, i8** %buf.addr, align 8, !dbg !13728
  %datbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 6, !dbg !13729
  store i8* %9, i8** %datbuf, align 8, !dbg !13730
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 0, !dbg !13731
  store i32 0, i32* %mode, align 8, !dbg !13732
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13733
  %11 = load i64, i64* %to.addr, align 8, !dbg !13734
  %call2 = call i32 @nand_do_write_ops(%struct.nand_chip* %10, i64 %11, %struct.mtd_oob_ops* %ops) #8, !dbg !13735
  store i32 %call2, i32* %ret, align 4, !dbg !13736
  %retlen3 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %ops, i32 0, i32 2, !dbg !13737
  %12 = load i64, i64* %retlen3, align 8, !dbg !13737
  %13 = load i64*, i64** %retlen.addr, align 8, !dbg !13738
  store i64 %12, i64* %13, align 8, !dbg !13739
  %14 = load i32, i32* %ret, align 4, !dbg !13740
  ret i32 %14, !dbg !13741
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_read_oob(%struct.mtd_info* %mtd, i64 %from, %struct.mtd_oob_ops* %ops) #0 !dbg !13742 {
entry:
  %retval = alloca i32, align 4
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %from.addr = alloca i64, align 8
  %ops.addr = alloca %struct.mtd_oob_ops*, align 8
  %chip = alloca %struct.nand_chip*, align 8
  %ret = alloca i32, align 4
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13743, metadata !DIExpression()), !dbg !13744
  store i64 %from, i64* %from.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %from.addr, metadata !13745, metadata !DIExpression()), !dbg !13746
  store %struct.mtd_oob_ops* %ops, %struct.mtd_oob_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops** %ops.addr, metadata !13747, metadata !DIExpression()), !dbg !13748
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !13749, metadata !DIExpression()), !dbg !13750
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13751
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !13752
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !13750
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !13753, metadata !DIExpression()), !dbg !13754
  %1 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13755
  %retlen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %1, i32 0, i32 2, !dbg !13756
  store i64 0, i64* %retlen, align 8, !dbg !13757
  %2 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13758
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %2, i32 0, i32 0, !dbg !13760
  %3 = load i32, i32* %mode, align 8, !dbg !13760
  %cmp = icmp ne i32 %3, 0, !dbg !13761
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !13762

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13763
  %mode1 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %4, i32 0, i32 0, !dbg !13764
  %5 = load i32, i32* %mode1, align 8, !dbg !13764
  %cmp2 = icmp ne i32 %5, 1, !dbg !13765
  br i1 %cmp2, label %land.lhs.true3, label %if.end, !dbg !13766

land.lhs.true3:                                   ; preds = %land.lhs.true
  %6 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13767
  %mode4 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %6, i32 0, i32 0, !dbg !13768
  %7 = load i32, i32* %mode4, align 8, !dbg !13768
  %cmp5 = icmp ne i32 %7, 2, !dbg !13769
  br i1 %cmp5, label %if.then, label %if.end, !dbg !13770

if.then:                                          ; preds = %land.lhs.true3
  store i32 -524, i32* %retval, align 4, !dbg !13771
  br label %return, !dbg !13771

if.end:                                           ; preds = %land.lhs.true3, %land.lhs.true, %entry
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13772
  %call6 = call i32 @nand_get_device(%struct.nand_chip* %8) #8, !dbg !13773
  store i32 %call6, i32* %ret, align 4, !dbg !13774
  %9 = load i32, i32* %ret, align 4, !dbg !13775
  %tobool = icmp ne i32 %9, 0, !dbg !13775
  br i1 %tobool, label %if.then7, label %if.end8, !dbg !13777

if.then7:                                         ; preds = %if.end
  %10 = load i32, i32* %ret, align 4, !dbg !13778
  store i32 %10, i32* %retval, align 4, !dbg !13779
  br label %return, !dbg !13779

if.end8:                                          ; preds = %if.end
  %11 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13780
  %datbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %11, i32 0, i32 6, !dbg !13782
  %12 = load i8*, i8** %datbuf, align 8, !dbg !13782
  %tobool9 = icmp ne i8* %12, null, !dbg !13780
  br i1 %tobool9, label %if.else, label %if.then10, !dbg !13783

if.then10:                                        ; preds = %if.end8
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13784
  %14 = load i64, i64* %from.addr, align 8, !dbg !13785
  %15 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13786
  %call11 = call i32 @nand_do_read_oob(%struct.nand_chip* %13, i64 %14, %struct.mtd_oob_ops* %15) #8, !dbg !13787
  store i32 %call11, i32* %ret, align 4, !dbg !13788
  br label %if.end13, !dbg !13789

if.else:                                          ; preds = %if.end8
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13790
  %17 = load i64, i64* %from.addr, align 8, !dbg !13791
  %18 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13792
  %call12 = call i32 @nand_do_read_ops(%struct.nand_chip* %16, i64 %17, %struct.mtd_oob_ops* %18) #8, !dbg !13793
  store i32 %call12, i32* %ret, align 4, !dbg !13794
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then10
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13795
  call void @nand_release_device(%struct.nand_chip* %19) #8, !dbg !13796
  %20 = load i32, i32* %ret, align 4, !dbg !13797
  store i32 %20, i32* %retval, align 4, !dbg !13798
  br label %return, !dbg !13798

return:                                           ; preds = %if.end13, %if.then7, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !13799
  ret i32 %21, !dbg !13799
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_write_oob(%struct.mtd_info* %mtd, i64 %to, %struct.mtd_oob_ops* %ops) #0 !dbg !13800 {
entry:
  %retval = alloca i32, align 4
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %to.addr = alloca i64, align 8
  %ops.addr = alloca %struct.mtd_oob_ops*, align 8
  %chip = alloca %struct.nand_chip*, align 8
  %ret = alloca i32, align 4
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13801, metadata !DIExpression()), !dbg !13802
  store i64 %to, i64* %to.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %to.addr, metadata !13803, metadata !DIExpression()), !dbg !13804
  store %struct.mtd_oob_ops* %ops, %struct.mtd_oob_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops** %ops.addr, metadata !13805, metadata !DIExpression()), !dbg !13806
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !13807, metadata !DIExpression()), !dbg !13808
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13809
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !13810
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !13808
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !13811, metadata !DIExpression()), !dbg !13812
  %1 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13813
  %retlen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %1, i32 0, i32 2, !dbg !13814
  store i64 0, i64* %retlen, align 8, !dbg !13815
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13816
  %call1 = call i32 @nand_get_device(%struct.nand_chip* %2) #8, !dbg !13817
  store i32 %call1, i32* %ret, align 4, !dbg !13818
  %3 = load i32, i32* %ret, align 4, !dbg !13819
  %tobool = icmp ne i32 %3, 0, !dbg !13819
  br i1 %tobool, label %if.then, label %if.end, !dbg !13821

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %ret, align 4, !dbg !13822
  store i32 %4, i32* %retval, align 4, !dbg !13823
  br label %return, !dbg !13823

if.end:                                           ; preds = %entry
  %5 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13824
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %5, i32 0, i32 0, !dbg !13825
  %6 = load i32, i32* %mode, align 8, !dbg !13825
  switch i32 %6, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb
    i32 2, label %sw.bb
  ], !dbg !13826

sw.bb:                                            ; preds = %if.end, %if.end, %if.end
  br label %sw.epilog, !dbg !13827

sw.default:                                       ; preds = %if.end
  br label %out, !dbg !13829

sw.epilog:                                        ; preds = %sw.bb
  %7 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13830
  %datbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %7, i32 0, i32 6, !dbg !13832
  %8 = load i8*, i8** %datbuf, align 8, !dbg !13832
  %tobool2 = icmp ne i8* %8, null, !dbg !13830
  br i1 %tobool2, label %if.else, label %if.then3, !dbg !13833

if.then3:                                         ; preds = %sw.epilog
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13834
  %10 = load i64, i64* %to.addr, align 8, !dbg !13835
  %11 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13836
  %call4 = call i32 @nand_do_write_oob(%struct.nand_chip* %9, i64 %10, %struct.mtd_oob_ops* %11) #8, !dbg !13837
  store i32 %call4, i32* %ret, align 4, !dbg !13838
  br label %if.end6, !dbg !13839

if.else:                                          ; preds = %sw.epilog
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13840
  %13 = load i64, i64* %to.addr, align 8, !dbg !13841
  %14 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !13842
  %call5 = call i32 @nand_do_write_ops(%struct.nand_chip* %12, i64 %13, %struct.mtd_oob_ops* %14) #8, !dbg !13843
  store i32 %call5, i32* %ret, align 4, !dbg !13844
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.then3
  br label %out, !dbg !13832

out:                                              ; preds = %if.end6, %sw.default
  call void @llvm.dbg.label(metadata !13845), !dbg !13846
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13847
  call void @nand_release_device(%struct.nand_chip* %15) #8, !dbg !13848
  %16 = load i32, i32* %ret, align 4, !dbg !13849
  store i32 %16, i32* %retval, align 4, !dbg !13850
  br label %return, !dbg !13850

return:                                           ; preds = %out, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !13851
  ret i32 %17, !dbg !13851
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_sync(%struct.mtd_info* %mtd) #0 !dbg !13852 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %chip = alloca %struct.nand_chip*, align 8
  %tmp = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp15 = alloca i64, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13853, metadata !DIExpression()), !dbg !13854
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !13855, metadata !DIExpression()), !dbg !13856
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13857
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !13858
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !13856
  store i32 0, i32* %tmp, align 4, !dbg !13859
  %1 = load i32, i32* %tmp, align 4, !dbg !13862
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !13863, metadata !DIExpression()), !dbg !13865
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13865
  %call1 = call i32 @nand_get_device(%struct.nand_chip* %2) #8, !dbg !13865
  %tobool = icmp ne i32 %call1, 0, !dbg !13865
  %lnot = xor i1 %tobool, true, !dbg !13865
  %lnot2 = xor i1 %lnot, true, !dbg !13865
  %lnot.ext = zext i1 %lnot2 to i32, !dbg !13865
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !13865
  %3 = load i32, i32* %__ret_warn_on, align 4, !dbg !13866
  %tobool3 = icmp ne i32 %3, 0, !dbg !13866
  %lnot4 = xor i1 %tobool3, true, !dbg !13866
  %lnot6 = xor i1 %lnot4, true, !dbg !13866
  %lnot.ext7 = zext i1 %lnot6 to i32, !dbg !13866
  %conv = sext i32 %lnot.ext7 to i64, !dbg !13866
  %tobool8 = icmp ne i64 %conv, 0, !dbg !13866
  br i1 %tobool8, label %if.then, label %if.end, !dbg !13865

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !13866

do.body:                                          ; preds = %if.then
  br label %do.body9, !dbg !13868

do.body9:                                         ; preds = %do.body
  br label %do.end, !dbg !13870

do.end:                                           ; preds = %do.body9
  br label %do.body10, !dbg !13868

do.body10:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 4273, i32 2305, i64 12) #9, !dbg !13872, !srcloc !13874
  br label %do.end11, !dbg !13872

do.end11:                                         ; preds = %do.body10
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 287) #9, !dbg !13875, !srcloc !13877
  br label %do.body12, !dbg !13868

do.body12:                                        ; preds = %do.end11
  br label %do.end13, !dbg !13878

do.end13:                                         ; preds = %do.body12
  br label %do.end14, !dbg !13868

do.end14:                                         ; preds = %do.end13
  br label %if.end, !dbg !13868

if.end:                                           ; preds = %do.end14, %entry
  %4 = load i32, i32* %__ret_warn_on, align 4, !dbg !13865
  %tobool16 = icmp ne i32 %4, 0, !dbg !13865
  %lnot17 = xor i1 %tobool16, true, !dbg !13865
  %lnot19 = xor i1 %lnot17, true, !dbg !13865
  %lnot.ext20 = zext i1 %lnot19 to i32, !dbg !13865
  %conv21 = sext i32 %lnot.ext20 to i64, !dbg !13865
  store i64 %conv21, i64* %tmp15, align 8, !dbg !13866
  %5 = load i64, i64* %tmp15, align 8, !dbg !13865
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13880
  call void @nand_release_device(%struct.nand_chip* %6) #8, !dbg !13881
  ret void, !dbg !13882
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_lock(%struct.mtd_info* %mtd, i64 %ofs, i64 %len) #0 !dbg !13883 {
entry:
  %retval = alloca i32, align 4
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %ofs.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %chip = alloca %struct.nand_chip*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13884, metadata !DIExpression()), !dbg !13885
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !13886, metadata !DIExpression()), !dbg !13887
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !13888, metadata !DIExpression()), !dbg !13889
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !13890, metadata !DIExpression()), !dbg !13891
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13892
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !13893
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !13891
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13894
  %ops = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 4, !dbg !13896
  %lock_area = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops, i32 0, i32 2, !dbg !13897
  %2 = load i32 (%struct.nand_chip*, i64, i64)*, i32 (%struct.nand_chip*, i64, i64)** %lock_area, align 8, !dbg !13897
  %tobool = icmp ne i32 (%struct.nand_chip*, i64, i64)* %2, null, !dbg !13894
  br i1 %tobool, label %if.end, label %if.then, !dbg !13898

if.then:                                          ; preds = %entry
  store i32 -524, i32* %retval, align 4, !dbg !13899
  br label %return, !dbg !13899

if.end:                                           ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13900
  %ops1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 4, !dbg !13901
  %lock_area2 = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops1, i32 0, i32 2, !dbg !13902
  %4 = load i32 (%struct.nand_chip*, i64, i64)*, i32 (%struct.nand_chip*, i64, i64)** %lock_area2, align 8, !dbg !13902
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13903
  %6 = load i64, i64* %ofs.addr, align 8, !dbg !13904
  %7 = load i64, i64* %len.addr, align 8, !dbg !13905
  %call3 = call i32 %4(%struct.nand_chip* %5, i64 %6, i64 %7) #8, !dbg !13900
  store i32 %call3, i32* %retval, align 4, !dbg !13906
  br label %return, !dbg !13906

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !13907
  ret i32 %8, !dbg !13907
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_unlock(%struct.mtd_info* %mtd, i64 %ofs, i64 %len) #0 !dbg !13908 {
entry:
  %retval = alloca i32, align 4
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %ofs.addr = alloca i64, align 8
  %len.addr = alloca i64, align 8
  %chip = alloca %struct.nand_chip*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13909, metadata !DIExpression()), !dbg !13910
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !13911, metadata !DIExpression()), !dbg !13912
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !13913, metadata !DIExpression()), !dbg !13914
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !13915, metadata !DIExpression()), !dbg !13916
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13917
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !13918
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !13916
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13919
  %ops = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 4, !dbg !13921
  %unlock_area = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops, i32 0, i32 3, !dbg !13922
  %2 = load i32 (%struct.nand_chip*, i64, i64)*, i32 (%struct.nand_chip*, i64, i64)** %unlock_area, align 8, !dbg !13922
  %tobool = icmp ne i32 (%struct.nand_chip*, i64, i64)* %2, null, !dbg !13919
  br i1 %tobool, label %if.end, label %if.then, !dbg !13923

if.then:                                          ; preds = %entry
  store i32 -524, i32* %retval, align 4, !dbg !13924
  br label %return, !dbg !13924

if.end:                                           ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13925
  %ops1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 4, !dbg !13926
  %unlock_area2 = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops1, i32 0, i32 3, !dbg !13927
  %4 = load i32 (%struct.nand_chip*, i64, i64)*, i32 (%struct.nand_chip*, i64, i64)** %unlock_area2, align 8, !dbg !13927
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13928
  %6 = load i64, i64* %ofs.addr, align 8, !dbg !13929
  %7 = load i64, i64* %len.addr, align 8, !dbg !13930
  %call3 = call i32 %4(%struct.nand_chip* %5, i64 %6, i64 %7) #8, !dbg !13925
  store i32 %call3, i32* %retval, align 4, !dbg !13931
  br label %return, !dbg !13931

return:                                           ; preds = %if.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !13932
  ret i32 %8, !dbg !13932
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_suspend(%struct.mtd_info* %mtd) #0 !dbg !13933 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %chip = alloca %struct.nand_chip*, align 8
  %ret = alloca i32, align 4
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13934, metadata !DIExpression()), !dbg !13935
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !13936, metadata !DIExpression()), !dbg !13937
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13938
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !13939
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !13937
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !13940, metadata !DIExpression()), !dbg !13941
  store i32 0, i32* %ret, align 4, !dbg !13941
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13942
  %lock = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 26, !dbg !13943
  call void @mutex_lock(%struct.mutex* %lock) #8, !dbg !13944
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13945
  %ops = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 4, !dbg !13947
  %suspend = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops, i32 0, i32 0, !dbg !13948
  %3 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %suspend, align 8, !dbg !13948
  %tobool = icmp ne i32 (%struct.nand_chip*)* %3, null, !dbg !13945
  br i1 %tobool, label %if.then, label %if.end, !dbg !13949

if.then:                                          ; preds = %entry
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13950
  %ops1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 4, !dbg !13951
  %suspend2 = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops1, i32 0, i32 0, !dbg !13952
  %5 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %suspend2, align 8, !dbg !13952
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13953
  %call3 = call i32 %5(%struct.nand_chip* %6) #8, !dbg !13950
  store i32 %call3, i32* %ret, align 4, !dbg !13954
  br label %if.end, !dbg !13955

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %ret, align 4, !dbg !13956
  %tobool4 = icmp ne i32 %7, 0, !dbg !13956
  br i1 %tobool4, label %if.end6, label %if.then5, !dbg !13958

if.then5:                                         ; preds = %if.end
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13959
  %suspended = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %8, i32 0, i32 27, !dbg !13960
  %bf.load = load i8, i8* %suspended, align 8, !dbg !13961
  %bf.clear = and i8 %bf.load, -2, !dbg !13961
  %bf.set = or i8 %bf.clear, 1, !dbg !13961
  store i8 %bf.set, i8* %suspended, align 8, !dbg !13961
  br label %if.end6, !dbg !13959

if.end6:                                          ; preds = %if.then5, %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13962
  %lock7 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 26, !dbg !13963
  call void @mutex_unlock(%struct.mutex* %lock7) #8, !dbg !13964
  %10 = load i32, i32* %ret, align 4, !dbg !13965
  ret i32 %10, !dbg !13966
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_resume(%struct.mtd_info* %mtd) #0 !dbg !13967 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %chip = alloca %struct.nand_chip*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !13968, metadata !DIExpression()), !dbg !13969
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !13970, metadata !DIExpression()), !dbg !13971
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !13972
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !13973
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !13971
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13974
  %lock = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 26, !dbg !13975
  call void @mutex_lock(%struct.mutex* %lock) #8, !dbg !13976
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13977
  %suspended = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 27, !dbg !13979
  %bf.load = load i8, i8* %suspended, align 8, !dbg !13979
  %bf.clear = and i8 %bf.load, 1, !dbg !13979
  %bf.cast = zext i8 %bf.clear to i32, !dbg !13979
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !13977
  br i1 %tobool, label %if.then, label %if.else, !dbg !13980

if.then:                                          ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13981
  %ops = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 4, !dbg !13984
  %resume = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops, i32 0, i32 1, !dbg !13985
  %4 = load void (%struct.nand_chip*)*, void (%struct.nand_chip*)** %resume, align 8, !dbg !13985
  %tobool1 = icmp ne void (%struct.nand_chip*)* %4, null, !dbg !13981
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !13986

if.then2:                                         ; preds = %if.then
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13987
  %ops3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 4, !dbg !13988
  %resume4 = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops3, i32 0, i32 1, !dbg !13989
  %6 = load void (%struct.nand_chip*)*, void (%struct.nand_chip*)** %resume4, align 8, !dbg !13989
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13990
  call void %6(%struct.nand_chip* %7) #8, !dbg !13987
  br label %if.end, !dbg !13987

if.end:                                           ; preds = %if.then2, %if.then
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13991
  %suspended5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %8, i32 0, i32 27, !dbg !13992
  %bf.load6 = load i8, i8* %suspended5, align 8, !dbg !13993
  %bf.clear7 = and i8 %bf.load6, -2, !dbg !13993
  store i8 %bf.clear7, i8* %suspended5, align 8, !dbg !13993
  br label %if.end9, !dbg !13994

if.else:                                          ; preds = %entry
  %call8 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @__func__.nand_resume, i64 0, i64 0)) #12, !dbg !13995
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.end
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !13997
  %lock10 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 26, !dbg !13998
  call void @mutex_unlock(%struct.mutex* %lock10) #8, !dbg !13999
  ret void, !dbg !14000
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_shutdown(%struct.mtd_info* %mtd) #0 !dbg !14001 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !14002, metadata !DIExpression()), !dbg !14003
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !14004
  %call = call i32 @nand_suspend(%struct.mtd_info* %0) #8, !dbg !14005
  ret void, !dbg !14006
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_block_isreserved(%struct.mtd_info* %mtd, i64 %ofs) #0 !dbg !14007 {
entry:
  %retval = alloca i32, align 4
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %ofs.addr = alloca i64, align 8
  %chip = alloca %struct.nand_chip*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !14008, metadata !DIExpression()), !dbg !14009
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !14010, metadata !DIExpression()), !dbg !14011
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !14012, metadata !DIExpression()), !dbg !14013
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !14014
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !14015
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !14013
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !14016
  %bbt = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 16, !dbg !14018
  %2 = load i8*, i8** %bbt, align 8, !dbg !14018
  %tobool = icmp ne i8* %2, null, !dbg !14016
  br i1 %tobool, label %if.end, label %if.then, !dbg !14019

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !14020
  br label %return, !dbg !14020

if.end:                                           ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !14021
  %4 = load i64, i64* %ofs.addr, align 8, !dbg !14022
  %call1 = call i32 @nand_isreserved_bbt(%struct.nand_chip* %3, i64 %4) #8, !dbg !14023
  store i32 %call1, i32* %retval, align 4, !dbg !14024
  br label %return, !dbg !14024

return:                                           ; preds = %if.end, %if.then
  %5 = load i32, i32* %retval, align 4, !dbg !14025
  ret i32 %5, !dbg !14025
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_block_isbad(%struct.mtd_info* %mtd, i64 %offs) #0 !dbg !14026 {
entry:
  %retval = alloca i32, align 4
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %offs.addr = alloca i64, align 8
  %chip = alloca %struct.nand_chip*, align 8
  %chipnr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !14027, metadata !DIExpression()), !dbg !14028
  store i64 %offs, i64* %offs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %offs.addr, metadata !14029, metadata !DIExpression()), !dbg !14030
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !14031, metadata !DIExpression()), !dbg !14032
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !14033
  %call = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %0) #8, !dbg !14034
  store %struct.nand_chip* %call, %struct.nand_chip** %chip, align 8, !dbg !14032
  call void @llvm.dbg.declare(metadata i32* %chipnr, metadata !14035, metadata !DIExpression()), !dbg !14036
  %1 = load i64, i64* %offs.addr, align 8, !dbg !14037
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !14038
  %chip_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 19, !dbg !14039
  %3 = load i32, i32* %chip_shift, align 8, !dbg !14039
  %sh_prom = zext i32 %3 to i64, !dbg !14040
  %shr = ashr i64 %1, %sh_prom, !dbg !14040
  %conv = trunc i64 %shr to i32, !dbg !14041
  store i32 %conv, i32* %chipnr, align 4, !dbg !14036
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !14042, metadata !DIExpression()), !dbg !14043
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !14044
  %call1 = call i32 @nand_get_device(%struct.nand_chip* %4) #8, !dbg !14045
  store i32 %call1, i32* %ret, align 4, !dbg !14046
  %5 = load i32, i32* %ret, align 4, !dbg !14047
  %tobool = icmp ne i32 %5, 0, !dbg !14047
  br i1 %tobool, label %if.then, label %if.end, !dbg !14049

if.then:                                          ; preds = %entry
  %6 = load i32, i32* %ret, align 4, !dbg !14050
  store i32 %6, i32* %retval, align 4, !dbg !14051
  br label %return, !dbg !14051

if.end:                                           ; preds = %entry
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !14052
  %8 = load i32, i32* %chipnr, align 4, !dbg !14053
  call void @nand_select_target(%struct.nand_chip* %7, i32 %8) #8, !dbg !14054
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !14055
  %10 = load i64, i64* %offs.addr, align 8, !dbg !14056
  %call2 = call i32 @nand_block_checkbad(%struct.nand_chip* %9, i64 %10, i32 0) #8, !dbg !14057
  store i32 %call2, i32* %ret, align 4, !dbg !14058
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !14059
  call void @nand_deselect_target(%struct.nand_chip* %11) #8, !dbg !14060
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !14061
  call void @nand_release_device(%struct.nand_chip* %12) #8, !dbg !14062
  %13 = load i32, i32* %ret, align 4, !dbg !14063
  store i32 %13, i32* %retval, align 4, !dbg !14064
  br label %return, !dbg !14064

return:                                           ; preds = %if.end, %if.then
  %14 = load i32, i32* %retval, align 4, !dbg !14065
  ret i32 %14, !dbg !14065
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_block_markbad(%struct.mtd_info* %mtd, i64 %ofs) #0 !dbg !14066 {
entry:
  %retval = alloca i32, align 4
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %ofs.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !14067, metadata !DIExpression()), !dbg !14068
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !14069, metadata !DIExpression()), !dbg !14070
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !14071, metadata !DIExpression()), !dbg !14072
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !14073
  %1 = load i64, i64* %ofs.addr, align 8, !dbg !14074
  %call = call i32 @nand_block_isbad(%struct.mtd_info* %0, i64 %1) #8, !dbg !14075
  store i32 %call, i32* %ret, align 4, !dbg !14076
  %2 = load i32, i32* %ret, align 4, !dbg !14077
  %tobool = icmp ne i32 %2, 0, !dbg !14077
  br i1 %tobool, label %if.then, label %if.end2, !dbg !14079

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %ret, align 4, !dbg !14080
  %cmp = icmp sgt i32 %3, 0, !dbg !14083
  br i1 %cmp, label %if.then1, label %if.end, !dbg !14084

if.then1:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !14085
  br label %return, !dbg !14085

if.end:                                           ; preds = %if.then
  %4 = load i32, i32* %ret, align 4, !dbg !14086
  store i32 %4, i32* %retval, align 4, !dbg !14087
  br label %return, !dbg !14087

if.end2:                                          ; preds = %entry
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !14088
  %call3 = call %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %5) #8, !dbg !14089
  %6 = load i64, i64* %ofs.addr, align 8, !dbg !14090
  %call4 = call i32 @nand_block_markbad_lowlevel(%struct.nand_chip* %call3, i64 %6) #8, !dbg !14091
  store i32 %call4, i32* %retval, align 4, !dbg !14092
  br label %return, !dbg !14092

return:                                           ; preds = %if.end2, %if.end, %if.then1
  %7 = load i32, i32* %retval, align 4, !dbg !14093
  ret i32 %7, !dbg !14093
}

; Function Attrs: noredzone
declare dso_local i32 @nanddev_mtd_max_bad_blocks(%struct.mtd_info*, i64, i64) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_choose_interface_config(%struct.nand_chip* %chip) #0 !dbg !14094 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %iface = alloca %struct.nand_interface_config*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !14095, metadata !DIExpression()), !dbg !14096
  call void @llvm.dbg.declare(metadata %struct.nand_interface_config** %iface, metadata !14097, metadata !DIExpression()), !dbg !14098
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !14099, metadata !DIExpression()), !dbg !14100
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14101
  %call = call zeroext i1 @nand_controller_can_setup_interface(%struct.nand_chip* %0) #8, !dbg !14103
  br i1 %call, label %if.end, label %if.then, !dbg !14104

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !14105
  br label %return, !dbg !14105

if.end:                                           ; preds = %entry
  %call1 = call i8* @kzalloc(i64 192, i32 3264) #8, !dbg !14106
  %1 = bitcast i8* %call1 to %struct.nand_interface_config*, !dbg !14106
  store %struct.nand_interface_config* %1, %struct.nand_interface_config** %iface, align 8, !dbg !14107
  %2 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface, align 8, !dbg !14108
  %tobool = icmp ne %struct.nand_interface_config* %2, null, !dbg !14108
  br i1 %tobool, label %if.end3, label %if.then2, !dbg !14110

if.then2:                                         ; preds = %if.end
  store i32 -12, i32* %retval, align 4, !dbg !14111
  br label %return, !dbg !14111

if.end3:                                          ; preds = %if.end
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14112
  %ops = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 4, !dbg !14114
  %choose_interface_config = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops, i32 0, i32 5, !dbg !14115
  %4 = load i32 (%struct.nand_chip*, %struct.nand_interface_config*)*, i32 (%struct.nand_chip*, %struct.nand_interface_config*)** %choose_interface_config, align 8, !dbg !14115
  %tobool4 = icmp ne i32 (%struct.nand_chip*, %struct.nand_interface_config*)* %4, null, !dbg !14112
  br i1 %tobool4, label %if.then5, label %if.else, !dbg !14116

if.then5:                                         ; preds = %if.end3
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14117
  %ops6 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 4, !dbg !14118
  %choose_interface_config7 = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops6, i32 0, i32 5, !dbg !14119
  %6 = load i32 (%struct.nand_chip*, %struct.nand_interface_config*)*, i32 (%struct.nand_chip*, %struct.nand_interface_config*)** %choose_interface_config7, align 8, !dbg !14119
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14120
  %8 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface, align 8, !dbg !14121
  %call8 = call i32 %6(%struct.nand_chip* %7, %struct.nand_interface_config* %8) #8, !dbg !14117
  store i32 %call8, i32* %ret, align 4, !dbg !14122
  br label %if.end10, !dbg !14123

if.else:                                          ; preds = %if.end3
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14124
  %10 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface, align 8, !dbg !14125
  %call9 = call i32 @nand_choose_best_sdr_timings(%struct.nand_chip* %9, %struct.nand_interface_config* %10, %struct.nand_sdr_timings* null) #8, !dbg !14126
  store i32 %call9, i32* %ret, align 4, !dbg !14127
  br label %if.end10

if.end10:                                         ; preds = %if.else, %if.then5
  %11 = load i32, i32* %ret, align 4, !dbg !14128
  %tobool11 = icmp ne i32 %11, 0, !dbg !14128
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !14130

if.then12:                                        ; preds = %if.end10
  %12 = load %struct.nand_interface_config*, %struct.nand_interface_config** %iface, align 8, !dbg !14131
  %13 = bitcast %struct.nand_interface_config* %12 to i8*, !dbg !14131
  call void @kfree(i8* %13) #8, !dbg !14132
  br label %if.end13, !dbg !14132

if.end13:                                         ; preds = %if.then12, %if.end10
  %14 = load i32, i32* %ret, align 4, !dbg !14133
  store i32 %14, i32* %retval, align 4, !dbg !14134
  br label %return, !dbg !14134

return:                                           ; preds = %if.end13, %if.then2, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !14135
  ret i32 %15, !dbg !14135
}

; Function Attrs: noredzone
declare dso_local i32 @nand_create_bbt(%struct.nand_chip*) #2

; Function Attrs: noredzone
declare dso_local noalias i8* @__kmalloc(i64, i32) #2

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #6

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal i32 @get_order(i64 %size) #7 !dbg !14136 {
entry:
  %x.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr.i, metadata !14140, metadata !DIExpression()), !dbg !14144
  %bitpos.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %bitpos.i, metadata !14146, metadata !DIExpression()), !dbg !14147
  %retval = alloca i32, align 4
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !14148, metadata !DIExpression()), !dbg !14149
  %0 = load i64, i64* %size.addr, align 8, !dbg !14150
  %1 = call i1 @llvm.is.constant.i64(i64 %0), !dbg !14152
  br i1 %1, label %if.then, label %if.end447, !dbg !14153

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %size.addr, align 8, !dbg !14154
  %tobool = icmp ne i64 %2, 0, !dbg !14154
  br i1 %tobool, label %if.end, label %if.then1, !dbg !14157

if.then1:                                         ; preds = %if.then
  store i32 52, i32* %retval, align 4, !dbg !14158
  br label %return, !dbg !14158

if.end:                                           ; preds = %if.then
  %3 = load i64, i64* %size.addr, align 8, !dbg !14159
  %cmp = icmp ult i64 %3, 4096, !dbg !14161
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !14162

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !14163
  br label %return, !dbg !14163

if.end3:                                          ; preds = %if.end
  %4 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub = sub i64 %4, 1, !dbg !14164
  %5 = call i1 @llvm.is.constant.i64(i64 %sub), !dbg !14164
  br i1 %5, label %cond.true, label %cond.false442, !dbg !14164

cond.true:                                        ; preds = %if.end3
  %6 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub4 = sub i64 %6, 1, !dbg !14164
  %7 = call i1 @llvm.is.constant.i64(i64 %sub4), !dbg !14164
  br i1 %7, label %cond.true5, label %cond.false439, !dbg !14164

cond.true5:                                       ; preds = %cond.true
  %8 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub6 = sub i64 %8, 1, !dbg !14164
  %cmp7 = icmp ult i64 %sub6, 2, !dbg !14164
  br i1 %cmp7, label %cond.true8, label %cond.false, !dbg !14164

cond.true8:                                       ; preds = %cond.true5
  br label %cond.end437, !dbg !14164

cond.false:                                       ; preds = %cond.true5
  %9 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub9 = sub i64 %9, 1, !dbg !14164
  %and = and i64 %sub9, -9223372036854775808, !dbg !14164
  %tobool10 = icmp ne i64 %and, 0, !dbg !14164
  br i1 %tobool10, label %cond.true11, label %cond.false12, !dbg !14164

cond.true11:                                      ; preds = %cond.false
  br label %cond.end435, !dbg !14164

cond.false12:                                     ; preds = %cond.false
  %10 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub13 = sub i64 %10, 1, !dbg !14164
  %and14 = and i64 %sub13, 4611686018427387904, !dbg !14164
  %tobool15 = icmp ne i64 %and14, 0, !dbg !14164
  br i1 %tobool15, label %cond.true16, label %cond.false17, !dbg !14164

cond.true16:                                      ; preds = %cond.false12
  br label %cond.end433, !dbg !14164

cond.false17:                                     ; preds = %cond.false12
  %11 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub18 = sub i64 %11, 1, !dbg !14164
  %and19 = and i64 %sub18, 2305843009213693952, !dbg !14164
  %tobool20 = icmp ne i64 %and19, 0, !dbg !14164
  br i1 %tobool20, label %cond.true21, label %cond.false22, !dbg !14164

cond.true21:                                      ; preds = %cond.false17
  br label %cond.end431, !dbg !14164

cond.false22:                                     ; preds = %cond.false17
  %12 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub23 = sub i64 %12, 1, !dbg !14164
  %and24 = and i64 %sub23, 1152921504606846976, !dbg !14164
  %tobool25 = icmp ne i64 %and24, 0, !dbg !14164
  br i1 %tobool25, label %cond.true26, label %cond.false27, !dbg !14164

cond.true26:                                      ; preds = %cond.false22
  br label %cond.end429, !dbg !14164

cond.false27:                                     ; preds = %cond.false22
  %13 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub28 = sub i64 %13, 1, !dbg !14164
  %and29 = and i64 %sub28, 576460752303423488, !dbg !14164
  %tobool30 = icmp ne i64 %and29, 0, !dbg !14164
  br i1 %tobool30, label %cond.true31, label %cond.false32, !dbg !14164

cond.true31:                                      ; preds = %cond.false27
  br label %cond.end427, !dbg !14164

cond.false32:                                     ; preds = %cond.false27
  %14 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub33 = sub i64 %14, 1, !dbg !14164
  %and34 = and i64 %sub33, 288230376151711744, !dbg !14164
  %tobool35 = icmp ne i64 %and34, 0, !dbg !14164
  br i1 %tobool35, label %cond.true36, label %cond.false37, !dbg !14164

cond.true36:                                      ; preds = %cond.false32
  br label %cond.end425, !dbg !14164

cond.false37:                                     ; preds = %cond.false32
  %15 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub38 = sub i64 %15, 1, !dbg !14164
  %and39 = and i64 %sub38, 144115188075855872, !dbg !14164
  %tobool40 = icmp ne i64 %and39, 0, !dbg !14164
  br i1 %tobool40, label %cond.true41, label %cond.false42, !dbg !14164

cond.true41:                                      ; preds = %cond.false37
  br label %cond.end423, !dbg !14164

cond.false42:                                     ; preds = %cond.false37
  %16 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub43 = sub i64 %16, 1, !dbg !14164
  %and44 = and i64 %sub43, 72057594037927936, !dbg !14164
  %tobool45 = icmp ne i64 %and44, 0, !dbg !14164
  br i1 %tobool45, label %cond.true46, label %cond.false47, !dbg !14164

cond.true46:                                      ; preds = %cond.false42
  br label %cond.end421, !dbg !14164

cond.false47:                                     ; preds = %cond.false42
  %17 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub48 = sub i64 %17, 1, !dbg !14164
  %and49 = and i64 %sub48, 36028797018963968, !dbg !14164
  %tobool50 = icmp ne i64 %and49, 0, !dbg !14164
  br i1 %tobool50, label %cond.true51, label %cond.false52, !dbg !14164

cond.true51:                                      ; preds = %cond.false47
  br label %cond.end419, !dbg !14164

cond.false52:                                     ; preds = %cond.false47
  %18 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub53 = sub i64 %18, 1, !dbg !14164
  %and54 = and i64 %sub53, 18014398509481984, !dbg !14164
  %tobool55 = icmp ne i64 %and54, 0, !dbg !14164
  br i1 %tobool55, label %cond.true56, label %cond.false57, !dbg !14164

cond.true56:                                      ; preds = %cond.false52
  br label %cond.end417, !dbg !14164

cond.false57:                                     ; preds = %cond.false52
  %19 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub58 = sub i64 %19, 1, !dbg !14164
  %and59 = and i64 %sub58, 9007199254740992, !dbg !14164
  %tobool60 = icmp ne i64 %and59, 0, !dbg !14164
  br i1 %tobool60, label %cond.true61, label %cond.false62, !dbg !14164

cond.true61:                                      ; preds = %cond.false57
  br label %cond.end415, !dbg !14164

cond.false62:                                     ; preds = %cond.false57
  %20 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub63 = sub i64 %20, 1, !dbg !14164
  %and64 = and i64 %sub63, 4503599627370496, !dbg !14164
  %tobool65 = icmp ne i64 %and64, 0, !dbg !14164
  br i1 %tobool65, label %cond.true66, label %cond.false67, !dbg !14164

cond.true66:                                      ; preds = %cond.false62
  br label %cond.end413, !dbg !14164

cond.false67:                                     ; preds = %cond.false62
  %21 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub68 = sub i64 %21, 1, !dbg !14164
  %and69 = and i64 %sub68, 2251799813685248, !dbg !14164
  %tobool70 = icmp ne i64 %and69, 0, !dbg !14164
  br i1 %tobool70, label %cond.true71, label %cond.false72, !dbg !14164

cond.true71:                                      ; preds = %cond.false67
  br label %cond.end411, !dbg !14164

cond.false72:                                     ; preds = %cond.false67
  %22 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub73 = sub i64 %22, 1, !dbg !14164
  %and74 = and i64 %sub73, 1125899906842624, !dbg !14164
  %tobool75 = icmp ne i64 %and74, 0, !dbg !14164
  br i1 %tobool75, label %cond.true76, label %cond.false77, !dbg !14164

cond.true76:                                      ; preds = %cond.false72
  br label %cond.end409, !dbg !14164

cond.false77:                                     ; preds = %cond.false72
  %23 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub78 = sub i64 %23, 1, !dbg !14164
  %and79 = and i64 %sub78, 562949953421312, !dbg !14164
  %tobool80 = icmp ne i64 %and79, 0, !dbg !14164
  br i1 %tobool80, label %cond.true81, label %cond.false82, !dbg !14164

cond.true81:                                      ; preds = %cond.false77
  br label %cond.end407, !dbg !14164

cond.false82:                                     ; preds = %cond.false77
  %24 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub83 = sub i64 %24, 1, !dbg !14164
  %and84 = and i64 %sub83, 281474976710656, !dbg !14164
  %tobool85 = icmp ne i64 %and84, 0, !dbg !14164
  br i1 %tobool85, label %cond.true86, label %cond.false87, !dbg !14164

cond.true86:                                      ; preds = %cond.false82
  br label %cond.end405, !dbg !14164

cond.false87:                                     ; preds = %cond.false82
  %25 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub88 = sub i64 %25, 1, !dbg !14164
  %and89 = and i64 %sub88, 140737488355328, !dbg !14164
  %tobool90 = icmp ne i64 %and89, 0, !dbg !14164
  br i1 %tobool90, label %cond.true91, label %cond.false92, !dbg !14164

cond.true91:                                      ; preds = %cond.false87
  br label %cond.end403, !dbg !14164

cond.false92:                                     ; preds = %cond.false87
  %26 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub93 = sub i64 %26, 1, !dbg !14164
  %and94 = and i64 %sub93, 70368744177664, !dbg !14164
  %tobool95 = icmp ne i64 %and94, 0, !dbg !14164
  br i1 %tobool95, label %cond.true96, label %cond.false97, !dbg !14164

cond.true96:                                      ; preds = %cond.false92
  br label %cond.end401, !dbg !14164

cond.false97:                                     ; preds = %cond.false92
  %27 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub98 = sub i64 %27, 1, !dbg !14164
  %and99 = and i64 %sub98, 35184372088832, !dbg !14164
  %tobool100 = icmp ne i64 %and99, 0, !dbg !14164
  br i1 %tobool100, label %cond.true101, label %cond.false102, !dbg !14164

cond.true101:                                     ; preds = %cond.false97
  br label %cond.end399, !dbg !14164

cond.false102:                                    ; preds = %cond.false97
  %28 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub103 = sub i64 %28, 1, !dbg !14164
  %and104 = and i64 %sub103, 17592186044416, !dbg !14164
  %tobool105 = icmp ne i64 %and104, 0, !dbg !14164
  br i1 %tobool105, label %cond.true106, label %cond.false107, !dbg !14164

cond.true106:                                     ; preds = %cond.false102
  br label %cond.end397, !dbg !14164

cond.false107:                                    ; preds = %cond.false102
  %29 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub108 = sub i64 %29, 1, !dbg !14164
  %and109 = and i64 %sub108, 8796093022208, !dbg !14164
  %tobool110 = icmp ne i64 %and109, 0, !dbg !14164
  br i1 %tobool110, label %cond.true111, label %cond.false112, !dbg !14164

cond.true111:                                     ; preds = %cond.false107
  br label %cond.end395, !dbg !14164

cond.false112:                                    ; preds = %cond.false107
  %30 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub113 = sub i64 %30, 1, !dbg !14164
  %and114 = and i64 %sub113, 4398046511104, !dbg !14164
  %tobool115 = icmp ne i64 %and114, 0, !dbg !14164
  br i1 %tobool115, label %cond.true116, label %cond.false117, !dbg !14164

cond.true116:                                     ; preds = %cond.false112
  br label %cond.end393, !dbg !14164

cond.false117:                                    ; preds = %cond.false112
  %31 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub118 = sub i64 %31, 1, !dbg !14164
  %and119 = and i64 %sub118, 2199023255552, !dbg !14164
  %tobool120 = icmp ne i64 %and119, 0, !dbg !14164
  br i1 %tobool120, label %cond.true121, label %cond.false122, !dbg !14164

cond.true121:                                     ; preds = %cond.false117
  br label %cond.end391, !dbg !14164

cond.false122:                                    ; preds = %cond.false117
  %32 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub123 = sub i64 %32, 1, !dbg !14164
  %and124 = and i64 %sub123, 1099511627776, !dbg !14164
  %tobool125 = icmp ne i64 %and124, 0, !dbg !14164
  br i1 %tobool125, label %cond.true126, label %cond.false127, !dbg !14164

cond.true126:                                     ; preds = %cond.false122
  br label %cond.end389, !dbg !14164

cond.false127:                                    ; preds = %cond.false122
  %33 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub128 = sub i64 %33, 1, !dbg !14164
  %and129 = and i64 %sub128, 549755813888, !dbg !14164
  %tobool130 = icmp ne i64 %and129, 0, !dbg !14164
  br i1 %tobool130, label %cond.true131, label %cond.false132, !dbg !14164

cond.true131:                                     ; preds = %cond.false127
  br label %cond.end387, !dbg !14164

cond.false132:                                    ; preds = %cond.false127
  %34 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub133 = sub i64 %34, 1, !dbg !14164
  %and134 = and i64 %sub133, 274877906944, !dbg !14164
  %tobool135 = icmp ne i64 %and134, 0, !dbg !14164
  br i1 %tobool135, label %cond.true136, label %cond.false137, !dbg !14164

cond.true136:                                     ; preds = %cond.false132
  br label %cond.end385, !dbg !14164

cond.false137:                                    ; preds = %cond.false132
  %35 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub138 = sub i64 %35, 1, !dbg !14164
  %and139 = and i64 %sub138, 137438953472, !dbg !14164
  %tobool140 = icmp ne i64 %and139, 0, !dbg !14164
  br i1 %tobool140, label %cond.true141, label %cond.false142, !dbg !14164

cond.true141:                                     ; preds = %cond.false137
  br label %cond.end383, !dbg !14164

cond.false142:                                    ; preds = %cond.false137
  %36 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub143 = sub i64 %36, 1, !dbg !14164
  %and144 = and i64 %sub143, 68719476736, !dbg !14164
  %tobool145 = icmp ne i64 %and144, 0, !dbg !14164
  br i1 %tobool145, label %cond.true146, label %cond.false147, !dbg !14164

cond.true146:                                     ; preds = %cond.false142
  br label %cond.end381, !dbg !14164

cond.false147:                                    ; preds = %cond.false142
  %37 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub148 = sub i64 %37, 1, !dbg !14164
  %and149 = and i64 %sub148, 34359738368, !dbg !14164
  %tobool150 = icmp ne i64 %and149, 0, !dbg !14164
  br i1 %tobool150, label %cond.true151, label %cond.false152, !dbg !14164

cond.true151:                                     ; preds = %cond.false147
  br label %cond.end379, !dbg !14164

cond.false152:                                    ; preds = %cond.false147
  %38 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub153 = sub i64 %38, 1, !dbg !14164
  %and154 = and i64 %sub153, 17179869184, !dbg !14164
  %tobool155 = icmp ne i64 %and154, 0, !dbg !14164
  br i1 %tobool155, label %cond.true156, label %cond.false157, !dbg !14164

cond.true156:                                     ; preds = %cond.false152
  br label %cond.end377, !dbg !14164

cond.false157:                                    ; preds = %cond.false152
  %39 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub158 = sub i64 %39, 1, !dbg !14164
  %and159 = and i64 %sub158, 8589934592, !dbg !14164
  %tobool160 = icmp ne i64 %and159, 0, !dbg !14164
  br i1 %tobool160, label %cond.true161, label %cond.false162, !dbg !14164

cond.true161:                                     ; preds = %cond.false157
  br label %cond.end375, !dbg !14164

cond.false162:                                    ; preds = %cond.false157
  %40 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub163 = sub i64 %40, 1, !dbg !14164
  %and164 = and i64 %sub163, 4294967296, !dbg !14164
  %tobool165 = icmp ne i64 %and164, 0, !dbg !14164
  br i1 %tobool165, label %cond.true166, label %cond.false167, !dbg !14164

cond.true166:                                     ; preds = %cond.false162
  br label %cond.end373, !dbg !14164

cond.false167:                                    ; preds = %cond.false162
  %41 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub168 = sub i64 %41, 1, !dbg !14164
  %and169 = and i64 %sub168, 2147483648, !dbg !14164
  %tobool170 = icmp ne i64 %and169, 0, !dbg !14164
  br i1 %tobool170, label %cond.true171, label %cond.false172, !dbg !14164

cond.true171:                                     ; preds = %cond.false167
  br label %cond.end371, !dbg !14164

cond.false172:                                    ; preds = %cond.false167
  %42 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub173 = sub i64 %42, 1, !dbg !14164
  %and174 = and i64 %sub173, 1073741824, !dbg !14164
  %tobool175 = icmp ne i64 %and174, 0, !dbg !14164
  br i1 %tobool175, label %cond.true176, label %cond.false177, !dbg !14164

cond.true176:                                     ; preds = %cond.false172
  br label %cond.end369, !dbg !14164

cond.false177:                                    ; preds = %cond.false172
  %43 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub178 = sub i64 %43, 1, !dbg !14164
  %and179 = and i64 %sub178, 536870912, !dbg !14164
  %tobool180 = icmp ne i64 %and179, 0, !dbg !14164
  br i1 %tobool180, label %cond.true181, label %cond.false182, !dbg !14164

cond.true181:                                     ; preds = %cond.false177
  br label %cond.end367, !dbg !14164

cond.false182:                                    ; preds = %cond.false177
  %44 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub183 = sub i64 %44, 1, !dbg !14164
  %and184 = and i64 %sub183, 268435456, !dbg !14164
  %tobool185 = icmp ne i64 %and184, 0, !dbg !14164
  br i1 %tobool185, label %cond.true186, label %cond.false187, !dbg !14164

cond.true186:                                     ; preds = %cond.false182
  br label %cond.end365, !dbg !14164

cond.false187:                                    ; preds = %cond.false182
  %45 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub188 = sub i64 %45, 1, !dbg !14164
  %and189 = and i64 %sub188, 134217728, !dbg !14164
  %tobool190 = icmp ne i64 %and189, 0, !dbg !14164
  br i1 %tobool190, label %cond.true191, label %cond.false192, !dbg !14164

cond.true191:                                     ; preds = %cond.false187
  br label %cond.end363, !dbg !14164

cond.false192:                                    ; preds = %cond.false187
  %46 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub193 = sub i64 %46, 1, !dbg !14164
  %and194 = and i64 %sub193, 67108864, !dbg !14164
  %tobool195 = icmp ne i64 %and194, 0, !dbg !14164
  br i1 %tobool195, label %cond.true196, label %cond.false197, !dbg !14164

cond.true196:                                     ; preds = %cond.false192
  br label %cond.end361, !dbg !14164

cond.false197:                                    ; preds = %cond.false192
  %47 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub198 = sub i64 %47, 1, !dbg !14164
  %and199 = and i64 %sub198, 33554432, !dbg !14164
  %tobool200 = icmp ne i64 %and199, 0, !dbg !14164
  br i1 %tobool200, label %cond.true201, label %cond.false202, !dbg !14164

cond.true201:                                     ; preds = %cond.false197
  br label %cond.end359, !dbg !14164

cond.false202:                                    ; preds = %cond.false197
  %48 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub203 = sub i64 %48, 1, !dbg !14164
  %and204 = and i64 %sub203, 16777216, !dbg !14164
  %tobool205 = icmp ne i64 %and204, 0, !dbg !14164
  br i1 %tobool205, label %cond.true206, label %cond.false207, !dbg !14164

cond.true206:                                     ; preds = %cond.false202
  br label %cond.end357, !dbg !14164

cond.false207:                                    ; preds = %cond.false202
  %49 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub208 = sub i64 %49, 1, !dbg !14164
  %and209 = and i64 %sub208, 8388608, !dbg !14164
  %tobool210 = icmp ne i64 %and209, 0, !dbg !14164
  br i1 %tobool210, label %cond.true211, label %cond.false212, !dbg !14164

cond.true211:                                     ; preds = %cond.false207
  br label %cond.end355, !dbg !14164

cond.false212:                                    ; preds = %cond.false207
  %50 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub213 = sub i64 %50, 1, !dbg !14164
  %and214 = and i64 %sub213, 4194304, !dbg !14164
  %tobool215 = icmp ne i64 %and214, 0, !dbg !14164
  br i1 %tobool215, label %cond.true216, label %cond.false217, !dbg !14164

cond.true216:                                     ; preds = %cond.false212
  br label %cond.end353, !dbg !14164

cond.false217:                                    ; preds = %cond.false212
  %51 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub218 = sub i64 %51, 1, !dbg !14164
  %and219 = and i64 %sub218, 2097152, !dbg !14164
  %tobool220 = icmp ne i64 %and219, 0, !dbg !14164
  br i1 %tobool220, label %cond.true221, label %cond.false222, !dbg !14164

cond.true221:                                     ; preds = %cond.false217
  br label %cond.end351, !dbg !14164

cond.false222:                                    ; preds = %cond.false217
  %52 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub223 = sub i64 %52, 1, !dbg !14164
  %and224 = and i64 %sub223, 1048576, !dbg !14164
  %tobool225 = icmp ne i64 %and224, 0, !dbg !14164
  br i1 %tobool225, label %cond.true226, label %cond.false227, !dbg !14164

cond.true226:                                     ; preds = %cond.false222
  br label %cond.end349, !dbg !14164

cond.false227:                                    ; preds = %cond.false222
  %53 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub228 = sub i64 %53, 1, !dbg !14164
  %and229 = and i64 %sub228, 524288, !dbg !14164
  %tobool230 = icmp ne i64 %and229, 0, !dbg !14164
  br i1 %tobool230, label %cond.true231, label %cond.false232, !dbg !14164

cond.true231:                                     ; preds = %cond.false227
  br label %cond.end347, !dbg !14164

cond.false232:                                    ; preds = %cond.false227
  %54 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub233 = sub i64 %54, 1, !dbg !14164
  %and234 = and i64 %sub233, 262144, !dbg !14164
  %tobool235 = icmp ne i64 %and234, 0, !dbg !14164
  br i1 %tobool235, label %cond.true236, label %cond.false237, !dbg !14164

cond.true236:                                     ; preds = %cond.false232
  br label %cond.end345, !dbg !14164

cond.false237:                                    ; preds = %cond.false232
  %55 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub238 = sub i64 %55, 1, !dbg !14164
  %and239 = and i64 %sub238, 131072, !dbg !14164
  %tobool240 = icmp ne i64 %and239, 0, !dbg !14164
  br i1 %tobool240, label %cond.true241, label %cond.false242, !dbg !14164

cond.true241:                                     ; preds = %cond.false237
  br label %cond.end343, !dbg !14164

cond.false242:                                    ; preds = %cond.false237
  %56 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub243 = sub i64 %56, 1, !dbg !14164
  %and244 = and i64 %sub243, 65536, !dbg !14164
  %tobool245 = icmp ne i64 %and244, 0, !dbg !14164
  br i1 %tobool245, label %cond.true246, label %cond.false247, !dbg !14164

cond.true246:                                     ; preds = %cond.false242
  br label %cond.end341, !dbg !14164

cond.false247:                                    ; preds = %cond.false242
  %57 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub248 = sub i64 %57, 1, !dbg !14164
  %and249 = and i64 %sub248, 32768, !dbg !14164
  %tobool250 = icmp ne i64 %and249, 0, !dbg !14164
  br i1 %tobool250, label %cond.true251, label %cond.false252, !dbg !14164

cond.true251:                                     ; preds = %cond.false247
  br label %cond.end339, !dbg !14164

cond.false252:                                    ; preds = %cond.false247
  %58 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub253 = sub i64 %58, 1, !dbg !14164
  %and254 = and i64 %sub253, 16384, !dbg !14164
  %tobool255 = icmp ne i64 %and254, 0, !dbg !14164
  br i1 %tobool255, label %cond.true256, label %cond.false257, !dbg !14164

cond.true256:                                     ; preds = %cond.false252
  br label %cond.end337, !dbg !14164

cond.false257:                                    ; preds = %cond.false252
  %59 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub258 = sub i64 %59, 1, !dbg !14164
  %and259 = and i64 %sub258, 8192, !dbg !14164
  %tobool260 = icmp ne i64 %and259, 0, !dbg !14164
  br i1 %tobool260, label %cond.true261, label %cond.false262, !dbg !14164

cond.true261:                                     ; preds = %cond.false257
  br label %cond.end335, !dbg !14164

cond.false262:                                    ; preds = %cond.false257
  %60 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub263 = sub i64 %60, 1, !dbg !14164
  %and264 = and i64 %sub263, 4096, !dbg !14164
  %tobool265 = icmp ne i64 %and264, 0, !dbg !14164
  br i1 %tobool265, label %cond.true266, label %cond.false267, !dbg !14164

cond.true266:                                     ; preds = %cond.false262
  br label %cond.end333, !dbg !14164

cond.false267:                                    ; preds = %cond.false262
  %61 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub268 = sub i64 %61, 1, !dbg !14164
  %and269 = and i64 %sub268, 2048, !dbg !14164
  %tobool270 = icmp ne i64 %and269, 0, !dbg !14164
  br i1 %tobool270, label %cond.true271, label %cond.false272, !dbg !14164

cond.true271:                                     ; preds = %cond.false267
  br label %cond.end331, !dbg !14164

cond.false272:                                    ; preds = %cond.false267
  %62 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub273 = sub i64 %62, 1, !dbg !14164
  %and274 = and i64 %sub273, 1024, !dbg !14164
  %tobool275 = icmp ne i64 %and274, 0, !dbg !14164
  br i1 %tobool275, label %cond.true276, label %cond.false277, !dbg !14164

cond.true276:                                     ; preds = %cond.false272
  br label %cond.end329, !dbg !14164

cond.false277:                                    ; preds = %cond.false272
  %63 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub278 = sub i64 %63, 1, !dbg !14164
  %and279 = and i64 %sub278, 512, !dbg !14164
  %tobool280 = icmp ne i64 %and279, 0, !dbg !14164
  br i1 %tobool280, label %cond.true281, label %cond.false282, !dbg !14164

cond.true281:                                     ; preds = %cond.false277
  br label %cond.end327, !dbg !14164

cond.false282:                                    ; preds = %cond.false277
  %64 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub283 = sub i64 %64, 1, !dbg !14164
  %and284 = and i64 %sub283, 256, !dbg !14164
  %tobool285 = icmp ne i64 %and284, 0, !dbg !14164
  br i1 %tobool285, label %cond.true286, label %cond.false287, !dbg !14164

cond.true286:                                     ; preds = %cond.false282
  br label %cond.end325, !dbg !14164

cond.false287:                                    ; preds = %cond.false282
  %65 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub288 = sub i64 %65, 1, !dbg !14164
  %and289 = and i64 %sub288, 128, !dbg !14164
  %tobool290 = icmp ne i64 %and289, 0, !dbg !14164
  br i1 %tobool290, label %cond.true291, label %cond.false292, !dbg !14164

cond.true291:                                     ; preds = %cond.false287
  br label %cond.end323, !dbg !14164

cond.false292:                                    ; preds = %cond.false287
  %66 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub293 = sub i64 %66, 1, !dbg !14164
  %and294 = and i64 %sub293, 64, !dbg !14164
  %tobool295 = icmp ne i64 %and294, 0, !dbg !14164
  br i1 %tobool295, label %cond.true296, label %cond.false297, !dbg !14164

cond.true296:                                     ; preds = %cond.false292
  br label %cond.end321, !dbg !14164

cond.false297:                                    ; preds = %cond.false292
  %67 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub298 = sub i64 %67, 1, !dbg !14164
  %and299 = and i64 %sub298, 32, !dbg !14164
  %tobool300 = icmp ne i64 %and299, 0, !dbg !14164
  br i1 %tobool300, label %cond.true301, label %cond.false302, !dbg !14164

cond.true301:                                     ; preds = %cond.false297
  br label %cond.end319, !dbg !14164

cond.false302:                                    ; preds = %cond.false297
  %68 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub303 = sub i64 %68, 1, !dbg !14164
  %and304 = and i64 %sub303, 16, !dbg !14164
  %tobool305 = icmp ne i64 %and304, 0, !dbg !14164
  br i1 %tobool305, label %cond.true306, label %cond.false307, !dbg !14164

cond.true306:                                     ; preds = %cond.false302
  br label %cond.end317, !dbg !14164

cond.false307:                                    ; preds = %cond.false302
  %69 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub308 = sub i64 %69, 1, !dbg !14164
  %and309 = and i64 %sub308, 8, !dbg !14164
  %tobool310 = icmp ne i64 %and309, 0, !dbg !14164
  br i1 %tobool310, label %cond.true311, label %cond.false312, !dbg !14164

cond.true311:                                     ; preds = %cond.false307
  br label %cond.end, !dbg !14164

cond.false312:                                    ; preds = %cond.false307
  %70 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub313 = sub i64 %70, 1, !dbg !14164
  %and314 = and i64 %sub313, 4, !dbg !14164
  %tobool315 = icmp ne i64 %and314, 0, !dbg !14164
  %71 = zext i1 %tobool315 to i64, !dbg !14164
  %cond = select i1 %tobool315, i32 2, i32 1, !dbg !14164
  br label %cond.end, !dbg !14164

cond.end:                                         ; preds = %cond.false312, %cond.true311
  %cond316 = phi i32 [ 3, %cond.true311 ], [ %cond, %cond.false312 ], !dbg !14164
  br label %cond.end317, !dbg !14164

cond.end317:                                      ; preds = %cond.end, %cond.true306
  %cond318 = phi i32 [ 4, %cond.true306 ], [ %cond316, %cond.end ], !dbg !14164
  br label %cond.end319, !dbg !14164

cond.end319:                                      ; preds = %cond.end317, %cond.true301
  %cond320 = phi i32 [ 5, %cond.true301 ], [ %cond318, %cond.end317 ], !dbg !14164
  br label %cond.end321, !dbg !14164

cond.end321:                                      ; preds = %cond.end319, %cond.true296
  %cond322 = phi i32 [ 6, %cond.true296 ], [ %cond320, %cond.end319 ], !dbg !14164
  br label %cond.end323, !dbg !14164

cond.end323:                                      ; preds = %cond.end321, %cond.true291
  %cond324 = phi i32 [ 7, %cond.true291 ], [ %cond322, %cond.end321 ], !dbg !14164
  br label %cond.end325, !dbg !14164

cond.end325:                                      ; preds = %cond.end323, %cond.true286
  %cond326 = phi i32 [ 8, %cond.true286 ], [ %cond324, %cond.end323 ], !dbg !14164
  br label %cond.end327, !dbg !14164

cond.end327:                                      ; preds = %cond.end325, %cond.true281
  %cond328 = phi i32 [ 9, %cond.true281 ], [ %cond326, %cond.end325 ], !dbg !14164
  br label %cond.end329, !dbg !14164

cond.end329:                                      ; preds = %cond.end327, %cond.true276
  %cond330 = phi i32 [ 10, %cond.true276 ], [ %cond328, %cond.end327 ], !dbg !14164
  br label %cond.end331, !dbg !14164

cond.end331:                                      ; preds = %cond.end329, %cond.true271
  %cond332 = phi i32 [ 11, %cond.true271 ], [ %cond330, %cond.end329 ], !dbg !14164
  br label %cond.end333, !dbg !14164

cond.end333:                                      ; preds = %cond.end331, %cond.true266
  %cond334 = phi i32 [ 12, %cond.true266 ], [ %cond332, %cond.end331 ], !dbg !14164
  br label %cond.end335, !dbg !14164

cond.end335:                                      ; preds = %cond.end333, %cond.true261
  %cond336 = phi i32 [ 13, %cond.true261 ], [ %cond334, %cond.end333 ], !dbg !14164
  br label %cond.end337, !dbg !14164

cond.end337:                                      ; preds = %cond.end335, %cond.true256
  %cond338 = phi i32 [ 14, %cond.true256 ], [ %cond336, %cond.end335 ], !dbg !14164
  br label %cond.end339, !dbg !14164

cond.end339:                                      ; preds = %cond.end337, %cond.true251
  %cond340 = phi i32 [ 15, %cond.true251 ], [ %cond338, %cond.end337 ], !dbg !14164
  br label %cond.end341, !dbg !14164

cond.end341:                                      ; preds = %cond.end339, %cond.true246
  %cond342 = phi i32 [ 16, %cond.true246 ], [ %cond340, %cond.end339 ], !dbg !14164
  br label %cond.end343, !dbg !14164

cond.end343:                                      ; preds = %cond.end341, %cond.true241
  %cond344 = phi i32 [ 17, %cond.true241 ], [ %cond342, %cond.end341 ], !dbg !14164
  br label %cond.end345, !dbg !14164

cond.end345:                                      ; preds = %cond.end343, %cond.true236
  %cond346 = phi i32 [ 18, %cond.true236 ], [ %cond344, %cond.end343 ], !dbg !14164
  br label %cond.end347, !dbg !14164

cond.end347:                                      ; preds = %cond.end345, %cond.true231
  %cond348 = phi i32 [ 19, %cond.true231 ], [ %cond346, %cond.end345 ], !dbg !14164
  br label %cond.end349, !dbg !14164

cond.end349:                                      ; preds = %cond.end347, %cond.true226
  %cond350 = phi i32 [ 20, %cond.true226 ], [ %cond348, %cond.end347 ], !dbg !14164
  br label %cond.end351, !dbg !14164

cond.end351:                                      ; preds = %cond.end349, %cond.true221
  %cond352 = phi i32 [ 21, %cond.true221 ], [ %cond350, %cond.end349 ], !dbg !14164
  br label %cond.end353, !dbg !14164

cond.end353:                                      ; preds = %cond.end351, %cond.true216
  %cond354 = phi i32 [ 22, %cond.true216 ], [ %cond352, %cond.end351 ], !dbg !14164
  br label %cond.end355, !dbg !14164

cond.end355:                                      ; preds = %cond.end353, %cond.true211
  %cond356 = phi i32 [ 23, %cond.true211 ], [ %cond354, %cond.end353 ], !dbg !14164
  br label %cond.end357, !dbg !14164

cond.end357:                                      ; preds = %cond.end355, %cond.true206
  %cond358 = phi i32 [ 24, %cond.true206 ], [ %cond356, %cond.end355 ], !dbg !14164
  br label %cond.end359, !dbg !14164

cond.end359:                                      ; preds = %cond.end357, %cond.true201
  %cond360 = phi i32 [ 25, %cond.true201 ], [ %cond358, %cond.end357 ], !dbg !14164
  br label %cond.end361, !dbg !14164

cond.end361:                                      ; preds = %cond.end359, %cond.true196
  %cond362 = phi i32 [ 26, %cond.true196 ], [ %cond360, %cond.end359 ], !dbg !14164
  br label %cond.end363, !dbg !14164

cond.end363:                                      ; preds = %cond.end361, %cond.true191
  %cond364 = phi i32 [ 27, %cond.true191 ], [ %cond362, %cond.end361 ], !dbg !14164
  br label %cond.end365, !dbg !14164

cond.end365:                                      ; preds = %cond.end363, %cond.true186
  %cond366 = phi i32 [ 28, %cond.true186 ], [ %cond364, %cond.end363 ], !dbg !14164
  br label %cond.end367, !dbg !14164

cond.end367:                                      ; preds = %cond.end365, %cond.true181
  %cond368 = phi i32 [ 29, %cond.true181 ], [ %cond366, %cond.end365 ], !dbg !14164
  br label %cond.end369, !dbg !14164

cond.end369:                                      ; preds = %cond.end367, %cond.true176
  %cond370 = phi i32 [ 30, %cond.true176 ], [ %cond368, %cond.end367 ], !dbg !14164
  br label %cond.end371, !dbg !14164

cond.end371:                                      ; preds = %cond.end369, %cond.true171
  %cond372 = phi i32 [ 31, %cond.true171 ], [ %cond370, %cond.end369 ], !dbg !14164
  br label %cond.end373, !dbg !14164

cond.end373:                                      ; preds = %cond.end371, %cond.true166
  %cond374 = phi i32 [ 32, %cond.true166 ], [ %cond372, %cond.end371 ], !dbg !14164
  br label %cond.end375, !dbg !14164

cond.end375:                                      ; preds = %cond.end373, %cond.true161
  %cond376 = phi i32 [ 33, %cond.true161 ], [ %cond374, %cond.end373 ], !dbg !14164
  br label %cond.end377, !dbg !14164

cond.end377:                                      ; preds = %cond.end375, %cond.true156
  %cond378 = phi i32 [ 34, %cond.true156 ], [ %cond376, %cond.end375 ], !dbg !14164
  br label %cond.end379, !dbg !14164

cond.end379:                                      ; preds = %cond.end377, %cond.true151
  %cond380 = phi i32 [ 35, %cond.true151 ], [ %cond378, %cond.end377 ], !dbg !14164
  br label %cond.end381, !dbg !14164

cond.end381:                                      ; preds = %cond.end379, %cond.true146
  %cond382 = phi i32 [ 36, %cond.true146 ], [ %cond380, %cond.end379 ], !dbg !14164
  br label %cond.end383, !dbg !14164

cond.end383:                                      ; preds = %cond.end381, %cond.true141
  %cond384 = phi i32 [ 37, %cond.true141 ], [ %cond382, %cond.end381 ], !dbg !14164
  br label %cond.end385, !dbg !14164

cond.end385:                                      ; preds = %cond.end383, %cond.true136
  %cond386 = phi i32 [ 38, %cond.true136 ], [ %cond384, %cond.end383 ], !dbg !14164
  br label %cond.end387, !dbg !14164

cond.end387:                                      ; preds = %cond.end385, %cond.true131
  %cond388 = phi i32 [ 39, %cond.true131 ], [ %cond386, %cond.end385 ], !dbg !14164
  br label %cond.end389, !dbg !14164

cond.end389:                                      ; preds = %cond.end387, %cond.true126
  %cond390 = phi i32 [ 40, %cond.true126 ], [ %cond388, %cond.end387 ], !dbg !14164
  br label %cond.end391, !dbg !14164

cond.end391:                                      ; preds = %cond.end389, %cond.true121
  %cond392 = phi i32 [ 41, %cond.true121 ], [ %cond390, %cond.end389 ], !dbg !14164
  br label %cond.end393, !dbg !14164

cond.end393:                                      ; preds = %cond.end391, %cond.true116
  %cond394 = phi i32 [ 42, %cond.true116 ], [ %cond392, %cond.end391 ], !dbg !14164
  br label %cond.end395, !dbg !14164

cond.end395:                                      ; preds = %cond.end393, %cond.true111
  %cond396 = phi i32 [ 43, %cond.true111 ], [ %cond394, %cond.end393 ], !dbg !14164
  br label %cond.end397, !dbg !14164

cond.end397:                                      ; preds = %cond.end395, %cond.true106
  %cond398 = phi i32 [ 44, %cond.true106 ], [ %cond396, %cond.end395 ], !dbg !14164
  br label %cond.end399, !dbg !14164

cond.end399:                                      ; preds = %cond.end397, %cond.true101
  %cond400 = phi i32 [ 45, %cond.true101 ], [ %cond398, %cond.end397 ], !dbg !14164
  br label %cond.end401, !dbg !14164

cond.end401:                                      ; preds = %cond.end399, %cond.true96
  %cond402 = phi i32 [ 46, %cond.true96 ], [ %cond400, %cond.end399 ], !dbg !14164
  br label %cond.end403, !dbg !14164

cond.end403:                                      ; preds = %cond.end401, %cond.true91
  %cond404 = phi i32 [ 47, %cond.true91 ], [ %cond402, %cond.end401 ], !dbg !14164
  br label %cond.end405, !dbg !14164

cond.end405:                                      ; preds = %cond.end403, %cond.true86
  %cond406 = phi i32 [ 48, %cond.true86 ], [ %cond404, %cond.end403 ], !dbg !14164
  br label %cond.end407, !dbg !14164

cond.end407:                                      ; preds = %cond.end405, %cond.true81
  %cond408 = phi i32 [ 49, %cond.true81 ], [ %cond406, %cond.end405 ], !dbg !14164
  br label %cond.end409, !dbg !14164

cond.end409:                                      ; preds = %cond.end407, %cond.true76
  %cond410 = phi i32 [ 50, %cond.true76 ], [ %cond408, %cond.end407 ], !dbg !14164
  br label %cond.end411, !dbg !14164

cond.end411:                                      ; preds = %cond.end409, %cond.true71
  %cond412 = phi i32 [ 51, %cond.true71 ], [ %cond410, %cond.end409 ], !dbg !14164
  br label %cond.end413, !dbg !14164

cond.end413:                                      ; preds = %cond.end411, %cond.true66
  %cond414 = phi i32 [ 52, %cond.true66 ], [ %cond412, %cond.end411 ], !dbg !14164
  br label %cond.end415, !dbg !14164

cond.end415:                                      ; preds = %cond.end413, %cond.true61
  %cond416 = phi i32 [ 53, %cond.true61 ], [ %cond414, %cond.end413 ], !dbg !14164
  br label %cond.end417, !dbg !14164

cond.end417:                                      ; preds = %cond.end415, %cond.true56
  %cond418 = phi i32 [ 54, %cond.true56 ], [ %cond416, %cond.end415 ], !dbg !14164
  br label %cond.end419, !dbg !14164

cond.end419:                                      ; preds = %cond.end417, %cond.true51
  %cond420 = phi i32 [ 55, %cond.true51 ], [ %cond418, %cond.end417 ], !dbg !14164
  br label %cond.end421, !dbg !14164

cond.end421:                                      ; preds = %cond.end419, %cond.true46
  %cond422 = phi i32 [ 56, %cond.true46 ], [ %cond420, %cond.end419 ], !dbg !14164
  br label %cond.end423, !dbg !14164

cond.end423:                                      ; preds = %cond.end421, %cond.true41
  %cond424 = phi i32 [ 57, %cond.true41 ], [ %cond422, %cond.end421 ], !dbg !14164
  br label %cond.end425, !dbg !14164

cond.end425:                                      ; preds = %cond.end423, %cond.true36
  %cond426 = phi i32 [ 58, %cond.true36 ], [ %cond424, %cond.end423 ], !dbg !14164
  br label %cond.end427, !dbg !14164

cond.end427:                                      ; preds = %cond.end425, %cond.true31
  %cond428 = phi i32 [ 59, %cond.true31 ], [ %cond426, %cond.end425 ], !dbg !14164
  br label %cond.end429, !dbg !14164

cond.end429:                                      ; preds = %cond.end427, %cond.true26
  %cond430 = phi i32 [ 60, %cond.true26 ], [ %cond428, %cond.end427 ], !dbg !14164
  br label %cond.end431, !dbg !14164

cond.end431:                                      ; preds = %cond.end429, %cond.true21
  %cond432 = phi i32 [ 61, %cond.true21 ], [ %cond430, %cond.end429 ], !dbg !14164
  br label %cond.end433, !dbg !14164

cond.end433:                                      ; preds = %cond.end431, %cond.true16
  %cond434 = phi i32 [ 62, %cond.true16 ], [ %cond432, %cond.end431 ], !dbg !14164
  br label %cond.end435, !dbg !14164

cond.end435:                                      ; preds = %cond.end433, %cond.true11
  %cond436 = phi i32 [ 63, %cond.true11 ], [ %cond434, %cond.end433 ], !dbg !14164
  br label %cond.end437, !dbg !14164

cond.end437:                                      ; preds = %cond.end435, %cond.true8
  %cond438 = phi i32 [ 0, %cond.true8 ], [ %cond436, %cond.end435 ], !dbg !14164
  br label %cond.end440, !dbg !14164

cond.false439:                                    ; preds = %cond.true
  br label %cond.end440, !dbg !14164

cond.end440:                                      ; preds = %cond.false439, %cond.end437
  %cond441 = phi i32 [ %cond438, %cond.end437 ], [ -1, %cond.false439 ], !dbg !14164
  br label %cond.end444, !dbg !14164

cond.false442:                                    ; preds = %if.end3
  %72 = load i64, i64* %size.addr, align 8, !dbg !14164
  %sub443 = sub i64 %72, 1, !dbg !14164
  %call = call i32 @__ilog2_u64(i64 %sub443) #14, !dbg !14164
  br label %cond.end444, !dbg !14164

cond.end444:                                      ; preds = %cond.false442, %cond.end440
  %cond445 = phi i32 [ %cond441, %cond.end440 ], [ %call, %cond.false442 ], !dbg !14164
  %sub446 = sub i32 %cond445, 12, !dbg !14165
  %add = add i32 %sub446, 1, !dbg !14166
  store i32 %add, i32* %retval, align 4, !dbg !14167
  br label %return, !dbg !14167

if.end447:                                        ; preds = %entry
  %73 = load i64, i64* %size.addr, align 8, !dbg !14168
  %dec = add i64 %73, -1, !dbg !14168
  store i64 %dec, i64* %size.addr, align 8, !dbg !14168
  %74 = load i64, i64* %size.addr, align 8, !dbg !14169
  %shr = lshr i64 %74, 12, !dbg !14169
  store i64 %shr, i64* %size.addr, align 8, !dbg !14169
  %75 = load i64, i64* %size.addr, align 8, !dbg !14170
  store i64 %75, i64* %x.addr.i, align 8
  store i32 -1, i32* %bitpos.i, align 4, !dbg !14147
  %76 = load i32, i32* %bitpos.i, align 4, !dbg !14171
  %77 = load i64, i64* %x.addr.i, align 8, !dbg !14172
  %78 = call i32 asm "bsrq $1,${0:q}", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %77, i32 %76) #11, !dbg !14171, !srcloc !14173
  store i32 %78, i32* %bitpos.i, align 4, !dbg !14171
  %79 = load i32, i32* %bitpos.i, align 4, !dbg !14174
  %add.i = add i32 %79, 1, !dbg !14175
  store i32 %add.i, i32* %retval, align 4, !dbg !14176
  br label %return, !dbg !14176

return:                                           ; preds = %if.end447, %cond.end444, %if.then2, %if.then1
  %80 = load i32, i32* %retval, align 4, !dbg !14177
  ret i32 %80, !dbg !14177
}

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal i32 @__ilog2_u64(i64 %n) #7 !dbg !14178 {
entry:
  %x.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr.i, metadata !14140, metadata !DIExpression()), !dbg !14182
  %bitpos.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %bitpos.i, metadata !14146, metadata !DIExpression()), !dbg !14184
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !14185, metadata !DIExpression()), !dbg !14186
  %0 = load i64, i64* %n.addr, align 8, !dbg !14187
  store i64 %0, i64* %x.addr.i, align 8
  store i32 -1, i32* %bitpos.i, align 4, !dbg !14184
  %1 = load i32, i32* %bitpos.i, align 4, !dbg !14188
  %2 = load i64, i64* %x.addr.i, align 8, !dbg !14189
  %3 = call i32 asm "bsrq $1,${0:q}", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %2, i32 %1) #11, !dbg !14188, !srcloc !14173
  store i32 %3, i32* %bitpos.i, align 4, !dbg !14188
  %4 = load i32, i32* %bitpos.i, align 4, !dbg !14190
  %add.i = add i32 %4, 1, !dbg !14191
  %sub = sub i32 %add.i, 1, !dbg !14192
  ret i32 %sub, !dbg !14193
}

; Function Attrs: noredzone
declare dso_local noalias i8* @kmalloc_order(i64, i32, i32) #2

; Function Attrs: noredzone
declare dso_local noalias i8* @kmem_cache_alloc(%struct.kmem_cache*, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @kasan_kmalloc(%struct.kmem_cache* %s, i8* %object, i64 %size, i32 %flags) #0 !dbg !14194 {
entry:
  %s.addr = alloca %struct.kmem_cache*, align 8
  %object.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.kmem_cache* %s, %struct.kmem_cache** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.kmem_cache** %s.addr, metadata !14198, metadata !DIExpression()), !dbg !14199
  store i8* %object, i8** %object.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %object.addr, metadata !14200, metadata !DIExpression()), !dbg !14201
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !14202, metadata !DIExpression()), !dbg !14203
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !14204, metadata !DIExpression()), !dbg !14205
  %0 = load i8*, i8** %object.addr, align 8, !dbg !14206
  ret i8* %0, !dbg !14207
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_read_page_hwecc(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !14208 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %i = alloca i32, align 4
  %eccsize = alloca i32, align 4
  %ret = alloca i32, align 4
  %eccbytes = alloca i32, align 4
  %eccsteps = alloca i32, align 4
  %p = alloca i8*, align 8
  %ecc_calc = alloca i8*, align 8
  %ecc_code = alloca i8*, align 8
  %max_bitflips = alloca i32, align 4
  %stat = alloca i32, align 4
  %__UNIQUE_ID___x258 = alloca i32, align 4
  %__UNIQUE_ID___y259 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !14209, metadata !DIExpression()), !dbg !14210
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !14211, metadata !DIExpression()), !dbg !14212
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !14213, metadata !DIExpression()), !dbg !14214
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !14215, metadata !DIExpression()), !dbg !14216
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !14217, metadata !DIExpression()), !dbg !14218
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14219
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !14220
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !14218
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14221, metadata !DIExpression()), !dbg !14222
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !14223, metadata !DIExpression()), !dbg !14224
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14225
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !14226
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !14227
  %2 = load i32, i32* %size, align 8, !dbg !14227
  store i32 %2, i32* %eccsize, align 4, !dbg !14224
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !14228, metadata !DIExpression()), !dbg !14229
  call void @llvm.dbg.declare(metadata i32* %eccbytes, metadata !14230, metadata !DIExpression()), !dbg !14231
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14232
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !14233
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 5, !dbg !14234
  %4 = load i32, i32* %bytes, align 4, !dbg !14234
  store i32 %4, i32* %eccbytes, align 4, !dbg !14231
  call void @llvm.dbg.declare(metadata i32* %eccsteps, metadata !14235, metadata !DIExpression()), !dbg !14236
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14237
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 31, !dbg !14238
  %steps = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc2, i32 0, i32 3, !dbg !14239
  %6 = load i32, i32* %steps, align 4, !dbg !14239
  store i32 %6, i32* %eccsteps, align 4, !dbg !14236
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14240, metadata !DIExpression()), !dbg !14241
  %7 = load i8*, i8** %buf.addr, align 8, !dbg !14242
  store i8* %7, i8** %p, align 8, !dbg !14241
  call void @llvm.dbg.declare(metadata i8** %ecc_calc, metadata !14243, metadata !DIExpression()), !dbg !14244
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14245
  %ecc3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %8, i32 0, i32 31, !dbg !14246
  %calc_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc3, i32 0, i32 12, !dbg !14247
  %9 = load i8*, i8** %calc_buf, align 8, !dbg !14247
  store i8* %9, i8** %ecc_calc, align 8, !dbg !14244
  call void @llvm.dbg.declare(metadata i8** %ecc_code, metadata !14248, metadata !DIExpression()), !dbg !14249
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14250
  %ecc4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 31, !dbg !14251
  %code_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc4, i32 0, i32 13, !dbg !14252
  %11 = load i8*, i8** %code_buf, align 8, !dbg !14252
  store i8* %11, i8** %ecc_code, align 8, !dbg !14249
  call void @llvm.dbg.declare(metadata i32* %max_bitflips, metadata !14253, metadata !DIExpression()), !dbg !14254
  store i32 0, i32* %max_bitflips, align 4, !dbg !14254
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14255
  %13 = load i32, i32* %page.addr, align 4, !dbg !14256
  %call5 = call i32 @nand_read_page_op(%struct.nand_chip* %12, i32 %13, i32 0, i8* null, i32 0) #8, !dbg !14257
  store i32 %call5, i32* %ret, align 4, !dbg !14258
  %14 = load i32, i32* %ret, align 4, !dbg !14259
  %tobool = icmp ne i32 %14, 0, !dbg !14259
  br i1 %tobool, label %if.then, label %if.end, !dbg !14261

if.then:                                          ; preds = %entry
  %15 = load i32, i32* %ret, align 4, !dbg !14262
  store i32 %15, i32* %retval, align 4, !dbg !14263
  br label %return, !dbg !14263

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !14264
  br label %for.cond, !dbg !14266

for.cond:                                         ; preds = %for.inc, %if.end
  %16 = load i32, i32* %eccsteps, align 4, !dbg !14267
  %tobool6 = icmp ne i32 %16, 0, !dbg !14269
  br i1 %tobool6, label %for.body, label %for.end, !dbg !14269

for.body:                                         ; preds = %for.cond
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14270
  %ecc7 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %17, i32 0, i32 31, !dbg !14272
  %hwctl = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc7, i32 0, i32 14, !dbg !14273
  %18 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %hwctl, align 8, !dbg !14273
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14274
  call void %18(%struct.nand_chip* %19, i32 0) #8, !dbg !14270
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14275
  %21 = load i8*, i8** %p, align 8, !dbg !14276
  %22 = load i32, i32* %eccsize, align 4, !dbg !14277
  %call8 = call i32 @nand_read_data_op(%struct.nand_chip* %20, i8* %21, i32 %22, i1 zeroext false, i1 zeroext false) #8, !dbg !14278
  store i32 %call8, i32* %ret, align 4, !dbg !14279
  %23 = load i32, i32* %ret, align 4, !dbg !14280
  %tobool9 = icmp ne i32 %23, 0, !dbg !14280
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !14282

if.then10:                                        ; preds = %for.body
  %24 = load i32, i32* %ret, align 4, !dbg !14283
  store i32 %24, i32* %retval, align 4, !dbg !14284
  br label %return, !dbg !14284

if.end11:                                         ; preds = %for.body
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14285
  %ecc12 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %25, i32 0, i32 31, !dbg !14286
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc12, i32 0, i32 15, !dbg !14287
  %26 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !14287
  %27 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14288
  %28 = load i8*, i8** %p, align 8, !dbg !14289
  %29 = load i8*, i8** %ecc_calc, align 8, !dbg !14290
  %30 = load i32, i32* %i, align 4, !dbg !14291
  %idxprom = sext i32 %30 to i64, !dbg !14290
  %arrayidx = getelementptr i8, i8* %29, i64 %idxprom, !dbg !14290
  %call13 = call i32 %26(%struct.nand_chip* %27, i8* %28, i8* %arrayidx) #8, !dbg !14285
  br label %for.inc, !dbg !14292

for.inc:                                          ; preds = %if.end11
  %31 = load i32, i32* %eccsteps, align 4, !dbg !14293
  %dec = add i32 %31, -1, !dbg !14293
  store i32 %dec, i32* %eccsteps, align 4, !dbg !14293
  %32 = load i32, i32* %eccbytes, align 4, !dbg !14294
  %33 = load i32, i32* %i, align 4, !dbg !14295
  %add = add i32 %33, %32, !dbg !14295
  store i32 %add, i32* %i, align 4, !dbg !14295
  %34 = load i32, i32* %eccsize, align 4, !dbg !14296
  %35 = load i8*, i8** %p, align 8, !dbg !14297
  %idx.ext = sext i32 %34 to i64, !dbg !14297
  %add.ptr = getelementptr i8, i8* %35, i64 %idx.ext, !dbg !14297
  store i8* %add.ptr, i8** %p, align 8, !dbg !14297
  br label %for.cond, !dbg !14298, !llvm.loop !14299

for.end:                                          ; preds = %for.cond
  %36 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14301
  %37 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14302
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %37, i32 0, i32 23, !dbg !14303
  %38 = load i8*, i8** %oob_poi, align 8, !dbg !14303
  %39 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14304
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %39, i32 0, i32 6, !dbg !14305
  %40 = load i32, i32* %oobsize, align 4, !dbg !14305
  %call14 = call i32 @nand_read_data_op(%struct.nand_chip* %36, i8* %38, i32 %40, i1 zeroext false, i1 zeroext false) #8, !dbg !14306
  store i32 %call14, i32* %ret, align 4, !dbg !14307
  %41 = load i32, i32* %ret, align 4, !dbg !14308
  %tobool15 = icmp ne i32 %41, 0, !dbg !14308
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !14310

if.then16:                                        ; preds = %for.end
  %42 = load i32, i32* %ret, align 4, !dbg !14311
  store i32 %42, i32* %retval, align 4, !dbg !14312
  br label %return, !dbg !14312

if.end17:                                         ; preds = %for.end
  %43 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14313
  %44 = load i8*, i8** %ecc_code, align 8, !dbg !14314
  %45 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14315
  %oob_poi18 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %45, i32 0, i32 23, !dbg !14316
  %46 = load i8*, i8** %oob_poi18, align 8, !dbg !14316
  %47 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14317
  %ecc19 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %47, i32 0, i32 31, !dbg !14318
  %total = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc19, i32 0, i32 6, !dbg !14319
  %48 = load i32, i32* %total, align 8, !dbg !14319
  %call20 = call i32 @mtd_ooblayout_get_eccbytes(%struct.mtd_info* %43, i8* %44, i8* %46, i32 0, i32 %48) #8, !dbg !14320
  store i32 %call20, i32* %ret, align 4, !dbg !14321
  %49 = load i32, i32* %ret, align 4, !dbg !14322
  %tobool21 = icmp ne i32 %49, 0, !dbg !14322
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !14324

if.then22:                                        ; preds = %if.end17
  %50 = load i32, i32* %ret, align 4, !dbg !14325
  store i32 %50, i32* %retval, align 4, !dbg !14326
  br label %return, !dbg !14326

if.end23:                                         ; preds = %if.end17
  %51 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14327
  %ecc24 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %51, i32 0, i32 31, !dbg !14328
  %steps25 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc24, i32 0, i32 3, !dbg !14329
  %52 = load i32, i32* %steps25, align 4, !dbg !14329
  store i32 %52, i32* %eccsteps, align 4, !dbg !14330
  %53 = load i8*, i8** %buf.addr, align 8, !dbg !14331
  store i8* %53, i8** %p, align 8, !dbg !14332
  store i32 0, i32* %i, align 4, !dbg !14333
  br label %for.cond26, !dbg !14335

for.cond26:                                       ; preds = %for.inc51, %if.end23
  %54 = load i32, i32* %eccsteps, align 4, !dbg !14336
  %tobool27 = icmp ne i32 %54, 0, !dbg !14338
  br i1 %tobool27, label %for.body28, label %for.end56, !dbg !14338

for.body28:                                       ; preds = %for.cond26
  call void @llvm.dbg.declare(metadata i32* %stat, metadata !14339, metadata !DIExpression()), !dbg !14341
  %55 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14342
  %ecc29 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %55, i32 0, i32 31, !dbg !14343
  %correct = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc29, i32 0, i32 16, !dbg !14344
  %56 = load i32 (%struct.nand_chip*, i8*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*, i8*)** %correct, align 8, !dbg !14344
  %57 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14345
  %58 = load i8*, i8** %p, align 8, !dbg !14346
  %59 = load i8*, i8** %ecc_code, align 8, !dbg !14347
  %60 = load i32, i32* %i, align 4, !dbg !14348
  %idxprom30 = sext i32 %60 to i64, !dbg !14347
  %arrayidx31 = getelementptr i8, i8* %59, i64 %idxprom30, !dbg !14347
  %61 = load i8*, i8** %ecc_calc, align 8, !dbg !14349
  %62 = load i32, i32* %i, align 4, !dbg !14350
  %idxprom32 = sext i32 %62 to i64, !dbg !14349
  %arrayidx33 = getelementptr i8, i8* %61, i64 %idxprom32, !dbg !14349
  %call34 = call i32 %56(%struct.nand_chip* %57, i8* %58, i8* %arrayidx31, i8* %arrayidx33) #8, !dbg !14342
  store i32 %call34, i32* %stat, align 4, !dbg !14351
  %63 = load i32, i32* %stat, align 4, !dbg !14352
  %cmp = icmp eq i32 %63, -74, !dbg !14354
  br i1 %cmp, label %land.lhs.true, label %if.end42, !dbg !14355

land.lhs.true:                                    ; preds = %for.body28
  %64 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14356
  %ecc35 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %64, i32 0, i32 31, !dbg !14357
  %options = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc35, i32 0, i32 10, !dbg !14358
  %65 = load i32, i32* %options, align 8, !dbg !14358
  %conv = zext i32 %65 to i64, !dbg !14356
  %and = and i64 %conv, 1, !dbg !14359
  %tobool36 = icmp ne i64 %and, 0, !dbg !14359
  br i1 %tobool36, label %if.then37, label %if.end42, !dbg !14360

if.then37:                                        ; preds = %land.lhs.true
  %66 = load i8*, i8** %p, align 8, !dbg !14361
  %67 = load i32, i32* %eccsize, align 4, !dbg !14363
  %68 = load i8*, i8** %ecc_code, align 8, !dbg !14364
  %69 = load i32, i32* %i, align 4, !dbg !14365
  %idxprom38 = sext i32 %69 to i64, !dbg !14364
  %arrayidx39 = getelementptr i8, i8* %68, i64 %idxprom38, !dbg !14364
  %70 = load i32, i32* %eccbytes, align 4, !dbg !14366
  %71 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14367
  %ecc40 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %71, i32 0, i32 31, !dbg !14368
  %strength = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc40, i32 0, i32 7, !dbg !14369
  %72 = load i32, i32* %strength, align 4, !dbg !14369
  %call41 = call i32 @nand_check_erased_ecc_chunk(i8* %66, i32 %67, i8* %arrayidx39, i32 %70, i8* null, i32 0, i32 %72) #8, !dbg !14370
  store i32 %call41, i32* %stat, align 4, !dbg !14371
  br label %if.end42, !dbg !14372

if.end42:                                         ; preds = %if.then37, %land.lhs.true, %for.body28
  %73 = load i32, i32* %stat, align 4, !dbg !14373
  %cmp43 = icmp slt i32 %73, 0, !dbg !14375
  br i1 %cmp43, label %if.then45, label %if.else, !dbg !14376

if.then45:                                        ; preds = %if.end42
  %74 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14377
  %ecc_stats = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %74, i32 0, i32 51, !dbg !14379
  %failed = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats, i32 0, i32 1, !dbg !14380
  %75 = load i32, i32* %failed, align 4, !dbg !14381
  %inc = add i32 %75, 1, !dbg !14381
  store i32 %inc, i32* %failed, align 4, !dbg !14381
  br label %if.end50, !dbg !14382

if.else:                                          ; preds = %if.end42
  %76 = load i32, i32* %stat, align 4, !dbg !14383
  %77 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14385
  %ecc_stats46 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %77, i32 0, i32 51, !dbg !14386
  %corrected = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats46, i32 0, i32 0, !dbg !14387
  %78 = load i32, i32* %corrected, align 8, !dbg !14388
  %add47 = add i32 %78, %76, !dbg !14388
  store i32 %add47, i32* %corrected, align 8, !dbg !14388
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x258, metadata !14389, metadata !DIExpression()), !dbg !14391
  %79 = load i32, i32* %max_bitflips, align 4, !dbg !14391
  store i32 %79, i32* %__UNIQUE_ID___x258, align 4, !dbg !14391
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y259, metadata !14392, metadata !DIExpression()), !dbg !14391
  %80 = load i32, i32* %stat, align 4, !dbg !14391
  store i32 %80, i32* %__UNIQUE_ID___y259, align 4, !dbg !14391
  %81 = load i32, i32* %__UNIQUE_ID___x258, align 4, !dbg !14391
  %82 = load i32, i32* %__UNIQUE_ID___y259, align 4, !dbg !14391
  %cmp48 = icmp ugt i32 %81, %82, !dbg !14391
  br i1 %cmp48, label %cond.true, label %cond.false, !dbg !14391

cond.true:                                        ; preds = %if.else
  %83 = load i32, i32* %__UNIQUE_ID___x258, align 4, !dbg !14391
  br label %cond.end, !dbg !14391

cond.false:                                       ; preds = %if.else
  %84 = load i32, i32* %__UNIQUE_ID___y259, align 4, !dbg !14391
  br label %cond.end, !dbg !14391

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %83, %cond.true ], [ %84, %cond.false ], !dbg !14391
  store i32 %cond, i32* %tmp, align 4, !dbg !14391
  %85 = load i32, i32* %tmp, align 4, !dbg !14391
  store i32 %85, i32* %max_bitflips, align 4, !dbg !14393
  br label %if.end50

if.end50:                                         ; preds = %cond.end, %if.then45
  br label %for.inc51, !dbg !14394

for.inc51:                                        ; preds = %if.end50
  %86 = load i32, i32* %eccsteps, align 4, !dbg !14395
  %dec52 = add i32 %86, -1, !dbg !14395
  store i32 %dec52, i32* %eccsteps, align 4, !dbg !14395
  %87 = load i32, i32* %eccbytes, align 4, !dbg !14396
  %88 = load i32, i32* %i, align 4, !dbg !14397
  %add53 = add i32 %88, %87, !dbg !14397
  store i32 %add53, i32* %i, align 4, !dbg !14397
  %89 = load i32, i32* %eccsize, align 4, !dbg !14398
  %90 = load i8*, i8** %p, align 8, !dbg !14399
  %idx.ext54 = sext i32 %89 to i64, !dbg !14399
  %add.ptr55 = getelementptr i8, i8* %90, i64 %idx.ext54, !dbg !14399
  store i8* %add.ptr55, i8** %p, align 8, !dbg !14399
  br label %for.cond26, !dbg !14400, !llvm.loop !14401

for.end56:                                        ; preds = %for.cond26
  %91 = load i32, i32* %max_bitflips, align 4, !dbg !14403
  store i32 %91, i32* %retval, align 4, !dbg !14404
  br label %return, !dbg !14404

return:                                           ; preds = %for.end56, %if.then22, %if.then16, %if.then10, %if.then
  %92 = load i32, i32* %retval, align 4, !dbg !14405
  ret i32 %92, !dbg !14405
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_write_page_hwecc(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !14406 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %i = alloca i32, align 4
  %eccsize = alloca i32, align 4
  %ret = alloca i32, align 4
  %eccbytes = alloca i32, align 4
  %eccsteps = alloca i32, align 4
  %ecc_calc = alloca i8*, align 8
  %p = alloca i8*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !14407, metadata !DIExpression()), !dbg !14408
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !14409, metadata !DIExpression()), !dbg !14410
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !14411, metadata !DIExpression()), !dbg !14412
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !14413, metadata !DIExpression()), !dbg !14414
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !14415, metadata !DIExpression()), !dbg !14416
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14417
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !14418
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !14416
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14419, metadata !DIExpression()), !dbg !14420
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !14421, metadata !DIExpression()), !dbg !14422
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14423
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !14424
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !14425
  %2 = load i32, i32* %size, align 8, !dbg !14425
  store i32 %2, i32* %eccsize, align 4, !dbg !14422
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !14426, metadata !DIExpression()), !dbg !14427
  call void @llvm.dbg.declare(metadata i32* %eccbytes, metadata !14428, metadata !DIExpression()), !dbg !14429
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14430
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !14431
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 5, !dbg !14432
  %4 = load i32, i32* %bytes, align 4, !dbg !14432
  store i32 %4, i32* %eccbytes, align 4, !dbg !14429
  call void @llvm.dbg.declare(metadata i32* %eccsteps, metadata !14433, metadata !DIExpression()), !dbg !14434
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14435
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 31, !dbg !14436
  %steps = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc2, i32 0, i32 3, !dbg !14437
  %6 = load i32, i32* %steps, align 4, !dbg !14437
  store i32 %6, i32* %eccsteps, align 4, !dbg !14434
  call void @llvm.dbg.declare(metadata i8** %ecc_calc, metadata !14438, metadata !DIExpression()), !dbg !14439
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14440
  %ecc3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 31, !dbg !14441
  %calc_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc3, i32 0, i32 12, !dbg !14442
  %8 = load i8*, i8** %calc_buf, align 8, !dbg !14442
  store i8* %8, i8** %ecc_calc, align 8, !dbg !14439
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14443, metadata !DIExpression()), !dbg !14444
  %9 = load i8*, i8** %buf.addr, align 8, !dbg !14445
  store i8* %9, i8** %p, align 8, !dbg !14444
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14446
  %11 = load i32, i32* %page.addr, align 4, !dbg !14447
  %call4 = call i32 @nand_prog_page_begin_op(%struct.nand_chip* %10, i32 %11, i32 0, i8* null, i32 0) #8, !dbg !14448
  store i32 %call4, i32* %ret, align 4, !dbg !14449
  %12 = load i32, i32* %ret, align 4, !dbg !14450
  %tobool = icmp ne i32 %12, 0, !dbg !14450
  br i1 %tobool, label %if.then, label %if.end, !dbg !14452

if.then:                                          ; preds = %entry
  %13 = load i32, i32* %ret, align 4, !dbg !14453
  store i32 %13, i32* %retval, align 4, !dbg !14454
  br label %return, !dbg !14454

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !14455
  br label %for.cond, !dbg !14457

for.cond:                                         ; preds = %for.inc, %if.end
  %14 = load i32, i32* %eccsteps, align 4, !dbg !14458
  %tobool5 = icmp ne i32 %14, 0, !dbg !14460
  br i1 %tobool5, label %for.body, label %for.end, !dbg !14460

for.body:                                         ; preds = %for.cond
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14461
  %ecc6 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 31, !dbg !14463
  %hwctl = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc6, i32 0, i32 14, !dbg !14464
  %16 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %hwctl, align 8, !dbg !14464
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14465
  call void %16(%struct.nand_chip* %17, i32 1) #8, !dbg !14461
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14466
  %19 = load i8*, i8** %p, align 8, !dbg !14467
  %20 = load i32, i32* %eccsize, align 4, !dbg !14468
  %call7 = call i32 @nand_write_data_op(%struct.nand_chip* %18, i8* %19, i32 %20, i1 zeroext false) #8, !dbg !14469
  store i32 %call7, i32* %ret, align 4, !dbg !14470
  %21 = load i32, i32* %ret, align 4, !dbg !14471
  %tobool8 = icmp ne i32 %21, 0, !dbg !14471
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !14473

if.then9:                                         ; preds = %for.body
  %22 = load i32, i32* %ret, align 4, !dbg !14474
  store i32 %22, i32* %retval, align 4, !dbg !14475
  br label %return, !dbg !14475

if.end10:                                         ; preds = %for.body
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14476
  %ecc11 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %23, i32 0, i32 31, !dbg !14477
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc11, i32 0, i32 15, !dbg !14478
  %24 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !14478
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14479
  %26 = load i8*, i8** %p, align 8, !dbg !14480
  %27 = load i8*, i8** %ecc_calc, align 8, !dbg !14481
  %28 = load i32, i32* %i, align 4, !dbg !14482
  %idxprom = sext i32 %28 to i64, !dbg !14481
  %arrayidx = getelementptr i8, i8* %27, i64 %idxprom, !dbg !14481
  %call12 = call i32 %24(%struct.nand_chip* %25, i8* %26, i8* %arrayidx) #8, !dbg !14476
  br label %for.inc, !dbg !14483

for.inc:                                          ; preds = %if.end10
  %29 = load i32, i32* %eccsteps, align 4, !dbg !14484
  %dec = add i32 %29, -1, !dbg !14484
  store i32 %dec, i32* %eccsteps, align 4, !dbg !14484
  %30 = load i32, i32* %eccbytes, align 4, !dbg !14485
  %31 = load i32, i32* %i, align 4, !dbg !14486
  %add = add i32 %31, %30, !dbg !14486
  store i32 %add, i32* %i, align 4, !dbg !14486
  %32 = load i32, i32* %eccsize, align 4, !dbg !14487
  %33 = load i8*, i8** %p, align 8, !dbg !14488
  %idx.ext = sext i32 %32 to i64, !dbg !14488
  %add.ptr = getelementptr i8, i8* %33, i64 %idx.ext, !dbg !14488
  store i8* %add.ptr, i8** %p, align 8, !dbg !14488
  br label %for.cond, !dbg !14489, !llvm.loop !14490

for.end:                                          ; preds = %for.cond
  %34 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14492
  %35 = load i8*, i8** %ecc_calc, align 8, !dbg !14493
  %36 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14494
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %36, i32 0, i32 23, !dbg !14495
  %37 = load i8*, i8** %oob_poi, align 8, !dbg !14495
  %38 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14496
  %ecc13 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %38, i32 0, i32 31, !dbg !14497
  %total = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc13, i32 0, i32 6, !dbg !14498
  %39 = load i32, i32* %total, align 8, !dbg !14498
  %call14 = call i32 @mtd_ooblayout_set_eccbytes(%struct.mtd_info* %34, i8* %35, i8* %37, i32 0, i32 %39) #8, !dbg !14499
  store i32 %call14, i32* %ret, align 4, !dbg !14500
  %40 = load i32, i32* %ret, align 4, !dbg !14501
  %tobool15 = icmp ne i32 %40, 0, !dbg !14501
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !14503

if.then16:                                        ; preds = %for.end
  %41 = load i32, i32* %ret, align 4, !dbg !14504
  store i32 %41, i32* %retval, align 4, !dbg !14505
  br label %return, !dbg !14505

if.end17:                                         ; preds = %for.end
  %42 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14506
  %43 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14507
  %oob_poi18 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %43, i32 0, i32 23, !dbg !14508
  %44 = load i8*, i8** %oob_poi18, align 8, !dbg !14508
  %45 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14509
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %45, i32 0, i32 6, !dbg !14510
  %46 = load i32, i32* %oobsize, align 4, !dbg !14510
  %call19 = call i32 @nand_write_data_op(%struct.nand_chip* %42, i8* %44, i32 %46, i1 zeroext false) #8, !dbg !14511
  store i32 %call19, i32* %ret, align 4, !dbg !14512
  %47 = load i32, i32* %ret, align 4, !dbg !14513
  %tobool20 = icmp ne i32 %47, 0, !dbg !14513
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !14515

if.then21:                                        ; preds = %if.end17
  %48 = load i32, i32* %ret, align 4, !dbg !14516
  store i32 %48, i32* %retval, align 4, !dbg !14517
  br label %return, !dbg !14517

if.end22:                                         ; preds = %if.end17
  %49 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14518
  %call23 = call i32 @nand_prog_page_end_op(%struct.nand_chip* %49) #8, !dbg !14519
  store i32 %call23, i32* %retval, align 4, !dbg !14520
  br label %return, !dbg !14520

return:                                           ; preds = %if.end22, %if.then21, %if.then16, %if.then9, %if.then
  %50 = load i32, i32* %retval, align 4, !dbg !14521
  ret i32 %50, !dbg !14521
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_read_subpage(%struct.nand_chip* %chip, i32 %data_offs, i32 %readlen, i8* %bufpoi, i32 %page) #0 !dbg !14522 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %data_offs.addr = alloca i32, align 4
  %readlen.addr = alloca i32, align 4
  %bufpoi.addr = alloca i8*, align 8
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %start_step = alloca i32, align 4
  %end_step = alloca i32, align 4
  %num_steps = alloca i32, align 4
  %ret = alloca i32, align 4
  %p = alloca i8*, align 8
  %data_col_addr = alloca i32, align 4
  %i = alloca i32, align 4
  %gaps = alloca i32, align 4
  %datafrag_len = alloca i32, align 4
  %eccfrag_len = alloca i32, align 4
  %aligned_len = alloca i32, align 4
  %aligned_pos = alloca i32, align 4
  %busw = alloca i32, align 4
  %index = alloca i32, align 4
  %section = alloca i32, align 4
  %max_bitflips = alloca i32, align 4
  %oobregion = alloca %struct.mtd_oob_region, align 4
  %stat = alloca i32, align 4
  %__UNIQUE_ID___x256 = alloca i32, align 4
  %__UNIQUE_ID___y257 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !14523, metadata !DIExpression()), !dbg !14524
  store i32 %data_offs, i32* %data_offs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %data_offs.addr, metadata !14525, metadata !DIExpression()), !dbg !14526
  store i32 %readlen, i32* %readlen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %readlen.addr, metadata !14527, metadata !DIExpression()), !dbg !14528
  store i8* %bufpoi, i8** %bufpoi.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %bufpoi.addr, metadata !14529, metadata !DIExpression()), !dbg !14530
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !14531, metadata !DIExpression()), !dbg !14532
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !14533, metadata !DIExpression()), !dbg !14534
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14535
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !14536
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !14534
  call void @llvm.dbg.declare(metadata i32* %start_step, metadata !14537, metadata !DIExpression()), !dbg !14538
  call void @llvm.dbg.declare(metadata i32* %end_step, metadata !14539, metadata !DIExpression()), !dbg !14540
  call void @llvm.dbg.declare(metadata i32* %num_steps, metadata !14541, metadata !DIExpression()), !dbg !14542
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !14543, metadata !DIExpression()), !dbg !14544
  call void @llvm.dbg.declare(metadata i8** %p, metadata !14545, metadata !DIExpression()), !dbg !14546
  call void @llvm.dbg.declare(metadata i32* %data_col_addr, metadata !14547, metadata !DIExpression()), !dbg !14548
  call void @llvm.dbg.declare(metadata i32* %i, metadata !14549, metadata !DIExpression()), !dbg !14550
  call void @llvm.dbg.declare(metadata i32* %gaps, metadata !14551, metadata !DIExpression()), !dbg !14552
  store i32 0, i32* %gaps, align 4, !dbg !14552
  call void @llvm.dbg.declare(metadata i32* %datafrag_len, metadata !14553, metadata !DIExpression()), !dbg !14554
  call void @llvm.dbg.declare(metadata i32* %eccfrag_len, metadata !14555, metadata !DIExpression()), !dbg !14556
  call void @llvm.dbg.declare(metadata i32* %aligned_len, metadata !14557, metadata !DIExpression()), !dbg !14558
  call void @llvm.dbg.declare(metadata i32* %aligned_pos, metadata !14559, metadata !DIExpression()), !dbg !14560
  call void @llvm.dbg.declare(metadata i32* %busw, metadata !14561, metadata !DIExpression()), !dbg !14562
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14563
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 6, !dbg !14564
  %2 = load i32, i32* %options, align 8, !dbg !14564
  %conv = zext i32 %2 to i64, !dbg !14563
  %and = and i64 %conv, 2, !dbg !14565
  %tobool = icmp ne i64 %and, 0, !dbg !14566
  %3 = zext i1 %tobool to i64, !dbg !14566
  %cond = select i1 %tobool, i32 2, i32 1, !dbg !14566
  store i32 %cond, i32* %busw, align 4, !dbg !14562
  call void @llvm.dbg.declare(metadata i32* %index, metadata !14567, metadata !DIExpression()), !dbg !14568
  call void @llvm.dbg.declare(metadata i32* %section, metadata !14569, metadata !DIExpression()), !dbg !14570
  store i32 0, i32* %section, align 4, !dbg !14570
  call void @llvm.dbg.declare(metadata i32* %max_bitflips, metadata !14571, metadata !DIExpression()), !dbg !14572
  store i32 0, i32* %max_bitflips, align 4, !dbg !14572
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_region* %oobregion, metadata !14573, metadata !DIExpression()), !dbg !14574
  %4 = bitcast %struct.mtd_oob_region* %oobregion to i8*, !dbg !14574
  call void @llvm.memset.p0i8.i64(i8* align 4 %4, i8 0, i64 8, i1 false), !dbg !14574
  %5 = load i32, i32* %data_offs.addr, align 4, !dbg !14575
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14576
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %6, i32 0, i32 31, !dbg !14577
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !14578
  %7 = load i32, i32* %size, align 8, !dbg !14578
  %div = udiv i32 %5, %7, !dbg !14579
  store i32 %div, i32* %start_step, align 4, !dbg !14580
  %8 = load i32, i32* %data_offs.addr, align 4, !dbg !14581
  %9 = load i32, i32* %readlen.addr, align 4, !dbg !14582
  %add = add i32 %8, %9, !dbg !14583
  %sub = sub i32 %add, 1, !dbg !14584
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14585
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 31, !dbg !14586
  %size2 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 4, !dbg !14587
  %11 = load i32, i32* %size2, align 8, !dbg !14587
  %div3 = udiv i32 %sub, %11, !dbg !14588
  store i32 %div3, i32* %end_step, align 4, !dbg !14589
  %12 = load i32, i32* %end_step, align 4, !dbg !14590
  %13 = load i32, i32* %start_step, align 4, !dbg !14591
  %sub4 = sub i32 %12, %13, !dbg !14592
  %add5 = add i32 %sub4, 1, !dbg !14593
  store i32 %add5, i32* %num_steps, align 4, !dbg !14594
  %14 = load i32, i32* %start_step, align 4, !dbg !14595
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14596
  %ecc6 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 31, !dbg !14597
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc6, i32 0, i32 5, !dbg !14598
  %16 = load i32, i32* %bytes, align 4, !dbg !14598
  %mul = mul i32 %14, %16, !dbg !14599
  store i32 %mul, i32* %index, align 4, !dbg !14600
  %17 = load i32, i32* %num_steps, align 4, !dbg !14601
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14602
  %ecc7 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 31, !dbg !14603
  %size8 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc7, i32 0, i32 4, !dbg !14604
  %19 = load i32, i32* %size8, align 8, !dbg !14604
  %mul9 = mul i32 %17, %19, !dbg !14605
  store i32 %mul9, i32* %datafrag_len, align 4, !dbg !14606
  %20 = load i32, i32* %num_steps, align 4, !dbg !14607
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14608
  %ecc10 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 31, !dbg !14609
  %bytes11 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc10, i32 0, i32 5, !dbg !14610
  %22 = load i32, i32* %bytes11, align 4, !dbg !14610
  %mul12 = mul i32 %20, %22, !dbg !14611
  store i32 %mul12, i32* %eccfrag_len, align 4, !dbg !14612
  %23 = load i32, i32* %start_step, align 4, !dbg !14613
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14614
  %ecc13 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %24, i32 0, i32 31, !dbg !14615
  %size14 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc13, i32 0, i32 4, !dbg !14616
  %25 = load i32, i32* %size14, align 8, !dbg !14616
  %mul15 = mul i32 %23, %25, !dbg !14617
  store i32 %mul15, i32* %data_col_addr, align 4, !dbg !14618
  %26 = load i8*, i8** %bufpoi.addr, align 8, !dbg !14619
  %27 = load i32, i32* %data_col_addr, align 4, !dbg !14620
  %idx.ext = sext i32 %27 to i64, !dbg !14621
  %add.ptr = getelementptr i8, i8* %26, i64 %idx.ext, !dbg !14621
  store i8* %add.ptr, i8** %p, align 8, !dbg !14622
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14623
  %29 = load i32, i32* %page.addr, align 4, !dbg !14624
  %30 = load i32, i32* %data_col_addr, align 4, !dbg !14625
  %31 = load i8*, i8** %p, align 8, !dbg !14626
  %32 = load i32, i32* %datafrag_len, align 4, !dbg !14627
  %call16 = call i32 @nand_read_page_op(%struct.nand_chip* %28, i32 %29, i32 %30, i8* %31, i32 %32) #8, !dbg !14628
  store i32 %call16, i32* %ret, align 4, !dbg !14629
  %33 = load i32, i32* %ret, align 4, !dbg !14630
  %tobool17 = icmp ne i32 %33, 0, !dbg !14630
  br i1 %tobool17, label %if.then, label %if.end, !dbg !14632

if.then:                                          ; preds = %entry
  %34 = load i32, i32* %ret, align 4, !dbg !14633
  store i32 %34, i32* %retval, align 4, !dbg !14634
  br label %return, !dbg !14634

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !14635
  br label %for.cond, !dbg !14637

for.cond:                                         ; preds = %for.inc, %if.end
  %35 = load i32, i32* %i, align 4, !dbg !14638
  %36 = load i32, i32* %eccfrag_len, align 4, !dbg !14640
  %cmp = icmp slt i32 %35, %36, !dbg !14641
  br i1 %cmp, label %for.body, label %for.end, !dbg !14642

for.body:                                         ; preds = %for.cond
  %37 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14643
  %ecc19 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %37, i32 0, i32 31, !dbg !14644
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc19, i32 0, i32 15, !dbg !14645
  %38 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !14645
  %39 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14646
  %40 = load i8*, i8** %p, align 8, !dbg !14647
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14648
  %ecc20 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %41, i32 0, i32 31, !dbg !14649
  %calc_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc20, i32 0, i32 12, !dbg !14650
  %42 = load i8*, i8** %calc_buf, align 8, !dbg !14650
  %43 = load i32, i32* %i, align 4, !dbg !14651
  %idxprom = sext i32 %43 to i64, !dbg !14648
  %arrayidx = getelementptr i8, i8* %42, i64 %idxprom, !dbg !14648
  %call21 = call i32 %38(%struct.nand_chip* %39, i8* %40, i8* %arrayidx) #8, !dbg !14643
  br label %for.inc, !dbg !14643

for.inc:                                          ; preds = %for.body
  %44 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14652
  %ecc22 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %44, i32 0, i32 31, !dbg !14653
  %bytes23 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc22, i32 0, i32 5, !dbg !14654
  %45 = load i32, i32* %bytes23, align 4, !dbg !14654
  %46 = load i32, i32* %i, align 4, !dbg !14655
  %add24 = add i32 %46, %45, !dbg !14655
  store i32 %add24, i32* %i, align 4, !dbg !14655
  %47 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14656
  %ecc25 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %47, i32 0, i32 31, !dbg !14657
  %size26 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc25, i32 0, i32 4, !dbg !14658
  %48 = load i32, i32* %size26, align 8, !dbg !14658
  %49 = load i8*, i8** %p, align 8, !dbg !14659
  %idx.ext27 = sext i32 %48 to i64, !dbg !14659
  %add.ptr28 = getelementptr i8, i8* %49, i64 %idx.ext27, !dbg !14659
  store i8* %add.ptr28, i8** %p, align 8, !dbg !14659
  br label %for.cond, !dbg !14660, !llvm.loop !14661

for.end:                                          ; preds = %for.cond
  %50 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14663
  %51 = load i32, i32* %index, align 4, !dbg !14664
  %call29 = call i32 @mtd_ooblayout_find_eccregion(%struct.mtd_info* %50, i32 %51, i32* %section, %struct.mtd_oob_region* %oobregion) #8, !dbg !14665
  store i32 %call29, i32* %ret, align 4, !dbg !14666
  %52 = load i32, i32* %ret, align 4, !dbg !14667
  %tobool30 = icmp ne i32 %52, 0, !dbg !14667
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !14669

if.then31:                                        ; preds = %for.end
  %53 = load i32, i32* %ret, align 4, !dbg !14670
  store i32 %53, i32* %retval, align 4, !dbg !14671
  br label %return, !dbg !14671

if.end32:                                         ; preds = %for.end
  %length = getelementptr inbounds %struct.mtd_oob_region, %struct.mtd_oob_region* %oobregion, i32 0, i32 1, !dbg !14672
  %54 = load i32, i32* %length, align 4, !dbg !14672
  %55 = load i32, i32* %eccfrag_len, align 4, !dbg !14674
  %cmp33 = icmp ult i32 %54, %55, !dbg !14675
  br i1 %cmp33, label %if.then35, label %if.end36, !dbg !14676

if.then35:                                        ; preds = %if.end32
  store i32 1, i32* %gaps, align 4, !dbg !14677
  br label %if.end36, !dbg !14678

if.end36:                                         ; preds = %if.then35, %if.end32
  %56 = load i32, i32* %gaps, align 4, !dbg !14679
  %tobool37 = icmp ne i32 %56, 0, !dbg !14679
  br i1 %tobool37, label %if.then38, label %if.else, !dbg !14681

if.then38:                                        ; preds = %if.end36
  %57 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14682
  %58 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14684
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %58, i32 0, i32 4, !dbg !14685
  %59 = load i32, i32* %writesize, align 4, !dbg !14685
  %60 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14686
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %60, i32 0, i32 23, !dbg !14687
  %61 = load i8*, i8** %oob_poi, align 8, !dbg !14687
  %62 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14688
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %62, i32 0, i32 6, !dbg !14689
  %63 = load i32, i32* %oobsize, align 4, !dbg !14689
  %call39 = call i32 @nand_change_read_column_op(%struct.nand_chip* %57, i32 %59, i8* %61, i32 %63, i1 zeroext false) #8, !dbg !14690
  store i32 %call39, i32* %ret, align 4, !dbg !14691
  %64 = load i32, i32* %ret, align 4, !dbg !14692
  %tobool40 = icmp ne i32 %64, 0, !dbg !14692
  br i1 %tobool40, label %if.then41, label %if.end42, !dbg !14694

if.then41:                                        ; preds = %if.then38
  %65 = load i32, i32* %ret, align 4, !dbg !14695
  store i32 %65, i32* %retval, align 4, !dbg !14696
  br label %return, !dbg !14696

if.end42:                                         ; preds = %if.then38
  br label %if.end71, !dbg !14697

if.else:                                          ; preds = %if.end36
  %offset = getelementptr inbounds %struct.mtd_oob_region, %struct.mtd_oob_region* %oobregion, i32 0, i32 0, !dbg !14698
  %66 = load i32, i32* %offset, align 4, !dbg !14698
  %67 = load i32, i32* %busw, align 4, !dbg !14700
  %sub43 = sub i32 %67, 1, !dbg !14701
  %neg = xor i32 %sub43, -1, !dbg !14702
  %and44 = and i32 %66, %neg, !dbg !14703
  store i32 %and44, i32* %aligned_pos, align 4, !dbg !14704
  %68 = load i32, i32* %eccfrag_len, align 4, !dbg !14705
  store i32 %68, i32* %aligned_len, align 4, !dbg !14706
  %offset45 = getelementptr inbounds %struct.mtd_oob_region, %struct.mtd_oob_region* %oobregion, i32 0, i32 0, !dbg !14707
  %69 = load i32, i32* %offset45, align 4, !dbg !14707
  %70 = load i32, i32* %busw, align 4, !dbg !14709
  %sub46 = sub i32 %70, 1, !dbg !14710
  %and47 = and i32 %69, %sub46, !dbg !14711
  %tobool48 = icmp ne i32 %and47, 0, !dbg !14711
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !14712

if.then49:                                        ; preds = %if.else
  %71 = load i32, i32* %aligned_len, align 4, !dbg !14713
  %inc = add i32 %71, 1, !dbg !14713
  store i32 %inc, i32* %aligned_len, align 4, !dbg !14713
  br label %if.end50, !dbg !14714

if.end50:                                         ; preds = %if.then49, %if.else
  %offset51 = getelementptr inbounds %struct.mtd_oob_region, %struct.mtd_oob_region* %oobregion, i32 0, i32 0, !dbg !14715
  %72 = load i32, i32* %offset51, align 4, !dbg !14715
  %73 = load i32, i32* %num_steps, align 4, !dbg !14717
  %74 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14718
  %ecc52 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %74, i32 0, i32 31, !dbg !14719
  %bytes53 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc52, i32 0, i32 5, !dbg !14720
  %75 = load i32, i32* %bytes53, align 4, !dbg !14720
  %mul54 = mul i32 %73, %75, !dbg !14721
  %add55 = add i32 %72, %mul54, !dbg !14722
  %76 = load i32, i32* %busw, align 4, !dbg !14723
  %sub56 = sub i32 %76, 1, !dbg !14724
  %and57 = and i32 %add55, %sub56, !dbg !14725
  %tobool58 = icmp ne i32 %and57, 0, !dbg !14725
  br i1 %tobool58, label %if.then59, label %if.end61, !dbg !14726

if.then59:                                        ; preds = %if.end50
  %77 = load i32, i32* %aligned_len, align 4, !dbg !14727
  %inc60 = add i32 %77, 1, !dbg !14727
  store i32 %inc60, i32* %aligned_len, align 4, !dbg !14727
  br label %if.end61, !dbg !14728

if.end61:                                         ; preds = %if.then59, %if.end50
  %78 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14729
  %79 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14730
  %writesize62 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %79, i32 0, i32 4, !dbg !14731
  %80 = load i32, i32* %writesize62, align 4, !dbg !14731
  %81 = load i32, i32* %aligned_pos, align 4, !dbg !14732
  %add63 = add i32 %80, %81, !dbg !14733
  %82 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14734
  %oob_poi64 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %82, i32 0, i32 23, !dbg !14735
  %83 = load i8*, i8** %oob_poi64, align 8, !dbg !14735
  %84 = load i32, i32* %aligned_pos, align 4, !dbg !14736
  %idxprom65 = sext i32 %84 to i64, !dbg !14734
  %arrayidx66 = getelementptr i8, i8* %83, i64 %idxprom65, !dbg !14734
  %85 = load i32, i32* %aligned_len, align 4, !dbg !14737
  %call67 = call i32 @nand_change_read_column_op(%struct.nand_chip* %78, i32 %add63, i8* %arrayidx66, i32 %85, i1 zeroext false) #8, !dbg !14738
  store i32 %call67, i32* %ret, align 4, !dbg !14739
  %86 = load i32, i32* %ret, align 4, !dbg !14740
  %tobool68 = icmp ne i32 %86, 0, !dbg !14740
  br i1 %tobool68, label %if.then69, label %if.end70, !dbg !14742

if.then69:                                        ; preds = %if.end61
  %87 = load i32, i32* %ret, align 4, !dbg !14743
  store i32 %87, i32* %retval, align 4, !dbg !14744
  br label %return, !dbg !14744

if.end70:                                         ; preds = %if.end61
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.end42
  %88 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14745
  %89 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14746
  %ecc72 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %89, i32 0, i32 31, !dbg !14747
  %code_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc72, i32 0, i32 13, !dbg !14748
  %90 = load i8*, i8** %code_buf, align 8, !dbg !14748
  %91 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14749
  %oob_poi73 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %91, i32 0, i32 23, !dbg !14750
  %92 = load i8*, i8** %oob_poi73, align 8, !dbg !14750
  %93 = load i32, i32* %index, align 4, !dbg !14751
  %94 = load i32, i32* %eccfrag_len, align 4, !dbg !14752
  %call74 = call i32 @mtd_ooblayout_get_eccbytes(%struct.mtd_info* %88, i8* %90, i8* %92, i32 %93, i32 %94) #8, !dbg !14753
  store i32 %call74, i32* %ret, align 4, !dbg !14754
  %95 = load i32, i32* %ret, align 4, !dbg !14755
  %tobool75 = icmp ne i32 %95, 0, !dbg !14755
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !14757

if.then76:                                        ; preds = %if.end71
  %96 = load i32, i32* %ret, align 4, !dbg !14758
  store i32 %96, i32* %retval, align 4, !dbg !14759
  br label %return, !dbg !14759

if.end77:                                         ; preds = %if.end71
  %97 = load i8*, i8** %bufpoi.addr, align 8, !dbg !14760
  %98 = load i32, i32* %data_col_addr, align 4, !dbg !14761
  %idx.ext78 = sext i32 %98 to i64, !dbg !14762
  %add.ptr79 = getelementptr i8, i8* %97, i64 %idx.ext78, !dbg !14762
  store i8* %add.ptr79, i8** %p, align 8, !dbg !14763
  store i32 0, i32* %i, align 4, !dbg !14764
  br label %for.cond80, !dbg !14766

for.cond80:                                       ; preds = %for.inc124, %if.end77
  %99 = load i32, i32* %i, align 4, !dbg !14767
  %100 = load i32, i32* %eccfrag_len, align 4, !dbg !14769
  %cmp81 = icmp slt i32 %99, %100, !dbg !14770
  br i1 %cmp81, label %for.body83, label %for.end132, !dbg !14771

for.body83:                                       ; preds = %for.cond80
  call void @llvm.dbg.declare(metadata i32* %stat, metadata !14772, metadata !DIExpression()), !dbg !14774
  %101 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14775
  %ecc84 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %101, i32 0, i32 31, !dbg !14776
  %correct = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc84, i32 0, i32 16, !dbg !14777
  %102 = load i32 (%struct.nand_chip*, i8*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*, i8*)** %correct, align 8, !dbg !14777
  %103 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14778
  %104 = load i8*, i8** %p, align 8, !dbg !14779
  %105 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14780
  %ecc85 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %105, i32 0, i32 31, !dbg !14781
  %code_buf86 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc85, i32 0, i32 13, !dbg !14782
  %106 = load i8*, i8** %code_buf86, align 8, !dbg !14782
  %107 = load i32, i32* %i, align 4, !dbg !14783
  %idxprom87 = sext i32 %107 to i64, !dbg !14780
  %arrayidx88 = getelementptr i8, i8* %106, i64 %idxprom87, !dbg !14780
  %108 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14784
  %ecc89 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %108, i32 0, i32 31, !dbg !14785
  %calc_buf90 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc89, i32 0, i32 12, !dbg !14786
  %109 = load i8*, i8** %calc_buf90, align 8, !dbg !14786
  %110 = load i32, i32* %i, align 4, !dbg !14787
  %idxprom91 = sext i32 %110 to i64, !dbg !14784
  %arrayidx92 = getelementptr i8, i8* %109, i64 %idxprom91, !dbg !14784
  %call93 = call i32 %102(%struct.nand_chip* %103, i8* %104, i8* %arrayidx88, i8* %arrayidx92) #8, !dbg !14775
  store i32 %call93, i32* %stat, align 4, !dbg !14788
  %111 = load i32, i32* %stat, align 4, !dbg !14789
  %cmp94 = icmp eq i32 %111, -74, !dbg !14791
  br i1 %cmp94, label %land.lhs.true, label %if.end112, !dbg !14792

land.lhs.true:                                    ; preds = %for.body83
  %112 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14793
  %ecc96 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %112, i32 0, i32 31, !dbg !14794
  %options97 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc96, i32 0, i32 10, !dbg !14795
  %113 = load i32, i32* %options97, align 8, !dbg !14795
  %conv98 = zext i32 %113 to i64, !dbg !14793
  %and99 = and i64 %conv98, 1, !dbg !14796
  %tobool100 = icmp ne i64 %and99, 0, !dbg !14796
  br i1 %tobool100, label %if.then101, label %if.end112, !dbg !14797

if.then101:                                       ; preds = %land.lhs.true
  %114 = load i8*, i8** %p, align 8, !dbg !14798
  %115 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14800
  %ecc102 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %115, i32 0, i32 31, !dbg !14801
  %size103 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc102, i32 0, i32 4, !dbg !14802
  %116 = load i32, i32* %size103, align 8, !dbg !14802
  %117 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14803
  %ecc104 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %117, i32 0, i32 31, !dbg !14804
  %code_buf105 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc104, i32 0, i32 13, !dbg !14805
  %118 = load i8*, i8** %code_buf105, align 8, !dbg !14805
  %119 = load i32, i32* %i, align 4, !dbg !14806
  %idxprom106 = sext i32 %119 to i64, !dbg !14803
  %arrayidx107 = getelementptr i8, i8* %118, i64 %idxprom106, !dbg !14803
  %120 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14807
  %ecc108 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %120, i32 0, i32 31, !dbg !14808
  %bytes109 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc108, i32 0, i32 5, !dbg !14809
  %121 = load i32, i32* %bytes109, align 4, !dbg !14809
  %122 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14810
  %ecc110 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %122, i32 0, i32 31, !dbg !14811
  %strength = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc110, i32 0, i32 7, !dbg !14812
  %123 = load i32, i32* %strength, align 4, !dbg !14812
  %call111 = call i32 @nand_check_erased_ecc_chunk(i8* %114, i32 %116, i8* %arrayidx107, i32 %121, i8* null, i32 0, i32 %123) #8, !dbg !14813
  store i32 %call111, i32* %stat, align 4, !dbg !14814
  br label %if.end112, !dbg !14815

if.end112:                                        ; preds = %if.then101, %land.lhs.true, %for.body83
  %124 = load i32, i32* %stat, align 4, !dbg !14816
  %cmp113 = icmp slt i32 %124, 0, !dbg !14818
  br i1 %cmp113, label %if.then115, label %if.else117, !dbg !14819

if.then115:                                       ; preds = %if.end112
  %125 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14820
  %ecc_stats = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %125, i32 0, i32 51, !dbg !14822
  %failed = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats, i32 0, i32 1, !dbg !14823
  %126 = load i32, i32* %failed, align 4, !dbg !14824
  %inc116 = add i32 %126, 1, !dbg !14824
  store i32 %inc116, i32* %failed, align 4, !dbg !14824
  br label %if.end123, !dbg !14825

if.else117:                                       ; preds = %if.end112
  %127 = load i32, i32* %stat, align 4, !dbg !14826
  %128 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14828
  %ecc_stats118 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %128, i32 0, i32 51, !dbg !14829
  %corrected = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats118, i32 0, i32 0, !dbg !14830
  %129 = load i32, i32* %corrected, align 8, !dbg !14831
  %add119 = add i32 %129, %127, !dbg !14831
  store i32 %add119, i32* %corrected, align 8, !dbg !14831
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x256, metadata !14832, metadata !DIExpression()), !dbg !14834
  %130 = load i32, i32* %max_bitflips, align 4, !dbg !14834
  store i32 %130, i32* %__UNIQUE_ID___x256, align 4, !dbg !14834
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y257, metadata !14835, metadata !DIExpression()), !dbg !14834
  %131 = load i32, i32* %stat, align 4, !dbg !14834
  store i32 %131, i32* %__UNIQUE_ID___y257, align 4, !dbg !14834
  %132 = load i32, i32* %__UNIQUE_ID___x256, align 4, !dbg !14834
  %133 = load i32, i32* %__UNIQUE_ID___y257, align 4, !dbg !14834
  %cmp120 = icmp ugt i32 %132, %133, !dbg !14834
  br i1 %cmp120, label %cond.true, label %cond.false, !dbg !14834

cond.true:                                        ; preds = %if.else117
  %134 = load i32, i32* %__UNIQUE_ID___x256, align 4, !dbg !14834
  br label %cond.end, !dbg !14834

cond.false:                                       ; preds = %if.else117
  %135 = load i32, i32* %__UNIQUE_ID___y257, align 4, !dbg !14834
  br label %cond.end, !dbg !14834

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond122 = phi i32 [ %134, %cond.true ], [ %135, %cond.false ], !dbg !14834
  store i32 %cond122, i32* %tmp, align 4, !dbg !14834
  %136 = load i32, i32* %tmp, align 4, !dbg !14834
  store i32 %136, i32* %max_bitflips, align 4, !dbg !14836
  br label %if.end123

if.end123:                                        ; preds = %cond.end, %if.then115
  br label %for.inc124, !dbg !14837

for.inc124:                                       ; preds = %if.end123
  %137 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14838
  %ecc125 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %137, i32 0, i32 31, !dbg !14839
  %bytes126 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc125, i32 0, i32 5, !dbg !14840
  %138 = load i32, i32* %bytes126, align 4, !dbg !14840
  %139 = load i32, i32* %i, align 4, !dbg !14841
  %add127 = add i32 %139, %138, !dbg !14841
  store i32 %add127, i32* %i, align 4, !dbg !14841
  %140 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14842
  %ecc128 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %140, i32 0, i32 31, !dbg !14843
  %size129 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc128, i32 0, i32 4, !dbg !14844
  %141 = load i32, i32* %size129, align 8, !dbg !14844
  %142 = load i8*, i8** %p, align 8, !dbg !14845
  %idx.ext130 = sext i32 %141 to i64, !dbg !14845
  %add.ptr131 = getelementptr i8, i8* %142, i64 %idx.ext130, !dbg !14845
  store i8* %add.ptr131, i8** %p, align 8, !dbg !14845
  br label %for.cond80, !dbg !14846, !llvm.loop !14847

for.end132:                                       ; preds = %for.cond80
  %143 = load i32, i32* %max_bitflips, align 4, !dbg !14849
  store i32 %143, i32* %retval, align 4, !dbg !14850
  br label %return, !dbg !14850

return:                                           ; preds = %for.end132, %if.then76, %if.then69, %if.then41, %if.then31, %if.then
  %144 = load i32, i32* %retval, align 4, !dbg !14851
  ret i32 %144, !dbg !14851
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_write_subpage_hwecc(%struct.nand_chip* %chip, i32 %offset, i32 %data_len, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !14852 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %offset.addr = alloca i32, align 4
  %data_len.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %oob_buf = alloca i8*, align 8
  %ecc_calc = alloca i8*, align 8
  %ecc_size = alloca i32, align 4
  %ecc_bytes = alloca i32, align 4
  %ecc_steps = alloca i32, align 4
  %start_step = alloca i32, align 4
  %end_step = alloca i32, align 4
  %oob_bytes = alloca i32, align 4
  %step = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !14853, metadata !DIExpression()), !dbg !14854
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !14855, metadata !DIExpression()), !dbg !14856
  store i32 %data_len, i32* %data_len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %data_len.addr, metadata !14857, metadata !DIExpression()), !dbg !14858
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !14859, metadata !DIExpression()), !dbg !14860
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !14861, metadata !DIExpression()), !dbg !14862
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !14863, metadata !DIExpression()), !dbg !14864
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !14865, metadata !DIExpression()), !dbg !14866
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14867
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !14868
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !14866
  call void @llvm.dbg.declare(metadata i8** %oob_buf, metadata !14869, metadata !DIExpression()), !dbg !14870
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14871
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 23, !dbg !14872
  %2 = load i8*, i8** %oob_poi, align 8, !dbg !14872
  store i8* %2, i8** %oob_buf, align 8, !dbg !14870
  call void @llvm.dbg.declare(metadata i8** %ecc_calc, metadata !14873, metadata !DIExpression()), !dbg !14874
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14875
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !14876
  %calc_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 12, !dbg !14877
  %4 = load i8*, i8** %calc_buf, align 8, !dbg !14877
  store i8* %4, i8** %ecc_calc, align 8, !dbg !14874
  call void @llvm.dbg.declare(metadata i32* %ecc_size, metadata !14878, metadata !DIExpression()), !dbg !14879
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14880
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 31, !dbg !14881
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 4, !dbg !14882
  %6 = load i32, i32* %size, align 8, !dbg !14882
  store i32 %6, i32* %ecc_size, align 4, !dbg !14879
  call void @llvm.dbg.declare(metadata i32* %ecc_bytes, metadata !14883, metadata !DIExpression()), !dbg !14884
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14885
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 31, !dbg !14886
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc2, i32 0, i32 5, !dbg !14887
  %8 = load i32, i32* %bytes, align 4, !dbg !14887
  store i32 %8, i32* %ecc_bytes, align 4, !dbg !14884
  call void @llvm.dbg.declare(metadata i32* %ecc_steps, metadata !14888, metadata !DIExpression()), !dbg !14889
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14890
  %ecc3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 31, !dbg !14891
  %steps = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc3, i32 0, i32 3, !dbg !14892
  %10 = load i32, i32* %steps, align 4, !dbg !14892
  store i32 %10, i32* %ecc_steps, align 4, !dbg !14889
  call void @llvm.dbg.declare(metadata i32* %start_step, metadata !14893, metadata !DIExpression()), !dbg !14894
  %11 = load i32, i32* %offset.addr, align 4, !dbg !14895
  %12 = load i32, i32* %ecc_size, align 4, !dbg !14896
  %div = udiv i32 %11, %12, !dbg !14897
  store i32 %div, i32* %start_step, align 4, !dbg !14894
  call void @llvm.dbg.declare(metadata i32* %end_step, metadata !14898, metadata !DIExpression()), !dbg !14899
  %13 = load i32, i32* %offset.addr, align 4, !dbg !14900
  %14 = load i32, i32* %data_len.addr, align 4, !dbg !14901
  %add = add i32 %13, %14, !dbg !14902
  %sub = sub i32 %add, 1, !dbg !14903
  %15 = load i32, i32* %ecc_size, align 4, !dbg !14904
  %div4 = udiv i32 %sub, %15, !dbg !14905
  store i32 %div4, i32* %end_step, align 4, !dbg !14899
  call void @llvm.dbg.declare(metadata i32* %oob_bytes, metadata !14906, metadata !DIExpression()), !dbg !14907
  %16 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14908
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %16, i32 0, i32 6, !dbg !14909
  %17 = load i32, i32* %oobsize, align 4, !dbg !14909
  %18 = load i32, i32* %ecc_steps, align 4, !dbg !14910
  %div5 = udiv i32 %17, %18, !dbg !14911
  store i32 %div5, i32* %oob_bytes, align 4, !dbg !14907
  call void @llvm.dbg.declare(metadata i32* %step, metadata !14912, metadata !DIExpression()), !dbg !14913
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !14914, metadata !DIExpression()), !dbg !14915
  %19 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14916
  %20 = load i32, i32* %page.addr, align 4, !dbg !14917
  %call6 = call i32 @nand_prog_page_begin_op(%struct.nand_chip* %19, i32 %20, i32 0, i8* null, i32 0) #8, !dbg !14918
  store i32 %call6, i32* %ret, align 4, !dbg !14919
  %21 = load i32, i32* %ret, align 4, !dbg !14920
  %tobool = icmp ne i32 %21, 0, !dbg !14920
  br i1 %tobool, label %if.then, label %if.end, !dbg !14922

if.then:                                          ; preds = %entry
  %22 = load i32, i32* %ret, align 4, !dbg !14923
  store i32 %22, i32* %retval, align 4, !dbg !14924
  br label %return, !dbg !14924

if.end:                                           ; preds = %entry
  store i32 0, i32* %step, align 4, !dbg !14925
  br label %for.cond, !dbg !14927

for.cond:                                         ; preds = %for.inc, %if.end
  %23 = load i32, i32* %step, align 4, !dbg !14928
  %24 = load i32, i32* %ecc_steps, align 4, !dbg !14930
  %cmp = icmp slt i32 %23, %24, !dbg !14931
  br i1 %cmp, label %for.body, label %for.end, !dbg !14932

for.body:                                         ; preds = %for.cond
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14933
  %ecc7 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %25, i32 0, i32 31, !dbg !14935
  %hwctl = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc7, i32 0, i32 14, !dbg !14936
  %26 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %hwctl, align 8, !dbg !14936
  %27 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14937
  call void %26(%struct.nand_chip* %27, i32 1) #8, !dbg !14933
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14938
  %29 = load i8*, i8** %buf.addr, align 8, !dbg !14939
  %30 = load i32, i32* %ecc_size, align 4, !dbg !14940
  %call8 = call i32 @nand_write_data_op(%struct.nand_chip* %28, i8* %29, i32 %30, i1 zeroext false) #8, !dbg !14941
  store i32 %call8, i32* %ret, align 4, !dbg !14942
  %31 = load i32, i32* %ret, align 4, !dbg !14943
  %tobool9 = icmp ne i32 %31, 0, !dbg !14943
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !14945

if.then10:                                        ; preds = %for.body
  %32 = load i32, i32* %ret, align 4, !dbg !14946
  store i32 %32, i32* %retval, align 4, !dbg !14947
  br label %return, !dbg !14947

if.end11:                                         ; preds = %for.body
  %33 = load i32, i32* %step, align 4, !dbg !14948
  %34 = load i32, i32* %start_step, align 4, !dbg !14950
  %cmp12 = icmp ult i32 %33, %34, !dbg !14951
  br i1 %cmp12, label %if.then14, label %lor.lhs.false, !dbg !14952

lor.lhs.false:                                    ; preds = %if.end11
  %35 = load i32, i32* %step, align 4, !dbg !14953
  %36 = load i32, i32* %end_step, align 4, !dbg !14954
  %cmp13 = icmp ugt i32 %35, %36, !dbg !14955
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !14956

if.then14:                                        ; preds = %lor.lhs.false, %if.end11
  %37 = load i8*, i8** %ecc_calc, align 8, !dbg !14957
  %38 = load i32, i32* %ecc_bytes, align 4, !dbg !14958
  %conv = sext i32 %38 to i64, !dbg !14958
  call void @llvm.memset.p0i8.i64(i8* align 1 %37, i8 -1, i64 %conv, i1 false), !dbg !14959
  br label %if.end17, !dbg !14959

if.else:                                          ; preds = %lor.lhs.false
  %39 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14960
  %ecc15 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %39, i32 0, i32 31, !dbg !14961
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc15, i32 0, i32 15, !dbg !14962
  %40 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !14962
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14963
  %42 = load i8*, i8** %buf.addr, align 8, !dbg !14964
  %43 = load i8*, i8** %ecc_calc, align 8, !dbg !14965
  %call16 = call i32 %40(%struct.nand_chip* %41, i8* %42, i8* %43) #8, !dbg !14960
  br label %if.end17

if.end17:                                         ; preds = %if.else, %if.then14
  %44 = load i32, i32* %oob_required.addr, align 4, !dbg !14966
  %tobool18 = icmp ne i32 %44, 0, !dbg !14966
  br i1 %tobool18, label %lor.lhs.false19, label %if.then25, !dbg !14968

lor.lhs.false19:                                  ; preds = %if.end17
  %45 = load i32, i32* %step, align 4, !dbg !14969
  %46 = load i32, i32* %start_step, align 4, !dbg !14970
  %cmp20 = icmp ult i32 %45, %46, !dbg !14971
  br i1 %cmp20, label %if.then25, label %lor.lhs.false22, !dbg !14972

lor.lhs.false22:                                  ; preds = %lor.lhs.false19
  %47 = load i32, i32* %step, align 4, !dbg !14973
  %48 = load i32, i32* %end_step, align 4, !dbg !14974
  %cmp23 = icmp ugt i32 %47, %48, !dbg !14975
  br i1 %cmp23, label %if.then25, label %if.end27, !dbg !14976

if.then25:                                        ; preds = %lor.lhs.false22, %lor.lhs.false19, %if.end17
  %49 = load i8*, i8** %oob_buf, align 8, !dbg !14977
  %50 = load i32, i32* %oob_bytes, align 4, !dbg !14978
  %conv26 = sext i32 %50 to i64, !dbg !14978
  call void @llvm.memset.p0i8.i64(i8* align 1 %49, i8 -1, i64 %conv26, i1 false), !dbg !14979
  br label %if.end27, !dbg !14979

if.end27:                                         ; preds = %if.then25, %lor.lhs.false22
  %51 = load i32, i32* %ecc_size, align 4, !dbg !14980
  %52 = load i8*, i8** %buf.addr, align 8, !dbg !14981
  %idx.ext = sext i32 %51 to i64, !dbg !14981
  %add.ptr = getelementptr i8, i8* %52, i64 %idx.ext, !dbg !14981
  store i8* %add.ptr, i8** %buf.addr, align 8, !dbg !14981
  %53 = load i32, i32* %ecc_bytes, align 4, !dbg !14982
  %54 = load i8*, i8** %ecc_calc, align 8, !dbg !14983
  %idx.ext28 = sext i32 %53 to i64, !dbg !14983
  %add.ptr29 = getelementptr i8, i8* %54, i64 %idx.ext28, !dbg !14983
  store i8* %add.ptr29, i8** %ecc_calc, align 8, !dbg !14983
  %55 = load i32, i32* %oob_bytes, align 4, !dbg !14984
  %56 = load i8*, i8** %oob_buf, align 8, !dbg !14985
  %idx.ext30 = sext i32 %55 to i64, !dbg !14985
  %add.ptr31 = getelementptr i8, i8* %56, i64 %idx.ext30, !dbg !14985
  store i8* %add.ptr31, i8** %oob_buf, align 8, !dbg !14985
  br label %for.inc, !dbg !14986

for.inc:                                          ; preds = %if.end27
  %57 = load i32, i32* %step, align 4, !dbg !14987
  %inc = add i32 %57, 1, !dbg !14987
  store i32 %inc, i32* %step, align 4, !dbg !14987
  br label %for.cond, !dbg !14988, !llvm.loop !14989

for.end:                                          ; preds = %for.cond
  %58 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14991
  %ecc32 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %58, i32 0, i32 31, !dbg !14992
  %calc_buf33 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc32, i32 0, i32 12, !dbg !14993
  %59 = load i8*, i8** %calc_buf33, align 8, !dbg !14993
  store i8* %59, i8** %ecc_calc, align 8, !dbg !14994
  %60 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !14995
  %61 = load i8*, i8** %ecc_calc, align 8, !dbg !14996
  %62 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14997
  %oob_poi34 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %62, i32 0, i32 23, !dbg !14998
  %63 = load i8*, i8** %oob_poi34, align 8, !dbg !14998
  %64 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !14999
  %ecc35 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %64, i32 0, i32 31, !dbg !15000
  %total = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc35, i32 0, i32 6, !dbg !15001
  %65 = load i32, i32* %total, align 8, !dbg !15001
  %call36 = call i32 @mtd_ooblayout_set_eccbytes(%struct.mtd_info* %60, i8* %61, i8* %63, i32 0, i32 %65) #8, !dbg !15002
  store i32 %call36, i32* %ret, align 4, !dbg !15003
  %66 = load i32, i32* %ret, align 4, !dbg !15004
  %tobool37 = icmp ne i32 %66, 0, !dbg !15004
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !15006

if.then38:                                        ; preds = %for.end
  %67 = load i32, i32* %ret, align 4, !dbg !15007
  store i32 %67, i32* %retval, align 4, !dbg !15008
  br label %return, !dbg !15008

if.end39:                                         ; preds = %for.end
  %68 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15009
  %69 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15010
  %oob_poi40 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %69, i32 0, i32 23, !dbg !15011
  %70 = load i8*, i8** %oob_poi40, align 8, !dbg !15011
  %71 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15012
  %oobsize41 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %71, i32 0, i32 6, !dbg !15013
  %72 = load i32, i32* %oobsize41, align 4, !dbg !15013
  %call42 = call i32 @nand_write_data_op(%struct.nand_chip* %68, i8* %70, i32 %72, i1 zeroext false) #8, !dbg !15014
  store i32 %call42, i32* %ret, align 4, !dbg !15015
  %73 = load i32, i32* %ret, align 4, !dbg !15016
  %tobool43 = icmp ne i32 %73, 0, !dbg !15016
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !15018

if.then44:                                        ; preds = %if.end39
  %74 = load i32, i32* %ret, align 4, !dbg !15019
  store i32 %74, i32* %retval, align 4, !dbg !15020
  br label %return, !dbg !15020

if.end45:                                         ; preds = %if.end39
  %75 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15021
  %call46 = call i32 @nand_prog_page_end_op(%struct.nand_chip* %75) #8, !dbg !15022
  store i32 %call46, i32* %retval, align 4, !dbg !15023
  br label %return, !dbg !15023

return:                                           ; preds = %if.end45, %if.then44, %if.then38, %if.then10, %if.then
  %76 = load i32, i32* %retval, align 4, !dbg !15024
  ret i32 %76, !dbg !15024
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_read_page_syndrome(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !15025 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %eccsize = alloca i32, align 4
  %eccbytes = alloca i32, align 4
  %eccsteps = alloca i32, align 4
  %eccpadbytes = alloca i32, align 4
  %p = alloca i8*, align 8
  %oob = alloca i8*, align 8
  %max_bitflips = alloca i32, align 4
  %stat = alloca i32, align 4
  %__UNIQUE_ID___x260 = alloca i32, align 4
  %__UNIQUE_ID___y261 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !15026, metadata !DIExpression()), !dbg !15027
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !15028, metadata !DIExpression()), !dbg !15029
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !15030, metadata !DIExpression()), !dbg !15031
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !15032, metadata !DIExpression()), !dbg !15033
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !15034, metadata !DIExpression()), !dbg !15035
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15036
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !15037
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !15035
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !15038, metadata !DIExpression()), !dbg !15039
  call void @llvm.dbg.declare(metadata i32* %i, metadata !15040, metadata !DIExpression()), !dbg !15041
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !15042, metadata !DIExpression()), !dbg !15043
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15044
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !15045
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !15046
  %2 = load i32, i32* %size, align 8, !dbg !15046
  store i32 %2, i32* %eccsize, align 4, !dbg !15043
  call void @llvm.dbg.declare(metadata i32* %eccbytes, metadata !15047, metadata !DIExpression()), !dbg !15048
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15049
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !15050
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 5, !dbg !15051
  %4 = load i32, i32* %bytes, align 4, !dbg !15051
  store i32 %4, i32* %eccbytes, align 4, !dbg !15048
  call void @llvm.dbg.declare(metadata i32* %eccsteps, metadata !15052, metadata !DIExpression()), !dbg !15053
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15054
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 31, !dbg !15055
  %steps = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc2, i32 0, i32 3, !dbg !15056
  %6 = load i32, i32* %steps, align 4, !dbg !15056
  store i32 %6, i32* %eccsteps, align 4, !dbg !15053
  call void @llvm.dbg.declare(metadata i32* %eccpadbytes, metadata !15057, metadata !DIExpression()), !dbg !15058
  %7 = load i32, i32* %eccbytes, align 4, !dbg !15059
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15060
  %ecc3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %8, i32 0, i32 31, !dbg !15061
  %prepad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc3, i32 0, i32 8, !dbg !15062
  %9 = load i32, i32* %prepad, align 8, !dbg !15062
  %add = add i32 %7, %9, !dbg !15063
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15064
  %ecc4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 31, !dbg !15065
  %postpad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc4, i32 0, i32 9, !dbg !15066
  %11 = load i32, i32* %postpad, align 4, !dbg !15066
  %add5 = add i32 %add, %11, !dbg !15067
  store i32 %add5, i32* %eccpadbytes, align 4, !dbg !15058
  call void @llvm.dbg.declare(metadata i8** %p, metadata !15068, metadata !DIExpression()), !dbg !15069
  %12 = load i8*, i8** %buf.addr, align 8, !dbg !15070
  store i8* %12, i8** %p, align 8, !dbg !15069
  call void @llvm.dbg.declare(metadata i8** %oob, metadata !15071, metadata !DIExpression()), !dbg !15072
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15073
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %13, i32 0, i32 23, !dbg !15074
  %14 = load i8*, i8** %oob_poi, align 8, !dbg !15074
  store i8* %14, i8** %oob, align 8, !dbg !15072
  call void @llvm.dbg.declare(metadata i32* %max_bitflips, metadata !15075, metadata !DIExpression()), !dbg !15076
  store i32 0, i32* %max_bitflips, align 4, !dbg !15076
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15077
  %16 = load i32, i32* %page.addr, align 4, !dbg !15078
  %call6 = call i32 @nand_read_page_op(%struct.nand_chip* %15, i32 %16, i32 0, i8* null, i32 0) #8, !dbg !15079
  store i32 %call6, i32* %ret, align 4, !dbg !15080
  %17 = load i32, i32* %ret, align 4, !dbg !15081
  %tobool = icmp ne i32 %17, 0, !dbg !15081
  br i1 %tobool, label %if.then, label %if.end, !dbg !15083

if.then:                                          ; preds = %entry
  %18 = load i32, i32* %ret, align 4, !dbg !15084
  store i32 %18, i32* %retval, align 4, !dbg !15085
  br label %return, !dbg !15085

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !15086
  br label %for.cond, !dbg !15088

for.cond:                                         ; preds = %for.inc, %if.end
  %19 = load i32, i32* %eccsteps, align 4, !dbg !15089
  %tobool7 = icmp ne i32 %19, 0, !dbg !15091
  br i1 %tobool7, label %for.body, label %for.end, !dbg !15091

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %stat, metadata !15092, metadata !DIExpression()), !dbg !15094
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15095
  %ecc8 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %20, i32 0, i32 31, !dbg !15096
  %hwctl = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc8, i32 0, i32 14, !dbg !15097
  %21 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %hwctl, align 8, !dbg !15097
  %22 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15098
  call void %21(%struct.nand_chip* %22, i32 0) #8, !dbg !15095
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15099
  %24 = load i8*, i8** %p, align 8, !dbg !15100
  %25 = load i32, i32* %eccsize, align 4, !dbg !15101
  %call9 = call i32 @nand_read_data_op(%struct.nand_chip* %23, i8* %24, i32 %25, i1 zeroext false, i1 zeroext false) #8, !dbg !15102
  store i32 %call9, i32* %ret, align 4, !dbg !15103
  %26 = load i32, i32* %ret, align 4, !dbg !15104
  %tobool10 = icmp ne i32 %26, 0, !dbg !15104
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !15106

if.then11:                                        ; preds = %for.body
  %27 = load i32, i32* %ret, align 4, !dbg !15107
  store i32 %27, i32* %retval, align 4, !dbg !15108
  br label %return, !dbg !15108

if.end12:                                         ; preds = %for.body
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15109
  %ecc13 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %28, i32 0, i32 31, !dbg !15111
  %prepad14 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc13, i32 0, i32 8, !dbg !15112
  %29 = load i32, i32* %prepad14, align 8, !dbg !15112
  %tobool15 = icmp ne i32 %29, 0, !dbg !15109
  br i1 %tobool15, label %if.then16, label %if.end25, !dbg !15113

if.then16:                                        ; preds = %if.end12
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15114
  %31 = load i8*, i8** %oob, align 8, !dbg !15116
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15117
  %ecc17 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %32, i32 0, i32 31, !dbg !15118
  %prepad18 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc17, i32 0, i32 8, !dbg !15119
  %33 = load i32, i32* %prepad18, align 8, !dbg !15119
  %call19 = call i32 @nand_read_data_op(%struct.nand_chip* %30, i8* %31, i32 %33, i1 zeroext false, i1 zeroext false) #8, !dbg !15120
  store i32 %call19, i32* %ret, align 4, !dbg !15121
  %34 = load i32, i32* %ret, align 4, !dbg !15122
  %tobool20 = icmp ne i32 %34, 0, !dbg !15122
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !15124

if.then21:                                        ; preds = %if.then16
  %35 = load i32, i32* %ret, align 4, !dbg !15125
  store i32 %35, i32* %retval, align 4, !dbg !15126
  br label %return, !dbg !15126

if.end22:                                         ; preds = %if.then16
  %36 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15127
  %ecc23 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %36, i32 0, i32 31, !dbg !15128
  %prepad24 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc23, i32 0, i32 8, !dbg !15129
  %37 = load i32, i32* %prepad24, align 8, !dbg !15129
  %38 = load i8*, i8** %oob, align 8, !dbg !15130
  %idx.ext = sext i32 %37 to i64, !dbg !15130
  %add.ptr = getelementptr i8, i8* %38, i64 %idx.ext, !dbg !15130
  store i8* %add.ptr, i8** %oob, align 8, !dbg !15130
  br label %if.end25, !dbg !15131

if.end25:                                         ; preds = %if.end22, %if.end12
  %39 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15132
  %ecc26 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %39, i32 0, i32 31, !dbg !15133
  %hwctl27 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc26, i32 0, i32 14, !dbg !15134
  %40 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %hwctl27, align 8, !dbg !15134
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15135
  call void %40(%struct.nand_chip* %41, i32 2) #8, !dbg !15132
  %42 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15136
  %43 = load i8*, i8** %oob, align 8, !dbg !15137
  %44 = load i32, i32* %eccbytes, align 4, !dbg !15138
  %call28 = call i32 @nand_read_data_op(%struct.nand_chip* %42, i8* %43, i32 %44, i1 zeroext false, i1 zeroext false) #8, !dbg !15139
  store i32 %call28, i32* %ret, align 4, !dbg !15140
  %45 = load i32, i32* %ret, align 4, !dbg !15141
  %tobool29 = icmp ne i32 %45, 0, !dbg !15141
  br i1 %tobool29, label %if.then30, label %if.end31, !dbg !15143

if.then30:                                        ; preds = %if.end25
  %46 = load i32, i32* %ret, align 4, !dbg !15144
  store i32 %46, i32* %retval, align 4, !dbg !15145
  br label %return, !dbg !15145

if.end31:                                         ; preds = %if.end25
  %47 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15146
  %ecc32 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %47, i32 0, i32 31, !dbg !15147
  %correct = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc32, i32 0, i32 16, !dbg !15148
  %48 = load i32 (%struct.nand_chip*, i8*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*, i8*)** %correct, align 8, !dbg !15148
  %49 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15149
  %50 = load i8*, i8** %p, align 8, !dbg !15150
  %51 = load i8*, i8** %oob, align 8, !dbg !15151
  %call33 = call i32 %48(%struct.nand_chip* %49, i8* %50, i8* %51, i8* null) #8, !dbg !15146
  store i32 %call33, i32* %stat, align 4, !dbg !15152
  %52 = load i32, i32* %eccbytes, align 4, !dbg !15153
  %53 = load i8*, i8** %oob, align 8, !dbg !15154
  %idx.ext34 = sext i32 %52 to i64, !dbg !15154
  %add.ptr35 = getelementptr i8, i8* %53, i64 %idx.ext34, !dbg !15154
  store i8* %add.ptr35, i8** %oob, align 8, !dbg !15154
  %54 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15155
  %ecc36 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %54, i32 0, i32 31, !dbg !15157
  %postpad37 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc36, i32 0, i32 9, !dbg !15158
  %55 = load i32, i32* %postpad37, align 4, !dbg !15158
  %tobool38 = icmp ne i32 %55, 0, !dbg !15155
  br i1 %tobool38, label %if.then39, label %if.end50, !dbg !15159

if.then39:                                        ; preds = %if.end31
  %56 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15160
  %57 = load i8*, i8** %oob, align 8, !dbg !15162
  %58 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15163
  %ecc40 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %58, i32 0, i32 31, !dbg !15164
  %postpad41 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc40, i32 0, i32 9, !dbg !15165
  %59 = load i32, i32* %postpad41, align 4, !dbg !15165
  %call42 = call i32 @nand_read_data_op(%struct.nand_chip* %56, i8* %57, i32 %59, i1 zeroext false, i1 zeroext false) #8, !dbg !15166
  store i32 %call42, i32* %ret, align 4, !dbg !15167
  %60 = load i32, i32* %ret, align 4, !dbg !15168
  %tobool43 = icmp ne i32 %60, 0, !dbg !15168
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !15170

if.then44:                                        ; preds = %if.then39
  %61 = load i32, i32* %ret, align 4, !dbg !15171
  store i32 %61, i32* %retval, align 4, !dbg !15172
  br label %return, !dbg !15172

if.end45:                                         ; preds = %if.then39
  %62 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15173
  %ecc46 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %62, i32 0, i32 31, !dbg !15174
  %postpad47 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc46, i32 0, i32 9, !dbg !15175
  %63 = load i32, i32* %postpad47, align 4, !dbg !15175
  %64 = load i8*, i8** %oob, align 8, !dbg !15176
  %idx.ext48 = sext i32 %63 to i64, !dbg !15176
  %add.ptr49 = getelementptr i8, i8* %64, i64 %idx.ext48, !dbg !15176
  store i8* %add.ptr49, i8** %oob, align 8, !dbg !15176
  br label %if.end50, !dbg !15177

if.end50:                                         ; preds = %if.end45, %if.end31
  %65 = load i32, i32* %stat, align 4, !dbg !15178
  %cmp = icmp eq i32 %65, -74, !dbg !15180
  br i1 %cmp, label %land.lhs.true, label %if.end60, !dbg !15181

land.lhs.true:                                    ; preds = %if.end50
  %66 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15182
  %ecc51 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %66, i32 0, i32 31, !dbg !15183
  %options = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc51, i32 0, i32 10, !dbg !15184
  %67 = load i32, i32* %options, align 8, !dbg !15184
  %conv = zext i32 %67 to i64, !dbg !15182
  %and = and i64 %conv, 1, !dbg !15185
  %tobool52 = icmp ne i64 %and, 0, !dbg !15185
  br i1 %tobool52, label %if.then53, label %if.end60, !dbg !15186

if.then53:                                        ; preds = %land.lhs.true
  %68 = load i8*, i8** %p, align 8, !dbg !15187
  %69 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15189
  %ecc54 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %69, i32 0, i32 31, !dbg !15190
  %size55 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc54, i32 0, i32 4, !dbg !15191
  %70 = load i32, i32* %size55, align 8, !dbg !15191
  %71 = load i8*, i8** %oob, align 8, !dbg !15192
  %72 = load i32, i32* %eccpadbytes, align 4, !dbg !15193
  %idx.ext56 = sext i32 %72 to i64, !dbg !15194
  %idx.neg = sub i64 0, %idx.ext56, !dbg !15194
  %add.ptr57 = getelementptr i8, i8* %71, i64 %idx.neg, !dbg !15194
  %73 = load i32, i32* %eccpadbytes, align 4, !dbg !15195
  %74 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15196
  %ecc58 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %74, i32 0, i32 31, !dbg !15197
  %strength = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc58, i32 0, i32 7, !dbg !15198
  %75 = load i32, i32* %strength, align 4, !dbg !15198
  %call59 = call i32 @nand_check_erased_ecc_chunk(i8* %68, i32 %70, i8* %add.ptr57, i32 %73, i8* null, i32 0, i32 %75) #8, !dbg !15199
  store i32 %call59, i32* %stat, align 4, !dbg !15200
  br label %if.end60, !dbg !15201

if.end60:                                         ; preds = %if.then53, %land.lhs.true, %if.end50
  %76 = load i32, i32* %stat, align 4, !dbg !15202
  %cmp61 = icmp slt i32 %76, 0, !dbg !15204
  br i1 %cmp61, label %if.then63, label %if.else, !dbg !15205

if.then63:                                        ; preds = %if.end60
  %77 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15206
  %ecc_stats = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %77, i32 0, i32 51, !dbg !15208
  %failed = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats, i32 0, i32 1, !dbg !15209
  %78 = load i32, i32* %failed, align 4, !dbg !15210
  %inc = add i32 %78, 1, !dbg !15210
  store i32 %inc, i32* %failed, align 4, !dbg !15210
  br label %if.end68, !dbg !15211

if.else:                                          ; preds = %if.end60
  %79 = load i32, i32* %stat, align 4, !dbg !15212
  %80 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15214
  %ecc_stats64 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %80, i32 0, i32 51, !dbg !15215
  %corrected = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats64, i32 0, i32 0, !dbg !15216
  %81 = load i32, i32* %corrected, align 8, !dbg !15217
  %add65 = add i32 %81, %79, !dbg !15217
  store i32 %add65, i32* %corrected, align 8, !dbg !15217
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x260, metadata !15218, metadata !DIExpression()), !dbg !15220
  %82 = load i32, i32* %max_bitflips, align 4, !dbg !15220
  store i32 %82, i32* %__UNIQUE_ID___x260, align 4, !dbg !15220
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y261, metadata !15221, metadata !DIExpression()), !dbg !15220
  %83 = load i32, i32* %stat, align 4, !dbg !15220
  store i32 %83, i32* %__UNIQUE_ID___y261, align 4, !dbg !15220
  %84 = load i32, i32* %__UNIQUE_ID___x260, align 4, !dbg !15220
  %85 = load i32, i32* %__UNIQUE_ID___y261, align 4, !dbg !15220
  %cmp66 = icmp ugt i32 %84, %85, !dbg !15220
  br i1 %cmp66, label %cond.true, label %cond.false, !dbg !15220

cond.true:                                        ; preds = %if.else
  %86 = load i32, i32* %__UNIQUE_ID___x260, align 4, !dbg !15220
  br label %cond.end, !dbg !15220

cond.false:                                       ; preds = %if.else
  %87 = load i32, i32* %__UNIQUE_ID___y261, align 4, !dbg !15220
  br label %cond.end, !dbg !15220

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %86, %cond.true ], [ %87, %cond.false ], !dbg !15220
  store i32 %cond, i32* %tmp, align 4, !dbg !15220
  %88 = load i32, i32* %tmp, align 4, !dbg !15220
  store i32 %88, i32* %max_bitflips, align 4, !dbg !15222
  br label %if.end68

if.end68:                                         ; preds = %cond.end, %if.then63
  br label %for.inc, !dbg !15223

for.inc:                                          ; preds = %if.end68
  %89 = load i32, i32* %eccsteps, align 4, !dbg !15224
  %dec = add i32 %89, -1, !dbg !15224
  store i32 %dec, i32* %eccsteps, align 4, !dbg !15224
  %90 = load i32, i32* %eccbytes, align 4, !dbg !15225
  %91 = load i32, i32* %i, align 4, !dbg !15226
  %add69 = add i32 %91, %90, !dbg !15226
  store i32 %add69, i32* %i, align 4, !dbg !15226
  %92 = load i32, i32* %eccsize, align 4, !dbg !15227
  %93 = load i8*, i8** %p, align 8, !dbg !15228
  %idx.ext70 = sext i32 %92 to i64, !dbg !15228
  %add.ptr71 = getelementptr i8, i8* %93, i64 %idx.ext70, !dbg !15228
  store i8* %add.ptr71, i8** %p, align 8, !dbg !15228
  br label %for.cond, !dbg !15229, !llvm.loop !15230

for.end:                                          ; preds = %for.cond
  %94 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15232
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %94, i32 0, i32 6, !dbg !15233
  %95 = load i32, i32* %oobsize, align 4, !dbg !15233
  %conv72 = zext i32 %95 to i64, !dbg !15232
  %96 = load i8*, i8** %oob, align 8, !dbg !15234
  %97 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15235
  %oob_poi73 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %97, i32 0, i32 23, !dbg !15236
  %98 = load i8*, i8** %oob_poi73, align 8, !dbg !15236
  %sub.ptr.lhs.cast = ptrtoint i8* %96 to i64, !dbg !15237
  %sub.ptr.rhs.cast = ptrtoint i8* %98 to i64, !dbg !15237
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !15237
  %sub = sub i64 %conv72, %sub.ptr.sub, !dbg !15238
  %conv74 = trunc i64 %sub to i32, !dbg !15232
  store i32 %conv74, i32* %i, align 4, !dbg !15239
  %99 = load i32, i32* %i, align 4, !dbg !15240
  %tobool75 = icmp ne i32 %99, 0, !dbg !15240
  br i1 %tobool75, label %if.then76, label %if.end81, !dbg !15242

if.then76:                                        ; preds = %for.end
  %100 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15243
  %101 = load i8*, i8** %oob, align 8, !dbg !15245
  %102 = load i32, i32* %i, align 4, !dbg !15246
  %call77 = call i32 @nand_read_data_op(%struct.nand_chip* %100, i8* %101, i32 %102, i1 zeroext false, i1 zeroext false) #8, !dbg !15247
  store i32 %call77, i32* %ret, align 4, !dbg !15248
  %103 = load i32, i32* %ret, align 4, !dbg !15249
  %tobool78 = icmp ne i32 %103, 0, !dbg !15249
  br i1 %tobool78, label %if.then79, label %if.end80, !dbg !15251

if.then79:                                        ; preds = %if.then76
  %104 = load i32, i32* %ret, align 4, !dbg !15252
  store i32 %104, i32* %retval, align 4, !dbg !15253
  br label %return, !dbg !15253

if.end80:                                         ; preds = %if.then76
  br label %if.end81, !dbg !15254

if.end81:                                         ; preds = %if.end80, %for.end
  %105 = load i32, i32* %max_bitflips, align 4, !dbg !15255
  store i32 %105, i32* %retval, align 4, !dbg !15256
  br label %return, !dbg !15256

return:                                           ; preds = %if.end81, %if.then79, %if.then44, %if.then30, %if.then21, %if.then11, %if.then
  %106 = load i32, i32* %retval, align 4, !dbg !15257
  ret i32 %106, !dbg !15257
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_write_page_syndrome(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !15258 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %i = alloca i32, align 4
  %eccsize = alloca i32, align 4
  %eccbytes = alloca i32, align 4
  %eccsteps = alloca i32, align 4
  %p = alloca i8*, align 8
  %oob = alloca i8*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !15259, metadata !DIExpression()), !dbg !15260
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !15261, metadata !DIExpression()), !dbg !15262
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !15263, metadata !DIExpression()), !dbg !15264
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !15265, metadata !DIExpression()), !dbg !15266
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !15267, metadata !DIExpression()), !dbg !15268
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15269
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !15270
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !15268
  call void @llvm.dbg.declare(metadata i32* %i, metadata !15271, metadata !DIExpression()), !dbg !15272
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !15273, metadata !DIExpression()), !dbg !15274
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15275
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !15276
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !15277
  %2 = load i32, i32* %size, align 8, !dbg !15277
  store i32 %2, i32* %eccsize, align 4, !dbg !15274
  call void @llvm.dbg.declare(metadata i32* %eccbytes, metadata !15278, metadata !DIExpression()), !dbg !15279
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15280
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !15281
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 5, !dbg !15282
  %4 = load i32, i32* %bytes, align 4, !dbg !15282
  store i32 %4, i32* %eccbytes, align 4, !dbg !15279
  call void @llvm.dbg.declare(metadata i32* %eccsteps, metadata !15283, metadata !DIExpression()), !dbg !15284
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15285
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 31, !dbg !15286
  %steps = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc2, i32 0, i32 3, !dbg !15287
  %6 = load i32, i32* %steps, align 4, !dbg !15287
  store i32 %6, i32* %eccsteps, align 4, !dbg !15284
  call void @llvm.dbg.declare(metadata i8** %p, metadata !15288, metadata !DIExpression()), !dbg !15289
  %7 = load i8*, i8** %buf.addr, align 8, !dbg !15290
  store i8* %7, i8** %p, align 8, !dbg !15289
  call void @llvm.dbg.declare(metadata i8** %oob, metadata !15291, metadata !DIExpression()), !dbg !15292
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15293
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %8, i32 0, i32 23, !dbg !15294
  %9 = load i8*, i8** %oob_poi, align 8, !dbg !15294
  store i8* %9, i8** %oob, align 8, !dbg !15292
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !15295, metadata !DIExpression()), !dbg !15296
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15297
  %11 = load i32, i32* %page.addr, align 4, !dbg !15298
  %call3 = call i32 @nand_prog_page_begin_op(%struct.nand_chip* %10, i32 %11, i32 0, i8* null, i32 0) #8, !dbg !15299
  store i32 %call3, i32* %ret, align 4, !dbg !15300
  %12 = load i32, i32* %ret, align 4, !dbg !15301
  %tobool = icmp ne i32 %12, 0, !dbg !15301
  br i1 %tobool, label %if.then, label %if.end, !dbg !15303

if.then:                                          ; preds = %entry
  %13 = load i32, i32* %ret, align 4, !dbg !15304
  store i32 %13, i32* %retval, align 4, !dbg !15305
  br label %return, !dbg !15305

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !15306
  br label %for.cond, !dbg !15308

for.cond:                                         ; preds = %for.inc, %if.end
  %14 = load i32, i32* %eccsteps, align 4, !dbg !15309
  %tobool4 = icmp ne i32 %14, 0, !dbg !15311
  br i1 %tobool4, label %for.body, label %for.end, !dbg !15311

for.body:                                         ; preds = %for.cond
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15312
  %ecc5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 31, !dbg !15314
  %hwctl = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc5, i32 0, i32 14, !dbg !15315
  %16 = load void (%struct.nand_chip*, i32)*, void (%struct.nand_chip*, i32)** %hwctl, align 8, !dbg !15315
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15316
  call void %16(%struct.nand_chip* %17, i32 1) #8, !dbg !15312
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15317
  %19 = load i8*, i8** %p, align 8, !dbg !15318
  %20 = load i32, i32* %eccsize, align 4, !dbg !15319
  %call6 = call i32 @nand_write_data_op(%struct.nand_chip* %18, i8* %19, i32 %20, i1 zeroext false) #8, !dbg !15320
  store i32 %call6, i32* %ret, align 4, !dbg !15321
  %21 = load i32, i32* %ret, align 4, !dbg !15322
  %tobool7 = icmp ne i32 %21, 0, !dbg !15322
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !15324

if.then8:                                         ; preds = %for.body
  %22 = load i32, i32* %ret, align 4, !dbg !15325
  store i32 %22, i32* %retval, align 4, !dbg !15326
  br label %return, !dbg !15326

if.end9:                                          ; preds = %for.body
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15327
  %ecc10 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %23, i32 0, i32 31, !dbg !15329
  %prepad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc10, i32 0, i32 8, !dbg !15330
  %24 = load i32, i32* %prepad, align 8, !dbg !15330
  %tobool11 = icmp ne i32 %24, 0, !dbg !15327
  br i1 %tobool11, label %if.then12, label %if.end21, !dbg !15331

if.then12:                                        ; preds = %if.end9
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15332
  %26 = load i8*, i8** %oob, align 8, !dbg !15334
  %27 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15335
  %ecc13 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %27, i32 0, i32 31, !dbg !15336
  %prepad14 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc13, i32 0, i32 8, !dbg !15337
  %28 = load i32, i32* %prepad14, align 8, !dbg !15337
  %call15 = call i32 @nand_write_data_op(%struct.nand_chip* %25, i8* %26, i32 %28, i1 zeroext false) #8, !dbg !15338
  store i32 %call15, i32* %ret, align 4, !dbg !15339
  %29 = load i32, i32* %ret, align 4, !dbg !15340
  %tobool16 = icmp ne i32 %29, 0, !dbg !15340
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !15342

if.then17:                                        ; preds = %if.then12
  %30 = load i32, i32* %ret, align 4, !dbg !15343
  store i32 %30, i32* %retval, align 4, !dbg !15344
  br label %return, !dbg !15344

if.end18:                                         ; preds = %if.then12
  %31 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15345
  %ecc19 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %31, i32 0, i32 31, !dbg !15346
  %prepad20 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc19, i32 0, i32 8, !dbg !15347
  %32 = load i32, i32* %prepad20, align 8, !dbg !15347
  %33 = load i8*, i8** %oob, align 8, !dbg !15348
  %idx.ext = sext i32 %32 to i64, !dbg !15348
  %add.ptr = getelementptr i8, i8* %33, i64 %idx.ext, !dbg !15348
  store i8* %add.ptr, i8** %oob, align 8, !dbg !15348
  br label %if.end21, !dbg !15349

if.end21:                                         ; preds = %if.end18, %if.end9
  %34 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15350
  %ecc22 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %34, i32 0, i32 31, !dbg !15351
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc22, i32 0, i32 15, !dbg !15352
  %35 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !15352
  %36 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15353
  %37 = load i8*, i8** %p, align 8, !dbg !15354
  %38 = load i8*, i8** %oob, align 8, !dbg !15355
  %call23 = call i32 %35(%struct.nand_chip* %36, i8* %37, i8* %38) #8, !dbg !15350
  %39 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15356
  %40 = load i8*, i8** %oob, align 8, !dbg !15357
  %41 = load i32, i32* %eccbytes, align 4, !dbg !15358
  %call24 = call i32 @nand_write_data_op(%struct.nand_chip* %39, i8* %40, i32 %41, i1 zeroext false) #8, !dbg !15359
  store i32 %call24, i32* %ret, align 4, !dbg !15360
  %42 = load i32, i32* %ret, align 4, !dbg !15361
  %tobool25 = icmp ne i32 %42, 0, !dbg !15361
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !15363

if.then26:                                        ; preds = %if.end21
  %43 = load i32, i32* %ret, align 4, !dbg !15364
  store i32 %43, i32* %retval, align 4, !dbg !15365
  br label %return, !dbg !15365

if.end27:                                         ; preds = %if.end21
  %44 = load i32, i32* %eccbytes, align 4, !dbg !15366
  %45 = load i8*, i8** %oob, align 8, !dbg !15367
  %idx.ext28 = sext i32 %44 to i64, !dbg !15367
  %add.ptr29 = getelementptr i8, i8* %45, i64 %idx.ext28, !dbg !15367
  store i8* %add.ptr29, i8** %oob, align 8, !dbg !15367
  %46 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15368
  %ecc30 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %46, i32 0, i32 31, !dbg !15370
  %postpad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc30, i32 0, i32 9, !dbg !15371
  %47 = load i32, i32* %postpad, align 4, !dbg !15371
  %tobool31 = icmp ne i32 %47, 0, !dbg !15368
  br i1 %tobool31, label %if.then32, label %if.end43, !dbg !15372

if.then32:                                        ; preds = %if.end27
  %48 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15373
  %49 = load i8*, i8** %oob, align 8, !dbg !15375
  %50 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15376
  %ecc33 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %50, i32 0, i32 31, !dbg !15377
  %postpad34 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc33, i32 0, i32 9, !dbg !15378
  %51 = load i32, i32* %postpad34, align 4, !dbg !15378
  %call35 = call i32 @nand_write_data_op(%struct.nand_chip* %48, i8* %49, i32 %51, i1 zeroext false) #8, !dbg !15379
  store i32 %call35, i32* %ret, align 4, !dbg !15380
  %52 = load i32, i32* %ret, align 4, !dbg !15381
  %tobool36 = icmp ne i32 %52, 0, !dbg !15381
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !15383

if.then37:                                        ; preds = %if.then32
  %53 = load i32, i32* %ret, align 4, !dbg !15384
  store i32 %53, i32* %retval, align 4, !dbg !15385
  br label %return, !dbg !15385

if.end38:                                         ; preds = %if.then32
  %54 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15386
  %ecc39 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %54, i32 0, i32 31, !dbg !15387
  %postpad40 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc39, i32 0, i32 9, !dbg !15388
  %55 = load i32, i32* %postpad40, align 4, !dbg !15388
  %56 = load i8*, i8** %oob, align 8, !dbg !15389
  %idx.ext41 = sext i32 %55 to i64, !dbg !15389
  %add.ptr42 = getelementptr i8, i8* %56, i64 %idx.ext41, !dbg !15389
  store i8* %add.ptr42, i8** %oob, align 8, !dbg !15389
  br label %if.end43, !dbg !15390

if.end43:                                         ; preds = %if.end38, %if.end27
  br label %for.inc, !dbg !15391

for.inc:                                          ; preds = %if.end43
  %57 = load i32, i32* %eccsteps, align 4, !dbg !15392
  %dec = add i32 %57, -1, !dbg !15392
  store i32 %dec, i32* %eccsteps, align 4, !dbg !15392
  %58 = load i32, i32* %eccbytes, align 4, !dbg !15393
  %59 = load i32, i32* %i, align 4, !dbg !15394
  %add = add i32 %59, %58, !dbg !15394
  store i32 %add, i32* %i, align 4, !dbg !15394
  %60 = load i32, i32* %eccsize, align 4, !dbg !15395
  %61 = load i8*, i8** %p, align 8, !dbg !15396
  %idx.ext44 = sext i32 %60 to i64, !dbg !15396
  %add.ptr45 = getelementptr i8, i8* %61, i64 %idx.ext44, !dbg !15396
  store i8* %add.ptr45, i8** %p, align 8, !dbg !15396
  br label %for.cond, !dbg !15397, !llvm.loop !15398

for.end:                                          ; preds = %for.cond
  %62 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15400
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %62, i32 0, i32 6, !dbg !15401
  %63 = load i32, i32* %oobsize, align 4, !dbg !15401
  %conv = zext i32 %63 to i64, !dbg !15400
  %64 = load i8*, i8** %oob, align 8, !dbg !15402
  %65 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15403
  %oob_poi46 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %65, i32 0, i32 23, !dbg !15404
  %66 = load i8*, i8** %oob_poi46, align 8, !dbg !15404
  %sub.ptr.lhs.cast = ptrtoint i8* %64 to i64, !dbg !15405
  %sub.ptr.rhs.cast = ptrtoint i8* %66 to i64, !dbg !15405
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !15405
  %sub = sub i64 %conv, %sub.ptr.sub, !dbg !15406
  %conv47 = trunc i64 %sub to i32, !dbg !15400
  store i32 %conv47, i32* %i, align 4, !dbg !15407
  %67 = load i32, i32* %i, align 4, !dbg !15408
  %tobool48 = icmp ne i32 %67, 0, !dbg !15408
  br i1 %tobool48, label %if.then49, label %if.end54, !dbg !15410

if.then49:                                        ; preds = %for.end
  %68 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15411
  %69 = load i8*, i8** %oob, align 8, !dbg !15413
  %70 = load i32, i32* %i, align 4, !dbg !15414
  %call50 = call i32 @nand_write_data_op(%struct.nand_chip* %68, i8* %69, i32 %70, i1 zeroext false) #8, !dbg !15415
  store i32 %call50, i32* %ret, align 4, !dbg !15416
  %71 = load i32, i32* %ret, align 4, !dbg !15417
  %tobool51 = icmp ne i32 %71, 0, !dbg !15417
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !15419

if.then52:                                        ; preds = %if.then49
  %72 = load i32, i32* %ret, align 4, !dbg !15420
  store i32 %72, i32* %retval, align 4, !dbg !15421
  br label %return, !dbg !15421

if.end53:                                         ; preds = %if.then49
  br label %if.end54, !dbg !15422

if.end54:                                         ; preds = %if.end53, %for.end
  %73 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15423
  %call55 = call i32 @nand_prog_page_end_op(%struct.nand_chip* %73) #8, !dbg !15424
  store i32 %call55, i32* %retval, align 4, !dbg !15425
  br label %return, !dbg !15425

return:                                           ; preds = %if.end54, %if.then52, %if.then37, %if.then26, %if.then17, %if.then8, %if.then
  %74 = load i32, i32* %retval, align 4, !dbg !15426
  ret i32 %74, !dbg !15426
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_read_page_raw_syndrome(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !15427 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %eccsize = alloca i32, align 4
  %eccbytes = alloca i32, align 4
  %oob = alloca i8*, align 8
  %steps = alloca i32, align 4
  %size2 = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !15428, metadata !DIExpression()), !dbg !15429
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !15430, metadata !DIExpression()), !dbg !15431
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !15432, metadata !DIExpression()), !dbg !15433
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !15434, metadata !DIExpression()), !dbg !15435
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !15436, metadata !DIExpression()), !dbg !15437
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15438
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !15439
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !15437
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !15440, metadata !DIExpression()), !dbg !15441
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15442
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !15443
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !15444
  %2 = load i32, i32* %size, align 8, !dbg !15444
  store i32 %2, i32* %eccsize, align 4, !dbg !15441
  call void @llvm.dbg.declare(metadata i32* %eccbytes, metadata !15445, metadata !DIExpression()), !dbg !15446
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15447
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !15448
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 5, !dbg !15449
  %4 = load i32, i32* %bytes, align 4, !dbg !15449
  store i32 %4, i32* %eccbytes, align 4, !dbg !15446
  call void @llvm.dbg.declare(metadata i8** %oob, metadata !15450, metadata !DIExpression()), !dbg !15451
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15452
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 23, !dbg !15453
  %6 = load i8*, i8** %oob_poi, align 8, !dbg !15453
  store i8* %6, i8** %oob, align 8, !dbg !15451
  call void @llvm.dbg.declare(metadata i32* %steps, metadata !15454, metadata !DIExpression()), !dbg !15455
  call void @llvm.dbg.declare(metadata i32* %size2, metadata !15456, metadata !DIExpression()), !dbg !15457
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !15458, metadata !DIExpression()), !dbg !15459
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15460
  %8 = load i32, i32* %page.addr, align 4, !dbg !15461
  %call3 = call i32 @nand_read_page_op(%struct.nand_chip* %7, i32 %8, i32 0, i8* null, i32 0) #8, !dbg !15462
  store i32 %call3, i32* %ret, align 4, !dbg !15463
  %9 = load i32, i32* %ret, align 4, !dbg !15464
  %tobool = icmp ne i32 %9, 0, !dbg !15464
  br i1 %tobool, label %if.then, label %if.end, !dbg !15466

if.then:                                          ; preds = %entry
  %10 = load i32, i32* %ret, align 4, !dbg !15467
  store i32 %10, i32* %retval, align 4, !dbg !15468
  br label %return, !dbg !15468

if.end:                                           ; preds = %entry
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15469
  %ecc4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 31, !dbg !15471
  %steps5 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc4, i32 0, i32 3, !dbg !15472
  %12 = load i32, i32* %steps5, align 4, !dbg !15472
  store i32 %12, i32* %steps, align 4, !dbg !15473
  br label %for.cond, !dbg !15474

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load i32, i32* %steps, align 4, !dbg !15475
  %cmp = icmp sgt i32 %13, 0, !dbg !15477
  br i1 %cmp, label %for.body, label %for.end, !dbg !15478

for.body:                                         ; preds = %for.cond
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15479
  %15 = load i8*, i8** %buf.addr, align 8, !dbg !15481
  %16 = load i32, i32* %eccsize, align 4, !dbg !15482
  %call6 = call i32 @nand_read_data_op(%struct.nand_chip* %14, i8* %15, i32 %16, i1 zeroext false, i1 zeroext false) #8, !dbg !15483
  store i32 %call6, i32* %ret, align 4, !dbg !15484
  %17 = load i32, i32* %ret, align 4, !dbg !15485
  %tobool7 = icmp ne i32 %17, 0, !dbg !15485
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !15487

if.then8:                                         ; preds = %for.body
  %18 = load i32, i32* %ret, align 4, !dbg !15488
  store i32 %18, i32* %retval, align 4, !dbg !15489
  br label %return, !dbg !15489

if.end9:                                          ; preds = %for.body
  %19 = load i32, i32* %eccsize, align 4, !dbg !15490
  %20 = load i8*, i8** %buf.addr, align 8, !dbg !15491
  %idx.ext = sext i32 %19 to i64, !dbg !15491
  %add.ptr = getelementptr i8, i8* %20, i64 %idx.ext, !dbg !15491
  store i8* %add.ptr, i8** %buf.addr, align 8, !dbg !15491
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15492
  %ecc10 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 31, !dbg !15494
  %prepad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc10, i32 0, i32 8, !dbg !15495
  %22 = load i32, i32* %prepad, align 8, !dbg !15495
  %tobool11 = icmp ne i32 %22, 0, !dbg !15492
  br i1 %tobool11, label %if.then12, label %if.end23, !dbg !15496

if.then12:                                        ; preds = %if.end9
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15497
  %24 = load i8*, i8** %oob, align 8, !dbg !15499
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15500
  %ecc13 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %25, i32 0, i32 31, !dbg !15501
  %prepad14 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc13, i32 0, i32 8, !dbg !15502
  %26 = load i32, i32* %prepad14, align 8, !dbg !15502
  %call15 = call i32 @nand_read_data_op(%struct.nand_chip* %23, i8* %24, i32 %26, i1 zeroext false, i1 zeroext false) #8, !dbg !15503
  store i32 %call15, i32* %ret, align 4, !dbg !15504
  %27 = load i32, i32* %ret, align 4, !dbg !15505
  %tobool16 = icmp ne i32 %27, 0, !dbg !15505
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !15507

if.then17:                                        ; preds = %if.then12
  %28 = load i32, i32* %ret, align 4, !dbg !15508
  store i32 %28, i32* %retval, align 4, !dbg !15509
  br label %return, !dbg !15509

if.end18:                                         ; preds = %if.then12
  %29 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15510
  %ecc19 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %29, i32 0, i32 31, !dbg !15511
  %prepad20 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc19, i32 0, i32 8, !dbg !15512
  %30 = load i32, i32* %prepad20, align 8, !dbg !15512
  %31 = load i8*, i8** %oob, align 8, !dbg !15513
  %idx.ext21 = sext i32 %30 to i64, !dbg !15513
  %add.ptr22 = getelementptr i8, i8* %31, i64 %idx.ext21, !dbg !15513
  store i8* %add.ptr22, i8** %oob, align 8, !dbg !15513
  br label %if.end23, !dbg !15514

if.end23:                                         ; preds = %if.end18, %if.end9
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15515
  %33 = load i8*, i8** %oob, align 8, !dbg !15516
  %34 = load i32, i32* %eccbytes, align 4, !dbg !15517
  %call24 = call i32 @nand_read_data_op(%struct.nand_chip* %32, i8* %33, i32 %34, i1 zeroext false, i1 zeroext false) #8, !dbg !15518
  store i32 %call24, i32* %ret, align 4, !dbg !15519
  %35 = load i32, i32* %ret, align 4, !dbg !15520
  %tobool25 = icmp ne i32 %35, 0, !dbg !15520
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !15522

if.then26:                                        ; preds = %if.end23
  %36 = load i32, i32* %ret, align 4, !dbg !15523
  store i32 %36, i32* %retval, align 4, !dbg !15524
  br label %return, !dbg !15524

if.end27:                                         ; preds = %if.end23
  %37 = load i32, i32* %eccbytes, align 4, !dbg !15525
  %38 = load i8*, i8** %oob, align 8, !dbg !15526
  %idx.ext28 = sext i32 %37 to i64, !dbg !15526
  %add.ptr29 = getelementptr i8, i8* %38, i64 %idx.ext28, !dbg !15526
  store i8* %add.ptr29, i8** %oob, align 8, !dbg !15526
  %39 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15527
  %ecc30 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %39, i32 0, i32 31, !dbg !15529
  %postpad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc30, i32 0, i32 9, !dbg !15530
  %40 = load i32, i32* %postpad, align 4, !dbg !15530
  %tobool31 = icmp ne i32 %40, 0, !dbg !15527
  br i1 %tobool31, label %if.then32, label %if.end43, !dbg !15531

if.then32:                                        ; preds = %if.end27
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15532
  %42 = load i8*, i8** %oob, align 8, !dbg !15534
  %43 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15535
  %ecc33 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %43, i32 0, i32 31, !dbg !15536
  %postpad34 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc33, i32 0, i32 9, !dbg !15537
  %44 = load i32, i32* %postpad34, align 4, !dbg !15537
  %call35 = call i32 @nand_read_data_op(%struct.nand_chip* %41, i8* %42, i32 %44, i1 zeroext false, i1 zeroext false) #8, !dbg !15538
  store i32 %call35, i32* %ret, align 4, !dbg !15539
  %45 = load i32, i32* %ret, align 4, !dbg !15540
  %tobool36 = icmp ne i32 %45, 0, !dbg !15540
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !15542

if.then37:                                        ; preds = %if.then32
  %46 = load i32, i32* %ret, align 4, !dbg !15543
  store i32 %46, i32* %retval, align 4, !dbg !15544
  br label %return, !dbg !15544

if.end38:                                         ; preds = %if.then32
  %47 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15545
  %ecc39 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %47, i32 0, i32 31, !dbg !15546
  %postpad40 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc39, i32 0, i32 9, !dbg !15547
  %48 = load i32, i32* %postpad40, align 4, !dbg !15547
  %49 = load i8*, i8** %oob, align 8, !dbg !15548
  %idx.ext41 = sext i32 %48 to i64, !dbg !15548
  %add.ptr42 = getelementptr i8, i8* %49, i64 %idx.ext41, !dbg !15548
  store i8* %add.ptr42, i8** %oob, align 8, !dbg !15548
  br label %if.end43, !dbg !15549

if.end43:                                         ; preds = %if.end38, %if.end27
  br label %for.inc, !dbg !15550

for.inc:                                          ; preds = %if.end43
  %50 = load i32, i32* %steps, align 4, !dbg !15551
  %dec = add i32 %50, -1, !dbg !15551
  store i32 %dec, i32* %steps, align 4, !dbg !15551
  br label %for.cond, !dbg !15552, !llvm.loop !15553

for.end:                                          ; preds = %for.cond
  %51 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15555
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %51, i32 0, i32 6, !dbg !15556
  %52 = load i32, i32* %oobsize, align 4, !dbg !15556
  %conv = zext i32 %52 to i64, !dbg !15555
  %53 = load i8*, i8** %oob, align 8, !dbg !15557
  %54 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15558
  %oob_poi44 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %54, i32 0, i32 23, !dbg !15559
  %55 = load i8*, i8** %oob_poi44, align 8, !dbg !15559
  %sub.ptr.lhs.cast = ptrtoint i8* %53 to i64, !dbg !15560
  %sub.ptr.rhs.cast = ptrtoint i8* %55 to i64, !dbg !15560
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !15560
  %sub = sub i64 %conv, %sub.ptr.sub, !dbg !15561
  %conv45 = trunc i64 %sub to i32, !dbg !15555
  store i32 %conv45, i32* %size2, align 4, !dbg !15562
  %56 = load i32, i32* %size2, align 4, !dbg !15563
  %tobool46 = icmp ne i32 %56, 0, !dbg !15563
  br i1 %tobool46, label %if.then47, label %if.end52, !dbg !15565

if.then47:                                        ; preds = %for.end
  %57 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15566
  %58 = load i8*, i8** %oob, align 8, !dbg !15568
  %59 = load i32, i32* %size2, align 4, !dbg !15569
  %call48 = call i32 @nand_read_data_op(%struct.nand_chip* %57, i8* %58, i32 %59, i1 zeroext false, i1 zeroext false) #8, !dbg !15570
  store i32 %call48, i32* %ret, align 4, !dbg !15571
  %60 = load i32, i32* %ret, align 4, !dbg !15572
  %tobool49 = icmp ne i32 %60, 0, !dbg !15572
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !15574

if.then50:                                        ; preds = %if.then47
  %61 = load i32, i32* %ret, align 4, !dbg !15575
  store i32 %61, i32* %retval, align 4, !dbg !15576
  br label %return, !dbg !15576

if.end51:                                         ; preds = %if.then47
  br label %if.end52, !dbg !15577

if.end52:                                         ; preds = %if.end51, %for.end
  store i32 0, i32* %retval, align 4, !dbg !15578
  br label %return, !dbg !15578

return:                                           ; preds = %if.end52, %if.then50, %if.then37, %if.then26, %if.then17, %if.then8, %if.then
  %62 = load i32, i32* %retval, align 4, !dbg !15579
  ret i32 %62, !dbg !15579
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_write_page_raw_syndrome(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !15580 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %eccsize = alloca i32, align 4
  %eccbytes = alloca i32, align 4
  %oob = alloca i8*, align 8
  %steps = alloca i32, align 4
  %size2 = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !15581, metadata !DIExpression()), !dbg !15582
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !15583, metadata !DIExpression()), !dbg !15584
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !15585, metadata !DIExpression()), !dbg !15586
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !15587, metadata !DIExpression()), !dbg !15588
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !15589, metadata !DIExpression()), !dbg !15590
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15591
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !15592
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !15590
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !15593, metadata !DIExpression()), !dbg !15594
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15595
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !15596
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !15597
  %2 = load i32, i32* %size, align 8, !dbg !15597
  store i32 %2, i32* %eccsize, align 4, !dbg !15594
  call void @llvm.dbg.declare(metadata i32* %eccbytes, metadata !15598, metadata !DIExpression()), !dbg !15599
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15600
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !15601
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 5, !dbg !15602
  %4 = load i32, i32* %bytes, align 4, !dbg !15602
  store i32 %4, i32* %eccbytes, align 4, !dbg !15599
  call void @llvm.dbg.declare(metadata i8** %oob, metadata !15603, metadata !DIExpression()), !dbg !15604
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15605
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 23, !dbg !15606
  %6 = load i8*, i8** %oob_poi, align 8, !dbg !15606
  store i8* %6, i8** %oob, align 8, !dbg !15604
  call void @llvm.dbg.declare(metadata i32* %steps, metadata !15607, metadata !DIExpression()), !dbg !15608
  call void @llvm.dbg.declare(metadata i32* %size2, metadata !15609, metadata !DIExpression()), !dbg !15610
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !15611, metadata !DIExpression()), !dbg !15612
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15613
  %8 = load i32, i32* %page.addr, align 4, !dbg !15614
  %call3 = call i32 @nand_prog_page_begin_op(%struct.nand_chip* %7, i32 %8, i32 0, i8* null, i32 0) #8, !dbg !15615
  store i32 %call3, i32* %ret, align 4, !dbg !15616
  %9 = load i32, i32* %ret, align 4, !dbg !15617
  %tobool = icmp ne i32 %9, 0, !dbg !15617
  br i1 %tobool, label %if.then, label %if.end, !dbg !15619

if.then:                                          ; preds = %entry
  %10 = load i32, i32* %ret, align 4, !dbg !15620
  store i32 %10, i32* %retval, align 4, !dbg !15621
  br label %return, !dbg !15621

if.end:                                           ; preds = %entry
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15622
  %ecc4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 31, !dbg !15624
  %steps5 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc4, i32 0, i32 3, !dbg !15625
  %12 = load i32, i32* %steps5, align 4, !dbg !15625
  store i32 %12, i32* %steps, align 4, !dbg !15626
  br label %for.cond, !dbg !15627

for.cond:                                         ; preds = %for.inc, %if.end
  %13 = load i32, i32* %steps, align 4, !dbg !15628
  %cmp = icmp sgt i32 %13, 0, !dbg !15630
  br i1 %cmp, label %for.body, label %for.end, !dbg !15631

for.body:                                         ; preds = %for.cond
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15632
  %15 = load i8*, i8** %buf.addr, align 8, !dbg !15634
  %16 = load i32, i32* %eccsize, align 4, !dbg !15635
  %call6 = call i32 @nand_write_data_op(%struct.nand_chip* %14, i8* %15, i32 %16, i1 zeroext false) #8, !dbg !15636
  store i32 %call6, i32* %ret, align 4, !dbg !15637
  %17 = load i32, i32* %ret, align 4, !dbg !15638
  %tobool7 = icmp ne i32 %17, 0, !dbg !15638
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !15640

if.then8:                                         ; preds = %for.body
  %18 = load i32, i32* %ret, align 4, !dbg !15641
  store i32 %18, i32* %retval, align 4, !dbg !15642
  br label %return, !dbg !15642

if.end9:                                          ; preds = %for.body
  %19 = load i32, i32* %eccsize, align 4, !dbg !15643
  %20 = load i8*, i8** %buf.addr, align 8, !dbg !15644
  %idx.ext = sext i32 %19 to i64, !dbg !15644
  %add.ptr = getelementptr i8, i8* %20, i64 %idx.ext, !dbg !15644
  store i8* %add.ptr, i8** %buf.addr, align 8, !dbg !15644
  %21 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15645
  %ecc10 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %21, i32 0, i32 31, !dbg !15647
  %prepad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc10, i32 0, i32 8, !dbg !15648
  %22 = load i32, i32* %prepad, align 8, !dbg !15648
  %tobool11 = icmp ne i32 %22, 0, !dbg !15645
  br i1 %tobool11, label %if.then12, label %if.end23, !dbg !15649

if.then12:                                        ; preds = %if.end9
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15650
  %24 = load i8*, i8** %oob, align 8, !dbg !15652
  %25 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15653
  %ecc13 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %25, i32 0, i32 31, !dbg !15654
  %prepad14 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc13, i32 0, i32 8, !dbg !15655
  %26 = load i32, i32* %prepad14, align 8, !dbg !15655
  %call15 = call i32 @nand_write_data_op(%struct.nand_chip* %23, i8* %24, i32 %26, i1 zeroext false) #8, !dbg !15656
  store i32 %call15, i32* %ret, align 4, !dbg !15657
  %27 = load i32, i32* %ret, align 4, !dbg !15658
  %tobool16 = icmp ne i32 %27, 0, !dbg !15658
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !15660

if.then17:                                        ; preds = %if.then12
  %28 = load i32, i32* %ret, align 4, !dbg !15661
  store i32 %28, i32* %retval, align 4, !dbg !15662
  br label %return, !dbg !15662

if.end18:                                         ; preds = %if.then12
  %29 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15663
  %ecc19 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %29, i32 0, i32 31, !dbg !15664
  %prepad20 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc19, i32 0, i32 8, !dbg !15665
  %30 = load i32, i32* %prepad20, align 8, !dbg !15665
  %31 = load i8*, i8** %oob, align 8, !dbg !15666
  %idx.ext21 = sext i32 %30 to i64, !dbg !15666
  %add.ptr22 = getelementptr i8, i8* %31, i64 %idx.ext21, !dbg !15666
  store i8* %add.ptr22, i8** %oob, align 8, !dbg !15666
  br label %if.end23, !dbg !15667

if.end23:                                         ; preds = %if.end18, %if.end9
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15668
  %33 = load i8*, i8** %oob, align 8, !dbg !15669
  %34 = load i32, i32* %eccbytes, align 4, !dbg !15670
  %call24 = call i32 @nand_write_data_op(%struct.nand_chip* %32, i8* %33, i32 %34, i1 zeroext false) #8, !dbg !15671
  store i32 %call24, i32* %ret, align 4, !dbg !15672
  %35 = load i32, i32* %ret, align 4, !dbg !15673
  %tobool25 = icmp ne i32 %35, 0, !dbg !15673
  br i1 %tobool25, label %if.then26, label %if.end27, !dbg !15675

if.then26:                                        ; preds = %if.end23
  %36 = load i32, i32* %ret, align 4, !dbg !15676
  store i32 %36, i32* %retval, align 4, !dbg !15677
  br label %return, !dbg !15677

if.end27:                                         ; preds = %if.end23
  %37 = load i32, i32* %eccbytes, align 4, !dbg !15678
  %38 = load i8*, i8** %oob, align 8, !dbg !15679
  %idx.ext28 = sext i32 %37 to i64, !dbg !15679
  %add.ptr29 = getelementptr i8, i8* %38, i64 %idx.ext28, !dbg !15679
  store i8* %add.ptr29, i8** %oob, align 8, !dbg !15679
  %39 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15680
  %ecc30 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %39, i32 0, i32 31, !dbg !15682
  %postpad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc30, i32 0, i32 9, !dbg !15683
  %40 = load i32, i32* %postpad, align 4, !dbg !15683
  %tobool31 = icmp ne i32 %40, 0, !dbg !15680
  br i1 %tobool31, label %if.then32, label %if.end43, !dbg !15684

if.then32:                                        ; preds = %if.end27
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15685
  %42 = load i8*, i8** %oob, align 8, !dbg !15687
  %43 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15688
  %ecc33 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %43, i32 0, i32 31, !dbg !15689
  %postpad34 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc33, i32 0, i32 9, !dbg !15690
  %44 = load i32, i32* %postpad34, align 4, !dbg !15690
  %call35 = call i32 @nand_write_data_op(%struct.nand_chip* %41, i8* %42, i32 %44, i1 zeroext false) #8, !dbg !15691
  store i32 %call35, i32* %ret, align 4, !dbg !15692
  %45 = load i32, i32* %ret, align 4, !dbg !15693
  %tobool36 = icmp ne i32 %45, 0, !dbg !15693
  br i1 %tobool36, label %if.then37, label %if.end38, !dbg !15695

if.then37:                                        ; preds = %if.then32
  %46 = load i32, i32* %ret, align 4, !dbg !15696
  store i32 %46, i32* %retval, align 4, !dbg !15697
  br label %return, !dbg !15697

if.end38:                                         ; preds = %if.then32
  %47 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15698
  %ecc39 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %47, i32 0, i32 31, !dbg !15699
  %postpad40 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc39, i32 0, i32 9, !dbg !15700
  %48 = load i32, i32* %postpad40, align 4, !dbg !15700
  %49 = load i8*, i8** %oob, align 8, !dbg !15701
  %idx.ext41 = sext i32 %48 to i64, !dbg !15701
  %add.ptr42 = getelementptr i8, i8* %49, i64 %idx.ext41, !dbg !15701
  store i8* %add.ptr42, i8** %oob, align 8, !dbg !15701
  br label %if.end43, !dbg !15702

if.end43:                                         ; preds = %if.end38, %if.end27
  br label %for.inc, !dbg !15703

for.inc:                                          ; preds = %if.end43
  %50 = load i32, i32* %steps, align 4, !dbg !15704
  %dec = add i32 %50, -1, !dbg !15704
  store i32 %dec, i32* %steps, align 4, !dbg !15704
  br label %for.cond, !dbg !15705, !llvm.loop !15706

for.end:                                          ; preds = %for.cond
  %51 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15708
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %51, i32 0, i32 6, !dbg !15709
  %52 = load i32, i32* %oobsize, align 4, !dbg !15709
  %conv = zext i32 %52 to i64, !dbg !15708
  %53 = load i8*, i8** %oob, align 8, !dbg !15710
  %54 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15711
  %oob_poi44 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %54, i32 0, i32 23, !dbg !15712
  %55 = load i8*, i8** %oob_poi44, align 8, !dbg !15712
  %sub.ptr.lhs.cast = ptrtoint i8* %53 to i64, !dbg !15713
  %sub.ptr.rhs.cast = ptrtoint i8* %55 to i64, !dbg !15713
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.rhs.cast, !dbg !15713
  %sub = sub i64 %conv, %sub.ptr.sub, !dbg !15714
  %conv45 = trunc i64 %sub to i32, !dbg !15708
  store i32 %conv45, i32* %size2, align 4, !dbg !15715
  %56 = load i32, i32* %size2, align 4, !dbg !15716
  %tobool46 = icmp ne i32 %56, 0, !dbg !15716
  br i1 %tobool46, label %if.then47, label %if.end52, !dbg !15718

if.then47:                                        ; preds = %for.end
  %57 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15719
  %58 = load i8*, i8** %oob, align 8, !dbg !15721
  %59 = load i32, i32* %size2, align 4, !dbg !15722
  %call48 = call i32 @nand_write_data_op(%struct.nand_chip* %57, i8* %58, i32 %59, i1 zeroext false) #8, !dbg !15723
  store i32 %call48, i32* %ret, align 4, !dbg !15724
  %60 = load i32, i32* %ret, align 4, !dbg !15725
  %tobool49 = icmp ne i32 %60, 0, !dbg !15725
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !15727

if.then50:                                        ; preds = %if.then47
  %61 = load i32, i32* %ret, align 4, !dbg !15728
  store i32 %61, i32* %retval, align 4, !dbg !15729
  br label %return, !dbg !15729

if.end51:                                         ; preds = %if.then47
  br label %if.end52, !dbg !15730

if.end52:                                         ; preds = %if.end51, %for.end
  %62 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15731
  %call53 = call i32 @nand_prog_page_end_op(%struct.nand_chip* %62) #8, !dbg !15732
  store i32 %call53, i32* %retval, align 4, !dbg !15733
  br label %return, !dbg !15733

return:                                           ; preds = %if.end52, %if.then50, %if.then37, %if.then26, %if.then17, %if.then8, %if.then
  %63 = load i32, i32* %retval, align 4, !dbg !15734
  ret i32 %63, !dbg !15734
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_read_oob_syndrome(%struct.nand_chip* %chip, i32 %page) #0 !dbg !15735 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %length = alloca i32, align 4
  %chunk = alloca i32, align 4
  %eccsize = alloca i32, align 4
  %bufpoi = alloca i8*, align 8
  %i = alloca i32, align 4
  %toread = alloca i32, align 4
  %sndrnd = alloca i32, align 4
  %pos = alloca i32, align 4
  %ret = alloca i32, align 4
  %ret11 = alloca i32, align 4
  %__UNIQUE_ID___x273 = alloca i32, align 4
  %__UNIQUE_ID___y274 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !15736, metadata !DIExpression()), !dbg !15737
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !15738, metadata !DIExpression()), !dbg !15739
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !15740, metadata !DIExpression()), !dbg !15741
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15742
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !15743
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !15741
  call void @llvm.dbg.declare(metadata i32* %length, metadata !15744, metadata !DIExpression()), !dbg !15745
  %1 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15746
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %1, i32 0, i32 6, !dbg !15747
  %2 = load i32, i32* %oobsize, align 4, !dbg !15747
  store i32 %2, i32* %length, align 4, !dbg !15745
  call void @llvm.dbg.declare(metadata i32* %chunk, metadata !15748, metadata !DIExpression()), !dbg !15749
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15750
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !15751
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 5, !dbg !15752
  %4 = load i32, i32* %bytes, align 4, !dbg !15752
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15753
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 31, !dbg !15754
  %prepad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 8, !dbg !15755
  %6 = load i32, i32* %prepad, align 8, !dbg !15755
  %add = add i32 %4, %6, !dbg !15756
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15757
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 31, !dbg !15758
  %postpad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc2, i32 0, i32 9, !dbg !15759
  %8 = load i32, i32* %postpad, align 4, !dbg !15759
  %add3 = add i32 %add, %8, !dbg !15760
  store i32 %add3, i32* %chunk, align 4, !dbg !15749
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !15761, metadata !DIExpression()), !dbg !15762
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15763
  %ecc4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 31, !dbg !15764
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc4, i32 0, i32 4, !dbg !15765
  %10 = load i32, i32* %size, align 8, !dbg !15765
  store i32 %10, i32* %eccsize, align 4, !dbg !15762
  call void @llvm.dbg.declare(metadata i8** %bufpoi, metadata !15766, metadata !DIExpression()), !dbg !15767
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15768
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 23, !dbg !15769
  %12 = load i8*, i8** %oob_poi, align 8, !dbg !15769
  store i8* %12, i8** %bufpoi, align 8, !dbg !15767
  call void @llvm.dbg.declare(metadata i32* %i, metadata !15770, metadata !DIExpression()), !dbg !15771
  call void @llvm.dbg.declare(metadata i32* %toread, metadata !15772, metadata !DIExpression()), !dbg !15773
  call void @llvm.dbg.declare(metadata i32* %sndrnd, metadata !15774, metadata !DIExpression()), !dbg !15775
  store i32 0, i32* %sndrnd, align 4, !dbg !15775
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !15776, metadata !DIExpression()), !dbg !15777
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !15778, metadata !DIExpression()), !dbg !15779
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15780
  %14 = load i32, i32* %page.addr, align 4, !dbg !15781
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15782
  %ecc5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 31, !dbg !15783
  %size6 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc5, i32 0, i32 4, !dbg !15784
  %16 = load i32, i32* %size6, align 8, !dbg !15784
  %call7 = call i32 @nand_read_page_op(%struct.nand_chip* %13, i32 %14, i32 %16, i8* null, i32 0) #8, !dbg !15785
  store i32 %call7, i32* %ret, align 4, !dbg !15786
  %17 = load i32, i32* %ret, align 4, !dbg !15787
  %tobool = icmp ne i32 %17, 0, !dbg !15787
  br i1 %tobool, label %if.then, label %if.end, !dbg !15789

if.then:                                          ; preds = %entry
  %18 = load i32, i32* %ret, align 4, !dbg !15790
  store i32 %18, i32* %retval, align 4, !dbg !15791
  br label %return, !dbg !15791

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !15792
  br label %for.cond, !dbg !15794

for.cond:                                         ; preds = %for.inc, %if.end
  %19 = load i32, i32* %i, align 4, !dbg !15795
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15797
  %ecc8 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %20, i32 0, i32 31, !dbg !15798
  %steps = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc8, i32 0, i32 3, !dbg !15799
  %21 = load i32, i32* %steps, align 4, !dbg !15799
  %cmp = icmp slt i32 %19, %21, !dbg !15800
  br i1 %cmp, label %for.body, label %for.end, !dbg !15801

for.body:                                         ; preds = %for.cond
  %22 = load i32, i32* %sndrnd, align 4, !dbg !15802
  %tobool9 = icmp ne i32 %22, 0, !dbg !15802
  br i1 %tobool9, label %if.then10, label %if.else22, !dbg !15805

if.then10:                                        ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %ret11, metadata !15806, metadata !DIExpression()), !dbg !15808
  %23 = load i32, i32* %eccsize, align 4, !dbg !15809
  %24 = load i32, i32* %i, align 4, !dbg !15810
  %25 = load i32, i32* %eccsize, align 4, !dbg !15811
  %26 = load i32, i32* %chunk, align 4, !dbg !15812
  %add12 = add i32 %25, %26, !dbg !15813
  %mul = mul i32 %24, %add12, !dbg !15814
  %add13 = add i32 %23, %mul, !dbg !15815
  store i32 %add13, i32* %pos, align 4, !dbg !15816
  %27 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15817
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %27, i32 0, i32 4, !dbg !15819
  %28 = load i32, i32* %writesize, align 4, !dbg !15819
  %cmp14 = icmp ugt i32 %28, 512, !dbg !15820
  br i1 %cmp14, label %if.then15, label %if.else, !dbg !15821

if.then15:                                        ; preds = %if.then10
  %29 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15822
  %30 = load i32, i32* %pos, align 4, !dbg !15823
  %call16 = call i32 @nand_change_read_column_op(%struct.nand_chip* %29, i32 %30, i8* null, i32 0, i1 zeroext false) #8, !dbg !15824
  store i32 %call16, i32* %ret11, align 4, !dbg !15825
  br label %if.end18, !dbg !15826

if.else:                                          ; preds = %if.then10
  %31 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15827
  %32 = load i32, i32* %page.addr, align 4, !dbg !15828
  %33 = load i32, i32* %pos, align 4, !dbg !15829
  %call17 = call i32 @nand_read_page_op(%struct.nand_chip* %31, i32 %32, i32 %33, i8* null, i32 0) #8, !dbg !15830
  store i32 %call17, i32* %ret11, align 4, !dbg !15831
  br label %if.end18

if.end18:                                         ; preds = %if.else, %if.then15
  %34 = load i32, i32* %ret11, align 4, !dbg !15832
  %tobool19 = icmp ne i32 %34, 0, !dbg !15832
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !15834

if.then20:                                        ; preds = %if.end18
  %35 = load i32, i32* %ret11, align 4, !dbg !15835
  store i32 %35, i32* %retval, align 4, !dbg !15836
  br label %return, !dbg !15836

if.end21:                                         ; preds = %if.end18
  br label %if.end23, !dbg !15837

if.else22:                                        ; preds = %for.body
  store i32 1, i32* %sndrnd, align 4, !dbg !15838
  br label %if.end23

if.end23:                                         ; preds = %if.else22, %if.end21
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x273, metadata !15839, metadata !DIExpression()), !dbg !15841
  %36 = load i32, i32* %length, align 4, !dbg !15841
  store i32 %36, i32* %__UNIQUE_ID___x273, align 4, !dbg !15841
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y274, metadata !15842, metadata !DIExpression()), !dbg !15841
  %37 = load i32, i32* %chunk, align 4, !dbg !15841
  store i32 %37, i32* %__UNIQUE_ID___y274, align 4, !dbg !15841
  %38 = load i32, i32* %__UNIQUE_ID___x273, align 4, !dbg !15841
  %39 = load i32, i32* %__UNIQUE_ID___y274, align 4, !dbg !15841
  %cmp24 = icmp slt i32 %38, %39, !dbg !15841
  br i1 %cmp24, label %cond.true, label %cond.false, !dbg !15841

cond.true:                                        ; preds = %if.end23
  %40 = load i32, i32* %__UNIQUE_ID___x273, align 4, !dbg !15841
  br label %cond.end, !dbg !15841

cond.false:                                       ; preds = %if.end23
  %41 = load i32, i32* %__UNIQUE_ID___y274, align 4, !dbg !15841
  br label %cond.end, !dbg !15841

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %40, %cond.true ], [ %41, %cond.false ], !dbg !15841
  store i32 %cond, i32* %tmp, align 4, !dbg !15841
  %42 = load i32, i32* %tmp, align 4, !dbg !15841
  store i32 %42, i32* %toread, align 4, !dbg !15843
  %43 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15844
  %44 = load i8*, i8** %bufpoi, align 8, !dbg !15845
  %45 = load i32, i32* %toread, align 4, !dbg !15846
  %call25 = call i32 @nand_read_data_op(%struct.nand_chip* %43, i8* %44, i32 %45, i1 zeroext false, i1 zeroext false) #8, !dbg !15847
  store i32 %call25, i32* %ret, align 4, !dbg !15848
  %46 = load i32, i32* %ret, align 4, !dbg !15849
  %tobool26 = icmp ne i32 %46, 0, !dbg !15849
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !15851

if.then27:                                        ; preds = %cond.end
  %47 = load i32, i32* %ret, align 4, !dbg !15852
  store i32 %47, i32* %retval, align 4, !dbg !15853
  br label %return, !dbg !15853

if.end28:                                         ; preds = %cond.end
  %48 = load i32, i32* %toread, align 4, !dbg !15854
  %49 = load i8*, i8** %bufpoi, align 8, !dbg !15855
  %idx.ext = sext i32 %48 to i64, !dbg !15855
  %add.ptr = getelementptr i8, i8* %49, i64 %idx.ext, !dbg !15855
  store i8* %add.ptr, i8** %bufpoi, align 8, !dbg !15855
  %50 = load i32, i32* %toread, align 4, !dbg !15856
  %51 = load i32, i32* %length, align 4, !dbg !15857
  %sub = sub i32 %51, %50, !dbg !15857
  store i32 %sub, i32* %length, align 4, !dbg !15857
  br label %for.inc, !dbg !15858

for.inc:                                          ; preds = %if.end28
  %52 = load i32, i32* %i, align 4, !dbg !15859
  %inc = add i32 %52, 1, !dbg !15859
  store i32 %inc, i32* %i, align 4, !dbg !15859
  br label %for.cond, !dbg !15860, !llvm.loop !15861

for.end:                                          ; preds = %for.cond
  %53 = load i32, i32* %length, align 4, !dbg !15863
  %cmp29 = icmp sgt i32 %53, 0, !dbg !15865
  br i1 %cmp29, label %if.then30, label %if.end35, !dbg !15866

if.then30:                                        ; preds = %for.end
  %54 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15867
  %55 = load i8*, i8** %bufpoi, align 8, !dbg !15869
  %56 = load i32, i32* %length, align 4, !dbg !15870
  %call31 = call i32 @nand_read_data_op(%struct.nand_chip* %54, i8* %55, i32 %56, i1 zeroext false, i1 zeroext false) #8, !dbg !15871
  store i32 %call31, i32* %ret, align 4, !dbg !15872
  %57 = load i32, i32* %ret, align 4, !dbg !15873
  %tobool32 = icmp ne i32 %57, 0, !dbg !15873
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !15875

if.then33:                                        ; preds = %if.then30
  %58 = load i32, i32* %ret, align 4, !dbg !15876
  store i32 %58, i32* %retval, align 4, !dbg !15877
  br label %return, !dbg !15877

if.end34:                                         ; preds = %if.then30
  br label %if.end35, !dbg !15878

if.end35:                                         ; preds = %if.end34, %for.end
  store i32 0, i32* %retval, align 4, !dbg !15879
  br label %return, !dbg !15879

return:                                           ; preds = %if.end35, %if.then33, %if.then27, %if.then20, %if.then
  %59 = load i32, i32* %retval, align 4, !dbg !15880
  ret i32 %59, !dbg !15880
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_write_oob_syndrome(%struct.nand_chip* %chip, i32 %page) #0 !dbg !15881 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %chunk = alloca i32, align 4
  %eccsize = alloca i32, align 4
  %length = alloca i32, align 4
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %len = alloca i32, align 4
  %pos = alloca i32, align 4
  %sndcmd = alloca i32, align 4
  %steps = alloca i32, align 4
  %bufpoi = alloca i8*, align 8
  %fill = alloca i32, align 4
  %num = alloca i32, align 4
  %__UNIQUE_ID___x275 = alloca i32, align 4
  %__UNIQUE_ID___y276 = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__UNIQUE_ID___x277 = alloca i32, align 4
  %__UNIQUE_ID___y278 = alloca i32, align 4
  %tmp38 = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !15882, metadata !DIExpression()), !dbg !15883
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !15884, metadata !DIExpression()), !dbg !15885
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !15886, metadata !DIExpression()), !dbg !15887
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15888
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !15889
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !15887
  call void @llvm.dbg.declare(metadata i32* %chunk, metadata !15890, metadata !DIExpression()), !dbg !15891
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15892
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !15893
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 5, !dbg !15894
  %2 = load i32, i32* %bytes, align 4, !dbg !15894
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15895
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !15896
  %prepad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 8, !dbg !15897
  %4 = load i32, i32* %prepad, align 8, !dbg !15897
  %add = add i32 %2, %4, !dbg !15898
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15899
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 31, !dbg !15900
  %postpad = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc2, i32 0, i32 9, !dbg !15901
  %6 = load i32, i32* %postpad, align 4, !dbg !15901
  %add3 = add i32 %add, %6, !dbg !15902
  store i32 %add3, i32* %chunk, align 4, !dbg !15891
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !15903, metadata !DIExpression()), !dbg !15904
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15905
  %ecc4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 31, !dbg !15906
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc4, i32 0, i32 4, !dbg !15907
  %8 = load i32, i32* %size, align 8, !dbg !15907
  store i32 %8, i32* %eccsize, align 4, !dbg !15904
  call void @llvm.dbg.declare(metadata i32* %length, metadata !15908, metadata !DIExpression()), !dbg !15909
  %9 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15910
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %9, i32 0, i32 6, !dbg !15911
  %10 = load i32, i32* %oobsize, align 4, !dbg !15911
  store i32 %10, i32* %length, align 4, !dbg !15909
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !15912, metadata !DIExpression()), !dbg !15913
  call void @llvm.dbg.declare(metadata i32* %i, metadata !15914, metadata !DIExpression()), !dbg !15915
  call void @llvm.dbg.declare(metadata i32* %len, metadata !15916, metadata !DIExpression()), !dbg !15917
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !15918, metadata !DIExpression()), !dbg !15919
  call void @llvm.dbg.declare(metadata i32* %sndcmd, metadata !15920, metadata !DIExpression()), !dbg !15921
  store i32 0, i32* %sndcmd, align 4, !dbg !15921
  call void @llvm.dbg.declare(metadata i32* %steps, metadata !15922, metadata !DIExpression()), !dbg !15923
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15924
  %ecc5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 31, !dbg !15925
  %steps6 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc5, i32 0, i32 3, !dbg !15926
  %12 = load i32, i32* %steps6, align 4, !dbg !15926
  store i32 %12, i32* %steps, align 4, !dbg !15923
  call void @llvm.dbg.declare(metadata i8** %bufpoi, metadata !15927, metadata !DIExpression()), !dbg !15928
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15929
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %13, i32 0, i32 23, !dbg !15930
  %14 = load i8*, i8** %oob_poi, align 8, !dbg !15930
  store i8* %14, i8** %bufpoi, align 8, !dbg !15928
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15931
  %ecc7 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %15, i32 0, i32 31, !dbg !15933
  %prepad8 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc7, i32 0, i32 8, !dbg !15934
  %16 = load i32, i32* %prepad8, align 8, !dbg !15934
  %tobool = icmp ne i32 %16, 0, !dbg !15931
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !15935

land.lhs.true:                                    ; preds = %entry
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15936
  %ecc9 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %17, i32 0, i32 31, !dbg !15937
  %postpad10 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc9, i32 0, i32 9, !dbg !15938
  %18 = load i32, i32* %postpad10, align 4, !dbg !15938
  %tobool11 = icmp ne i32 %18, 0, !dbg !15936
  br i1 %tobool11, label %if.else, label %if.then, !dbg !15939

if.then:                                          ; preds = %land.lhs.true
  %19 = load i32, i32* %steps, align 4, !dbg !15940
  %20 = load i32, i32* %eccsize, align 4, !dbg !15942
  %21 = load i32, i32* %chunk, align 4, !dbg !15943
  %add12 = add i32 %20, %21, !dbg !15944
  %mul = mul i32 %19, %add12, !dbg !15945
  store i32 %mul, i32* %pos, align 4, !dbg !15946
  store i32 0, i32* %steps, align 4, !dbg !15947
  br label %if.end, !dbg !15948

if.else:                                          ; preds = %land.lhs.true, %entry
  %22 = load i32, i32* %eccsize, align 4, !dbg !15949
  store i32 %22, i32* %pos, align 4, !dbg !15950
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %23 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15951
  %24 = load i32, i32* %page.addr, align 4, !dbg !15952
  %25 = load i32, i32* %pos, align 4, !dbg !15953
  %call13 = call i32 @nand_prog_page_begin_op(%struct.nand_chip* %23, i32 %24, i32 %25, i8* null, i32 0) #8, !dbg !15954
  store i32 %call13, i32* %ret, align 4, !dbg !15955
  %26 = load i32, i32* %ret, align 4, !dbg !15956
  %tobool14 = icmp ne i32 %26, 0, !dbg !15956
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !15958

if.then15:                                        ; preds = %if.end
  %27 = load i32, i32* %ret, align 4, !dbg !15959
  store i32 %27, i32* %retval, align 4, !dbg !15960
  br label %return, !dbg !15960

if.end16:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !15961
  br label %for.cond, !dbg !15963

for.cond:                                         ; preds = %for.inc, %if.end16
  %28 = load i32, i32* %i, align 4, !dbg !15964
  %29 = load i32, i32* %steps, align 4, !dbg !15966
  %cmp = icmp slt i32 %28, %29, !dbg !15967
  br i1 %cmp, label %for.body, label %for.end, !dbg !15968

for.body:                                         ; preds = %for.cond
  %30 = load i32, i32* %sndcmd, align 4, !dbg !15969
  %tobool17 = icmp ne i32 %30, 0, !dbg !15969
  br i1 %tobool17, label %if.then18, label %if.else36, !dbg !15972

if.then18:                                        ; preds = %for.body
  %31 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !15973
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %31, i32 0, i32 4, !dbg !15976
  %32 = load i32, i32* %writesize, align 4, !dbg !15976
  %cmp19 = icmp ule i32 %32, 512, !dbg !15977
  br i1 %cmp19, label %if.then20, label %if.else27, !dbg !15978

if.then20:                                        ; preds = %if.then18
  call void @llvm.dbg.declare(metadata i32* %fill, metadata !15979, metadata !DIExpression()), !dbg !15981
  store i32 -1, i32* %fill, align 4, !dbg !15981
  %33 = load i32, i32* %eccsize, align 4, !dbg !15982
  store i32 %33, i32* %len, align 4, !dbg !15983
  br label %while.cond, !dbg !15984

while.cond:                                       ; preds = %if.end26, %if.then20
  %34 = load i32, i32* %len, align 4, !dbg !15985
  %cmp21 = icmp sgt i32 %34, 0, !dbg !15986
  br i1 %cmp21, label %while.body, label %while.end, !dbg !15984

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %num, metadata !15987, metadata !DIExpression()), !dbg !15989
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x275, metadata !15990, metadata !DIExpression()), !dbg !15992
  %35 = load i32, i32* %len, align 4, !dbg !15992
  store i32 %35, i32* %__UNIQUE_ID___x275, align 4, !dbg !15992
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y276, metadata !15993, metadata !DIExpression()), !dbg !15992
  store i32 4, i32* %__UNIQUE_ID___y276, align 4, !dbg !15992
  %36 = load i32, i32* %__UNIQUE_ID___x275, align 4, !dbg !15992
  %37 = load i32, i32* %__UNIQUE_ID___y276, align 4, !dbg !15992
  %cmp22 = icmp slt i32 %36, %37, !dbg !15992
  br i1 %cmp22, label %cond.true, label %cond.false, !dbg !15992

cond.true:                                        ; preds = %while.body
  %38 = load i32, i32* %__UNIQUE_ID___x275, align 4, !dbg !15992
  br label %cond.end, !dbg !15992

cond.false:                                       ; preds = %while.body
  %39 = load i32, i32* %__UNIQUE_ID___y276, align 4, !dbg !15992
  br label %cond.end, !dbg !15992

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %38, %cond.true ], [ %39, %cond.false ], !dbg !15992
  store i32 %cond, i32* %tmp, align 4, !dbg !15992
  %40 = load i32, i32* %tmp, align 4, !dbg !15992
  store i32 %40, i32* %num, align 4, !dbg !15989
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !15994
  %42 = bitcast i32* %fill to i8*, !dbg !15995
  %43 = load i32, i32* %num, align 4, !dbg !15996
  %call23 = call i32 @nand_write_data_op(%struct.nand_chip* %41, i8* %42, i32 %43, i1 zeroext false) #8, !dbg !15997
  store i32 %call23, i32* %ret, align 4, !dbg !15998
  %44 = load i32, i32* %ret, align 4, !dbg !15999
  %tobool24 = icmp ne i32 %44, 0, !dbg !15999
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !16001

if.then25:                                        ; preds = %cond.end
  %45 = load i32, i32* %ret, align 4, !dbg !16002
  store i32 %45, i32* %retval, align 4, !dbg !16003
  br label %return, !dbg !16003

if.end26:                                         ; preds = %cond.end
  %46 = load i32, i32* %num, align 4, !dbg !16004
  %47 = load i32, i32* %len, align 4, !dbg !16005
  %sub = sub i32 %47, %46, !dbg !16005
  store i32 %sub, i32* %len, align 4, !dbg !16005
  br label %while.cond, !dbg !15984, !llvm.loop !16006

while.end:                                        ; preds = %while.cond
  br label %if.end35, !dbg !16008

if.else27:                                        ; preds = %if.then18
  %48 = load i32, i32* %eccsize, align 4, !dbg !16009
  %49 = load i32, i32* %i, align 4, !dbg !16011
  %50 = load i32, i32* %eccsize, align 4, !dbg !16012
  %51 = load i32, i32* %chunk, align 4, !dbg !16013
  %add28 = add i32 %50, %51, !dbg !16014
  %mul29 = mul i32 %49, %add28, !dbg !16015
  %add30 = add i32 %48, %mul29, !dbg !16016
  store i32 %add30, i32* %pos, align 4, !dbg !16017
  %52 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16018
  %53 = load i32, i32* %pos, align 4, !dbg !16019
  %call31 = call i32 @nand_change_write_column_op(%struct.nand_chip* %52, i32 %53, i8* null, i32 0, i1 zeroext false) #8, !dbg !16020
  store i32 %call31, i32* %ret, align 4, !dbg !16021
  %54 = load i32, i32* %ret, align 4, !dbg !16022
  %tobool32 = icmp ne i32 %54, 0, !dbg !16022
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !16024

if.then33:                                        ; preds = %if.else27
  %55 = load i32, i32* %ret, align 4, !dbg !16025
  store i32 %55, i32* %retval, align 4, !dbg !16026
  br label %return, !dbg !16026

if.end34:                                         ; preds = %if.else27
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %while.end
  br label %if.end37, !dbg !16027

if.else36:                                        ; preds = %for.body
  store i32 1, i32* %sndcmd, align 4, !dbg !16028
  br label %if.end37

if.end37:                                         ; preds = %if.else36, %if.end35
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x277, metadata !16029, metadata !DIExpression()), !dbg !16031
  %56 = load i32, i32* %length, align 4, !dbg !16031
  store i32 %56, i32* %__UNIQUE_ID___x277, align 4, !dbg !16031
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y278, metadata !16032, metadata !DIExpression()), !dbg !16031
  %57 = load i32, i32* %chunk, align 4, !dbg !16031
  store i32 %57, i32* %__UNIQUE_ID___y278, align 4, !dbg !16031
  %58 = load i32, i32* %__UNIQUE_ID___x277, align 4, !dbg !16031
  %59 = load i32, i32* %__UNIQUE_ID___y278, align 4, !dbg !16031
  %cmp39 = icmp slt i32 %58, %59, !dbg !16031
  br i1 %cmp39, label %cond.true40, label %cond.false41, !dbg !16031

cond.true40:                                      ; preds = %if.end37
  %60 = load i32, i32* %__UNIQUE_ID___x277, align 4, !dbg !16031
  br label %cond.end42, !dbg !16031

cond.false41:                                     ; preds = %if.end37
  %61 = load i32, i32* %__UNIQUE_ID___y278, align 4, !dbg !16031
  br label %cond.end42, !dbg !16031

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond43 = phi i32 [ %60, %cond.true40 ], [ %61, %cond.false41 ], !dbg !16031
  store i32 %cond43, i32* %tmp38, align 4, !dbg !16031
  %62 = load i32, i32* %tmp38, align 4, !dbg !16031
  store i32 %62, i32* %len, align 4, !dbg !16033
  %63 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16034
  %64 = load i8*, i8** %bufpoi, align 8, !dbg !16035
  %65 = load i32, i32* %len, align 4, !dbg !16036
  %call44 = call i32 @nand_write_data_op(%struct.nand_chip* %63, i8* %64, i32 %65, i1 zeroext false) #8, !dbg !16037
  store i32 %call44, i32* %ret, align 4, !dbg !16038
  %66 = load i32, i32* %ret, align 4, !dbg !16039
  %tobool45 = icmp ne i32 %66, 0, !dbg !16039
  br i1 %tobool45, label %if.then46, label %if.end47, !dbg !16041

if.then46:                                        ; preds = %cond.end42
  %67 = load i32, i32* %ret, align 4, !dbg !16042
  store i32 %67, i32* %retval, align 4, !dbg !16043
  br label %return, !dbg !16043

if.end47:                                         ; preds = %cond.end42
  %68 = load i32, i32* %len, align 4, !dbg !16044
  %69 = load i8*, i8** %bufpoi, align 8, !dbg !16045
  %idx.ext = sext i32 %68 to i64, !dbg !16045
  %add.ptr = getelementptr i8, i8* %69, i64 %idx.ext, !dbg !16045
  store i8* %add.ptr, i8** %bufpoi, align 8, !dbg !16045
  %70 = load i32, i32* %len, align 4, !dbg !16046
  %71 = load i32, i32* %length, align 4, !dbg !16047
  %sub48 = sub i32 %71, %70, !dbg !16047
  store i32 %sub48, i32* %length, align 4, !dbg !16047
  br label %for.inc, !dbg !16048

for.inc:                                          ; preds = %if.end47
  %72 = load i32, i32* %i, align 4, !dbg !16049
  %inc = add i32 %72, 1, !dbg !16049
  store i32 %inc, i32* %i, align 4, !dbg !16049
  br label %for.cond, !dbg !16050, !llvm.loop !16051

for.end:                                          ; preds = %for.cond
  %73 = load i32, i32* %length, align 4, !dbg !16053
  %cmp49 = icmp sgt i32 %73, 0, !dbg !16055
  br i1 %cmp49, label %if.then50, label %if.end55, !dbg !16056

if.then50:                                        ; preds = %for.end
  %74 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16057
  %75 = load i8*, i8** %bufpoi, align 8, !dbg !16059
  %76 = load i32, i32* %length, align 4, !dbg !16060
  %call51 = call i32 @nand_write_data_op(%struct.nand_chip* %74, i8* %75, i32 %76, i1 zeroext false) #8, !dbg !16061
  store i32 %call51, i32* %ret, align 4, !dbg !16062
  %77 = load i32, i32* %ret, align 4, !dbg !16063
  %tobool52 = icmp ne i32 %77, 0, !dbg !16063
  br i1 %tobool52, label %if.then53, label %if.end54, !dbg !16065

if.then53:                                        ; preds = %if.then50
  %78 = load i32, i32* %ret, align 4, !dbg !16066
  store i32 %78, i32* %retval, align 4, !dbg !16067
  br label %return, !dbg !16067

if.end54:                                         ; preds = %if.then50
  br label %if.end55, !dbg !16068

if.end55:                                         ; preds = %if.end54, %for.end
  %79 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16069
  %call56 = call i32 @nand_prog_page_end_op(%struct.nand_chip* %79) #8, !dbg !16070
  store i32 %call56, i32* %retval, align 4, !dbg !16071
  br label %return, !dbg !16071

return:                                           ; preds = %if.end55, %if.then53, %if.then46, %if.then33, %if.then25, %if.then15
  %80 = load i32, i32* %retval, align 4, !dbg !16072
  ret i32 %80, !dbg !16072
}

; Function Attrs: noredzone
declare dso_local i32 @mtd_ooblayout_get_eccbytes(%struct.mtd_info*, i8*, i8*, i32, i32) #2

; Function Attrs: noredzone
declare dso_local i32 @mtd_ooblayout_set_eccbytes(%struct.mtd_info*, i8*, i8*, i32, i32) #2

; Function Attrs: noredzone
declare dso_local i32 @mtd_ooblayout_find_eccregion(%struct.mtd_info*, i32, i32*, %struct.mtd_oob_region*) #2

; Function Attrs: noredzone
declare dso_local i32 @nand_calculate_ecc(%struct.nand_chip*, i8*, i8*) #2

; Function Attrs: noredzone
declare dso_local i32 @nand_correct_data(%struct.nand_chip*, i8*, i8*, i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_read_page_swecc(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !16073 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %i = alloca i32, align 4
  %eccsize = alloca i32, align 4
  %ret = alloca i32, align 4
  %eccbytes = alloca i32, align 4
  %eccsteps = alloca i32, align 4
  %p = alloca i8*, align 8
  %ecc_calc = alloca i8*, align 8
  %ecc_code = alloca i8*, align 8
  %max_bitflips = alloca i32, align 4
  %stat = alloca i32, align 4
  %__UNIQUE_ID___x254 = alloca i32, align 4
  %__UNIQUE_ID___y255 = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !16074, metadata !DIExpression()), !dbg !16075
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !16076, metadata !DIExpression()), !dbg !16077
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !16078, metadata !DIExpression()), !dbg !16079
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !16080, metadata !DIExpression()), !dbg !16081
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !16082, metadata !DIExpression()), !dbg !16083
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16084
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !16085
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !16083
  call void @llvm.dbg.declare(metadata i32* %i, metadata !16086, metadata !DIExpression()), !dbg !16087
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !16088, metadata !DIExpression()), !dbg !16089
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16090
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !16091
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !16092
  %2 = load i32, i32* %size, align 8, !dbg !16092
  store i32 %2, i32* %eccsize, align 4, !dbg !16089
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16093, metadata !DIExpression()), !dbg !16094
  call void @llvm.dbg.declare(metadata i32* %eccbytes, metadata !16095, metadata !DIExpression()), !dbg !16096
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16097
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !16098
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 5, !dbg !16099
  %4 = load i32, i32* %bytes, align 4, !dbg !16099
  store i32 %4, i32* %eccbytes, align 4, !dbg !16096
  call void @llvm.dbg.declare(metadata i32* %eccsteps, metadata !16100, metadata !DIExpression()), !dbg !16101
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16102
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 31, !dbg !16103
  %steps = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc2, i32 0, i32 3, !dbg !16104
  %6 = load i32, i32* %steps, align 4, !dbg !16104
  store i32 %6, i32* %eccsteps, align 4, !dbg !16101
  call void @llvm.dbg.declare(metadata i8** %p, metadata !16105, metadata !DIExpression()), !dbg !16106
  %7 = load i8*, i8** %buf.addr, align 8, !dbg !16107
  store i8* %7, i8** %p, align 8, !dbg !16106
  call void @llvm.dbg.declare(metadata i8** %ecc_calc, metadata !16108, metadata !DIExpression()), !dbg !16109
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16110
  %ecc3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %8, i32 0, i32 31, !dbg !16111
  %calc_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc3, i32 0, i32 12, !dbg !16112
  %9 = load i8*, i8** %calc_buf, align 8, !dbg !16112
  store i8* %9, i8** %ecc_calc, align 8, !dbg !16109
  call void @llvm.dbg.declare(metadata i8** %ecc_code, metadata !16113, metadata !DIExpression()), !dbg !16114
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16115
  %ecc4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %10, i32 0, i32 31, !dbg !16116
  %code_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc4, i32 0, i32 13, !dbg !16117
  %11 = load i8*, i8** %code_buf, align 8, !dbg !16117
  store i8* %11, i8** %ecc_code, align 8, !dbg !16114
  call void @llvm.dbg.declare(metadata i32* %max_bitflips, metadata !16118, metadata !DIExpression()), !dbg !16119
  store i32 0, i32* %max_bitflips, align 4, !dbg !16119
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16120
  %ecc5 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %12, i32 0, i32 31, !dbg !16121
  %read_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc5, i32 0, i32 17, !dbg !16122
  %13 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw, align 8, !dbg !16122
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16123
  %15 = load i8*, i8** %buf.addr, align 8, !dbg !16124
  %16 = load i32, i32* %page.addr, align 4, !dbg !16125
  %call6 = call i32 %13(%struct.nand_chip* %14, i8* %15, i32 1, i32 %16) #8, !dbg !16120
  store i32 0, i32* %i, align 4, !dbg !16126
  br label %for.cond, !dbg !16128

for.cond:                                         ; preds = %for.inc, %entry
  %17 = load i32, i32* %eccsteps, align 4, !dbg !16129
  %tobool = icmp ne i32 %17, 0, !dbg !16131
  br i1 %tobool, label %for.body, label %for.end, !dbg !16131

for.body:                                         ; preds = %for.cond
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16132
  %ecc7 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 31, !dbg !16133
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc7, i32 0, i32 15, !dbg !16134
  %19 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !16134
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16135
  %21 = load i8*, i8** %p, align 8, !dbg !16136
  %22 = load i8*, i8** %ecc_calc, align 8, !dbg !16137
  %23 = load i32, i32* %i, align 4, !dbg !16138
  %idxprom = sext i32 %23 to i64, !dbg !16137
  %arrayidx = getelementptr i8, i8* %22, i64 %idxprom, !dbg !16137
  %call8 = call i32 %19(%struct.nand_chip* %20, i8* %21, i8* %arrayidx) #8, !dbg !16132
  br label %for.inc, !dbg !16132

for.inc:                                          ; preds = %for.body
  %24 = load i32, i32* %eccsteps, align 4, !dbg !16139
  %dec = add i32 %24, -1, !dbg !16139
  store i32 %dec, i32* %eccsteps, align 4, !dbg !16139
  %25 = load i32, i32* %eccbytes, align 4, !dbg !16140
  %26 = load i32, i32* %i, align 4, !dbg !16141
  %add = add i32 %26, %25, !dbg !16141
  store i32 %add, i32* %i, align 4, !dbg !16141
  %27 = load i32, i32* %eccsize, align 4, !dbg !16142
  %28 = load i8*, i8** %p, align 8, !dbg !16143
  %idx.ext = sext i32 %27 to i64, !dbg !16143
  %add.ptr = getelementptr i8, i8* %28, i64 %idx.ext, !dbg !16143
  store i8* %add.ptr, i8** %p, align 8, !dbg !16143
  br label %for.cond, !dbg !16144, !llvm.loop !16145

for.end:                                          ; preds = %for.cond
  %29 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16147
  %30 = load i8*, i8** %ecc_code, align 8, !dbg !16148
  %31 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16149
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %31, i32 0, i32 23, !dbg !16150
  %32 = load i8*, i8** %oob_poi, align 8, !dbg !16150
  %33 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16151
  %ecc9 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %33, i32 0, i32 31, !dbg !16152
  %total = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc9, i32 0, i32 6, !dbg !16153
  %34 = load i32, i32* %total, align 8, !dbg !16153
  %call10 = call i32 @mtd_ooblayout_get_eccbytes(%struct.mtd_info* %29, i8* %30, i8* %32, i32 0, i32 %34) #8, !dbg !16154
  store i32 %call10, i32* %ret, align 4, !dbg !16155
  %35 = load i32, i32* %ret, align 4, !dbg !16156
  %tobool11 = icmp ne i32 %35, 0, !dbg !16156
  br i1 %tobool11, label %if.then, label %if.end, !dbg !16158

if.then:                                          ; preds = %for.end
  %36 = load i32, i32* %ret, align 4, !dbg !16159
  store i32 %36, i32* %retval, align 4, !dbg !16160
  br label %return, !dbg !16160

if.end:                                           ; preds = %for.end
  %37 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16161
  %ecc12 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %37, i32 0, i32 31, !dbg !16162
  %steps13 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc12, i32 0, i32 3, !dbg !16163
  %38 = load i32, i32* %steps13, align 4, !dbg !16163
  store i32 %38, i32* %eccsteps, align 4, !dbg !16164
  %39 = load i8*, i8** %buf.addr, align 8, !dbg !16165
  store i8* %39, i8** %p, align 8, !dbg !16166
  store i32 0, i32* %i, align 4, !dbg !16167
  br label %for.cond14, !dbg !16169

for.cond14:                                       ; preds = %for.inc28, %if.end
  %40 = load i32, i32* %eccsteps, align 4, !dbg !16170
  %tobool15 = icmp ne i32 %40, 0, !dbg !16172
  br i1 %tobool15, label %for.body16, label %for.end33, !dbg !16172

for.body16:                                       ; preds = %for.cond14
  call void @llvm.dbg.declare(metadata i32* %stat, metadata !16173, metadata !DIExpression()), !dbg !16175
  %41 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16176
  %ecc17 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %41, i32 0, i32 31, !dbg !16177
  %correct = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc17, i32 0, i32 16, !dbg !16178
  %42 = load i32 (%struct.nand_chip*, i8*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*, i8*)** %correct, align 8, !dbg !16178
  %43 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16179
  %44 = load i8*, i8** %p, align 8, !dbg !16180
  %45 = load i8*, i8** %ecc_code, align 8, !dbg !16181
  %46 = load i32, i32* %i, align 4, !dbg !16182
  %idxprom18 = sext i32 %46 to i64, !dbg !16181
  %arrayidx19 = getelementptr i8, i8* %45, i64 %idxprom18, !dbg !16181
  %47 = load i8*, i8** %ecc_calc, align 8, !dbg !16183
  %48 = load i32, i32* %i, align 4, !dbg !16184
  %idxprom20 = sext i32 %48 to i64, !dbg !16183
  %arrayidx21 = getelementptr i8, i8* %47, i64 %idxprom20, !dbg !16183
  %call22 = call i32 %42(%struct.nand_chip* %43, i8* %44, i8* %arrayidx19, i8* %arrayidx21) #8, !dbg !16176
  store i32 %call22, i32* %stat, align 4, !dbg !16185
  %49 = load i32, i32* %stat, align 4, !dbg !16186
  %cmp = icmp slt i32 %49, 0, !dbg !16188
  br i1 %cmp, label %if.then23, label %if.else, !dbg !16189

if.then23:                                        ; preds = %for.body16
  %50 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16190
  %ecc_stats = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %50, i32 0, i32 51, !dbg !16192
  %failed = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats, i32 0, i32 1, !dbg !16193
  %51 = load i32, i32* %failed, align 4, !dbg !16194
  %inc = add i32 %51, 1, !dbg !16194
  store i32 %inc, i32* %failed, align 4, !dbg !16194
  br label %if.end27, !dbg !16195

if.else:                                          ; preds = %for.body16
  %52 = load i32, i32* %stat, align 4, !dbg !16196
  %53 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16198
  %ecc_stats24 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %53, i32 0, i32 51, !dbg !16199
  %corrected = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats24, i32 0, i32 0, !dbg !16200
  %54 = load i32, i32* %corrected, align 8, !dbg !16201
  %add25 = add i32 %54, %52, !dbg !16201
  store i32 %add25, i32* %corrected, align 8, !dbg !16201
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x254, metadata !16202, metadata !DIExpression()), !dbg !16204
  %55 = load i32, i32* %max_bitflips, align 4, !dbg !16204
  store i32 %55, i32* %__UNIQUE_ID___x254, align 4, !dbg !16204
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y255, metadata !16205, metadata !DIExpression()), !dbg !16204
  %56 = load i32, i32* %stat, align 4, !dbg !16204
  store i32 %56, i32* %__UNIQUE_ID___y255, align 4, !dbg !16204
  %57 = load i32, i32* %__UNIQUE_ID___x254, align 4, !dbg !16204
  %58 = load i32, i32* %__UNIQUE_ID___y255, align 4, !dbg !16204
  %cmp26 = icmp ugt i32 %57, %58, !dbg !16204
  br i1 %cmp26, label %cond.true, label %cond.false, !dbg !16204

cond.true:                                        ; preds = %if.else
  %59 = load i32, i32* %__UNIQUE_ID___x254, align 4, !dbg !16204
  br label %cond.end, !dbg !16204

cond.false:                                       ; preds = %if.else
  %60 = load i32, i32* %__UNIQUE_ID___y255, align 4, !dbg !16204
  br label %cond.end, !dbg !16204

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %59, %cond.true ], [ %60, %cond.false ], !dbg !16204
  store i32 %cond, i32* %tmp, align 4, !dbg !16204
  %61 = load i32, i32* %tmp, align 4, !dbg !16204
  store i32 %61, i32* %max_bitflips, align 4, !dbg !16206
  br label %if.end27

if.end27:                                         ; preds = %cond.end, %if.then23
  br label %for.inc28, !dbg !16207

for.inc28:                                        ; preds = %if.end27
  %62 = load i32, i32* %eccsteps, align 4, !dbg !16208
  %dec29 = add i32 %62, -1, !dbg !16208
  store i32 %dec29, i32* %eccsteps, align 4, !dbg !16208
  %63 = load i32, i32* %eccbytes, align 4, !dbg !16209
  %64 = load i32, i32* %i, align 4, !dbg !16210
  %add30 = add i32 %64, %63, !dbg !16210
  store i32 %add30, i32* %i, align 4, !dbg !16210
  %65 = load i32, i32* %eccsize, align 4, !dbg !16211
  %66 = load i8*, i8** %p, align 8, !dbg !16212
  %idx.ext31 = sext i32 %65 to i64, !dbg !16212
  %add.ptr32 = getelementptr i8, i8* %66, i64 %idx.ext31, !dbg !16212
  store i8* %add.ptr32, i8** %p, align 8, !dbg !16212
  br label %for.cond14, !dbg !16213, !llvm.loop !16214

for.end33:                                        ; preds = %for.cond14
  %67 = load i32, i32* %max_bitflips, align 4, !dbg !16216
  store i32 %67, i32* %retval, align 4, !dbg !16217
  br label %return, !dbg !16217

return:                                           ; preds = %for.end33, %if.then
  %68 = load i32, i32* %retval, align 4, !dbg !16218
  ret i32 %68, !dbg !16218
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_write_page_swecc(%struct.nand_chip* %chip, i8* %buf, i32 %oob_required, i32 %page) #0 !dbg !16219 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %i = alloca i32, align 4
  %eccsize = alloca i32, align 4
  %ret = alloca i32, align 4
  %eccbytes = alloca i32, align 4
  %eccsteps = alloca i32, align 4
  %ecc_calc = alloca i8*, align 8
  %p = alloca i8*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !16220, metadata !DIExpression()), !dbg !16221
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !16222, metadata !DIExpression()), !dbg !16223
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !16224, metadata !DIExpression()), !dbg !16225
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !16226, metadata !DIExpression()), !dbg !16227
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !16228, metadata !DIExpression()), !dbg !16229
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16230
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !16231
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !16229
  call void @llvm.dbg.declare(metadata i32* %i, metadata !16232, metadata !DIExpression()), !dbg !16233
  call void @llvm.dbg.declare(metadata i32* %eccsize, metadata !16234, metadata !DIExpression()), !dbg !16235
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16236
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 31, !dbg !16237
  %size = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 4, !dbg !16238
  %2 = load i32, i32* %size, align 8, !dbg !16238
  store i32 %2, i32* %eccsize, align 4, !dbg !16235
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16239, metadata !DIExpression()), !dbg !16240
  call void @llvm.dbg.declare(metadata i32* %eccbytes, metadata !16241, metadata !DIExpression()), !dbg !16242
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16243
  %ecc1 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !16244
  %bytes = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc1, i32 0, i32 5, !dbg !16245
  %4 = load i32, i32* %bytes, align 4, !dbg !16245
  store i32 %4, i32* %eccbytes, align 4, !dbg !16242
  call void @llvm.dbg.declare(metadata i32* %eccsteps, metadata !16246, metadata !DIExpression()), !dbg !16247
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16248
  %ecc2 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 31, !dbg !16249
  %steps = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc2, i32 0, i32 3, !dbg !16250
  %6 = load i32, i32* %steps, align 4, !dbg !16250
  store i32 %6, i32* %eccsteps, align 4, !dbg !16247
  call void @llvm.dbg.declare(metadata i8** %ecc_calc, metadata !16251, metadata !DIExpression()), !dbg !16252
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16253
  %ecc3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %7, i32 0, i32 31, !dbg !16254
  %calc_buf = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc3, i32 0, i32 12, !dbg !16255
  %8 = load i8*, i8** %calc_buf, align 8, !dbg !16255
  store i8* %8, i8** %ecc_calc, align 8, !dbg !16252
  call void @llvm.dbg.declare(metadata i8** %p, metadata !16256, metadata !DIExpression()), !dbg !16257
  %9 = load i8*, i8** %buf.addr, align 8, !dbg !16258
  store i8* %9, i8** %p, align 8, !dbg !16257
  store i32 0, i32* %i, align 4, !dbg !16259
  br label %for.cond, !dbg !16261

for.cond:                                         ; preds = %for.inc, %entry
  %10 = load i32, i32* %eccsteps, align 4, !dbg !16262
  %tobool = icmp ne i32 %10, 0, !dbg !16264
  br i1 %tobool, label %for.body, label %for.end, !dbg !16264

for.body:                                         ; preds = %for.cond
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16265
  %ecc4 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 31, !dbg !16266
  %calculate = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc4, i32 0, i32 15, !dbg !16267
  %12 = load i32 (%struct.nand_chip*, i8*, i8*)*, i32 (%struct.nand_chip*, i8*, i8*)** %calculate, align 8, !dbg !16267
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16268
  %14 = load i8*, i8** %p, align 8, !dbg !16269
  %15 = load i8*, i8** %ecc_calc, align 8, !dbg !16270
  %16 = load i32, i32* %i, align 4, !dbg !16271
  %idxprom = sext i32 %16 to i64, !dbg !16270
  %arrayidx = getelementptr i8, i8* %15, i64 %idxprom, !dbg !16270
  %call5 = call i32 %12(%struct.nand_chip* %13, i8* %14, i8* %arrayidx) #8, !dbg !16265
  br label %for.inc, !dbg !16265

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %eccsteps, align 4, !dbg !16272
  %dec = add i32 %17, -1, !dbg !16272
  store i32 %dec, i32* %eccsteps, align 4, !dbg !16272
  %18 = load i32, i32* %eccbytes, align 4, !dbg !16273
  %19 = load i32, i32* %i, align 4, !dbg !16274
  %add = add i32 %19, %18, !dbg !16274
  store i32 %add, i32* %i, align 4, !dbg !16274
  %20 = load i32, i32* %eccsize, align 4, !dbg !16275
  %21 = load i8*, i8** %p, align 8, !dbg !16276
  %idx.ext = sext i32 %20 to i64, !dbg !16276
  %add.ptr = getelementptr i8, i8* %21, i64 %idx.ext, !dbg !16276
  store i8* %add.ptr, i8** %p, align 8, !dbg !16276
  br label %for.cond, !dbg !16277, !llvm.loop !16278

for.end:                                          ; preds = %for.cond
  %22 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16280
  %23 = load i8*, i8** %ecc_calc, align 8, !dbg !16281
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16282
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %24, i32 0, i32 23, !dbg !16283
  %25 = load i8*, i8** %oob_poi, align 8, !dbg !16283
  %26 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16284
  %ecc6 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %26, i32 0, i32 31, !dbg !16285
  %total = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc6, i32 0, i32 6, !dbg !16286
  %27 = load i32, i32* %total, align 8, !dbg !16286
  %call7 = call i32 @mtd_ooblayout_set_eccbytes(%struct.mtd_info* %22, i8* %23, i8* %25, i32 0, i32 %27) #8, !dbg !16287
  store i32 %call7, i32* %ret, align 4, !dbg !16288
  %28 = load i32, i32* %ret, align 4, !dbg !16289
  %tobool8 = icmp ne i32 %28, 0, !dbg !16289
  br i1 %tobool8, label %if.then, label %if.end, !dbg !16291

if.then:                                          ; preds = %for.end
  %29 = load i32, i32* %ret, align 4, !dbg !16292
  store i32 %29, i32* %retval, align 4, !dbg !16293
  br label %return, !dbg !16293

if.end:                                           ; preds = %for.end
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16294
  %ecc9 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %30, i32 0, i32 31, !dbg !16295
  %write_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc9, i32 0, i32 18, !dbg !16296
  %31 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw, align 8, !dbg !16296
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16297
  %33 = load i8*, i8** %buf.addr, align 8, !dbg !16298
  %34 = load i32, i32* %page.addr, align 4, !dbg !16299
  %call10 = call i32 %31(%struct.nand_chip* %32, i8* %33, i32 1, i32 %34) #8, !dbg !16294
  store i32 %call10, i32* %retval, align 4, !dbg !16300
  br label %return, !dbg !16300

return:                                           ; preds = %if.end, %if.then
  %35 = load i32, i32* %retval, align 4, !dbg !16301
  ret i32 %35, !dbg !16301
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @mtd_nand_has_bch() #0 !dbg !16302 {
entry:
  ret i32 0, !dbg !16305
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_bch_calculate_ecc(%struct.nand_chip* %chip, i8* %dat, i8* %ecc_code) #0 !dbg !16306 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %dat.addr = alloca i8*, align 8
  %ecc_code.addr = alloca i8*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !16309, metadata !DIExpression()), !dbg !16310
  store i8* %dat, i8** %dat.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %dat.addr, metadata !16311, metadata !DIExpression()), !dbg !16312
  store i8* %ecc_code, i8** %ecc_code.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ecc_code.addr, metadata !16313, metadata !DIExpression()), !dbg !16314
  ret i32 -1, !dbg !16315
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_bch_correct_data(%struct.nand_chip* %chip, i8* %buf, i8* %read_ecc, i8* %calc_ecc) #0 !dbg !16316 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %buf.addr = alloca i8*, align 8
  %read_ecc.addr = alloca i8*, align 8
  %calc_ecc.addr = alloca i8*, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !16320, metadata !DIExpression()), !dbg !16321
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !16322, metadata !DIExpression()), !dbg !16323
  store i8* %read_ecc, i8** %read_ecc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %read_ecc.addr, metadata !16324, metadata !DIExpression()), !dbg !16325
  store i8* %calc_ecc, i8** %calc_ecc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %calc_ecc.addr, metadata !16326, metadata !DIExpression()), !dbg !16327
  ret i32 -524, !dbg !16328
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.nand_bch_control* @nand_bch_init(%struct.mtd_info* %mtd) #0 !dbg !16329 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !16332, metadata !DIExpression()), !dbg !16333
  ret %struct.nand_bch_control* null, !dbg !16334
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @rawnand_erase(%struct.nand_device* %nand, %struct.nand_pos* %pos) #0 !dbg !16335 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  %pos.addr = alloca %struct.nand_pos*, align 8
  %chip = alloca %struct.nand_chip*, align 8
  %__mptr = alloca i8*, align 8
  %tmp = alloca %struct.nand_chip*, align 8
  %eb = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !16336, metadata !DIExpression()), !dbg !16337
  store %struct.nand_pos* %pos, %struct.nand_pos** %pos.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_pos** %pos.addr, metadata !16338, metadata !DIExpression()), !dbg !16339
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !16340, metadata !DIExpression()), !dbg !16341
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !16342, metadata !DIExpression()), !dbg !16344
  %0 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16344
  %1 = bitcast %struct.nand_device* %0 to i8*, !dbg !16344
  store i8* %1, i8** %__mptr, align 8, !dbg !16344
  br label %do.body, !dbg !16344

do.body:                                          ; preds = %entry
  br label %do.end, !dbg !16345

do.end:                                           ; preds = %do.body
  %2 = load i8*, i8** %__mptr, align 8, !dbg !16344
  %add.ptr = getelementptr i8, i8* %2, i64 0, !dbg !16344
  %3 = bitcast i8* %add.ptr to %struct.nand_chip*, !dbg !16344
  store %struct.nand_chip* %3, %struct.nand_chip** %tmp, align 8, !dbg !16345
  %4 = load %struct.nand_chip*, %struct.nand_chip** %tmp, align 8, !dbg !16344
  store %struct.nand_chip* %4, %struct.nand_chip** %chip, align 8, !dbg !16341
  call void @llvm.dbg.declare(metadata i32* %eb, metadata !16347, metadata !DIExpression()), !dbg !16348
  %5 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16349
  %6 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16350
  %call = call i32 @nanddev_pos_to_row(%struct.nand_device* %5, %struct.nand_pos* %6) #8, !dbg !16351
  store i32 %call, i32* %eb, align 4, !dbg !16348
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16352, metadata !DIExpression()), !dbg !16353
  %7 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16354
  %rowconv = getelementptr inbounds %struct.nand_device, %struct.nand_device* %7, i32 0, i32 3, !dbg !16355
  %eraseblock_addr_shift = getelementptr inbounds %struct.nand_row_converter, %struct.nand_row_converter* %rowconv, i32 0, i32 1, !dbg !16356
  %8 = load i32, i32* %eraseblock_addr_shift, align 4, !dbg !16356
  %9 = load i32, i32* %eb, align 4, !dbg !16357
  %shr = lshr i32 %9, %8, !dbg !16357
  store i32 %shr, i32* %eb, align 4, !dbg !16357
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !16358
  %11 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16359
  %target = getelementptr inbounds %struct.nand_pos, %struct.nand_pos* %11, i32 0, i32 0, !dbg !16360
  %12 = load i32, i32* %target, align 4, !dbg !16360
  call void @nand_select_target(%struct.nand_chip* %10, i32 %12) #8, !dbg !16361
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !16362
  %14 = load i32, i32* %eb, align 4, !dbg !16363
  %call1 = call i32 @nand_erase_op(%struct.nand_chip* %13, i32 %14) #8, !dbg !16364
  store i32 %call1, i32* %ret, align 4, !dbg !16365
  %15 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !16366
  call void @nand_deselect_target(%struct.nand_chip* %15) #8, !dbg !16367
  %16 = load i32, i32* %ret, align 4, !dbg !16368
  ret i32 %16, !dbg !16369
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @rawnand_markbad(%struct.nand_device* %nand, %struct.nand_pos* %pos) #0 !dbg !16370 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  %pos.addr = alloca %struct.nand_pos*, align 8
  %chip = alloca %struct.nand_chip*, align 8
  %__mptr = alloca i8*, align 8
  %tmp = alloca %struct.nand_chip*, align 8
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !16371, metadata !DIExpression()), !dbg !16372
  store %struct.nand_pos* %pos, %struct.nand_pos** %pos.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_pos** %pos.addr, metadata !16373, metadata !DIExpression()), !dbg !16374
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !16375, metadata !DIExpression()), !dbg !16376
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !16377, metadata !DIExpression()), !dbg !16379
  %0 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16379
  %1 = bitcast %struct.nand_device* %0 to i8*, !dbg !16379
  store i8* %1, i8** %__mptr, align 8, !dbg !16379
  br label %do.body, !dbg !16379

do.body:                                          ; preds = %entry
  br label %do.end, !dbg !16380

do.end:                                           ; preds = %do.body
  %2 = load i8*, i8** %__mptr, align 8, !dbg !16379
  %add.ptr = getelementptr i8, i8* %2, i64 0, !dbg !16379
  %3 = bitcast i8* %add.ptr to %struct.nand_chip*, !dbg !16379
  store %struct.nand_chip* %3, %struct.nand_chip** %tmp, align 8, !dbg !16380
  %4 = load %struct.nand_chip*, %struct.nand_chip** %tmp, align 8, !dbg !16379
  store %struct.nand_chip* %4, %struct.nand_chip** %chip, align 8, !dbg !16376
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !16382
  %6 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16383
  %7 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16384
  %call = call i64 @nanddev_pos_to_offs(%struct.nand_device* %6, %struct.nand_pos* %7) #8, !dbg !16385
  %call1 = call i32 @nand_markbad_bbm(%struct.nand_chip* %5, i64 %call) #8, !dbg !16386
  ret i32 %call1, !dbg !16387
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @rawnand_isbad(%struct.nand_device* %nand, %struct.nand_pos* %pos) #0 !dbg !16388 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  %pos.addr = alloca %struct.nand_pos*, align 8
  %chip = alloca %struct.nand_chip*, align 8
  %__mptr = alloca i8*, align 8
  %tmp = alloca %struct.nand_chip*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !16389, metadata !DIExpression()), !dbg !16390
  store %struct.nand_pos* %pos, %struct.nand_pos** %pos.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_pos** %pos.addr, metadata !16391, metadata !DIExpression()), !dbg !16392
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip, metadata !16393, metadata !DIExpression()), !dbg !16394
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !16395, metadata !DIExpression()), !dbg !16397
  %0 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16397
  %1 = bitcast %struct.nand_device* %0 to i8*, !dbg !16397
  store i8* %1, i8** %__mptr, align 8, !dbg !16397
  br label %do.body, !dbg !16397

do.body:                                          ; preds = %entry
  br label %do.end, !dbg !16398

do.end:                                           ; preds = %do.body
  %2 = load i8*, i8** %__mptr, align 8, !dbg !16397
  %add.ptr = getelementptr i8, i8* %2, i64 0, !dbg !16397
  %3 = bitcast i8* %add.ptr to %struct.nand_chip*, !dbg !16397
  store %struct.nand_chip* %3, %struct.nand_chip** %tmp, align 8, !dbg !16398
  %4 = load %struct.nand_chip*, %struct.nand_chip** %tmp, align 8, !dbg !16397
  store %struct.nand_chip* %4, %struct.nand_chip** %chip, align 8, !dbg !16394
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16400, metadata !DIExpression()), !dbg !16401
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !16402
  %6 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16403
  %target = getelementptr inbounds %struct.nand_pos, %struct.nand_pos* %6, i32 0, i32 0, !dbg !16404
  %7 = load i32, i32* %target, align 4, !dbg !16404
  call void @nand_select_target(%struct.nand_chip* %5, i32 %7) #8, !dbg !16405
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !16406
  %9 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16407
  %10 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16408
  %call = call i64 @nanddev_pos_to_offs(%struct.nand_device* %9, %struct.nand_pos* %10) #8, !dbg !16409
  %call1 = call i32 @nand_isbad_bbm(%struct.nand_chip* %8, i64 %call) #8, !dbg !16410
  store i32 %call1, i32* %ret, align 4, !dbg !16411
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip, align 8, !dbg !16412
  call void @nand_deselect_target(%struct.nand_chip* %11) #8, !dbg !16413
  %12 = load i32, i32* %ret, align 4, !dbg !16414
  %tobool = icmp ne i32 %12, 0, !dbg !16414
  ret i1 %tobool, !dbg !16415
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nanddev_pos_to_row(%struct.nand_device* %nand, %struct.nand_pos* %pos) #0 !dbg !16416 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  %pos.addr = alloca %struct.nand_pos*, align 8
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !16419, metadata !DIExpression()), !dbg !16420
  store %struct.nand_pos* %pos, %struct.nand_pos** %pos.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_pos** %pos.addr, metadata !16421, metadata !DIExpression()), !dbg !16422
  %0 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16423
  %lun = getelementptr inbounds %struct.nand_pos, %struct.nand_pos* %0, i32 0, i32 1, !dbg !16424
  %1 = load i32, i32* %lun, align 4, !dbg !16424
  %2 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16425
  %rowconv = getelementptr inbounds %struct.nand_device, %struct.nand_device* %2, i32 0, i32 3, !dbg !16426
  %lun_addr_shift = getelementptr inbounds %struct.nand_row_converter, %struct.nand_row_converter* %rowconv, i32 0, i32 0, !dbg !16427
  %3 = load i32, i32* %lun_addr_shift, align 8, !dbg !16427
  %shl = shl i32 %1, %3, !dbg !16428
  %4 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16429
  %eraseblock = getelementptr inbounds %struct.nand_pos, %struct.nand_pos* %4, i32 0, i32 3, !dbg !16430
  %5 = load i32, i32* %eraseblock, align 4, !dbg !16430
  %6 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16431
  %rowconv1 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %6, i32 0, i32 3, !dbg !16432
  %eraseblock_addr_shift = getelementptr inbounds %struct.nand_row_converter, %struct.nand_row_converter* %rowconv1, i32 0, i32 1, !dbg !16433
  %7 = load i32, i32* %eraseblock_addr_shift, align 4, !dbg !16433
  %shl2 = shl i32 %5, %7, !dbg !16434
  %or = or i32 %shl, %shl2, !dbg !16435
  %8 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16436
  %page = getelementptr inbounds %struct.nand_pos, %struct.nand_pos* %8, i32 0, i32 4, !dbg !16437
  %9 = load i32, i32* %page, align 4, !dbg !16437
  %or3 = or i32 %or, %9, !dbg !16438
  ret i32 %or3, !dbg !16439
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i64 @nanddev_pos_to_offs(%struct.nand_device* %nand, %struct.nand_pos* %pos) #0 !dbg !16440 {
entry:
  %nand.addr = alloca %struct.nand_device*, align 8
  %pos.addr = alloca %struct.nand_pos*, align 8
  %npages = alloca i32, align 4
  store %struct.nand_device* %nand, %struct.nand_device** %nand.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_device** %nand.addr, metadata !16443, metadata !DIExpression()), !dbg !16444
  store %struct.nand_pos* %pos, %struct.nand_pos** %pos.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_pos** %pos.addr, metadata !16445, metadata !DIExpression()), !dbg !16446
  call void @llvm.dbg.declare(metadata i32* %npages, metadata !16447, metadata !DIExpression()), !dbg !16448
  %0 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16449
  %page = getelementptr inbounds %struct.nand_pos, %struct.nand_pos* %0, i32 0, i32 4, !dbg !16450
  %1 = load i32, i32* %page, align 4, !dbg !16450
  %2 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16451
  %eraseblock = getelementptr inbounds %struct.nand_pos, %struct.nand_pos* %2, i32 0, i32 3, !dbg !16452
  %3 = load i32, i32* %eraseblock, align 4, !dbg !16452
  %4 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16453
  %lun = getelementptr inbounds %struct.nand_pos, %struct.nand_pos* %4, i32 0, i32 1, !dbg !16454
  %5 = load i32, i32* %lun, align 4, !dbg !16454
  %6 = load %struct.nand_pos*, %struct.nand_pos** %pos.addr, align 8, !dbg !16455
  %target = getelementptr inbounds %struct.nand_pos, %struct.nand_pos* %6, i32 0, i32 0, !dbg !16456
  %7 = load i32, i32* %target, align 4, !dbg !16456
  %8 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16457
  %memorg = getelementptr inbounds %struct.nand_device, %struct.nand_device* %8, i32 0, i32 1, !dbg !16458
  %luns_per_target = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg, i32 0, i32 7, !dbg !16459
  %9 = load i32, i32* %luns_per_target, align 4, !dbg !16459
  %mul = mul i32 %7, %9, !dbg !16460
  %add = add i32 %5, %mul, !dbg !16461
  %10 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16462
  %memorg1 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %10, i32 0, i32 1, !dbg !16463
  %eraseblocks_per_lun = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg1, i32 0, i32 4, !dbg !16464
  %11 = load i32, i32* %eraseblocks_per_lun, align 8, !dbg !16464
  %mul2 = mul i32 %add, %11, !dbg !16465
  %add3 = add i32 %3, %mul2, !dbg !16466
  %12 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16467
  %memorg4 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %12, i32 0, i32 1, !dbg !16468
  %pages_per_eraseblock = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg4, i32 0, i32 3, !dbg !16469
  %13 = load i32, i32* %pages_per_eraseblock, align 4, !dbg !16469
  %mul5 = mul i32 %add3, %13, !dbg !16470
  %add6 = add i32 %1, %mul5, !dbg !16471
  store i32 %add6, i32* %npages, align 4, !dbg !16472
  %14 = load i32, i32* %npages, align 4, !dbg !16473
  %conv = zext i32 %14 to i64, !dbg !16474
  %15 = load %struct.nand_device*, %struct.nand_device** %nand.addr, align 8, !dbg !16475
  %memorg7 = getelementptr inbounds %struct.nand_device, %struct.nand_device* %15, i32 0, i32 1, !dbg !16476
  %pagesize = getelementptr inbounds %struct.nand_memory_organization, %struct.nand_memory_organization* %memorg7, i32 0, i32 1, !dbg !16477
  %16 = load i32, i32* %pagesize, align 4, !dbg !16477
  %conv8 = zext i32 %16 to i64, !dbg !16475
  %mul9 = mul i64 %conv, %conv8, !dbg !16478
  ret i64 %mul9, !dbg !16479
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.nand_chip* @mtd_to_nand(%struct.mtd_info* %mtd) #0 !dbg !16480 {
entry:
  %mtd.addr = alloca %struct.mtd_info*, align 8
  %__mptr = alloca i8*, align 8
  %tmp = alloca %struct.nand_chip*, align 8
  store %struct.mtd_info* %mtd, %struct.mtd_info** %mtd.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd.addr, metadata !16483, metadata !DIExpression()), !dbg !16484
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !16485, metadata !DIExpression()), !dbg !16487
  %0 = load %struct.mtd_info*, %struct.mtd_info** %mtd.addr, align 8, !dbg !16487
  %1 = bitcast %struct.mtd_info* %0 to i8*, !dbg !16487
  store i8* %1, i8** %__mptr, align 8, !dbg !16487
  br label %do.body, !dbg !16487

do.body:                                          ; preds = %entry
  br label %do.end, !dbg !16488

do.end:                                           ; preds = %do.body
  %2 = load i8*, i8** %__mptr, align 8, !dbg !16487
  %add.ptr = getelementptr i8, i8* %2, i64 0, !dbg !16487
  %3 = bitcast i8* %add.ptr to %struct.nand_chip*, !dbg !16487
  store %struct.nand_chip* %3, %struct.nand_chip** %tmp, align 8, !dbg !16488
  %4 = load %struct.nand_chip*, %struct.nand_chip** %tmp, align 8, !dbg !16487
  ret %struct.nand_chip* %4, !dbg !16490
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_do_write_ops(%struct.nand_chip* %chip, i64 %to, %struct.mtd_oob_ops* %ops) #0 !dbg !16491 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %to.addr = alloca i64, align 8
  %ops.addr = alloca %struct.mtd_oob_ops*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %chipnr = alloca i32, align 4
  %realpage = alloca i32, align 4
  %page = alloca i32, align 4
  %column = alloca i32, align 4
  %writelen = alloca i32, align 4
  %oobwritelen = alloca i32, align 4
  %oobmaxlen = alloca i32, align 4
  %oob = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %ret = alloca i32, align 4
  %oob_required = alloca i32, align 4
  %bytes = alloca i32, align 4
  %wbuf = alloca i8*, align 8
  %use_bounce_buf = alloca i32, align 4
  %part_pagewr = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__UNIQUE_ID___x283 = alloca i32, align 4
  %__UNIQUE_ID___y284 = alloca i32, align 4
  %tmp88 = alloca i32, align 4
  %len104 = alloca i64, align 8
  %__UNIQUE_ID___x285 = alloca i32, align 4
  %__UNIQUE_ID___y286 = alloca i32, align 4
  %tmp105 = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !16492, metadata !DIExpression()), !dbg !16493
  store i64 %to, i64* %to.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %to.addr, metadata !16494, metadata !DIExpression()), !dbg !16495
  store %struct.mtd_oob_ops* %ops, %struct.mtd_oob_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops** %ops.addr, metadata !16496, metadata !DIExpression()), !dbg !16497
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !16498, metadata !DIExpression()), !dbg !16499
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16500
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !16501
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !16499
  call void @llvm.dbg.declare(metadata i32* %chipnr, metadata !16502, metadata !DIExpression()), !dbg !16503
  call void @llvm.dbg.declare(metadata i32* %realpage, metadata !16504, metadata !DIExpression()), !dbg !16505
  call void @llvm.dbg.declare(metadata i32* %page, metadata !16506, metadata !DIExpression()), !dbg !16507
  call void @llvm.dbg.declare(metadata i32* %column, metadata !16508, metadata !DIExpression()), !dbg !16509
  call void @llvm.dbg.declare(metadata i32* %writelen, metadata !16510, metadata !DIExpression()), !dbg !16511
  %1 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16512
  %len = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %1, i32 0, i32 1, !dbg !16513
  %2 = load i64, i64* %len, align 8, !dbg !16513
  %conv = trunc i64 %2 to i32, !dbg !16512
  store i32 %conv, i32* %writelen, align 4, !dbg !16511
  call void @llvm.dbg.declare(metadata i32* %oobwritelen, metadata !16514, metadata !DIExpression()), !dbg !16515
  %3 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16516
  %ooblen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %3, i32 0, i32 3, !dbg !16517
  %4 = load i64, i64* %ooblen, align 8, !dbg !16517
  %conv1 = trunc i64 %4 to i32, !dbg !16516
  store i32 %conv1, i32* %oobwritelen, align 4, !dbg !16515
  call void @llvm.dbg.declare(metadata i32* %oobmaxlen, metadata !16518, metadata !DIExpression()), !dbg !16519
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16520
  %6 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16521
  %call2 = call i32 @mtd_oobavail(%struct.mtd_info* %5, %struct.mtd_oob_ops* %6) #8, !dbg !16522
  store i32 %call2, i32* %oobmaxlen, align 4, !dbg !16519
  call void @llvm.dbg.declare(metadata i8** %oob, metadata !16523, metadata !DIExpression()), !dbg !16524
  %7 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16525
  %oobbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %7, i32 0, i32 7, !dbg !16526
  %8 = load i8*, i8** %oobbuf, align 8, !dbg !16526
  store i8* %8, i8** %oob, align 8, !dbg !16524
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !16527, metadata !DIExpression()), !dbg !16528
  %9 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16529
  %datbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %9, i32 0, i32 6, !dbg !16530
  %10 = load i8*, i8** %datbuf, align 8, !dbg !16530
  store i8* %10, i8** %buf, align 8, !dbg !16528
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16531, metadata !DIExpression()), !dbg !16532
  call void @llvm.dbg.declare(metadata i32* %oob_required, metadata !16533, metadata !DIExpression()), !dbg !16534
  %11 = load i8*, i8** %oob, align 8, !dbg !16535
  %tobool = icmp ne i8* %11, null, !dbg !16535
  %12 = zext i1 %tobool to i64, !dbg !16535
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !16535
  store i32 %cond, i32* %oob_required, align 4, !dbg !16534
  %13 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16536
  %retlen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %13, i32 0, i32 2, !dbg !16537
  store i64 0, i64* %retlen, align 8, !dbg !16538
  %14 = load i32, i32* %writelen, align 4, !dbg !16539
  %tobool3 = icmp ne i32 %14, 0, !dbg !16539
  br i1 %tobool3, label %if.end, label %if.then, !dbg !16541

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !16542
  br label %return, !dbg !16542

if.end:                                           ; preds = %entry
  %15 = load i64, i64* %to.addr, align 8, !dbg !16543
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16543
  %subpagesize = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %16, i32 0, i32 21, !dbg !16543
  %17 = load i32, i32* %subpagesize, align 8, !dbg !16543
  %sub = sub i32 %17, 1, !dbg !16543
  %conv4 = zext i32 %sub to i64, !dbg !16543
  %and = and i64 %15, %conv4, !dbg !16543
  %cmp = icmp ne i64 %and, 0, !dbg !16543
  br i1 %cmp, label %if.then13, label %lor.lhs.false, !dbg !16545

lor.lhs.false:                                    ; preds = %if.end
  %18 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16546
  %len6 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %18, i32 0, i32 1, !dbg !16546
  %19 = load i64, i64* %len6, align 8, !dbg !16546
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16546
  %subpagesize7 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %20, i32 0, i32 21, !dbg !16546
  %21 = load i32, i32* %subpagesize7, align 8, !dbg !16546
  %sub8 = sub i32 %21, 1, !dbg !16546
  %conv9 = zext i32 %sub8 to i64, !dbg !16546
  %and10 = and i64 %19, %conv9, !dbg !16546
  %cmp11 = icmp ne i64 %and10, 0, !dbg !16546
  br i1 %cmp11, label %if.then13, label %if.end15, !dbg !16547

if.then13:                                        ; preds = %lor.lhs.false, %if.end
  %call14 = call i32 (i8*, ...) @printk(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.47, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @__func__.nand_do_write_ops, i64 0, i64 0)) #12, !dbg !16548
  store i32 -22, i32* %retval, align 4, !dbg !16550
  br label %return, !dbg !16550

if.end15:                                         ; preds = %lor.lhs.false
  %22 = load i64, i64* %to.addr, align 8, !dbg !16551
  %23 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16552
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %23, i32 0, i32 4, !dbg !16553
  %24 = load i32, i32* %writesize, align 4, !dbg !16553
  %sub16 = sub i32 %24, 1, !dbg !16554
  %conv17 = zext i32 %sub16 to i64, !dbg !16555
  %and18 = and i64 %22, %conv17, !dbg !16556
  %conv19 = trunc i64 %and18 to i32, !dbg !16551
  store i32 %conv19, i32* %column, align 4, !dbg !16557
  %25 = load i64, i64* %to.addr, align 8, !dbg !16558
  %26 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16559
  %chip_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %26, i32 0, i32 19, !dbg !16560
  %27 = load i32, i32* %chip_shift, align 8, !dbg !16560
  %sh_prom = zext i32 %27 to i64, !dbg !16561
  %shr = ashr i64 %25, %sh_prom, !dbg !16561
  %conv20 = trunc i64 %shr to i32, !dbg !16562
  store i32 %conv20, i32* %chipnr, align 4, !dbg !16563
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16564
  %29 = load i32, i32* %chipnr, align 4, !dbg !16565
  call void @nand_select_target(%struct.nand_chip* %28, i32 %29) #8, !dbg !16566
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16567
  %call21 = call i32 @nand_check_wp(%struct.nand_chip* %30) #8, !dbg !16569
  %tobool22 = icmp ne i32 %call21, 0, !dbg !16569
  br i1 %tobool22, label %if.then23, label %if.end24, !dbg !16570

if.then23:                                        ; preds = %if.end15
  store i32 -5, i32* %ret, align 4, !dbg !16571
  br label %err_out, !dbg !16573

if.end24:                                         ; preds = %if.end15
  %31 = load i64, i64* %to.addr, align 8, !dbg !16574
  %32 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16575
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %32, i32 0, i32 17, !dbg !16576
  %33 = load i32, i32* %page_shift, align 8, !dbg !16576
  %sh_prom25 = zext i32 %33 to i64, !dbg !16577
  %shr26 = ashr i64 %31, %sh_prom25, !dbg !16577
  %conv27 = trunc i64 %shr26 to i32, !dbg !16578
  store i32 %conv27, i32* %realpage, align 4, !dbg !16579
  %34 = load i32, i32* %realpage, align 4, !dbg !16580
  %35 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16581
  %pagemask = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %35, i32 0, i32 20, !dbg !16582
  %36 = load i32, i32* %pagemask, align 4, !dbg !16582
  %and28 = and i32 %34, %36, !dbg !16583
  store i32 %and28, i32* %page, align 4, !dbg !16584
  %37 = load i64, i64* %to.addr, align 8, !dbg !16585
  %38 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16587
  %pagecache = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %38, i32 0, i32 24, !dbg !16588
  %page29 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache, i32 0, i32 1, !dbg !16589
  %39 = load i32, i32* %page29, align 4, !dbg !16589
  %conv30 = sext i32 %39 to i64, !dbg !16590
  %40 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16591
  %page_shift31 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %40, i32 0, i32 17, !dbg !16592
  %41 = load i32, i32* %page_shift31, align 8, !dbg !16592
  %sh_prom32 = zext i32 %41 to i64, !dbg !16593
  %shl = shl i64 %conv30, %sh_prom32, !dbg !16593
  %cmp33 = icmp sle i64 %37, %shl, !dbg !16594
  br i1 %cmp33, label %land.lhs.true, label %if.end47, !dbg !16595

land.lhs.true:                                    ; preds = %if.end24
  %42 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16596
  %pagecache35 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %42, i32 0, i32 24, !dbg !16597
  %page36 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache35, i32 0, i32 1, !dbg !16598
  %43 = load i32, i32* %page36, align 4, !dbg !16598
  %conv37 = sext i32 %43 to i64, !dbg !16599
  %44 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16600
  %page_shift38 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %44, i32 0, i32 17, !dbg !16601
  %45 = load i32, i32* %page_shift38, align 8, !dbg !16601
  %sh_prom39 = zext i32 %45 to i64, !dbg !16602
  %shl40 = shl i64 %conv37, %sh_prom39, !dbg !16602
  %46 = load i64, i64* %to.addr, align 8, !dbg !16603
  %47 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16604
  %len41 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %47, i32 0, i32 1, !dbg !16605
  %48 = load i64, i64* %len41, align 8, !dbg !16605
  %add = add i64 %46, %48, !dbg !16606
  %cmp42 = icmp ult i64 %shl40, %add, !dbg !16607
  br i1 %cmp42, label %if.then44, label %if.end47, !dbg !16608

if.then44:                                        ; preds = %land.lhs.true
  %49 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16609
  %pagecache45 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %49, i32 0, i32 24, !dbg !16610
  %page46 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache45, i32 0, i32 1, !dbg !16611
  store i32 -1, i32* %page46, align 4, !dbg !16612
  br label %if.end47, !dbg !16609

if.end47:                                         ; preds = %if.then44, %land.lhs.true, %if.end24
  %50 = load i8*, i8** %oob, align 8, !dbg !16613
  %tobool48 = icmp ne i8* %50, null, !dbg !16613
  br i1 %tobool48, label %land.lhs.true49, label %if.end60, !dbg !16615

land.lhs.true49:                                  ; preds = %if.end47
  %51 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16616
  %ooboffs = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %51, i32 0, i32 5, !dbg !16617
  %52 = load i32, i32* %ooboffs, align 8, !dbg !16617
  %tobool50 = icmp ne i32 %52, 0, !dbg !16616
  br i1 %tobool50, label %land.lhs.true51, label %if.end60, !dbg !16618

land.lhs.true51:                                  ; preds = %land.lhs.true49
  %53 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16619
  %ooboffs52 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %53, i32 0, i32 5, !dbg !16620
  %54 = load i32, i32* %ooboffs52, align 8, !dbg !16620
  %conv53 = zext i32 %54 to i64, !dbg !16619
  %55 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16621
  %ooblen54 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %55, i32 0, i32 3, !dbg !16622
  %56 = load i64, i64* %ooblen54, align 8, !dbg !16622
  %add55 = add i64 %conv53, %56, !dbg !16623
  %57 = load i32, i32* %oobmaxlen, align 4, !dbg !16624
  %conv56 = zext i32 %57 to i64, !dbg !16624
  %cmp57 = icmp ugt i64 %add55, %conv56, !dbg !16625
  br i1 %cmp57, label %if.then59, label %if.end60, !dbg !16626

if.then59:                                        ; preds = %land.lhs.true51
  store i32 -22, i32* %ret, align 4, !dbg !16627
  br label %err_out, !dbg !16629

if.end60:                                         ; preds = %land.lhs.true51, %land.lhs.true49, %if.end47
  br label %while.body, !dbg !16630

while.body:                                       ; preds = %if.end60, %if.end135
  call void @llvm.dbg.declare(metadata i32* %bytes, metadata !16631, metadata !DIExpression()), !dbg !16633
  %58 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16634
  %writesize61 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %58, i32 0, i32 4, !dbg !16635
  %59 = load i32, i32* %writesize61, align 4, !dbg !16635
  store i32 %59, i32* %bytes, align 4, !dbg !16633
  call void @llvm.dbg.declare(metadata i8** %wbuf, metadata !16636, metadata !DIExpression()), !dbg !16637
  %60 = load i8*, i8** %buf, align 8, !dbg !16638
  store i8* %60, i8** %wbuf, align 8, !dbg !16637
  call void @llvm.dbg.declare(metadata i32* %use_bounce_buf, metadata !16639, metadata !DIExpression()), !dbg !16640
  call void @llvm.dbg.declare(metadata i32* %part_pagewr, metadata !16641, metadata !DIExpression()), !dbg !16642
  %61 = load i32, i32* %column, align 4, !dbg !16643
  %tobool62 = icmp ne i32 %61, 0, !dbg !16643
  br i1 %tobool62, label %lor.end, label %lor.rhs, !dbg !16644

lor.rhs:                                          ; preds = %while.body
  %62 = load i32, i32* %writelen, align 4, !dbg !16645
  %63 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16646
  %writesize63 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %63, i32 0, i32 4, !dbg !16647
  %64 = load i32, i32* %writesize63, align 4, !dbg !16647
  %cmp64 = icmp ult i32 %62, %64, !dbg !16648
  br label %lor.end, !dbg !16644

lor.end:                                          ; preds = %lor.rhs, %while.body
  %65 = phi i1 [ true, %while.body ], [ %cmp64, %lor.rhs ]
  %lor.ext = zext i1 %65 to i32, !dbg !16644
  store i32 %lor.ext, i32* %part_pagewr, align 4, !dbg !16642
  %66 = load i32, i32* %part_pagewr, align 4, !dbg !16649
  %tobool66 = icmp ne i32 %66, 0, !dbg !16649
  br i1 %tobool66, label %if.then67, label %if.else, !dbg !16651

if.then67:                                        ; preds = %lor.end
  store i32 1, i32* %use_bounce_buf, align 4, !dbg !16652
  br label %if.end82, !dbg !16653

if.else:                                          ; preds = %lor.end
  %67 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16654
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %67, i32 0, i32 6, !dbg !16656
  %68 = load i32, i32* %options, align 8, !dbg !16656
  %conv68 = zext i32 %68 to i64, !dbg !16654
  %and69 = and i64 %conv68, 1048576, !dbg !16657
  %tobool70 = icmp ne i64 %and69, 0, !dbg !16657
  br i1 %tobool70, label %if.then71, label %if.else80, !dbg !16658

if.then71:                                        ; preds = %if.else
  %69 = load i8*, i8** %buf, align 8, !dbg !16659
  %70 = ptrtoint i8* %69 to i64, !dbg !16659
  %call72 = call zeroext i1 @__virt_addr_valid(i64 %70) #8, !dbg !16659
  br i1 %call72, label %lor.rhs73, label %lor.end78, !dbg !16660

lor.rhs73:                                        ; preds = %if.then71
  %71 = load i8*, i8** %buf, align 8, !dbg !16661
  %72 = ptrtoint i8* %71 to i64, !dbg !16661
  %73 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16661
  %buf_align = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %73, i32 0, i32 25, !dbg !16661
  %74 = load i64, i64* %buf_align, align 8, !dbg !16661
  %sub74 = sub i64 %74, 1, !dbg !16661
  %and75 = and i64 %72, %sub74, !dbg !16661
  %cmp76 = icmp eq i64 %and75, 0, !dbg !16661
  %lnot = xor i1 %cmp76, true, !dbg !16662
  br label %lor.end78, !dbg !16660

lor.end78:                                        ; preds = %lor.rhs73, %if.then71
  %75 = phi i1 [ true, %if.then71 ], [ %lnot, %lor.rhs73 ]
  %lor.ext79 = zext i1 %75 to i32, !dbg !16660
  store i32 %lor.ext79, i32* %use_bounce_buf, align 4, !dbg !16663
  br label %if.end81, !dbg !16664

if.else80:                                        ; preds = %if.else
  store i32 0, i32* %use_bounce_buf, align 4, !dbg !16665
  br label %if.end81

if.end81:                                         ; preds = %if.else80, %lor.end78
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then67
  %76 = load i32, i32* %use_bounce_buf, align 4, !dbg !16666
  %tobool83 = icmp ne i32 %76, 0, !dbg !16666
  br i1 %tobool83, label %if.then84, label %if.end97, !dbg !16668

if.then84:                                        ; preds = %if.end82
  store i32 0, i32* %tmp, align 4, !dbg !16669
  %77 = load i32, i32* %tmp, align 4, !dbg !16673
  %78 = load i32, i32* %part_pagewr, align 4, !dbg !16674
  %tobool85 = icmp ne i32 %78, 0, !dbg !16674
  br i1 %tobool85, label %if.then86, label %if.end92, !dbg !16676

if.then86:                                        ; preds = %if.then84
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x283, metadata !16677, metadata !DIExpression()), !dbg !16679
  %79 = load i32, i32* %bytes, align 4, !dbg !16679
  %80 = load i32, i32* %column, align 4, !dbg !16679
  %sub87 = sub i32 %79, %80, !dbg !16679
  store i32 %sub87, i32* %__UNIQUE_ID___x283, align 4, !dbg !16679
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y284, metadata !16680, metadata !DIExpression()), !dbg !16679
  %81 = load i32, i32* %writelen, align 4, !dbg !16679
  store i32 %81, i32* %__UNIQUE_ID___y284, align 4, !dbg !16679
  %82 = load i32, i32* %__UNIQUE_ID___x283, align 4, !dbg !16679
  %83 = load i32, i32* %__UNIQUE_ID___y284, align 4, !dbg !16679
  %cmp89 = icmp slt i32 %82, %83, !dbg !16679
  br i1 %cmp89, label %cond.true, label %cond.false, !dbg !16679

cond.true:                                        ; preds = %if.then86
  %84 = load i32, i32* %__UNIQUE_ID___x283, align 4, !dbg !16679
  br label %cond.end, !dbg !16679

cond.false:                                       ; preds = %if.then86
  %85 = load i32, i32* %__UNIQUE_ID___y284, align 4, !dbg !16679
  br label %cond.end, !dbg !16679

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond91 = phi i32 [ %84, %cond.true ], [ %85, %cond.false ], !dbg !16679
  store i32 %cond91, i32* %tmp88, align 4, !dbg !16679
  %86 = load i32, i32* %tmp88, align 4, !dbg !16679
  store i32 %86, i32* %bytes, align 4, !dbg !16681
  br label %if.end92, !dbg !16682

if.end92:                                         ; preds = %cond.end, %if.then84
  %87 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16683
  %call93 = call i8* @nand_get_data_buf(%struct.nand_chip* %87) #8, !dbg !16684
  store i8* %call93, i8** %wbuf, align 8, !dbg !16685
  %88 = load i8*, i8** %wbuf, align 8, !dbg !16686
  %89 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16687
  %writesize94 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %89, i32 0, i32 4, !dbg !16688
  %90 = load i32, i32* %writesize94, align 4, !dbg !16688
  %conv95 = zext i32 %90 to i64, !dbg !16687
  call void @llvm.memset.p0i8.i64(i8* align 1 %88, i8 -1, i64 %conv95, i1 false), !dbg !16689
  %91 = load i8*, i8** %wbuf, align 8, !dbg !16690
  %92 = load i32, i32* %column, align 4, !dbg !16691
  %idxprom = sext i32 %92 to i64, !dbg !16690
  %arrayidx = getelementptr i8, i8* %91, i64 %idxprom, !dbg !16690
  %93 = load i8*, i8** %buf, align 8, !dbg !16692
  %94 = load i32, i32* %bytes, align 4, !dbg !16693
  %conv96 = sext i32 %94 to i64, !dbg !16693
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %arrayidx, i8* align 1 %93, i64 %conv96, i1 false), !dbg !16694
  br label %if.end97, !dbg !16695

if.end97:                                         ; preds = %if.end92, %if.end82
  %95 = load i8*, i8** %oob, align 8, !dbg !16696
  %tobool98 = icmp ne i8* %95, null, !dbg !16696
  %lnot99 = xor i1 %tobool98, true, !dbg !16696
  %lnot100 = xor i1 %lnot99, true, !dbg !16696
  %lnot.ext = zext i1 %lnot100 to i32, !dbg !16696
  %conv101 = sext i32 %lnot.ext to i64, !dbg !16696
  %tobool102 = icmp ne i64 %conv101, 0, !dbg !16696
  br i1 %tobool102, label %if.then103, label %if.else117, !dbg !16698

if.then103:                                       ; preds = %if.end97
  call void @llvm.dbg.declare(metadata i64* %len104, metadata !16699, metadata !DIExpression()), !dbg !16701
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x285, metadata !16702, metadata !DIExpression()), !dbg !16704
  %96 = load i32, i32* %oobwritelen, align 4, !dbg !16704
  store i32 %96, i32* %__UNIQUE_ID___x285, align 4, !dbg !16704
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y286, metadata !16705, metadata !DIExpression()), !dbg !16704
  %97 = load i32, i32* %oobmaxlen, align 4, !dbg !16704
  store i32 %97, i32* %__UNIQUE_ID___y286, align 4, !dbg !16704
  %98 = load i32, i32* %__UNIQUE_ID___x285, align 4, !dbg !16704
  %99 = load i32, i32* %__UNIQUE_ID___y286, align 4, !dbg !16704
  %cmp106 = icmp ult i32 %98, %99, !dbg !16704
  br i1 %cmp106, label %cond.true108, label %cond.false109, !dbg !16704

cond.true108:                                     ; preds = %if.then103
  %100 = load i32, i32* %__UNIQUE_ID___x285, align 4, !dbg !16704
  br label %cond.end110, !dbg !16704

cond.false109:                                    ; preds = %if.then103
  %101 = load i32, i32* %__UNIQUE_ID___y286, align 4, !dbg !16704
  br label %cond.end110, !dbg !16704

cond.end110:                                      ; preds = %cond.false109, %cond.true108
  %cond111 = phi i32 [ %100, %cond.true108 ], [ %101, %cond.false109 ], !dbg !16704
  store i32 %cond111, i32* %tmp105, align 4, !dbg !16704
  %102 = load i32, i32* %tmp105, align 4, !dbg !16704
  %conv112 = zext i32 %102 to i64, !dbg !16706
  store i64 %conv112, i64* %len104, align 8, !dbg !16701
  %103 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16707
  %104 = load i8*, i8** %oob, align 8, !dbg !16708
  %105 = load i64, i64* %len104, align 8, !dbg !16709
  %106 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16710
  %call113 = call i8* @nand_fill_oob(%struct.nand_chip* %103, i8* %104, i64 %105, %struct.mtd_oob_ops* %106) #8, !dbg !16711
  store i8* %call113, i8** %oob, align 8, !dbg !16712
  %107 = load i64, i64* %len104, align 8, !dbg !16713
  %108 = load i32, i32* %oobwritelen, align 4, !dbg !16714
  %conv114 = zext i32 %108 to i64, !dbg !16714
  %sub115 = sub i64 %conv114, %107, !dbg !16714
  %conv116 = trunc i64 %sub115 to i32, !dbg !16714
  store i32 %conv116, i32* %oobwritelen, align 4, !dbg !16714
  br label %if.end119, !dbg !16715

if.else117:                                       ; preds = %if.end97
  %109 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16716
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %109, i32 0, i32 23, !dbg !16718
  %110 = load i8*, i8** %oob_poi, align 8, !dbg !16718
  %111 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16719
  %oobsize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %111, i32 0, i32 6, !dbg !16720
  %112 = load i32, i32* %oobsize, align 4, !dbg !16720
  %conv118 = zext i32 %112 to i64, !dbg !16719
  call void @llvm.memset.p0i8.i64(i8* align 1 %110, i8 -1, i64 %conv118, i1 false), !dbg !16721
  br label %if.end119

if.end119:                                        ; preds = %if.else117, %cond.end110
  %113 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16722
  %114 = load i32, i32* %column, align 4, !dbg !16723
  %115 = load i32, i32* %bytes, align 4, !dbg !16724
  %116 = load i8*, i8** %wbuf, align 8, !dbg !16725
  %117 = load i32, i32* %oob_required, align 4, !dbg !16726
  %118 = load i32, i32* %page, align 4, !dbg !16727
  %119 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16728
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %119, i32 0, i32 0, !dbg !16729
  %120 = load i32, i32* %mode, align 8, !dbg !16729
  %cmp120 = icmp eq i32 %120, 2, !dbg !16730
  %conv121 = zext i1 %cmp120 to i32, !dbg !16730
  %call122 = call i32 @nand_write_page(%struct.nand_chip* %113, i32 %114, i32 %115, i8* %116, i32 %117, i32 %118, i32 %conv121) #8, !dbg !16731
  store i32 %call122, i32* %ret, align 4, !dbg !16732
  %121 = load i32, i32* %ret, align 4, !dbg !16733
  %tobool123 = icmp ne i32 %121, 0, !dbg !16733
  br i1 %tobool123, label %if.then124, label %if.end125, !dbg !16735

if.then124:                                       ; preds = %if.end119
  br label %while.end, !dbg !16736

if.end125:                                        ; preds = %if.end119
  %122 = load i32, i32* %bytes, align 4, !dbg !16737
  %123 = load i32, i32* %writelen, align 4, !dbg !16738
  %sub126 = sub i32 %123, %122, !dbg !16738
  store i32 %sub126, i32* %writelen, align 4, !dbg !16738
  %124 = load i32, i32* %writelen, align 4, !dbg !16739
  %tobool127 = icmp ne i32 %124, 0, !dbg !16739
  br i1 %tobool127, label %if.end129, label %if.then128, !dbg !16741

if.then128:                                       ; preds = %if.end125
  br label %while.end, !dbg !16742

if.end129:                                        ; preds = %if.end125
  store i32 0, i32* %column, align 4, !dbg !16743
  %125 = load i32, i32* %bytes, align 4, !dbg !16744
  %126 = load i8*, i8** %buf, align 8, !dbg !16745
  %idx.ext = sext i32 %125 to i64, !dbg !16745
  %add.ptr = getelementptr i8, i8* %126, i64 %idx.ext, !dbg !16745
  store i8* %add.ptr, i8** %buf, align 8, !dbg !16745
  %127 = load i32, i32* %realpage, align 4, !dbg !16746
  %inc = add i32 %127, 1, !dbg !16746
  store i32 %inc, i32* %realpage, align 4, !dbg !16746
  %128 = load i32, i32* %realpage, align 4, !dbg !16747
  %129 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16748
  %pagemask130 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %129, i32 0, i32 20, !dbg !16749
  %130 = load i32, i32* %pagemask130, align 4, !dbg !16749
  %and131 = and i32 %128, %130, !dbg !16750
  store i32 %and131, i32* %page, align 4, !dbg !16751
  %131 = load i32, i32* %page, align 4, !dbg !16752
  %tobool132 = icmp ne i32 %131, 0, !dbg !16752
  br i1 %tobool132, label %if.end135, label %if.then133, !dbg !16754

if.then133:                                       ; preds = %if.end129
  %132 = load i32, i32* %chipnr, align 4, !dbg !16755
  %inc134 = add i32 %132, 1, !dbg !16755
  store i32 %inc134, i32* %chipnr, align 4, !dbg !16755
  %133 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16757
  call void @nand_deselect_target(%struct.nand_chip* %133) #8, !dbg !16758
  %134 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16759
  %135 = load i32, i32* %chipnr, align 4, !dbg !16760
  call void @nand_select_target(%struct.nand_chip* %134, i32 %135) #8, !dbg !16761
  br label %if.end135, !dbg !16762

if.end135:                                        ; preds = %if.then133, %if.end129
  br label %while.body, !dbg !16630, !llvm.loop !16763

while.end:                                        ; preds = %if.then128, %if.then124
  %136 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16765
  %len136 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %136, i32 0, i32 1, !dbg !16766
  %137 = load i64, i64* %len136, align 8, !dbg !16766
  %138 = load i32, i32* %writelen, align 4, !dbg !16767
  %conv137 = zext i32 %138 to i64, !dbg !16767
  %sub138 = sub i64 %137, %conv137, !dbg !16768
  %139 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16769
  %retlen139 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %139, i32 0, i32 2, !dbg !16770
  store i64 %sub138, i64* %retlen139, align 8, !dbg !16771
  %140 = load i8*, i8** %oob, align 8, !dbg !16772
  %tobool140 = icmp ne i8* %140, null, !dbg !16772
  %lnot141 = xor i1 %tobool140, true, !dbg !16772
  %lnot143 = xor i1 %lnot141, true, !dbg !16772
  %lnot.ext144 = zext i1 %lnot143 to i32, !dbg !16772
  %conv145 = sext i32 %lnot.ext144 to i64, !dbg !16772
  %tobool146 = icmp ne i64 %conv145, 0, !dbg !16772
  br i1 %tobool146, label %if.then147, label %if.end149, !dbg !16774

if.then147:                                       ; preds = %while.end
  %141 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16775
  %ooblen148 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %141, i32 0, i32 3, !dbg !16776
  %142 = load i64, i64* %ooblen148, align 8, !dbg !16776
  %143 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16777
  %oobretlen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %143, i32 0, i32 4, !dbg !16778
  store i64 %142, i64* %oobretlen, align 8, !dbg !16779
  br label %if.end149, !dbg !16777

if.end149:                                        ; preds = %if.then147, %while.end
  br label %err_out, !dbg !16772

err_out:                                          ; preds = %if.end149, %if.then59, %if.then23
  call void @llvm.dbg.label(metadata !16780), !dbg !16781
  %144 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16782
  call void @nand_deselect_target(%struct.nand_chip* %144) #8, !dbg !16783
  %145 = load i32, i32* %ret, align 4, !dbg !16784
  store i32 %145, i32* %retval, align 4, !dbg !16785
  br label %return, !dbg !16785

return:                                           ; preds = %err_out, %if.then13, %if.then
  %146 = load i32, i32* %retval, align 4, !dbg !16786
  ret i32 %146, !dbg !16786
}

; Function Attrs: noredzone
declare dso_local zeroext i1 @__virt_addr_valid(i64) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_write_page(%struct.nand_chip* %chip, i32 %offset, i32 %data_len, i8* %buf, i32 %oob_required, i32 %page, i32 %raw) #0 !dbg !16787 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %offset.addr = alloca i32, align 4
  %data_len.addr = alloca i32, align 4
  %buf.addr = alloca i8*, align 8
  %oob_required.addr = alloca i32, align 4
  %page.addr = alloca i32, align 4
  %raw.addr = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %status = alloca i32, align 4
  %subpage = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !16790, metadata !DIExpression()), !dbg !16791
  store i32 %offset, i32* %offset.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %offset.addr, metadata !16792, metadata !DIExpression()), !dbg !16793
  store i32 %data_len, i32* %data_len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %data_len.addr, metadata !16794, metadata !DIExpression()), !dbg !16795
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !16796, metadata !DIExpression()), !dbg !16797
  store i32 %oob_required, i32* %oob_required.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %oob_required.addr, metadata !16798, metadata !DIExpression()), !dbg !16799
  store i32 %page, i32* %page.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %page.addr, metadata !16800, metadata !DIExpression()), !dbg !16801
  store i32 %raw, i32* %raw.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %raw.addr, metadata !16802, metadata !DIExpression()), !dbg !16803
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !16804, metadata !DIExpression()), !dbg !16805
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16806
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !16807
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !16805
  call void @llvm.dbg.declare(metadata i32* %status, metadata !16808, metadata !DIExpression()), !dbg !16809
  call void @llvm.dbg.declare(metadata i32* %subpage, metadata !16810, metadata !DIExpression()), !dbg !16811
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16812
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 6, !dbg !16814
  %2 = load i32, i32* %options, align 8, !dbg !16814
  %conv = zext i32 %2 to i64, !dbg !16812
  %and = and i64 %conv, 512, !dbg !16815
  %tobool = icmp ne i64 %and, 0, !dbg !16815
  br i1 %tobool, label %if.else, label %land.lhs.true, !dbg !16816

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16817
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %3, i32 0, i32 31, !dbg !16818
  %write_subpage = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 21, !dbg !16819
  %4 = load i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)*, i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)** %write_subpage, align 8, !dbg !16819
  %tobool1 = icmp ne i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)* %4, null, !dbg !16817
  br i1 %tobool1, label %if.then, label %if.else, !dbg !16820

if.then:                                          ; preds = %land.lhs.true
  %5 = load i32, i32* %offset.addr, align 4, !dbg !16821
  %tobool2 = icmp ne i32 %5, 0, !dbg !16821
  br i1 %tobool2, label %lor.end, label %lor.rhs, !dbg !16822

lor.rhs:                                          ; preds = %if.then
  %6 = load i32, i32* %data_len.addr, align 4, !dbg !16823
  %7 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16824
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %7, i32 0, i32 4, !dbg !16825
  %8 = load i32, i32* %writesize, align 4, !dbg !16825
  %cmp = icmp ult i32 %6, %8, !dbg !16826
  br label %lor.end, !dbg !16822

lor.end:                                          ; preds = %lor.rhs, %if.then
  %9 = phi i1 [ true, %if.then ], [ %cmp, %lor.rhs ]
  %lor.ext = zext i1 %9 to i32, !dbg !16822
  store i32 %lor.ext, i32* %subpage, align 4, !dbg !16827
  br label %if.end, !dbg !16828

if.else:                                          ; preds = %land.lhs.true, %entry
  store i32 0, i32* %subpage, align 4, !dbg !16829
  br label %if.end

if.end:                                           ; preds = %if.else, %lor.end
  %10 = load i32, i32* %raw.addr, align 4, !dbg !16830
  %tobool4 = icmp ne i32 %10, 0, !dbg !16830
  %lnot = xor i1 %tobool4, true, !dbg !16830
  %lnot5 = xor i1 %lnot, true, !dbg !16830
  %lnot.ext = zext i1 %lnot5 to i32, !dbg !16830
  %conv6 = sext i32 %lnot.ext to i64, !dbg !16830
  %tobool7 = icmp ne i64 %conv6, 0, !dbg !16830
  br i1 %tobool7, label %if.then8, label %if.else11, !dbg !16832

if.then8:                                         ; preds = %if.end
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16833
  %ecc9 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 31, !dbg !16834
  %write_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc9, i32 0, i32 18, !dbg !16835
  %12 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page_raw, align 8, !dbg !16835
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16836
  %14 = load i8*, i8** %buf.addr, align 8, !dbg !16837
  %15 = load i32, i32* %oob_required.addr, align 4, !dbg !16838
  %16 = load i32, i32* %page.addr, align 4, !dbg !16839
  %call10 = call i32 %12(%struct.nand_chip* %13, i8* %14, i32 %15, i32 %16) #8, !dbg !16833
  store i32 %call10, i32* %status, align 4, !dbg !16840
  br label %if.end21, !dbg !16841

if.else11:                                        ; preds = %if.end
  %17 = load i32, i32* %subpage, align 4, !dbg !16842
  %tobool12 = icmp ne i32 %17, 0, !dbg !16842
  br i1 %tobool12, label %if.then13, label %if.else17, !dbg !16844

if.then13:                                        ; preds = %if.else11
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16845
  %ecc14 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 31, !dbg !16846
  %write_subpage15 = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc14, i32 0, i32 21, !dbg !16847
  %19 = load i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)*, i32 (%struct.nand_chip*, i32, i32, i8*, i32, i32)** %write_subpage15, align 8, !dbg !16847
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16848
  %21 = load i32, i32* %offset.addr, align 4, !dbg !16849
  %22 = load i32, i32* %data_len.addr, align 4, !dbg !16850
  %23 = load i8*, i8** %buf.addr, align 8, !dbg !16851
  %24 = load i32, i32* %oob_required.addr, align 4, !dbg !16852
  %25 = load i32, i32* %page.addr, align 4, !dbg !16853
  %call16 = call i32 %19(%struct.nand_chip* %20, i32 %21, i32 %22, i8* %23, i32 %24, i32 %25) #8, !dbg !16845
  store i32 %call16, i32* %status, align 4, !dbg !16854
  br label %if.end20, !dbg !16855

if.else17:                                        ; preds = %if.else11
  %26 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16856
  %ecc18 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %26, i32 0, i32 31, !dbg !16857
  %write_page = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc18, i32 0, i32 22, !dbg !16858
  %27 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %write_page, align 8, !dbg !16858
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16859
  %29 = load i8*, i8** %buf.addr, align 8, !dbg !16860
  %30 = load i32, i32* %oob_required.addr, align 4, !dbg !16861
  %31 = load i32, i32* %page.addr, align 4, !dbg !16862
  %call19 = call i32 %27(%struct.nand_chip* %28, i8* %29, i32 %30, i32 %31) #8, !dbg !16856
  store i32 %call19, i32* %status, align 4, !dbg !16863
  br label %if.end20

if.end20:                                         ; preds = %if.else17, %if.then13
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then8
  %32 = load i32, i32* %status, align 4, !dbg !16864
  %cmp22 = icmp slt i32 %32, 0, !dbg !16866
  br i1 %cmp22, label %if.then24, label %if.end25, !dbg !16867

if.then24:                                        ; preds = %if.end21
  %33 = load i32, i32* %status, align 4, !dbg !16868
  store i32 %33, i32* %retval, align 4, !dbg !16869
  br label %return, !dbg !16869

if.end25:                                         ; preds = %if.end21
  store i32 0, i32* %retval, align 4, !dbg !16870
  br label %return, !dbg !16870

return:                                           ; preds = %if.end25, %if.then24
  %34 = load i32, i32* %retval, align 4, !dbg !16871
  ret i32 %34, !dbg !16871
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_do_read_oob(%struct.nand_chip* %chip, i64 %from, %struct.mtd_oob_ops* %ops) #0 !dbg !16872 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %from.addr = alloca i64, align 8
  %ops.addr = alloca %struct.mtd_oob_ops*, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %max_bitflips = alloca i32, align 4
  %page = alloca i32, align 4
  %realpage = alloca i32, align 4
  %chipnr = alloca i32, align 4
  %stats = alloca %struct.mtd_ecc_stats, align 4
  %readlen = alloca i32, align 4
  %len = alloca i32, align 4
  %buf = alloca i8*, align 8
  %ret = alloca i32, align 4
  %tmp = alloca i32, align 4
  %__UNIQUE_ID___x279 = alloca i32, align 4
  %__UNIQUE_ID___y280 = alloca i32, align 4
  %tmp14 = alloca i32, align 4
  %__UNIQUE_ID___x281 = alloca i32, align 4
  %__UNIQUE_ID___y282 = alloca i32, align 4
  %tmp19 = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !16873, metadata !DIExpression()), !dbg !16874
  store i64 %from, i64* %from.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %from.addr, metadata !16875, metadata !DIExpression()), !dbg !16876
  store %struct.mtd_oob_ops* %ops, %struct.mtd_oob_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops** %ops.addr, metadata !16877, metadata !DIExpression()), !dbg !16878
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !16879, metadata !DIExpression()), !dbg !16880
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16881
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !16882
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !16880
  call void @llvm.dbg.declare(metadata i32* %max_bitflips, metadata !16883, metadata !DIExpression()), !dbg !16884
  store i32 0, i32* %max_bitflips, align 4, !dbg !16884
  call void @llvm.dbg.declare(metadata i32* %page, metadata !16885, metadata !DIExpression()), !dbg !16886
  call void @llvm.dbg.declare(metadata i32* %realpage, metadata !16887, metadata !DIExpression()), !dbg !16888
  call void @llvm.dbg.declare(metadata i32* %chipnr, metadata !16889, metadata !DIExpression()), !dbg !16890
  call void @llvm.dbg.declare(metadata %struct.mtd_ecc_stats* %stats, metadata !16891, metadata !DIExpression()), !dbg !16892
  call void @llvm.dbg.declare(metadata i32* %readlen, metadata !16893, metadata !DIExpression()), !dbg !16894
  %1 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16895
  %ooblen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %1, i32 0, i32 3, !dbg !16896
  %2 = load i64, i64* %ooblen, align 8, !dbg !16896
  %conv = trunc i64 %2 to i32, !dbg !16895
  store i32 %conv, i32* %readlen, align 4, !dbg !16894
  call void @llvm.dbg.declare(metadata i32* %len, metadata !16897, metadata !DIExpression()), !dbg !16898
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !16899, metadata !DIExpression()), !dbg !16900
  %3 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16901
  %oobbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %3, i32 0, i32 7, !dbg !16902
  %4 = load i8*, i8** %oobbuf, align 8, !dbg !16902
  store i8* %4, i8** %buf, align 8, !dbg !16900
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !16903, metadata !DIExpression()), !dbg !16904
  store i32 0, i32* %ret, align 4, !dbg !16904
  store i32 0, i32* %tmp, align 4, !dbg !16905
  %5 = load i32, i32* %tmp, align 4, !dbg !16908
  %6 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16909
  %ecc_stats = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %6, i32 0, i32 51, !dbg !16910
  %7 = bitcast %struct.mtd_ecc_stats* %stats to i8*, !dbg !16910
  %8 = bitcast %struct.mtd_ecc_stats* %ecc_stats to i8*, !dbg !16910
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 8 %8, i64 16, i1 false), !dbg !16910
  %9 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !16911
  %10 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16912
  %call1 = call i32 @mtd_oobavail(%struct.mtd_info* %9, %struct.mtd_oob_ops* %10) #8, !dbg !16913
  store i32 %call1, i32* %len, align 4, !dbg !16914
  %11 = load i64, i64* %from.addr, align 8, !dbg !16915
  %12 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16916
  %chip_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %12, i32 0, i32 19, !dbg !16917
  %13 = load i32, i32* %chip_shift, align 8, !dbg !16917
  %sh_prom = zext i32 %13 to i64, !dbg !16918
  %shr = ashr i64 %11, %sh_prom, !dbg !16918
  %conv2 = trunc i64 %shr to i32, !dbg !16919
  store i32 %conv2, i32* %chipnr, align 4, !dbg !16920
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16921
  %15 = load i32, i32* %chipnr, align 4, !dbg !16922
  call void @nand_select_target(%struct.nand_chip* %14, i32 %15) #8, !dbg !16923
  %16 = load i64, i64* %from.addr, align 8, !dbg !16924
  %17 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16925
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %17, i32 0, i32 17, !dbg !16926
  %18 = load i32, i32* %page_shift, align 8, !dbg !16926
  %sh_prom3 = zext i32 %18 to i64, !dbg !16927
  %shr4 = ashr i64 %16, %sh_prom3, !dbg !16927
  %conv5 = trunc i64 %shr4 to i32, !dbg !16928
  store i32 %conv5, i32* %realpage, align 4, !dbg !16929
  %19 = load i32, i32* %realpage, align 4, !dbg !16930
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16931
  %pagemask = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %20, i32 0, i32 20, !dbg !16932
  %21 = load i32, i32* %pagemask, align 4, !dbg !16932
  %and = and i32 %19, %21, !dbg !16933
  store i32 %and, i32* %page, align 4, !dbg !16934
  br label %while.body, !dbg !16935

while.body:                                       ; preds = %entry, %if.end33
  %22 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16936
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %22, i32 0, i32 0, !dbg !16939
  %23 = load i32, i32* %mode, align 8, !dbg !16939
  %cmp = icmp eq i32 %23, 2, !dbg !16940
  br i1 %cmp, label %if.then, label %if.else, !dbg !16941

if.then:                                          ; preds = %while.body
  %24 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16942
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %24, i32 0, i32 31, !dbg !16943
  %read_oob_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 24, !dbg !16944
  %25 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %read_oob_raw, align 8, !dbg !16944
  %26 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16945
  %27 = load i32, i32* %page, align 4, !dbg !16946
  %call7 = call i32 %25(%struct.nand_chip* %26, i32 %27) #8, !dbg !16942
  store i32 %call7, i32* %ret, align 4, !dbg !16947
  br label %if.end, !dbg !16948

if.else:                                          ; preds = %while.body
  %28 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16949
  %ecc8 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %28, i32 0, i32 31, !dbg !16950
  %read_oob = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc8, i32 0, i32 25, !dbg !16951
  %29 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %read_oob, align 8, !dbg !16951
  %30 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16952
  %31 = load i32, i32* %page, align 4, !dbg !16953
  %call9 = call i32 %29(%struct.nand_chip* %30, i32 %31) #8, !dbg !16949
  store i32 %call9, i32* %ret, align 4, !dbg !16954
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %32 = load i32, i32* %ret, align 4, !dbg !16955
  %cmp10 = icmp slt i32 %32, 0, !dbg !16957
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !16958

if.then12:                                        ; preds = %if.end
  br label %while.end, !dbg !16959

if.end13:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x279, metadata !16960, metadata !DIExpression()), !dbg !16962
  %33 = load i32, i32* %len, align 4, !dbg !16962
  store i32 %33, i32* %__UNIQUE_ID___x279, align 4, !dbg !16962
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y280, metadata !16963, metadata !DIExpression()), !dbg !16962
  %34 = load i32, i32* %readlen, align 4, !dbg !16962
  store i32 %34, i32* %__UNIQUE_ID___y280, align 4, !dbg !16962
  %35 = load i32, i32* %__UNIQUE_ID___x279, align 4, !dbg !16962
  %36 = load i32, i32* %__UNIQUE_ID___y280, align 4, !dbg !16962
  %cmp15 = icmp slt i32 %35, %36, !dbg !16962
  br i1 %cmp15, label %cond.true, label %cond.false, !dbg !16962

cond.true:                                        ; preds = %if.end13
  %37 = load i32, i32* %__UNIQUE_ID___x279, align 4, !dbg !16962
  br label %cond.end, !dbg !16962

cond.false:                                       ; preds = %if.end13
  %38 = load i32, i32* %__UNIQUE_ID___y280, align 4, !dbg !16962
  br label %cond.end, !dbg !16962

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %37, %cond.true ], [ %38, %cond.false ], !dbg !16962
  store i32 %cond, i32* %tmp14, align 4, !dbg !16962
  %39 = load i32, i32* %tmp14, align 4, !dbg !16962
  store i32 %39, i32* %len, align 4, !dbg !16964
  %40 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16965
  %41 = load i8*, i8** %buf, align 8, !dbg !16966
  %42 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !16967
  %43 = load i32, i32* %len, align 4, !dbg !16968
  %conv17 = sext i32 %43 to i64, !dbg !16968
  %call18 = call i8* @nand_transfer_oob(%struct.nand_chip* %40, i8* %41, %struct.mtd_oob_ops* %42, i64 %conv17) #8, !dbg !16969
  store i8* %call18, i8** %buf, align 8, !dbg !16970
  %44 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16971
  call void @nand_wait_readrdy(%struct.nand_chip* %44) #8, !dbg !16972
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x281, metadata !16973, metadata !DIExpression()), !dbg !16975
  %45 = load i32, i32* %max_bitflips, align 4, !dbg !16975
  store i32 %45, i32* %__UNIQUE_ID___x281, align 4, !dbg !16975
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y282, metadata !16976, metadata !DIExpression()), !dbg !16975
  %46 = load i32, i32* %ret, align 4, !dbg !16975
  store i32 %46, i32* %__UNIQUE_ID___y282, align 4, !dbg !16975
  %47 = load i32, i32* %__UNIQUE_ID___x281, align 4, !dbg !16975
  %48 = load i32, i32* %__UNIQUE_ID___y282, align 4, !dbg !16975
  %cmp20 = icmp ugt i32 %47, %48, !dbg !16975
  br i1 %cmp20, label %cond.true22, label %cond.false23, !dbg !16975

cond.true22:                                      ; preds = %cond.end
  %49 = load i32, i32* %__UNIQUE_ID___x281, align 4, !dbg !16975
  br label %cond.end24, !dbg !16975

cond.false23:                                     ; preds = %cond.end
  %50 = load i32, i32* %__UNIQUE_ID___y282, align 4, !dbg !16975
  br label %cond.end24, !dbg !16975

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi i32 [ %49, %cond.true22 ], [ %50, %cond.false23 ], !dbg !16975
  store i32 %cond25, i32* %tmp19, align 4, !dbg !16975
  %51 = load i32, i32* %tmp19, align 4, !dbg !16975
  store i32 %51, i32* %max_bitflips, align 4, !dbg !16977
  %52 = load i32, i32* %len, align 4, !dbg !16978
  %53 = load i32, i32* %readlen, align 4, !dbg !16979
  %sub = sub i32 %53, %52, !dbg !16979
  store i32 %sub, i32* %readlen, align 4, !dbg !16979
  %54 = load i32, i32* %readlen, align 4, !dbg !16980
  %tobool = icmp ne i32 %54, 0, !dbg !16980
  br i1 %tobool, label %if.end27, label %if.then26, !dbg !16982

if.then26:                                        ; preds = %cond.end24
  br label %while.end, !dbg !16983

if.end27:                                         ; preds = %cond.end24
  %55 = load i32, i32* %realpage, align 4, !dbg !16984
  %inc = add i32 %55, 1, !dbg !16984
  store i32 %inc, i32* %realpage, align 4, !dbg !16984
  %56 = load i32, i32* %realpage, align 4, !dbg !16985
  %57 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16986
  %pagemask28 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %57, i32 0, i32 20, !dbg !16987
  %58 = load i32, i32* %pagemask28, align 4, !dbg !16987
  %and29 = and i32 %56, %58, !dbg !16988
  store i32 %and29, i32* %page, align 4, !dbg !16989
  %59 = load i32, i32* %page, align 4, !dbg !16990
  %tobool30 = icmp ne i32 %59, 0, !dbg !16990
  br i1 %tobool30, label %if.end33, label %if.then31, !dbg !16992

if.then31:                                        ; preds = %if.end27
  %60 = load i32, i32* %chipnr, align 4, !dbg !16993
  %inc32 = add i32 %60, 1, !dbg !16993
  store i32 %inc32, i32* %chipnr, align 4, !dbg !16993
  %61 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16995
  call void @nand_deselect_target(%struct.nand_chip* %61) #8, !dbg !16996
  %62 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !16997
  %63 = load i32, i32* %chipnr, align 4, !dbg !16998
  call void @nand_select_target(%struct.nand_chip* %62, i32 %63) #8, !dbg !16999
  br label %if.end33, !dbg !17000

if.end33:                                         ; preds = %if.then31, %if.end27
  br label %while.body, !dbg !16935, !llvm.loop !17001

while.end:                                        ; preds = %if.then26, %if.then12
  %64 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17003
  call void @nand_deselect_target(%struct.nand_chip* %64) #8, !dbg !17004
  %65 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17005
  %ooblen34 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %65, i32 0, i32 3, !dbg !17006
  %66 = load i64, i64* %ooblen34, align 8, !dbg !17006
  %67 = load i32, i32* %readlen, align 4, !dbg !17007
  %conv35 = sext i32 %67 to i64, !dbg !17007
  %sub36 = sub i64 %66, %conv35, !dbg !17008
  %68 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17009
  %oobretlen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %68, i32 0, i32 4, !dbg !17010
  store i64 %sub36, i64* %oobretlen, align 8, !dbg !17011
  %69 = load i32, i32* %ret, align 4, !dbg !17012
  %cmp37 = icmp slt i32 %69, 0, !dbg !17014
  br i1 %cmp37, label %if.then39, label %if.end40, !dbg !17015

if.then39:                                        ; preds = %while.end
  %70 = load i32, i32* %ret, align 4, !dbg !17016
  store i32 %70, i32* %retval, align 4, !dbg !17017
  br label %return, !dbg !17017

if.end40:                                         ; preds = %while.end
  %71 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17018
  %ecc_stats41 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %71, i32 0, i32 51, !dbg !17020
  %failed = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats41, i32 0, i32 1, !dbg !17021
  %72 = load i32, i32* %failed, align 4, !dbg !17021
  %failed42 = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %stats, i32 0, i32 1, !dbg !17022
  %73 = load i32, i32* %failed42, align 4, !dbg !17022
  %sub43 = sub i32 %72, %73, !dbg !17023
  %tobool44 = icmp ne i32 %sub43, 0, !dbg !17023
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !17024

if.then45:                                        ; preds = %if.end40
  store i32 -74, i32* %retval, align 4, !dbg !17025
  br label %return, !dbg !17025

if.end46:                                         ; preds = %if.end40
  %74 = load i32, i32* %max_bitflips, align 4, !dbg !17026
  store i32 %74, i32* %retval, align 4, !dbg !17027
  br label %return, !dbg !17027

return:                                           ; preds = %if.end46, %if.then45, %if.then39
  %75 = load i32, i32* %retval, align 4, !dbg !17028
  ret i32 %75, !dbg !17028
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_do_read_ops(%struct.nand_chip* %chip, i64 %from, %struct.mtd_oob_ops* %ops) #0 !dbg !17029 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %from.addr = alloca i64, align 8
  %ops.addr = alloca %struct.mtd_oob_ops*, align 8
  %chipnr = alloca i32, align 4
  %page = alloca i32, align 4
  %realpage = alloca i32, align 4
  %col = alloca i32, align 4
  %bytes = alloca i32, align 4
  %aligned = alloca i32, align 4
  %oob_required = alloca i32, align 4
  %mtd = alloca %struct.mtd_info*, align 8
  %ret = alloca i32, align 4
  %readlen = alloca i32, align 4
  %oobreadlen = alloca i32, align 4
  %max_oobsize = alloca i32, align 4
  %bufpoi = alloca i8*, align 8
  %oob = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %use_bounce_buf = alloca i32, align 4
  %max_bitflips = alloca i32, align 4
  %retry_mode = alloca i32, align 4
  %ecc_fail = alloca i8, align 1
  %ecc_stats = alloca %struct.mtd_ecc_stats, align 4
  %__UNIQUE_ID___x265 = alloca i32, align 4
  %__UNIQUE_ID___y266 = alloca i32, align 4
  %tmp = alloca i32, align 4
  %tmp43 = alloca i32, align 4
  %toread = alloca i32, align 4
  %__UNIQUE_ID___x267 = alloca i32, align 4
  %__UNIQUE_ID___y268 = alloca i32, align 4
  %tmp114 = alloca i32, align 4
  %__UNIQUE_ID___x269 = alloca i32, align 4
  %__UNIQUE_ID___y270 = alloca i32, align 4
  %tmp148 = alloca i32, align 4
  %__UNIQUE_ID___x271 = alloca i32, align 4
  %__UNIQUE_ID___y272 = alloca i32, align 4
  %tmp164 = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !17030, metadata !DIExpression()), !dbg !17031
  store i64 %from, i64* %from.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %from.addr, metadata !17032, metadata !DIExpression()), !dbg !17033
  store %struct.mtd_oob_ops* %ops, %struct.mtd_oob_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops** %ops.addr, metadata !17034, metadata !DIExpression()), !dbg !17035
  call void @llvm.dbg.declare(metadata i32* %chipnr, metadata !17036, metadata !DIExpression()), !dbg !17037
  call void @llvm.dbg.declare(metadata i32* %page, metadata !17038, metadata !DIExpression()), !dbg !17039
  call void @llvm.dbg.declare(metadata i32* %realpage, metadata !17040, metadata !DIExpression()), !dbg !17041
  call void @llvm.dbg.declare(metadata i32* %col, metadata !17042, metadata !DIExpression()), !dbg !17043
  call void @llvm.dbg.declare(metadata i32* %bytes, metadata !17044, metadata !DIExpression()), !dbg !17045
  call void @llvm.dbg.declare(metadata i32* %aligned, metadata !17046, metadata !DIExpression()), !dbg !17047
  call void @llvm.dbg.declare(metadata i32* %oob_required, metadata !17048, metadata !DIExpression()), !dbg !17049
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !17050, metadata !DIExpression()), !dbg !17051
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17052
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !17053
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !17051
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !17054, metadata !DIExpression()), !dbg !17055
  store i32 0, i32* %ret, align 4, !dbg !17055
  call void @llvm.dbg.declare(metadata i32* %readlen, metadata !17056, metadata !DIExpression()), !dbg !17057
  %1 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17058
  %len = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %1, i32 0, i32 1, !dbg !17059
  %2 = load i64, i64* %len, align 8, !dbg !17059
  %conv = trunc i64 %2 to i32, !dbg !17058
  store i32 %conv, i32* %readlen, align 4, !dbg !17057
  call void @llvm.dbg.declare(metadata i32* %oobreadlen, metadata !17060, metadata !DIExpression()), !dbg !17061
  %3 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17062
  %ooblen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %3, i32 0, i32 3, !dbg !17063
  %4 = load i64, i64* %ooblen, align 8, !dbg !17063
  %conv1 = trunc i64 %4 to i32, !dbg !17062
  store i32 %conv1, i32* %oobreadlen, align 4, !dbg !17061
  call void @llvm.dbg.declare(metadata i32* %max_oobsize, metadata !17064, metadata !DIExpression()), !dbg !17065
  %5 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17066
  %6 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17067
  %call2 = call i32 @mtd_oobavail(%struct.mtd_info* %5, %struct.mtd_oob_ops* %6) #8, !dbg !17068
  store i32 %call2, i32* %max_oobsize, align 4, !dbg !17065
  call void @llvm.dbg.declare(metadata i8** %bufpoi, metadata !17069, metadata !DIExpression()), !dbg !17070
  call void @llvm.dbg.declare(metadata i8** %oob, metadata !17071, metadata !DIExpression()), !dbg !17072
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !17073, metadata !DIExpression()), !dbg !17074
  call void @llvm.dbg.declare(metadata i32* %use_bounce_buf, metadata !17075, metadata !DIExpression()), !dbg !17076
  call void @llvm.dbg.declare(metadata i32* %max_bitflips, metadata !17077, metadata !DIExpression()), !dbg !17078
  store i32 0, i32* %max_bitflips, align 4, !dbg !17078
  call void @llvm.dbg.declare(metadata i32* %retry_mode, metadata !17079, metadata !DIExpression()), !dbg !17080
  store i32 0, i32* %retry_mode, align 4, !dbg !17080
  call void @llvm.dbg.declare(metadata i8* %ecc_fail, metadata !17081, metadata !DIExpression()), !dbg !17082
  store i8 0, i8* %ecc_fail, align 1, !dbg !17082
  %7 = load i64, i64* %from.addr, align 8, !dbg !17083
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17084
  %chip_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %8, i32 0, i32 19, !dbg !17085
  %9 = load i32, i32* %chip_shift, align 8, !dbg !17085
  %sh_prom = zext i32 %9 to i64, !dbg !17086
  %shr = ashr i64 %7, %sh_prom, !dbg !17086
  %conv3 = trunc i64 %shr to i32, !dbg !17087
  store i32 %conv3, i32* %chipnr, align 4, !dbg !17088
  %10 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17089
  %11 = load i32, i32* %chipnr, align 4, !dbg !17090
  call void @nand_select_target(%struct.nand_chip* %10, i32 %11) #8, !dbg !17091
  %12 = load i64, i64* %from.addr, align 8, !dbg !17092
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17093
  %page_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %13, i32 0, i32 17, !dbg !17094
  %14 = load i32, i32* %page_shift, align 8, !dbg !17094
  %sh_prom4 = zext i32 %14 to i64, !dbg !17095
  %shr5 = ashr i64 %12, %sh_prom4, !dbg !17095
  %conv6 = trunc i64 %shr5 to i32, !dbg !17096
  store i32 %conv6, i32* %realpage, align 4, !dbg !17097
  %15 = load i32, i32* %realpage, align 4, !dbg !17098
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17099
  %pagemask = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %16, i32 0, i32 20, !dbg !17100
  %17 = load i32, i32* %pagemask, align 4, !dbg !17100
  %and = and i32 %15, %17, !dbg !17101
  store i32 %and, i32* %page, align 4, !dbg !17102
  %18 = load i64, i64* %from.addr, align 8, !dbg !17103
  %19 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17104
  %writesize = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %19, i32 0, i32 4, !dbg !17105
  %20 = load i32, i32* %writesize, align 4, !dbg !17105
  %sub = sub i32 %20, 1, !dbg !17106
  %conv7 = zext i32 %sub to i64, !dbg !17107
  %and8 = and i64 %18, %conv7, !dbg !17108
  %conv9 = trunc i64 %and8 to i32, !dbg !17109
  store i32 %conv9, i32* %col, align 4, !dbg !17110
  %21 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17111
  %datbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %21, i32 0, i32 6, !dbg !17112
  %22 = load i8*, i8** %datbuf, align 8, !dbg !17112
  store i8* %22, i8** %buf, align 8, !dbg !17113
  %23 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17114
  %oobbuf = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %23, i32 0, i32 7, !dbg !17115
  %24 = load i8*, i8** %oobbuf, align 8, !dbg !17115
  store i8* %24, i8** %oob, align 8, !dbg !17116
  %25 = load i8*, i8** %oob, align 8, !dbg !17117
  %tobool = icmp ne i8* %25, null, !dbg !17117
  %26 = zext i1 %tobool to i64, !dbg !17117
  %cond = select i1 %tobool, i32 1, i32 0, !dbg !17117
  store i32 %cond, i32* %oob_required, align 4, !dbg !17118
  br label %while.body, !dbg !17119

while.body:                                       ; preds = %entry, %if.end190
  call void @llvm.dbg.declare(metadata %struct.mtd_ecc_stats* %ecc_stats, metadata !17120, metadata !DIExpression()), !dbg !17122
  %27 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17123
  %ecc_stats10 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %27, i32 0, i32 51, !dbg !17124
  %28 = bitcast %struct.mtd_ecc_stats* %ecc_stats to i8*, !dbg !17124
  %29 = bitcast %struct.mtd_ecc_stats* %ecc_stats10 to i8*, !dbg !17124
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 8 %29, i64 16, i1 false), !dbg !17124
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x265, metadata !17125, metadata !DIExpression()), !dbg !17127
  %30 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17127
  %writesize11 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %30, i32 0, i32 4, !dbg !17127
  %31 = load i32, i32* %writesize11, align 4, !dbg !17127
  %32 = load i32, i32* %col, align 4, !dbg !17127
  %sub12 = sub i32 %31, %32, !dbg !17127
  store i32 %sub12, i32* %__UNIQUE_ID___x265, align 4, !dbg !17127
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y266, metadata !17128, metadata !DIExpression()), !dbg !17127
  %33 = load i32, i32* %readlen, align 4, !dbg !17127
  store i32 %33, i32* %__UNIQUE_ID___y266, align 4, !dbg !17127
  %34 = load i32, i32* %__UNIQUE_ID___x265, align 4, !dbg !17127
  %35 = load i32, i32* %__UNIQUE_ID___y266, align 4, !dbg !17127
  %cmp = icmp ult i32 %34, %35, !dbg !17127
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !17127

cond.true:                                        ; preds = %while.body
  %36 = load i32, i32* %__UNIQUE_ID___x265, align 4, !dbg !17127
  br label %cond.end, !dbg !17127

cond.false:                                       ; preds = %while.body
  %37 = load i32, i32* %__UNIQUE_ID___y266, align 4, !dbg !17127
  br label %cond.end, !dbg !17127

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond14 = phi i32 [ %36, %cond.true ], [ %37, %cond.false ], !dbg !17127
  store i32 %cond14, i32* %tmp, align 4, !dbg !17127
  %38 = load i32, i32* %tmp, align 4, !dbg !17127
  store i32 %38, i32* %bytes, align 4, !dbg !17129
  %39 = load i32, i32* %bytes, align 4, !dbg !17130
  %40 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17131
  %writesize15 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %40, i32 0, i32 4, !dbg !17132
  %41 = load i32, i32* %writesize15, align 4, !dbg !17132
  %cmp16 = icmp eq i32 %39, %41, !dbg !17133
  %conv17 = zext i1 %cmp16 to i32, !dbg !17133
  store i32 %conv17, i32* %aligned, align 4, !dbg !17134
  %42 = load i32, i32* %aligned, align 4, !dbg !17135
  %tobool18 = icmp ne i32 %42, 0, !dbg !17135
  br i1 %tobool18, label %if.else, label %if.then, !dbg !17137

if.then:                                          ; preds = %cond.end
  store i32 1, i32* %use_bounce_buf, align 4, !dbg !17138
  br label %if.end29, !dbg !17139

if.else:                                          ; preds = %cond.end
  %43 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17140
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %43, i32 0, i32 6, !dbg !17142
  %44 = load i32, i32* %options, align 8, !dbg !17142
  %conv19 = zext i32 %44 to i64, !dbg !17140
  %and20 = and i64 %conv19, 1048576, !dbg !17143
  %tobool21 = icmp ne i64 %and20, 0, !dbg !17143
  br i1 %tobool21, label %if.then22, label %if.else28, !dbg !17144

if.then22:                                        ; preds = %if.else
  %45 = load i8*, i8** %buf, align 8, !dbg !17145
  %46 = ptrtoint i8* %45 to i64, !dbg !17145
  %call23 = call zeroext i1 @__virt_addr_valid(i64 %46) #8, !dbg !17145
  br i1 %call23, label %lor.rhs, label %lor.end, !dbg !17146

lor.rhs:                                          ; preds = %if.then22
  %47 = load i8*, i8** %buf, align 8, !dbg !17147
  %48 = ptrtoint i8* %47 to i64, !dbg !17147
  %49 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17147
  %buf_align = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %49, i32 0, i32 25, !dbg !17147
  %50 = load i64, i64* %buf_align, align 8, !dbg !17147
  %sub24 = sub i64 %50, 1, !dbg !17147
  %and25 = and i64 %48, %sub24, !dbg !17147
  %cmp26 = icmp eq i64 %and25, 0, !dbg !17147
  %lnot = xor i1 %cmp26, true, !dbg !17148
  br label %lor.end, !dbg !17146

lor.end:                                          ; preds = %lor.rhs, %if.then22
  %51 = phi i1 [ true, %if.then22 ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %51 to i32, !dbg !17146
  store i32 %lor.ext, i32* %use_bounce_buf, align 4, !dbg !17149
  br label %if.end, !dbg !17150

if.else28:                                        ; preds = %if.else
  store i32 0, i32* %use_bounce_buf, align 4, !dbg !17151
  br label %if.end

if.end:                                           ; preds = %if.else28, %lor.end
  br label %if.end29

if.end29:                                         ; preds = %if.end, %if.then
  %52 = load i32, i32* %realpage, align 4, !dbg !17152
  %53 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17154
  %pagecache = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %53, i32 0, i32 24, !dbg !17155
  %page30 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache, i32 0, i32 1, !dbg !17156
  %54 = load i32, i32* %page30, align 4, !dbg !17156
  %cmp31 = icmp ne i32 %52, %54, !dbg !17157
  br i1 %cmp31, label %if.then34, label %lor.lhs.false, !dbg !17158

lor.lhs.false:                                    ; preds = %if.end29
  %55 = load i8*, i8** %oob, align 8, !dbg !17159
  %tobool33 = icmp ne i8* %55, null, !dbg !17159
  br i1 %tobool33, label %if.then34, label %if.else155, !dbg !17160

if.then34:                                        ; preds = %lor.lhs.false, %if.end29
  %56 = load i32, i32* %use_bounce_buf, align 4, !dbg !17161
  %tobool35 = icmp ne i32 %56, 0, !dbg !17161
  br i1 %tobool35, label %cond.true36, label %cond.false37, !dbg !17161

cond.true36:                                      ; preds = %if.then34
  %57 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17163
  %data_buf = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %57, i32 0, i32 22, !dbg !17164
  %58 = load i8*, i8** %data_buf, align 8, !dbg !17164
  br label %cond.end38, !dbg !17161

cond.false37:                                     ; preds = %if.then34
  %59 = load i8*, i8** %buf, align 8, !dbg !17165
  br label %cond.end38, !dbg !17161

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i8* [ %58, %cond.true36 ], [ %59, %cond.false37 ], !dbg !17161
  store i8* %cond39, i8** %bufpoi, align 8, !dbg !17166
  %60 = load i32, i32* %use_bounce_buf, align 4, !dbg !17167
  %tobool40 = icmp ne i32 %60, 0, !dbg !17167
  br i1 %tobool40, label %land.lhs.true, label %if.end44, !dbg !17169

land.lhs.true:                                    ; preds = %cond.end38
  %61 = load i32, i32* %aligned, align 4, !dbg !17170
  %tobool41 = icmp ne i32 %61, 0, !dbg !17170
  br i1 %tobool41, label %if.then42, label %if.end44, !dbg !17171

if.then42:                                        ; preds = %land.lhs.true
  store i32 0, i32* %tmp43, align 4, !dbg !17172
  %62 = load i32, i32* %tmp43, align 4, !dbg !17175
  br label %if.end44, !dbg !17176

if.end44:                                         ; preds = %if.then42, %land.lhs.true, %cond.end38
  br label %read_retry, !dbg !17170

read_retry:                                       ; preds = %if.end141, %if.end44
  call void @llvm.dbg.label(metadata !17177), !dbg !17178
  %63 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17179
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %63, i32 0, i32 0, !dbg !17179
  %64 = load i32, i32* %mode, align 8, !dbg !17179
  %cmp45 = icmp eq i32 %64, 2, !dbg !17179
  %lnot47 = xor i1 %cmp45, true, !dbg !17179
  %lnot48 = xor i1 %lnot47, true, !dbg !17179
  %lnot.ext = zext i1 %lnot48 to i32, !dbg !17179
  %conv49 = sext i32 %lnot.ext to i64, !dbg !17179
  %tobool50 = icmp ne i64 %conv49, 0, !dbg !17179
  br i1 %tobool50, label %if.then51, label %if.else53, !dbg !17181

if.then51:                                        ; preds = %read_retry
  %65 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17182
  %ecc = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %65, i32 0, i32 31, !dbg !17183
  %read_page_raw = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc, i32 0, i32 17, !dbg !17184
  %66 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page_raw, align 8, !dbg !17184
  %67 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17185
  %68 = load i8*, i8** %bufpoi, align 8, !dbg !17186
  %69 = load i32, i32* %oob_required, align 4, !dbg !17187
  %70 = load i32, i32* %page, align 4, !dbg !17188
  %call52 = call i32 %66(%struct.nand_chip* %67, i8* %68, i32 %69, i32 %70) #8, !dbg !17182
  store i32 %call52, i32* %ret, align 4, !dbg !17189
  br label %if.end69, !dbg !17190

if.else53:                                        ; preds = %read_retry
  %71 = load i32, i32* %aligned, align 4, !dbg !17191
  %tobool54 = icmp ne i32 %71, 0, !dbg !17191
  br i1 %tobool54, label %if.else65, label %land.lhs.true55, !dbg !17193

land.lhs.true55:                                  ; preds = %if.else53
  %72 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17194
  %options56 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %72, i32 0, i32 6, !dbg !17194
  %73 = load i32, i32* %options56, align 8, !dbg !17194
  %conv57 = zext i32 %73 to i64, !dbg !17194
  %and58 = and i64 %conv57, 4096, !dbg !17194
  %tobool59 = icmp ne i64 %and58, 0, !dbg !17194
  br i1 %tobool59, label %land.lhs.true60, label %if.else65, !dbg !17195

land.lhs.true60:                                  ; preds = %land.lhs.true55
  %74 = load i8*, i8** %oob, align 8, !dbg !17196
  %tobool61 = icmp ne i8* %74, null, !dbg !17196
  br i1 %tobool61, label %if.else65, label %if.then62, !dbg !17197

if.then62:                                        ; preds = %land.lhs.true60
  %75 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17198
  %ecc63 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %75, i32 0, i32 31, !dbg !17199
  %read_subpage = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc63, i32 0, i32 20, !dbg !17200
  %76 = load i32 (%struct.nand_chip*, i32, i32, i8*, i32)*, i32 (%struct.nand_chip*, i32, i32, i8*, i32)** %read_subpage, align 8, !dbg !17200
  %77 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17201
  %78 = load i32, i32* %col, align 4, !dbg !17202
  %79 = load i32, i32* %bytes, align 4, !dbg !17203
  %80 = load i8*, i8** %bufpoi, align 8, !dbg !17204
  %81 = load i32, i32* %page, align 4, !dbg !17205
  %call64 = call i32 %76(%struct.nand_chip* %77, i32 %78, i32 %79, i8* %80, i32 %81) #8, !dbg !17198
  store i32 %call64, i32* %ret, align 4, !dbg !17206
  br label %if.end68, !dbg !17207

if.else65:                                        ; preds = %land.lhs.true60, %land.lhs.true55, %if.else53
  %82 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17208
  %ecc66 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %82, i32 0, i32 31, !dbg !17209
  %read_page = getelementptr inbounds %struct.nand_ecc_ctrl, %struct.nand_ecc_ctrl* %ecc66, i32 0, i32 19, !dbg !17210
  %83 = load i32 (%struct.nand_chip*, i8*, i32, i32)*, i32 (%struct.nand_chip*, i8*, i32, i32)** %read_page, align 8, !dbg !17210
  %84 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17211
  %85 = load i8*, i8** %bufpoi, align 8, !dbg !17212
  %86 = load i32, i32* %oob_required, align 4, !dbg !17213
  %87 = load i32, i32* %page, align 4, !dbg !17214
  %call67 = call i32 %83(%struct.nand_chip* %84, i8* %85, i32 %86, i32 %87) #8, !dbg !17208
  store i32 %call67, i32* %ret, align 4, !dbg !17215
  br label %if.end68

if.end68:                                         ; preds = %if.else65, %if.then62
  br label %if.end69

if.end69:                                         ; preds = %if.end68, %if.then51
  %88 = load i32, i32* %ret, align 4, !dbg !17216
  %cmp70 = icmp slt i32 %88, 0, !dbg !17218
  br i1 %cmp70, label %if.then72, label %if.end78, !dbg !17219

if.then72:                                        ; preds = %if.end69
  %89 = load i32, i32* %use_bounce_buf, align 4, !dbg !17220
  %tobool73 = icmp ne i32 %89, 0, !dbg !17220
  br i1 %tobool73, label %if.then74, label %if.end77, !dbg !17223

if.then74:                                        ; preds = %if.then72
  %90 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17224
  %pagecache75 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %90, i32 0, i32 24, !dbg !17225
  %page76 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache75, i32 0, i32 1, !dbg !17226
  store i32 -1, i32* %page76, align 4, !dbg !17227
  br label %if.end77, !dbg !17224

if.end77:                                         ; preds = %if.then74, %if.then72
  br label %while.end, !dbg !17228

if.end78:                                         ; preds = %if.end69
  %91 = load i32, i32* %use_bounce_buf, align 4, !dbg !17229
  %tobool79 = icmp ne i32 %91, 0, !dbg !17229
  br i1 %tobool79, label %if.then80, label %if.end105, !dbg !17231

if.then80:                                        ; preds = %if.end78
  %92 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17232
  %options81 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %92, i32 0, i32 6, !dbg !17232
  %93 = load i32, i32* %options81, align 8, !dbg !17232
  %conv82 = zext i32 %93 to i64, !dbg !17232
  %and83 = and i64 %conv82, 4096, !dbg !17232
  %tobool84 = icmp ne i64 %and83, 0, !dbg !17232
  br i1 %tobool84, label %if.else100, label %land.lhs.true85, !dbg !17235

land.lhs.true85:                                  ; preds = %if.then80
  %94 = load i8*, i8** %oob, align 8, !dbg !17236
  %tobool86 = icmp ne i8* %94, null, !dbg !17236
  br i1 %tobool86, label %if.else100, label %land.lhs.true87, !dbg !17237

land.lhs.true87:                                  ; preds = %land.lhs.true85
  %95 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17238
  %ecc_stats88 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %95, i32 0, i32 51, !dbg !17239
  %failed = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats88, i32 0, i32 1, !dbg !17240
  %96 = load i32, i32* %failed, align 4, !dbg !17240
  %failed89 = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats, i32 0, i32 1, !dbg !17241
  %97 = load i32, i32* %failed89, align 4, !dbg !17241
  %sub90 = sub i32 %96, %97, !dbg !17242
  %tobool91 = icmp ne i32 %sub90, 0, !dbg !17242
  br i1 %tobool91, label %if.else100, label %land.lhs.true92, !dbg !17243

land.lhs.true92:                                  ; preds = %land.lhs.true87
  %98 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17244
  %mode93 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %98, i32 0, i32 0, !dbg !17245
  %99 = load i32, i32* %mode93, align 8, !dbg !17245
  %cmp94 = icmp ne i32 %99, 2, !dbg !17246
  br i1 %cmp94, label %if.then96, label %if.else100, !dbg !17247

if.then96:                                        ; preds = %land.lhs.true92
  %100 = load i32, i32* %realpage, align 4, !dbg !17248
  %101 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17250
  %pagecache97 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %101, i32 0, i32 24, !dbg !17251
  %page98 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache97, i32 0, i32 1, !dbg !17252
  store i32 %100, i32* %page98, align 4, !dbg !17253
  %102 = load i32, i32* %ret, align 4, !dbg !17254
  %103 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17255
  %pagecache99 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %103, i32 0, i32 24, !dbg !17256
  %bitflips = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache99, i32 0, i32 0, !dbg !17257
  store i32 %102, i32* %bitflips, align 8, !dbg !17258
  br label %if.end103, !dbg !17259

if.else100:                                       ; preds = %land.lhs.true92, %land.lhs.true87, %land.lhs.true85, %if.then80
  %104 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17260
  %pagecache101 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %104, i32 0, i32 24, !dbg !17262
  %page102 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache101, i32 0, i32 1, !dbg !17263
  store i32 -1, i32* %page102, align 4, !dbg !17264
  br label %if.end103

if.end103:                                        ; preds = %if.else100, %if.then96
  %105 = load i8*, i8** %buf, align 8, !dbg !17265
  %106 = load i8*, i8** %bufpoi, align 8, !dbg !17266
  %107 = load i32, i32* %col, align 4, !dbg !17267
  %idx.ext = sext i32 %107 to i64, !dbg !17268
  %add.ptr = getelementptr i8, i8* %106, i64 %idx.ext, !dbg !17268
  %108 = load i32, i32* %bytes, align 4, !dbg !17269
  %conv104 = sext i32 %108 to i64, !dbg !17269
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %105, i8* align 1 %add.ptr, i64 %conv104, i1 false), !dbg !17270
  br label %if.end105, !dbg !17271

if.end105:                                        ; preds = %if.end103, %if.end78
  %109 = load i8*, i8** %oob, align 8, !dbg !17272
  %tobool106 = icmp ne i8* %109, null, !dbg !17272
  %lnot107 = xor i1 %tobool106, true, !dbg !17272
  %lnot109 = xor i1 %lnot107, true, !dbg !17272
  %lnot.ext110 = zext i1 %lnot109 to i32, !dbg !17272
  %conv111 = sext i32 %lnot.ext110 to i64, !dbg !17272
  %tobool112 = icmp ne i64 %conv111, 0, !dbg !17272
  br i1 %tobool112, label %if.then113, label %if.end127, !dbg !17274

if.then113:                                       ; preds = %if.end105
  call void @llvm.dbg.declare(metadata i32* %toread, metadata !17275, metadata !DIExpression()), !dbg !17277
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x267, metadata !17278, metadata !DIExpression()), !dbg !17280
  %110 = load i32, i32* %oobreadlen, align 4, !dbg !17280
  store i32 %110, i32* %__UNIQUE_ID___x267, align 4, !dbg !17280
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y268, metadata !17281, metadata !DIExpression()), !dbg !17280
  %111 = load i32, i32* %max_oobsize, align 4, !dbg !17280
  store i32 %111, i32* %__UNIQUE_ID___y268, align 4, !dbg !17280
  %112 = load i32, i32* %__UNIQUE_ID___x267, align 4, !dbg !17280
  %113 = load i32, i32* %__UNIQUE_ID___y268, align 4, !dbg !17280
  %cmp115 = icmp ult i32 %112, %113, !dbg !17280
  br i1 %cmp115, label %cond.true117, label %cond.false118, !dbg !17280

cond.true117:                                     ; preds = %if.then113
  %114 = load i32, i32* %__UNIQUE_ID___x267, align 4, !dbg !17280
  br label %cond.end119, !dbg !17280

cond.false118:                                    ; preds = %if.then113
  %115 = load i32, i32* %__UNIQUE_ID___y268, align 4, !dbg !17280
  br label %cond.end119, !dbg !17280

cond.end119:                                      ; preds = %cond.false118, %cond.true117
  %cond120 = phi i32 [ %114, %cond.true117 ], [ %115, %cond.false118 ], !dbg !17280
  store i32 %cond120, i32* %tmp114, align 4, !dbg !17280
  %116 = load i32, i32* %tmp114, align 4, !dbg !17280
  store i32 %116, i32* %toread, align 4, !dbg !17277
  %117 = load i32, i32* %toread, align 4, !dbg !17282
  %tobool121 = icmp ne i32 %117, 0, !dbg !17282
  br i1 %tobool121, label %if.then122, label %if.end126, !dbg !17284

if.then122:                                       ; preds = %cond.end119
  %118 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17285
  %119 = load i8*, i8** %oob, align 8, !dbg !17287
  %120 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17288
  %121 = load i32, i32* %toread, align 4, !dbg !17289
  %conv123 = sext i32 %121 to i64, !dbg !17289
  %call124 = call i8* @nand_transfer_oob(%struct.nand_chip* %118, i8* %119, %struct.mtd_oob_ops* %120, i64 %conv123) #8, !dbg !17290
  store i8* %call124, i8** %oob, align 8, !dbg !17291
  %122 = load i32, i32* %toread, align 4, !dbg !17292
  %123 = load i32, i32* %oobreadlen, align 4, !dbg !17293
  %sub125 = sub i32 %123, %122, !dbg !17293
  store i32 %sub125, i32* %oobreadlen, align 4, !dbg !17293
  br label %if.end126, !dbg !17294

if.end126:                                        ; preds = %if.then122, %cond.end119
  br label %if.end127, !dbg !17295

if.end127:                                        ; preds = %if.end126, %if.end105
  %124 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17296
  call void @nand_wait_readrdy(%struct.nand_chip* %124) #8, !dbg !17297
  %125 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17298
  %ecc_stats128 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %125, i32 0, i32 51, !dbg !17300
  %failed129 = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats128, i32 0, i32 1, !dbg !17301
  %126 = load i32, i32* %failed129, align 4, !dbg !17301
  %failed130 = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats, i32 0, i32 1, !dbg !17302
  %127 = load i32, i32* %failed130, align 4, !dbg !17302
  %sub131 = sub i32 %126, %127, !dbg !17303
  %tobool132 = icmp ne i32 %sub131, 0, !dbg !17303
  br i1 %tobool132, label %if.then133, label %if.end145, !dbg !17304

if.then133:                                       ; preds = %if.end127
  %128 = load i32, i32* %retry_mode, align 4, !dbg !17305
  %add = add i32 %128, 1, !dbg !17308
  %129 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17309
  %read_retries = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %129, i32 0, i32 29, !dbg !17310
  %130 = load i32, i32* %read_retries, align 8, !dbg !17310
  %cmp134 = icmp slt i32 %add, %130, !dbg !17311
  br i1 %cmp134, label %if.then136, label %if.else143, !dbg !17312

if.then136:                                       ; preds = %if.then133
  %131 = load i32, i32* %retry_mode, align 4, !dbg !17313
  %inc = add i32 %131, 1, !dbg !17313
  store i32 %inc, i32* %retry_mode, align 4, !dbg !17313
  %132 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17315
  %133 = load i32, i32* %retry_mode, align 4, !dbg !17316
  %call137 = call i32 @nand_setup_read_retry(%struct.nand_chip* %132, i32 %133) #8, !dbg !17317
  store i32 %call137, i32* %ret, align 4, !dbg !17318
  %134 = load i32, i32* %ret, align 4, !dbg !17319
  %cmp138 = icmp slt i32 %134, 0, !dbg !17321
  br i1 %cmp138, label %if.then140, label %if.end141, !dbg !17322

if.then140:                                       ; preds = %if.then136
  br label %while.end, !dbg !17323

if.end141:                                        ; preds = %if.then136
  %135 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17324
  %ecc_stats142 = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %135, i32 0, i32 51, !dbg !17325
  %136 = bitcast %struct.mtd_ecc_stats* %ecc_stats142 to i8*, !dbg !17326
  %137 = bitcast %struct.mtd_ecc_stats* %ecc_stats to i8*, !dbg !17326
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %136, i8* align 4 %137, i64 16, i1 false), !dbg !17326
  br label %read_retry, !dbg !17327

if.else143:                                       ; preds = %if.then133
  store i8 1, i8* %ecc_fail, align 1, !dbg !17328
  br label %if.end144

if.end144:                                        ; preds = %if.else143
  br label %if.end145, !dbg !17330

if.end145:                                        ; preds = %if.end144, %if.end127
  %138 = load i32, i32* %bytes, align 4, !dbg !17331
  %139 = load i8*, i8** %buf, align 8, !dbg !17332
  %idx.ext146 = sext i32 %138 to i64, !dbg !17332
  %add.ptr147 = getelementptr i8, i8* %139, i64 %idx.ext146, !dbg !17332
  store i8* %add.ptr147, i8** %buf, align 8, !dbg !17332
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x269, metadata !17333, metadata !DIExpression()), !dbg !17335
  %140 = load i32, i32* %max_bitflips, align 4, !dbg !17335
  store i32 %140, i32* %__UNIQUE_ID___x269, align 4, !dbg !17335
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y270, metadata !17336, metadata !DIExpression()), !dbg !17335
  %141 = load i32, i32* %ret, align 4, !dbg !17335
  store i32 %141, i32* %__UNIQUE_ID___y270, align 4, !dbg !17335
  %142 = load i32, i32* %__UNIQUE_ID___x269, align 4, !dbg !17335
  %143 = load i32, i32* %__UNIQUE_ID___y270, align 4, !dbg !17335
  %cmp149 = icmp ugt i32 %142, %143, !dbg !17335
  br i1 %cmp149, label %cond.true151, label %cond.false152, !dbg !17335

cond.true151:                                     ; preds = %if.end145
  %144 = load i32, i32* %__UNIQUE_ID___x269, align 4, !dbg !17335
  br label %cond.end153, !dbg !17335

cond.false152:                                    ; preds = %if.end145
  %145 = load i32, i32* %__UNIQUE_ID___y270, align 4, !dbg !17335
  br label %cond.end153, !dbg !17335

cond.end153:                                      ; preds = %cond.false152, %cond.true151
  %cond154 = phi i32 [ %144, %cond.true151 ], [ %145, %cond.false152 ], !dbg !17335
  store i32 %cond154, i32* %tmp148, align 4, !dbg !17335
  %146 = load i32, i32* %tmp148, align 4, !dbg !17335
  store i32 %146, i32* %max_bitflips, align 4, !dbg !17337
  br label %if.end171, !dbg !17338

if.else155:                                       ; preds = %lor.lhs.false
  %147 = load i8*, i8** %buf, align 8, !dbg !17339
  %148 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17341
  %data_buf156 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %148, i32 0, i32 22, !dbg !17342
  %149 = load i8*, i8** %data_buf156, align 8, !dbg !17342
  %150 = load i32, i32* %col, align 4, !dbg !17343
  %idx.ext157 = sext i32 %150 to i64, !dbg !17344
  %add.ptr158 = getelementptr i8, i8* %149, i64 %idx.ext157, !dbg !17344
  %151 = load i32, i32* %bytes, align 4, !dbg !17345
  %conv159 = sext i32 %151 to i64, !dbg !17345
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %147, i8* align 1 %add.ptr158, i64 %conv159, i1 false), !dbg !17346
  %152 = load i32, i32* %bytes, align 4, !dbg !17347
  %153 = load i8*, i8** %buf, align 8, !dbg !17348
  %idx.ext160 = sext i32 %152 to i64, !dbg !17348
  %add.ptr161 = getelementptr i8, i8* %153, i64 %idx.ext160, !dbg !17348
  store i8* %add.ptr161, i8** %buf, align 8, !dbg !17348
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___x271, metadata !17349, metadata !DIExpression()), !dbg !17351
  %154 = load i32, i32* %max_bitflips, align 4, !dbg !17351
  store i32 %154, i32* %__UNIQUE_ID___x271, align 4, !dbg !17351
  call void @llvm.dbg.declare(metadata i32* %__UNIQUE_ID___y272, metadata !17352, metadata !DIExpression()), !dbg !17351
  %155 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17351
  %pagecache162 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %155, i32 0, i32 24, !dbg !17351
  %bitflips163 = getelementptr inbounds %struct.anon.74, %struct.anon.74* %pagecache162, i32 0, i32 0, !dbg !17351
  %156 = load i32, i32* %bitflips163, align 8, !dbg !17351
  store i32 %156, i32* %__UNIQUE_ID___y272, align 4, !dbg !17351
  %157 = load i32, i32* %__UNIQUE_ID___x271, align 4, !dbg !17351
  %158 = load i32, i32* %__UNIQUE_ID___y272, align 4, !dbg !17351
  %cmp165 = icmp ugt i32 %157, %158, !dbg !17351
  br i1 %cmp165, label %cond.true167, label %cond.false168, !dbg !17351

cond.true167:                                     ; preds = %if.else155
  %159 = load i32, i32* %__UNIQUE_ID___x271, align 4, !dbg !17351
  br label %cond.end169, !dbg !17351

cond.false168:                                    ; preds = %if.else155
  %160 = load i32, i32* %__UNIQUE_ID___y272, align 4, !dbg !17351
  br label %cond.end169, !dbg !17351

cond.end169:                                      ; preds = %cond.false168, %cond.true167
  %cond170 = phi i32 [ %159, %cond.true167 ], [ %160, %cond.false168 ], !dbg !17351
  store i32 %cond170, i32* %tmp164, align 4, !dbg !17351
  %161 = load i32, i32* %tmp164, align 4, !dbg !17351
  store i32 %161, i32* %max_bitflips, align 4, !dbg !17353
  br label %if.end171

if.end171:                                        ; preds = %cond.end169, %cond.end153
  %162 = load i32, i32* %bytes, align 4, !dbg !17354
  %163 = load i32, i32* %readlen, align 4, !dbg !17355
  %sub172 = sub i32 %163, %162, !dbg !17355
  store i32 %sub172, i32* %readlen, align 4, !dbg !17355
  %164 = load i32, i32* %retry_mode, align 4, !dbg !17356
  %tobool173 = icmp ne i32 %164, 0, !dbg !17356
  br i1 %tobool173, label %if.then174, label %if.end180, !dbg !17358

if.then174:                                       ; preds = %if.end171
  %165 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17359
  %call175 = call i32 @nand_setup_read_retry(%struct.nand_chip* %165, i32 0) #8, !dbg !17361
  store i32 %call175, i32* %ret, align 4, !dbg !17362
  %166 = load i32, i32* %ret, align 4, !dbg !17363
  %cmp176 = icmp slt i32 %166, 0, !dbg !17365
  br i1 %cmp176, label %if.then178, label %if.end179, !dbg !17366

if.then178:                                       ; preds = %if.then174
  br label %while.end, !dbg !17367

if.end179:                                        ; preds = %if.then174
  store i32 0, i32* %retry_mode, align 4, !dbg !17368
  br label %if.end180, !dbg !17369

if.end180:                                        ; preds = %if.end179, %if.end171
  %167 = load i32, i32* %readlen, align 4, !dbg !17370
  %tobool181 = icmp ne i32 %167, 0, !dbg !17370
  br i1 %tobool181, label %if.end183, label %if.then182, !dbg !17372

if.then182:                                       ; preds = %if.end180
  br label %while.end, !dbg !17373

if.end183:                                        ; preds = %if.end180
  store i32 0, i32* %col, align 4, !dbg !17374
  %168 = load i32, i32* %realpage, align 4, !dbg !17375
  %inc184 = add i32 %168, 1, !dbg !17375
  store i32 %inc184, i32* %realpage, align 4, !dbg !17375
  %169 = load i32, i32* %realpage, align 4, !dbg !17376
  %170 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17377
  %pagemask185 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %170, i32 0, i32 20, !dbg !17378
  %171 = load i32, i32* %pagemask185, align 4, !dbg !17378
  %and186 = and i32 %169, %171, !dbg !17379
  store i32 %and186, i32* %page, align 4, !dbg !17380
  %172 = load i32, i32* %page, align 4, !dbg !17381
  %tobool187 = icmp ne i32 %172, 0, !dbg !17381
  br i1 %tobool187, label %if.end190, label %if.then188, !dbg !17383

if.then188:                                       ; preds = %if.end183
  %173 = load i32, i32* %chipnr, align 4, !dbg !17384
  %inc189 = add i32 %173, 1, !dbg !17384
  store i32 %inc189, i32* %chipnr, align 4, !dbg !17384
  %174 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17386
  call void @nand_deselect_target(%struct.nand_chip* %174) #8, !dbg !17387
  %175 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17388
  %176 = load i32, i32* %chipnr, align 4, !dbg !17389
  call void @nand_select_target(%struct.nand_chip* %175, i32 %176) #8, !dbg !17390
  br label %if.end190, !dbg !17391

if.end190:                                        ; preds = %if.then188, %if.end183
  br label %while.body, !dbg !17119, !llvm.loop !17392

while.end:                                        ; preds = %if.then182, %if.then178, %if.then140, %if.end77
  %177 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17394
  call void @nand_deselect_target(%struct.nand_chip* %177) #8, !dbg !17395
  %178 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17396
  %len191 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %178, i32 0, i32 1, !dbg !17397
  %179 = load i64, i64* %len191, align 8, !dbg !17397
  %180 = load i32, i32* %readlen, align 4, !dbg !17398
  %conv192 = zext i32 %180 to i64, !dbg !17399
  %sub193 = sub i64 %179, %conv192, !dbg !17400
  %181 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17401
  %retlen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %181, i32 0, i32 2, !dbg !17402
  store i64 %sub193, i64* %retlen, align 8, !dbg !17403
  %182 = load i8*, i8** %oob, align 8, !dbg !17404
  %tobool194 = icmp ne i8* %182, null, !dbg !17404
  br i1 %tobool194, label %if.then195, label %if.end199, !dbg !17406

if.then195:                                       ; preds = %while.end
  %183 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17407
  %ooblen196 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %183, i32 0, i32 3, !dbg !17408
  %184 = load i64, i64* %ooblen196, align 8, !dbg !17408
  %185 = load i32, i32* %oobreadlen, align 4, !dbg !17409
  %conv197 = zext i32 %185 to i64, !dbg !17409
  %sub198 = sub i64 %184, %conv197, !dbg !17410
  %186 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17411
  %oobretlen = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %186, i32 0, i32 4, !dbg !17412
  store i64 %sub198, i64* %oobretlen, align 8, !dbg !17413
  br label %if.end199, !dbg !17411

if.end199:                                        ; preds = %if.then195, %while.end
  %187 = load i32, i32* %ret, align 4, !dbg !17414
  %cmp200 = icmp slt i32 %187, 0, !dbg !17416
  br i1 %cmp200, label %if.then202, label %if.end203, !dbg !17417

if.then202:                                       ; preds = %if.end199
  %188 = load i32, i32* %ret, align 4, !dbg !17418
  store i32 %188, i32* %retval, align 4, !dbg !17419
  br label %return, !dbg !17419

if.end203:                                        ; preds = %if.end199
  %189 = load i8, i8* %ecc_fail, align 1, !dbg !17420
  %tobool204 = trunc i8 %189 to i1, !dbg !17420
  br i1 %tobool204, label %if.then205, label %if.end206, !dbg !17422

if.then205:                                       ; preds = %if.end203
  store i32 -74, i32* %retval, align 4, !dbg !17423
  br label %return, !dbg !17423

if.end206:                                        ; preds = %if.end203
  %190 = load i32, i32* %max_bitflips, align 4, !dbg !17424
  store i32 %190, i32* %retval, align 4, !dbg !17425
  br label %return, !dbg !17425

return:                                           ; preds = %if.end206, %if.then205, %if.then202
  %191 = load i32, i32* %retval, align 4, !dbg !17426
  ret i32 %191, !dbg !17426
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @nand_transfer_oob(%struct.nand_chip* %chip, i8* %oob, %struct.mtd_oob_ops* %ops, i64 %len) #0 !dbg !17427 {
entry:
  %retval = alloca i8*, align 8
  %chip.addr = alloca %struct.nand_chip*, align 8
  %oob.addr = alloca i8*, align 8
  %ops.addr = alloca %struct.mtd_oob_ops*, align 8
  %len.addr = alloca i64, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %ret = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !17430, metadata !DIExpression()), !dbg !17431
  store i8* %oob, i8** %oob.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %oob.addr, metadata !17432, metadata !DIExpression()), !dbg !17433
  store %struct.mtd_oob_ops* %ops, %struct.mtd_oob_ops** %ops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mtd_oob_ops** %ops.addr, metadata !17434, metadata !DIExpression()), !dbg !17435
  store i64 %len, i64* %len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %len.addr, metadata !17436, metadata !DIExpression()), !dbg !17437
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !17438, metadata !DIExpression()), !dbg !17439
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17440
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !17441
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !17439
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !17442, metadata !DIExpression()), !dbg !17443
  %1 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17444
  %mode = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %1, i32 0, i32 0, !dbg !17445
  %2 = load i32, i32* %mode, align 8, !dbg !17445
  switch i32 %2, label %sw.default [
    i32 0, label %sw.bb
    i32 2, label %sw.bb
    i32 1, label %sw.bb2
  ], !dbg !17446

sw.bb:                                            ; preds = %entry, %entry
  %3 = load i8*, i8** %oob.addr, align 8, !dbg !17447
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17449
  %oob_poi = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 23, !dbg !17450
  %5 = load i8*, i8** %oob_poi, align 8, !dbg !17450
  %6 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17451
  %ooboffs = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %6, i32 0, i32 5, !dbg !17452
  %7 = load i32, i32* %ooboffs, align 8, !dbg !17452
  %idx.ext = zext i32 %7 to i64, !dbg !17453
  %add.ptr = getelementptr i8, i8* %5, i64 %idx.ext, !dbg !17453
  %8 = load i64, i64* %len.addr, align 8, !dbg !17454
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %3, i8* align 1 %add.ptr, i64 %8, i1 false), !dbg !17455
  %9 = load i8*, i8** %oob.addr, align 8, !dbg !17456
  %10 = load i64, i64* %len.addr, align 8, !dbg !17457
  %add.ptr1 = getelementptr i8, i8* %9, i64 %10, !dbg !17458
  store i8* %add.ptr1, i8** %retval, align 8, !dbg !17459
  br label %return, !dbg !17459

sw.bb2:                                           ; preds = %entry
  %11 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17460
  %12 = load i8*, i8** %oob.addr, align 8, !dbg !17461
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17462
  %oob_poi3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %13, i32 0, i32 23, !dbg !17463
  %14 = load i8*, i8** %oob_poi3, align 8, !dbg !17463
  %15 = load %struct.mtd_oob_ops*, %struct.mtd_oob_ops** %ops.addr, align 8, !dbg !17464
  %ooboffs4 = getelementptr inbounds %struct.mtd_oob_ops, %struct.mtd_oob_ops* %15, i32 0, i32 5, !dbg !17465
  %16 = load i32, i32* %ooboffs4, align 8, !dbg !17465
  %17 = load i64, i64* %len.addr, align 8, !dbg !17466
  %conv = trunc i64 %17 to i32, !dbg !17466
  %call5 = call i32 @mtd_ooblayout_get_databytes(%struct.mtd_info* %11, i8* %12, i8* %14, i32 %16, i32 %conv) #8, !dbg !17467
  store i32 %call5, i32* %ret, align 4, !dbg !17468
  br label %do.body, !dbg !17469

do.body:                                          ; preds = %sw.bb2
  %18 = load i32, i32* %ret, align 4, !dbg !17470
  %tobool = icmp ne i32 %18, 0, !dbg !17470
  %lnot = xor i1 %tobool, true, !dbg !17470
  %lnot6 = xor i1 %lnot, true, !dbg !17470
  %lnot.ext = zext i1 %lnot6 to i32, !dbg !17470
  %conv7 = sext i32 %lnot.ext to i64, !dbg !17470
  %tobool8 = icmp ne i64 %conv7, 0, !dbg !17470
  br i1 %tobool8, label %if.then, label %if.end, !dbg !17473

if.then:                                          ; preds = %do.body
  br label %do.body9, !dbg !17470

do.body9:                                         ; preds = %if.then
  br label %do.body10, !dbg !17474

do.body10:                                        ; preds = %do.body9
  br label %do.end, !dbg !17476

do.end:                                           ; preds = %do.body10
  br label %do.body11, !dbg !17474

do.body11:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 3064, i32 0, i64 12) #9, !dbg !17478, !srcloc !17480
  br label %do.end12, !dbg !17478

do.end12:                                         ; preds = %do.body11
  br label %do.body13, !dbg !17474

do.body13:                                        ; preds = %do.end12
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 262) #9, !dbg !17481, !srcloc !17484
  unreachable, !dbg !17485

do.end14:                                         ; No predecessors!
  br label %do.end15, !dbg !17474

do.end15:                                         ; preds = %do.end14
  br label %if.end, !dbg !17474

if.end:                                           ; preds = %do.end15, %do.body
  br label %do.end16, !dbg !17473

do.end16:                                         ; preds = %if.end
  %19 = load i8*, i8** %oob.addr, align 8, !dbg !17486
  %20 = load i64, i64* %len.addr, align 8, !dbg !17487
  %add.ptr17 = getelementptr i8, i8* %19, i64 %20, !dbg !17488
  store i8* %add.ptr17, i8** %retval, align 8, !dbg !17489
  br label %return, !dbg !17489

sw.default:                                       ; preds = %entry
  br label %do.body18, !dbg !17490

do.body18:                                        ; preds = %sw.default
  br label %do.body19, !dbg !17491

do.body19:                                        ; preds = %do.body18
  br label %do.end20, !dbg !17493

do.end20:                                         ; preds = %do.body19
  br label %do.body21, !dbg !17491

do.body21:                                        ; preds = %do.end20
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 3068, i32 0, i64 12) #9, !dbg !17495, !srcloc !17497
  br label %do.end22, !dbg !17495

do.end22:                                         ; preds = %do.body21
  br label %do.body23, !dbg !17491

do.body23:                                        ; preds = %do.end22
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 263) #9, !dbg !17498, !srcloc !17501
  unreachable, !dbg !17502

do.end24:                                         ; No predecessors!
  br label %do.end25, !dbg !17491

do.end25:                                         ; preds = %do.end24
  br label %sw.epilog, !dbg !17503

sw.epilog:                                        ; preds = %do.end25
  store i8* null, i8** %retval, align 8, !dbg !17504
  br label %return, !dbg !17504

return:                                           ; preds = %sw.epilog, %do.end16, %sw.bb
  %21 = load i8*, i8** %retval, align 8, !dbg !17505
  ret i8* %21, !dbg !17505
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @nand_wait_readrdy(%struct.nand_chip* %chip) #0 !dbg !17506 {
entry:
  %chip.addr = alloca %struct.nand_chip*, align 8
  %sdr = alloca %struct.nand_sdr_timings*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %tmp21 = alloca i64, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !17507, metadata !DIExpression()), !dbg !17508
  call void @llvm.dbg.declare(metadata %struct.nand_sdr_timings** %sdr, metadata !17509, metadata !DIExpression()), !dbg !17510
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17511
  %options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %0, i32 0, i32 6, !dbg !17513
  %1 = load i32, i32* %options, align 8, !dbg !17513
  %conv = zext i32 %1 to i64, !dbg !17511
  %and = and i64 %conv, 256, !dbg !17514
  %tobool = icmp ne i64 %and, 0, !dbg !17514
  br i1 %tobool, label %if.end, label %if.then, !dbg !17515

if.then:                                          ; preds = %entry
  br label %return, !dbg !17516

if.end:                                           ; preds = %entry
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17517
  %call = call %struct.nand_interface_config* @nand_get_interface_config(%struct.nand_chip* %2) #8, !dbg !17518
  %call1 = call %struct.nand_sdr_timings* @nand_get_sdr_timings(%struct.nand_interface_config* %call) #8, !dbg !17519
  store %struct.nand_sdr_timings* %call1, %struct.nand_sdr_timings** %sdr, align 8, !dbg !17520
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !17521, metadata !DIExpression()), !dbg !17523
  %3 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17523
  %4 = load %struct.nand_sdr_timings*, %struct.nand_sdr_timings** %sdr, align 8, !dbg !17524
  %tR_max = getelementptr inbounds %struct.nand_sdr_timings, %struct.nand_sdr_timings* %4, i32 0, i32 3, !dbg !17524
  %5 = load i64, i64* %tR_max, align 8, !dbg !17524
  %add = add i64 %5, 1000000000, !dbg !17524
  %sub = sub i64 %add, 1, !dbg !17524
  %div = udiv i64 %sub, 1000000000, !dbg !17524
  store i64 %div, i64* %tmp, align 8, !dbg !17523
  %6 = load i64, i64* %tmp, align 8, !dbg !17524
  %conv2 = trunc i64 %6 to i32, !dbg !17523
  %call3 = call i32 @nand_wait_rdy_op(%struct.nand_chip* %3, i32 %conv2, i32 0) #8, !dbg !17523
  %tobool4 = icmp ne i32 %call3, 0, !dbg !17523
  %lnot = xor i1 %tobool4, true, !dbg !17523
  %lnot5 = xor i1 %lnot, true, !dbg !17523
  %lnot.ext = zext i1 %lnot5 to i32, !dbg !17523
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !17523
  %7 = load i32, i32* %__ret_warn_on, align 4, !dbg !17526
  %tobool6 = icmp ne i32 %7, 0, !dbg !17526
  %lnot7 = xor i1 %tobool6, true, !dbg !17526
  %lnot9 = xor i1 %lnot7, true, !dbg !17526
  %lnot.ext10 = zext i1 %lnot9 to i32, !dbg !17526
  %conv11 = sext i32 %lnot.ext10 to i64, !dbg !17526
  %tobool12 = icmp ne i64 %conv11, 0, !dbg !17526
  br i1 %tobool12, label %if.then13, label %if.end20, !dbg !17523

if.then13:                                        ; preds = %if.end
  br label %do.body, !dbg !17526

do.body:                                          ; preds = %if.then13
  br label %do.body14, !dbg !17528

do.body14:                                        ; preds = %do.body
  br label %do.end, !dbg !17530

do.end:                                           ; preds = %do.body14
  br label %do.body15, !dbg !17528

do.body15:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0), i32 3103, i32 2305, i64 12) #9, !dbg !17532, !srcloc !17534
  br label %do.end16, !dbg !17532

do.end16:                                         ; preds = %do.body15
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 264) #9, !dbg !17535, !srcloc !17537
  br label %do.body17, !dbg !17528

do.body17:                                        ; preds = %do.end16
  br label %do.end18, !dbg !17538

do.end18:                                         ; preds = %do.body17
  br label %do.end19, !dbg !17528

do.end19:                                         ; preds = %do.end18
  br label %if.end20, !dbg !17528

if.end20:                                         ; preds = %do.end19, %if.end
  %8 = load i32, i32* %__ret_warn_on, align 4, !dbg !17523
  %tobool22 = icmp ne i32 %8, 0, !dbg !17523
  %lnot23 = xor i1 %tobool22, true, !dbg !17523
  %lnot25 = xor i1 %lnot23, true, !dbg !17523
  %lnot.ext26 = zext i1 %lnot25 to i32, !dbg !17523
  %conv27 = sext i32 %lnot.ext26 to i64, !dbg !17523
  store i64 %conv27, i64* %tmp21, align 8, !dbg !17526
  %9 = load i64, i64* %tmp21, align 8, !dbg !17523
  br label %return, !dbg !17540

return:                                           ; preds = %if.end20, %if.then
  ret void, !dbg !17540
}

; Function Attrs: noredzone
declare dso_local i32 @mtd_ooblayout_get_databytes(%struct.mtd_info*, i8*, i8*, i32, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_wait_rdy_op(%struct.nand_chip* %chip, i32 %timeout_ms, i32 %delay_ns) #0 !dbg !17541 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %timeout_ms.addr = alloca i32, align 4
  %delay_ns.addr = alloca i32, align 4
  %instrs = alloca [1 x %struct.nand_op_instr], align 16
  %tmp = alloca i32, align 4
  %tmp4 = alloca i32, align 4
  %op = alloca %struct.nand_operation, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !17544, metadata !DIExpression()), !dbg !17545
  store i32 %timeout_ms, i32* %timeout_ms.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %timeout_ms.addr, metadata !17546, metadata !DIExpression()), !dbg !17547
  store i32 %delay_ns, i32* %delay_ns.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %delay_ns.addr, metadata !17548, metadata !DIExpression()), !dbg !17549
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17550
  %call = call zeroext i1 @nand_has_exec_op(%struct.nand_chip* %0) #8, !dbg !17552
  br i1 %call, label %if.then, label %if.end, !dbg !17553

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata [1 x %struct.nand_op_instr]* %instrs, metadata !17554, metadata !DIExpression()), !dbg !17556
  %arrayinit.begin = getelementptr inbounds [1 x %struct.nand_op_instr], [1 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !17557
  %type = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 0, !dbg !17558
  store i32 4, i32* %type, align 8, !dbg !17558
  %ctx = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 1, !dbg !17558
  %1 = bitcast %union.anon.72* %ctx to i8*, !dbg !17558
  call void @llvm.memset.p0i8.i64(i8* align 8 %1, i8 0, i64 24, i1 false), !dbg !17558
  %waitrdy = bitcast %union.anon.72* %ctx to %struct.nand_op_waitrdy_instr*, !dbg !17558
  %timeout_ms1 = getelementptr inbounds %struct.nand_op_waitrdy_instr, %struct.nand_op_waitrdy_instr* %waitrdy, i32 0, i32 0, !dbg !17558
  %2 = load i32, i32* %timeout_ms.addr, align 4, !dbg !17559
  %add = add i32 %2, 1000000000, !dbg !17559
  %sub = sub i32 %add, 1, !dbg !17559
  %div = udiv i32 %sub, 1000000000, !dbg !17559
  %conv = zext i32 %div to i64, !dbg !17559
  %conv2 = trunc i64 %conv to i32, !dbg !17559
  store i32 %conv2, i32* %tmp, align 4, !dbg !17558
  %3 = load i32, i32* %tmp, align 4, !dbg !17559
  store i32 %3, i32* %timeout_ms1, align 8, !dbg !17558
  %delay_ns3 = getelementptr inbounds %struct.nand_op_instr, %struct.nand_op_instr* %arrayinit.begin, i32 0, i32 2, !dbg !17558
  %4 = load i32, i32* %delay_ns.addr, align 4, !dbg !17561
  %add5 = add i32 %4, 1000, !dbg !17561
  %sub6 = sub i32 %add5, 1, !dbg !17561
  %div7 = udiv i32 %sub6, 1000, !dbg !17561
  %conv8 = zext i32 %div7 to i64, !dbg !17561
  %conv9 = trunc i64 %conv8 to i32, !dbg !17561
  store i32 %conv9, i32* %tmp4, align 4, !dbg !17558
  %5 = load i32, i32* %tmp4, align 4, !dbg !17561
  store i32 %5, i32* %delay_ns3, align 8, !dbg !17558
  call void @llvm.dbg.declare(metadata %struct.nand_operation* %op, metadata !17563, metadata !DIExpression()), !dbg !17564
  %cs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 0, !dbg !17565
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17565
  %cur_cs = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %6, i32 0, i32 28, !dbg !17565
  %7 = load i32, i32* %cur_cs, align 4, !dbg !17565
  store i32 %7, i32* %cs, align 8, !dbg !17565
  %instrs10 = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 1, !dbg !17565
  %arraydecay = getelementptr inbounds [1 x %struct.nand_op_instr], [1 x %struct.nand_op_instr]* %instrs, i64 0, i64 0, !dbg !17565
  store %struct.nand_op_instr* %arraydecay, %struct.nand_op_instr** %instrs10, align 8, !dbg !17565
  %ninstrs = getelementptr inbounds %struct.nand_operation, %struct.nand_operation* %op, i32 0, i32 2, !dbg !17565
  store i32 1, i32* %ninstrs, align 8, !dbg !17565
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17566
  %call11 = call i32 @nand_exec_op(%struct.nand_chip* %8, %struct.nand_operation* %op) #8, !dbg !17567
  store i32 %call11, i32* %retval, align 4, !dbg !17568
  br label %return, !dbg !17568

if.end:                                           ; preds = %entry
  %9 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17569
  %legacy = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %9, i32 0, i32 5, !dbg !17571
  %dev_ready = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy, i32 0, i32 9, !dbg !17572
  %10 = load i32 (%struct.nand_chip*)*, i32 (%struct.nand_chip*)** %dev_ready, align 8, !dbg !17572
  %tobool = icmp ne i32 (%struct.nand_chip*)* %10, null, !dbg !17569
  br i1 %tobool, label %if.else29, label %if.then12, !dbg !17573

if.then12:                                        ; preds = %if.end
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17574
  %legacy13 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %11, i32 0, i32 5, !dbg !17574
  %chip_delay = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy13, i32 0, i32 15, !dbg !17574
  %12 = load i32, i32* %chip_delay, align 8, !dbg !17574
  %13 = call i1 @llvm.is.constant.i32(i32 %12), !dbg !17574
  br i1 %13, label %if.then14, label %if.else24, !dbg !17577

if.then14:                                        ; preds = %if.then12
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17578
  %legacy15 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %14, i32 0, i32 5, !dbg !17578
  %chip_delay16 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy15, i32 0, i32 15, !dbg !17578
  %15 = load i32, i32* %chip_delay16, align 8, !dbg !17578
  %div17 = sdiv i32 %15, 20000, !dbg !17578
  %cmp = icmp sge i32 %div17, 1, !dbg !17578
  br i1 %cmp, label %if.then19, label %if.else, !dbg !17581

if.then19:                                        ; preds = %if.then14
  call void @__bad_udelay() #8, !dbg !17578
  br label %if.end23, !dbg !17578

if.else:                                          ; preds = %if.then14
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17578
  %legacy20 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %16, i32 0, i32 5, !dbg !17578
  %chip_delay21 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy20, i32 0, i32 15, !dbg !17578
  %17 = load i32, i32* %chip_delay21, align 8, !dbg !17578
  %conv22 = sext i32 %17 to i64, !dbg !17578
  %mul = mul i64 %conv22, 4295, !dbg !17578
  call void @__const_udelay(i64 %mul) #8, !dbg !17578
  br label %if.end23

if.end23:                                         ; preds = %if.else, %if.then19
  br label %if.end28, !dbg !17581

if.else24:                                        ; preds = %if.then12
  %18 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17582
  %legacy25 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %18, i32 0, i32 5, !dbg !17582
  %chip_delay26 = getelementptr inbounds %struct.nand_legacy, %struct.nand_legacy* %legacy25, i32 0, i32 15, !dbg !17582
  %19 = load i32, i32* %chip_delay26, align 8, !dbg !17582
  %conv27 = sext i32 %19 to i64, !dbg !17582
  call void @__udelay(i64 %conv27) #8, !dbg !17582
  br label %if.end28

if.end28:                                         ; preds = %if.else24, %if.end23
  br label %if.end30, !dbg !17584

if.else29:                                        ; preds = %if.end
  %20 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17585
  call void @nand_wait_ready(%struct.nand_chip* %20) #8, !dbg !17586
  br label %if.end30

if.end30:                                         ; preds = %if.else29, %if.end28
  store i32 0, i32* %retval, align 4, !dbg !17587
  br label %return, !dbg !17587

return:                                           ; preds = %if.end30, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !17588
  ret i32 %21, !dbg !17588
}

; Function Attrs: noredzone
declare dso_local void @__bad_udelay() #2

; Function Attrs: noredzone
declare dso_local void @__udelay(i64) #2

; Function Attrs: noredzone
declare dso_local void @nand_wait_ready(%struct.nand_chip*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_setup_read_retry(%struct.nand_chip* %chip, i32 %retry_mode) #0 !dbg !17589 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %retry_mode.addr = alloca i32, align 4
  %tmp = alloca i32, align 4
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !17590, metadata !DIExpression()), !dbg !17591
  store i32 %retry_mode, i32* %retry_mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %retry_mode.addr, metadata !17592, metadata !DIExpression()), !dbg !17593
  store i32 0, i32* %tmp, align 4, !dbg !17594
  %0 = load i32, i32* %tmp, align 4, !dbg !17597
  %1 = load i32, i32* %retry_mode.addr, align 4, !dbg !17598
  %2 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17600
  %read_retries = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %2, i32 0, i32 29, !dbg !17601
  %3 = load i32, i32* %read_retries, align 8, !dbg !17601
  %cmp = icmp sge i32 %1, %3, !dbg !17602
  br i1 %cmp, label %if.then, label %if.end, !dbg !17603

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !17604
  br label %return, !dbg !17604

if.end:                                           ; preds = %entry
  %4 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17605
  %ops = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %4, i32 0, i32 4, !dbg !17607
  %setup_read_retry = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops, i32 0, i32 4, !dbg !17608
  %5 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %setup_read_retry, align 8, !dbg !17608
  %tobool = icmp ne i32 (%struct.nand_chip*, i32)* %5, null, !dbg !17605
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !17609

if.then1:                                         ; preds = %if.end
  store i32 -95, i32* %retval, align 4, !dbg !17610
  br label %return, !dbg !17610

if.end2:                                          ; preds = %if.end
  %6 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17611
  %ops3 = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %6, i32 0, i32 4, !dbg !17612
  %setup_read_retry4 = getelementptr inbounds %struct.nand_chip_ops, %struct.nand_chip_ops* %ops3, i32 0, i32 4, !dbg !17613
  %7 = load i32 (%struct.nand_chip*, i32)*, i32 (%struct.nand_chip*, i32)** %setup_read_retry4, align 8, !dbg !17613
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17614
  %9 = load i32, i32* %retry_mode.addr, align 4, !dbg !17615
  %call = call i32 %7(%struct.nand_chip* %8, i32 %9) #8, !dbg !17611
  store i32 %call, i32* %retval, align 4, !dbg !17616
  br label %return, !dbg !17616

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !17617
  ret i32 %10, !dbg !17617
}

; Function Attrs: noredzone
declare dso_local i32 @nand_isreserved_bbt(%struct.nand_chip*, i64) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @nand_block_markbad_lowlevel(%struct.nand_chip* %chip, i64 %ofs) #0 !dbg !17618 {
entry:
  %retval = alloca i32, align 4
  %chip.addr = alloca %struct.nand_chip*, align 8
  %ofs.addr = alloca i64, align 8
  %mtd = alloca %struct.mtd_info*, align 8
  %res = alloca i32, align 4
  %ret = alloca i32, align 4
  %einfo = alloca %struct.erase_info, align 8
  store %struct.nand_chip* %chip, %struct.nand_chip** %chip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.nand_chip** %chip.addr, metadata !17619, metadata !DIExpression()), !dbg !17620
  store i64 %ofs, i64* %ofs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %ofs.addr, metadata !17621, metadata !DIExpression()), !dbg !17622
  call void @llvm.dbg.declare(metadata %struct.mtd_info** %mtd, metadata !17623, metadata !DIExpression()), !dbg !17624
  %0 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17625
  %call = call %struct.mtd_info* @nand_to_mtd(%struct.nand_chip* %0) #8, !dbg !17626
  store %struct.mtd_info* %call, %struct.mtd_info** %mtd, align 8, !dbg !17624
  call void @llvm.dbg.declare(metadata i32* %res, metadata !17627, metadata !DIExpression()), !dbg !17628
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !17629, metadata !DIExpression()), !dbg !17630
  store i32 0, i32* %ret, align 4, !dbg !17630
  %1 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17631
  %bbt_options = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %1, i32 0, i32 10, !dbg !17633
  %2 = load i32, i32* %bbt_options, align 4, !dbg !17633
  %and = and i32 %2, 524288, !dbg !17634
  %tobool = icmp ne i32 %and, 0, !dbg !17634
  br i1 %tobool, label %if.end6, label %if.then, !dbg !17635

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.erase_info* %einfo, metadata !17636, metadata !DIExpression()), !dbg !17638
  %3 = bitcast %struct.erase_info* %einfo to i8*, !dbg !17639
  call void @llvm.memset.p0i8.i64(i8* align 8 %3, i8 0, i64 24, i1 false), !dbg !17639
  %4 = load i64, i64* %ofs.addr, align 8, !dbg !17640
  %addr = getelementptr inbounds %struct.erase_info, %struct.erase_info* %einfo, i32 0, i32 0, !dbg !17641
  store i64 %4, i64* %addr, align 8, !dbg !17642
  %5 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17643
  %phys_erase_shift = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %5, i32 0, i32 18, !dbg !17644
  %6 = load i32, i32* %phys_erase_shift, align 4, !dbg !17644
  %sh_prom = zext i32 %6 to i64, !dbg !17645
  %shl = shl i64 1, %sh_prom, !dbg !17645
  %len = getelementptr inbounds %struct.erase_info, %struct.erase_info* %einfo, i32 0, i32 1, !dbg !17646
  store i64 %shl, i64* %len, align 8, !dbg !17647
  %7 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17648
  %call1 = call i32 @nand_erase_nand(%struct.nand_chip* %7, %struct.erase_info* %einfo, i32 0) #8, !dbg !17649
  %8 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17650
  %call2 = call i32 @nand_get_device(%struct.nand_chip* %8) #8, !dbg !17651
  store i32 %call2, i32* %ret, align 4, !dbg !17652
  %9 = load i32, i32* %ret, align 4, !dbg !17653
  %tobool3 = icmp ne i32 %9, 0, !dbg !17653
  br i1 %tobool3, label %if.then4, label %if.end, !dbg !17655

if.then4:                                         ; preds = %if.then
  %10 = load i32, i32* %ret, align 4, !dbg !17656
  store i32 %10, i32* %retval, align 4, !dbg !17657
  br label %return, !dbg !17657

if.end:                                           ; preds = %if.then
  %11 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17658
  %12 = load i64, i64* %ofs.addr, align 8, !dbg !17659
  %call5 = call i32 @nand_markbad_bbm(%struct.nand_chip* %11, i64 %12) #8, !dbg !17660
  store i32 %call5, i32* %ret, align 4, !dbg !17661
  %13 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17662
  call void @nand_release_device(%struct.nand_chip* %13) #8, !dbg !17663
  br label %if.end6, !dbg !17664

if.end6:                                          ; preds = %if.end, %entry
  %14 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17665
  %bbt = getelementptr inbounds %struct.nand_chip, %struct.nand_chip* %14, i32 0, i32 16, !dbg !17667
  %15 = load i8*, i8** %bbt, align 8, !dbg !17667
  %tobool7 = icmp ne i8* %15, null, !dbg !17665
  br i1 %tobool7, label %if.then8, label %if.end13, !dbg !17668

if.then8:                                         ; preds = %if.end6
  %16 = load %struct.nand_chip*, %struct.nand_chip** %chip.addr, align 8, !dbg !17669
  %17 = load i64, i64* %ofs.addr, align 8, !dbg !17671
  %call9 = call i32 @nand_markbad_bbt(%struct.nand_chip* %16, i64 %17) #8, !dbg !17672
  store i32 %call9, i32* %res, align 4, !dbg !17673
  %18 = load i32, i32* %ret, align 4, !dbg !17674
  %tobool10 = icmp ne i32 %18, 0, !dbg !17674
  br i1 %tobool10, label %if.end12, label %if.then11, !dbg !17676

if.then11:                                        ; preds = %if.then8
  %19 = load i32, i32* %res, align 4, !dbg !17677
  store i32 %19, i32* %ret, align 4, !dbg !17678
  br label %if.end12, !dbg !17679

if.end12:                                         ; preds = %if.then11, %if.then8
  br label %if.end13, !dbg !17680

if.end13:                                         ; preds = %if.end12, %if.end6
  %20 = load i32, i32* %ret, align 4, !dbg !17681
  %tobool14 = icmp ne i32 %20, 0, !dbg !17681
  br i1 %tobool14, label %if.end16, label %if.then15, !dbg !17683

if.then15:                                        ; preds = %if.end13
  %21 = load %struct.mtd_info*, %struct.mtd_info** %mtd, align 8, !dbg !17684
  %ecc_stats = getelementptr inbounds %struct.mtd_info, %struct.mtd_info* %21, i32 0, i32 51, !dbg !17685
  %badblocks = getelementptr inbounds %struct.mtd_ecc_stats, %struct.mtd_ecc_stats* %ecc_stats, i32 0, i32 2, !dbg !17686
  %22 = load i32, i32* %badblocks, align 8, !dbg !17687
  %inc = add i32 %22, 1, !dbg !17687
  store i32 %inc, i32* %badblocks, align 8, !dbg !17687
  br label %if.end16, !dbg !17684

if.end16:                                         ; preds = %if.then15, %if.end13
  %23 = load i32, i32* %ret, align 4, !dbg !17688
  store i32 %23, i32* %retval, align 4, !dbg !17689
  br label %return, !dbg !17689

return:                                           ; preds = %if.end16, %if.then4
  %24 = load i32, i32* %retval, align 4, !dbg !17690
  ret i32 %24, !dbg !17690
}

; Function Attrs: noredzone
declare dso_local i32 @nand_markbad_bbt(%struct.nand_chip*, i64) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @kzalloc(i64 %size, i32 %flags) #0 !dbg !17691 {
entry:
  %s.addr.i.i = alloca %struct.kmem_cache*, align 8
  call void @llvm.dbg.declare(metadata %struct.kmem_cache** %s.addr.i.i, metadata !9890, metadata !DIExpression()), !dbg !17692
  %flags.addr.i17.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i17.i, metadata !9904, metadata !DIExpression()), !dbg !17695
  %size.addr.i18.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i18.i, metadata !9906, metadata !DIExpression()), !dbg !17696
  %ret.i.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %ret.i.i, metadata !9908, metadata !DIExpression()), !dbg !17697
  %retval.i12.i = alloca i32, align 4
  %flags.addr.i13.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i13.i, metadata !9910, metadata !DIExpression()), !dbg !17698
  %retval.i.i = alloca i32, align 4
  %size.addr.i11.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i11.i, metadata !9916, metadata !DIExpression()), !dbg !17700
  %size.addr.i.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i.i, metadata !9922, metadata !DIExpression()), !dbg !17702
  %flags.addr.i.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i.i, metadata !9931, metadata !DIExpression()), !dbg !17705
  %order.addr.i.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.addr.i.i.i, metadata !9933, metadata !DIExpression()), !dbg !17706
  %size.addr.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i, metadata !9935, metadata !DIExpression()), !dbg !17707
  %flags.addr.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i, metadata !9937, metadata !DIExpression()), !dbg !17708
  %order.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.i.i, metadata !9939, metadata !DIExpression()), !dbg !17709
  %retval.i = alloca i8*, align 8
  %size.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i, metadata !9941, metadata !DIExpression()), !dbg !17710
  %flags.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i, metadata !9943, metadata !DIExpression()), !dbg !17711
  %index.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %index.i, metadata !9945, metadata !DIExpression()), !dbg !17712
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !17713, metadata !DIExpression()), !dbg !17714
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !17715, metadata !DIExpression()), !dbg !17716
  %0 = load i64, i64* %size.addr, align 8, !dbg !17717
  %1 = load i32, i32* %flags.addr, align 4, !dbg !17718
  %or = or i32 %1, 256, !dbg !17719
  store i64 %0, i64* %size.addr.i, align 8
  store i32 %or, i32* %flags.addr.i, align 4
  %2 = load i64, i64* %size.addr.i, align 8, !dbg !17720
  %3 = call i1 @llvm.is.constant.i64(i64 %2) #9, !dbg !17721
  br i1 %3, label %if.then.i, label %if.end9.i, !dbg !17722

if.then.i:                                        ; preds = %entry
  %4 = load i64, i64* %size.addr.i, align 8, !dbg !17723
  %cmp.i = icmp ugt i64 %4, 8192, !dbg !17724
  br i1 %cmp.i, label %if.then1.i, label %if.end.i, !dbg !17725

if.then1.i:                                       ; preds = %if.then.i
  %5 = load i64, i64* %size.addr.i, align 8, !dbg !17726
  %6 = load i32, i32* %flags.addr.i, align 4, !dbg !17727
  store i64 %5, i64* %size.addr.i.i, align 8
  store i32 %6, i32* %flags.addr.i.i, align 4
  %7 = load i64, i64* %size.addr.i.i, align 8, !dbg !17728
  %call.i.i = call i32 @get_order(i64 %7) #14, !dbg !17729
  store i32 %call.i.i, i32* %order.i.i, align 4, !dbg !17709
  %8 = load i64, i64* %size.addr.i.i, align 8, !dbg !17730
  %9 = load i32, i32* %flags.addr.i.i, align 4, !dbg !17731
  %10 = load i32, i32* %order.i.i, align 4, !dbg !17732
  store i64 %8, i64* %size.addr.i.i.i, align 8
  store i32 %9, i32* %flags.addr.i.i.i, align 4
  store i32 %10, i32* %order.addr.i.i.i, align 4
  %11 = load i64, i64* %size.addr.i.i.i, align 8, !dbg !17733
  %12 = load i32, i32* %flags.addr.i.i.i, align 4, !dbg !17734
  %13 = load i32, i32* %order.addr.i.i.i, align 4, !dbg !17735
  %call.i.i.i = call noalias i8* @kmalloc_order(i64 %11, i32 %12, i32 %13) #10, !dbg !17736
  %ptrint.i.i.i = ptrtoint i8* %call.i.i.i to i64, !dbg !17736
  %maskedptr.i.i.i = and i64 %ptrint.i.i.i, 4095, !dbg !17736
  %maskcond.i.i.i = icmp eq i64 %maskedptr.i.i.i, 0, !dbg !17736
  call void @llvm.assume(i1 %maskcond.i.i.i) #9, !dbg !17736
  store i8* %call.i.i.i, i8** %retval.i, align 8, !dbg !17737
  br label %kmalloc.exit, !dbg !17737

if.end.i:                                         ; preds = %if.then.i
  %14 = load i64, i64* %size.addr.i, align 8, !dbg !17738
  store i64 %14, i64* %size.addr.i11.i, align 8
  %15 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17739
  %tobool.i.i = icmp ne i64 %15, 0, !dbg !17739
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i, !dbg !17740

if.then.i.i:                                      ; preds = %if.end.i
  store i32 0, i32* %retval.i.i, align 4, !dbg !17741
  br label %kmalloc_index.exit.i, !dbg !17741

if.end.i.i:                                       ; preds = %if.end.i
  %16 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17742
  %cmp.i.i = icmp ule i64 %16, 8, !dbg !17743
  br i1 %cmp.i.i, label %if.then1.i.i, label %if.end2.i.i, !dbg !17744

if.then1.i.i:                                     ; preds = %if.end.i.i
  store i32 3, i32* %retval.i.i, align 4, !dbg !17745
  br label %kmalloc_index.exit.i, !dbg !17745

if.end2.i.i:                                      ; preds = %if.end.i.i
  %17 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17746
  %cmp3.i.i = icmp ugt i64 %17, 64, !dbg !17747
  br i1 %cmp3.i.i, label %land.lhs.true.i.i, label %if.end6.i.i, !dbg !17748

land.lhs.true.i.i:                                ; preds = %if.end2.i.i
  %18 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17749
  %cmp4.i.i = icmp ule i64 %18, 96, !dbg !17750
  br i1 %cmp4.i.i, label %if.then5.i.i, label %if.end6.i.i, !dbg !17751

if.then5.i.i:                                     ; preds = %land.lhs.true.i.i
  store i32 1, i32* %retval.i.i, align 4, !dbg !17752
  br label %kmalloc_index.exit.i, !dbg !17752

if.end6.i.i:                                      ; preds = %land.lhs.true.i.i, %if.end2.i.i
  %19 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17753
  %cmp7.i.i = icmp ugt i64 %19, 128, !dbg !17754
  br i1 %cmp7.i.i, label %land.lhs.true8.i.i, label %if.end11.i.i, !dbg !17755

land.lhs.true8.i.i:                               ; preds = %if.end6.i.i
  %20 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17756
  %cmp9.i.i = icmp ule i64 %20, 192, !dbg !17757
  br i1 %cmp9.i.i, label %if.then10.i.i, label %if.end11.i.i, !dbg !17758

if.then10.i.i:                                    ; preds = %land.lhs.true8.i.i
  store i32 2, i32* %retval.i.i, align 4, !dbg !17759
  br label %kmalloc_index.exit.i, !dbg !17759

if.end11.i.i:                                     ; preds = %land.lhs.true8.i.i, %if.end6.i.i
  %21 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17760
  %cmp12.i.i = icmp ule i64 %21, 8, !dbg !17761
  br i1 %cmp12.i.i, label %if.then13.i.i, label %if.end14.i.i, !dbg !17762

if.then13.i.i:                                    ; preds = %if.end11.i.i
  store i32 3, i32* %retval.i.i, align 4, !dbg !17763
  br label %kmalloc_index.exit.i, !dbg !17763

if.end14.i.i:                                     ; preds = %if.end11.i.i
  %22 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17764
  %cmp15.i.i = icmp ule i64 %22, 16, !dbg !17765
  br i1 %cmp15.i.i, label %if.then16.i.i, label %if.end17.i.i, !dbg !17766

if.then16.i.i:                                    ; preds = %if.end14.i.i
  store i32 4, i32* %retval.i.i, align 4, !dbg !17767
  br label %kmalloc_index.exit.i, !dbg !17767

if.end17.i.i:                                     ; preds = %if.end14.i.i
  %23 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17768
  %cmp18.i.i = icmp ule i64 %23, 32, !dbg !17769
  br i1 %cmp18.i.i, label %if.then19.i.i, label %if.end20.i.i, !dbg !17770

if.then19.i.i:                                    ; preds = %if.end17.i.i
  store i32 5, i32* %retval.i.i, align 4, !dbg !17771
  br label %kmalloc_index.exit.i, !dbg !17771

if.end20.i.i:                                     ; preds = %if.end17.i.i
  %24 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17772
  %cmp21.i.i = icmp ule i64 %24, 64, !dbg !17773
  br i1 %cmp21.i.i, label %if.then22.i.i, label %if.end23.i.i, !dbg !17774

if.then22.i.i:                                    ; preds = %if.end20.i.i
  store i32 6, i32* %retval.i.i, align 4, !dbg !17775
  br label %kmalloc_index.exit.i, !dbg !17775

if.end23.i.i:                                     ; preds = %if.end20.i.i
  %25 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17776
  %cmp24.i.i = icmp ule i64 %25, 128, !dbg !17777
  br i1 %cmp24.i.i, label %if.then25.i.i, label %if.end26.i.i, !dbg !17778

if.then25.i.i:                                    ; preds = %if.end23.i.i
  store i32 7, i32* %retval.i.i, align 4, !dbg !17779
  br label %kmalloc_index.exit.i, !dbg !17779

if.end26.i.i:                                     ; preds = %if.end23.i.i
  %26 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17780
  %cmp27.i.i = icmp ule i64 %26, 256, !dbg !17781
  br i1 %cmp27.i.i, label %if.then28.i.i, label %if.end29.i.i, !dbg !17782

if.then28.i.i:                                    ; preds = %if.end26.i.i
  store i32 8, i32* %retval.i.i, align 4, !dbg !17783
  br label %kmalloc_index.exit.i, !dbg !17783

if.end29.i.i:                                     ; preds = %if.end26.i.i
  %27 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17784
  %cmp30.i.i = icmp ule i64 %27, 512, !dbg !17785
  br i1 %cmp30.i.i, label %if.then31.i.i, label %if.end32.i.i, !dbg !17786

if.then31.i.i:                                    ; preds = %if.end29.i.i
  store i32 9, i32* %retval.i.i, align 4, !dbg !17787
  br label %kmalloc_index.exit.i, !dbg !17787

if.end32.i.i:                                     ; preds = %if.end29.i.i
  %28 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17788
  %cmp33.i.i = icmp ule i64 %28, 1024, !dbg !17789
  br i1 %cmp33.i.i, label %if.then34.i.i, label %if.end35.i.i, !dbg !17790

if.then34.i.i:                                    ; preds = %if.end32.i.i
  store i32 10, i32* %retval.i.i, align 4, !dbg !17791
  br label %kmalloc_index.exit.i, !dbg !17791

if.end35.i.i:                                     ; preds = %if.end32.i.i
  %29 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17792
  %cmp36.i.i = icmp ule i64 %29, 2048, !dbg !17793
  br i1 %cmp36.i.i, label %if.then37.i.i, label %if.end38.i.i, !dbg !17794

if.then37.i.i:                                    ; preds = %if.end35.i.i
  store i32 11, i32* %retval.i.i, align 4, !dbg !17795
  br label %kmalloc_index.exit.i, !dbg !17795

if.end38.i.i:                                     ; preds = %if.end35.i.i
  %30 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17796
  %cmp39.i.i = icmp ule i64 %30, 4096, !dbg !17797
  br i1 %cmp39.i.i, label %if.then40.i.i, label %if.end41.i.i, !dbg !17798

if.then40.i.i:                                    ; preds = %if.end38.i.i
  store i32 12, i32* %retval.i.i, align 4, !dbg !17799
  br label %kmalloc_index.exit.i, !dbg !17799

if.end41.i.i:                                     ; preds = %if.end38.i.i
  %31 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17800
  %cmp42.i.i = icmp ule i64 %31, 8192, !dbg !17801
  br i1 %cmp42.i.i, label %if.then43.i.i, label %if.end44.i.i, !dbg !17802

if.then43.i.i:                                    ; preds = %if.end41.i.i
  store i32 13, i32* %retval.i.i, align 4, !dbg !17803
  br label %kmalloc_index.exit.i, !dbg !17803

if.end44.i.i:                                     ; preds = %if.end41.i.i
  %32 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17804
  %cmp45.i.i = icmp ule i64 %32, 16384, !dbg !17805
  br i1 %cmp45.i.i, label %if.then46.i.i, label %if.end47.i.i, !dbg !17806

if.then46.i.i:                                    ; preds = %if.end44.i.i
  store i32 14, i32* %retval.i.i, align 4, !dbg !17807
  br label %kmalloc_index.exit.i, !dbg !17807

if.end47.i.i:                                     ; preds = %if.end44.i.i
  %33 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17808
  %cmp48.i.i = icmp ule i64 %33, 32768, !dbg !17809
  br i1 %cmp48.i.i, label %if.then49.i.i, label %if.end50.i.i, !dbg !17810

if.then49.i.i:                                    ; preds = %if.end47.i.i
  store i32 15, i32* %retval.i.i, align 4, !dbg !17811
  br label %kmalloc_index.exit.i, !dbg !17811

if.end50.i.i:                                     ; preds = %if.end47.i.i
  %34 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17812
  %cmp51.i.i = icmp ule i64 %34, 65536, !dbg !17813
  br i1 %cmp51.i.i, label %if.then52.i.i, label %if.end53.i.i, !dbg !17814

if.then52.i.i:                                    ; preds = %if.end50.i.i
  store i32 16, i32* %retval.i.i, align 4, !dbg !17815
  br label %kmalloc_index.exit.i, !dbg !17815

if.end53.i.i:                                     ; preds = %if.end50.i.i
  %35 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17816
  %cmp54.i.i = icmp ule i64 %35, 131072, !dbg !17817
  br i1 %cmp54.i.i, label %if.then55.i.i, label %if.end56.i.i, !dbg !17818

if.then55.i.i:                                    ; preds = %if.end53.i.i
  store i32 17, i32* %retval.i.i, align 4, !dbg !17819
  br label %kmalloc_index.exit.i, !dbg !17819

if.end56.i.i:                                     ; preds = %if.end53.i.i
  %36 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17820
  %cmp57.i.i = icmp ule i64 %36, 262144, !dbg !17821
  br i1 %cmp57.i.i, label %if.then58.i.i, label %if.end59.i.i, !dbg !17822

if.then58.i.i:                                    ; preds = %if.end56.i.i
  store i32 18, i32* %retval.i.i, align 4, !dbg !17823
  br label %kmalloc_index.exit.i, !dbg !17823

if.end59.i.i:                                     ; preds = %if.end56.i.i
  %37 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17824
  %cmp60.i.i = icmp ule i64 %37, 524288, !dbg !17825
  br i1 %cmp60.i.i, label %if.then61.i.i, label %if.end62.i.i, !dbg !17826

if.then61.i.i:                                    ; preds = %if.end59.i.i
  store i32 19, i32* %retval.i.i, align 4, !dbg !17827
  br label %kmalloc_index.exit.i, !dbg !17827

if.end62.i.i:                                     ; preds = %if.end59.i.i
  %38 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17828
  %cmp63.i.i = icmp ule i64 %38, 1048576, !dbg !17829
  br i1 %cmp63.i.i, label %if.then64.i.i, label %if.end65.i.i, !dbg !17830

if.then64.i.i:                                    ; preds = %if.end62.i.i
  store i32 20, i32* %retval.i.i, align 4, !dbg !17831
  br label %kmalloc_index.exit.i, !dbg !17831

if.end65.i.i:                                     ; preds = %if.end62.i.i
  %39 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17832
  %cmp66.i.i = icmp ule i64 %39, 2097152, !dbg !17833
  br i1 %cmp66.i.i, label %if.then67.i.i, label %if.end68.i.i, !dbg !17834

if.then67.i.i:                                    ; preds = %if.end65.i.i
  store i32 21, i32* %retval.i.i, align 4, !dbg !17835
  br label %kmalloc_index.exit.i, !dbg !17835

if.end68.i.i:                                     ; preds = %if.end65.i.i
  %40 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17836
  %cmp69.i.i = icmp ule i64 %40, 4194304, !dbg !17837
  br i1 %cmp69.i.i, label %if.then70.i.i, label %if.end71.i.i, !dbg !17838

if.then70.i.i:                                    ; preds = %if.end68.i.i
  store i32 22, i32* %retval.i.i, align 4, !dbg !17839
  br label %kmalloc_index.exit.i, !dbg !17839

if.end71.i.i:                                     ; preds = %if.end68.i.i
  %41 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17840
  %cmp72.i.i = icmp ule i64 %41, 8388608, !dbg !17841
  br i1 %cmp72.i.i, label %if.then73.i.i, label %if.end74.i.i, !dbg !17842

if.then73.i.i:                                    ; preds = %if.end71.i.i
  store i32 23, i32* %retval.i.i, align 4, !dbg !17843
  br label %kmalloc_index.exit.i, !dbg !17843

if.end74.i.i:                                     ; preds = %if.end71.i.i
  %42 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17844
  %cmp75.i.i = icmp ule i64 %42, 16777216, !dbg !17845
  br i1 %cmp75.i.i, label %if.then76.i.i, label %if.end77.i.i, !dbg !17846

if.then76.i.i:                                    ; preds = %if.end74.i.i
  store i32 24, i32* %retval.i.i, align 4, !dbg !17847
  br label %kmalloc_index.exit.i, !dbg !17847

if.end77.i.i:                                     ; preds = %if.end74.i.i
  %43 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17848
  %cmp78.i.i = icmp ule i64 %43, 33554432, !dbg !17849
  br i1 %cmp78.i.i, label %if.then79.i.i, label %if.end80.i.i, !dbg !17850

if.then79.i.i:                                    ; preds = %if.end77.i.i
  store i32 25, i32* %retval.i.i, align 4, !dbg !17851
  br label %kmalloc_index.exit.i, !dbg !17851

if.end80.i.i:                                     ; preds = %if.end77.i.i
  %44 = load i64, i64* %size.addr.i11.i, align 8, !dbg !17852
  %cmp81.i.i = icmp ule i64 %44, 67108864, !dbg !17853
  br i1 %cmp81.i.i, label %if.then82.i.i, label %if.end83.i.i, !dbg !17854

if.then82.i.i:                                    ; preds = %if.end80.i.i
  store i32 26, i32* %retval.i.i, align 4, !dbg !17855
  br label %kmalloc_index.exit.i, !dbg !17855

if.end83.i.i:                                     ; preds = %if.end80.i.i
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.40, i64 0, i64 0), i32 382, i32 0, i64 12) #9, !dbg !17856, !srcloc !10199
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 159) #9, !dbg !17857, !srcloc !10203
  unreachable, !dbg !17858

kmalloc_index.exit.i:                             ; preds = %if.then82.i.i, %if.then79.i.i, %if.then76.i.i, %if.then73.i.i, %if.then70.i.i, %if.then67.i.i, %if.then64.i.i, %if.then61.i.i, %if.then58.i.i, %if.then55.i.i, %if.then52.i.i, %if.then49.i.i, %if.then46.i.i, %if.then43.i.i, %if.then40.i.i, %if.then37.i.i, %if.then34.i.i, %if.then31.i.i, %if.then28.i.i, %if.then25.i.i, %if.then22.i.i, %if.then19.i.i, %if.then16.i.i, %if.then13.i.i, %if.then10.i.i, %if.then5.i.i, %if.then1.i.i, %if.then.i.i
  %45 = load i32, i32* %retval.i.i, align 4, !dbg !17859
  store i32 %45, i32* %index.i, align 4, !dbg !17860
  %46 = load i32, i32* %index.i, align 4, !dbg !17861
  %tobool.i = icmp ne i32 %46, 0, !dbg !17861
  br i1 %tobool.i, label %if.end4.i, label %if.then3.i, !dbg !17862

if.then3.i:                                       ; preds = %kmalloc_index.exit.i
  store i8* inttoptr (i64 16 to i8*), i8** %retval.i, align 8, !dbg !17863
  br label %kmalloc.exit, !dbg !17863

if.end4.i:                                        ; preds = %kmalloc_index.exit.i
  %47 = load i32, i32* %flags.addr.i, align 4, !dbg !17864
  store i32 %47, i32* %flags.addr.i13.i, align 4
  %48 = load i32, i32* %flags.addr.i13.i, align 4, !dbg !17865
  %and.i.i = and i32 %48, 17, !dbg !17865
  %cmp.i14.i = icmp eq i32 %and.i.i, 0, !dbg !17865
  %lnot.i.i = xor i1 %cmp.i14.i, true, !dbg !17865
  %lnot.ext.i.i = zext i1 %cmp.i14.i to i32, !dbg !17865
  %conv.i.i = sext i32 %lnot.ext.i.i to i64, !dbg !17865
  br i1 %cmp.i14.i, label %if.then.i15.i, label %if.end.i16.i, !dbg !17866

if.then.i15.i:                                    ; preds = %if.end4.i
  store i32 0, i32* %retval.i12.i, align 4, !dbg !17867
  br label %kmalloc_type.exit.i, !dbg !17867

if.end.i16.i:                                     ; preds = %if.end4.i
  %49 = load i32, i32* %flags.addr.i13.i, align 4, !dbg !17868
  %and2.i.i = and i32 %49, 1, !dbg !17869
  %tobool3.i.i = icmp ne i32 %and2.i.i, 0, !dbg !17868
  %50 = zext i1 %tobool3.i.i to i64, !dbg !17868
  %cond.i.i = select i1 %tobool3.i.i, i32 2, i32 1, !dbg !17868
  store i32 %cond.i.i, i32* %retval.i12.i, align 4, !dbg !17870
  br label %kmalloc_type.exit.i, !dbg !17870

kmalloc_type.exit.i:                              ; preds = %if.end.i16.i, %if.then.i15.i
  %51 = load i32, i32* %retval.i12.i, align 4, !dbg !17871
  %idxprom.i = zext i32 %51 to i64, !dbg !17872
  %arrayidx.i = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %idxprom.i, !dbg !17872
  %52 = load i32, i32* %index.i, align 4, !dbg !17873
  %idxprom6.i = zext i32 %52 to i64, !dbg !17872
  %arrayidx7.i = getelementptr [14 x %struct.kmem_cache*], [14 x %struct.kmem_cache*]* %arrayidx.i, i64 0, i64 %idxprom6.i, !dbg !17872
  %53 = load %struct.kmem_cache*, %struct.kmem_cache** %arrayidx7.i, align 8, !dbg !17872
  %54 = load i32, i32* %flags.addr.i, align 4, !dbg !17874
  %55 = load i64, i64* %size.addr.i, align 8, !dbg !17875
  store %struct.kmem_cache* %53, %struct.kmem_cache** %s.addr.i.i, align 8
  store i32 %54, i32* %flags.addr.i17.i, align 4
  store i64 %55, i64* %size.addr.i18.i, align 8
  %56 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i, align 8, !dbg !17876
  %57 = load i32, i32* %flags.addr.i17.i, align 4, !dbg !17877
  %call.i19.i = call noalias i8* @kmem_cache_alloc(%struct.kmem_cache* %56, i32 %57) #10, !dbg !17878
  %ptrint.i.i = ptrtoint i8* %call.i19.i to i64, !dbg !17878
  %maskedptr.i.i = and i64 %ptrint.i.i, 7, !dbg !17878
  %maskcond.i.i = icmp eq i64 %maskedptr.i.i, 0, !dbg !17878
  call void @llvm.assume(i1 %maskcond.i.i) #9, !dbg !17878
  store i8* %call.i19.i, i8** %ret.i.i, align 8, !dbg !17697
  %58 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i, align 8, !dbg !17879
  %59 = load i8*, i8** %ret.i.i, align 8, !dbg !17880
  %60 = load i64, i64* %size.addr.i18.i, align 8, !dbg !17881
  %61 = load i32, i32* %flags.addr.i17.i, align 4, !dbg !17882
  %call1.i.i = call i8* @kasan_kmalloc(%struct.kmem_cache* %58, i8* %59, i64 %60, i32 %61) #10, !dbg !17883
  store i8* %call1.i.i, i8** %ret.i.i, align 8, !dbg !17884
  %62 = load i8*, i8** %ret.i.i, align 8, !dbg !17885
  store i8* %62, i8** %retval.i, align 8, !dbg !17886
  br label %kmalloc.exit, !dbg !17886

if.end9.i:                                        ; preds = %entry
  %63 = load i64, i64* %size.addr.i, align 8, !dbg !17887
  %64 = load i32, i32* %flags.addr.i, align 4, !dbg !17888
  %call10.i = call noalias i8* @__kmalloc(i64 %63, i32 %64) #10, !dbg !17889
  %ptrint.i = ptrtoint i8* %call10.i to i64, !dbg !17889
  %maskedptr.i = and i64 %ptrint.i, 7, !dbg !17889
  %maskcond.i = icmp eq i64 %maskedptr.i, 0, !dbg !17889
  call void @llvm.assume(i1 %maskcond.i) #9, !dbg !17889
  store i8* %call10.i, i8** %retval.i, align 8, !dbg !17890
  br label %kmalloc.exit, !dbg !17890

kmalloc.exit:                                     ; preds = %if.then1.i, %if.then3.i, %kmalloc_type.exit.i, %if.end9.i
  %65 = load i8*, i8** %retval.i, align 8, !dbg !17891
  ret i8* %65, !dbg !17892
}

attributes #0 = { noinline noredzone nounwind optnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="true" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noredzone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { cold noredzone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone willreturn }
attributes #6 = { nounwind willreturn }
attributes #7 = { noinline noredzone nounwind optnone readnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="true" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { noredzone }
attributes #9 = { nounwind }
attributes #10 = { noredzone nounwind }
attributes #11 = { nounwind readonly }
attributes #12 = { cold noredzone }
attributes #13 = { nounwind readnone }
attributes #14 = { noredzone nounwind readnone }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!4632, !4633, !4634, !4635}
!llvm.ident = !{!4636}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "dist3_pairing_scheme", scope: !2, file: !3, line: 93, type: !2675, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C89, file: !3, producer: "clang version 10.0.1 (https://github.com/llvm/llvm-project.git ef32c611aa214dea855364efd7ba451ec5ec3f74)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !4050, globals: !4571, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "drivers/mtd/nand/raw/nand_base.c", directory: "/home/lizy2001/genbc/linux")
!4 = !{!5, !13, !19, !24, !30, !37, !43, !52, !60, !66, !72, !79, !87, !93, !101, !106, !112, !116, !120, !127, !132, !138, !4043}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "migrate_mode", file: !6, line: 15, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./include/linux/migrate_mode.h", directory: "/home/lizy2001/genbc/linux")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "MIGRATE_ASYNC", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "MIGRATE_SYNC_LIGHT", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "MIGRATE_SYNC", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "MIGRATE_SYNC_NO_COPY", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "page_entry_size", file: !14, line: 546, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./include/linux/mm.h", directory: "/home/lizy2001/genbc/linux")
!15 = !{!16, !17, !18}
!16 = !DIEnumerator(name: "PE_SIZE_PTE", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "PE_SIZE_PMD", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "PE_SIZE_PUD", value: 2, isUnsigned: true)
!19 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "hrtimer_restart", file: !20, line: 65, baseType: !7, size: 32, elements: !21)
!20 = !DIFile(filename: "./include/linux/hrtimer.h", directory: "/home/lizy2001/genbc/linux")
!21 = !{!22, !23}
!22 = !DIEnumerator(name: "HRTIMER_NORESTART", value: 0, isUnsigned: true)
!23 = !DIEnumerator(name: "HRTIMER_RESTART", value: 1, isUnsigned: true)
!24 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "timespec_type", file: !25, line: 16, baseType: !7, size: 32, elements: !26)
!25 = !DIFile(filename: "./include/linux/restart_block.h", directory: "/home/lizy2001/genbc/linux")
!26 = !{!27, !28, !29}
!27 = !DIEnumerator(name: "TT_NONE", value: 0, isUnsigned: true)
!28 = !DIEnumerator(name: "TT_NATIVE", value: 1, isUnsigned: true)
!29 = !DIEnumerator(name: "TT_COMPAT", value: 2, isUnsigned: true)
!30 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "memory_type", file: !31, line: 59, baseType: !7, size: 32, elements: !32)
!31 = !DIFile(filename: "./include/linux/memremap.h", directory: "/home/lizy2001/genbc/linux")
!32 = !{!33, !34, !35, !36}
!33 = !DIEnumerator(name: "MEMORY_DEVICE_PRIVATE", value: 1, isUnsigned: true)
!34 = !DIEnumerator(name: "MEMORY_DEVICE_FS_DAX", value: 2, isUnsigned: true)
!35 = !DIEnumerator(name: "MEMORY_DEVICE_GENERIC", value: 3, isUnsigned: true)
!36 = !DIEnumerator(name: "MEMORY_DEVICE_PCI_P2PDMA", value: 4, isUnsigned: true)
!37 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quota_type", file: !38, line: 54, baseType: !7, size: 32, elements: !39)
!38 = !DIFile(filename: "./include/linux/quota.h", directory: "/home/lizy2001/genbc/linux")
!39 = !{!40, !41, !42}
!40 = !DIEnumerator(name: "USRQUOTA", value: 0, isUnsigned: true)
!41 = !DIEnumerator(name: "GRPQUOTA", value: 1, isUnsigned: true)
!42 = !DIEnumerator(name: "PRJQUOTA", value: 2, isUnsigned: true)
!43 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rw_hint", file: !44, line: 296, baseType: !7, size: 32, elements: !45)
!44 = !DIFile(filename: "./include/linux/fs.h", directory: "/home/lizy2001/genbc/linux")
!45 = !{!46, !47, !48, !49, !50, !51}
!46 = !DIEnumerator(name: "WRITE_LIFE_NOT_SET", value: 0, isUnsigned: true)
!47 = !DIEnumerator(name: "WRITE_LIFE_NONE", value: 1, isUnsigned: true)
!48 = !DIEnumerator(name: "WRITE_LIFE_SHORT", value: 2, isUnsigned: true)
!49 = !DIEnumerator(name: "WRITE_LIFE_MEDIUM", value: 3, isUnsigned: true)
!50 = !DIEnumerator(name: "WRITE_LIFE_LONG", value: 4, isUnsigned: true)
!51 = !DIEnumerator(name: "WRITE_LIFE_EXTREME", value: 5, isUnsigned: true)
!52 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "pid_type", file: !53, line: 9, baseType: !7, size: 32, elements: !54)
!53 = !DIFile(filename: "./include/linux/pid.h", directory: "/home/lizy2001/genbc/linux")
!54 = !{!55, !56, !57, !58, !59}
!55 = !DIEnumerator(name: "PIDTYPE_PID", value: 0, isUnsigned: true)
!56 = !DIEnumerator(name: "PIDTYPE_TGID", value: 1, isUnsigned: true)
!57 = !DIEnumerator(name: "PIDTYPE_PGID", value: 2, isUnsigned: true)
!58 = !DIEnumerator(name: "PIDTYPE_SID", value: 3, isUnsigned: true)
!59 = !DIEnumerator(name: "PIDTYPE_MAX", value: 4, isUnsigned: true)
!60 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "kobj_ns_type", file: !61, line: 26, baseType: !7, size: 32, elements: !62)
!61 = !DIFile(filename: "./include/linux/kobject_ns.h", directory: "/home/lizy2001/genbc/linux")
!62 = !{!63, !64, !65}
!63 = !DIEnumerator(name: "KOBJ_NS_TYPE_NONE", value: 0, isUnsigned: true)
!64 = !DIEnumerator(name: "KOBJ_NS_TYPE_NET", value: 1, isUnsigned: true)
!65 = !DIEnumerator(name: "KOBJ_NS_TYPES", value: 2, isUnsigned: true)
!66 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "probe_type", file: !67, line: 44, baseType: !7, size: 32, elements: !68)
!67 = !DIFile(filename: "./include/linux/device/driver.h", directory: "/home/lizy2001/genbc/linux")
!68 = !{!69, !70, !71}
!69 = !DIEnumerator(name: "PROBE_DEFAULT_STRATEGY", value: 0, isUnsigned: true)
!70 = !DIEnumerator(name: "PROBE_PREFER_ASYNCHRONOUS", value: 1, isUnsigned: true)
!71 = !DIEnumerator(name: "PROBE_FORCE_SYNCHRONOUS", value: 2, isUnsigned: true)
!72 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dl_dev_state", file: !73, line: 343, baseType: !7, size: 32, elements: !74)
!73 = !DIFile(filename: "./include/linux/device.h", directory: "/home/lizy2001/genbc/linux")
!74 = !{!75, !76, !77, !78}
!75 = !DIEnumerator(name: "DL_DEV_NO_DRIVER", value: 0, isUnsigned: true)
!76 = !DIEnumerator(name: "DL_DEV_PROBING", value: 1, isUnsigned: true)
!77 = !DIEnumerator(name: "DL_DEV_DRIVER_BOUND", value: 2, isUnsigned: true)
!78 = !DIEnumerator(name: "DL_DEV_UNBINDING", value: 3, isUnsigned: true)
!79 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rpm_request", file: !80, line: 524, baseType: !7, size: 32, elements: !81)
!80 = !DIFile(filename: "./include/linux/pm.h", directory: "/home/lizy2001/genbc/linux")
!81 = !{!82, !83, !84, !85, !86}
!82 = !DIEnumerator(name: "RPM_REQ_NONE", value: 0, isUnsigned: true)
!83 = !DIEnumerator(name: "RPM_REQ_IDLE", value: 1, isUnsigned: true)
!84 = !DIEnumerator(name: "RPM_REQ_SUSPEND", value: 2, isUnsigned: true)
!85 = !DIEnumerator(name: "RPM_REQ_AUTOSUSPEND", value: 3, isUnsigned: true)
!86 = !DIEnumerator(name: "RPM_REQ_RESUME", value: 4, isUnsigned: true)
!87 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rpm_status", file: !80, line: 502, baseType: !7, size: 32, elements: !88)
!88 = !{!89, !90, !91, !92}
!89 = !DIEnumerator(name: "RPM_ACTIVE", value: 0, isUnsigned: true)
!90 = !DIEnumerator(name: "RPM_RESUMING", value: 1, isUnsigned: true)
!91 = !DIEnumerator(name: "RPM_SUSPENDED", value: 2, isUnsigned: true)
!92 = !DIEnumerator(name: "RPM_SUSPENDING", value: 3, isUnsigned: true)
!93 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "nand_ecc_engine_type", file: !94, line: 142, baseType: !7, size: 32, elements: !95)
!94 = !DIFile(filename: "./include/linux/mtd/nand.h", directory: "/home/lizy2001/genbc/linux")
!95 = !{!96, !97, !98, !99, !100}
!96 = !DIEnumerator(name: "NAND_ECC_ENGINE_TYPE_INVALID", value: 0, isUnsigned: true)
!97 = !DIEnumerator(name: "NAND_ECC_ENGINE_TYPE_NONE", value: 1, isUnsigned: true)
!98 = !DIEnumerator(name: "NAND_ECC_ENGINE_TYPE_SOFT", value: 2, isUnsigned: true)
!99 = !DIEnumerator(name: "NAND_ECC_ENGINE_TYPE_ON_HOST", value: 3, isUnsigned: true)
!100 = !DIEnumerator(name: "NAND_ECC_ENGINE_TYPE_ON_DIE", value: 4, isUnsigned: true)
!101 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "nand_ecc_placement", file: !94, line: 158, baseType: !7, size: 32, elements: !102)
!102 = !{!103, !104, !105}
!103 = !DIEnumerator(name: "NAND_ECC_PLACEMENT_UNKNOWN", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "NAND_ECC_PLACEMENT_OOB", value: 1, isUnsigned: true)
!105 = !DIEnumerator(name: "NAND_ECC_PLACEMENT_INTERLEAVED", value: 2, isUnsigned: true)
!106 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "nand_ecc_algo", file: !94, line: 171, baseType: !7, size: 32, elements: !107)
!107 = !{!108, !109, !110, !111}
!108 = !DIEnumerator(name: "NAND_ECC_ALGO_UNKNOWN", value: 0, isUnsigned: true)
!109 = !DIEnumerator(name: "NAND_ECC_ALGO_HAMMING", value: 1, isUnsigned: true)
!110 = !DIEnumerator(name: "NAND_ECC_ALGO_BCH", value: 2, isUnsigned: true)
!111 = !DIEnumerator(name: "NAND_ECC_ALGO_RS", value: 3, isUnsigned: true)
!112 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "nand_page_io_req_type", file: !94, line: 90, baseType: !7, size: 32, elements: !113)
!113 = !{!114, !115}
!114 = !DIEnumerator(name: "NAND_PAGE_READ", value: 0, isUnsigned: true)
!115 = !DIEnumerator(name: "NAND_PAGE_WRITE", value: 1, isUnsigned: true)
!116 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "nand_interface_type", file: !117, line: 481, baseType: !7, size: 32, elements: !118)
!117 = !DIFile(filename: "./include/linux/mtd/rawnand.h", directory: "/home/lizy2001/genbc/linux")
!118 = !{!119}
!119 = !DIEnumerator(name: "NAND_SDR_IFACE", value: 0, isUnsigned: true)
!120 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "nand_op_instr_type", file: !117, line: 570, baseType: !7, size: 32, elements: !121)
!121 = !{!122, !123, !124, !125, !126}
!122 = !DIEnumerator(name: "NAND_OP_CMD_INSTR", value: 0, isUnsigned: true)
!123 = !DIEnumerator(name: "NAND_OP_ADDR_INSTR", value: 1, isUnsigned: true)
!124 = !DIEnumerator(name: "NAND_OP_DATA_IN_INSTR", value: 2, isUnsigned: true)
!125 = !DIEnumerator(name: "NAND_OP_DATA_OUT_INSTR", value: 3, isUnsigned: true)
!126 = !DIEnumerator(name: "NAND_OP_WAITRDY_INSTR", value: 4, isUnsigned: true)
!127 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !128, line: 10, baseType: !7, size: 32, elements: !129)
!128 = !DIFile(filename: "./include/linux/stddef.h", directory: "/home/lizy2001/genbc/linux")
!129 = !{!130, !131}
!130 = !DIEnumerator(name: "false", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "true", value: 1, isUnsigned: true)
!132 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !133, line: 62, baseType: !7, size: 32, elements: !134)
!133 = !DIFile(filename: "./include/uapi/mtd/mtd-abi.h", directory: "/home/lizy2001/genbc/linux")
!134 = !{!135, !136, !137}
!135 = !DIEnumerator(name: "MTD_OPS_PLACE_OOB", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "MTD_OPS_AUTO_OOB", value: 1, isUnsigned: true)
!137 = !DIEnumerator(name: "MTD_OPS_RAW", value: 2, isUnsigned: true)
!138 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "nand_ecc_legacy_mode", scope: !139, file: !3, line: 4883, baseType: !7, size: 32, elements: !4035)
!139 = distinct !DISubprogram(name: "of_get_rawnand_ecc_engine_type_legacy", scope: !3, file: !3, line: 4881, type: !140, scopeLine: 4882, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!140 = !DISubroutineType(types: !141)
!141 = !{!93, !142}
!142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !143, size: 64)
!143 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "device_node", file: !144, line: 51, size: 1344, elements: !145)
!144 = !DIFile(filename: "./include/linux/of.h", directory: "/home/lizy2001/genbc/linux")
!145 = !{!146, !150, !156, !157, !4019, !4028, !4029, !4030, !4031, !4032, !4033, !4034}
!146 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !143, file: !144, line: 52, baseType: !147, size: 64)
!147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !148, size: 64)
!148 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !149)
!149 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!150 = !DIDerivedType(tag: DW_TAG_member, name: "phandle", scope: !143, file: !144, line: 53, baseType: !151, size: 32, offset: 64)
!151 = !DIDerivedType(tag: DW_TAG_typedef, name: "phandle", file: !144, line: 28, baseType: !152)
!152 = !DIDerivedType(tag: DW_TAG_typedef, name: "u32", file: !153, line: 21, baseType: !154)
!153 = !DIFile(filename: "./include/asm-generic/int-ll64.h", directory: "/home/lizy2001/genbc/linux")
!154 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u32", file: !155, line: 27, baseType: !7)
!155 = !DIFile(filename: "./include/uapi/asm-generic/int-ll64.h", directory: "/home/lizy2001/genbc/linux")
!156 = !DIDerivedType(tag: DW_TAG_member, name: "full_name", scope: !143, file: !144, line: 54, baseType: !147, size: 64, offset: 128)
!157 = !DIDerivedType(tag: DW_TAG_member, name: "fwnode", scope: !143, file: !144, line: 55, baseType: !158, size: 192, offset: 192)
!158 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fwnode_handle", file: !159, line: 17, size: 192, elements: !160)
!159 = !DIFile(filename: "./include/linux/fwnode.h", directory: "/home/lizy2001/genbc/linux")
!160 = !{!161, !163, !4018}
!161 = !DIDerivedType(tag: DW_TAG_member, name: "secondary", scope: !158, file: !159, line: 18, baseType: !162, size: 64)
!162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !158, size: 64)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !158, file: !159, line: 19, baseType: !164, size: 64, offset: 64)
!164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !165, size: 64)
!165 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !166)
!166 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fwnode_operations", file: !159, line: 110, size: 1152, elements: !167)
!167 = !{!168, !172, !176, !185, !3960, !3964, !3968, !3973, !3977, !3978, !3982, !3986, !3990, !4001, !4002, !4003, !4004, !4014}
!168 = !DIDerivedType(tag: DW_TAG_member, name: "get", scope: !166, file: !159, line: 111, baseType: !169, size: 64)
!169 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !170, size: 64)
!170 = !DISubroutineType(types: !171)
!171 = !{!162, !162}
!172 = !DIDerivedType(tag: DW_TAG_member, name: "put", scope: !166, file: !159, line: 112, baseType: !173, size: 64, offset: 64)
!173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!174 = !DISubroutineType(types: !175)
!175 = !{null, !162}
!176 = !DIDerivedType(tag: DW_TAG_member, name: "device_is_available", scope: !166, file: !159, line: 113, baseType: !177, size: 64, offset: 128)
!177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !178, size: 64)
!178 = !DISubroutineType(types: !179)
!179 = !{!180, !183}
!180 = !DIDerivedType(tag: DW_TAG_typedef, name: "bool", file: !181, line: 30, baseType: !182)
!181 = !DIFile(filename: "./include/linux/types.h", directory: "/home/lizy2001/genbc/linux")
!182 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !184, size: 64)
!184 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !158)
!185 = !DIDerivedType(tag: DW_TAG_member, name: "device_get_match_data", scope: !166, file: !159, line: 114, baseType: !186, size: 64, offset: 192)
!186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !187, size: 64)
!187 = !DISubroutineType(types: !188)
!188 = !{!189, !183, !191}
!189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !190, size: 64)
!190 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !192, size: 64)
!192 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !193)
!193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "device", file: !73, line: 461, size: 5568, elements: !194)
!194 = !{!195, !3604, !3606, !3609, !3610, !3661, !3752, !3753, !3754, !3755, !3756, !3765, !3870, !3883, !3887, !3888, !3892, !3894, !3895, !3896, !3900, !3906, !3907, !3910, !3911, !3912, !3913, !3914, !3915, !3916, !3948, !3949, !3950, !3953, !3956, !3957, !3958, !3959}
!195 = !DIDerivedType(tag: DW_TAG_member, name: "kobj", scope: !193, file: !73, line: 462, baseType: !196, size: 512)
!196 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kobject", file: !197, line: 64, size: 512, elements: !198)
!197 = !DIFile(filename: "./include/linux/kobject.h", directory: "/home/lizy2001/genbc/linux")
!198 = !{!199, !200, !206, !208, !269, !3455, !3594, !3599, !3600, !3601, !3602, !3603}
!199 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !196, file: !197, line: 65, baseType: !147, size: 64)
!200 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !196, file: !197, line: 66, baseType: !201, size: 128, offset: 64)
!201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "list_head", file: !181, line: 178, size: 128, elements: !202)
!202 = !{!203, !205}
!203 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !201, file: !181, line: 179, baseType: !204, size: 64)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !201, size: 64)
!205 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !201, file: !181, line: 179, baseType: !204, size: 64, offset: 64)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !196, file: !197, line: 67, baseType: !207, size: 64, offset: 192)
!207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !196, size: 64)
!208 = !DIDerivedType(tag: DW_TAG_member, name: "kset", scope: !196, file: !197, line: 68, baseType: !209, size: 64, offset: 256)
!209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !210, size: 64)
!210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kset", file: !197, line: 192, size: 704, elements: !211)
!211 = !{!212, !213, !229, !230}
!212 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !210, file: !197, line: 193, baseType: !201, size: 128)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "list_lock", scope: !210, file: !197, line: 194, baseType: !214, offset: 128)
!214 = !DIDerivedType(tag: DW_TAG_typedef, name: "spinlock_t", file: !215, line: 83, baseType: !216)
!215 = !DIFile(filename: "./include/linux/spinlock_types.h", directory: "/home/lizy2001/genbc/linux")
!216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "spinlock", file: !215, line: 71, elements: !217)
!217 = !{!218}
!218 = !DIDerivedType(tag: DW_TAG_member, scope: !216, file: !215, line: 72, baseType: !219)
!219 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !216, file: !215, line: 72, elements: !220)
!220 = !{!221}
!221 = !DIDerivedType(tag: DW_TAG_member, name: "rlock", scope: !219, file: !215, line: 73, baseType: !222)
!222 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "raw_spinlock", file: !215, line: 20, elements: !223)
!223 = !{!224}
!224 = !DIDerivedType(tag: DW_TAG_member, name: "raw_lock", scope: !222, file: !215, line: 21, baseType: !225)
!225 = !DIDerivedType(tag: DW_TAG_typedef, name: "arch_spinlock_t", file: !226, line: 25, baseType: !227)
!226 = !DIFile(filename: "./include/linux/spinlock_types_up.h", directory: "/home/lizy2001/genbc/linux")
!227 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !226, line: 25, elements: !228)
!228 = !{}
!229 = !DIDerivedType(tag: DW_TAG_member, name: "kobj", scope: !210, file: !197, line: 195, baseType: !196, size: 512, offset: 128)
!230 = !DIDerivedType(tag: DW_TAG_member, name: "uevent_ops", scope: !210, file: !197, line: 196, baseType: !231, size: 64, offset: 640)
!231 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !232, size: 64)
!232 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !233)
!233 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kset_uevent_ops", file: !197, line: 156, size: 192, elements: !234)
!234 = !{!235, !241, !246}
!235 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !233, file: !197, line: 157, baseType: !236, size: 64)
!236 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !237)
!237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !238, size: 64)
!238 = !DISubroutineType(types: !239)
!239 = !{!240, !209, !207}
!240 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !233, file: !197, line: 158, baseType: !242, size: 64, offset: 64)
!242 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !243)
!243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !244, size: 64)
!244 = !DISubroutineType(types: !245)
!245 = !{!147, !209, !207}
!246 = !DIDerivedType(tag: DW_TAG_member, name: "uevent", scope: !233, file: !197, line: 159, baseType: !247, size: 64, offset: 128)
!247 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !248)
!248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !249, size: 64)
!249 = !DISubroutineType(types: !250)
!250 = !{!240, !209, !207, !251}
!251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !252, size: 64)
!252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kobj_uevent_env", file: !197, line: 148, size: 20736, elements: !253)
!253 = !{!254, !259, !263, !264, !268}
!254 = !DIDerivedType(tag: DW_TAG_member, name: "argv", scope: !252, file: !197, line: 149, baseType: !255, size: 192)
!255 = !DICompositeType(tag: DW_TAG_array_type, baseType: !256, size: 192, elements: !257)
!256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !149, size: 64)
!257 = !{!258}
!258 = !DISubrange(count: 3)
!259 = !DIDerivedType(tag: DW_TAG_member, name: "envp", scope: !252, file: !197, line: 150, baseType: !260, size: 4096, offset: 192)
!260 = !DICompositeType(tag: DW_TAG_array_type, baseType: !256, size: 4096, elements: !261)
!261 = !{!262}
!262 = !DISubrange(count: 64)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "envp_idx", scope: !252, file: !197, line: 151, baseType: !240, size: 32, offset: 4288)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !252, file: !197, line: 152, baseType: !265, size: 16384, offset: 4320)
!265 = !DICompositeType(tag: DW_TAG_array_type, baseType: !149, size: 16384, elements: !266)
!266 = !{!267}
!267 = !DISubrange(count: 2048)
!268 = !DIDerivedType(tag: DW_TAG_member, name: "buflen", scope: !252, file: !197, line: 153, baseType: !240, size: 32, offset: 20704)
!269 = !DIDerivedType(tag: DW_TAG_member, name: "ktype", scope: !196, file: !197, line: 69, baseType: !270, size: 64, offset: 320)
!270 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !271, size: 64)
!271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kobj_type", file: !197, line: 138, size: 448, elements: !272)
!272 = !{!273, !277, !307, !309, !3417, !3445, !3449}
!273 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !271, file: !197, line: 139, baseType: !274, size: 64)
!274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !275, size: 64)
!275 = !DISubroutineType(types: !276)
!276 = !{null, !207}
!277 = !DIDerivedType(tag: DW_TAG_member, name: "sysfs_ops", scope: !271, file: !197, line: 140, baseType: !278, size: 64, offset: 64)
!278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !279, size: 64)
!279 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !280)
!280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sysfs_ops", file: !281, line: 230, size: 128, elements: !282)
!281 = !DIFile(filename: "./include/linux/sysfs.h", directory: "/home/lizy2001/genbc/linux")
!282 = !{!283, !299}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "show", scope: !280, file: !281, line: 231, baseType: !284, size: 64)
!284 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !285, size: 64)
!285 = !DISubroutineType(types: !286)
!286 = !{!287, !207, !292, !256}
!287 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !181, line: 60, baseType: !288)
!288 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_ssize_t", file: !289, line: 73, baseType: !290)
!289 = !DIFile(filename: "./include/uapi/asm-generic/posix_types.h", directory: "/home/lizy2001/genbc/linux")
!290 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_long_t", file: !289, line: 15, baseType: !291)
!291 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !293, size: 64)
!293 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "attribute", file: !281, line: 30, size: 128, elements: !294)
!294 = !{!295, !296}
!295 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !293, file: !281, line: 31, baseType: !147, size: 64)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !293, file: !281, line: 32, baseType: !297, size: 16, offset: 64)
!297 = !DIDerivedType(tag: DW_TAG_typedef, name: "umode_t", file: !181, line: 19, baseType: !298)
!298 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!299 = !DIDerivedType(tag: DW_TAG_member, name: "store", scope: !280, file: !281, line: 232, baseType: !300, size: 64, offset: 64)
!300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !301, size: 64)
!301 = !DISubroutineType(types: !302)
!302 = !{!287, !207, !292, !147, !303}
!303 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !181, line: 55, baseType: !304)
!304 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_size_t", file: !289, line: 72, baseType: !305)
!305 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_ulong_t", file: !289, line: 16, baseType: !306)
!306 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!307 = !DIDerivedType(tag: DW_TAG_member, name: "default_attrs", scope: !271, file: !197, line: 141, baseType: !308, size: 64, offset: 128)
!308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !292, size: 64)
!309 = !DIDerivedType(tag: DW_TAG_member, name: "default_groups", scope: !271, file: !197, line: 142, baseType: !310, size: 64, offset: 192)
!310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !311, size: 64)
!311 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !312, size: 64)
!312 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !313)
!313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "attribute_group", file: !281, line: 84, size: 320, elements: !314)
!314 = !{!315, !316, !320, !3414, !3415}
!315 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !313, file: !281, line: 85, baseType: !147, size: 64)
!316 = !DIDerivedType(tag: DW_TAG_member, name: "is_visible", scope: !313, file: !281, line: 86, baseType: !317, size: 64, offset: 64)
!317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !318, size: 64)
!318 = !DISubroutineType(types: !319)
!319 = !{!297, !207, !292, !240}
!320 = !DIDerivedType(tag: DW_TAG_member, name: "is_bin_visible", scope: !313, file: !281, line: 88, baseType: !321, size: 64, offset: 128)
!321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !322, size: 64)
!322 = !DISubroutineType(types: !323)
!323 = !{!297, !207, !324, !240}
!324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !325, size: 64)
!325 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bin_attribute", file: !281, line: 168, size: 448, elements: !326)
!326 = !{!327, !328, !329, !331, !3409, !3410}
!327 = !DIDerivedType(tag: DW_TAG_member, name: "attr", scope: !325, file: !281, line: 169, baseType: !293, size: 128)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !325, file: !281, line: 170, baseType: !303, size: 64, offset: 128)
!329 = !DIDerivedType(tag: DW_TAG_member, name: "private", scope: !325, file: !281, line: 171, baseType: !330, size: 64, offset: 192)
!330 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!331 = !DIDerivedType(tag: DW_TAG_member, name: "read", scope: !325, file: !281, line: 172, baseType: !332, size: 64, offset: 256)
!332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !333, size: 64)
!333 = !DISubroutineType(types: !334)
!334 = !{!287, !335, !207, !324, !256, !508, !303}
!335 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !336, size: 64)
!336 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file", file: !44, line: 916, size: 1856, align: 32, elements: !337)
!337 = !{!338, !356, !3374, !3375, !3376, !3377, !3378, !3379, !3380, !3381, !3382, !3383, !3392, !3393, !3402, !3403, !3404, !3405, !3406, !3407, !3408}
!338 = !DIDerivedType(tag: DW_TAG_member, name: "f_u", scope: !336, file: !44, line: 920, baseType: !339, size: 128)
!339 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !336, file: !44, line: 917, size: 128, elements: !340)
!340 = !{!341, !347}
!341 = !DIDerivedType(tag: DW_TAG_member, name: "fu_llist", scope: !339, file: !44, line: 918, baseType: !342, size: 64)
!342 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "llist_node", file: !343, line: 58, size: 64, elements: !344)
!343 = !DIFile(filename: "./include/linux/llist.h", directory: "/home/lizy2001/genbc/linux")
!344 = !{!345}
!345 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !342, file: !343, line: 59, baseType: !346, size: 64)
!346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !342, size: 64)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "fu_rcuhead", scope: !339, file: !44, line: 919, baseType: !348, size: 128, align: 64)
!348 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "callback_head", file: !181, line: 216, size: 128, align: 64, elements: !349)
!349 = !{!350, !352}
!350 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !348, file: !181, line: 217, baseType: !351, size: 64)
!351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !348, size: 64)
!352 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !348, file: !181, line: 218, baseType: !353, size: 64, offset: 64)
!353 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !354, size: 64)
!354 = !DISubroutineType(types: !355)
!355 = !{null, !351}
!356 = !DIDerivedType(tag: DW_TAG_member, name: "f_path", scope: !336, file: !44, line: 921, baseType: !357, size: 128, offset: 128)
!357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "path", file: !358, line: 8, size: 128, elements: !359)
!358 = !DIFile(filename: "./include/linux/path.h", directory: "/home/lizy2001/genbc/linux")
!359 = !{!360, !364}
!360 = !DIDerivedType(tag: DW_TAG_member, name: "mnt", scope: !357, file: !358, line: 9, baseType: !361, size: 64)
!361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !362, size: 64)
!362 = !DICompositeType(tag: DW_TAG_structure_type, name: "vfsmount", file: !363, line: 18, flags: DIFlagFwdDecl)
!363 = !DIFile(filename: "./include/linux/dcache.h", directory: "/home/lizy2001/genbc/linux")
!364 = !DIDerivedType(tag: DW_TAG_member, name: "dentry", scope: !357, file: !358, line: 10, baseType: !365, size: 64, offset: 64)
!365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !366, size: 64)
!366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dentry", file: !363, line: 89, size: 1536, elements: !367)
!367 = !{!368, !369, !379, !387, !388, !407, !3342, !3344, !3356, !3357, !3358, !3359, !3360, !3366, !3367, !3368}
!368 = !DIDerivedType(tag: DW_TAG_member, name: "d_flags", scope: !366, file: !363, line: 91, baseType: !7, size: 32)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "d_seq", scope: !366, file: !363, line: 92, baseType: !370, size: 32, offset: 32)
!370 = !DIDerivedType(tag: DW_TAG_typedef, name: "seqcount_spinlock_t", file: !371, line: 277, baseType: !372)
!371 = !DIFile(filename: "./include/linux/seqlock.h", directory: "/home/lizy2001/genbc/linux")
!372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "seqcount_spinlock", file: !371, line: 277, size: 32, elements: !373)
!373 = !{!374}
!374 = !DIDerivedType(tag: DW_TAG_member, name: "seqcount", scope: !372, file: !371, line: 277, baseType: !375, size: 32)
!375 = !DIDerivedType(tag: DW_TAG_typedef, name: "seqcount_t", file: !371, line: 70, baseType: !376)
!376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "seqcount", file: !371, line: 65, size: 32, elements: !377)
!377 = !{!378}
!378 = !DIDerivedType(tag: DW_TAG_member, name: "sequence", scope: !376, file: !371, line: 66, baseType: !7, size: 32)
!379 = !DIDerivedType(tag: DW_TAG_member, name: "d_hash", scope: !366, file: !363, line: 93, baseType: !380, size: 128, offset: 64)
!380 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hlist_bl_node", file: !381, line: 38, size: 128, elements: !382)
!381 = !DIFile(filename: "./include/linux/list_bl.h", directory: "/home/lizy2001/genbc/linux")
!382 = !{!383, !385}
!383 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !380, file: !381, line: 39, baseType: !384, size: 64)
!384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !380, size: 64)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "pprev", scope: !380, file: !381, line: 39, baseType: !386, size: 64, offset: 64)
!386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !384, size: 64)
!387 = !DIDerivedType(tag: DW_TAG_member, name: "d_parent", scope: !366, file: !363, line: 94, baseType: !365, size: 64, offset: 192)
!388 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !366, file: !363, line: 95, baseType: !389, size: 128, offset: 256)
!389 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qstr", file: !363, line: 47, size: 128, elements: !390)
!390 = !{!391, !403}
!391 = !DIDerivedType(tag: DW_TAG_member, scope: !389, file: !363, line: 48, baseType: !392, size: 64)
!392 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !389, file: !363, line: 48, size: 64, elements: !393)
!393 = !{!394, !399}
!394 = !DIDerivedType(tag: DW_TAG_member, scope: !392, file: !363, line: 49, baseType: !395, size: 64)
!395 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !392, file: !363, line: 49, size: 64, elements: !396)
!396 = !{!397, !398}
!397 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !395, file: !363, line: 50, baseType: !152, size: 32)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !395, file: !363, line: 50, baseType: !152, size: 32, offset: 32)
!399 = !DIDerivedType(tag: DW_TAG_member, name: "hash_len", scope: !392, file: !363, line: 52, baseType: !400, size: 64)
!400 = !DIDerivedType(tag: DW_TAG_typedef, name: "u64", file: !153, line: 23, baseType: !401)
!401 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u64", file: !155, line: 31, baseType: !402)
!402 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!403 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !389, file: !363, line: 54, baseType: !404, size: 64, offset: 64)
!404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !405, size: 64)
!405 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !406)
!406 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!407 = !DIDerivedType(tag: DW_TAG_member, name: "d_inode", scope: !366, file: !363, line: 96, baseType: !408, size: 64, offset: 384)
!408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !409, size: 64)
!409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inode", file: !44, line: 610, size: 4224, elements: !410)
!410 = !{!411, !412, !413, !421, !428, !429, !575, !3053, !3054, !3055, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3085, !3086, !3087, !3088, !3089, !3090, !3091, !3318, !3326, !3327, !3328, !3338, !3339, !3340, !3341}
!411 = !DIDerivedType(tag: DW_TAG_member, name: "i_mode", scope: !409, file: !44, line: 611, baseType: !297, size: 16)
!412 = !DIDerivedType(tag: DW_TAG_member, name: "i_opflags", scope: !409, file: !44, line: 612, baseType: !298, size: 16, offset: 16)
!413 = !DIDerivedType(tag: DW_TAG_member, name: "i_uid", scope: !409, file: !44, line: 613, baseType: !414, size: 32, offset: 32)
!414 = !DIDerivedType(tag: DW_TAG_typedef, name: "kuid_t", file: !415, line: 23, baseType: !416)
!415 = !DIFile(filename: "./include/linux/uidgid.h", directory: "/home/lizy2001/genbc/linux")
!416 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !415, line: 21, size: 32, elements: !417)
!417 = !{!418}
!418 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !416, file: !415, line: 22, baseType: !419, size: 32)
!419 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !181, line: 32, baseType: !420)
!420 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_uid32_t", file: !289, line: 49, baseType: !7)
!421 = !DIDerivedType(tag: DW_TAG_member, name: "i_gid", scope: !409, file: !44, line: 614, baseType: !422, size: 32, offset: 64)
!422 = !DIDerivedType(tag: DW_TAG_typedef, name: "kgid_t", file: !415, line: 28, baseType: !423)
!423 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !415, line: 26, size: 32, elements: !424)
!424 = !{!425}
!425 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !423, file: !415, line: 27, baseType: !426, size: 32)
!426 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !181, line: 33, baseType: !427)
!427 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_gid32_t", file: !289, line: 50, baseType: !7)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "i_flags", scope: !409, file: !44, line: 615, baseType: !7, size: 32, offset: 96)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "i_op", scope: !409, file: !44, line: 622, baseType: !430, size: 64, offset: 128)
!430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !431, size: 64)
!431 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !432)
!432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inode_operations", file: !44, line: 1864, size: 1536, align: 512, elements: !433)
!433 = !{!434, !438, !451, !455, !461, !465, !469, !473, !477, !481, !485, !486, !492, !496, !522, !551, !555, !561, !566, !570, !571}
!434 = !DIDerivedType(tag: DW_TAG_member, name: "lookup", scope: !432, file: !44, line: 1865, baseType: !435, size: 64)
!435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !436, size: 64)
!436 = !DISubroutineType(types: !437)
!437 = !{!365, !408, !365, !7}
!438 = !DIDerivedType(tag: DW_TAG_member, name: "get_link", scope: !432, file: !44, line: 1866, baseType: !439, size: 64, offset: 64)
!439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !440, size: 64)
!440 = !DISubroutineType(types: !441)
!441 = !{!147, !365, !408, !442}
!442 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !443, size: 64)
!443 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "delayed_call", file: !444, line: 10, size: 128, elements: !445)
!444 = !DIFile(filename: "./include/linux/delayed_call.h", directory: "/home/lizy2001/genbc/linux")
!445 = !{!446, !450}
!446 = !DIDerivedType(tag: DW_TAG_member, name: "fn", scope: !443, file: !444, line: 11, baseType: !447, size: 64)
!447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !448, size: 64)
!448 = !DISubroutineType(types: !449)
!449 = !{null, !330}
!450 = !DIDerivedType(tag: DW_TAG_member, name: "arg", scope: !443, file: !444, line: 12, baseType: !330, size: 64, offset: 64)
!451 = !DIDerivedType(tag: DW_TAG_member, name: "permission", scope: !432, file: !44, line: 1867, baseType: !452, size: 64, offset: 128)
!452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !453, size: 64)
!453 = !DISubroutineType(types: !454)
!454 = !{!240, !408, !240}
!455 = !DIDerivedType(tag: DW_TAG_member, name: "get_acl", scope: !432, file: !44, line: 1868, baseType: !456, size: 64, offset: 192)
!456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !457, size: 64)
!457 = !DISubroutineType(types: !458)
!458 = !{!459, !408, !240}
!459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !460, size: 64)
!460 = !DICompositeType(tag: DW_TAG_structure_type, name: "posix_acl", file: !44, line: 581, flags: DIFlagFwdDecl)
!461 = !DIDerivedType(tag: DW_TAG_member, name: "readlink", scope: !432, file: !44, line: 1870, baseType: !462, size: 64, offset: 256)
!462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !463, size: 64)
!463 = !DISubroutineType(types: !464)
!464 = !{!240, !365, !256, !240}
!465 = !DIDerivedType(tag: DW_TAG_member, name: "create", scope: !432, file: !44, line: 1872, baseType: !466, size: 64, offset: 320)
!466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !467, size: 64)
!467 = !DISubroutineType(types: !468)
!468 = !{!240, !408, !365, !297, !180}
!469 = !DIDerivedType(tag: DW_TAG_member, name: "link", scope: !432, file: !44, line: 1873, baseType: !470, size: 64, offset: 384)
!470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !471, size: 64)
!471 = !DISubroutineType(types: !472)
!472 = !{!240, !365, !408, !365}
!473 = !DIDerivedType(tag: DW_TAG_member, name: "unlink", scope: !432, file: !44, line: 1874, baseType: !474, size: 64, offset: 448)
!474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !475, size: 64)
!475 = !DISubroutineType(types: !476)
!476 = !{!240, !408, !365}
!477 = !DIDerivedType(tag: DW_TAG_member, name: "symlink", scope: !432, file: !44, line: 1875, baseType: !478, size: 64, offset: 512)
!478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !479, size: 64)
!479 = !DISubroutineType(types: !480)
!480 = !{!240, !408, !365, !147}
!481 = !DIDerivedType(tag: DW_TAG_member, name: "mkdir", scope: !432, file: !44, line: 1876, baseType: !482, size: 64, offset: 576)
!482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !483, size: 64)
!483 = !DISubroutineType(types: !484)
!484 = !{!240, !408, !365, !297}
!485 = !DIDerivedType(tag: DW_TAG_member, name: "rmdir", scope: !432, file: !44, line: 1877, baseType: !474, size: 64, offset: 640)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "mknod", scope: !432, file: !44, line: 1878, baseType: !487, size: 64, offset: 704)
!487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !488, size: 64)
!488 = !DISubroutineType(types: !489)
!489 = !{!240, !408, !365, !297, !490}
!490 = !DIDerivedType(tag: DW_TAG_typedef, name: "dev_t", file: !181, line: 16, baseType: !491)
!491 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_dev_t", file: !181, line: 13, baseType: !152)
!492 = !DIDerivedType(tag: DW_TAG_member, name: "rename", scope: !432, file: !44, line: 1879, baseType: !493, size: 64, offset: 768)
!493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !494, size: 64)
!494 = !DISubroutineType(types: !495)
!495 = !{!240, !408, !365, !408, !365, !7}
!496 = !DIDerivedType(tag: DW_TAG_member, name: "setattr", scope: !432, file: !44, line: 1881, baseType: !497, size: 64, offset: 832)
!497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !498, size: 64)
!498 = !DISubroutineType(types: !499)
!499 = !{!240, !365, !500}
!500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !501, size: 64)
!501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iattr", file: !44, line: 219, size: 640, elements: !502)
!502 = !{!503, !504, !505, !506, !507, !511, !519, !520, !521}
!503 = !DIDerivedType(tag: DW_TAG_member, name: "ia_valid", scope: !501, file: !44, line: 220, baseType: !7, size: 32)
!504 = !DIDerivedType(tag: DW_TAG_member, name: "ia_mode", scope: !501, file: !44, line: 221, baseType: !297, size: 16, offset: 32)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "ia_uid", scope: !501, file: !44, line: 222, baseType: !414, size: 32, offset: 64)
!506 = !DIDerivedType(tag: DW_TAG_member, name: "ia_gid", scope: !501, file: !44, line: 223, baseType: !422, size: 32, offset: 96)
!507 = !DIDerivedType(tag: DW_TAG_member, name: "ia_size", scope: !501, file: !44, line: 224, baseType: !508, size: 64, offset: 128)
!508 = !DIDerivedType(tag: DW_TAG_typedef, name: "loff_t", file: !181, line: 46, baseType: !509)
!509 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_loff_t", file: !289, line: 88, baseType: !510)
!510 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!511 = !DIDerivedType(tag: DW_TAG_member, name: "ia_atime", scope: !501, file: !44, line: 225, baseType: !512, size: 128, offset: 192)
!512 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec64", file: !513, line: 13, size: 128, elements: !514)
!513 = !DIFile(filename: "./include/linux/time64.h", directory: "/home/lizy2001/genbc/linux")
!514 = !{!515, !518}
!515 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !512, file: !513, line: 14, baseType: !516, size: 64)
!516 = !DIDerivedType(tag: DW_TAG_typedef, name: "time64_t", file: !513, line: 8, baseType: !517)
!517 = !DIDerivedType(tag: DW_TAG_typedef, name: "__s64", file: !155, line: 30, baseType: !510)
!518 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !512, file: !513, line: 15, baseType: !291, size: 64, offset: 64)
!519 = !DIDerivedType(tag: DW_TAG_member, name: "ia_mtime", scope: !501, file: !44, line: 226, baseType: !512, size: 128, offset: 320)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "ia_ctime", scope: !501, file: !44, line: 227, baseType: !512, size: 128, offset: 448)
!521 = !DIDerivedType(tag: DW_TAG_member, name: "ia_file", scope: !501, file: !44, line: 234, baseType: !335, size: 64, offset: 576)
!522 = !DIDerivedType(tag: DW_TAG_member, name: "getattr", scope: !432, file: !44, line: 1882, baseType: !523, size: 64, offset: 896)
!523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !524, size: 64)
!524 = !DISubroutineType(types: !525)
!525 = !{!240, !526, !528, !152, !7}
!526 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !527, size: 64)
!527 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !357)
!528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !529, size: 64)
!529 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kstat", file: !530, line: 22, size: 1152, elements: !531)
!530 = !DIFile(filename: "./include/linux/stat.h", directory: "/home/lizy2001/genbc/linux")
!531 = !{!532, !533, !534, !535, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550}
!532 = !DIDerivedType(tag: DW_TAG_member, name: "result_mask", scope: !529, file: !530, line: 23, baseType: !152, size: 32)
!533 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !529, file: !530, line: 24, baseType: !297, size: 16, offset: 32)
!534 = !DIDerivedType(tag: DW_TAG_member, name: "nlink", scope: !529, file: !530, line: 25, baseType: !7, size: 32, offset: 64)
!535 = !DIDerivedType(tag: DW_TAG_member, name: "blksize", scope: !529, file: !530, line: 26, baseType: !536, size: 32, offset: 96)
!536 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !181, line: 104, baseType: !152)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !529, file: !530, line: 27, baseType: !400, size: 64, offset: 128)
!538 = !DIDerivedType(tag: DW_TAG_member, name: "attributes_mask", scope: !529, file: !530, line: 28, baseType: !400, size: 64, offset: 192)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "ino", scope: !529, file: !530, line: 37, baseType: !400, size: 64, offset: 256)
!540 = !DIDerivedType(tag: DW_TAG_member, name: "dev", scope: !529, file: !530, line: 38, baseType: !490, size: 32, offset: 320)
!541 = !DIDerivedType(tag: DW_TAG_member, name: "rdev", scope: !529, file: !530, line: 39, baseType: !490, size: 32, offset: 352)
!542 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !529, file: !530, line: 40, baseType: !414, size: 32, offset: 384)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !529, file: !530, line: 41, baseType: !422, size: 32, offset: 416)
!544 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !529, file: !530, line: 42, baseType: !508, size: 64, offset: 448)
!545 = !DIDerivedType(tag: DW_TAG_member, name: "atime", scope: !529, file: !530, line: 43, baseType: !512, size: 128, offset: 512)
!546 = !DIDerivedType(tag: DW_TAG_member, name: "mtime", scope: !529, file: !530, line: 44, baseType: !512, size: 128, offset: 640)
!547 = !DIDerivedType(tag: DW_TAG_member, name: "ctime", scope: !529, file: !530, line: 45, baseType: !512, size: 128, offset: 768)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "btime", scope: !529, file: !530, line: 46, baseType: !512, size: 128, offset: 896)
!549 = !DIDerivedType(tag: DW_TAG_member, name: "blocks", scope: !529, file: !530, line: 47, baseType: !400, size: 64, offset: 1024)
!550 = !DIDerivedType(tag: DW_TAG_member, name: "mnt_id", scope: !529, file: !530, line: 48, baseType: !400, size: 64, offset: 1088)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "listxattr", scope: !432, file: !44, line: 1883, baseType: !552, size: 64, offset: 960)
!552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !553, size: 64)
!553 = !DISubroutineType(types: !554)
!554 = !{!287, !365, !256, !303}
!555 = !DIDerivedType(tag: DW_TAG_member, name: "fiemap", scope: !432, file: !44, line: 1884, baseType: !556, size: 64, offset: 1024)
!556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !557, size: 64)
!557 = !DISubroutineType(types: !558)
!558 = !{!240, !408, !559, !400, !400}
!559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !560, size: 64)
!560 = !DICompositeType(tag: DW_TAG_structure_type, name: "fiemap_extent_info", file: !44, line: 50, flags: DIFlagFwdDecl)
!561 = !DIDerivedType(tag: DW_TAG_member, name: "update_time", scope: !432, file: !44, line: 1886, baseType: !562, size: 64, offset: 1088)
!562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !563, size: 64)
!563 = !DISubroutineType(types: !564)
!564 = !{!240, !408, !565, !240}
!565 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !512, size: 64)
!566 = !DIDerivedType(tag: DW_TAG_member, name: "atomic_open", scope: !432, file: !44, line: 1887, baseType: !567, size: 64, offset: 1152)
!567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !568, size: 64)
!568 = !DISubroutineType(types: !569)
!569 = !{!240, !408, !365, !335, !7, !297}
!570 = !DIDerivedType(tag: DW_TAG_member, name: "tmpfile", scope: !432, file: !44, line: 1890, baseType: !482, size: 64, offset: 1216)
!571 = !DIDerivedType(tag: DW_TAG_member, name: "set_acl", scope: !432, file: !44, line: 1891, baseType: !572, size: 64, offset: 1280)
!572 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !573, size: 64)
!573 = !DISubroutineType(types: !574)
!574 = !{!240, !408, !459, !240}
!575 = !DIDerivedType(tag: DW_TAG_member, name: "i_sb", scope: !409, file: !44, line: 623, baseType: !576, size: 64, offset: 192)
!576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !577, size: 64)
!577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "super_block", file: !44, line: 1416, size: 9472, elements: !578)
!578 = !{!579, !580, !581, !582, !583, !584, !634, !2446, !2528, !2611, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2627, !2631, !2632, !2635, !2636, !2853, !2854, !2855, !2896, !2923, !2924, !2925, !2926, !2927, !2928, !2931, !2933, !2940, !2941, !2943, !2944, !2945, !3004, !3005, !3020, !3021, !3022, !3023, !3024, !3027, !3028, !3029, !3044, !3045, !3046, !3047, !3048, !3049, !3050, !3051, !3052}
!579 = !DIDerivedType(tag: DW_TAG_member, name: "s_list", scope: !577, file: !44, line: 1417, baseType: !201, size: 128)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "s_dev", scope: !577, file: !44, line: 1418, baseType: !490, size: 32, offset: 128)
!581 = !DIDerivedType(tag: DW_TAG_member, name: "s_blocksize_bits", scope: !577, file: !44, line: 1419, baseType: !406, size: 8, offset: 160)
!582 = !DIDerivedType(tag: DW_TAG_member, name: "s_blocksize", scope: !577, file: !44, line: 1420, baseType: !306, size: 64, offset: 192)
!583 = !DIDerivedType(tag: DW_TAG_member, name: "s_maxbytes", scope: !577, file: !44, line: 1421, baseType: !508, size: 64, offset: 256)
!584 = !DIDerivedType(tag: DW_TAG_member, name: "s_type", scope: !577, file: !44, line: 1422, baseType: !585, size: 64, offset: 320)
!585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !586, size: 64)
!586 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_system_type", file: !44, line: 2228, size: 576, elements: !587)
!587 = !{!588, !589, !590, !597, !601, !605, !609, !613, !614, !624, !627, !628, !629, !631, !632, !633}
!588 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !586, file: !44, line: 2229, baseType: !147, size: 64)
!589 = !DIDerivedType(tag: DW_TAG_member, name: "fs_flags", scope: !586, file: !44, line: 2230, baseType: !240, size: 32, offset: 64)
!590 = !DIDerivedType(tag: DW_TAG_member, name: "init_fs_context", scope: !586, file: !44, line: 2238, baseType: !591, size: 64, offset: 128)
!591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !592, size: 64)
!592 = !DISubroutineType(types: !593)
!593 = !{!240, !594}
!594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !595, size: 64)
!595 = !DICompositeType(tag: DW_TAG_structure_type, name: "fs_context", file: !596, line: 28, flags: DIFlagFwdDecl)
!596 = !DIFile(filename: "./include/linux/kernfs.h", directory: "/home/lizy2001/genbc/linux")
!597 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !586, file: !44, line: 2239, baseType: !598, size: 64, offset: 192)
!598 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !599, size: 64)
!599 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !600)
!600 = !DICompositeType(tag: DW_TAG_structure_type, name: "fs_parameter_spec", file: !44, line: 70, flags: DIFlagFwdDecl)
!601 = !DIDerivedType(tag: DW_TAG_member, name: "mount", scope: !586, file: !44, line: 2240, baseType: !602, size: 64, offset: 256)
!602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !603, size: 64)
!603 = !DISubroutineType(types: !604)
!604 = !{!365, !585, !240, !147, !330}
!605 = !DIDerivedType(tag: DW_TAG_member, name: "kill_sb", scope: !586, file: !44, line: 2242, baseType: !606, size: 64, offset: 320)
!606 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !607, size: 64)
!607 = !DISubroutineType(types: !608)
!608 = !{null, !576}
!609 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !586, file: !44, line: 2243, baseType: !610, size: 64, offset: 384)
!610 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !611, size: 64)
!611 = !DICompositeType(tag: DW_TAG_structure_type, name: "module", file: !612, line: 76, flags: DIFlagFwdDecl)
!612 = !DIFile(filename: "./arch/x86/include/asm/alternative.h", directory: "/home/lizy2001/genbc/linux")
!613 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !586, file: !44, line: 2244, baseType: !585, size: 64, offset: 448)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "fs_supers", scope: !586, file: !44, line: 2245, baseType: !615, size: 64, offset: 512)
!615 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hlist_head", file: !181, line: 182, size: 64, elements: !616)
!616 = !{!617}
!617 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !615, file: !181, line: 183, baseType: !618, size: 64)
!618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !619, size: 64)
!619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hlist_node", file: !181, line: 186, size: 128, elements: !620)
!620 = !{!621, !622}
!621 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !619, file: !181, line: 187, baseType: !618, size: 64)
!622 = !DIDerivedType(tag: DW_TAG_member, name: "pprev", scope: !619, file: !181, line: 187, baseType: !623, size: 64, offset: 64)
!623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !618, size: 64)
!624 = !DIDerivedType(tag: DW_TAG_member, name: "s_lock_key", scope: !586, file: !44, line: 2247, baseType: !625, offset: 576)
!625 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lock_class_key", file: !626, line: 187, elements: !228)
!626 = !DIFile(filename: "./include/linux/lockdep_types.h", directory: "/home/lizy2001/genbc/linux")
!627 = !DIDerivedType(tag: DW_TAG_member, name: "s_umount_key", scope: !586, file: !44, line: 2248, baseType: !625, offset: 576)
!628 = !DIDerivedType(tag: DW_TAG_member, name: "s_vfs_rename_key", scope: !586, file: !44, line: 2249, baseType: !625, offset: 576)
!629 = !DIDerivedType(tag: DW_TAG_member, name: "s_writers_key", scope: !586, file: !44, line: 2250, baseType: !630, offset: 576)
!630 = !DICompositeType(tag: DW_TAG_array_type, baseType: !625, elements: !257)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "i_lock_key", scope: !586, file: !44, line: 2252, baseType: !625, offset: 576)
!632 = !DIDerivedType(tag: DW_TAG_member, name: "i_mutex_key", scope: !586, file: !44, line: 2253, baseType: !625, offset: 576)
!633 = !DIDerivedType(tag: DW_TAG_member, name: "i_mutex_dir_key", scope: !586, file: !44, line: 2254, baseType: !625, offset: 576)
!634 = !DIDerivedType(tag: DW_TAG_member, name: "s_op", scope: !577, file: !44, line: 1423, baseType: !635, size: 64, offset: 384)
!635 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !636, size: 64)
!636 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !637)
!637 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "super_operations", file: !44, line: 1935, size: 1472, elements: !638)
!638 = !{!639, !643, !647, !648, !652, !658, !662, !663, !664, !668, !672, !673, !674, !675, !681, !686, !687, !694, !695, !696, !697, !2430, !2445}
!639 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_inode", scope: !637, file: !44, line: 1936, baseType: !640, size: 64)
!640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !641, size: 64)
!641 = !DISubroutineType(types: !642)
!642 = !{!408, !576}
!643 = !DIDerivedType(tag: DW_TAG_member, name: "destroy_inode", scope: !637, file: !44, line: 1937, baseType: !644, size: 64, offset: 64)
!644 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !645, size: 64)
!645 = !DISubroutineType(types: !646)
!646 = !{null, !408}
!647 = !DIDerivedType(tag: DW_TAG_member, name: "free_inode", scope: !637, file: !44, line: 1938, baseType: !644, size: 64, offset: 128)
!648 = !DIDerivedType(tag: DW_TAG_member, name: "dirty_inode", scope: !637, file: !44, line: 1940, baseType: !649, size: 64, offset: 192)
!649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !650, size: 64)
!650 = !DISubroutineType(types: !651)
!651 = !{null, !408, !240}
!652 = !DIDerivedType(tag: DW_TAG_member, name: "write_inode", scope: !637, file: !44, line: 1941, baseType: !653, size: 64, offset: 256)
!653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !654, size: 64)
!654 = !DISubroutineType(types: !655)
!655 = !{!240, !408, !656}
!656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !657, size: 64)
!657 = !DICompositeType(tag: DW_TAG_structure_type, name: "writeback_control", file: !14, line: 40, flags: DIFlagFwdDecl)
!658 = !DIDerivedType(tag: DW_TAG_member, name: "drop_inode", scope: !637, file: !44, line: 1942, baseType: !659, size: 64, offset: 320)
!659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !660, size: 64)
!660 = !DISubroutineType(types: !661)
!661 = !{!240, !408}
!662 = !DIDerivedType(tag: DW_TAG_member, name: "evict_inode", scope: !637, file: !44, line: 1943, baseType: !644, size: 64, offset: 384)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "put_super", scope: !637, file: !44, line: 1944, baseType: !606, size: 64, offset: 448)
!664 = !DIDerivedType(tag: DW_TAG_member, name: "sync_fs", scope: !637, file: !44, line: 1945, baseType: !665, size: 64, offset: 512)
!665 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !666, size: 64)
!666 = !DISubroutineType(types: !667)
!667 = !{!240, !576, !240}
!668 = !DIDerivedType(tag: DW_TAG_member, name: "freeze_super", scope: !637, file: !44, line: 1946, baseType: !669, size: 64, offset: 576)
!669 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !670, size: 64)
!670 = !DISubroutineType(types: !671)
!671 = !{!240, !576}
!672 = !DIDerivedType(tag: DW_TAG_member, name: "freeze_fs", scope: !637, file: !44, line: 1947, baseType: !669, size: 64, offset: 640)
!673 = !DIDerivedType(tag: DW_TAG_member, name: "thaw_super", scope: !637, file: !44, line: 1948, baseType: !669, size: 64, offset: 704)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "unfreeze_fs", scope: !637, file: !44, line: 1949, baseType: !669, size: 64, offset: 768)
!675 = !DIDerivedType(tag: DW_TAG_member, name: "statfs", scope: !637, file: !44, line: 1950, baseType: !676, size: 64, offset: 832)
!676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !677, size: 64)
!677 = !DISubroutineType(types: !678)
!678 = !{!240, !365, !679}
!679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !680, size: 64)
!680 = !DICompositeType(tag: DW_TAG_structure_type, name: "kstatfs", file: !44, line: 57, flags: DIFlagFwdDecl)
!681 = !DIDerivedType(tag: DW_TAG_member, name: "remount_fs", scope: !637, file: !44, line: 1951, baseType: !682, size: 64, offset: 896)
!682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !683, size: 64)
!683 = !DISubroutineType(types: !684)
!684 = !{!240, !576, !685, !256}
!685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !240, size: 64)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "umount_begin", scope: !637, file: !44, line: 1952, baseType: !606, size: 64, offset: 960)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "show_options", scope: !637, file: !44, line: 1954, baseType: !688, size: 64, offset: 1024)
!688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !689, size: 64)
!689 = !DISubroutineType(types: !690)
!690 = !{!240, !691, !365}
!691 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !692, size: 64)
!692 = !DICompositeType(tag: DW_TAG_structure_type, name: "seq_file", file: !693, line: 539, flags: DIFlagFwdDecl)
!693 = !DIFile(filename: "./arch/x86/include/asm/pgtable_types.h", directory: "/home/lizy2001/genbc/linux")
!694 = !DIDerivedType(tag: DW_TAG_member, name: "show_devname", scope: !637, file: !44, line: 1955, baseType: !688, size: 64, offset: 1088)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "show_path", scope: !637, file: !44, line: 1956, baseType: !688, size: 64, offset: 1152)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "show_stats", scope: !637, file: !44, line: 1957, baseType: !688, size: 64, offset: 1216)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "bdev_try_to_free_page", scope: !637, file: !44, line: 1963, baseType: !698, size: 64, offset: 1280)
!698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !699, size: 64)
!699 = !DISubroutineType(types: !700)
!700 = !{!240, !576, !701, !724}
!701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !702, size: 64)
!702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "page", file: !703, line: 68, size: 512, align: 128, elements: !704)
!703 = !DIFile(filename: "./include/linux/mm_types.h", directory: "/home/lizy2001/genbc/linux")
!704 = !{!705, !706, !2422, !2429}
!705 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !702, file: !703, line: 69, baseType: !306, size: 64)
!706 = !DIDerivedType(tag: DW_TAG_member, scope: !702, file: !703, line: 77, baseType: !707, size: 320, offset: 64)
!707 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !702, file: !703, line: 77, size: 320, elements: !708)
!708 = !{!709, !937, !942, !970, !978, !984, !2353, !2421}
!709 = !DIDerivedType(tag: DW_TAG_member, scope: !707, file: !703, line: 78, baseType: !710, size: 320)
!710 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !707, file: !703, line: 78, size: 320, elements: !711)
!711 = !{!712, !713, !935, !936}
!712 = !DIDerivedType(tag: DW_TAG_member, name: "lru", scope: !710, file: !703, line: 84, baseType: !201, size: 128)
!713 = !DIDerivedType(tag: DW_TAG_member, name: "mapping", scope: !710, file: !703, line: 86, baseType: !714, size: 64, offset: 128)
!714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !715, size: 64)
!715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "address_space", file: !44, line: 451, size: 1216, align: 64, elements: !716)
!716 = !{!717, !718, !726, !727, !732, !747, !763, !764, !765, !766, !928, !929, !932, !933, !934}
!717 = !DIDerivedType(tag: DW_TAG_member, name: "host", scope: !715, file: !44, line: 452, baseType: !408, size: 64)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "i_pages", scope: !715, file: !44, line: 453, baseType: !719, size: 128, offset: 64)
!719 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "xarray", file: !720, line: 292, size: 128, elements: !721)
!720 = !DIFile(filename: "./include/linux/xarray.h", directory: "/home/lizy2001/genbc/linux")
!721 = !{!722, !723, !725}
!722 = !DIDerivedType(tag: DW_TAG_member, name: "xa_lock", scope: !719, file: !720, line: 293, baseType: !214)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "xa_flags", scope: !719, file: !720, line: 295, baseType: !724, size: 32)
!724 = !DIDerivedType(tag: DW_TAG_typedef, name: "gfp_t", file: !181, line: 148, baseType: !7)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "xa_head", scope: !719, file: !720, line: 296, baseType: !330, size: 64, offset: 64)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "gfp_mask", scope: !715, file: !44, line: 454, baseType: !724, size: 32, offset: 192)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "i_mmap_writable", scope: !715, file: !44, line: 455, baseType: !728, size: 32, offset: 224)
!728 = !DIDerivedType(tag: DW_TAG_typedef, name: "atomic_t", file: !181, line: 168, baseType: !729)
!729 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !181, line: 166, size: 32, elements: !730)
!730 = !{!731}
!731 = !DIDerivedType(tag: DW_TAG_member, name: "counter", scope: !729, file: !181, line: 167, baseType: !240, size: 32)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "i_mmap", scope: !715, file: !44, line: 460, baseType: !733, size: 128, offset: 256)
!733 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rb_root_cached", file: !734, line: 125, size: 128, elements: !735)
!734 = !DIFile(filename: "./include/linux/rbtree.h", directory: "/home/lizy2001/genbc/linux")
!735 = !{!736, !746}
!736 = !DIDerivedType(tag: DW_TAG_member, name: "rb_root", scope: !733, file: !734, line: 126, baseType: !737, size: 64)
!737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rb_root", file: !734, line: 31, size: 64, elements: !738)
!738 = !{!739}
!739 = !DIDerivedType(tag: DW_TAG_member, name: "rb_node", scope: !737, file: !734, line: 32, baseType: !740, size: 64)
!740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !741, size: 64)
!741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rb_node", file: !734, line: 24, size: 192, align: 64, elements: !742)
!742 = !{!743, !744, !745}
!743 = !DIDerivedType(tag: DW_TAG_member, name: "__rb_parent_color", scope: !741, file: !734, line: 25, baseType: !306, size: 64)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "rb_right", scope: !741, file: !734, line: 26, baseType: !740, size: 64, offset: 64)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "rb_left", scope: !741, file: !734, line: 27, baseType: !740, size: 64, offset: 128)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "rb_leftmost", scope: !733, file: !734, line: 127, baseType: !740, size: 64, offset: 64)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "i_mmap_rwsem", scope: !715, file: !44, line: 461, baseType: !748, size: 256, offset: 384)
!748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rw_semaphore", file: !749, line: 35, size: 256, elements: !750)
!749 = !DIFile(filename: "./include/linux/rwsem.h", directory: "/home/lizy2001/genbc/linux")
!750 = !{!751, !759, !760, !762}
!751 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !748, file: !749, line: 36, baseType: !752, size: 64)
!752 = !DIDerivedType(tag: DW_TAG_typedef, name: "atomic_long_t", file: !753, line: 13, baseType: !754)
!753 = !DIFile(filename: "./include/asm-generic/atomic-long.h", directory: "/home/lizy2001/genbc/linux")
!754 = !DIDerivedType(tag: DW_TAG_typedef, name: "atomic64_t", file: !181, line: 175, baseType: !755)
!755 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !181, line: 173, size: 64, elements: !756)
!756 = !{!757}
!757 = !DIDerivedType(tag: DW_TAG_member, name: "counter", scope: !755, file: !181, line: 174, baseType: !758, size: 64)
!758 = !DIDerivedType(tag: DW_TAG_typedef, name: "s64", file: !153, line: 22, baseType: !517)
!759 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !748, file: !749, line: 42, baseType: !752, size: 64, offset: 64)
!760 = !DIDerivedType(tag: DW_TAG_member, name: "wait_lock", scope: !748, file: !749, line: 46, baseType: !761, offset: 128)
!761 = !DIDerivedType(tag: DW_TAG_typedef, name: "raw_spinlock_t", file: !215, line: 29, baseType: !222)
!762 = !DIDerivedType(tag: DW_TAG_member, name: "wait_list", scope: !748, file: !749, line: 47, baseType: !201, size: 128, offset: 128)
!763 = !DIDerivedType(tag: DW_TAG_member, name: "nrpages", scope: !715, file: !44, line: 462, baseType: !306, size: 64, offset: 640)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "nrexceptional", scope: !715, file: !44, line: 463, baseType: !306, size: 64, offset: 704)
!765 = !DIDerivedType(tag: DW_TAG_member, name: "writeback_index", scope: !715, file: !44, line: 464, baseType: !306, size: 64, offset: 768)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "a_ops", scope: !715, file: !44, line: 465, baseType: !767, size: 64, offset: 832)
!767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !768, size: 64)
!768 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !769)
!769 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "address_space_operations", file: !44, line: 367, size: 1408, elements: !770)
!770 = !{!771, !775, !779, !783, !787, !791, !797, !803, !807, !812, !816, !820, !824, !892, !896, !902, !903, !904, !908, !913, !917, !924}
!771 = !DIDerivedType(tag: DW_TAG_member, name: "writepage", scope: !769, file: !44, line: 368, baseType: !772, size: 64)
!772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !773, size: 64)
!773 = !DISubroutineType(types: !774)
!774 = !{!240, !701, !656}
!775 = !DIDerivedType(tag: DW_TAG_member, name: "readpage", scope: !769, file: !44, line: 369, baseType: !776, size: 64, offset: 64)
!776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !777, size: 64)
!777 = !DISubroutineType(types: !778)
!778 = !{!240, !335, !701}
!779 = !DIDerivedType(tag: DW_TAG_member, name: "writepages", scope: !769, file: !44, line: 372, baseType: !780, size: 64, offset: 128)
!780 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !781, size: 64)
!781 = !DISubroutineType(types: !782)
!782 = !{!240, !714, !656}
!783 = !DIDerivedType(tag: DW_TAG_member, name: "set_page_dirty", scope: !769, file: !44, line: 375, baseType: !784, size: 64, offset: 192)
!784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !785, size: 64)
!785 = !DISubroutineType(types: !786)
!786 = !{!240, !701}
!787 = !DIDerivedType(tag: DW_TAG_member, name: "readpages", scope: !769, file: !44, line: 381, baseType: !788, size: 64, offset: 256)
!788 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !789, size: 64)
!789 = !DISubroutineType(types: !790)
!790 = !{!240, !335, !714, !204, !7}
!791 = !DIDerivedType(tag: DW_TAG_member, name: "readahead", scope: !769, file: !44, line: 383, baseType: !792, size: 64, offset: 320)
!792 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !793, size: 64)
!793 = !DISubroutineType(types: !794)
!794 = !{null, !795}
!795 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !796, size: 64)
!796 = !DICompositeType(tag: DW_TAG_structure_type, name: "readahead_control", file: !44, line: 290, flags: DIFlagFwdDecl)
!797 = !DIDerivedType(tag: DW_TAG_member, name: "write_begin", scope: !769, file: !44, line: 385, baseType: !798, size: 64, offset: 384)
!798 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !799, size: 64)
!799 = !DISubroutineType(types: !800)
!800 = !{!240, !335, !714, !508, !7, !7, !801, !802}
!801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !701, size: 64)
!802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !330, size: 64)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "write_end", scope: !769, file: !44, line: 388, baseType: !804, size: 64, offset: 448)
!804 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !805, size: 64)
!805 = !DISubroutineType(types: !806)
!806 = !{!240, !335, !714, !508, !7, !7, !701, !330}
!807 = !DIDerivedType(tag: DW_TAG_member, name: "bmap", scope: !769, file: !44, line: 393, baseType: !808, size: 64, offset: 512)
!808 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !809, size: 64)
!809 = !DISubroutineType(types: !810)
!810 = !{!811, !714, !811}
!811 = !DIDerivedType(tag: DW_TAG_typedef, name: "sector_t", file: !181, line: 125, baseType: !400)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "invalidatepage", scope: !769, file: !44, line: 394, baseType: !813, size: 64, offset: 576)
!813 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !814, size: 64)
!814 = !DISubroutineType(types: !815)
!815 = !{null, !701, !7, !7}
!816 = !DIDerivedType(tag: DW_TAG_member, name: "releasepage", scope: !769, file: !44, line: 395, baseType: !817, size: 64, offset: 640)
!817 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !818, size: 64)
!818 = !DISubroutineType(types: !819)
!819 = !{!240, !701, !724}
!820 = !DIDerivedType(tag: DW_TAG_member, name: "freepage", scope: !769, file: !44, line: 396, baseType: !821, size: 64, offset: 704)
!821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !822, size: 64)
!822 = !DISubroutineType(types: !823)
!823 = !{null, !701}
!824 = !DIDerivedType(tag: DW_TAG_member, name: "direct_IO", scope: !769, file: !44, line: 397, baseType: !825, size: 64, offset: 768)
!825 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !826, size: 64)
!826 = !DISubroutineType(types: !827)
!827 = !{!287, !828, !850}
!828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !829, size: 64)
!829 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kiocb", file: !44, line: 320, size: 384, elements: !830)
!830 = !{!831, !832, !833, !837, !838, !839, !842, !843}
!831 = !DIDerivedType(tag: DW_TAG_member, name: "ki_filp", scope: !829, file: !44, line: 321, baseType: !335, size: 64)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "ki_pos", scope: !829, file: !44, line: 326, baseType: !508, size: 64, offset: 64)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "ki_complete", scope: !829, file: !44, line: 327, baseType: !834, size: 64, offset: 128)
!834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !835, size: 64)
!835 = !DISubroutineType(types: !836)
!836 = !{null, !828, !291, !291}
!837 = !DIDerivedType(tag: DW_TAG_member, name: "private", scope: !829, file: !44, line: 328, baseType: !330, size: 64, offset: 192)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "ki_flags", scope: !829, file: !44, line: 329, baseType: !240, size: 32, offset: 256)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "ki_hint", scope: !829, file: !44, line: 330, baseType: !840, size: 16, offset: 288)
!840 = !DIDerivedType(tag: DW_TAG_typedef, name: "u16", file: !153, line: 19, baseType: !841)
!841 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u16", file: !155, line: 24, baseType: !298)
!842 = !DIDerivedType(tag: DW_TAG_member, name: "ki_ioprio", scope: !829, file: !44, line: 331, baseType: !840, size: 16, offset: 304)
!843 = !DIDerivedType(tag: DW_TAG_member, scope: !829, file: !44, line: 332, baseType: !844, size: 64, offset: 320)
!844 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !829, file: !44, line: 332, size: 64, elements: !845)
!845 = !{!846, !847}
!846 = !DIDerivedType(tag: DW_TAG_member, name: "ki_cookie", scope: !844, file: !44, line: 333, baseType: !7, size: 32)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "ki_waitq", scope: !844, file: !44, line: 334, baseType: !848, size: 64)
!848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !849, size: 64)
!849 = !DICompositeType(tag: DW_TAG_structure_type, name: "wait_page_queue", file: !44, line: 334, flags: DIFlagFwdDecl)
!850 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !851, size: 64)
!851 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iov_iter", file: !852, line: 29, size: 320, elements: !853)
!852 = !DIFile(filename: "./include/linux/uio.h", directory: "/home/lizy2001/genbc/linux")
!853 = !{!854, !855, !856, !857, !883}
!854 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !851, file: !852, line: 35, baseType: !7, size: 32)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "iov_offset", scope: !851, file: !852, line: 36, baseType: !303, size: 64, offset: 64)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !851, file: !852, line: 37, baseType: !303, size: 64, offset: 128)
!857 = !DIDerivedType(tag: DW_TAG_member, scope: !851, file: !852, line: 38, baseType: !858, size: 64, offset: 192)
!858 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !851, file: !852, line: 38, size: 64, elements: !859)
!859 = !{!860, !868, !875, !879}
!860 = !DIDerivedType(tag: DW_TAG_member, name: "iov", scope: !858, file: !852, line: 39, baseType: !861, size: 64)
!861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !862, size: 64)
!862 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !863)
!863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iovec", file: !864, line: 17, size: 128, elements: !865)
!864 = !DIFile(filename: "./include/uapi/linux/uio.h", directory: "/home/lizy2001/genbc/linux")
!865 = !{!866, !867}
!866 = !DIDerivedType(tag: DW_TAG_member, name: "iov_base", scope: !863, file: !864, line: 19, baseType: !330, size: 64)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "iov_len", scope: !863, file: !864, line: 20, baseType: !304, size: 64, offset: 64)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "kvec", scope: !858, file: !852, line: 40, baseType: !869, size: 64)
!869 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !870, size: 64)
!870 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !871)
!871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kvec", file: !852, line: 15, size: 128, elements: !872)
!872 = !{!873, !874}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "iov_base", scope: !871, file: !852, line: 16, baseType: !330, size: 64)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "iov_len", scope: !871, file: !852, line: 17, baseType: !303, size: 64, offset: 64)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "bvec", scope: !858, file: !852, line: 41, baseType: !876, size: 64)
!876 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !877, size: 64)
!877 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !878)
!878 = !DICompositeType(tag: DW_TAG_structure_type, name: "bio_vec", file: !852, line: 41, flags: DIFlagFwdDecl)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "pipe", scope: !858, file: !852, line: 42, baseType: !880, size: 64)
!880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !881, size: 64)
!881 = !DICompositeType(tag: DW_TAG_structure_type, name: "pipe_inode_info", file: !882, line: 53, flags: DIFlagFwdDecl)
!882 = !DIFile(filename: "./include/linux/sched.h", directory: "/home/lizy2001/genbc/linux")
!883 = !DIDerivedType(tag: DW_TAG_member, scope: !851, file: !852, line: 44, baseType: !884, size: 64, offset: 256)
!884 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !851, file: !852, line: 44, size: 64, elements: !885)
!885 = !{!886, !887}
!886 = !DIDerivedType(tag: DW_TAG_member, name: "nr_segs", scope: !884, file: !852, line: 45, baseType: !306, size: 64)
!887 = !DIDerivedType(tag: DW_TAG_member, scope: !884, file: !852, line: 46, baseType: !888, size: 64)
!888 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !884, file: !852, line: 46, size: 64, elements: !889)
!889 = !{!890, !891}
!890 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !888, file: !852, line: 47, baseType: !7, size: 32)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "start_head", scope: !888, file: !852, line: 48, baseType: !7, size: 32, offset: 32)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "migratepage", scope: !769, file: !44, line: 402, baseType: !893, size: 64, offset: 832)
!893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !894, size: 64)
!894 = !DISubroutineType(types: !895)
!895 = !{!240, !714, !701, !701, !5}
!896 = !DIDerivedType(tag: DW_TAG_member, name: "isolate_page", scope: !769, file: !44, line: 404, baseType: !897, size: 64, offset: 896)
!897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !898, size: 64)
!898 = !DISubroutineType(types: !899)
!899 = !{!180, !701, !900}
!900 = !DIDerivedType(tag: DW_TAG_typedef, name: "isolate_mode_t", file: !901, line: 305, baseType: !7)
!901 = !DIFile(filename: "./include/linux/mmzone.h", directory: "/home/lizy2001/genbc/linux")
!902 = !DIDerivedType(tag: DW_TAG_member, name: "putback_page", scope: !769, file: !44, line: 405, baseType: !821, size: 64, offset: 960)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "launder_page", scope: !769, file: !44, line: 406, baseType: !784, size: 64, offset: 1024)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "is_partially_uptodate", scope: !769, file: !44, line: 407, baseType: !905, size: 64, offset: 1088)
!905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !906, size: 64)
!906 = !DISubroutineType(types: !907)
!907 = !{!240, !701, !306, !306}
!908 = !DIDerivedType(tag: DW_TAG_member, name: "is_dirty_writeback", scope: !769, file: !44, line: 409, baseType: !909, size: 64, offset: 1152)
!909 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !910, size: 64)
!910 = !DISubroutineType(types: !911)
!911 = !{null, !701, !912, !912}
!912 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !180, size: 64)
!913 = !DIDerivedType(tag: DW_TAG_member, name: "error_remove_page", scope: !769, file: !44, line: 410, baseType: !914, size: 64, offset: 1216)
!914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !915, size: 64)
!915 = !DISubroutineType(types: !916)
!916 = !{!240, !714, !701}
!917 = !DIDerivedType(tag: DW_TAG_member, name: "swap_activate", scope: !769, file: !44, line: 413, baseType: !918, size: 64, offset: 1280)
!918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !919, size: 64)
!919 = !DISubroutineType(types: !920)
!920 = !{!240, !921, !335, !923}
!921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !922, size: 64)
!922 = !DICompositeType(tag: DW_TAG_structure_type, name: "swap_info_struct", file: !44, line: 61, flags: DIFlagFwdDecl)
!923 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !811, size: 64)
!924 = !DIDerivedType(tag: DW_TAG_member, name: "swap_deactivate", scope: !769, file: !44, line: 415, baseType: !925, size: 64, offset: 1344)
!925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !926, size: 64)
!926 = !DISubroutineType(types: !927)
!927 = !{null, !335}
!928 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !715, file: !44, line: 466, baseType: !306, size: 64, offset: 896)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "wb_err", scope: !715, file: !44, line: 467, baseType: !930, size: 32, offset: 960)
!930 = !DIDerivedType(tag: DW_TAG_typedef, name: "errseq_t", file: !931, line: 8, baseType: !152)
!931 = !DIFile(filename: "./include/linux/errseq.h", directory: "/home/lizy2001/genbc/linux")
!932 = !DIDerivedType(tag: DW_TAG_member, name: "private_lock", scope: !715, file: !44, line: 468, baseType: !214, offset: 992)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "private_list", scope: !715, file: !44, line: 469, baseType: !201, size: 128, offset: 1024)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "private_data", scope: !715, file: !44, line: 470, baseType: !330, size: 64, offset: 1152)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !710, file: !703, line: 87, baseType: !306, size: 64, offset: 192)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "private", scope: !710, file: !703, line: 94, baseType: !306, size: 64, offset: 256)
!937 = !DIDerivedType(tag: DW_TAG_member, scope: !707, file: !703, line: 96, baseType: !938, size: 64)
!938 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !707, file: !703, line: 96, size: 64, elements: !939)
!939 = !{!940}
!940 = !DIDerivedType(tag: DW_TAG_member, name: "dma_addr", scope: !938, file: !703, line: 101, baseType: !941, size: 64)
!941 = !DIDerivedType(tag: DW_TAG_typedef, name: "dma_addr_t", file: !181, line: 143, baseType: !400)
!942 = !DIDerivedType(tag: DW_TAG_member, scope: !707, file: !703, line: 103, baseType: !943, size: 320)
!943 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !707, file: !703, line: 103, size: 320, elements: !944)
!944 = !{!945, !955, !958, !959}
!945 = !DIDerivedType(tag: DW_TAG_member, scope: !943, file: !703, line: 104, baseType: !946, size: 128)
!946 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !943, file: !703, line: 104, size: 128, elements: !947)
!947 = !{!948, !949}
!948 = !DIDerivedType(tag: DW_TAG_member, name: "slab_list", scope: !946, file: !703, line: 105, baseType: !201, size: 128)
!949 = !DIDerivedType(tag: DW_TAG_member, scope: !946, file: !703, line: 106, baseType: !950, size: 128)
!950 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !946, file: !703, line: 106, size: 128, elements: !951)
!951 = !{!952, !953, !954}
!952 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !950, file: !703, line: 107, baseType: !701, size: 64)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "pages", scope: !950, file: !703, line: 109, baseType: !240, size: 32, offset: 64)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "pobjects", scope: !950, file: !703, line: 110, baseType: !240, size: 32, offset: 96)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "slab_cache", scope: !943, file: !703, line: 117, baseType: !956, size: 64, offset: 128)
!956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !957, size: 64)
!957 = !DICompositeType(tag: DW_TAG_structure_type, name: "kmem_cache", file: !703, line: 117, flags: DIFlagFwdDecl)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "freelist", scope: !943, file: !703, line: 119, baseType: !330, size: 64, offset: 192)
!959 = !DIDerivedType(tag: DW_TAG_member, scope: !943, file: !703, line: 120, baseType: !960, size: 64, offset: 256)
!960 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !943, file: !703, line: 120, size: 64, elements: !961)
!961 = !{!962, !963, !964}
!962 = !DIDerivedType(tag: DW_TAG_member, name: "s_mem", scope: !960, file: !703, line: 121, baseType: !330, size: 64)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "counters", scope: !960, file: !703, line: 122, baseType: !306, size: 64)
!964 = !DIDerivedType(tag: DW_TAG_member, scope: !960, file: !703, line: 123, baseType: !965, size: 32)
!965 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !960, file: !703, line: 123, size: 32, elements: !966)
!966 = !{!967, !968, !969}
!967 = !DIDerivedType(tag: DW_TAG_member, name: "inuse", scope: !965, file: !703, line: 124, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !965, file: !703, line: 125, baseType: !7, size: 15, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "frozen", scope: !965, file: !703, line: 126, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!970 = !DIDerivedType(tag: DW_TAG_member, scope: !707, file: !703, line: 130, baseType: !971, size: 192)
!971 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !707, file: !703, line: 130, size: 192, elements: !972)
!972 = !{!973, !974, !975, !976, !977}
!973 = !DIDerivedType(tag: DW_TAG_member, name: "compound_head", scope: !971, file: !703, line: 131, baseType: !306, size: 64)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "compound_dtor", scope: !971, file: !703, line: 134, baseType: !406, size: 8, offset: 64)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "compound_order", scope: !971, file: !703, line: 135, baseType: !406, size: 8, offset: 72)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "compound_mapcount", scope: !971, file: !703, line: 136, baseType: !728, size: 32, offset: 96)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "compound_nr", scope: !971, file: !703, line: 137, baseType: !7, size: 32, offset: 128)
!978 = !DIDerivedType(tag: DW_TAG_member, scope: !707, file: !703, line: 139, baseType: !979, size: 256)
!979 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !707, file: !703, line: 139, size: 256, elements: !980)
!980 = !{!981, !982, !983}
!981 = !DIDerivedType(tag: DW_TAG_member, name: "_compound_pad_1", scope: !979, file: !703, line: 140, baseType: !306, size: 64)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "hpage_pinned_refcount", scope: !979, file: !703, line: 141, baseType: !728, size: 32, offset: 64)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "deferred_list", scope: !979, file: !703, line: 143, baseType: !201, size: 128, offset: 128)
!984 = !DIDerivedType(tag: DW_TAG_member, scope: !707, file: !703, line: 145, baseType: !985, size: 256)
!985 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !707, file: !703, line: 145, size: 256, elements: !986)
!986 = !{!987, !988, !990, !991, !2352}
!987 = !DIDerivedType(tag: DW_TAG_member, name: "_pt_pad_1", scope: !985, file: !703, line: 146, baseType: !306, size: 64)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "pmd_huge_pte", scope: !985, file: !703, line: 147, baseType: !989, size: 64, offset: 64)
!989 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgtable_t", file: !693, line: 509, baseType: !701)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "_pt_pad_2", scope: !985, file: !703, line: 148, baseType: !306, size: 64, offset: 128)
!991 = !DIDerivedType(tag: DW_TAG_member, scope: !985, file: !703, line: 149, baseType: !992, size: 64, offset: 192)
!992 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !985, file: !703, line: 149, size: 64, elements: !993)
!993 = !{!994, !2351}
!994 = !DIDerivedType(tag: DW_TAG_member, name: "pt_mm", scope: !992, file: !703, line: 150, baseType: !995, size: 64)
!995 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !996, size: 64)
!996 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mm_struct", file: !703, line: 388, size: 7296, elements: !997)
!997 = !{!998, !2347}
!998 = !DIDerivedType(tag: DW_TAG_member, scope: !996, file: !703, line: 389, baseType: !999, size: 7296)
!999 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !996, file: !703, line: 389, size: 7296, elements: !1000)
!1000 = !{!1001, !1119, !1120, !1121, !1125, !1126, !1127, !1128, !1129, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1170, !1178, !1181, !1227, !1228, !2331, !2332, !2335, !2336, !2337, !2340, !2341, !2342, !2345, !2346}
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "mmap", scope: !999, file: !703, line: 390, baseType: !1002, size: 64)
!1002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1003, size: 64)
!1003 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vm_area_struct", file: !703, line: 305, size: 1472, elements: !1004)
!1004 = !{!1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1019, !1020, !1025, !1026, !1029, !1113, !1114, !1115, !1116, !1117}
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "vm_start", scope: !1003, file: !703, line: 308, baseType: !306, size: 64)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "vm_end", scope: !1003, file: !703, line: 309, baseType: !306, size: 64, offset: 64)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "vm_next", scope: !1003, file: !703, line: 313, baseType: !1002, size: 64, offset: 128)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "vm_prev", scope: !1003, file: !703, line: 313, baseType: !1002, size: 64, offset: 192)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "vm_rb", scope: !1003, file: !703, line: 315, baseType: !741, size: 192, align: 64, offset: 256)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "rb_subtree_gap", scope: !1003, file: !703, line: 323, baseType: !306, size: 64, offset: 448)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "vm_mm", scope: !1003, file: !703, line: 327, baseType: !995, size: 64, offset: 512)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "vm_page_prot", scope: !1003, file: !703, line: 333, baseType: !1013, size: 64, offset: 576)
!1013 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgprot_t", file: !693, line: 284, baseType: !1014)
!1014 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pgprot", file: !693, line: 284, size: 64, elements: !1015)
!1015 = !{!1016}
!1016 = !DIDerivedType(tag: DW_TAG_member, name: "pgprot", scope: !1014, file: !693, line: 284, baseType: !1017, size: 64)
!1017 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgprotval_t", file: !1018, line: 19, baseType: !306)
!1018 = !DIFile(filename: "./arch/x86/include/asm/pgtable_64_types.h", directory: "/home/lizy2001/genbc/linux")
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "vm_flags", scope: !1003, file: !703, line: 334, baseType: !306, size: 64, offset: 640)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "shared", scope: !1003, file: !703, line: 343, baseType: !1021, size: 256, offset: 704)
!1021 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1003, file: !703, line: 340, size: 256, elements: !1022)
!1022 = !{!1023, !1024}
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "rb", scope: !1021, file: !703, line: 341, baseType: !741, size: 192, align: 64)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "rb_subtree_last", scope: !1021, file: !703, line: 342, baseType: !306, size: 64, offset: 192)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "anon_vma_chain", scope: !1003, file: !703, line: 351, baseType: !201, size: 128, offset: 960)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "anon_vma", scope: !1003, file: !703, line: 353, baseType: !1027, size: 64, offset: 1088)
!1027 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1028, size: 64)
!1028 = !DICompositeType(tag: DW_TAG_structure_type, name: "anon_vma", file: !703, line: 353, flags: DIFlagFwdDecl)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "vm_ops", scope: !1003, file: !703, line: 356, baseType: !1030, size: 64, offset: 1152)
!1030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1031, size: 64)
!1031 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1032)
!1032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vm_operations_struct", file: !14, line: 557, size: 832, elements: !1033)
!1033 = !{!1034, !1038, !1039, !1043, !1047, !1087, !1091, !1095, !1099, !1100, !1101, !1105, !1109}
!1034 = !DIDerivedType(tag: DW_TAG_member, name: "open", scope: !1032, file: !14, line: 558, baseType: !1035, size: 64)
!1035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1036, size: 64)
!1036 = !DISubroutineType(types: !1037)
!1037 = !{null, !1002}
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "close", scope: !1032, file: !14, line: 559, baseType: !1035, size: 64, offset: 64)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "split", scope: !1032, file: !14, line: 560, baseType: !1040, size: 64, offset: 128)
!1040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1041, size: 64)
!1041 = !DISubroutineType(types: !1042)
!1042 = !{!240, !1002, !306}
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "mremap", scope: !1032, file: !14, line: 561, baseType: !1044, size: 64, offset: 192)
!1044 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1045, size: 64)
!1045 = !DISubroutineType(types: !1046)
!1046 = !{!240, !1002}
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "fault", scope: !1032, file: !14, line: 562, baseType: !1048, size: 64, offset: 256)
!1048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1049, size: 64)
!1049 = !DISubroutineType(types: !1050)
!1050 = !{!1051, !1052}
!1051 = !DIDerivedType(tag: DW_TAG_typedef, name: "vm_fault_t", file: !703, line: 682, baseType: !7)
!1052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1053, size: 64)
!1053 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vm_fault", file: !14, line: 508, size: 768, elements: !1054)
!1054 = !{!1055, !1056, !1057, !1058, !1059, !1060, !1067, !1074, !1080, !1081, !1082, !1084, !1086}
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "vma", scope: !1053, file: !14, line: 509, baseType: !1002, size: 64)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1053, file: !14, line: 510, baseType: !7, size: 32, offset: 64)
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "gfp_mask", scope: !1053, file: !14, line: 511, baseType: !724, size: 32, offset: 96)
!1058 = !DIDerivedType(tag: DW_TAG_member, name: "pgoff", scope: !1053, file: !14, line: 512, baseType: !306, size: 64, offset: 128)
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1053, file: !14, line: 513, baseType: !306, size: 64, offset: 192)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "pmd", scope: !1053, file: !14, line: 514, baseType: !1061, size: 64, offset: 256)
!1061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1062, size: 64)
!1062 = !DIDerivedType(tag: DW_TAG_typedef, name: "pmd_t", file: !693, line: 385, baseType: !1063)
!1063 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !693, line: 385, size: 64, elements: !1064)
!1064 = !{!1065}
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "pmd", scope: !1063, file: !693, line: 385, baseType: !1066, size: 64)
!1066 = !DIDerivedType(tag: DW_TAG_typedef, name: "pmdval_t", file: !1018, line: 15, baseType: !306)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "pud", scope: !1053, file: !14, line: 516, baseType: !1068, size: 64, offset: 320)
!1068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1069, size: 64)
!1069 = !DIDerivedType(tag: DW_TAG_typedef, name: "pud_t", file: !693, line: 359, baseType: !1070)
!1070 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !693, line: 359, size: 64, elements: !1071)
!1071 = !{!1072}
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "pud", scope: !1070, file: !693, line: 359, baseType: !1073, size: 64)
!1073 = !DIDerivedType(tag: DW_TAG_typedef, name: "pudval_t", file: !1018, line: 16, baseType: !306)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "orig_pte", scope: !1053, file: !14, line: 519, baseType: !1075, size: 64, offset: 384)
!1075 = !DIDerivedType(tag: DW_TAG_typedef, name: "pte_t", file: !1018, line: 21, baseType: !1076)
!1076 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1018, line: 21, size: 64, elements: !1077)
!1077 = !{!1078}
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "pte", scope: !1076, file: !1018, line: 21, baseType: !1079, size: 64)
!1079 = !DIDerivedType(tag: DW_TAG_typedef, name: "pteval_t", file: !1018, line: 14, baseType: !306)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "cow_page", scope: !1053, file: !14, line: 521, baseType: !701, size: 64, offset: 448)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "page", scope: !1053, file: !14, line: 522, baseType: !701, size: 64, offset: 512)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "pte", scope: !1053, file: !14, line: 528, baseType: !1083, size: 64, offset: 576)
!1083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1075, size: 64)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "ptl", scope: !1053, file: !14, line: 532, baseType: !1085, size: 64, offset: 640)
!1085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !214, size: 64)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "prealloc_pte", scope: !1053, file: !14, line: 536, baseType: !989, size: 64, offset: 704)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "huge_fault", scope: !1032, file: !14, line: 563, baseType: !1088, size: 64, offset: 320)
!1088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1089, size: 64)
!1089 = !DISubroutineType(types: !1090)
!1090 = !{!1051, !1052, !13}
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "map_pages", scope: !1032, file: !14, line: 565, baseType: !1092, size: 64, offset: 384)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64)
!1093 = !DISubroutineType(types: !1094)
!1094 = !{null, !1052, !306, !306}
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "pagesize", scope: !1032, file: !14, line: 567, baseType: !1096, size: 64, offset: 448)
!1096 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1097, size: 64)
!1097 = !DISubroutineType(types: !1098)
!1098 = !{!306, !1002}
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "page_mkwrite", scope: !1032, file: !14, line: 571, baseType: !1048, size: 64, offset: 512)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "pfn_mkwrite", scope: !1032, file: !14, line: 574, baseType: !1048, size: 64, offset: 576)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "access", scope: !1032, file: !14, line: 579, baseType: !1102, size: 64, offset: 640)
!1102 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1103, size: 64)
!1103 = !DISubroutineType(types: !1104)
!1104 = !{!240, !1002, !306, !330, !240, !240}
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1032, file: !14, line: 585, baseType: !1106, size: 64, offset: 704)
!1106 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1107, size: 64)
!1107 = !DISubroutineType(types: !1108)
!1108 = !{!147, !1002}
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "find_special_page", scope: !1032, file: !14, line: 615, baseType: !1110, size: 64, offset: 768)
!1110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1111, size: 64)
!1111 = !DISubroutineType(types: !1112)
!1112 = !{!701, !1002, !306}
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "vm_pgoff", scope: !1003, file: !703, line: 359, baseType: !306, size: 64, offset: 1216)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "vm_file", scope: !1003, file: !703, line: 361, baseType: !335, size: 64, offset: 1280)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "vm_private_data", scope: !1003, file: !703, line: 362, baseType: !330, size: 64, offset: 1344)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "swap_readahead_info", scope: !1003, file: !703, line: 365, baseType: !752, size: 64, offset: 1408)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "vm_userfaultfd_ctx", scope: !1003, file: !703, line: 373, baseType: !1118, offset: 1472)
!1118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vm_userfaultfd_ctx", file: !703, line: 296, elements: !228)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "mm_rb", scope: !999, file: !703, line: 391, baseType: !737, size: 64, offset: 64)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "vmacache_seqnum", scope: !999, file: !703, line: 392, baseType: !400, size: 64, offset: 128)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "get_unmapped_area", scope: !999, file: !703, line: 394, baseType: !1122, size: 64, offset: 192)
!1122 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1123, size: 64)
!1123 = !DISubroutineType(types: !1124)
!1124 = !{!306, !335, !306, !306, !306, !306}
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_base", scope: !999, file: !703, line: 398, baseType: !306, size: 64, offset: 256)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_legacy_base", scope: !999, file: !703, line: 399, baseType: !306, size: 64, offset: 320)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "task_size", scope: !999, file: !703, line: 405, baseType: !306, size: 64, offset: 384)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "highest_vm_end", scope: !999, file: !703, line: 406, baseType: !306, size: 64, offset: 448)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "pgd", scope: !999, file: !703, line: 407, baseType: !1130, size: 64, offset: 512)
!1130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1131, size: 64)
!1131 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgd_t", file: !693, line: 286, baseType: !1132)
!1132 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !693, line: 286, size: 64, elements: !1133)
!1133 = !{!1134}
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "pgd", scope: !1132, file: !693, line: 286, baseType: !1135, size: 64)
!1135 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgdval_t", file: !1018, line: 18, baseType: !306)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "membarrier_state", scope: !999, file: !703, line: 416, baseType: !728, size: 32, offset: 576)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "mm_users", scope: !999, file: !703, line: 428, baseType: !728, size: 32, offset: 608)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "mm_count", scope: !999, file: !703, line: 437, baseType: !728, size: 32, offset: 640)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "has_pinned", scope: !999, file: !703, line: 447, baseType: !728, size: 32, offset: 672)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "pgtables_bytes", scope: !999, file: !703, line: 450, baseType: !752, size: 64, offset: 704)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "map_count", scope: !999, file: !703, line: 452, baseType: !240, size: 32, offset: 768)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "page_table_lock", scope: !999, file: !703, line: 454, baseType: !214, offset: 800)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_lock", scope: !999, file: !703, line: 457, baseType: !748, size: 256, offset: 832)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "mmlist", scope: !999, file: !703, line: 459, baseType: !201, size: 128, offset: 1088)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "hiwater_rss", scope: !999, file: !703, line: 466, baseType: !306, size: 64, offset: 1216)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "hiwater_vm", scope: !999, file: !703, line: 467, baseType: !306, size: 64, offset: 1280)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "total_vm", scope: !999, file: !703, line: 469, baseType: !306, size: 64, offset: 1344)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "locked_vm", scope: !999, file: !703, line: 470, baseType: !306, size: 64, offset: 1408)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "pinned_vm", scope: !999, file: !703, line: 471, baseType: !754, size: 64, offset: 1472)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "data_vm", scope: !999, file: !703, line: 472, baseType: !306, size: 64, offset: 1536)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "exec_vm", scope: !999, file: !703, line: 473, baseType: !306, size: 64, offset: 1600)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "stack_vm", scope: !999, file: !703, line: 474, baseType: !306, size: 64, offset: 1664)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "def_flags", scope: !999, file: !703, line: 475, baseType: !306, size: 64, offset: 1728)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "arg_lock", scope: !999, file: !703, line: 477, baseType: !214, offset: 1792)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "start_code", scope: !999, file: !703, line: 478, baseType: !306, size: 64, offset: 1792)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "end_code", scope: !999, file: !703, line: 478, baseType: !306, size: 64, offset: 1856)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "start_data", scope: !999, file: !703, line: 478, baseType: !306, size: 64, offset: 1920)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "end_data", scope: !999, file: !703, line: 478, baseType: !306, size: 64, offset: 1984)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "start_brk", scope: !999, file: !703, line: 479, baseType: !306, size: 64, offset: 2048)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "brk", scope: !999, file: !703, line: 479, baseType: !306, size: 64, offset: 2112)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "start_stack", scope: !999, file: !703, line: 479, baseType: !306, size: 64, offset: 2176)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "arg_start", scope: !999, file: !703, line: 480, baseType: !306, size: 64, offset: 2240)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "arg_end", scope: !999, file: !703, line: 480, baseType: !306, size: 64, offset: 2304)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "env_start", scope: !999, file: !703, line: 480, baseType: !306, size: 64, offset: 2368)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "env_end", scope: !999, file: !703, line: 480, baseType: !306, size: 64, offset: 2432)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "saved_auxv", scope: !999, file: !703, line: 482, baseType: !1167, size: 2816, offset: 2496)
!1167 = !DICompositeType(tag: DW_TAG_array_type, baseType: !306, size: 2816, elements: !1168)
!1168 = !{!1169}
!1169 = !DISubrange(count: 44)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "rss_stat", scope: !999, file: !703, line: 488, baseType: !1171, size: 256, offset: 5312)
!1171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mm_rss_stat", file: !1172, line: 60, size: 256, elements: !1173)
!1172 = !DIFile(filename: "./include/linux/mm_types_task.h", directory: "/home/lizy2001/genbc/linux")
!1173 = !{!1174}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1171, file: !1172, line: 61, baseType: !1175, size: 256)
!1175 = !DICompositeType(tag: DW_TAG_array_type, baseType: !752, size: 256, elements: !1176)
!1176 = !{!1177}
!1177 = !DISubrange(count: 4)
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "binfmt", scope: !999, file: !703, line: 490, baseType: !1179, size: 64, offset: 5568)
!1179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1180, size: 64)
!1180 = !DICompositeType(tag: DW_TAG_structure_type, name: "linux_binfmt", file: !703, line: 490, flags: DIFlagFwdDecl)
!1181 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !999, file: !703, line: 493, baseType: !1182, size: 896, offset: 5632)
!1182 = !DIDerivedType(tag: DW_TAG_typedef, name: "mm_context_t", file: !1183, line: 53, baseType: !1184)
!1183 = !DIFile(filename: "./arch/x86/include/asm/mmu.h", directory: "/home/lizy2001/genbc/linux")
!1184 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1183, line: 13, size: 896, elements: !1185)
!1185 = !{!1186, !1187, !1188, !1189, !1192, !1193, !1200, !1201, !1221, !1222, !1223}
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "ctx_id", scope: !1184, file: !1183, line: 18, baseType: !400, size: 64)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "tlb_gen", scope: !1184, file: !1183, line: 28, baseType: !754, size: 64, offset: 64)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "ldt_usr_sem", scope: !1184, file: !1183, line: 31, baseType: !748, size: 256, offset: 128)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "ldt", scope: !1184, file: !1183, line: 32, baseType: !1190, size: 64, offset: 384)
!1190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1191, size: 64)
!1191 = !DICompositeType(tag: DW_TAG_structure_type, name: "ldt_struct", file: !1183, line: 32, flags: DIFlagFwdDecl)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "ia32_compat", scope: !1184, file: !1183, line: 37, baseType: !298, size: 16, offset: 448)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1184, file: !1183, line: 40, baseType: !1194, size: 192, offset: 512)
!1194 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mutex", file: !1195, line: 53, size: 192, elements: !1196)
!1195 = !DIFile(filename: "./include/linux/mutex.h", directory: "/home/lizy2001/genbc/linux")
!1196 = !{!1197, !1198, !1199}
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !1194, file: !1195, line: 54, baseType: !752, size: 64)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "wait_lock", scope: !1194, file: !1195, line: 55, baseType: !214, offset: 64)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "wait_list", scope: !1194, file: !1195, line: 59, baseType: !201, size: 128, offset: 64)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "vdso", scope: !1184, file: !1183, line: 41, baseType: !330, size: 64, offset: 704)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "vdso_image", scope: !1184, file: !1183, line: 42, baseType: !1202, size: 64, offset: 768)
!1202 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1203, size: 64)
!1203 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1204)
!1204 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vdso_image", file: !1205, line: 13, size: 896, elements: !1206)
!1205 = !DIFile(filename: "./arch/x86/include/asm/vdso.h", directory: "/home/lizy2001/genbc/linux")
!1206 = !{!1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220}
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1204, file: !1205, line: 14, baseType: !330, size: 64)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1204, file: !1205, line: 15, baseType: !306, size: 64, offset: 64)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "alt", scope: !1204, file: !1205, line: 17, baseType: !306, size: 64, offset: 128)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "alt_len", scope: !1204, file: !1205, line: 17, baseType: !306, size: 64, offset: 192)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "sym_vvar_start", scope: !1204, file: !1205, line: 19, baseType: !291, size: 64, offset: 256)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "sym_vvar_page", scope: !1204, file: !1205, line: 21, baseType: !291, size: 64, offset: 320)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "sym_pvclock_page", scope: !1204, file: !1205, line: 22, baseType: !291, size: 64, offset: 384)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "sym_hvclock_page", scope: !1204, file: !1205, line: 23, baseType: !291, size: 64, offset: 448)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "sym_timens_page", scope: !1204, file: !1205, line: 24, baseType: !291, size: 64, offset: 512)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "sym_VDSO32_NOTE_MASK", scope: !1204, file: !1205, line: 25, baseType: !291, size: 64, offset: 576)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "sym___kernel_sigreturn", scope: !1204, file: !1205, line: 26, baseType: !291, size: 64, offset: 640)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "sym___kernel_rt_sigreturn", scope: !1204, file: !1205, line: 27, baseType: !291, size: 64, offset: 704)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "sym___kernel_vsyscall", scope: !1204, file: !1205, line: 28, baseType: !291, size: 64, offset: 768)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "sym_int80_landing_pad", scope: !1204, file: !1205, line: 29, baseType: !291, size: 64, offset: 832)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "perf_rdpmc_allowed", scope: !1184, file: !1183, line: 44, baseType: !728, size: 32, offset: 832)
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "pkey_allocation_map", scope: !1184, file: !1183, line: 50, baseType: !840, size: 16, offset: 864)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "execute_only_pkey", scope: !1184, file: !1183, line: 51, baseType: !1224, size: 16, offset: 880)
!1224 = !DIDerivedType(tag: DW_TAG_typedef, name: "s16", file: !153, line: 18, baseType: !1225)
!1225 = !DIDerivedType(tag: DW_TAG_typedef, name: "__s16", file: !155, line: 23, baseType: !1226)
!1226 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !999, file: !703, line: 495, baseType: !306, size: 64, offset: 6528)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "core_state", scope: !999, file: !703, line: 497, baseType: !1229, size: 64, offset: 6592)
!1229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1230, size: 64)
!1230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "core_state", file: !703, line: 381, size: 384, elements: !1231)
!1231 = !{!1232, !1233, !2330}
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "nr_threads", scope: !1230, file: !703, line: 382, baseType: !728, size: 32)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "dumper", scope: !1230, file: !703, line: 383, baseType: !1234, size: 128, offset: 64)
!1234 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "core_thread", file: !703, line: 376, size: 128, elements: !1235)
!1235 = !{!1236, !2328}
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "task", scope: !1234, file: !703, line: 377, baseType: !1237, size: 64)
!1237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1238, size: 64)
!1238 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "task_struct", file: !882, line: 640, size: 48640, elements: !1239)
!1239 = !{!1240, !1246, !1248, !1249, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1266, !1284, !1295, !1380, !1381, !1382, !1393, !1394, !1396, !1397, !1398, !1399, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1478, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1516, !1518, !1519, !1520, !1532, !1533, !1534, !1535, !1536, !1537, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1561, !1566, !1750, !1751, !1752, !1753, !1757, !1760, !1763, !1766, !1769, !1773, !1874, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1920, !1921, !1922, !1923, !1924, !1929, !1930, !1931, !1934, !1935, !1938, !1941, !1944, !1947, !1990, !1993, !1994, !2073, !2074, !2077, !2078, !2081, !2082, !2083, !2087, !2088, !2089, !2102, !2103, !2104, !2114, !2119, !2120, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155}
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "thread_info", scope: !1238, file: !882, line: 646, baseType: !1241, size: 128)
!1241 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "thread_info", file: !1242, line: 56, size: 128, elements: !1243)
!1242 = !DIFile(filename: "./arch/x86/include/asm/thread_info.h", directory: "/home/lizy2001/genbc/linux")
!1243 = !{!1244, !1245}
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1241, file: !1242, line: 57, baseType: !306, size: 64)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !1241, file: !1242, line: 58, baseType: !152, size: 32, offset: 64)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1238, file: !882, line: 649, baseType: !1247, size: 64, offset: 128)
!1247 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !291)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "stack", scope: !1238, file: !882, line: 657, baseType: !330, size: 64, offset: 192)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !1238, file: !882, line: 658, baseType: !1250, size: 32, offset: 256)
!1250 = !DIDerivedType(tag: DW_TAG_typedef, name: "refcount_t", file: !1251, line: 113, baseType: !1252)
!1251 = !DIFile(filename: "./include/linux/refcount.h", directory: "/home/lizy2001/genbc/linux")
!1252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "refcount_struct", file: !1251, line: 111, size: 32, elements: !1253)
!1253 = !{!1254}
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !1252, file: !1251, line: 112, baseType: !728, size: 32)
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1238, file: !882, line: 660, baseType: !7, size: 32, offset: 288)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace", scope: !1238, file: !882, line: 661, baseType: !7, size: 32, offset: 320)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "on_rq", scope: !1238, file: !882, line: 684, baseType: !240, size: 32, offset: 352)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "prio", scope: !1238, file: !882, line: 686, baseType: !240, size: 32, offset: 384)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "static_prio", scope: !1238, file: !882, line: 687, baseType: !240, size: 32, offset: 416)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "normal_prio", scope: !1238, file: !882, line: 688, baseType: !240, size: 32, offset: 448)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "rt_priority", scope: !1238, file: !882, line: 689, baseType: !7, size: 32, offset: 480)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "sched_class", scope: !1238, file: !882, line: 691, baseType: !1263, size: 64, offset: 512)
!1263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1264, size: 64)
!1264 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1265)
!1265 = !DICompositeType(tag: DW_TAG_structure_type, name: "sched_class", file: !882, line: 691, flags: DIFlagFwdDecl)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "se", scope: !1238, file: !882, line: 692, baseType: !1267, size: 832, offset: 576)
!1267 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_entity", file: !882, line: 451, size: 832, elements: !1268)
!1268 = !{!1269, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282}
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "load", scope: !1267, file: !882, line: 453, baseType: !1270, size: 128)
!1270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "load_weight", file: !882, line: 325, size: 128, elements: !1271)
!1271 = !{!1272, !1273}
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !1270, file: !882, line: 326, baseType: !306, size: 64)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "inv_weight", scope: !1270, file: !882, line: 327, baseType: !152, size: 32, offset: 64)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "run_node", scope: !1267, file: !882, line: 454, baseType: !741, size: 192, align: 64, offset: 128)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "group_node", scope: !1267, file: !882, line: 455, baseType: !201, size: 128, offset: 320)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "on_rq", scope: !1267, file: !882, line: 456, baseType: !7, size: 32, offset: 448)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "exec_start", scope: !1267, file: !882, line: 458, baseType: !400, size: 64, offset: 512)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "sum_exec_runtime", scope: !1267, file: !882, line: 459, baseType: !400, size: 64, offset: 576)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "vruntime", scope: !1267, file: !882, line: 460, baseType: !400, size: 64, offset: 640)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sum_exec_runtime", scope: !1267, file: !882, line: 461, baseType: !400, size: 64, offset: 704)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "nr_migrations", scope: !1267, file: !882, line: 463, baseType: !400, size: 64, offset: 768)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "statistics", scope: !1267, file: !882, line: 465, baseType: !1283, offset: 832)
!1283 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_statistics", file: !882, line: 415, elements: !228)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "rt", scope: !1238, file: !882, line: 693, baseType: !1285, size: 384, offset: 1408)
!1285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_rt_entity", file: !882, line: 489, size: 384, elements: !1286)
!1286 = !{!1287, !1288, !1289, !1290, !1291, !1292, !1293}
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "run_list", scope: !1285, file: !882, line: 490, baseType: !201, size: 128)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "timeout", scope: !1285, file: !882, line: 491, baseType: !306, size: 64, offset: 128)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "watchdog_stamp", scope: !1285, file: !882, line: 492, baseType: !306, size: 64, offset: 192)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "time_slice", scope: !1285, file: !882, line: 493, baseType: !7, size: 32, offset: 256)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "on_rq", scope: !1285, file: !882, line: 494, baseType: !298, size: 16, offset: 288)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "on_list", scope: !1285, file: !882, line: 495, baseType: !298, size: 16, offset: 304)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "back", scope: !1285, file: !882, line: 497, baseType: !1294, size: 64, offset: 320)
!1294 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1285, size: 64)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "dl", scope: !1238, file: !882, line: 697, baseType: !1296, size: 1792, offset: 1792)
!1296 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_dl_entity", file: !882, line: 507, size: 1792, elements: !1297)
!1297 = !{!1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1377, !1378}
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "rb_node", scope: !1296, file: !882, line: 508, baseType: !741, size: 192, align: 64)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "dl_runtime", scope: !1296, file: !882, line: 515, baseType: !400, size: 64, offset: 192)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "dl_deadline", scope: !1296, file: !882, line: 516, baseType: !400, size: 64, offset: 256)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "dl_period", scope: !1296, file: !882, line: 517, baseType: !400, size: 64, offset: 320)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "dl_bw", scope: !1296, file: !882, line: 518, baseType: !400, size: 64, offset: 384)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "dl_density", scope: !1296, file: !882, line: 519, baseType: !400, size: 64, offset: 448)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "runtime", scope: !1296, file: !882, line: 526, baseType: !758, size: 64, offset: 512)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "deadline", scope: !1296, file: !882, line: 527, baseType: !400, size: 64, offset: 576)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1296, file: !882, line: 528, baseType: !7, size: 32, offset: 640)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "dl_throttled", scope: !1296, file: !882, line: 554, baseType: !7, size: 1, offset: 672, flags: DIFlagBitField, extraData: i64 672)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "dl_yielded", scope: !1296, file: !882, line: 555, baseType: !7, size: 1, offset: 673, flags: DIFlagBitField, extraData: i64 672)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "dl_non_contending", scope: !1296, file: !882, line: 556, baseType: !7, size: 1, offset: 674, flags: DIFlagBitField, extraData: i64 672)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "dl_overrun", scope: !1296, file: !882, line: 557, baseType: !7, size: 1, offset: 675, flags: DIFlagBitField, extraData: i64 672)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "dl_timer", scope: !1296, file: !882, line: 563, baseType: !1312, size: 512, offset: 704)
!1312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hrtimer", file: !20, line: 118, size: 512, elements: !1313)
!1313 = !{!1314, !1322, !1323, !1328, !1371, !1374, !1375, !1376}
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !1312, file: !20, line: 119, baseType: !1315, size: 256)
!1315 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timerqueue_node", file: !1316, line: 9, size: 256, elements: !1317)
!1316 = !DIFile(filename: "./include/linux/timerqueue.h", directory: "/home/lizy2001/genbc/linux")
!1317 = !{!1318, !1319}
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !1315, file: !1316, line: 10, baseType: !741, size: 192, align: 64)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "expires", scope: !1315, file: !1316, line: 11, baseType: !1320, size: 64, offset: 192)
!1320 = !DIDerivedType(tag: DW_TAG_typedef, name: "ktime_t", file: !1321, line: 29, baseType: !758)
!1321 = !DIFile(filename: "./include/linux/ktime.h", directory: "/home/lizy2001/genbc/linux")
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "_softexpires", scope: !1312, file: !20, line: 120, baseType: !1320, size: 64, offset: 256)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !1312, file: !20, line: 121, baseType: !1324, size: 64, offset: 320)
!1324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1325, size: 64)
!1325 = !DISubroutineType(types: !1326)
!1326 = !{!19, !1327}
!1327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1312, size: 64)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1312, file: !20, line: 122, baseType: !1329, size: 64, offset: 384)
!1329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1330, size: 64)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hrtimer_clock_base", file: !20, line: 159, size: 512, align: 512, elements: !1331)
!1331 = !{!1332, !1352, !1353, !1356, !1361, !1362, !1366, !1370}
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "cpu_base", scope: !1330, file: !20, line: 160, baseType: !1333, size: 64)
!1333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1334, size: 64)
!1334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hrtimer_cpu_base", file: !20, line: 214, size: 4608, align: 512, elements: !1335)
!1335 = !{!1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348}
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1334, file: !20, line: 215, baseType: !761)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "cpu", scope: !1334, file: !20, line: 216, baseType: !7, size: 32)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "active_bases", scope: !1334, file: !20, line: 217, baseType: !7, size: 32, offset: 32)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "clock_was_set_seq", scope: !1334, file: !20, line: 218, baseType: !7, size: 32, offset: 64)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "hres_active", scope: !1334, file: !20, line: 219, baseType: !7, size: 1, offset: 96, flags: DIFlagBitField, extraData: i64 96)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "in_hrtirq", scope: !1334, file: !20, line: 220, baseType: !7, size: 1, offset: 97, flags: DIFlagBitField, extraData: i64 96)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "hang_detected", scope: !1334, file: !20, line: 221, baseType: !7, size: 1, offset: 98, flags: DIFlagBitField, extraData: i64 96)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "softirq_activated", scope: !1334, file: !20, line: 222, baseType: !7, size: 1, offset: 99, flags: DIFlagBitField, extraData: i64 96)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "expires_next", scope: !1334, file: !20, line: 233, baseType: !1320, size: 64, offset: 128)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "next_timer", scope: !1334, file: !20, line: 234, baseType: !1327, size: 64, offset: 192)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "softirq_expires_next", scope: !1334, file: !20, line: 235, baseType: !1320, size: 64, offset: 256)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "softirq_next_timer", scope: !1334, file: !20, line: 236, baseType: !1327, size: 64, offset: 320)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "clock_base", scope: !1334, file: !20, line: 237, baseType: !1349, size: 4096, offset: 512)
!1349 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1330, size: 4096, elements: !1350)
!1350 = !{!1351}
!1351 = !DISubrange(count: 8)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1330, file: !20, line: 161, baseType: !7, size: 32, offset: 64)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "clockid", scope: !1330, file: !20, line: 162, baseType: !1354, size: 32, offset: 96)
!1354 = !DIDerivedType(tag: DW_TAG_typedef, name: "clockid_t", file: !181, line: 27, baseType: !1355)
!1355 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_clockid_t", file: !289, line: 96, baseType: !240)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1330, file: !20, line: 163, baseType: !1357, size: 32, offset: 128)
!1357 = !DIDerivedType(tag: DW_TAG_typedef, name: "seqcount_raw_spinlock_t", file: !371, line: 276, baseType: !1358)
!1358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "seqcount_raw_spinlock", file: !371, line: 276, size: 32, elements: !1359)
!1359 = !{!1360}
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "seqcount", scope: !1358, file: !371, line: 276, baseType: !375, size: 32)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "running", scope: !1330, file: !20, line: 164, baseType: !1327, size: 64, offset: 192)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !1330, file: !20, line: 165, baseType: !1363, size: 128, offset: 256)
!1363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timerqueue_head", file: !1316, line: 14, size: 128, elements: !1364)
!1364 = !{!1365}
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "rb_root", scope: !1363, file: !1316, line: 15, baseType: !733, size: 128)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "get_time", scope: !1330, file: !20, line: 166, baseType: !1367, size: 64, offset: 384)
!1367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1368, size: 64)
!1368 = !DISubroutineType(types: !1369)
!1369 = !{!1320}
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1330, file: !20, line: 167, baseType: !1320, size: 64, offset: 448)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1312, file: !20, line: 123, baseType: !1372, size: 8, offset: 448)
!1372 = !DIDerivedType(tag: DW_TAG_typedef, name: "u8", file: !153, line: 17, baseType: !1373)
!1373 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u8", file: !155, line: 21, baseType: !406)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "is_rel", scope: !1312, file: !20, line: 124, baseType: !1372, size: 8, offset: 456)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "is_soft", scope: !1312, file: !20, line: 125, baseType: !1372, size: 8, offset: 464)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "is_hard", scope: !1312, file: !20, line: 126, baseType: !1372, size: 8, offset: 472)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "inactive_timer", scope: !1296, file: !882, line: 572, baseType: !1312, size: 512, offset: 1216)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "pi_se", scope: !1296, file: !882, line: 580, baseType: !1379, size: 64, offset: 1728)
!1379 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1296, size: 64)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "policy", scope: !1238, file: !882, line: 721, baseType: !7, size: 32, offset: 3584)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "nr_cpus_allowed", scope: !1238, file: !882, line: 722, baseType: !240, size: 32, offset: 3616)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "cpus_ptr", scope: !1238, file: !882, line: 723, baseType: !1383, size: 64, offset: 3648)
!1383 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1384, size: 64)
!1384 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1385)
!1385 = !DIDerivedType(tag: DW_TAG_typedef, name: "cpumask_t", file: !1386, line: 17, baseType: !1387)
!1386 = !DIFile(filename: "./include/linux/cpumask.h", directory: "/home/lizy2001/genbc/linux")
!1387 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cpumask", file: !1386, line: 17, size: 64, elements: !1388)
!1388 = !{!1389}
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1387, file: !1386, line: 17, baseType: !1390, size: 64)
!1390 = !DICompositeType(tag: DW_TAG_array_type, baseType: !306, size: 64, elements: !1391)
!1391 = !{!1392}
!1392 = !DISubrange(count: 1)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "cpus_mask", scope: !1238, file: !882, line: 724, baseType: !1385, size: 64, offset: 3712)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "sched_info", scope: !1238, file: !882, line: 749, baseType: !1395, offset: 3776)
!1395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_info", file: !882, line: 290, elements: !228)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "tasks", scope: !1238, file: !882, line: 751, baseType: !201, size: 128, offset: 3776)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "mm", scope: !1238, file: !882, line: 757, baseType: !995, size: 64, offset: 3904)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "active_mm", scope: !1238, file: !882, line: 758, baseType: !995, size: 64, offset: 3968)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "vmacache", scope: !1238, file: !882, line: 761, baseType: !1400, size: 320, offset: 4032)
!1400 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vmacache", file: !1172, line: 34, size: 320, elements: !1401)
!1401 = !{!1402, !1403}
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "seqnum", scope: !1400, file: !1172, line: 35, baseType: !400, size: 64)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "vmas", scope: !1400, file: !1172, line: 36, baseType: !1404, size: 256, offset: 64)
!1404 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1002, size: 256, elements: !1176)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "exit_state", scope: !1238, file: !882, line: 766, baseType: !240, size: 32, offset: 4352)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "exit_code", scope: !1238, file: !882, line: 767, baseType: !240, size: 32, offset: 4384)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "exit_signal", scope: !1238, file: !882, line: 768, baseType: !240, size: 32, offset: 4416)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "pdeath_signal", scope: !1238, file: !882, line: 770, baseType: !240, size: 32, offset: 4448)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "jobctl", scope: !1238, file: !882, line: 772, baseType: !306, size: 64, offset: 4480)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1238, file: !882, line: 775, baseType: !7, size: 32, offset: 4544)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "sched_reset_on_fork", scope: !1238, file: !882, line: 778, baseType: !7, size: 1, offset: 4576, flags: DIFlagBitField, extraData: i64 4576)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "sched_contributes_to_load", scope: !1238, file: !882, line: 779, baseType: !7, size: 1, offset: 4577, flags: DIFlagBitField, extraData: i64 4576)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "sched_migrated", scope: !1238, file: !882, line: 780, baseType: !7, size: 1, offset: 4578, flags: DIFlagBitField, extraData: i64 4576)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "sched_remote_wakeup", scope: !1238, file: !882, line: 803, baseType: !7, size: 1, offset: 4608, flags: DIFlagBitField, extraData: i64 4608)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "in_execve", scope: !1238, file: !882, line: 806, baseType: !7, size: 1, offset: 4609, flags: DIFlagBitField, extraData: i64 4608)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "in_iowait", scope: !1238, file: !882, line: 807, baseType: !7, size: 1, offset: 4610, flags: DIFlagBitField, extraData: i64 4608)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "restore_sigmask", scope: !1238, file: !882, line: 809, baseType: !7, size: 1, offset: 4611, flags: DIFlagBitField, extraData: i64 4608)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "brk_randomized", scope: !1238, file: !882, line: 815, baseType: !7, size: 1, offset: 4612, flags: DIFlagBitField, extraData: i64 4608)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "atomic_flags", scope: !1238, file: !882, line: 831, baseType: !306, size: 64, offset: 4672)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "restart_block", scope: !1238, file: !882, line: 833, baseType: !1421, size: 384, offset: 4736)
!1421 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "restart_block", file: !25, line: 25, size: 384, elements: !1422)
!1422 = !{!1423, !1428}
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "fn", scope: !1421, file: !25, line: 26, baseType: !1424, size: 64)
!1424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1425, size: 64)
!1425 = !DISubroutineType(types: !1426)
!1426 = !{!291, !1427}
!1427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1421, size: 64)
!1428 = !DIDerivedType(tag: DW_TAG_member, scope: !1421, file: !25, line: 27, baseType: !1429, size: 320, offset: 64)
!1429 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1421, file: !25, line: 27, size: 320, elements: !1430)
!1430 = !{!1431, !1441, !1468}
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "futex", scope: !1429, file: !25, line: 36, baseType: !1432, size: 320)
!1432 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1429, file: !25, line: 29, size: 320, elements: !1433)
!1433 = !{!1434, !1436, !1437, !1438, !1439, !1440}
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "uaddr", scope: !1432, file: !25, line: 30, baseType: !1435, size: 64)
!1435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !152, size: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1432, file: !25, line: 31, baseType: !152, size: 32, offset: 64)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1432, file: !25, line: 32, baseType: !152, size: 32, offset: 96)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "bitset", scope: !1432, file: !25, line: 33, baseType: !152, size: 32, offset: 128)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !1432, file: !25, line: 34, baseType: !400, size: 64, offset: 192)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "uaddr2", scope: !1432, file: !25, line: 35, baseType: !1435, size: 64, offset: 256)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "nanosleep", scope: !1429, file: !25, line: 46, baseType: !1442, size: 192)
!1442 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1429, file: !25, line: 38, size: 192, elements: !1443)
!1443 = !{!1444, !1445, !1446, !1467}
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "clockid", scope: !1442, file: !25, line: 39, baseType: !1354, size: 32)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1442, file: !25, line: 40, baseType: !24, size: 32, offset: 32)
!1446 = !DIDerivedType(tag: DW_TAG_member, scope: !1442, file: !25, line: 41, baseType: !1447, size: 64, offset: 64)
!1447 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1442, file: !25, line: 41, size: 64, elements: !1448)
!1448 = !{!1449, !1457}
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "rmtp", scope: !1447, file: !25, line: 42, baseType: !1450, size: 64)
!1450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1451, size: 64)
!1451 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__kernel_timespec", file: !1452, line: 7, size: 128, elements: !1453)
!1452 = !DIFile(filename: "./include/uapi/linux/time_types.h", directory: "/home/lizy2001/genbc/linux")
!1453 = !{!1454, !1456}
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1451, file: !1452, line: 8, baseType: !1455, size: 64)
!1455 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_time64_t", file: !289, line: 93, baseType: !510)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1451, file: !1452, line: 9, baseType: !510, size: 64, offset: 64)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "compat_rmtp", scope: !1447, file: !25, line: 43, baseType: !1458, size: 64)
!1458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1459, size: 64)
!1459 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "old_timespec32", file: !1460, line: 7, size: 64, elements: !1461)
!1460 = !DIFile(filename: "./include/vdso/time32.h", directory: "/home/lizy2001/genbc/linux")
!1461 = !{!1462, !1466}
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1459, file: !1460, line: 8, baseType: !1463, size: 32)
!1463 = !DIDerivedType(tag: DW_TAG_typedef, name: "old_time32_t", file: !1460, line: 5, baseType: !1464)
!1464 = !DIDerivedType(tag: DW_TAG_typedef, name: "s32", file: !153, line: 20, baseType: !1465)
!1465 = !DIDerivedType(tag: DW_TAG_typedef, name: "__s32", file: !155, line: 26, baseType: !240)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1459, file: !1460, line: 9, baseType: !1464, size: 32, offset: 32)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "expires", scope: !1442, file: !25, line: 45, baseType: !400, size: 64, offset: 128)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "poll", scope: !1429, file: !25, line: 54, baseType: !1469, size: 256)
!1469 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1429, file: !25, line: 48, size: 256, elements: !1470)
!1470 = !{!1471, !1474, !1475, !1476, !1477}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "ufds", scope: !1469, file: !25, line: 49, baseType: !1472, size: 64)
!1472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1473, size: 64)
!1473 = !DICompositeType(tag: DW_TAG_structure_type, name: "pollfd", file: !25, line: 14, flags: DIFlagFwdDecl)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "nfds", scope: !1469, file: !25, line: 50, baseType: !240, size: 32, offset: 64)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "has_timeout", scope: !1469, file: !25, line: 51, baseType: !240, size: 32, offset: 96)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1469, file: !25, line: 52, baseType: !306, size: 64, offset: 128)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1469, file: !25, line: 53, baseType: !306, size: 64, offset: 192)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !1238, file: !882, line: 835, baseType: !1479, size: 32, offset: 5120)
!1479 = !DIDerivedType(tag: DW_TAG_typedef, name: "pid_t", file: !181, line: 22, baseType: !1480)
!1480 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_pid_t", file: !289, line: 28, baseType: !240)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "tgid", scope: !1238, file: !882, line: 836, baseType: !1479, size: 32, offset: 5152)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "stack_canary", scope: !1238, file: !882, line: 840, baseType: !306, size: 64, offset: 5184)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "real_parent", scope: !1238, file: !882, line: 849, baseType: !1237, size: 64, offset: 5248)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !1238, file: !882, line: 852, baseType: !1237, size: 64, offset: 5312)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !1238, file: !882, line: 857, baseType: !201, size: 128, offset: 5376)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "sibling", scope: !1238, file: !882, line: 858, baseType: !201, size: 128, offset: 5504)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "group_leader", scope: !1238, file: !882, line: 859, baseType: !1237, size: 64, offset: 5632)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "ptraced", scope: !1238, file: !882, line: 867, baseType: !201, size: 128, offset: 5696)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace_entry", scope: !1238, file: !882, line: 868, baseType: !201, size: 128, offset: 5824)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "thread_pid", scope: !1238, file: !882, line: 871, baseType: !1491, size: 64, offset: 5952)
!1491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1492, size: 64)
!1492 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pid", file: !53, line: 59, size: 768, elements: !1493)
!1493 = !{!1494, !1495, !1496, !1497, !1499, !1500, !1507, !1508}
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1492, file: !53, line: 61, baseType: !1250, size: 32)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1492, file: !53, line: 62, baseType: !7, size: 32, offset: 32)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1492, file: !53, line: 63, baseType: !214, offset: 64)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "tasks", scope: !1492, file: !53, line: 65, baseType: !1498, size: 256, offset: 64)
!1498 = !DICompositeType(tag: DW_TAG_array_type, baseType: !615, size: 256, elements: !1176)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "inodes", scope: !1492, file: !53, line: 66, baseType: !615, size: 64, offset: 320)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "wait_pidfd", scope: !1492, file: !53, line: 68, baseType: !1501, size: 128, offset: 384)
!1501 = !DIDerivedType(tag: DW_TAG_typedef, name: "wait_queue_head_t", file: !1502, line: 40, baseType: !1503)
!1502 = !DIFile(filename: "./include/linux/wait.h", directory: "/home/lizy2001/genbc/linux")
!1503 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wait_queue_head", file: !1502, line: 36, size: 128, elements: !1504)
!1504 = !{!1505, !1506}
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1503, file: !1502, line: 37, baseType: !214)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1503, file: !1502, line: 38, baseType: !201, size: 128)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !1492, file: !53, line: 69, baseType: !348, size: 128, align: 64, offset: 512)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "numbers", scope: !1492, file: !53, line: 70, baseType: !1509, size: 128, offset: 640)
!1509 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1510, size: 128, elements: !1391)
!1510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "upid", file: !53, line: 54, size: 128, elements: !1511)
!1511 = !{!1512, !1513}
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "nr", scope: !1510, file: !53, line: 55, baseType: !240, size: 32)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "ns", scope: !1510, file: !53, line: 56, baseType: !1514, size: 64, offset: 64)
!1514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1515, size: 64)
!1515 = !DICompositeType(tag: DW_TAG_structure_type, name: "pid_namespace", file: !53, line: 56, flags: DIFlagFwdDecl)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "pid_links", scope: !1238, file: !882, line: 872, baseType: !1517, size: 512, offset: 6016)
!1517 = !DICompositeType(tag: DW_TAG_array_type, baseType: !619, size: 512, elements: !1176)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "thread_group", scope: !1238, file: !882, line: 873, baseType: !201, size: 128, offset: 6528)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "thread_node", scope: !1238, file: !882, line: 874, baseType: !201, size: 128, offset: 6656)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "vfork_done", scope: !1238, file: !882, line: 876, baseType: !1521, size: 64, offset: 6784)
!1521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1522, size: 64)
!1522 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "completion", file: !1523, line: 26, size: 192, elements: !1524)
!1523 = !DIFile(filename: "./include/linux/completion.h", directory: "/home/lizy2001/genbc/linux")
!1524 = !{!1525, !1526}
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !1522, file: !1523, line: 27, baseType: !7, size: 32)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "wait", scope: !1522, file: !1523, line: 28, baseType: !1527, size: 128, offset: 64)
!1527 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "swait_queue_head", file: !1528, line: 43, size: 128, elements: !1529)
!1528 = !DIFile(filename: "./include/linux/swait.h", directory: "/home/lizy2001/genbc/linux")
!1529 = !{!1530, !1531}
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1527, file: !1528, line: 44, baseType: !761)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "task_list", scope: !1527, file: !1528, line: 45, baseType: !201, size: 128)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "set_child_tid", scope: !1238, file: !882, line: 879, baseType: !685, size: 64, offset: 6848)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "clear_child_tid", scope: !1238, file: !882, line: 882, baseType: !685, size: 64, offset: 6912)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "utime", scope: !1238, file: !882, line: 884, baseType: !400, size: 64, offset: 6976)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "stime", scope: !1238, file: !882, line: 885, baseType: !400, size: 64, offset: 7040)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "gtime", scope: !1238, file: !882, line: 890, baseType: !400, size: 64, offset: 7104)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "prev_cputime", scope: !1238, file: !882, line: 891, baseType: !1538, size: 128, offset: 7168)
!1538 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "prev_cputime", file: !882, line: 242, size: 128, elements: !1539)
!1539 = !{!1540, !1541, !1542}
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "utime", scope: !1538, file: !882, line: 244, baseType: !400, size: 64)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "stime", scope: !1538, file: !882, line: 245, baseType: !400, size: 64, offset: 64)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1538, file: !882, line: 246, baseType: !761, offset: 128)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "nvcsw", scope: !1238, file: !882, line: 900, baseType: !306, size: 64, offset: 7296)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "nivcsw", scope: !1238, file: !882, line: 901, baseType: !306, size: 64, offset: 7360)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "start_time", scope: !1238, file: !882, line: 904, baseType: !400, size: 64, offset: 7424)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "start_boottime", scope: !1238, file: !882, line: 907, baseType: !400, size: 64, offset: 7488)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "min_flt", scope: !1238, file: !882, line: 910, baseType: !306, size: 64, offset: 7552)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "maj_flt", scope: !1238, file: !882, line: 911, baseType: !306, size: 64, offset: 7616)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "posix_cputimers", scope: !1238, file: !882, line: 914, baseType: !1550, size: 640, offset: 7680)
!1550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "posix_cputimers", file: !1551, line: 123, size: 640, elements: !1552)
!1551 = !DIFile(filename: "./include/linux/posix-timers.h", directory: "/home/lizy2001/genbc/linux")
!1552 = !{!1553, !1559, !1560}
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "bases", scope: !1550, file: !1551, line: 124, baseType: !1554, size: 576)
!1554 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1555, size: 576, elements: !257)
!1555 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "posix_cputimer_base", file: !1551, line: 108, size: 192, elements: !1556)
!1556 = !{!1557, !1558}
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "nextevt", scope: !1555, file: !1551, line: 109, baseType: !400, size: 64)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "tqhead", scope: !1555, file: !1551, line: 110, baseType: !1363, size: 128, offset: 64)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "timers_active", scope: !1550, file: !1551, line: 125, baseType: !7, size: 32, offset: 576)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "expiry_active", scope: !1550, file: !1551, line: 126, baseType: !7, size: 32, offset: 608)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "posix_cputimers_work", scope: !1238, file: !882, line: 917, baseType: !1562, size: 192, offset: 8320)
!1562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "posix_cputimers_work", file: !1551, line: 134, size: 192, elements: !1563)
!1563 = !{!1564, !1565}
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "work", scope: !1562, file: !1551, line: 135, baseType: !348, size: 128, align: 64)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "scheduled", scope: !1562, file: !1551, line: 136, baseType: !7, size: 32, offset: 128)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "ptracer_cred", scope: !1238, file: !882, line: 923, baseType: !1567, size: 64, offset: 8512)
!1567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1568, size: 64)
!1568 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1569)
!1569 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cred", file: !1570, line: 111, size: 1280, elements: !1571)
!1570 = !DIFile(filename: "./include/linux/cred.h", directory: "/home/lizy2001/genbc/linux")
!1571 = !{!1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1591, !1592, !1593, !1594, !1595, !1596, !1703, !1704, !1705, !1706, !1732, !1735, !1745}
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !1569, file: !1570, line: 112, baseType: !728, size: 32)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1569, file: !1570, line: 120, baseType: !414, size: 32, offset: 32)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !1569, file: !1570, line: 121, baseType: !422, size: 32, offset: 64)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "suid", scope: !1569, file: !1570, line: 122, baseType: !414, size: 32, offset: 96)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "sgid", scope: !1569, file: !1570, line: 123, baseType: !422, size: 32, offset: 128)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "euid", scope: !1569, file: !1570, line: 124, baseType: !414, size: 32, offset: 160)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "egid", scope: !1569, file: !1570, line: 125, baseType: !422, size: 32, offset: 192)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "fsuid", scope: !1569, file: !1570, line: 126, baseType: !414, size: 32, offset: 224)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "fsgid", scope: !1569, file: !1570, line: 127, baseType: !422, size: 32, offset: 256)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "securebits", scope: !1569, file: !1570, line: 128, baseType: !7, size: 32, offset: 288)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "cap_inheritable", scope: !1569, file: !1570, line: 129, baseType: !1583, size: 64, offset: 320)
!1583 = !DIDerivedType(tag: DW_TAG_typedef, name: "kernel_cap_t", file: !1584, line: 26, baseType: !1585)
!1584 = !DIFile(filename: "./include/linux/capability.h", directory: "/home/lizy2001/genbc/linux")
!1585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernel_cap_struct", file: !1584, line: 24, size: 64, elements: !1586)
!1586 = !{!1587}
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "cap", scope: !1585, file: !1584, line: 25, baseType: !1588, size: 64)
!1588 = !DICompositeType(tag: DW_TAG_array_type, baseType: !154, size: 64, elements: !1589)
!1589 = !{!1590}
!1590 = !DISubrange(count: 2)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "cap_permitted", scope: !1569, file: !1570, line: 130, baseType: !1583, size: 64, offset: 384)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "cap_effective", scope: !1569, file: !1570, line: 131, baseType: !1583, size: 64, offset: 448)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "cap_bset", scope: !1569, file: !1570, line: 132, baseType: !1583, size: 64, offset: 512)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "cap_ambient", scope: !1569, file: !1570, line: 133, baseType: !1583, size: 64, offset: 576)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "jit_keyring", scope: !1569, file: !1570, line: 135, baseType: !406, size: 8, offset: 640)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "session_keyring", scope: !1569, file: !1570, line: 137, baseType: !1597, size: 64, offset: 704)
!1597 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1598, size: 64)
!1598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "key", file: !1599, line: 189, size: 1664, elements: !1600)
!1599 = !DIFile(filename: "./include/linux/key.h", directory: "/home/lizy2001/genbc/linux")
!1600 = !{!1601, !1602, !1605, !1610, !1611, !1614, !1615, !1620, !1621, !1622, !1623, !1625, !1626, !1627, !1628, !1629, !1667, !1688}
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !1598, file: !1599, line: 190, baseType: !1250, size: 32)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "serial", scope: !1598, file: !1599, line: 191, baseType: !1603, size: 32, offset: 32)
!1603 = !DIDerivedType(tag: DW_TAG_typedef, name: "key_serial_t", file: !1599, line: 28, baseType: !1604)
!1604 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !181, line: 98, baseType: !1464)
!1605 = !DIDerivedType(tag: DW_TAG_member, scope: !1598, file: !1599, line: 192, baseType: !1606, size: 192, offset: 64)
!1606 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1598, file: !1599, line: 192, size: 192, elements: !1607)
!1607 = !{!1608, !1609}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "graveyard_link", scope: !1606, file: !1599, line: 193, baseType: !201, size: 128)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "serial_node", scope: !1606, file: !1599, line: 194, baseType: !741, size: 192, align: 64)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "sem", scope: !1598, file: !1599, line: 199, baseType: !748, size: 256, offset: 256)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "user", scope: !1598, file: !1599, line: 200, baseType: !1612, size: 64, offset: 512)
!1612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1613, size: 64)
!1613 = !DICompositeType(tag: DW_TAG_structure_type, name: "key_user", file: !1599, line: 200, flags: DIFlagFwdDecl)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "security", scope: !1598, file: !1599, line: 201, baseType: !330, size: 64, offset: 576)
!1615 = !DIDerivedType(tag: DW_TAG_member, scope: !1598, file: !1599, line: 202, baseType: !1616, size: 64, offset: 640)
!1616 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1598, file: !1599, line: 202, size: 64, elements: !1617)
!1617 = !{!1618, !1619}
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "expiry", scope: !1616, file: !1599, line: 203, baseType: !516, size: 64)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "revoked_at", scope: !1616, file: !1599, line: 204, baseType: !516, size: 64)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "last_used_at", scope: !1598, file: !1599, line: 206, baseType: !516, size: 64, offset: 704)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1598, file: !1599, line: 207, baseType: !414, size: 32, offset: 768)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !1598, file: !1599, line: 208, baseType: !422, size: 32, offset: 800)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "perm", scope: !1598, file: !1599, line: 209, baseType: !1624, size: 32, offset: 832)
!1624 = !DIDerivedType(tag: DW_TAG_typedef, name: "key_perm_t", file: !1599, line: 31, baseType: !536)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "quotalen", scope: !1598, file: !1599, line: 210, baseType: !298, size: 16, offset: 864)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "datalen", scope: !1598, file: !1599, line: 211, baseType: !298, size: 16, offset: 880)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1598, file: !1599, line: 215, baseType: !1226, size: 16, offset: 896)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1598, file: !1599, line: 222, baseType: !306, size: 64, offset: 960)
!1629 = !DIDerivedType(tag: DW_TAG_member, scope: !1598, file: !1599, line: 239, baseType: !1630, size: 320, offset: 1024)
!1630 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1598, file: !1599, line: 239, size: 320, elements: !1631)
!1631 = !{!1632, !1659}
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "index_key", scope: !1630, file: !1599, line: 240, baseType: !1633, size: 320)
!1633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "keyring_index_key", file: !1599, line: 108, size: 320, elements: !1634)
!1634 = !{!1635, !1636, !1648, !1651, !1658}
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1633, file: !1599, line: 110, baseType: !306, size: 64)
!1636 = !DIDerivedType(tag: DW_TAG_member, scope: !1633, file: !1599, line: 111, baseType: !1637, size: 64, offset: 64)
!1637 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1633, file: !1599, line: 111, size: 64, elements: !1638)
!1638 = !{!1639, !1647}
!1639 = !DIDerivedType(tag: DW_TAG_member, scope: !1637, file: !1599, line: 112, baseType: !1640, size: 64)
!1640 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1637, file: !1599, line: 112, size: 64, elements: !1641)
!1641 = !{!1642, !1643}
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "desc_len", scope: !1640, file: !1599, line: 114, baseType: !840, size: 16)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "desc", scope: !1640, file: !1599, line: 115, baseType: !1644, size: 48, offset: 16)
!1644 = !DICompositeType(tag: DW_TAG_array_type, baseType: !149, size: 48, elements: !1645)
!1645 = !{!1646}
!1646 = !DISubrange(count: 6)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1637, file: !1599, line: 121, baseType: !306, size: 64)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1633, file: !1599, line: 123, baseType: !1649, size: 64, offset: 128)
!1649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1650, size: 64)
!1650 = !DICompositeType(tag: DW_TAG_structure_type, name: "key_type", file: !1599, line: 96, flags: DIFlagFwdDecl)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "domain_tag", scope: !1633, file: !1599, line: 124, baseType: !1652, size: 64, offset: 192)
!1652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1653, size: 64)
!1653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "key_tag", file: !1599, line: 102, size: 192, elements: !1654)
!1654 = !{!1655, !1656, !1657}
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !1653, file: !1599, line: 103, baseType: !348, size: 128, align: 64)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !1653, file: !1599, line: 104, baseType: !1250, size: 32, offset: 128)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "removed", scope: !1653, file: !1599, line: 105, baseType: !180, size: 8, offset: 160)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "description", scope: !1633, file: !1599, line: 125, baseType: !147, size: 64, offset: 256)
!1659 = !DIDerivedType(tag: DW_TAG_member, scope: !1630, file: !1599, line: 241, baseType: !1660, size: 320)
!1660 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1630, file: !1599, line: 241, size: 320, elements: !1661)
!1661 = !{!1662, !1663, !1664, !1665, !1666}
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1660, file: !1599, line: 242, baseType: !306, size: 64)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "len_desc", scope: !1660, file: !1599, line: 243, baseType: !306, size: 64, offset: 64)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1660, file: !1599, line: 244, baseType: !1649, size: 64, offset: 128)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "domain_tag", scope: !1660, file: !1599, line: 245, baseType: !1652, size: 64, offset: 192)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "description", scope: !1660, file: !1599, line: 246, baseType: !256, size: 64, offset: 256)
!1667 = !DIDerivedType(tag: DW_TAG_member, scope: !1598, file: !1599, line: 254, baseType: !1668, size: 256, offset: 1344)
!1668 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1598, file: !1599, line: 254, size: 256, elements: !1669)
!1669 = !{!1670, !1676}
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "payload", scope: !1668, file: !1599, line: 255, baseType: !1671, size: 256)
!1671 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "key_payload", file: !1599, line: 128, size: 256, elements: !1672)
!1672 = !{!1673, !1674}
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "rcu_data0", scope: !1671, file: !1599, line: 129, baseType: !330, size: 64)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1671, file: !1599, line: 130, baseType: !1675, size: 256)
!1675 = !DICompositeType(tag: DW_TAG_array_type, baseType: !330, size: 256, elements: !1176)
!1676 = !DIDerivedType(tag: DW_TAG_member, scope: !1668, file: !1599, line: 256, baseType: !1677, size: 256)
!1677 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1668, file: !1599, line: 256, size: 256, elements: !1678)
!1678 = !{!1679, !1680}
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "name_link", scope: !1677, file: !1599, line: 258, baseType: !201, size: 128)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "keys", scope: !1677, file: !1599, line: 259, baseType: !1681, size: 128, offset: 128)
!1681 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "assoc_array", file: !1682, line: 22, size: 128, elements: !1683)
!1682 = !DIFile(filename: "./include/linux/assoc_array.h", directory: "/home/lizy2001/genbc/linux")
!1683 = !{!1684, !1687}
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !1681, file: !1682, line: 23, baseType: !1685, size: 64)
!1685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1686, size: 64)
!1686 = !DICompositeType(tag: DW_TAG_structure_type, name: "assoc_array_ptr", file: !1682, line: 23, flags: DIFlagFwdDecl)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "nr_leaves_on_tree", scope: !1681, file: !1682, line: 24, baseType: !306, size: 64, offset: 64)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_link", scope: !1598, file: !1599, line: 274, baseType: !1689, size: 64, offset: 1600)
!1689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1690, size: 64)
!1690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "key_restriction", file: !1599, line: 170, size: 192, elements: !1691)
!1691 = !{!1692, !1701, !1702}
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "check", scope: !1690, file: !1599, line: 171, baseType: !1693, size: 64)
!1693 = !DIDerivedType(tag: DW_TAG_typedef, name: "key_restrict_link_func_t", file: !1599, line: 165, baseType: !1694)
!1694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1695, size: 64)
!1695 = !DISubroutineType(types: !1696)
!1696 = !{!240, !1597, !1697, !1699, !1597}
!1697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1698, size: 64)
!1698 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1650)
!1699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1700, size: 64)
!1700 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1671)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1690, file: !1599, line: 172, baseType: !1597, size: 64, offset: 64)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "keytype", scope: !1690, file: !1599, line: 173, baseType: !1649, size: 64, offset: 128)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "process_keyring", scope: !1569, file: !1570, line: 138, baseType: !1597, size: 64, offset: 768)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "thread_keyring", scope: !1569, file: !1570, line: 139, baseType: !1597, size: 64, offset: 832)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "request_key_auth", scope: !1569, file: !1570, line: 140, baseType: !1597, size: 64, offset: 896)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "user", scope: !1569, file: !1570, line: 145, baseType: !1707, size: 64, offset: 960)
!1707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1708, size: 64)
!1708 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "user_struct", file: !1709, line: 13, size: 896, elements: !1710)
!1709 = !DIFile(filename: "./include/linux/sched/user.h", directory: "/home/lizy2001/genbc/linux")
!1710 = !{!1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721}
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1708, file: !1709, line: 14, baseType: !1250, size: 32)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "processes", scope: !1708, file: !1709, line: 15, baseType: !728, size: 32, offset: 32)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "sigpending", scope: !1708, file: !1709, line: 16, baseType: !728, size: 32, offset: 64)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "epoll_watches", scope: !1708, file: !1709, line: 21, baseType: !752, size: 64, offset: 128)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "locked_shm", scope: !1708, file: !1709, line: 27, baseType: !306, size: 64, offset: 192)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "unix_inflight", scope: !1708, file: !1709, line: 28, baseType: !306, size: 64, offset: 256)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "pipe_bufs", scope: !1708, file: !1709, line: 29, baseType: !752, size: 64, offset: 320)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "uidhash_node", scope: !1708, file: !1709, line: 32, baseType: !619, size: 128, offset: 384)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1708, file: !1709, line: 33, baseType: !414, size: 32, offset: 512)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "locked_vm", scope: !1708, file: !1709, line: 37, baseType: !752, size: 64, offset: 576)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "ratelimit", scope: !1708, file: !1709, line: 44, baseType: !1722, size: 256, offset: 640)
!1722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ratelimit_state", file: !1723, line: 15, size: 256, elements: !1724)
!1723 = !DIFile(filename: "./include/linux/ratelimit_types.h", directory: "/home/lizy2001/genbc/linux")
!1724 = !{!1725, !1726, !1727, !1728, !1729, !1730, !1731}
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1722, file: !1723, line: 16, baseType: !761)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "interval", scope: !1722, file: !1723, line: 18, baseType: !240, size: 32)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "burst", scope: !1722, file: !1723, line: 19, baseType: !240, size: 32, offset: 32)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "printed", scope: !1722, file: !1723, line: 20, baseType: !240, size: 32, offset: 64)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "missed", scope: !1722, file: !1723, line: 21, baseType: !240, size: 32, offset: 96)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "begin", scope: !1722, file: !1723, line: 22, baseType: !306, size: 64, offset: 128)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1722, file: !1723, line: 23, baseType: !306, size: 64, offset: 192)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "user_ns", scope: !1569, file: !1570, line: 146, baseType: !1733, size: 64, offset: 1024)
!1733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1734, size: 64)
!1734 = !DICompositeType(tag: DW_TAG_structure_type, name: "user_namespace", file: !415, line: 18, flags: DIFlagFwdDecl)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "group_info", scope: !1569, file: !1570, line: 147, baseType: !1736, size: 64, offset: 1088)
!1736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1737, size: 64)
!1737 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group_info", file: !1570, line: 25, size: 64, elements: !1738)
!1738 = !{!1739, !1740, !1741}
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !1737, file: !1570, line: 26, baseType: !728, size: 32)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "ngroups", scope: !1737, file: !1570, line: 27, baseType: !240, size: 32, offset: 32)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !1737, file: !1570, line: 28, baseType: !1742, offset: 64)
!1742 = !DICompositeType(tag: DW_TAG_array_type, baseType: !422, elements: !1743)
!1743 = !{!1744}
!1744 = !DISubrange(count: 0)
!1745 = !DIDerivedType(tag: DW_TAG_member, scope: !1569, file: !1570, line: 149, baseType: !1746, size: 128, offset: 1152)
!1746 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1569, file: !1570, line: 149, size: 128, elements: !1747)
!1747 = !{!1748, !1749}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "non_rcu", scope: !1746, file: !1570, line: 150, baseType: !240, size: 32)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !1746, file: !1570, line: 151, baseType: !348, size: 128, align: 64)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "real_cred", scope: !1238, file: !882, line: 926, baseType: !1567, size: 64, offset: 8576)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "cred", scope: !1238, file: !882, line: 929, baseType: !1567, size: 64, offset: 8640)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "cached_requested_key", scope: !1238, file: !882, line: 933, baseType: !1597, size: 64, offset: 8704)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "comm", scope: !1238, file: !882, line: 943, baseType: !1754, size: 128, offset: 8768)
!1754 = !DICompositeType(tag: DW_TAG_array_type, baseType: !149, size: 128, elements: !1755)
!1755 = !{!1756}
!1756 = !DISubrange(count: 16)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "nameidata", scope: !1238, file: !882, line: 945, baseType: !1758, size: 64, offset: 8896)
!1758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1759, size: 64)
!1759 = !DICompositeType(tag: DW_TAG_structure_type, name: "nameidata", file: !882, line: 49, flags: DIFlagFwdDecl)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !1238, file: !882, line: 956, baseType: !1761, size: 64, offset: 8960)
!1761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1762, size: 64)
!1762 = !DICompositeType(tag: DW_TAG_structure_type, name: "fs_struct", file: !882, line: 45, flags: DIFlagFwdDecl)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "files", scope: !1238, file: !882, line: 959, baseType: !1764, size: 64, offset: 9024)
!1764 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1765, size: 64)
!1765 = !DICompositeType(tag: DW_TAG_structure_type, name: "files_struct", file: !882, line: 959, flags: DIFlagFwdDecl)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "io_uring", scope: !1238, file: !882, line: 962, baseType: !1767, size: 64, offset: 9088)
!1767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1768, size: 64)
!1768 = !DICompositeType(tag: DW_TAG_structure_type, name: "io_uring_task", file: !882, line: 66, flags: DIFlagFwdDecl)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "nsproxy", scope: !1238, file: !882, line: 966, baseType: !1770, size: 64, offset: 9152)
!1770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1771, size: 64)
!1771 = !DICompositeType(tag: DW_TAG_structure_type, name: "nsproxy", file: !1772, line: 35, flags: DIFlagFwdDecl)
!1772 = !DIFile(filename: "./include/linux/sysctl.h", directory: "/home/lizy2001/genbc/linux")
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "signal", scope: !1238, file: !882, line: 969, baseType: !1774, size: 64, offset: 9216)
!1774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1775, size: 64)
!1775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "signal_struct", file: !1776, line: 82, size: 7296, elements: !1777)
!1776 = !DIFile(filename: "./include/linux/sched/signal.h", directory: "/home/lizy2001/genbc/linux")
!1777 = !{!1778, !1779, !1780, !1781, !1782, !1783, !1784, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1813, !1822, !1823, !1825, !1826, !1827, !1830, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1860, !1861, !1868, !1869, !1870, !1871, !1872, !1873}
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "sigcnt", scope: !1775, file: !1776, line: 83, baseType: !1250, size: 32)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "live", scope: !1775, file: !1776, line: 84, baseType: !728, size: 32, offset: 32)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "nr_threads", scope: !1775, file: !1776, line: 85, baseType: !240, size: 32, offset: 64)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "thread_head", scope: !1775, file: !1776, line: 86, baseType: !201, size: 128, offset: 128)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "wait_chldexit", scope: !1775, file: !1776, line: 88, baseType: !1501, size: 128, offset: 256)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "curr_target", scope: !1775, file: !1776, line: 91, baseType: !1237, size: 64, offset: 384)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "shared_pending", scope: !1775, file: !1776, line: 94, baseType: !1785, size: 192, offset: 448)
!1785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sigpending", file: !1786, line: 30, size: 192, elements: !1787)
!1786 = !DIFile(filename: "./include/linux/signal_types.h", directory: "/home/lizy2001/genbc/linux")
!1787 = !{!1788, !1789}
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1785, file: !1786, line: 31, baseType: !201, size: 128)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "signal", scope: !1785, file: !1786, line: 32, baseType: !1790, size: 64, offset: 128)
!1790 = !DIDerivedType(tag: DW_TAG_typedef, name: "sigset_t", file: !1791, line: 25, baseType: !1792)
!1791 = !DIFile(filename: "./arch/x86/include/asm/signal.h", directory: "/home/lizy2001/genbc/linux")
!1792 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1791, line: 23, size: 64, elements: !1793)
!1793 = !{!1794}
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1792, file: !1791, line: 24, baseType: !1390, size: 64)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "multiprocess", scope: !1775, file: !1776, line: 97, baseType: !615, size: 64, offset: 640)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "group_exit_code", scope: !1775, file: !1776, line: 100, baseType: !240, size: 32, offset: 704)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "notify_count", scope: !1775, file: !1776, line: 106, baseType: !240, size: 32, offset: 736)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "group_exit_task", scope: !1775, file: !1776, line: 107, baseType: !1237, size: 64, offset: 768)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "group_stop_count", scope: !1775, file: !1776, line: 110, baseType: !240, size: 32, offset: 832)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1775, file: !1776, line: 111, baseType: !7, size: 32, offset: 864)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "is_child_subreaper", scope: !1775, file: !1776, line: 122, baseType: !7, size: 1, offset: 896, flags: DIFlagBitField, extraData: i64 896)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "has_child_subreaper", scope: !1775, file: !1776, line: 123, baseType: !7, size: 1, offset: 897, flags: DIFlagBitField, extraData: i64 896)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "posix_timer_id", scope: !1775, file: !1776, line: 128, baseType: !240, size: 32, offset: 928)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "posix_timers", scope: !1775, file: !1776, line: 129, baseType: !201, size: 128, offset: 960)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "real_timer", scope: !1775, file: !1776, line: 132, baseType: !1312, size: 512, offset: 1088)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "it_real_incr", scope: !1775, file: !1776, line: 133, baseType: !1320, size: 64, offset: 1600)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "it", scope: !1775, file: !1776, line: 140, baseType: !1808, size: 256, offset: 1664)
!1808 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1809, size: 256, elements: !1589)
!1809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cpu_itimer", file: !1776, line: 38, size: 128, elements: !1810)
!1810 = !{!1811, !1812}
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "expires", scope: !1809, file: !1776, line: 39, baseType: !400, size: 64)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1809, file: !1776, line: 40, baseType: !400, size: 64, offset: 64)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "cputimer", scope: !1775, file: !1776, line: 146, baseType: !1814, size: 192, offset: 1920)
!1814 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "thread_group_cputimer", file: !1776, line: 66, size: 192, elements: !1815)
!1815 = !{!1816}
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "cputime_atomic", scope: !1814, file: !1776, line: 67, baseType: !1817, size: 192)
!1817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "task_cputime_atomic", file: !1776, line: 47, size: 192, elements: !1818)
!1818 = !{!1819, !1820, !1821}
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "utime", scope: !1817, file: !1776, line: 48, baseType: !754, size: 64)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "stime", scope: !1817, file: !1776, line: 49, baseType: !754, size: 64, offset: 64)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "sum_exec_runtime", scope: !1817, file: !1776, line: 50, baseType: !754, size: 64, offset: 128)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "posix_cputimers", scope: !1775, file: !1776, line: 150, baseType: !1550, size: 640, offset: 2112)
!1823 = !DIDerivedType(tag: DW_TAG_member, name: "pids", scope: !1775, file: !1776, line: 153, baseType: !1824, size: 256, offset: 2752)
!1824 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1491, size: 256, elements: !1176)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "tty_old_pgrp", scope: !1775, file: !1776, line: 159, baseType: !1491, size: 64, offset: 3008)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "leader", scope: !1775, file: !1776, line: 162, baseType: !240, size: 32, offset: 3072)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "tty", scope: !1775, file: !1776, line: 164, baseType: !1828, size: 64, offset: 3136)
!1828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1829, size: 64)
!1829 = !DICompositeType(tag: DW_TAG_structure_type, name: "tty_struct", file: !1776, line: 164, flags: DIFlagFwdDecl)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "stats_lock", scope: !1775, file: !1776, line: 175, baseType: !1831, size: 32, offset: 3200)
!1831 = !DIDerivedType(tag: DW_TAG_typedef, name: "seqlock_t", file: !371, line: 805, baseType: !1832)
!1832 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !371, line: 798, size: 32, elements: !1833)
!1833 = !{!1834, !1835}
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "seqcount", scope: !1832, file: !371, line: 803, baseType: !370, size: 32)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1832, file: !371, line: 804, baseType: !214, offset: 32)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "utime", scope: !1775, file: !1776, line: 176, baseType: !400, size: 64, offset: 3264)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "stime", scope: !1775, file: !1776, line: 176, baseType: !400, size: 64, offset: 3328)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "cutime", scope: !1775, file: !1776, line: 176, baseType: !400, size: 64, offset: 3392)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "cstime", scope: !1775, file: !1776, line: 176, baseType: !400, size: 64, offset: 3456)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "gtime", scope: !1775, file: !1776, line: 177, baseType: !400, size: 64, offset: 3520)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "cgtime", scope: !1775, file: !1776, line: 178, baseType: !400, size: 64, offset: 3584)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "prev_cputime", scope: !1775, file: !1776, line: 179, baseType: !1538, size: 128, offset: 3648)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "nvcsw", scope: !1775, file: !1776, line: 180, baseType: !306, size: 64, offset: 3776)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "nivcsw", scope: !1775, file: !1776, line: 180, baseType: !306, size: 64, offset: 3840)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "cnvcsw", scope: !1775, file: !1776, line: 180, baseType: !306, size: 64, offset: 3904)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "cnivcsw", scope: !1775, file: !1776, line: 180, baseType: !306, size: 64, offset: 3968)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "min_flt", scope: !1775, file: !1776, line: 181, baseType: !306, size: 64, offset: 4032)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "maj_flt", scope: !1775, file: !1776, line: 181, baseType: !306, size: 64, offset: 4096)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "cmin_flt", scope: !1775, file: !1776, line: 181, baseType: !306, size: 64, offset: 4160)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "cmaj_flt", scope: !1775, file: !1776, line: 181, baseType: !306, size: 64, offset: 4224)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "inblock", scope: !1775, file: !1776, line: 182, baseType: !306, size: 64, offset: 4288)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "oublock", scope: !1775, file: !1776, line: 182, baseType: !306, size: 64, offset: 4352)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "cinblock", scope: !1775, file: !1776, line: 182, baseType: !306, size: 64, offset: 4416)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "coublock", scope: !1775, file: !1776, line: 182, baseType: !306, size: 64, offset: 4480)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "maxrss", scope: !1775, file: !1776, line: 183, baseType: !306, size: 64, offset: 4544)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "cmaxrss", scope: !1775, file: !1776, line: 183, baseType: !306, size: 64, offset: 4608)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "ioac", scope: !1775, file: !1776, line: 184, baseType: !1858, offset: 4672)
!1858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "task_io_accounting", file: !1859, line: 12, elements: !228)
!1859 = !DIFile(filename: "./include/linux/task_io_accounting.h", directory: "/home/lizy2001/genbc/linux")
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "sum_sched_runtime", scope: !1775, file: !1776, line: 192, baseType: !402, size: 64, offset: 4672)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "rlim", scope: !1775, file: !1776, line: 203, baseType: !1862, size: 2048, offset: 4736)
!1862 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1863, size: 2048, elements: !1755)
!1863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rlimit", file: !1864, line: 43, size: 128, elements: !1865)
!1864 = !DIFile(filename: "./include/uapi/linux/resource.h", directory: "/home/lizy2001/genbc/linux")
!1865 = !{!1866, !1867}
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_cur", scope: !1863, file: !1864, line: 44, baseType: !305, size: 64)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_max", scope: !1863, file: !1864, line: 45, baseType: !305, size: 64, offset: 64)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "oom_flag_origin", scope: !1775, file: !1776, line: 220, baseType: !180, size: 8, offset: 6784)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "oom_score_adj", scope: !1775, file: !1776, line: 221, baseType: !1226, size: 16, offset: 6800)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "oom_score_adj_min", scope: !1775, file: !1776, line: 222, baseType: !1226, size: 16, offset: 6816)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "oom_mm", scope: !1775, file: !1776, line: 224, baseType: !995, size: 64, offset: 6848)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "cred_guard_mutex", scope: !1775, file: !1776, line: 227, baseType: !1194, size: 192, offset: 6912)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "exec_update_mutex", scope: !1775, file: !1776, line: 233, baseType: !1194, size: 192, offset: 7104)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "sighand", scope: !1238, file: !882, line: 970, baseType: !1875, size: 64, offset: 9280)
!1875 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1876, size: 64)
!1876 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sighand_struct", file: !1776, line: 20, size: 16576, elements: !1877)
!1877 = !{!1878, !1879, !1880, !1881}
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "siglock", scope: !1876, file: !1776, line: 21, baseType: !214)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1876, file: !1776, line: 22, baseType: !1250, size: 32)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "signalfd_wqh", scope: !1876, file: !1776, line: 23, baseType: !1501, size: 128, offset: 64)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "action", scope: !1876, file: !1776, line: 24, baseType: !1882, size: 16384, offset: 192)
!1882 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1883, size: 16384, elements: !261)
!1883 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "k_sigaction", file: !1786, line: 49, size: 256, elements: !1884)
!1884 = !{!1885}
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "sa", scope: !1883, file: !1786, line: 50, baseType: !1886, size: 256)
!1886 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sigaction", file: !1786, line: 35, size: 256, elements: !1887)
!1887 = !{!1888, !1895, !1896, !1902}
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "sa_handler", scope: !1886, file: !1786, line: 37, baseType: !1889, size: 64)
!1889 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sighandler_t", file: !1890, line: 19, baseType: !1891)
!1890 = !DIFile(filename: "./include/uapi/asm-generic/signal-defs.h", directory: "/home/lizy2001/genbc/linux")
!1891 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1892, size: 64)
!1892 = !DIDerivedType(tag: DW_TAG_typedef, name: "__signalfn_t", file: !1890, line: 18, baseType: !1893)
!1893 = !DISubroutineType(types: !1894)
!1894 = !{null, !240}
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "sa_flags", scope: !1886, file: !1786, line: 38, baseType: !306, size: 64, offset: 64)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "sa_restorer", scope: !1886, file: !1786, line: 44, baseType: !1897, size: 64, offset: 128)
!1897 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sigrestore_t", file: !1890, line: 22, baseType: !1898)
!1898 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1899, size: 64)
!1899 = !DIDerivedType(tag: DW_TAG_typedef, name: "__restorefn_t", file: !1890, line: 21, baseType: !1900)
!1900 = !DISubroutineType(types: !1901)
!1901 = !{null}
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "sa_mask", scope: !1886, file: !1786, line: 46, baseType: !1790, size: 64, offset: 192)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "blocked", scope: !1238, file: !882, line: 971, baseType: !1790, size: 64, offset: 9344)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "real_blocked", scope: !1238, file: !882, line: 972, baseType: !1790, size: 64, offset: 9408)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "saved_sigmask", scope: !1238, file: !882, line: 974, baseType: !1790, size: 64, offset: 9472)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "pending", scope: !1238, file: !882, line: 975, baseType: !1785, size: 192, offset: 9536)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "sas_ss_sp", scope: !1238, file: !882, line: 976, baseType: !306, size: 64, offset: 9728)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "sas_ss_size", scope: !1238, file: !882, line: 977, baseType: !303, size: 64, offset: 9792)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "sas_ss_flags", scope: !1238, file: !882, line: 978, baseType: !7, size: 32, offset: 9856)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "task_works", scope: !1238, file: !882, line: 980, baseType: !351, size: 64, offset: 9920)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "seccomp", scope: !1238, file: !882, line: 989, baseType: !1912, size: 128, offset: 9984)
!1912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "seccomp", file: !1913, line: 35, size: 128, elements: !1914)
!1913 = !DIFile(filename: "./include/linux/seccomp.h", directory: "/home/lizy2001/genbc/linux")
!1914 = !{!1915, !1916, !1917}
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1912, file: !1913, line: 36, baseType: !240, size: 32)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "filter_count", scope: !1912, file: !1913, line: 37, baseType: !728, size: 32, offset: 32)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1912, file: !1913, line: 38, baseType: !1918, size: 64, offset: 64)
!1918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1919, size: 64)
!1919 = !DICompositeType(tag: DW_TAG_structure_type, name: "seccomp_filter", file: !1913, line: 23, flags: DIFlagFwdDecl)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "parent_exec_id", scope: !1238, file: !882, line: 992, baseType: !400, size: 64, offset: 10112)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "self_exec_id", scope: !1238, file: !882, line: 993, baseType: !400, size: 64, offset: 10176)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_lock", scope: !1238, file: !882, line: 996, baseType: !214, offset: 10240)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "pi_lock", scope: !1238, file: !882, line: 999, baseType: !761, offset: 10240)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "wake_q", scope: !1238, file: !882, line: 1001, baseType: !1925, size: 64, offset: 10240)
!1925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wake_q_node", file: !882, line: 636, size: 64, elements: !1926)
!1926 = !{!1927}
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1925, file: !882, line: 637, baseType: !1928, size: 64)
!1928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1925, size: 64)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "pi_waiters", scope: !1238, file: !882, line: 1005, baseType: !733, size: 128, offset: 10304)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "pi_top_task", scope: !1238, file: !882, line: 1007, baseType: !1237, size: 64, offset: 10432)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "pi_blocked_on", scope: !1238, file: !882, line: 1009, baseType: !1932, size: 64, offset: 10496)
!1932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1933, size: 64)
!1933 = !DICompositeType(tag: DW_TAG_structure_type, name: "rt_mutex_waiter", file: !882, line: 1009, flags: DIFlagFwdDecl)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "journal_info", scope: !1238, file: !882, line: 1043, baseType: !330, size: 64, offset: 10560)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "bio_list", scope: !1238, file: !882, line: 1046, baseType: !1936, size: 64, offset: 10624)
!1936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1937, size: 64)
!1937 = !DICompositeType(tag: DW_TAG_structure_type, name: "bio_list", file: !882, line: 41, flags: DIFlagFwdDecl)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "plug", scope: !1238, file: !882, line: 1050, baseType: !1939, size: 64, offset: 10688)
!1939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1940, size: 64)
!1940 = !DICompositeType(tag: DW_TAG_structure_type, name: "blk_plug", file: !882, line: 42, flags: DIFlagFwdDecl)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "reclaim_state", scope: !1238, file: !882, line: 1054, baseType: !1942, size: 64, offset: 10752)
!1942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1943, size: 64)
!1943 = !DICompositeType(tag: DW_TAG_structure_type, name: "reclaim_state", file: !882, line: 55, flags: DIFlagFwdDecl)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "backing_dev_info", scope: !1238, file: !882, line: 1056, baseType: !1945, size: 64, offset: 10816)
!1945 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1946, size: 64)
!1946 = !DICompositeType(tag: DW_TAG_structure_type, name: "backing_dev_info", file: !882, line: 40, flags: DIFlagFwdDecl)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "io_context", scope: !1238, file: !882, line: 1058, baseType: !1948, size: 64, offset: 10880)
!1948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1949, size: 64)
!1949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "io_context", file: !1950, line: 99, size: 704, elements: !1951)
!1950 = !DIFile(filename: "./include/linux/iocontext.h", directory: "/home/lizy2001/genbc/linux")
!1951 = !{!1952, !1953, !1954, !1955, !1956, !1957, !1958, !1977, !1978}
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "refcount", scope: !1949, file: !1950, line: 100, baseType: !752, size: 64)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "active_ref", scope: !1949, file: !1950, line: 101, baseType: !728, size: 32, offset: 64)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "nr_tasks", scope: !1949, file: !1950, line: 102, baseType: !728, size: 32, offset: 96)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1949, file: !1950, line: 105, baseType: !214, offset: 128)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "ioprio", scope: !1949, file: !1950, line: 107, baseType: !298, size: 16, offset: 128)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "icq_tree", scope: !1949, file: !1950, line: 109, baseType: !719, size: 128, offset: 192)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "icq_hint", scope: !1949, file: !1950, line: 110, baseType: !1959, size: 64, offset: 320)
!1959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1960, size: 64)
!1960 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "io_cq", file: !1950, line: 73, size: 448, elements: !1961)
!1961 = !{!1962, !1965, !1966, !1971, !1976}
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "q", scope: !1960, file: !1950, line: 74, baseType: !1963, size: 64)
!1963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1964, size: 64)
!1964 = !DICompositeType(tag: DW_TAG_structure_type, name: "request_queue", file: !1950, line: 74, flags: DIFlagFwdDecl)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "ioc", scope: !1960, file: !1950, line: 75, baseType: !1948, size: 64, offset: 64)
!1966 = !DIDerivedType(tag: DW_TAG_member, scope: !1960, file: !1950, line: 83, baseType: !1967, size: 128, offset: 128)
!1967 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1960, file: !1950, line: 83, size: 128, elements: !1968)
!1968 = !{!1969, !1970}
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "q_node", scope: !1967, file: !1950, line: 84, baseType: !201, size: 128)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "__rcu_icq_cache", scope: !1967, file: !1950, line: 85, baseType: !956, size: 64)
!1971 = !DIDerivedType(tag: DW_TAG_member, scope: !1960, file: !1950, line: 87, baseType: !1972, size: 128, offset: 256)
!1972 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1960, file: !1950, line: 87, size: 128, elements: !1973)
!1973 = !{!1974, !1975}
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "ioc_node", scope: !1972, file: !1950, line: 88, baseType: !619, size: 128)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "__rcu_head", scope: !1972, file: !1950, line: 89, baseType: !348, size: 128, align: 64)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1960, file: !1950, line: 92, baseType: !7, size: 32, offset: 384)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "icq_list", scope: !1949, file: !1950, line: 111, baseType: !615, size: 64, offset: 384)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "release_work", scope: !1949, file: !1950, line: 113, baseType: !1979, size: 256, offset: 448)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "work_struct", file: !1980, line: 102, size: 256, elements: !1981)
!1980 = !DIFile(filename: "./include/linux/workqueue.h", directory: "/home/lizy2001/genbc/linux")
!1981 = !{!1982, !1983, !1984}
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1979, file: !1980, line: 103, baseType: !752, size: 64)
!1983 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !1979, file: !1980, line: 104, baseType: !201, size: 128, offset: 64)
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !1979, file: !1980, line: 105, baseType: !1985, size: 64, offset: 192)
!1985 = !DIDerivedType(tag: DW_TAG_typedef, name: "work_func_t", file: !1980, line: 21, baseType: !1986)
!1986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1987, size: 64)
!1987 = !DISubroutineType(types: !1988)
!1988 = !{null, !1989}
!1989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1979, size: 64)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "capture_control", scope: !1238, file: !882, line: 1061, baseType: !1991, size: 64, offset: 10944)
!1991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1992, size: 64)
!1992 = !DICompositeType(tag: DW_TAG_structure_type, name: "capture_control", file: !882, line: 43, flags: DIFlagFwdDecl)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace_message", scope: !1238, file: !882, line: 1064, baseType: !306, size: 64, offset: 11008)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "last_siginfo", scope: !1238, file: !882, line: 1065, baseType: !1995, size: 64, offset: 11072)
!1995 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1996, size: 64)
!1996 = !DIDerivedType(tag: DW_TAG_typedef, name: "kernel_siginfo_t", file: !1786, line: 14, baseType: !1997)
!1997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernel_siginfo", file: !1786, line: 12, size: 384, elements: !1998)
!1998 = !{!1999}
!1999 = !DIDerivedType(tag: DW_TAG_member, scope: !1997, file: !1786, line: 13, baseType: !2000, size: 384)
!2000 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1997, file: !1786, line: 13, size: 384, elements: !2001)
!2001 = !{!2002, !2003, !2004, !2005}
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "si_signo", scope: !2000, file: !1786, line: 13, baseType: !240, size: 32)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "si_errno", scope: !2000, file: !1786, line: 13, baseType: !240, size: 32, offset: 32)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "si_code", scope: !2000, file: !1786, line: 13, baseType: !240, size: 32, offset: 64)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "_sifields", scope: !2000, file: !1786, line: 13, baseType: !2006, size: 256, offset: 128)
!2006 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "__sifields", file: !2007, line: 32, size: 256, elements: !2008)
!2007 = !DIFile(filename: "./include/uapi/asm-generic/siginfo.h", directory: "/home/lizy2001/genbc/linux")
!2008 = !{!2009, !2014, !2027, !2033, !2042, !2062, !2067}
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "_kill", scope: !2006, file: !2007, line: 37, baseType: !2010, size: 64)
!2010 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2006, file: !2007, line: 34, size: 64, elements: !2011)
!2011 = !{!2012, !2013}
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "_pid", scope: !2010, file: !2007, line: 35, baseType: !1480, size: 32)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "_uid", scope: !2010, file: !2007, line: 36, baseType: !420, size: 32, offset: 32)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "_timer", scope: !2006, file: !2007, line: 45, baseType: !2015, size: 192)
!2015 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2006, file: !2007, line: 40, size: 192, elements: !2016)
!2016 = !{!2017, !2019, !2020, !2026}
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "_tid", scope: !2015, file: !2007, line: 41, baseType: !2018, size: 32)
!2018 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_timer_t", file: !289, line: 95, baseType: !240)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "_overrun", scope: !2015, file: !2007, line: 42, baseType: !240, size: 32, offset: 32)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "_sigval", scope: !2015, file: !2007, line: 43, baseType: !2021, size: 64, offset: 64)
!2021 = !DIDerivedType(tag: DW_TAG_typedef, name: "sigval_t", file: !2007, line: 11, baseType: !2022)
!2022 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "sigval", file: !2007, line: 8, size: 64, elements: !2023)
!2023 = !{!2024, !2025}
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "sival_int", scope: !2022, file: !2007, line: 9, baseType: !240, size: 32)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "sival_ptr", scope: !2022, file: !2007, line: 10, baseType: !330, size: 64)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "_sys_private", scope: !2015, file: !2007, line: 44, baseType: !240, size: 32, offset: 128)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "_rt", scope: !2006, file: !2007, line: 52, baseType: !2028, size: 128)
!2028 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2006, file: !2007, line: 48, size: 128, elements: !2029)
!2029 = !{!2030, !2031, !2032}
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "_pid", scope: !2028, file: !2007, line: 49, baseType: !1480, size: 32)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "_uid", scope: !2028, file: !2007, line: 50, baseType: !420, size: 32, offset: 32)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "_sigval", scope: !2028, file: !2007, line: 51, baseType: !2021, size: 64, offset: 64)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "_sigchld", scope: !2006, file: !2007, line: 61, baseType: !2034, size: 256)
!2034 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2006, file: !2007, line: 55, size: 256, elements: !2035)
!2035 = !{!2036, !2037, !2038, !2039, !2041}
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "_pid", scope: !2034, file: !2007, line: 56, baseType: !1480, size: 32)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "_uid", scope: !2034, file: !2007, line: 57, baseType: !420, size: 32, offset: 32)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "_status", scope: !2034, file: !2007, line: 58, baseType: !240, size: 32, offset: 64)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "_utime", scope: !2034, file: !2007, line: 59, baseType: !2040, size: 64, offset: 128)
!2040 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_clock_t", file: !289, line: 94, baseType: !290)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "_stime", scope: !2034, file: !2007, line: 60, baseType: !2040, size: 64, offset: 192)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "_sigfault", scope: !2006, file: !2007, line: 95, baseType: !2043, size: 256)
!2043 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2006, file: !2007, line: 64, size: 256, elements: !2044)
!2044 = !{!2045, !2046}
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "_addr", scope: !2043, file: !2007, line: 65, baseType: !330, size: 64)
!2046 = !DIDerivedType(tag: DW_TAG_member, scope: !2043, file: !2007, line: 77, baseType: !2047, size: 192, offset: 64)
!2047 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2043, file: !2007, line: 77, size: 192, elements: !2048)
!2048 = !{!2049, !2050, !2057}
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "_addr_lsb", scope: !2047, file: !2007, line: 82, baseType: !1226, size: 16)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "_addr_bnd", scope: !2047, file: !2007, line: 88, baseType: !2051, size: 192)
!2051 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2047, file: !2007, line: 84, size: 192, elements: !2052)
!2052 = !{!2053, !2055, !2056}
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "_dummy_bnd", scope: !2051, file: !2007, line: 85, baseType: !2054, size: 64)
!2054 = !DICompositeType(tag: DW_TAG_array_type, baseType: !149, size: 64, elements: !1350)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "_lower", scope: !2051, file: !2007, line: 86, baseType: !330, size: 64, offset: 64)
!2056 = !DIDerivedType(tag: DW_TAG_member, name: "_upper", scope: !2051, file: !2007, line: 87, baseType: !330, size: 64, offset: 128)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "_addr_pkey", scope: !2047, file: !2007, line: 93, baseType: !2058, size: 96)
!2058 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2047, file: !2007, line: 90, size: 96, elements: !2059)
!2059 = !{!2060, !2061}
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "_dummy_pkey", scope: !2058, file: !2007, line: 91, baseType: !2054, size: 64)
!2061 = !DIDerivedType(tag: DW_TAG_member, name: "_pkey", scope: !2058, file: !2007, line: 92, baseType: !154, size: 32, offset: 64)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "_sigpoll", scope: !2006, file: !2007, line: 101, baseType: !2063, size: 128)
!2063 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2006, file: !2007, line: 98, size: 128, elements: !2064)
!2064 = !{!2065, !2066}
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "_band", scope: !2063, file: !2007, line: 99, baseType: !291, size: 64)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "_fd", scope: !2063, file: !2007, line: 100, baseType: !240, size: 32, offset: 64)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "_sigsys", scope: !2006, file: !2007, line: 108, baseType: !2068, size: 128)
!2068 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2006, file: !2007, line: 104, size: 128, elements: !2069)
!2069 = !{!2070, !2071, !2072}
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "_call_addr", scope: !2068, file: !2007, line: 105, baseType: !330, size: 64)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "_syscall", scope: !2068, file: !2007, line: 106, baseType: !240, size: 32, offset: 64)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "_arch", scope: !2068, file: !2007, line: 107, baseType: !7, size: 32, offset: 96)
!2073 = !DIDerivedType(tag: DW_TAG_member, name: "ioac", scope: !1238, file: !882, line: 1067, baseType: !1858, offset: 11136)
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "robust_list", scope: !1238, file: !882, line: 1099, baseType: !2075, size: 64, offset: 11136)
!2075 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2076, size: 64)
!2076 = !DICompositeType(tag: DW_TAG_structure_type, name: "robust_list_head", file: !882, line: 56, flags: DIFlagFwdDecl)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "pi_state_list", scope: !1238, file: !882, line: 1103, baseType: !201, size: 128, offset: 11200)
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "pi_state_cache", scope: !1238, file: !882, line: 1104, baseType: !2079, size: 64, offset: 11328)
!2079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2080, size: 64)
!2080 = !DICompositeType(tag: DW_TAG_structure_type, name: "futex_pi_state", file: !882, line: 46, flags: DIFlagFwdDecl)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "futex_exit_mutex", scope: !1238, file: !882, line: 1105, baseType: !1194, size: 192, offset: 11392)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "futex_state", scope: !1238, file: !882, line: 1106, baseType: !7, size: 32, offset: 11584)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "perf_event_ctxp", scope: !1238, file: !882, line: 1109, baseType: !2084, size: 128, offset: 11648)
!2084 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2085, size: 128, elements: !1589)
!2085 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2086, size: 64)
!2086 = !DICompositeType(tag: DW_TAG_structure_type, name: "perf_event_context", file: !882, line: 51, flags: DIFlagFwdDecl)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "perf_event_mutex", scope: !1238, file: !882, line: 1110, baseType: !1194, size: 192, offset: 11776)
!2088 = !DIDerivedType(tag: DW_TAG_member, name: "perf_event_list", scope: !1238, file: !882, line: 1111, baseType: !201, size: 128, offset: 11968)
!2089 = !DIDerivedType(tag: DW_TAG_member, name: "rseq", scope: !1238, file: !882, line: 1173, baseType: !2090, size: 64, offset: 12096)
!2090 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2091, size: 64)
!2091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rseq", file: !2092, line: 62, size: 256, align: 256, elements: !2093)
!2092 = !DIFile(filename: "./include/uapi/linux/rseq.h", directory: "/home/lizy2001/genbc/linux")
!2093 = !{!2094, !2095, !2096, !2101}
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "cpu_id_start", scope: !2091, file: !2092, line: 75, baseType: !154, size: 32)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "cpu_id", scope: !2091, file: !2092, line: 90, baseType: !154, size: 32, offset: 32)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "rseq_cs", scope: !2091, file: !2092, line: 124, baseType: !2097, size: 64, offset: 64)
!2097 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2091, file: !2092, line: 109, size: 64, elements: !2098)
!2098 = !{!2099, !2100}
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "ptr64", scope: !2097, file: !2092, line: 110, baseType: !401, size: 64)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2097, file: !2092, line: 112, baseType: !401, size: 64)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2091, file: !2092, line: 144, baseType: !154, size: 32, offset: 128)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "rseq_sig", scope: !1238, file: !882, line: 1174, baseType: !152, size: 32, offset: 12160)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "rseq_event_mask", scope: !1238, file: !882, line: 1179, baseType: !306, size: 64, offset: 12224)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "tlb_ubc", scope: !1238, file: !882, line: 1182, baseType: !2105, size: 128, offset: 12288)
!2105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tlbflush_unmap_batch", file: !1172, line: 76, size: 128, elements: !2106)
!2106 = !{!2107, !2112, !2113}
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !2105, file: !1172, line: 85, baseType: !2108, size: 64)
!2108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "arch_tlbflush_unmap_batch", file: !2109, line: 7, size: 64, elements: !2110)
!2109 = !DIFile(filename: "./arch/x86/include/asm/tlbbatch.h", directory: "/home/lizy2001/genbc/linux")
!2110 = !{!2111}
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "cpumask", scope: !2108, file: !2109, line: 12, baseType: !1387, size: 64)
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "flush_required", scope: !2105, file: !1172, line: 88, baseType: !180, size: 8, offset: 64)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "writable", scope: !2105, file: !1172, line: 95, baseType: !180, size: 8, offset: 72)
!2114 = !DIDerivedType(tag: DW_TAG_member, scope: !1238, file: !882, line: 1184, baseType: !2115, size: 128, offset: 12416)
!2115 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1238, file: !882, line: 1184, size: 128, elements: !2116)
!2116 = !{!2117, !2118}
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "rcu_users", scope: !2115, file: !882, line: 1185, baseType: !1250, size: 32)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !2115, file: !882, line: 1186, baseType: !348, size: 128, align: 64)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "splice_pipe", scope: !1238, file: !882, line: 1190, baseType: !880, size: 64, offset: 12544)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "task_frag", scope: !1238, file: !882, line: 1192, baseType: !2121, size: 128, offset: 12608)
!2121 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "page_frag", file: !1172, line: 64, size: 128, elements: !2122)
!2122 = !{!2123, !2124, !2125}
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "page", scope: !2121, file: !1172, line: 65, baseType: !701, size: 64)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2121, file: !1172, line: 67, baseType: !154, size: 32, offset: 64)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2121, file: !1172, line: 68, baseType: !154, size: 32, offset: 96)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "nr_dirtied", scope: !1238, file: !882, line: 1206, baseType: !240, size: 32, offset: 12736)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "nr_dirtied_pause", scope: !1238, file: !882, line: 1207, baseType: !240, size: 32, offset: 12768)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "dirty_paused_when", scope: !1238, file: !882, line: 1209, baseType: !306, size: 64, offset: 12800)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "timer_slack_ns", scope: !1238, file: !882, line: 1219, baseType: !400, size: 64, offset: 12864)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "default_timer_slack_ns", scope: !1238, file: !882, line: 1220, baseType: !400, size: 64, offset: 12928)
!2131 = !DIDerivedType(tag: DW_TAG_member, name: "pagefault_disabled", scope: !1238, file: !882, line: 1317, baseType: !240, size: 32, offset: 12992)
!2132 = !DIDerivedType(tag: DW_TAG_member, name: "oom_reaper_list", scope: !1238, file: !882, line: 1319, baseType: !1237, size: 64, offset: 13056)
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "stack_vm_area", scope: !1238, file: !882, line: 1322, baseType: !2134, size: 64, offset: 13120)
!2134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2135, size: 64)
!2135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vm_struct", file: !2136, line: 56, size: 512, elements: !2137)
!2136 = !DIFile(filename: "./include/linux/vmalloc.h", directory: "/home/lizy2001/genbc/linux")
!2137 = !{!2138, !2139, !2140, !2141, !2142, !2143, !2144, !2146}
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2135, file: !2136, line: 57, baseType: !2134, size: 64)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !2135, file: !2136, line: 58, baseType: !330, size: 64, offset: 64)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2135, file: !2136, line: 59, baseType: !306, size: 64, offset: 128)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2135, file: !2136, line: 60, baseType: !306, size: 64, offset: 192)
!2142 = !DIDerivedType(tag: DW_TAG_member, name: "pages", scope: !2135, file: !2136, line: 61, baseType: !801, size: 64, offset: 256)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "nr_pages", scope: !2135, file: !2136, line: 62, baseType: !7, size: 32, offset: 320)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "phys_addr", scope: !2135, file: !2136, line: 63, baseType: !2145, size: 64, offset: 384)
!2145 = !DIDerivedType(tag: DW_TAG_typedef, name: "phys_addr_t", file: !181, line: 153, baseType: !400)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !2135, file: !2136, line: 64, baseType: !189, size: 64, offset: 448)
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "stack_refcount", scope: !1238, file: !882, line: 1326, baseType: !1250, size: 32, offset: 13184)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "mce_vaddr", scope: !1238, file: !882, line: 1342, baseType: !330, size: 64, offset: 13248)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "mce_kflags", scope: !1238, file: !882, line: 1343, baseType: !401, size: 64, offset: 13312)
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "mce_addr", scope: !1238, file: !882, line: 1344, baseType: !400, size: 64, offset: 13376)
!2151 = !DIDerivedType(tag: DW_TAG_member, name: "mce_ripv", scope: !1238, file: !882, line: 1345, baseType: !401, size: 1, offset: 13440, flags: DIFlagBitField, extraData: i64 13440)
!2152 = !DIDerivedType(tag: DW_TAG_member, name: "mce_whole_page", scope: !1238, file: !882, line: 1346, baseType: !401, size: 1, offset: 13441, flags: DIFlagBitField, extraData: i64 13440)
!2153 = !DIDerivedType(tag: DW_TAG_member, name: "__mce_reserved", scope: !1238, file: !882, line: 1347, baseType: !401, size: 62, offset: 13442, flags: DIFlagBitField, extraData: i64 13440)
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "mce_kill_me", scope: !1238, file: !882, line: 1348, baseType: !348, size: 128, align: 64, offset: 13504)
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "thread", scope: !1238, file: !882, line: 1358, baseType: !2156, size: 34816, offset: 13824)
!2156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "thread_struct", file: !2157, line: 485, size: 34816, elements: !2158)
!2157 = !DIFile(filename: "./arch/x86/include/asm/processor.h", directory: "/home/lizy2001/genbc/linux")
!2158 = !{!2159, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2188, !2189, !2190, !2191, !2192, !2193, !2196, !2197, !2198}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "tls_array", scope: !2156, file: !2157, line: 487, baseType: !2160, size: 192)
!2160 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2161, size: 192, elements: !257)
!2161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "desc_struct", file: !2162, line: 16, size: 64, elements: !2163)
!2162 = !DIFile(filename: "./arch/x86/include/asm/desc_defs.h", directory: "/home/lizy2001/genbc/linux")
!2163 = !{!2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176}
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "limit0", scope: !2161, file: !2162, line: 17, baseType: !840, size: 16)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "base0", scope: !2161, file: !2162, line: 18, baseType: !840, size: 16, offset: 16)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "base1", scope: !2161, file: !2162, line: 19, baseType: !840, size: 8, offset: 32, flags: DIFlagBitField, extraData: i64 32)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2161, file: !2162, line: 19, baseType: !840, size: 4, offset: 40, flags: DIFlagBitField, extraData: i64 32)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !2161, file: !2162, line: 19, baseType: !840, size: 1, offset: 44, flags: DIFlagBitField, extraData: i64 32)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "dpl", scope: !2161, file: !2162, line: 19, baseType: !840, size: 2, offset: 45, flags: DIFlagBitField, extraData: i64 32)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !2161, file: !2162, line: 19, baseType: !840, size: 1, offset: 47, flags: DIFlagBitField, extraData: i64 32)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "limit1", scope: !2161, file: !2162, line: 20, baseType: !840, size: 4, offset: 48, flags: DIFlagBitField, extraData: i64 32)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "avl", scope: !2161, file: !2162, line: 20, baseType: !840, size: 1, offset: 52, flags: DIFlagBitField, extraData: i64 32)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "l", scope: !2161, file: !2162, line: 20, baseType: !840, size: 1, offset: 53, flags: DIFlagBitField, extraData: i64 32)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "d", scope: !2161, file: !2162, line: 20, baseType: !840, size: 1, offset: 54, flags: DIFlagBitField, extraData: i64 32)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2161, file: !2162, line: 20, baseType: !840, size: 1, offset: 55, flags: DIFlagBitField, extraData: i64 32)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "base2", scope: !2161, file: !2162, line: 20, baseType: !840, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 32)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "sp", scope: !2156, file: !2157, line: 491, baseType: !306, size: 64, offset: 192)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !2156, file: !2157, line: 495, baseType: !298, size: 16, offset: 256)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !2156, file: !2157, line: 496, baseType: !298, size: 16, offset: 272)
!2180 = !DIDerivedType(tag: DW_TAG_member, name: "fsindex", scope: !2156, file: !2157, line: 497, baseType: !298, size: 16, offset: 288)
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "gsindex", scope: !2156, file: !2157, line: 498, baseType: !298, size: 16, offset: 304)
!2182 = !DIDerivedType(tag: DW_TAG_member, name: "fsbase", scope: !2156, file: !2157, line: 502, baseType: !306, size: 64, offset: 320)
!2183 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !2156, file: !2157, line: 503, baseType: !306, size: 64, offset: 384)
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace_bps", scope: !2156, file: !2157, line: 514, baseType: !2185, size: 256, offset: 448)
!2185 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2186, size: 256, elements: !1176)
!2186 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2187, size: 64)
!2187 = !DICompositeType(tag: DW_TAG_structure_type, name: "perf_event", file: !2157, line: 483, flags: DIFlagFwdDecl)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_dr6", scope: !2156, file: !2157, line: 516, baseType: !306, size: 64, offset: 704)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace_dr7", scope: !2156, file: !2157, line: 518, baseType: !306, size: 64, offset: 768)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "cr2", scope: !2156, file: !2157, line: 520, baseType: !306, size: 64, offset: 832)
!2191 = !DIDerivedType(tag: DW_TAG_member, name: "trap_nr", scope: !2156, file: !2157, line: 521, baseType: !306, size: 64, offset: 896)
!2192 = !DIDerivedType(tag: DW_TAG_member, name: "error_code", scope: !2156, file: !2157, line: 522, baseType: !306, size: 64, offset: 960)
!2193 = !DIDerivedType(tag: DW_TAG_member, name: "io_bitmap", scope: !2156, file: !2157, line: 528, baseType: !2194, size: 64, offset: 1024)
!2194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2195, size: 64)
!2195 = !DICompositeType(tag: DW_TAG_structure_type, name: "io_bitmap", file: !2157, line: 10, flags: DIFlagFwdDecl)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "iopl_emul", scope: !2156, file: !2157, line: 535, baseType: !306, size: 64, offset: 1088)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "sig_on_uaccess_err", scope: !2156, file: !2157, line: 537, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "fpu", scope: !2156, file: !2157, line: 540, baseType: !2199, size: 33280, offset: 1536)
!2199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fpu", file: !2200, line: 317, size: 33280, elements: !2201)
!2200 = !DIFile(filename: "./arch/x86/include/asm/fpu/types.h", directory: "/home/lizy2001/genbc/linux")
!2201 = !{!2202, !2203, !2204}
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "last_cpu", scope: !2199, file: !2200, line: 330, baseType: !7, size: 32)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "avx512_timestamp", scope: !2199, file: !2200, line: 337, baseType: !306, size: 64, offset: 64)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2199, file: !2200, line: 348, baseType: !2205, size: 32768, offset: 512)
!2205 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "fpregs_state", file: !2200, line: 304, size: 32768, elements: !2206)
!2206 = !{!2207, !2222, !2261, !2311, !2324}
!2207 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !2205, file: !2200, line: 305, baseType: !2208, size: 896)
!2208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fregs_state", file: !2200, line: 12, size: 896, elements: !2209)
!2209 = !{!2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2221}
!2210 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !2208, file: !2200, line: 13, baseType: !152, size: 32)
!2211 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !2208, file: !2200, line: 14, baseType: !152, size: 32, offset: 32)
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "twd", scope: !2208, file: !2200, line: 15, baseType: !152, size: 32, offset: 64)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "fip", scope: !2208, file: !2200, line: 16, baseType: !152, size: 32, offset: 96)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "fcs", scope: !2208, file: !2200, line: 17, baseType: !152, size: 32, offset: 128)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !2208, file: !2200, line: 18, baseType: !152, size: 32, offset: 160)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "fos", scope: !2208, file: !2200, line: 19, baseType: !152, size: 32, offset: 192)
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "st_space", scope: !2208, file: !2200, line: 22, baseType: !2218, size: 640, offset: 224)
!2218 = !DICompositeType(tag: DW_TAG_array_type, baseType: !152, size: 640, elements: !2219)
!2219 = !{!2220}
!2220 = !DISubrange(count: 20)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !2208, file: !2200, line: 25, baseType: !152, size: 32, offset: 864)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave", scope: !2205, file: !2200, line: 306, baseType: !2223, size: 4096, align: 128)
!2223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fxregs_state", file: !2200, line: 34, size: 4096, align: 128, elements: !2224)
!2224 = !{!2225, !2226, !2227, !2228, !2229, !2244, !2245, !2246, !2250, !2252, !2256}
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !2223, file: !2200, line: 35, baseType: !840, size: 16)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !2223, file: !2200, line: 36, baseType: !840, size: 16, offset: 16)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "twd", scope: !2223, file: !2200, line: 37, baseType: !840, size: 16, offset: 32)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !2223, file: !2200, line: 38, baseType: !840, size: 16, offset: 48)
!2229 = !DIDerivedType(tag: DW_TAG_member, scope: !2223, file: !2200, line: 39, baseType: !2230, size: 128, offset: 64)
!2230 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2223, file: !2200, line: 39, size: 128, elements: !2231)
!2231 = !{!2232, !2237}
!2232 = !DIDerivedType(tag: DW_TAG_member, scope: !2230, file: !2200, line: 40, baseType: !2233, size: 128)
!2233 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2230, file: !2200, line: 40, size: 128, elements: !2234)
!2234 = !{!2235, !2236}
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !2233, file: !2200, line: 41, baseType: !400, size: 64)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "rdp", scope: !2233, file: !2200, line: 42, baseType: !400, size: 64, offset: 64)
!2237 = !DIDerivedType(tag: DW_TAG_member, scope: !2230, file: !2200, line: 44, baseType: !2238, size: 128)
!2238 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2230, file: !2200, line: 44, size: 128, elements: !2239)
!2239 = !{!2240, !2241, !2242, !2243}
!2240 = !DIDerivedType(tag: DW_TAG_member, name: "fip", scope: !2238, file: !2200, line: 45, baseType: !152, size: 32)
!2241 = !DIDerivedType(tag: DW_TAG_member, name: "fcs", scope: !2238, file: !2200, line: 46, baseType: !152, size: 32, offset: 32)
!2242 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !2238, file: !2200, line: 47, baseType: !152, size: 32, offset: 64)
!2243 = !DIDerivedType(tag: DW_TAG_member, name: "fos", scope: !2238, file: !2200, line: 48, baseType: !152, size: 32, offset: 96)
!2244 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !2223, file: !2200, line: 51, baseType: !152, size: 32, offset: 192)
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !2223, file: !2200, line: 52, baseType: !152, size: 32, offset: 224)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "st_space", scope: !2223, file: !2200, line: 55, baseType: !2247, size: 1024, offset: 256)
!2247 = !DICompositeType(tag: DW_TAG_array_type, baseType: !152, size: 1024, elements: !2248)
!2248 = !{!2249}
!2249 = !DISubrange(count: 32)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "xmm_space", scope: !2223, file: !2200, line: 58, baseType: !2251, size: 2048, offset: 1280)
!2251 = !DICompositeType(tag: DW_TAG_array_type, baseType: !152, size: 2048, elements: !261)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "padding", scope: !2223, file: !2200, line: 60, baseType: !2253, size: 384, offset: 3328)
!2253 = !DICompositeType(tag: DW_TAG_array_type, baseType: !152, size: 384, elements: !2254)
!2254 = !{!2255}
!2255 = !DISubrange(count: 12)
!2256 = !DIDerivedType(tag: DW_TAG_member, scope: !2223, file: !2200, line: 62, baseType: !2257, size: 384, offset: 3712)
!2257 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2223, file: !2200, line: 62, size: 384, elements: !2258)
!2258 = !{!2259, !2260}
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "padding1", scope: !2257, file: !2200, line: 63, baseType: !2253, size: 384)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "sw_reserved", scope: !2257, file: !2200, line: 64, baseType: !2253, size: 384)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "soft", scope: !2205, file: !2200, line: 307, baseType: !2262, size: 1088)
!2262 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "swregs_state", file: !2200, line: 79, size: 1088, elements: !2263)
!2263 = !{!2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2310}
!2264 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !2262, file: !2200, line: 80, baseType: !152, size: 32)
!2265 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !2262, file: !2200, line: 81, baseType: !152, size: 32, offset: 32)
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "twd", scope: !2262, file: !2200, line: 82, baseType: !152, size: 32, offset: 64)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "fip", scope: !2262, file: !2200, line: 83, baseType: !152, size: 32, offset: 96)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "fcs", scope: !2262, file: !2200, line: 84, baseType: !152, size: 32, offset: 128)
!2269 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !2262, file: !2200, line: 85, baseType: !152, size: 32, offset: 160)
!2270 = !DIDerivedType(tag: DW_TAG_member, name: "fos", scope: !2262, file: !2200, line: 86, baseType: !152, size: 32, offset: 192)
!2271 = !DIDerivedType(tag: DW_TAG_member, name: "st_space", scope: !2262, file: !2200, line: 88, baseType: !2218, size: 640, offset: 224)
!2272 = !DIDerivedType(tag: DW_TAG_member, name: "ftop", scope: !2262, file: !2200, line: 89, baseType: !1372, size: 8, offset: 864)
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !2262, file: !2200, line: 90, baseType: !1372, size: 8, offset: 872)
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "lookahead", scope: !2262, file: !2200, line: 91, baseType: !1372, size: 8, offset: 880)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "no_update", scope: !2262, file: !2200, line: 92, baseType: !1372, size: 8, offset: 888)
!2276 = !DIDerivedType(tag: DW_TAG_member, name: "rm", scope: !2262, file: !2200, line: 93, baseType: !1372, size: 8, offset: 896)
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "alimit", scope: !2262, file: !2200, line: 94, baseType: !1372, size: 8, offset: 904)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2262, file: !2200, line: 95, baseType: !2279, size: 64, offset: 960)
!2279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2280, size: 64)
!2280 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "math_emu_info", file: !2281, line: 11, size: 128, elements: !2282)
!2281 = !DIFile(filename: "./arch/x86/include/asm/math_emu.h", directory: "/home/lizy2001/genbc/linux")
!2282 = !{!2283, !2284}
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "___orig_eip", scope: !2280, file: !2281, line: 12, baseType: !291, size: 64)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "regs", scope: !2280, file: !2281, line: 13, baseType: !2285, size: 64, offset: 64)
!2285 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2286, size: 64)
!2286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_regs", file: !2287, line: 56, size: 1344, elements: !2288)
!2287 = !DIFile(filename: "./arch/x86/include/asm/ptrace.h", directory: "/home/lizy2001/genbc/linux")
!2288 = !{!2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309}
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !2286, file: !2287, line: 61, baseType: !306, size: 64)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !2286, file: !2287, line: 62, baseType: !306, size: 64, offset: 64)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !2286, file: !2287, line: 63, baseType: !306, size: 64, offset: 128)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !2286, file: !2287, line: 64, baseType: !306, size: 64, offset: 192)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "bp", scope: !2286, file: !2287, line: 65, baseType: !306, size: 64, offset: 256)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "bx", scope: !2286, file: !2287, line: 66, baseType: !306, size: 64, offset: 320)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !2286, file: !2287, line: 68, baseType: !306, size: 64, offset: 384)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !2286, file: !2287, line: 69, baseType: !306, size: 64, offset: 448)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !2286, file: !2287, line: 70, baseType: !306, size: 64, offset: 512)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !2286, file: !2287, line: 71, baseType: !306, size: 64, offset: 576)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "ax", scope: !2286, file: !2287, line: 72, baseType: !306, size: 64, offset: 640)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "cx", scope: !2286, file: !2287, line: 73, baseType: !306, size: 64, offset: 704)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "dx", scope: !2286, file: !2287, line: 74, baseType: !306, size: 64, offset: 768)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "si", scope: !2286, file: !2287, line: 75, baseType: !306, size: 64, offset: 832)
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "di", scope: !2286, file: !2287, line: 76, baseType: !306, size: 64, offset: 896)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "orig_ax", scope: !2286, file: !2287, line: 81, baseType: !306, size: 64, offset: 960)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !2286, file: !2287, line: 83, baseType: !306, size: 64, offset: 1024)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !2286, file: !2287, line: 84, baseType: !306, size: 64, offset: 1088)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2286, file: !2287, line: 85, baseType: !306, size: 64, offset: 1152)
!2308 = !DIDerivedType(tag: DW_TAG_member, name: "sp", scope: !2286, file: !2287, line: 86, baseType: !306, size: 64, offset: 1216)
!2309 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !2286, file: !2287, line: 87, baseType: !306, size: 64, offset: 1280)
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "entry_eip", scope: !2262, file: !2200, line: 96, baseType: !152, size: 32, offset: 1024)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "xsave", scope: !2205, file: !2200, line: 308, baseType: !2312, size: 4608, align: 512)
!2312 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "xregs_state", file: !2200, line: 289, size: 4608, align: 512, elements: !2313)
!2313 = !{!2314, !2315, !2322}
!2314 = !DIDerivedType(tag: DW_TAG_member, name: "i387", scope: !2312, file: !2200, line: 290, baseType: !2223, size: 4096, align: 128)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2312, file: !2200, line: 291, baseType: !2316, size: 512, offset: 4096)
!2316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "xstate_header", file: !2200, line: 268, size: 512, elements: !2317)
!2317 = !{!2318, !2319, !2320}
!2318 = !DIDerivedType(tag: DW_TAG_member, name: "xfeatures", scope: !2316, file: !2200, line: 269, baseType: !400, size: 64)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "xcomp_bv", scope: !2316, file: !2200, line: 270, baseType: !400, size: 64, offset: 64)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "reserved", scope: !2316, file: !2200, line: 271, baseType: !2321, size: 384, offset: 128)
!2321 = !DICompositeType(tag: DW_TAG_array_type, baseType: !400, size: 384, elements: !1645)
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "extended_state_area", scope: !2312, file: !2200, line: 292, baseType: !2323, offset: 4608)
!2323 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, elements: !1743)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "__padding", scope: !2205, file: !2200, line: 309, baseType: !2325, size: 32768)
!2325 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 32768, elements: !2326)
!2326 = !{!2327}
!2327 = !DISubrange(count: 4096)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1234, file: !703, line: 378, baseType: !2329, size: 64, offset: 64)
!2329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1234, size: 64)
!2330 = !DIDerivedType(tag: DW_TAG_member, name: "startup", scope: !1230, file: !703, line: 384, baseType: !1522, size: 192, offset: 192)
!2331 = !DIDerivedType(tag: DW_TAG_member, name: "ioctx_lock", scope: !999, file: !703, line: 500, baseType: !214, offset: 6656)
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "ioctx_table", scope: !999, file: !703, line: 501, baseType: !2333, size: 64, offset: 6656)
!2333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2334, size: 64)
!2334 = !DICompositeType(tag: DW_TAG_structure_type, name: "kioctx_table", file: !703, line: 387, flags: DIFlagFwdDecl)
!2335 = !DIDerivedType(tag: DW_TAG_member, name: "user_ns", scope: !999, file: !703, line: 516, baseType: !1733, size: 64, offset: 6720)
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "exe_file", scope: !999, file: !703, line: 519, baseType: !335, size: 64, offset: 6784)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "notifier_subscriptions", scope: !999, file: !703, line: 521, baseType: !2338, size: 64, offset: 6848)
!2338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2339, size: 64)
!2339 = !DICompositeType(tag: DW_TAG_structure_type, name: "mmu_notifier_subscriptions", file: !703, line: 521, flags: DIFlagFwdDecl)
!2340 = !DIDerivedType(tag: DW_TAG_member, name: "tlb_flush_pending", scope: !999, file: !703, line: 545, baseType: !728, size: 32, offset: 6912)
!2341 = !DIDerivedType(tag: DW_TAG_member, name: "tlb_flush_batched", scope: !999, file: !703, line: 548, baseType: !180, size: 8, offset: 6944)
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "uprobes_state", scope: !999, file: !703, line: 550, baseType: !2343, offset: 6952)
!2343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uprobes_state", file: !2344, line: 142, elements: !228)
!2344 = !DIFile(filename: "./include/linux/uprobes.h", directory: "/home/lizy2001/genbc/linux")
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "async_put_work", scope: !999, file: !703, line: 554, baseType: !1979, size: 256, offset: 6976)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "pasid", scope: !999, file: !703, line: 557, baseType: !152, size: 32, offset: 7232)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "cpu_bitmap", scope: !996, file: !703, line: 565, baseType: !2348, offset: 7296)
!2348 = !DICompositeType(tag: DW_TAG_array_type, baseType: !306, elements: !2349)
!2349 = !{!2350}
!2350 = !DISubrange(count: -1)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "pt_frag_refcount", scope: !992, file: !703, line: 151, baseType: !728, size: 32)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "ptl", scope: !985, file: !703, line: 156, baseType: !214, offset: 256)
!2353 = !DIDerivedType(tag: DW_TAG_member, scope: !707, file: !703, line: 159, baseType: !2354, size: 128)
!2354 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !707, file: !703, line: 159, size: 128, elements: !2355)
!2355 = !{!2356, !2420}
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "pgmap", scope: !2354, file: !703, line: 161, baseType: !2357, size: 64)
!2357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2358, size: 64)
!2358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pagemap", file: !31, line: 110, size: 1152, elements: !2359)
!2359 = !{!2360, !2370, !2391, !2392, !2393, !2394, !2395, !2407, !2408, !2409}
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "altmap", scope: !2358, file: !31, line: 111, baseType: !2361, size: 384)
!2361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vmem_altmap", file: !31, line: 19, size: 384, elements: !2362)
!2362 = !{!2363, !2365, !2366, !2367, !2368, !2369}
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "base_pfn", scope: !2361, file: !31, line: 20, baseType: !2364, size: 64)
!2364 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !306)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "end_pfn", scope: !2361, file: !31, line: 21, baseType: !2364, size: 64, offset: 64)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "reserve", scope: !2361, file: !31, line: 22, baseType: !2364, size: 64, offset: 128)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !2361, file: !31, line: 23, baseType: !306, size: 64, offset: 192)
!2368 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2361, file: !31, line: 24, baseType: !306, size: 64, offset: 256)
!2369 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2361, file: !31, line: 25, baseType: !306, size: 64, offset: 320)
!2370 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2358, file: !31, line: 112, baseType: !2371, size: 64, offset: 384)
!2371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2372, size: 64)
!2372 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "percpu_ref", file: !2373, line: 105, size: 128, elements: !2374)
!2373 = !DIFile(filename: "./include/linux/percpu-refcount.h", directory: "/home/lizy2001/genbc/linux")
!2374 = !{!2375, !2376}
!2375 = !DIDerivedType(tag: DW_TAG_member, name: "percpu_count_ptr", scope: !2372, file: !2373, line: 110, baseType: !306, size: 64)
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2372, file: !2373, line: 118, baseType: !2377, size: 64, offset: 64)
!2377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2378, size: 64)
!2378 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "percpu_ref_data", file: !2373, line: 95, size: 448, elements: !2379)
!2379 = !{!2380, !2381, !2386, !2387, !2388, !2389, !2390}
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2378, file: !2373, line: 96, baseType: !752, size: 64)
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !2378, file: !2373, line: 97, baseType: !2382, size: 64, offset: 64)
!2382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2383, size: 64)
!2383 = !DIDerivedType(tag: DW_TAG_typedef, name: "percpu_ref_func_t", file: !2373, line: 60, baseType: !2384)
!2384 = !DISubroutineType(types: !2385)
!2385 = !{null, !2371}
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "confirm_switch", scope: !2378, file: !2373, line: 98, baseType: !2382, size: 64, offset: 128)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "force_atomic", scope: !2378, file: !2373, line: 99, baseType: !180, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "allow_reinit", scope: !2378, file: !2373, line: 100, baseType: !180, size: 1, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !2378, file: !2373, line: 101, baseType: !348, size: 128, align: 64, offset: 256)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !2378, file: !2373, line: 102, baseType: !2371, size: 64, offset: 384)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "internal_ref", scope: !2358, file: !31, line: 113, baseType: !2372, size: 128, offset: 448)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !2358, file: !31, line: 114, baseType: !1522, size: 192, offset: 576)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2358, file: !31, line: 115, baseType: !30, size: 32, offset: 768)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2358, file: !31, line: 116, baseType: !7, size: 32, offset: 800)
!2395 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2358, file: !31, line: 117, baseType: !2396, size: 64, offset: 832)
!2396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2397, size: 64)
!2397 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2398)
!2398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pagemap_ops", file: !31, line: 67, size: 256, elements: !2399)
!2399 = !{!2400, !2401, !2405, !2406}
!2400 = !DIDerivedType(tag: DW_TAG_member, name: "page_free", scope: !2398, file: !31, line: 73, baseType: !821, size: 64)
!2401 = !DIDerivedType(tag: DW_TAG_member, name: "kill", scope: !2398, file: !31, line: 78, baseType: !2402, size: 64, offset: 64)
!2402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2403, size: 64)
!2403 = !DISubroutineType(types: !2404)
!2404 = !{null, !2357}
!2405 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !2398, file: !31, line: 83, baseType: !2402, size: 64, offset: 128)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "migrate_to_ram", scope: !2398, file: !31, line: 89, baseType: !1048, size: 64, offset: 192)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !2358, file: !31, line: 118, baseType: !330, size: 64, offset: 896)
!2408 = !DIDerivedType(tag: DW_TAG_member, name: "nr_range", scope: !2358, file: !31, line: 119, baseType: !240, size: 32, offset: 960)
!2409 = !DIDerivedType(tag: DW_TAG_member, scope: !2358, file: !31, line: 120, baseType: !2410, size: 128, offset: 1024)
!2410 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2358, file: !31, line: 120, size: 128, elements: !2411)
!2411 = !{!2412, !2418}
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "range", scope: !2410, file: !31, line: 121, baseType: !2413, size: 128)
!2413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "range", file: !2414, line: 6, size: 128, elements: !2415)
!2414 = !DIFile(filename: "./include/linux/range.h", directory: "/home/lizy2001/genbc/linux")
!2415 = !{!2416, !2417}
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !2413, file: !2414, line: 7, baseType: !400, size: 64)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "end", scope: !2413, file: !2414, line: 8, baseType: !400, size: 64, offset: 64)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "ranges", scope: !2410, file: !31, line: 122, baseType: !2419)
!2419 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2413, elements: !1743)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "zone_device_data", scope: !2354, file: !703, line: 162, baseType: !330, size: 64, offset: 64)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "callback_head", scope: !707, file: !703, line: 176, baseType: !348, size: 128, align: 64)
!2422 = !DIDerivedType(tag: DW_TAG_member, scope: !702, file: !703, line: 179, baseType: !2423, size: 32, offset: 384)
!2423 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !702, file: !703, line: 179, size: 32, elements: !2424)
!2424 = !{!2425, !2426, !2427, !2428}
!2425 = !DIDerivedType(tag: DW_TAG_member, name: "_mapcount", scope: !2423, file: !703, line: 184, baseType: !728, size: 32)
!2426 = !DIDerivedType(tag: DW_TAG_member, name: "page_type", scope: !2423, file: !703, line: 192, baseType: !7, size: 32)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !2423, file: !703, line: 194, baseType: !7, size: 32)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "units", scope: !2423, file: !703, line: 195, baseType: !240, size: 32)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "_refcount", scope: !702, file: !703, line: 199, baseType: !728, size: 32, offset: 416)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "nr_cached_objects", scope: !637, file: !44, line: 1964, baseType: !2431, size: 64, offset: 1344)
!2431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2432, size: 64)
!2432 = !DISubroutineType(types: !2433)
!2433 = !{!291, !576, !2434}
!2434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2435, size: 64)
!2435 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "shrink_control", file: !2436, line: 12, size: 256, elements: !2437)
!2436 = !DIFile(filename: "./include/linux/shrinker.h", directory: "/home/lizy2001/genbc/linux")
!2437 = !{!2438, !2439, !2440, !2441, !2442}
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "gfp_mask", scope: !2435, file: !2436, line: 13, baseType: !724, size: 32)
!2439 = !DIDerivedType(tag: DW_TAG_member, name: "nid", scope: !2435, file: !2436, line: 16, baseType: !240, size: 32, offset: 32)
!2440 = !DIDerivedType(tag: DW_TAG_member, name: "nr_to_scan", scope: !2435, file: !2436, line: 23, baseType: !306, size: 64, offset: 64)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "nr_scanned", scope: !2435, file: !2436, line: 30, baseType: !306, size: 64, offset: 128)
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "memcg", scope: !2435, file: !2436, line: 33, baseType: !2443, size: 64, offset: 192)
!2443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2444, size: 64)
!2444 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem_cgroup", file: !703, line: 27, flags: DIFlagFwdDecl)
!2445 = !DIDerivedType(tag: DW_TAG_member, name: "free_cached_objects", scope: !637, file: !44, line: 1966, baseType: !2431, size: 64, offset: 1408)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "dq_op", scope: !577, file: !44, line: 1424, baseType: !2447, size: 64, offset: 448)
!2447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2448, size: 64)
!2448 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2449)
!2449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dquot_operations", file: !38, line: 322, size: 704, elements: !2450)
!2450 = !{!2451, !2497, !2501, !2505, !2506, !2507, !2508, !2509, !2514, !2519, !2523}
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "write_dquot", scope: !2449, file: !38, line: 323, baseType: !2452, size: 64)
!2452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2453, size: 64)
!2453 = !DISubroutineType(types: !2454)
!2454 = !{!240, !2455}
!2455 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2456, size: 64)
!2456 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dquot", file: !38, line: 294, size: 1600, elements: !2457)
!2457 = !{!2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2482, !2483, !2484}
!2458 = !DIDerivedType(tag: DW_TAG_member, name: "dq_hash", scope: !2456, file: !38, line: 295, baseType: !619, size: 128)
!2459 = !DIDerivedType(tag: DW_TAG_member, name: "dq_inuse", scope: !2456, file: !38, line: 296, baseType: !201, size: 128, offset: 128)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "dq_free", scope: !2456, file: !38, line: 297, baseType: !201, size: 128, offset: 256)
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "dq_dirty", scope: !2456, file: !38, line: 298, baseType: !201, size: 128, offset: 384)
!2462 = !DIDerivedType(tag: DW_TAG_member, name: "dq_lock", scope: !2456, file: !38, line: 299, baseType: !1194, size: 192, offset: 512)
!2463 = !DIDerivedType(tag: DW_TAG_member, name: "dq_dqb_lock", scope: !2456, file: !38, line: 300, baseType: !214, offset: 704)
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "dq_count", scope: !2456, file: !38, line: 301, baseType: !728, size: 32, offset: 704)
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "dq_sb", scope: !2456, file: !38, line: 302, baseType: !576, size: 64, offset: 768)
!2466 = !DIDerivedType(tag: DW_TAG_member, name: "dq_id", scope: !2456, file: !38, line: 303, baseType: !2467, size: 64, offset: 832)
!2467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kqid", file: !38, line: 68, size: 64, elements: !2468)
!2468 = !{!2469, !2481}
!2469 = !DIDerivedType(tag: DW_TAG_member, scope: !2467, file: !38, line: 69, baseType: !2470, size: 32)
!2470 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2467, file: !38, line: 69, size: 32, elements: !2471)
!2471 = !{!2472, !2473, !2474}
!2472 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2470, file: !38, line: 70, baseType: !414, size: 32)
!2473 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !2470, file: !38, line: 71, baseType: !422, size: 32)
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "projid", scope: !2470, file: !38, line: 72, baseType: !2475, size: 32)
!2475 = !DIDerivedType(tag: DW_TAG_typedef, name: "kprojid_t", file: !2476, line: 24, baseType: !2477)
!2476 = !DIFile(filename: "./include/linux/projid.h", directory: "/home/lizy2001/genbc/linux")
!2477 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2476, line: 22, size: 32, elements: !2478)
!2478 = !{!2479}
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2477, file: !2476, line: 23, baseType: !2480, size: 32)
!2480 = !DIDerivedType(tag: DW_TAG_typedef, name: "projid_t", file: !2476, line: 20, baseType: !420)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2467, file: !38, line: 74, baseType: !37, size: 32, offset: 32)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "dq_off", scope: !2456, file: !38, line: 304, baseType: !508, size: 64, offset: 896)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "dq_flags", scope: !2456, file: !38, line: 305, baseType: !306, size: 64, offset: 960)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "dq_dqb", scope: !2456, file: !38, line: 306, baseType: !2485, size: 576, offset: 1024)
!2485 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_dqblk", file: !38, line: 205, size: 576, elements: !2486)
!2486 = !{!2487, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496}
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_bhardlimit", scope: !2485, file: !38, line: 206, baseType: !2488, size: 64)
!2488 = !DIDerivedType(tag: DW_TAG_typedef, name: "qsize_t", file: !38, line: 66, baseType: !510)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_bsoftlimit", scope: !2485, file: !38, line: 207, baseType: !2488, size: 64, offset: 64)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_curspace", scope: !2485, file: !38, line: 208, baseType: !2488, size: 64, offset: 128)
!2491 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_rsvspace", scope: !2485, file: !38, line: 209, baseType: !2488, size: 64, offset: 192)
!2492 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_ihardlimit", scope: !2485, file: !38, line: 210, baseType: !2488, size: 64, offset: 256)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_isoftlimit", scope: !2485, file: !38, line: 211, baseType: !2488, size: 64, offset: 320)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_curinodes", scope: !2485, file: !38, line: 212, baseType: !2488, size: 64, offset: 384)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_btime", scope: !2485, file: !38, line: 213, baseType: !516, size: 64, offset: 448)
!2496 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_itime", scope: !2485, file: !38, line: 214, baseType: !516, size: 64, offset: 512)
!2497 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_dquot", scope: !2449, file: !38, line: 324, baseType: !2498, size: 64, offset: 64)
!2498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2499, size: 64)
!2499 = !DISubroutineType(types: !2500)
!2500 = !{!2455, !576, !240}
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "destroy_dquot", scope: !2449, file: !38, line: 325, baseType: !2502, size: 64, offset: 128)
!2502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2503, size: 64)
!2503 = !DISubroutineType(types: !2504)
!2504 = !{null, !2455}
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "acquire_dquot", scope: !2449, file: !38, line: 326, baseType: !2452, size: 64, offset: 192)
!2506 = !DIDerivedType(tag: DW_TAG_member, name: "release_dquot", scope: !2449, file: !38, line: 327, baseType: !2452, size: 64, offset: 256)
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "mark_dirty", scope: !2449, file: !38, line: 328, baseType: !2452, size: 64, offset: 320)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "write_info", scope: !2449, file: !38, line: 329, baseType: !665, size: 64, offset: 384)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "get_reserved_space", scope: !2449, file: !38, line: 332, baseType: !2510, size: 64, offset: 448)
!2510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2511, size: 64)
!2511 = !DISubroutineType(types: !2512)
!2512 = !{!2513, !408}
!2513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2488, size: 64)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "get_projid", scope: !2449, file: !38, line: 333, baseType: !2515, size: 64, offset: 512)
!2515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2516, size: 64)
!2516 = !DISubroutineType(types: !2517)
!2517 = !{!240, !408, !2518}
!2518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2475, size: 64)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "get_inode_usage", scope: !2449, file: !38, line: 335, baseType: !2520, size: 64, offset: 576)
!2520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2521, size: 64)
!2521 = !DISubroutineType(types: !2522)
!2522 = !{!240, !408, !2513}
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "get_next_id", scope: !2449, file: !38, line: 337, baseType: !2524, size: 64, offset: 640)
!2524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2525, size: 64)
!2525 = !DISubroutineType(types: !2526)
!2526 = !{!240, !576, !2527}
!2527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2467, size: 64)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "s_qcop", scope: !577, file: !44, line: 1425, baseType: !2529, size: 64, offset: 512)
!2529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2530, size: 64)
!2530 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2531)
!2531 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quotactl_ops", file: !38, line: 428, size: 704, elements: !2532)
!2532 = !{!2533, !2537, !2538, !2542, !2543, !2544, !2559, !2582, !2586, !2587, !2610}
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "quota_on", scope: !2531, file: !38, line: 429, baseType: !2534, size: 64)
!2534 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2535, size: 64)
!2535 = !DISubroutineType(types: !2536)
!2536 = !{!240, !576, !240, !240, !526}
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "quota_off", scope: !2531, file: !38, line: 430, baseType: !665, size: 64, offset: 64)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "quota_enable", scope: !2531, file: !38, line: 431, baseType: !2539, size: 64, offset: 128)
!2539 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2540, size: 64)
!2540 = !DISubroutineType(types: !2541)
!2541 = !{!240, !576, !7}
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "quota_disable", scope: !2531, file: !38, line: 432, baseType: !2539, size: 64, offset: 192)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "quota_sync", scope: !2531, file: !38, line: 433, baseType: !665, size: 64, offset: 256)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "set_info", scope: !2531, file: !38, line: 434, baseType: !2545, size: 64, offset: 320)
!2545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2546, size: 64)
!2546 = !DISubroutineType(types: !2547)
!2547 = !{!240, !576, !240, !2548}
!2548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2549, size: 64)
!2549 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qc_info", file: !38, line: 415, size: 256, elements: !2550)
!2550 = !{!2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558}
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "i_fieldmask", scope: !2549, file: !38, line: 416, baseType: !240, size: 32)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "i_flags", scope: !2549, file: !38, line: 417, baseType: !7, size: 32, offset: 32)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "i_spc_timelimit", scope: !2549, file: !38, line: 418, baseType: !7, size: 32, offset: 64)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "i_ino_timelimit", scope: !2549, file: !38, line: 420, baseType: !7, size: 32, offset: 96)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "i_rt_spc_timelimit", scope: !2549, file: !38, line: 421, baseType: !7, size: 32, offset: 128)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "i_spc_warnlimit", scope: !2549, file: !38, line: 422, baseType: !7, size: 32, offset: 160)
!2557 = !DIDerivedType(tag: DW_TAG_member, name: "i_ino_warnlimit", scope: !2549, file: !38, line: 423, baseType: !7, size: 32, offset: 192)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "i_rt_spc_warnlimit", scope: !2549, file: !38, line: 424, baseType: !7, size: 32, offset: 224)
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "get_dqblk", scope: !2531, file: !38, line: 435, baseType: !2560, size: 64, offset: 384)
!2560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2561, size: 64)
!2561 = !DISubroutineType(types: !2562)
!2562 = !{!240, !576, !2467, !2563}
!2563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2564, size: 64)
!2564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qc_dqblk", file: !38, line: 343, size: 960, elements: !2565)
!2565 = !{!2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581}
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "d_fieldmask", scope: !2564, file: !38, line: 344, baseType: !240, size: 32)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "d_spc_hardlimit", scope: !2564, file: !38, line: 345, baseType: !400, size: 64, offset: 64)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "d_spc_softlimit", scope: !2564, file: !38, line: 346, baseType: !400, size: 64, offset: 128)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_hardlimit", scope: !2564, file: !38, line: 347, baseType: !400, size: 64, offset: 192)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_softlimit", scope: !2564, file: !38, line: 348, baseType: !400, size: 64, offset: 256)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "d_space", scope: !2564, file: !38, line: 349, baseType: !400, size: 64, offset: 320)
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_count", scope: !2564, file: !38, line: 350, baseType: !400, size: 64, offset: 384)
!2573 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_timer", scope: !2564, file: !38, line: 351, baseType: !758, size: 64, offset: 448)
!2574 = !DIDerivedType(tag: DW_TAG_member, name: "d_spc_timer", scope: !2564, file: !38, line: 353, baseType: !758, size: 64, offset: 512)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_warns", scope: !2564, file: !38, line: 354, baseType: !240, size: 32, offset: 576)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "d_spc_warns", scope: !2564, file: !38, line: 355, baseType: !240, size: 32, offset: 608)
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_spc_hardlimit", scope: !2564, file: !38, line: 356, baseType: !400, size: 64, offset: 640)
!2578 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_spc_softlimit", scope: !2564, file: !38, line: 357, baseType: !400, size: 64, offset: 704)
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_space", scope: !2564, file: !38, line: 358, baseType: !400, size: 64, offset: 768)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_spc_timer", scope: !2564, file: !38, line: 359, baseType: !758, size: 64, offset: 832)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_spc_warns", scope: !2564, file: !38, line: 360, baseType: !240, size: 32, offset: 896)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "get_nextdqblk", scope: !2531, file: !38, line: 436, baseType: !2583, size: 64, offset: 448)
!2583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2584, size: 64)
!2584 = !DISubroutineType(types: !2585)
!2585 = !{!240, !576, !2527, !2563}
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "set_dqblk", scope: !2531, file: !38, line: 438, baseType: !2560, size: 64, offset: 512)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "get_state", scope: !2531, file: !38, line: 439, baseType: !2588, size: 64, offset: 576)
!2588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2589, size: 64)
!2589 = !DISubroutineType(types: !2590)
!2590 = !{!240, !576, !2591}
!2591 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2592, size: 64)
!2592 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qc_state", file: !38, line: 409, size: 1408, elements: !2593)
!2593 = !{!2594, !2595}
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "s_incoredqs", scope: !2592, file: !38, line: 410, baseType: !7, size: 32)
!2595 = !DIDerivedType(tag: DW_TAG_member, name: "s_state", scope: !2592, file: !38, line: 411, baseType: !2596, size: 1344, offset: 64)
!2596 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2597, size: 1344, elements: !257)
!2597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qc_type_state", file: !38, line: 395, size: 448, elements: !2598)
!2598 = !{!2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2609}
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2597, file: !38, line: 396, baseType: !7, size: 32)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "spc_timelimit", scope: !2597, file: !38, line: 397, baseType: !7, size: 32, offset: 32)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "ino_timelimit", scope: !2597, file: !38, line: 399, baseType: !7, size: 32, offset: 64)
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "rt_spc_timelimit", scope: !2597, file: !38, line: 400, baseType: !7, size: 32, offset: 96)
!2603 = !DIDerivedType(tag: DW_TAG_member, name: "spc_warnlimit", scope: !2597, file: !38, line: 401, baseType: !7, size: 32, offset: 128)
!2604 = !DIDerivedType(tag: DW_TAG_member, name: "ino_warnlimit", scope: !2597, file: !38, line: 402, baseType: !7, size: 32, offset: 160)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "rt_spc_warnlimit", scope: !2597, file: !38, line: 403, baseType: !7, size: 32, offset: 192)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "ino", scope: !2597, file: !38, line: 404, baseType: !402, size: 64, offset: 256)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "blocks", scope: !2597, file: !38, line: 405, baseType: !2608, size: 64, offset: 320)
!2608 = !DIDerivedType(tag: DW_TAG_typedef, name: "blkcnt_t", file: !181, line: 126, baseType: !400)
!2609 = !DIDerivedType(tag: DW_TAG_member, name: "nextents", scope: !2597, file: !38, line: 406, baseType: !2608, size: 64, offset: 384)
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "rm_xquota", scope: !2531, file: !38, line: 440, baseType: !2539, size: 64, offset: 640)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "s_export_op", scope: !577, file: !44, line: 1426, baseType: !2612, size: 64, offset: 576)
!2612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2613, size: 64)
!2613 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2614)
!2614 = !DICompositeType(tag: DW_TAG_structure_type, name: "export_operations", file: !44, line: 49, flags: DIFlagFwdDecl)
!2615 = !DIDerivedType(tag: DW_TAG_member, name: "s_flags", scope: !577, file: !44, line: 1427, baseType: !306, size: 64, offset: 640)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "s_iflags", scope: !577, file: !44, line: 1428, baseType: !306, size: 64, offset: 704)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "s_magic", scope: !577, file: !44, line: 1429, baseType: !306, size: 64, offset: 768)
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "s_root", scope: !577, file: !44, line: 1430, baseType: !365, size: 64, offset: 832)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "s_umount", scope: !577, file: !44, line: 1431, baseType: !748, size: 256, offset: 896)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "s_count", scope: !577, file: !44, line: 1432, baseType: !240, size: 32, offset: 1152)
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "s_active", scope: !577, file: !44, line: 1433, baseType: !728, size: 32, offset: 1184)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "s_xattr", scope: !577, file: !44, line: 1437, baseType: !2623, size: 64, offset: 1216)
!2623 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2624, size: 64)
!2624 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2625, size: 64)
!2625 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2626)
!2626 = !DICompositeType(tag: DW_TAG_structure_type, name: "xattr_handler", file: !44, line: 1437, flags: DIFlagFwdDecl)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "s_roots", scope: !577, file: !44, line: 1449, baseType: !2628, size: 64, offset: 1280)
!2628 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hlist_bl_head", file: !381, line: 34, size: 64, elements: !2629)
!2629 = !{!2630}
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2628, file: !381, line: 35, baseType: !384, size: 64)
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "s_mounts", scope: !577, file: !44, line: 1450, baseType: !201, size: 128, offset: 1344)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "s_bdev", scope: !577, file: !44, line: 1451, baseType: !2633, size: 64, offset: 1472)
!2633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2634, size: 64)
!2634 = !DICompositeType(tag: DW_TAG_structure_type, name: "block_device", file: !44, line: 699, flags: DIFlagFwdDecl)
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "s_bdi", scope: !577, file: !44, line: 1452, baseType: !1945, size: 64, offset: 1536)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "s_mtd", scope: !577, file: !44, line: 1453, baseType: !2637, size: 64, offset: 1600)
!2637 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2638, size: 64)
!2638 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_info", file: !2639, line: 235, size: 9664, elements: !2640)
!2639 = !DIFile(filename: "./include/linux/mtd/mtd.h", directory: "/home/lizy2001/genbc/linux")
!2640 = !{!2641, !2643, !2644, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2673, !2694, !2695, !2696, !2697, !2706, !2716, !2723, !2727, !2732, !2738, !2739, !2756, !2757, !2767, !2768, !2769, !2770, !2771, !2772, !2776, !2780, !2784, !2785, !2786, !2790, !2791, !2792, !2793, !2797, !2798, !2799, !2800, !2801, !2802, !2814, !2821, !2822, !2823, !2824, !2825, !2826, !2832, !2836, !2837, !2838}
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2638, file: !2639, line: 236, baseType: !2642, size: 8)
!2642 = !DIDerivedType(tag: DW_TAG_typedef, name: "u_char", file: !181, line: 79, baseType: !406)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2638, file: !2639, line: 237, baseType: !536, size: 32, offset: 32)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2638, file: !2639, line: 238, baseType: !2645, size: 64, offset: 64)
!2645 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint64_t", file: !181, line: 107, baseType: !400)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "erasesize", scope: !2638, file: !2639, line: 244, baseType: !536, size: 32, offset: 128)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "writesize", scope: !2638, file: !2639, line: 252, baseType: !536, size: 32, offset: 160)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "writebufsize", scope: !2638, file: !2639, line: 263, baseType: !536, size: 32, offset: 192)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "oobsize", scope: !2638, file: !2639, line: 265, baseType: !536, size: 32, offset: 224)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "oobavail", scope: !2638, file: !2639, line: 266, baseType: !536, size: 32, offset: 256)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "erasesize_shift", scope: !2638, file: !2639, line: 272, baseType: !7, size: 32, offset: 288)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "writesize_shift", scope: !2638, file: !2639, line: 273, baseType: !7, size: 32, offset: 320)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "erasesize_mask", scope: !2638, file: !2639, line: 275, baseType: !7, size: 32, offset: 352)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "writesize_mask", scope: !2638, file: !2639, line: 276, baseType: !7, size: 32, offset: 384)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "bitflip_threshold", scope: !2638, file: !2639, line: 285, baseType: !7, size: 32, offset: 416)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2638, file: !2639, line: 288, baseType: !147, size: 64, offset: 448)
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2638, file: !2639, line: 289, baseType: !240, size: 32, offset: 512)
!2658 = !DIDerivedType(tag: DW_TAG_member, name: "ooblayout", scope: !2638, file: !2639, line: 292, baseType: !2659, size: 64, offset: 576)
!2659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2660, size: 64)
!2660 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2661)
!2661 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_ooblayout_ops", file: !2639, line: 101, size: 128, elements: !2662)
!2662 = !{!2663, !2672}
!2663 = !DIDerivedType(tag: DW_TAG_member, name: "ecc", scope: !2661, file: !2639, line: 102, baseType: !2664, size: 64)
!2664 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2665, size: 64)
!2665 = !DISubroutineType(types: !2666)
!2666 = !{!240, !2637, !240, !2667}
!2667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2668, size: 64)
!2668 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_oob_region", file: !2639, line: 87, size: 64, elements: !2669)
!2669 = !{!2670, !2671}
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2668, file: !2639, line: 88, baseType: !152, size: 32)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2668, file: !2639, line: 89, baseType: !152, size: 32, offset: 32)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "free", scope: !2661, file: !2639, line: 104, baseType: !2664, size: 64, offset: 64)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "pairing", scope: !2638, file: !2639, line: 295, baseType: !2674, size: 64, offset: 640)
!2674 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2675, size: 64)
!2675 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2676)
!2676 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_pairing_scheme", file: !2639, line: 176, size: 192, elements: !2677)
!2677 = !{!2678, !2679, !2688}
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "ngroups", scope: !2676, file: !2639, line: 177, baseType: !240, size: 32)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "get_info", scope: !2676, file: !2639, line: 178, baseType: !2680, size: 64, offset: 64)
!2680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2681, size: 64)
!2681 = !DISubroutineType(types: !2682)
!2682 = !{!240, !2637, !240, !2683}
!2683 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2684, size: 64)
!2684 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_pairing_info", file: !2639, line: 138, size: 64, elements: !2685)
!2685 = !{!2686, !2687}
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "pair", scope: !2684, file: !2639, line: 139, baseType: !240, size: 32)
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "group", scope: !2684, file: !2639, line: 140, baseType: !240, size: 32, offset: 32)
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "get_wunit", scope: !2676, file: !2639, line: 180, baseType: !2689, size: 64, offset: 128)
!2689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2690, size: 64)
!2690 = !DISubroutineType(types: !2691)
!2691 = !{!240, !2637, !2692}
!2692 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2693, size: 64)
!2693 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2684)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "ecc_step_size", scope: !2638, file: !2639, line: 298, baseType: !7, size: 32, offset: 704)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "ecc_strength", scope: !2638, file: !2639, line: 301, baseType: !7, size: 32, offset: 736)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "numeraseregions", scope: !2638, file: !2639, line: 306, baseType: !240, size: 32, offset: 768)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "eraseregions", scope: !2638, file: !2639, line: 307, baseType: !2698, size: 64, offset: 832)
!2698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2699, size: 64)
!2699 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_erase_region_info", file: !2639, line: 36, size: 192, elements: !2700)
!2700 = !{!2701, !2702, !2703, !2704}
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2699, file: !2639, line: 37, baseType: !2645, size: 64)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "erasesize", scope: !2699, file: !2639, line: 38, baseType: !536, size: 32, offset: 64)
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "numblocks", scope: !2699, file: !2639, line: 39, baseType: !536, size: 32, offset: 96)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "lockmap", scope: !2699, file: !2639, line: 40, baseType: !2705, size: 64, offset: 128)
!2705 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !306, size: 64)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "_erase", scope: !2638, file: !2639, line: 313, baseType: !2707, size: 64, offset: 896)
!2707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2708, size: 64)
!2708 = !DISubroutineType(types: !2709)
!2709 = !{!240, !2637, !2710}
!2710 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2711, size: 64)
!2711 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "erase_info", file: !2639, line: 30, size: 192, elements: !2712)
!2712 = !{!2713, !2714, !2715}
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !2711, file: !2639, line: 31, baseType: !2645, size: 64)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2711, file: !2639, line: 32, baseType: !2645, size: 64, offset: 64)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "fail_addr", scope: !2711, file: !2639, line: 33, baseType: !2645, size: 64, offset: 128)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "_point", scope: !2638, file: !2639, line: 314, baseType: !2717, size: 64, offset: 960)
!2717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2718, size: 64)
!2718 = !DISubroutineType(types: !2719)
!2719 = !{!240, !2637, !508, !303, !2720, !802, !2721}
!2720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !303, size: 64)
!2721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2722, size: 64)
!2722 = !DIDerivedType(tag: DW_TAG_typedef, name: "resource_size_t", file: !181, line: 158, baseType: !2145)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "_unpoint", scope: !2638, file: !2639, line: 316, baseType: !2724, size: 64, offset: 1024)
!2724 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2725, size: 64)
!2725 = !DISubroutineType(types: !2726)
!2726 = !{!240, !2637, !508, !303}
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "_read", scope: !2638, file: !2639, line: 317, baseType: !2728, size: 64, offset: 1088)
!2728 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2729, size: 64)
!2729 = !DISubroutineType(types: !2730)
!2730 = !{!240, !2637, !508, !303, !2720, !2731}
!2731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2642, size: 64)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "_write", scope: !2638, file: !2639, line: 319, baseType: !2733, size: 64, offset: 1152)
!2733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2734, size: 64)
!2734 = !DISubroutineType(types: !2735)
!2735 = !{!240, !2637, !508, !303, !2720, !2736}
!2736 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2737, size: 64)
!2737 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2642)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "_panic_write", scope: !2638, file: !2639, line: 321, baseType: !2733, size: 64, offset: 1216)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "_read_oob", scope: !2638, file: !2639, line: 323, baseType: !2740, size: 64, offset: 1280)
!2740 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2741, size: 64)
!2741 = !DISubroutineType(types: !2742)
!2742 = !{!240, !2637, !508, !2743}
!2743 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2744, size: 64)
!2744 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_oob_ops", file: !2639, line: 64, size: 512, elements: !2745)
!2745 = !{!2746, !2747, !2748, !2749, !2750, !2751, !2752, !2755}
!2746 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2744, file: !2639, line: 65, baseType: !7, size: 32)
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2744, file: !2639, line: 66, baseType: !303, size: 64, offset: 64)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "retlen", scope: !2744, file: !2639, line: 67, baseType: !303, size: 64, offset: 128)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "ooblen", scope: !2744, file: !2639, line: 68, baseType: !303, size: 64, offset: 192)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "oobretlen", scope: !2744, file: !2639, line: 69, baseType: !303, size: 64, offset: 256)
!2751 = !DIDerivedType(tag: DW_TAG_member, name: "ooboffs", scope: !2744, file: !2639, line: 70, baseType: !536, size: 32, offset: 320)
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "datbuf", scope: !2744, file: !2639, line: 71, baseType: !2753, size: 64, offset: 384)
!2753 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2754, size: 64)
!2754 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint8_t", file: !181, line: 102, baseType: !1372)
!2755 = !DIDerivedType(tag: DW_TAG_member, name: "oobbuf", scope: !2744, file: !2639, line: 72, baseType: !2753, size: 64, offset: 448)
!2756 = !DIDerivedType(tag: DW_TAG_member, name: "_write_oob", scope: !2638, file: !2639, line: 325, baseType: !2740, size: 64, offset: 1344)
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "_get_fact_prot_info", scope: !2638, file: !2639, line: 327, baseType: !2758, size: 64, offset: 1408)
!2758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2759, size: 64)
!2759 = !DISubroutineType(types: !2760)
!2760 = !{!240, !2637, !303, !2720, !2761}
!2761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2762, size: 64)
!2762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "otp_info", file: !133, line: 146, size: 96, elements: !2763)
!2763 = !{!2764, !2765, !2766}
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !2762, file: !133, line: 147, baseType: !154, size: 32)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2762, file: !133, line: 148, baseType: !154, size: 32, offset: 32)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "locked", scope: !2762, file: !133, line: 149, baseType: !154, size: 32, offset: 64)
!2767 = !DIDerivedType(tag: DW_TAG_member, name: "_read_fact_prot_reg", scope: !2638, file: !2639, line: 329, baseType: !2728, size: 64, offset: 1472)
!2768 = !DIDerivedType(tag: DW_TAG_member, name: "_get_user_prot_info", scope: !2638, file: !2639, line: 331, baseType: !2758, size: 64, offset: 1536)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "_read_user_prot_reg", scope: !2638, file: !2639, line: 333, baseType: !2728, size: 64, offset: 1600)
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "_write_user_prot_reg", scope: !2638, file: !2639, line: 335, baseType: !2728, size: 64, offset: 1664)
!2771 = !DIDerivedType(tag: DW_TAG_member, name: "_lock_user_prot_reg", scope: !2638, file: !2639, line: 337, baseType: !2724, size: 64, offset: 1728)
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "_writev", scope: !2638, file: !2639, line: 339, baseType: !2773, size: 64, offset: 1792)
!2773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2774, size: 64)
!2774 = !DISubroutineType(types: !2775)
!2775 = !{!240, !2637, !869, !306, !508, !2720}
!2776 = !DIDerivedType(tag: DW_TAG_member, name: "_sync", scope: !2638, file: !2639, line: 341, baseType: !2777, size: 64, offset: 1856)
!2777 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2778, size: 64)
!2778 = !DISubroutineType(types: !2779)
!2779 = !{null, !2637}
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2638, file: !2639, line: 342, baseType: !2781, size: 64, offset: 1920)
!2781 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2782, size: 64)
!2782 = !DISubroutineType(types: !2783)
!2783 = !{!240, !2637, !508, !2645}
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "_unlock", scope: !2638, file: !2639, line: 343, baseType: !2781, size: 64, offset: 1984)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "_is_locked", scope: !2638, file: !2639, line: 344, baseType: !2781, size: 64, offset: 2048)
!2786 = !DIDerivedType(tag: DW_TAG_member, name: "_block_isreserved", scope: !2638, file: !2639, line: 345, baseType: !2787, size: 64, offset: 2112)
!2787 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2788, size: 64)
!2788 = !DISubroutineType(types: !2789)
!2789 = !{!240, !2637, !508}
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "_block_isbad", scope: !2638, file: !2639, line: 346, baseType: !2787, size: 64, offset: 2176)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "_block_markbad", scope: !2638, file: !2639, line: 347, baseType: !2787, size: 64, offset: 2240)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "_max_bad_blocks", scope: !2638, file: !2639, line: 348, baseType: !2724, size: 64, offset: 2304)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "_suspend", scope: !2638, file: !2639, line: 349, baseType: !2794, size: 64, offset: 2368)
!2794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2795, size: 64)
!2795 = !DISubroutineType(types: !2796)
!2796 = !{!240, !2637}
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "_resume", scope: !2638, file: !2639, line: 350, baseType: !2777, size: 64, offset: 2432)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "_reboot", scope: !2638, file: !2639, line: 351, baseType: !2777, size: 64, offset: 2496)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "_get_device", scope: !2638, file: !2639, line: 356, baseType: !2794, size: 64, offset: 2560)
!2800 = !DIDerivedType(tag: DW_TAG_member, name: "_put_device", scope: !2638, file: !2639, line: 357, baseType: !2777, size: 64, offset: 2624)
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "oops_panic_write", scope: !2638, file: !2639, line: 363, baseType: !180, size: 8, offset: 2688)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "reboot_notifier", scope: !2638, file: !2639, line: 365, baseType: !2803, size: 192, offset: 2752)
!2803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "notifier_block", file: !2804, line: 54, size: 192, elements: !2805)
!2804 = !DIFile(filename: "./include/linux/notifier.h", directory: "/home/lizy2001/genbc/linux")
!2805 = !{!2806, !2812, !2813}
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "notifier_call", scope: !2803, file: !2804, line: 55, baseType: !2807, size: 64)
!2807 = !DIDerivedType(tag: DW_TAG_typedef, name: "notifier_fn_t", file: !2804, line: 51, baseType: !2808)
!2808 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2809, size: 64)
!2809 = !DISubroutineType(types: !2810)
!2810 = !{!240, !2811, !306, !330}
!2811 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2803, size: 64)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2803, file: !2804, line: 56, baseType: !2811, size: 64, offset: 64)
!2813 = !DIDerivedType(tag: DW_TAG_member, name: "priority", scope: !2803, file: !2804, line: 57, baseType: !240, size: 32, offset: 128)
!2814 = !DIDerivedType(tag: DW_TAG_member, name: "ecc_stats", scope: !2638, file: !2639, line: 368, baseType: !2815, size: 128, offset: 2944)
!2815 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_ecc_stats", file: !133, line: 250, size: 128, elements: !2816)
!2816 = !{!2817, !2818, !2819, !2820}
!2817 = !DIDerivedType(tag: DW_TAG_member, name: "corrected", scope: !2815, file: !133, line: 251, baseType: !154, size: 32)
!2818 = !DIDerivedType(tag: DW_TAG_member, name: "failed", scope: !2815, file: !133, line: 252, baseType: !154, size: 32, offset: 32)
!2819 = !DIDerivedType(tag: DW_TAG_member, name: "badblocks", scope: !2815, file: !133, line: 253, baseType: !154, size: 32, offset: 64)
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "bbtblocks", scope: !2815, file: !133, line: 254, baseType: !154, size: 32, offset: 96)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "subpage_sft", scope: !2638, file: !2639, line: 370, baseType: !240, size: 32, offset: 3072)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !2638, file: !2639, line: 372, baseType: !330, size: 64, offset: 3136)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !2638, file: !2639, line: 374, baseType: !610, size: 64, offset: 3200)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "dev", scope: !2638, file: !2639, line: 375, baseType: !193, size: 5568, offset: 3264)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "usecount", scope: !2638, file: !2639, line: 376, baseType: !240, size: 32, offset: 8832)
!2826 = !DIDerivedType(tag: DW_TAG_member, name: "dbg", scope: !2638, file: !2639, line: 377, baseType: !2827, size: 192, offset: 8896)
!2827 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_debug_info", file: !2639, line: 191, size: 192, elements: !2828)
!2828 = !{!2829, !2830, !2831}
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "dfs_dir", scope: !2827, file: !2639, line: 192, baseType: !365, size: 64)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "partname", scope: !2827, file: !2639, line: 194, baseType: !147, size: 64, offset: 64)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "partid", scope: !2827, file: !2639, line: 195, baseType: !147, size: 64, offset: 128)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "nvmem", scope: !2638, file: !2639, line: 378, baseType: !2833, size: 64, offset: 9088)
!2833 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2834, size: 64)
!2834 = !DICompositeType(tag: DW_TAG_structure_type, name: "nvmem_device", file: !2835, line: 16, flags: DIFlagFwdDecl)
!2835 = !DIFile(filename: "./include/linux/nvmem-provider.h", directory: "/home/lizy2001/genbc/linux")
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !2638, file: !2639, line: 386, baseType: !2637, size: 64, offset: 9152)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "partitions", scope: !2638, file: !2639, line: 389, baseType: !201, size: 128, offset: 9216)
!2838 = !DIDerivedType(tag: DW_TAG_member, scope: !2638, file: !2639, line: 391, baseType: !2839, size: 320, offset: 9344)
!2839 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2638, file: !2639, line: 391, size: 320, elements: !2840)
!2840 = !{!2841, !2848}
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "part", scope: !2839, file: !2639, line: 392, baseType: !2842, size: 320)
!2842 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_part", file: !2639, line: 211, size: 320, elements: !2843)
!2843 = !{!2844, !2845, !2846, !2847}
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !2842, file: !2639, line: 212, baseType: !201, size: 128)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2842, file: !2639, line: 213, baseType: !400, size: 64, offset: 128)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2842, file: !2639, line: 214, baseType: !400, size: 64, offset: 192)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2842, file: !2639, line: 215, baseType: !152, size: 32, offset: 256)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "master", scope: !2839, file: !2639, line: 393, baseType: !2849, size: 256)
!2849 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_master", file: !2639, line: 230, size: 256, elements: !2850)
!2850 = !{!2851, !2852}
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "partitions_lock", scope: !2849, file: !2639, line: 231, baseType: !1194, size: 192)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "suspended", scope: !2849, file: !2639, line: 232, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "s_instances", scope: !577, file: !44, line: 1454, baseType: !619, size: 128, offset: 1664)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "s_quota_types", scope: !577, file: !44, line: 1455, baseType: !7, size: 32, offset: 1792)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "s_dquot", scope: !577, file: !44, line: 1456, baseType: !2856, size: 2432, offset: 1856)
!2856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quota_info", file: !38, line: 518, size: 2432, elements: !2857)
!2857 = !{!2858, !2859, !2860, !2862, !2894}
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2856, file: !38, line: 519, baseType: !7, size: 32)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "dqio_sem", scope: !2856, file: !38, line: 520, baseType: !748, size: 256, offset: 64)
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "files", scope: !2856, file: !38, line: 521, baseType: !2861, size: 192, offset: 320)
!2861 = !DICompositeType(tag: DW_TAG_array_type, baseType: !408, size: 192, elements: !257)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2856, file: !38, line: 522, baseType: !2863, size: 1728, offset: 512)
!2863 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2864, size: 1728, elements: !257)
!2864 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_dqinfo", file: !38, line: 222, size: 576, elements: !2865)
!2865 = !{!2866, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893}
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_format", scope: !2864, file: !38, line: 223, baseType: !2867, size: 64)
!2867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2868, size: 64)
!2868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quota_format_type", file: !38, line: 443, size: 256, elements: !2869)
!2869 = !{!2870, !2871, !2884, !2885}
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "qf_fmt_id", scope: !2868, file: !38, line: 444, baseType: !240, size: 32)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "qf_ops", scope: !2868, file: !38, line: 445, baseType: !2872, size: 64, offset: 64)
!2872 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2873, size: 64)
!2873 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2874)
!2874 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quota_format_ops", file: !38, line: 310, size: 512, elements: !2875)
!2875 = !{!2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883}
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "check_quota_file", scope: !2874, file: !38, line: 311, baseType: !665, size: 64)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "read_file_info", scope: !2874, file: !38, line: 312, baseType: !665, size: 64, offset: 64)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "write_file_info", scope: !2874, file: !38, line: 313, baseType: !665, size: 64, offset: 128)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "free_file_info", scope: !2874, file: !38, line: 314, baseType: !665, size: 64, offset: 192)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "read_dqblk", scope: !2874, file: !38, line: 315, baseType: !2452, size: 64, offset: 256)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "commit_dqblk", scope: !2874, file: !38, line: 316, baseType: !2452, size: 64, offset: 320)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "release_dqblk", scope: !2874, file: !38, line: 317, baseType: !2452, size: 64, offset: 384)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "get_next_id", scope: !2874, file: !38, line: 318, baseType: !2524, size: 64, offset: 448)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "qf_owner", scope: !2868, file: !38, line: 446, baseType: !610, size: 64, offset: 128)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "qf_next", scope: !2868, file: !38, line: 447, baseType: !2867, size: 64, offset: 192)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_fmt_id", scope: !2864, file: !38, line: 224, baseType: !240, size: 32, offset: 64)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_dirty_list", scope: !2864, file: !38, line: 226, baseType: !201, size: 128, offset: 128)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_flags", scope: !2864, file: !38, line: 227, baseType: !306, size: 64, offset: 256)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_bgrace", scope: !2864, file: !38, line: 228, baseType: !7, size: 32, offset: 320)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_igrace", scope: !2864, file: !38, line: 229, baseType: !7, size: 32, offset: 352)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_max_spc_limit", scope: !2864, file: !38, line: 230, baseType: !2488, size: 64, offset: 384)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_max_ino_limit", scope: !2864, file: !38, line: 231, baseType: !2488, size: 64, offset: 448)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_priv", scope: !2864, file: !38, line: 232, baseType: !330, size: 64, offset: 512)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2856, file: !38, line: 523, baseType: !2895, size: 192, offset: 2240)
!2895 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2872, size: 192, elements: !257)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "s_writers", scope: !577, file: !44, line: 1458, baseType: !2897, size: 2112, offset: 4288)
!2897 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sb_writers", file: !44, line: 1410, size: 2112, elements: !2898)
!2898 = !{!2899, !2900, !2901}
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "frozen", scope: !2897, file: !44, line: 1411, baseType: !240, size: 32)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "wait_unfrozen", scope: !2897, file: !44, line: 1412, baseType: !1501, size: 128, offset: 64)
!2901 = !DIDerivedType(tag: DW_TAG_member, name: "rw_sem", scope: !2897, file: !44, line: 1413, baseType: !2902, size: 1920, offset: 192)
!2902 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2903, size: 1920, elements: !257)
!2903 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "percpu_rw_semaphore", file: !2904, line: 12, size: 640, elements: !2905)
!2904 = !DIFile(filename: "./include/linux/percpu-rwsem.h", directory: "/home/lizy2001/genbc/linux")
!2905 = !{!2906, !2914, !2916, !2921, !2922}
!2906 = !DIDerivedType(tag: DW_TAG_member, name: "rss", scope: !2903, file: !2904, line: 13, baseType: !2907, size: 320)
!2907 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rcu_sync", file: !2908, line: 17, size: 320, elements: !2909)
!2908 = !DIFile(filename: "./include/linux/rcu_sync.h", directory: "/home/lizy2001/genbc/linux")
!2909 = !{!2910, !2911, !2912, !2913}
!2910 = !DIDerivedType(tag: DW_TAG_member, name: "gp_state", scope: !2907, file: !2908, line: 18, baseType: !240, size: 32)
!2911 = !DIDerivedType(tag: DW_TAG_member, name: "gp_count", scope: !2907, file: !2908, line: 19, baseType: !240, size: 32, offset: 32)
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "gp_wait", scope: !2907, file: !2908, line: 20, baseType: !1501, size: 128, offset: 64)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "cb_head", scope: !2907, file: !2908, line: 22, baseType: !348, size: 128, align: 64, offset: 192)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "read_count", scope: !2903, file: !2904, line: 14, baseType: !2915, size: 64, offset: 320)
!2915 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "writer", scope: !2903, file: !2904, line: 15, baseType: !2917, size: 64, offset: 384)
!2917 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rcuwait", file: !2918, line: 16, size: 64, elements: !2919)
!2918 = !DIFile(filename: "./include/linux/rcuwait.h", directory: "/home/lizy2001/genbc/linux")
!2919 = !{!2920}
!2920 = !DIDerivedType(tag: DW_TAG_member, name: "task", scope: !2917, file: !2918, line: 17, baseType: !1237, size: 64)
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "waiters", scope: !2903, file: !2904, line: 16, baseType: !1501, size: 128, offset: 448)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2903, file: !2904, line: 17, baseType: !728, size: 32, offset: 576)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "s_fs_info", scope: !577, file: !44, line: 1465, baseType: !330, size: 64, offset: 6400)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "s_time_gran", scope: !577, file: !44, line: 1468, baseType: !152, size: 32, offset: 6464)
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "s_time_min", scope: !577, file: !44, line: 1470, baseType: !516, size: 64, offset: 6528)
!2926 = !DIDerivedType(tag: DW_TAG_member, name: "s_time_max", scope: !577, file: !44, line: 1471, baseType: !516, size: 64, offset: 6592)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "s_fsnotify_mask", scope: !577, file: !44, line: 1473, baseType: !154, size: 32, offset: 6656)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "s_fsnotify_marks", scope: !577, file: !44, line: 1474, baseType: !2929, size: 64, offset: 6720)
!2929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2930, size: 64)
!2930 = !DICompositeType(tag: DW_TAG_structure_type, name: "fsnotify_mark_connector", file: !44, line: 603, flags: DIFlagFwdDecl)
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "s_id", scope: !577, file: !44, line: 1477, baseType: !2932, size: 256, offset: 6784)
!2932 = !DICompositeType(tag: DW_TAG_array_type, baseType: !149, size: 256, elements: !2248)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "s_uuid", scope: !577, file: !44, line: 1478, baseType: !2934, size: 128, offset: 7040)
!2934 = !DIDerivedType(tag: DW_TAG_typedef, name: "uuid_t", file: !2935, line: 18, baseType: !2936)
!2935 = !DIFile(filename: "./include/linux/uuid.h", directory: "/home/lizy2001/genbc/linux")
!2936 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2935, line: 16, size: 128, elements: !2937)
!2937 = !{!2938}
!2938 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2936, file: !2935, line: 17, baseType: !2939, size: 128)
!2939 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1373, size: 128, elements: !1755)
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "s_max_links", scope: !577, file: !44, line: 1480, baseType: !7, size: 32, offset: 7168)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "s_mode", scope: !577, file: !44, line: 1481, baseType: !2942, size: 32, offset: 7200)
!2942 = !DIDerivedType(tag: DW_TAG_typedef, name: "fmode_t", file: !181, line: 150, baseType: !7)
!2943 = !DIDerivedType(tag: DW_TAG_member, name: "s_vfs_rename_mutex", scope: !577, file: !44, line: 1487, baseType: !1194, size: 192, offset: 7232)
!2944 = !DIDerivedType(tag: DW_TAG_member, name: "s_subtype", scope: !577, file: !44, line: 1493, baseType: !147, size: 64, offset: 7424)
!2945 = !DIDerivedType(tag: DW_TAG_member, name: "s_d_op", scope: !577, file: !44, line: 1495, baseType: !2946, size: 64, offset: 7488)
!2946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2947, size: 64)
!2947 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2948)
!2948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dentry_operations", file: !363, line: 135, size: 1024, align: 512, elements: !2949)
!2949 = !{!2950, !2954, !2955, !2962, !2968, !2972, !2976, !2980, !2981, !2985, !2989, !2994, !2998}
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "d_revalidate", scope: !2948, file: !363, line: 136, baseType: !2951, size: 64)
!2951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2952, size: 64)
!2952 = !DISubroutineType(types: !2953)
!2953 = !{!240, !365, !7}
!2954 = !DIDerivedType(tag: DW_TAG_member, name: "d_weak_revalidate", scope: !2948, file: !363, line: 137, baseType: !2951, size: 64, offset: 64)
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "d_hash", scope: !2948, file: !363, line: 138, baseType: !2956, size: 64, offset: 128)
!2956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2957, size: 64)
!2957 = !DISubroutineType(types: !2958)
!2958 = !{!240, !2959, !2961}
!2959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2960, size: 64)
!2960 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !366)
!2961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !389, size: 64)
!2962 = !DIDerivedType(tag: DW_TAG_member, name: "d_compare", scope: !2948, file: !363, line: 139, baseType: !2963, size: 64, offset: 192)
!2963 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2964, size: 64)
!2964 = !DISubroutineType(types: !2965)
!2965 = !{!240, !2959, !7, !147, !2966}
!2966 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2967, size: 64)
!2967 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !389)
!2968 = !DIDerivedType(tag: DW_TAG_member, name: "d_delete", scope: !2948, file: !363, line: 141, baseType: !2969, size: 64, offset: 256)
!2969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2970, size: 64)
!2970 = !DISubroutineType(types: !2971)
!2971 = !{!240, !2959}
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "d_init", scope: !2948, file: !363, line: 142, baseType: !2973, size: 64, offset: 320)
!2973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2974, size: 64)
!2974 = !DISubroutineType(types: !2975)
!2975 = !{!240, !365}
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "d_release", scope: !2948, file: !363, line: 143, baseType: !2977, size: 64, offset: 384)
!2977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2978, size: 64)
!2978 = !DISubroutineType(types: !2979)
!2979 = !{null, !365}
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "d_prune", scope: !2948, file: !363, line: 144, baseType: !2977, size: 64, offset: 448)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "d_iput", scope: !2948, file: !363, line: 145, baseType: !2982, size: 64, offset: 512)
!2982 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2983, size: 64)
!2983 = !DISubroutineType(types: !2984)
!2984 = !{null, !365, !408}
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "d_dname", scope: !2948, file: !363, line: 146, baseType: !2986, size: 64, offset: 576)
!2986 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2987, size: 64)
!2987 = !DISubroutineType(types: !2988)
!2988 = !{!256, !365, !256, !240}
!2989 = !DIDerivedType(tag: DW_TAG_member, name: "d_automount", scope: !2948, file: !363, line: 147, baseType: !2990, size: 64, offset: 640)
!2990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2991, size: 64)
!2991 = !DISubroutineType(types: !2992)
!2992 = !{!361, !2993}
!2993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !357, size: 64)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "d_manage", scope: !2948, file: !363, line: 148, baseType: !2995, size: 64, offset: 704)
!2995 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2996, size: 64)
!2996 = !DISubroutineType(types: !2997)
!2997 = !{!240, !526, !180}
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "d_real", scope: !2948, file: !363, line: 149, baseType: !2999, size: 64, offset: 768)
!2999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3000, size: 64)
!3000 = !DISubroutineType(types: !3001)
!3001 = !{!365, !365, !3002}
!3002 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3003, size: 64)
!3003 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !409)
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "cleancache_poolid", scope: !577, file: !44, line: 1500, baseType: !240, size: 32, offset: 7552)
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "s_shrink", scope: !577, file: !44, line: 1502, baseType: !3006, size: 448, offset: 7616)
!3006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "shrinker", file: !2436, line: 60, size: 448, elements: !3007)
!3007 = !{!3008, !3013, !3014, !3015, !3016, !3017, !3018}
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "count_objects", scope: !3006, file: !2436, line: 61, baseType: !3009, size: 64)
!3009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3010, size: 64)
!3010 = !DISubroutineType(types: !3011)
!3011 = !{!306, !3012, !2434}
!3012 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3006, size: 64)
!3013 = !DIDerivedType(tag: DW_TAG_member, name: "scan_objects", scope: !3006, file: !2436, line: 63, baseType: !3009, size: 64, offset: 64)
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "batch", scope: !3006, file: !2436, line: 66, baseType: !291, size: 64, offset: 128)
!3015 = !DIDerivedType(tag: DW_TAG_member, name: "seeks", scope: !3006, file: !2436, line: 67, baseType: !240, size: 32, offset: 192)
!3016 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3006, file: !2436, line: 68, baseType: !7, size: 32, offset: 224)
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !3006, file: !2436, line: 71, baseType: !201, size: 128, offset: 256)
!3018 = !DIDerivedType(tag: DW_TAG_member, name: "nr_deferred", scope: !3006, file: !2436, line: 77, baseType: !3019, size: 64, offset: 384)
!3019 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !752, size: 64)
!3020 = !DIDerivedType(tag: DW_TAG_member, name: "s_remove_count", scope: !577, file: !44, line: 1505, baseType: !752, size: 64, offset: 8064)
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "s_fsnotify_inode_refs", scope: !577, file: !44, line: 1508, baseType: !752, size: 64, offset: 8128)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "s_readonly_remount", scope: !577, file: !44, line: 1511, baseType: !240, size: 32, offset: 8192)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "s_wb_err", scope: !577, file: !44, line: 1514, baseType: !930, size: 32, offset: 8224)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "s_dio_done_wq", scope: !577, file: !44, line: 1517, baseType: !3025, size: 64, offset: 8256)
!3025 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3026, size: 64)
!3026 = !DICompositeType(tag: DW_TAG_structure_type, name: "workqueue_struct", file: !1980, line: 18, flags: DIFlagFwdDecl)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "s_pins", scope: !577, file: !44, line: 1518, baseType: !615, size: 64, offset: 8320)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "s_user_ns", scope: !577, file: !44, line: 1525, baseType: !1733, size: 64, offset: 8384)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "s_dentry_lru", scope: !577, file: !44, line: 1532, baseType: !3030, size: 64, offset: 8448)
!3030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "list_lru", file: !3031, line: 52, size: 64, elements: !3032)
!3031 = !DIFile(filename: "./include/linux/list_lru.h", directory: "/home/lizy2001/genbc/linux")
!3032 = !{!3033}
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !3030, file: !3031, line: 53, baseType: !3034, size: 64)
!3034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3035, size: 64)
!3035 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "list_lru_node", file: !3031, line: 40, size: 256, elements: !3036)
!3036 = !{!3037, !3038, !3043}
!3037 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3035, file: !3031, line: 42, baseType: !214)
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "lru", scope: !3035, file: !3031, line: 44, baseType: !3039, size: 192)
!3039 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "list_lru_one", file: !3031, line: 28, size: 192, elements: !3040)
!3040 = !{!3041, !3042}
!3041 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !3039, file: !3031, line: 29, baseType: !201, size: 128)
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "nr_items", scope: !3039, file: !3031, line: 31, baseType: !291, size: 64, offset: 128)
!3043 = !DIDerivedType(tag: DW_TAG_member, name: "nr_items", scope: !3035, file: !3031, line: 49, baseType: !291, size: 64, offset: 192)
!3044 = !DIDerivedType(tag: DW_TAG_member, name: "s_inode_lru", scope: !577, file: !44, line: 1533, baseType: !3030, size: 64, offset: 8512)
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !577, file: !44, line: 1534, baseType: !348, size: 128, align: 64, offset: 8576)
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "destroy_work", scope: !577, file: !44, line: 1535, baseType: !1979, size: 256, offset: 8704)
!3047 = !DIDerivedType(tag: DW_TAG_member, name: "s_sync_lock", scope: !577, file: !44, line: 1537, baseType: !1194, size: 192, offset: 8960)
!3048 = !DIDerivedType(tag: DW_TAG_member, name: "s_stack_depth", scope: !577, file: !44, line: 1542, baseType: !240, size: 32, offset: 9152)
!3049 = !DIDerivedType(tag: DW_TAG_member, name: "s_inode_list_lock", scope: !577, file: !44, line: 1545, baseType: !214, offset: 9184)
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "s_inodes", scope: !577, file: !44, line: 1546, baseType: !201, size: 128, offset: 9216)
!3051 = !DIDerivedType(tag: DW_TAG_member, name: "s_inode_wblist_lock", scope: !577, file: !44, line: 1548, baseType: !214, offset: 9344)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "s_inodes_wb", scope: !577, file: !44, line: 1549, baseType: !201, size: 128, offset: 9344)
!3053 = !DIDerivedType(tag: DW_TAG_member, name: "i_mapping", scope: !409, file: !44, line: 624, baseType: !714, size: 64, offset: 256)
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "i_ino", scope: !409, file: !44, line: 631, baseType: !306, size: 64, offset: 320)
!3055 = !DIDerivedType(tag: DW_TAG_member, scope: !409, file: !44, line: 639, baseType: !3056, size: 32, offset: 384)
!3056 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !409, file: !44, line: 639, size: 32, elements: !3057)
!3057 = !{!3058, !3060}
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "i_nlink", scope: !3056, file: !44, line: 640, baseType: !3059, size: 32)
!3059 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "__i_nlink", scope: !3056, file: !44, line: 641, baseType: !7, size: 32)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "i_rdev", scope: !409, file: !44, line: 643, baseType: !490, size: 32, offset: 416)
!3062 = !DIDerivedType(tag: DW_TAG_member, name: "i_size", scope: !409, file: !44, line: 644, baseType: !508, size: 64, offset: 448)
!3063 = !DIDerivedType(tag: DW_TAG_member, name: "i_atime", scope: !409, file: !44, line: 645, baseType: !512, size: 128, offset: 512)
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "i_mtime", scope: !409, file: !44, line: 646, baseType: !512, size: 128, offset: 640)
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "i_ctime", scope: !409, file: !44, line: 647, baseType: !512, size: 128, offset: 768)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "i_lock", scope: !409, file: !44, line: 648, baseType: !214, offset: 896)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "i_bytes", scope: !409, file: !44, line: 649, baseType: !298, size: 16, offset: 896)
!3068 = !DIDerivedType(tag: DW_TAG_member, name: "i_blkbits", scope: !409, file: !44, line: 650, baseType: !1372, size: 8, offset: 912)
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "i_write_hint", scope: !409, file: !44, line: 651, baseType: !1372, size: 8, offset: 920)
!3070 = !DIDerivedType(tag: DW_TAG_member, name: "i_blocks", scope: !409, file: !44, line: 652, baseType: !2608, size: 64, offset: 960)
!3071 = !DIDerivedType(tag: DW_TAG_member, name: "i_state", scope: !409, file: !44, line: 659, baseType: !306, size: 64, offset: 1024)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "i_rwsem", scope: !409, file: !44, line: 660, baseType: !748, size: 256, offset: 1088)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "dirtied_when", scope: !409, file: !44, line: 662, baseType: !306, size: 64, offset: 1344)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "dirtied_time_when", scope: !409, file: !44, line: 663, baseType: !306, size: 64, offset: 1408)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "i_hash", scope: !409, file: !44, line: 665, baseType: !619, size: 128, offset: 1472)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "i_io_list", scope: !409, file: !44, line: 666, baseType: !201, size: 128, offset: 1600)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "i_lru", scope: !409, file: !44, line: 675, baseType: !201, size: 128, offset: 1728)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "i_sb_list", scope: !409, file: !44, line: 676, baseType: !201, size: 128, offset: 1856)
!3079 = !DIDerivedType(tag: DW_TAG_member, name: "i_wb_list", scope: !409, file: !44, line: 677, baseType: !201, size: 128, offset: 1984)
!3080 = !DIDerivedType(tag: DW_TAG_member, scope: !409, file: !44, line: 678, baseType: !3081, size: 128, offset: 2112)
!3081 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !409, file: !44, line: 678, size: 128, elements: !3082)
!3082 = !{!3083, !3084}
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "i_dentry", scope: !3081, file: !44, line: 679, baseType: !615, size: 64)
!3084 = !DIDerivedType(tag: DW_TAG_member, name: "i_rcu", scope: !3081, file: !44, line: 680, baseType: !348, size: 128, align: 64)
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "i_version", scope: !409, file: !44, line: 682, baseType: !754, size: 64, offset: 2240)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "i_sequence", scope: !409, file: !44, line: 683, baseType: !754, size: 64, offset: 2304)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "i_count", scope: !409, file: !44, line: 684, baseType: !728, size: 32, offset: 2368)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "i_dio_count", scope: !409, file: !44, line: 685, baseType: !728, size: 32, offset: 2400)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "i_writecount", scope: !409, file: !44, line: 686, baseType: !728, size: 32, offset: 2432)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "i_readcount", scope: !409, file: !44, line: 688, baseType: !728, size: 32, offset: 2464)
!3091 = !DIDerivedType(tag: DW_TAG_member, scope: !409, file: !44, line: 690, baseType: !3092, size: 64, offset: 2496)
!3092 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !409, file: !44, line: 690, size: 64, elements: !3093)
!3093 = !{!3094, !3317}
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "i_fop", scope: !3092, file: !44, line: 691, baseType: !3095, size: 64)
!3095 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3096, size: 64)
!3096 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3097)
!3097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_operations", file: !44, line: 1822, size: 2048, elements: !3098)
!3098 = !{!3099, !3100, !3104, !3109, !3113, !3114, !3115, !3119, !3132, !3133, !3141, !3145, !3146, !3150, !3151, !3155, !3160, !3161, !3165, !3169, !3277, !3281, !3282, !3286, !3287, !3291, !3295, !3300, !3304, !3308, !3312, !3316}
!3099 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !3097, file: !44, line: 1823, baseType: !610, size: 64)
!3100 = !DIDerivedType(tag: DW_TAG_member, name: "llseek", scope: !3097, file: !44, line: 1824, baseType: !3101, size: 64, offset: 64)
!3101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3102, size: 64)
!3102 = !DISubroutineType(types: !3103)
!3103 = !{!508, !335, !508, !240}
!3104 = !DIDerivedType(tag: DW_TAG_member, name: "read", scope: !3097, file: !44, line: 1825, baseType: !3105, size: 64, offset: 128)
!3105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3106, size: 64)
!3106 = !DISubroutineType(types: !3107)
!3107 = !{!287, !335, !256, !303, !3108}
!3108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !508, size: 64)
!3109 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !3097, file: !44, line: 1826, baseType: !3110, size: 64, offset: 192)
!3110 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3111, size: 64)
!3111 = !DISubroutineType(types: !3112)
!3112 = !{!287, !335, !147, !303, !3108}
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "read_iter", scope: !3097, file: !44, line: 1827, baseType: !825, size: 64, offset: 256)
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "write_iter", scope: !3097, file: !44, line: 1828, baseType: !825, size: 64, offset: 320)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "iopoll", scope: !3097, file: !44, line: 1829, baseType: !3116, size: 64, offset: 384)
!3116 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3117, size: 64)
!3117 = !DISubroutineType(types: !3118)
!3118 = !{!240, !828, !180}
!3119 = !DIDerivedType(tag: DW_TAG_member, name: "iterate", scope: !3097, file: !44, line: 1830, baseType: !3120, size: 64, offset: 448)
!3120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3121, size: 64)
!3121 = !DISubroutineType(types: !3122)
!3122 = !{!240, !335, !3123}
!3123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3124, size: 64)
!3124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dir_context", file: !44, line: 1776, size: 128, elements: !3125)
!3125 = !{!3126, !3131}
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "actor", scope: !3124, file: !44, line: 1777, baseType: !3127, size: 64)
!3127 = !DIDerivedType(tag: DW_TAG_typedef, name: "filldir_t", file: !44, line: 1773, baseType: !3128)
!3128 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3129, size: 64)
!3129 = !DISubroutineType(types: !3130)
!3130 = !{!240, !3123, !147, !240, !508, !400, !7}
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !3124, file: !44, line: 1778, baseType: !508, size: 64, offset: 64)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "iterate_shared", scope: !3097, file: !44, line: 1831, baseType: !3120, size: 64, offset: 512)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "poll", scope: !3097, file: !44, line: 1832, baseType: !3134, size: 64, offset: 576)
!3134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3135, size: 64)
!3135 = !DISubroutineType(types: !3136)
!3136 = !{!3137, !335, !3139}
!3137 = !DIDerivedType(tag: DW_TAG_typedef, name: "__poll_t", file: !3138, line: 52, baseType: !7)
!3138 = !DIFile(filename: "./include/uapi/linux/types.h", directory: "/home/lizy2001/genbc/linux")
!3139 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3140, size: 64)
!3140 = !DICompositeType(tag: DW_TAG_structure_type, name: "poll_table_struct", file: !596, line: 27, flags: DIFlagFwdDecl)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "unlocked_ioctl", scope: !3097, file: !44, line: 1833, baseType: !3142, size: 64, offset: 640)
!3142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3143, size: 64)
!3143 = !DISubroutineType(types: !3144)
!3144 = !{!291, !335, !7, !306}
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "compat_ioctl", scope: !3097, file: !44, line: 1834, baseType: !3142, size: 64, offset: 704)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "mmap", scope: !3097, file: !44, line: 1835, baseType: !3147, size: 64, offset: 768)
!3147 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3148, size: 64)
!3148 = !DISubroutineType(types: !3149)
!3149 = !{!240, !335, !1002}
!3150 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_supported_flags", scope: !3097, file: !44, line: 1836, baseType: !306, size: 64, offset: 832)
!3151 = !DIDerivedType(tag: DW_TAG_member, name: "open", scope: !3097, file: !44, line: 1837, baseType: !3152, size: 64, offset: 896)
!3152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3153, size: 64)
!3153 = !DISubroutineType(types: !3154)
!3154 = !{!240, !408, !335}
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !3097, file: !44, line: 1838, baseType: !3156, size: 64, offset: 960)
!3156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3157, size: 64)
!3157 = !DISubroutineType(types: !3158)
!3158 = !{!240, !335, !3159}
!3159 = !DIDerivedType(tag: DW_TAG_typedef, name: "fl_owner_t", file: !44, line: 1007, baseType: !330)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !3097, file: !44, line: 1839, baseType: !3152, size: 64, offset: 1024)
!3161 = !DIDerivedType(tag: DW_TAG_member, name: "fsync", scope: !3097, file: !44, line: 1840, baseType: !3162, size: 64, offset: 1088)
!3162 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3163, size: 64)
!3163 = !DISubroutineType(types: !3164)
!3164 = !{!240, !335, !508, !508, !240}
!3165 = !DIDerivedType(tag: DW_TAG_member, name: "fasync", scope: !3097, file: !44, line: 1841, baseType: !3166, size: 64, offset: 1152)
!3166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3167, size: 64)
!3167 = !DISubroutineType(types: !3168)
!3168 = !{!240, !240, !335, !240}
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3097, file: !44, line: 1842, baseType: !3170, size: 64, offset: 1216)
!3170 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3171, size: 64)
!3171 = !DISubroutineType(types: !3172)
!3172 = !{!240, !335, !240, !3173}
!3173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3174, size: 64)
!3174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_lock", file: !44, line: 1062, size: 1664, elements: !3175)
!3175 = !{!3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3207, !3208, !3209, !3222, !3253}
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "fl_blocker", scope: !3174, file: !44, line: 1063, baseType: !3173, size: 64)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "fl_list", scope: !3174, file: !44, line: 1064, baseType: !201, size: 128, offset: 64)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "fl_link", scope: !3174, file: !44, line: 1065, baseType: !619, size: 128, offset: 192)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "fl_blocked_requests", scope: !3174, file: !44, line: 1066, baseType: !201, size: 128, offset: 320)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "fl_blocked_member", scope: !3174, file: !44, line: 1069, baseType: !201, size: 128, offset: 448)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "fl_owner", scope: !3174, file: !44, line: 1072, baseType: !3159, size: 64, offset: 576)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "fl_flags", scope: !3174, file: !44, line: 1073, baseType: !7, size: 32, offset: 640)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "fl_type", scope: !3174, file: !44, line: 1074, baseType: !406, size: 8, offset: 672)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "fl_pid", scope: !3174, file: !44, line: 1075, baseType: !7, size: 32, offset: 704)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "fl_link_cpu", scope: !3174, file: !44, line: 1076, baseType: !240, size: 32, offset: 736)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "fl_wait", scope: !3174, file: !44, line: 1077, baseType: !1501, size: 128, offset: 768)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "fl_file", scope: !3174, file: !44, line: 1078, baseType: !335, size: 64, offset: 896)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "fl_start", scope: !3174, file: !44, line: 1079, baseType: !508, size: 64, offset: 960)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "fl_end", scope: !3174, file: !44, line: 1080, baseType: !508, size: 64, offset: 1024)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "fl_fasync", scope: !3174, file: !44, line: 1082, baseType: !3191, size: 64, offset: 1088)
!3191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3192, size: 64)
!3192 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fasync_struct", file: !44, line: 1314, size: 320, elements: !3193)
!3193 = !{!3194, !3202, !3203, !3204, !3205, !3206}
!3194 = !DIDerivedType(tag: DW_TAG_member, name: "fa_lock", scope: !3192, file: !44, line: 1315, baseType: !3195)
!3195 = !DIDerivedType(tag: DW_TAG_typedef, name: "rwlock_t", file: !3196, line: 20, baseType: !3197)
!3196 = !DIFile(filename: "./include/linux/rwlock_types.h", directory: "/home/lizy2001/genbc/linux")
!3197 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3196, line: 11, elements: !3198)
!3198 = !{!3199}
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "raw_lock", scope: !3197, file: !3196, line: 12, baseType: !3200)
!3200 = !DIDerivedType(tag: DW_TAG_typedef, name: "arch_rwlock_t", file: !226, line: 33, baseType: !3201)
!3201 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !226, line: 31, elements: !228)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "magic", scope: !3192, file: !44, line: 1316, baseType: !240, size: 32)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "fa_fd", scope: !3192, file: !44, line: 1317, baseType: !240, size: 32, offset: 32)
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "fa_next", scope: !3192, file: !44, line: 1318, baseType: !3191, size: 64, offset: 64)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "fa_file", scope: !3192, file: !44, line: 1319, baseType: !335, size: 64, offset: 128)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "fa_rcu", scope: !3192, file: !44, line: 1320, baseType: !348, size: 128, align: 64, offset: 192)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "fl_break_time", scope: !3174, file: !44, line: 1084, baseType: !306, size: 64, offset: 1152)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "fl_downgrade_time", scope: !3174, file: !44, line: 1085, baseType: !306, size: 64, offset: 1216)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "fl_ops", scope: !3174, file: !44, line: 1087, baseType: !3210, size: 64, offset: 1280)
!3210 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3211, size: 64)
!3211 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3212)
!3212 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_lock_operations", file: !44, line: 1011, size: 128, elements: !3213)
!3213 = !{!3214, !3218}
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "fl_copy_lock", scope: !3212, file: !44, line: 1012, baseType: !3215, size: 64)
!3215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3216, size: 64)
!3216 = !DISubroutineType(types: !3217)
!3217 = !{null, !3173, !3173}
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "fl_release_private", scope: !3212, file: !44, line: 1013, baseType: !3219, size: 64, offset: 64)
!3219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3220, size: 64)
!3220 = !DISubroutineType(types: !3221)
!3221 = !{null, !3173}
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "fl_lmops", scope: !3174, file: !44, line: 1088, baseType: !3223, size: 64, offset: 1344)
!3223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3224, size: 64)
!3224 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3225)
!3225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lock_manager_operations", file: !44, line: 1016, size: 512, elements: !3226)
!3226 = !{!3227, !3231, !3235, !3236, !3240, !3244, !3248, !3252}
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "lm_get_owner", scope: !3225, file: !44, line: 1017, baseType: !3228, size: 64)
!3228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3229, size: 64)
!3229 = !DISubroutineType(types: !3230)
!3230 = !{!3159, !3159}
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "lm_put_owner", scope: !3225, file: !44, line: 1018, baseType: !3232, size: 64, offset: 64)
!3232 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3233, size: 64)
!3233 = !DISubroutineType(types: !3234)
!3234 = !{null, !3159}
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "lm_notify", scope: !3225, file: !44, line: 1019, baseType: !3219, size: 64, offset: 128)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "lm_grant", scope: !3225, file: !44, line: 1020, baseType: !3237, size: 64, offset: 192)
!3237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3238, size: 64)
!3238 = !DISubroutineType(types: !3239)
!3239 = !{!240, !3173, !240}
!3240 = !DIDerivedType(tag: DW_TAG_member, name: "lm_break", scope: !3225, file: !44, line: 1021, baseType: !3241, size: 64, offset: 256)
!3241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3242, size: 64)
!3242 = !DISubroutineType(types: !3243)
!3243 = !{!180, !3173}
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "lm_change", scope: !3225, file: !44, line: 1022, baseType: !3245, size: 64, offset: 320)
!3245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3246, size: 64)
!3246 = !DISubroutineType(types: !3247)
!3247 = !{!240, !3173, !240, !204}
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "lm_setup", scope: !3225, file: !44, line: 1023, baseType: !3249, size: 64, offset: 384)
!3249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3250, size: 64)
!3250 = !DISubroutineType(types: !3251)
!3251 = !{null, !3173, !802}
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "lm_breaker_owns_lease", scope: !3225, file: !44, line: 1024, baseType: !3241, size: 64, offset: 448)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "fl_u", scope: !3174, file: !44, line: 1097, baseType: !3254, size: 256, offset: 1408)
!3254 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3174, file: !44, line: 1089, size: 256, elements: !3255)
!3255 = !{!3256, !3265, !3271}
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "nfs_fl", scope: !3254, file: !44, line: 1090, baseType: !3257, size: 256)
!3257 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nfs_lock_info", file: !3258, line: 10, size: 256, elements: !3259)
!3258 = !DIFile(filename: "./include/linux/nfs_fs_i.h", directory: "/home/lizy2001/genbc/linux")
!3259 = !{!3260, !3261, !3264}
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !3257, file: !3258, line: 11, baseType: !152, size: 32)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !3257, file: !3258, line: 12, baseType: !3262, size: 64, offset: 64)
!3262 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3263, size: 64)
!3263 = !DICompositeType(tag: DW_TAG_structure_type, name: "nlm_lockowner", file: !3258, line: 5, flags: DIFlagFwdDecl)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !3257, file: !3258, line: 13, baseType: !201, size: 128, offset: 128)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "nfs4_fl", scope: !3254, file: !44, line: 1091, baseType: !3266, size: 64)
!3266 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nfs4_lock_info", file: !3258, line: 17, size: 64, elements: !3267)
!3267 = !{!3268}
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !3266, file: !3258, line: 18, baseType: !3269, size: 64)
!3269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3270, size: 64)
!3270 = !DICompositeType(tag: DW_TAG_structure_type, name: "nfs4_lock_state", file: !3258, line: 16, flags: DIFlagFwdDecl)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "afs", scope: !3254, file: !44, line: 1096, baseType: !3272, size: 192)
!3272 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3254, file: !44, line: 1092, size: 192, elements: !3273)
!3273 = !{!3274, !3275, !3276}
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "link", scope: !3272, file: !44, line: 1093, baseType: !201, size: 128)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !3272, file: !44, line: 1094, baseType: !240, size: 32, offset: 128)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "debug_id", scope: !3272, file: !44, line: 1095, baseType: !7, size: 32, offset: 160)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "sendpage", scope: !3097, file: !44, line: 1843, baseType: !3278, size: 64, offset: 1280)
!3278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3279, size: 64)
!3279 = !DISubroutineType(types: !3280)
!3280 = !{!287, !335, !701, !240, !303, !3108, !240}
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "get_unmapped_area", scope: !3097, file: !44, line: 1844, baseType: !1122, size: 64, offset: 1344)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "check_flags", scope: !3097, file: !44, line: 1845, baseType: !3283, size: 64, offset: 1408)
!3283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3284, size: 64)
!3284 = !DISubroutineType(types: !3285)
!3285 = !{!240, !240}
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "flock", scope: !3097, file: !44, line: 1846, baseType: !3170, size: 64, offset: 1472)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "splice_write", scope: !3097, file: !44, line: 1847, baseType: !3288, size: 64, offset: 1536)
!3288 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3289, size: 64)
!3289 = !DISubroutineType(types: !3290)
!3290 = !{!287, !880, !335, !3108, !303, !7}
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "splice_read", scope: !3097, file: !44, line: 1848, baseType: !3292, size: 64, offset: 1600)
!3292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3293, size: 64)
!3293 = !DISubroutineType(types: !3294)
!3294 = !{!287, !335, !3108, !880, !303, !7}
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "setlease", scope: !3097, file: !44, line: 1849, baseType: !3296, size: 64, offset: 1664)
!3296 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3297, size: 64)
!3297 = !DISubroutineType(types: !3298)
!3298 = !{!240, !335, !291, !3299, !802}
!3299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3173, size: 64)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "fallocate", scope: !3097, file: !44, line: 1850, baseType: !3301, size: 64, offset: 1728)
!3301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3302, size: 64)
!3302 = !DISubroutineType(types: !3303)
!3303 = !{!291, !335, !240, !508, !508}
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "show_fdinfo", scope: !3097, file: !44, line: 1852, baseType: !3305, size: 64, offset: 1792)
!3305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3306, size: 64)
!3306 = !DISubroutineType(types: !3307)
!3307 = !{null, !691, !335}
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "copy_file_range", scope: !3097, file: !44, line: 1856, baseType: !3309, size: 64, offset: 1856)
!3309 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3310, size: 64)
!3310 = !DISubroutineType(types: !3311)
!3311 = !{!287, !335, !508, !335, !508, !303, !7}
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "remap_file_range", scope: !3097, file: !44, line: 1858, baseType: !3313, size: 64, offset: 1920)
!3313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3314, size: 64)
!3314 = !DISubroutineType(types: !3315)
!3315 = !{!508, !335, !508, !335, !508, !508, !7}
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "fadvise", scope: !3097, file: !44, line: 1861, baseType: !3162, size: 64, offset: 1984)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "free_inode", scope: !3092, file: !44, line: 692, baseType: !644, size: 64)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "i_flctx", scope: !409, file: !44, line: 694, baseType: !3319, size: 64, offset: 2560)
!3319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3320, size: 64)
!3320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_lock_context", file: !44, line: 1100, size: 384, elements: !3321)
!3321 = !{!3322, !3323, !3324, !3325}
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "flc_lock", scope: !3320, file: !44, line: 1101, baseType: !214)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "flc_flock", scope: !3320, file: !44, line: 1102, baseType: !201, size: 128)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "flc_posix", scope: !3320, file: !44, line: 1103, baseType: !201, size: 128, offset: 128)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "flc_lease", scope: !3320, file: !44, line: 1104, baseType: !201, size: 128, offset: 256)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "i_data", scope: !409, file: !44, line: 695, baseType: !715, size: 1216, align: 64, offset: 2624)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "i_devices", scope: !409, file: !44, line: 696, baseType: !201, size: 128, offset: 3840)
!3328 = !DIDerivedType(tag: DW_TAG_member, scope: !409, file: !44, line: 697, baseType: !3329, size: 64, offset: 3968)
!3329 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !409, file: !44, line: 697, size: 64, elements: !3330)
!3330 = !{!3331, !3332, !3333, !3336, !3337}
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "i_pipe", scope: !3329, file: !44, line: 698, baseType: !880, size: 64)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "i_bdev", scope: !3329, file: !44, line: 699, baseType: !2633, size: 64)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "i_cdev", scope: !3329, file: !44, line: 700, baseType: !3334, size: 64)
!3334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3335, size: 64)
!3335 = !DICompositeType(tag: DW_TAG_structure_type, name: "cdev", file: !44, line: 700, flags: DIFlagFwdDecl)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "i_link", scope: !3329, file: !44, line: 701, baseType: !256, size: 64)
!3337 = !DIDerivedType(tag: DW_TAG_member, name: "i_dir_seq", scope: !3329, file: !44, line: 702, baseType: !7, size: 32)
!3338 = !DIDerivedType(tag: DW_TAG_member, name: "i_generation", scope: !409, file: !44, line: 705, baseType: !154, size: 32, offset: 4032)
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "i_fsnotify_mask", scope: !409, file: !44, line: 708, baseType: !154, size: 32, offset: 4064)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "i_fsnotify_marks", scope: !409, file: !44, line: 709, baseType: !2929, size: 64, offset: 4096)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "i_private", scope: !409, file: !44, line: 720, baseType: !330, size: 64, offset: 4160)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "d_iname", scope: !366, file: !363, line: 98, baseType: !3343, size: 256, offset: 448)
!3343 = !DICompositeType(tag: DW_TAG_array_type, baseType: !406, size: 256, elements: !2248)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "d_lockref", scope: !366, file: !363, line: 101, baseType: !3345, size: 32, offset: 704)
!3345 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lockref", file: !3346, line: 25, size: 32, elements: !3347)
!3346 = !DIFile(filename: "./include/linux/lockref.h", directory: "/home/lizy2001/genbc/linux")
!3347 = !{!3348}
!3348 = !DIDerivedType(tag: DW_TAG_member, scope: !3345, file: !3346, line: 26, baseType: !3349, size: 32)
!3349 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3345, file: !3346, line: 26, size: 32, elements: !3350)
!3350 = !{!3351}
!3351 = !DIDerivedType(tag: DW_TAG_member, scope: !3349, file: !3346, line: 30, baseType: !3352, size: 32)
!3352 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !3349, file: !3346, line: 30, size: 32, elements: !3353)
!3353 = !{!3354, !3355}
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3352, file: !3346, line: 31, baseType: !214)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3352, file: !3346, line: 32, baseType: !240, size: 32)
!3356 = !DIDerivedType(tag: DW_TAG_member, name: "d_op", scope: !366, file: !363, line: 102, baseType: !2946, size: 64, offset: 768)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "d_sb", scope: !366, file: !363, line: 103, baseType: !576, size: 64, offset: 832)
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "d_time", scope: !366, file: !363, line: 104, baseType: !306, size: 64, offset: 896)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "d_fsdata", scope: !366, file: !363, line: 105, baseType: !330, size: 64, offset: 960)
!3360 = !DIDerivedType(tag: DW_TAG_member, scope: !366, file: !363, line: 107, baseType: !3361, size: 128, offset: 1024)
!3361 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !366, file: !363, line: 107, size: 128, elements: !3362)
!3362 = !{!3363, !3364}
!3363 = !DIDerivedType(tag: DW_TAG_member, name: "d_lru", scope: !3361, file: !363, line: 108, baseType: !201, size: 128)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "d_wait", scope: !3361, file: !363, line: 109, baseType: !3365, size: 64)
!3365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1501, size: 64)
!3366 = !DIDerivedType(tag: DW_TAG_member, name: "d_child", scope: !366, file: !363, line: 111, baseType: !201, size: 128, offset: 1152)
!3367 = !DIDerivedType(tag: DW_TAG_member, name: "d_subdirs", scope: !366, file: !363, line: 112, baseType: !201, size: 128, offset: 1280)
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "d_u", scope: !366, file: !363, line: 120, baseType: !3369, size: 128, offset: 1408)
!3369 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !366, file: !363, line: 116, size: 128, elements: !3370)
!3370 = !{!3371, !3372, !3373}
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "d_alias", scope: !3369, file: !363, line: 117, baseType: !619, size: 128)
!3372 = !DIDerivedType(tag: DW_TAG_member, name: "d_in_lookup_hash", scope: !3369, file: !363, line: 118, baseType: !380, size: 128)
!3373 = !DIDerivedType(tag: DW_TAG_member, name: "d_rcu", scope: !3369, file: !363, line: 119, baseType: !348, size: 128, align: 64)
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "f_inode", scope: !336, file: !44, line: 922, baseType: !408, size: 64, offset: 256)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "f_op", scope: !336, file: !44, line: 923, baseType: !3095, size: 64, offset: 320)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "f_lock", scope: !336, file: !44, line: 929, baseType: !214, offset: 384)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "f_write_hint", scope: !336, file: !44, line: 930, baseType: !43, size: 32, offset: 384)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "f_count", scope: !336, file: !44, line: 931, baseType: !752, size: 64, offset: 448)
!3379 = !DIDerivedType(tag: DW_TAG_member, name: "f_flags", scope: !336, file: !44, line: 932, baseType: !7, size: 32, offset: 512)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "f_mode", scope: !336, file: !44, line: 933, baseType: !2942, size: 32, offset: 544)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "f_pos_lock", scope: !336, file: !44, line: 934, baseType: !1194, size: 192, offset: 576)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "f_pos", scope: !336, file: !44, line: 935, baseType: !508, size: 64, offset: 768)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "f_owner", scope: !336, file: !44, line: 936, baseType: !3384, size: 192, offset: 832)
!3384 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fown_struct", file: !44, line: 885, size: 192, elements: !3385)
!3385 = !{!3386, !3387, !3388, !3389, !3390, !3391}
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3384, file: !44, line: 886, baseType: !3195)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !3384, file: !44, line: 887, baseType: !1491, size: 64)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "pid_type", scope: !3384, file: !44, line: 888, baseType: !52, size: 32, offset: 64)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3384, file: !44, line: 889, baseType: !414, size: 32, offset: 96)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "euid", scope: !3384, file: !44, line: 889, baseType: !414, size: 32, offset: 128)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "signum", scope: !3384, file: !44, line: 890, baseType: !240, size: 32, offset: 160)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "f_cred", scope: !336, file: !44, line: 937, baseType: !1567, size: 64, offset: 1024)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "f_ra", scope: !336, file: !44, line: 938, baseType: !3394, size: 256, offset: 1088)
!3394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_ra_state", file: !44, line: 896, size: 256, elements: !3395)
!3395 = !{!3396, !3397, !3398, !3399, !3400, !3401}
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !3394, file: !44, line: 897, baseType: !306, size: 64)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3394, file: !44, line: 898, baseType: !7, size: 32, offset: 64)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "async_size", scope: !3394, file: !44, line: 899, baseType: !7, size: 32, offset: 96)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "ra_pages", scope: !3394, file: !44, line: 902, baseType: !7, size: 32, offset: 128)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_miss", scope: !3394, file: !44, line: 903, baseType: !7, size: 32, offset: 160)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "prev_pos", scope: !3394, file: !44, line: 904, baseType: !508, size: 64, offset: 192)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "f_version", scope: !336, file: !44, line: 940, baseType: !400, size: 64, offset: 1344)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "private_data", scope: !336, file: !44, line: 945, baseType: !330, size: 64, offset: 1408)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "f_ep_links", scope: !336, file: !44, line: 949, baseType: !201, size: 128, offset: 1472)
!3405 = !DIDerivedType(tag: DW_TAG_member, name: "f_tfile_llink", scope: !336, file: !44, line: 950, baseType: !201, size: 128, offset: 1600)
!3406 = !DIDerivedType(tag: DW_TAG_member, name: "f_mapping", scope: !336, file: !44, line: 952, baseType: !714, size: 64, offset: 1728)
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "f_wb_err", scope: !336, file: !44, line: 953, baseType: !930, size: 32, offset: 1792)
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "f_sb_err", scope: !336, file: !44, line: 954, baseType: !930, size: 32, offset: 1824)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !325, file: !281, line: 174, baseType: !332, size: 64, offset: 320)
!3410 = !DIDerivedType(tag: DW_TAG_member, name: "mmap", scope: !325, file: !281, line: 176, baseType: !3411, size: 64, offset: 384)
!3411 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3412, size: 64)
!3412 = !DISubroutineType(types: !3413)
!3413 = !{!240, !335, !207, !324, !1002}
!3414 = !DIDerivedType(tag: DW_TAG_member, name: "attrs", scope: !313, file: !281, line: 90, baseType: !308, size: 64, offset: 192)
!3415 = !DIDerivedType(tag: DW_TAG_member, name: "bin_attrs", scope: !313, file: !281, line: 91, baseType: !3416, size: 64, offset: 256)
!3416 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !324, size: 64)
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "child_ns_type", scope: !271, file: !197, line: 143, baseType: !3418, size: 64, offset: 256)
!3418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3419, size: 64)
!3419 = !DISubroutineType(types: !3420)
!3420 = !{!3421, !207}
!3421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3422, size: 64)
!3422 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3423)
!3423 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kobj_ns_type_operations", file: !61, line: 39, size: 384, elements: !3424)
!3424 = !{!3425, !3426, !3430, !3434, !3440, !3444}
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3423, file: !61, line: 40, baseType: !60, size: 32)
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "current_may_mount", scope: !3423, file: !61, line: 41, baseType: !3427, size: 64, offset: 64)
!3427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3428, size: 64)
!3428 = !DISubroutineType(types: !3429)
!3429 = !{!180}
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "grab_current_ns", scope: !3423, file: !61, line: 42, baseType: !3431, size: 64, offset: 128)
!3431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3432, size: 64)
!3432 = !DISubroutineType(types: !3433)
!3433 = !{!330}
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "netlink_ns", scope: !3423, file: !61, line: 43, baseType: !3435, size: 64, offset: 192)
!3435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3436, size: 64)
!3436 = !DISubroutineType(types: !3437)
!3437 = !{!189, !3438}
!3438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3439, size: 64)
!3439 = !DICompositeType(tag: DW_TAG_structure_type, name: "sock", file: !61, line: 19, flags: DIFlagFwdDecl)
!3440 = !DIDerivedType(tag: DW_TAG_member, name: "initial_ns", scope: !3423, file: !61, line: 44, baseType: !3441, size: 64, offset: 256)
!3441 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3442, size: 64)
!3442 = !DISubroutineType(types: !3443)
!3443 = !{!189}
!3444 = !DIDerivedType(tag: DW_TAG_member, name: "drop_ns", scope: !3423, file: !61, line: 45, baseType: !447, size: 64, offset: 320)
!3445 = !DIDerivedType(tag: DW_TAG_member, name: "namespace", scope: !271, file: !197, line: 144, baseType: !3446, size: 64, offset: 320)
!3446 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3447, size: 64)
!3447 = !DISubroutineType(types: !3448)
!3448 = !{!189, !207}
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "get_ownership", scope: !271, file: !197, line: 145, baseType: !3450, size: 64, offset: 384)
!3450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3451, size: 64)
!3451 = !DISubroutineType(types: !3452)
!3452 = !{null, !207, !3453, !3454}
!3453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !414, size: 64)
!3454 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !422, size: 64)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "sd", scope: !196, file: !197, line: 70, baseType: !3456, size: 64, offset: 384)
!3456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3457, size: 64)
!3457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_node", file: !596, line: 123, size: 1024, elements: !3458)
!3458 = !{!3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3587, !3588, !3589, !3590, !3591}
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !3457, file: !596, line: 124, baseType: !728, size: 32)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !3457, file: !596, line: 125, baseType: !728, size: 32, offset: 32)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !3457, file: !596, line: 135, baseType: !3456, size: 64, offset: 64)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3457, file: !596, line: 136, baseType: !147, size: 64, offset: 128)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "rb", scope: !3457, file: !596, line: 138, baseType: !741, size: 192, align: 64, offset: 192)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "ns", scope: !3457, file: !596, line: 140, baseType: !189, size: 64, offset: 384)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !3457, file: !596, line: 141, baseType: !7, size: 32, offset: 448)
!3466 = !DIDerivedType(tag: DW_TAG_member, scope: !3457, file: !596, line: 142, baseType: !3467, size: 256, offset: 512)
!3467 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3457, file: !596, line: 142, size: 256, elements: !3468)
!3468 = !{!3469, !3515, !3519}
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "dir", scope: !3467, file: !596, line: 143, baseType: !3470, size: 192)
!3470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_elem_dir", file: !596, line: 91, size: 192, elements: !3471)
!3471 = !{!3472, !3473, !3474}
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "subdirs", scope: !3470, file: !596, line: 92, baseType: !306, size: 64)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !3470, file: !596, line: 94, baseType: !737, size: 64, offset: 64)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !3470, file: !596, line: 100, baseType: !3475, size: 64, offset: 128)
!3475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3476, size: 64)
!3476 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_root", file: !596, line: 180, size: 704, elements: !3477)
!3477 = !{!3478, !3479, !3480, !3487, !3488, !3489, !3513, !3514}
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "kn", scope: !3476, file: !596, line: 182, baseType: !3456, size: 64)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3476, file: !596, line: 183, baseType: !7, size: 32, offset: 64)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "ino_idr", scope: !3476, file: !596, line: 186, baseType: !3481, size: 192, offset: 128)
!3481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "idr", file: !3482, line: 19, size: 192, elements: !3483)
!3482 = !DIFile(filename: "./include/linux/idr.h", directory: "/home/lizy2001/genbc/linux")
!3483 = !{!3484, !3485, !3486}
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "idr_rt", scope: !3481, file: !3482, line: 20, baseType: !719, size: 128)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "idr_base", scope: !3481, file: !3482, line: 21, baseType: !7, size: 32, offset: 128)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "idr_next", scope: !3481, file: !3482, line: 22, baseType: !7, size: 32, offset: 160)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "last_id_lowbits", scope: !3476, file: !596, line: 187, baseType: !152, size: 32, offset: 320)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "id_highbits", scope: !3476, file: !596, line: 188, baseType: !152, size: 32, offset: 352)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "syscall_ops", scope: !3476, file: !596, line: 189, baseType: !3490, size: 64, offset: 384)
!3490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3491, size: 64)
!3491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_syscall_ops", file: !596, line: 168, size: 320, elements: !3492)
!3492 = !{!3493, !3497, !3501, !3505, !3509}
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "show_options", scope: !3491, file: !596, line: 169, baseType: !3494, size: 64)
!3494 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3495, size: 64)
!3495 = !DISubroutineType(types: !3496)
!3496 = !{!240, !691, !3475}
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "mkdir", scope: !3491, file: !596, line: 171, baseType: !3498, size: 64, offset: 64)
!3498 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3499, size: 64)
!3499 = !DISubroutineType(types: !3500)
!3500 = !{!240, !3456, !147, !297}
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "rmdir", scope: !3491, file: !596, line: 173, baseType: !3502, size: 64, offset: 128)
!3502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3503, size: 64)
!3503 = !DISubroutineType(types: !3504)
!3504 = !{!240, !3456}
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "rename", scope: !3491, file: !596, line: 174, baseType: !3506, size: 64, offset: 192)
!3506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3507, size: 64)
!3507 = !DISubroutineType(types: !3508)
!3508 = !{!240, !3456, !3456, !147}
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "show_path", scope: !3491, file: !596, line: 176, baseType: !3510, size: 64, offset: 256)
!3510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3511, size: 64)
!3511 = !DISubroutineType(types: !3512)
!3512 = !{!240, !691, !3456, !3475}
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "supers", scope: !3476, file: !596, line: 192, baseType: !201, size: 128, offset: 448)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "deactivate_waitq", scope: !3476, file: !596, line: 194, baseType: !1501, size: 128, offset: 576)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "symlink", scope: !3467, file: !596, line: 144, baseType: !3516, size: 64)
!3516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_elem_symlink", file: !596, line: 103, size: 64, elements: !3517)
!3517 = !{!3518}
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "target_kn", scope: !3516, file: !596, line: 104, baseType: !3456, size: 64)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "attr", scope: !3467, file: !596, line: 145, baseType: !3520, size: 256)
!3520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_elem_attr", file: !596, line: 107, size: 256, elements: !3521)
!3521 = !{!3522, !3582, !3585, !3586}
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3520, file: !596, line: 108, baseType: !3523, size: 64)
!3523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3524, size: 64)
!3524 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3525)
!3525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_ops", file: !596, line: 217, size: 768, elements: !3526)
!3526 = !{!3527, !3547, !3551, !3555, !3559, !3563, !3567, !3571, !3572, !3573, !3574, !3578}
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "open", scope: !3525, file: !596, line: 222, baseType: !3528, size: 64)
!3528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3529, size: 64)
!3529 = !DISubroutineType(types: !3530)
!3530 = !{!240, !3531}
!3531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3532, size: 64)
!3532 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_open_file", file: !596, line: 197, size: 1088, elements: !3533)
!3533 = !{!3534, !3535, !3536, !3537, !3538, !3539, !3540, !3541, !3542, !3543, !3544, !3545, !3546}
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "kn", scope: !3532, file: !596, line: 199, baseType: !3456, size: 64)
!3535 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !3532, file: !596, line: 200, baseType: !335, size: 64, offset: 64)
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "seq_file", scope: !3532, file: !596, line: 201, baseType: !691, size: 64, offset: 128)
!3537 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !3532, file: !596, line: 202, baseType: !330, size: 64, offset: 192)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", scope: !3532, file: !596, line: 205, baseType: !1194, size: 192, offset: 256)
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "prealloc_mutex", scope: !3532, file: !596, line: 206, baseType: !1194, size: 192, offset: 448)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "event", scope: !3532, file: !596, line: 207, baseType: !240, size: 32, offset: 640)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !3532, file: !596, line: 208, baseType: !201, size: 128, offset: 704)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "prealloc_buf", scope: !3532, file: !596, line: 209, baseType: !256, size: 64, offset: 832)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "atomic_write_len", scope: !3532, file: !596, line: 211, baseType: !303, size: 64, offset: 896)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "mmapped", scope: !3532, file: !596, line: 212, baseType: !180, size: 1, offset: 960, flags: DIFlagBitField, extraData: i64 960)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "released", scope: !3532, file: !596, line: 213, baseType: !180, size: 1, offset: 961, flags: DIFlagBitField, extraData: i64 960)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "vm_ops", scope: !3532, file: !596, line: 214, baseType: !1030, size: 64, offset: 1024)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !3525, file: !596, line: 223, baseType: !3548, size: 64, offset: 64)
!3548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3549, size: 64)
!3549 = !DISubroutineType(types: !3550)
!3550 = !{null, !3531}
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "seq_show", scope: !3525, file: !596, line: 236, baseType: !3552, size: 64, offset: 128)
!3552 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3553, size: 64)
!3553 = !DISubroutineType(types: !3554)
!3554 = !{!240, !691, !330}
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "seq_start", scope: !3525, file: !596, line: 238, baseType: !3556, size: 64, offset: 192)
!3556 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3557, size: 64)
!3557 = !DISubroutineType(types: !3558)
!3558 = !{!330, !691, !3108}
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "seq_next", scope: !3525, file: !596, line: 239, baseType: !3560, size: 64, offset: 256)
!3560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3561, size: 64)
!3561 = !DISubroutineType(types: !3562)
!3562 = !{!330, !691, !330, !3108}
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "seq_stop", scope: !3525, file: !596, line: 240, baseType: !3564, size: 64, offset: 320)
!3564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3565, size: 64)
!3565 = !DISubroutineType(types: !3566)
!3566 = !{null, !691, !330}
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "read", scope: !3525, file: !596, line: 242, baseType: !3568, size: 64, offset: 384)
!3568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3569, size: 64)
!3569 = !DISubroutineType(types: !3570)
!3570 = !{!287, !3531, !256, !303, !508}
!3571 = !DIDerivedType(tag: DW_TAG_member, name: "atomic_write_len", scope: !3525, file: !596, line: 252, baseType: !303, size: 64, offset: 448)
!3572 = !DIDerivedType(tag: DW_TAG_member, name: "prealloc", scope: !3525, file: !596, line: 259, baseType: !180, size: 8, offset: 512)
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !3525, file: !596, line: 260, baseType: !3568, size: 64, offset: 576)
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "poll", scope: !3525, file: !596, line: 263, baseType: !3575, size: 64, offset: 640)
!3575 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3576, size: 64)
!3576 = !DISubroutineType(types: !3577)
!3577 = !{!3137, !3531, !3139}
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "mmap", scope: !3525, file: !596, line: 266, baseType: !3579, size: 64, offset: 704)
!3579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3580, size: 64)
!3580 = !DISubroutineType(types: !3581)
!3581 = !{!240, !3531, !1002}
!3582 = !DIDerivedType(tag: DW_TAG_member, name: "open", scope: !3520, file: !596, line: 109, baseType: !3583, size: 64, offset: 64)
!3583 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3584, size: 64)
!3584 = !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_open_node", file: !596, line: 31, flags: DIFlagFwdDecl)
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3520, file: !596, line: 110, baseType: !508, size: 64, offset: 128)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "notify_next", scope: !3520, file: !596, line: 111, baseType: !3456, size: 64, offset: 192)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !3457, file: !596, line: 148, baseType: !330, size: 64, offset: 768)
!3588 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !3457, file: !596, line: 154, baseType: !400, size: 64, offset: 832)
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3457, file: !596, line: 156, baseType: !298, size: 16, offset: 896)
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3457, file: !596, line: 157, baseType: !297, size: 16, offset: 912)
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "iattr", scope: !3457, file: !596, line: 158, baseType: !3592, size: 64, offset: 960)
!3592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3593, size: 64)
!3593 = !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_iattrs", file: !596, line: 32, flags: DIFlagFwdDecl)
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "kref", scope: !196, file: !197, line: 71, baseType: !3595, size: 32, offset: 448)
!3595 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kref", file: !3596, line: 19, size: 32, elements: !3597)
!3596 = !DIFile(filename: "./include/linux/kref.h", directory: "/home/lizy2001/genbc/linux")
!3597 = !{!3598}
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "refcount", scope: !3595, file: !3596, line: 20, baseType: !1250, size: 32)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "state_initialized", scope: !196, file: !197, line: 75, baseType: !7, size: 1, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "state_in_sysfs", scope: !196, file: !197, line: 76, baseType: !7, size: 1, offset: 481, flags: DIFlagBitField, extraData: i64 480)
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "state_add_uevent_sent", scope: !196, file: !197, line: 77, baseType: !7, size: 1, offset: 482, flags: DIFlagBitField, extraData: i64 480)
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "state_remove_uevent_sent", scope: !196, file: !197, line: 78, baseType: !7, size: 1, offset: 483, flags: DIFlagBitField, extraData: i64 480)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "uevent_suppress", scope: !196, file: !197, line: 79, baseType: !7, size: 1, offset: 484, flags: DIFlagBitField, extraData: i64 480)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !193, file: !73, line: 463, baseType: !3605, size: 64, offset: 512)
!3605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !193, size: 64)
!3606 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !193, file: !73, line: 465, baseType: !3607, size: 64, offset: 576)
!3607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3608, size: 64)
!3608 = !DICompositeType(tag: DW_TAG_structure_type, name: "device_private", file: !73, line: 36, flags: DIFlagFwdDecl)
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "init_name", scope: !193, file: !73, line: 467, baseType: !147, size: 64, offset: 640)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !193, file: !73, line: 468, baseType: !3611, size: 64, offset: 704)
!3611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3612, size: 64)
!3612 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3613)
!3613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "device_type", file: !73, line: 87, size: 384, elements: !3614)
!3614 = !{!3615, !3616, !3617, !3621, !3626, !3630}
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3613, file: !73, line: 88, baseType: !147, size: 64)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !3613, file: !73, line: 89, baseType: !310, size: 64, offset: 64)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "uevent", scope: !3613, file: !73, line: 90, baseType: !3618, size: 64, offset: 128)
!3618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3619, size: 64)
!3619 = !DISubroutineType(types: !3620)
!3620 = !{!240, !3605, !251}
!3621 = !DIDerivedType(tag: DW_TAG_member, name: "devnode", scope: !3613, file: !73, line: 91, baseType: !3622, size: 64, offset: 192)
!3622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3623, size: 64)
!3623 = !DISubroutineType(types: !3624)
!3624 = !{!256, !3605, !3625, !3453, !3454}
!3625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !297, size: 64)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !3613, file: !73, line: 93, baseType: !3627, size: 64, offset: 256)
!3627 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3628, size: 64)
!3628 = !DISubroutineType(types: !3629)
!3629 = !{null, !3605}
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !3613, file: !73, line: 95, baseType: !3631, size: 64, offset: 320)
!3631 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3632, size: 64)
!3632 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3633)
!3633 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pm_ops", file: !80, line: 278, size: 1472, elements: !3634)
!3634 = !{!3635, !3639, !3640, !3641, !3642, !3643, !3644, !3645, !3646, !3647, !3648, !3649, !3650, !3651, !3652, !3653, !3654, !3655, !3656, !3657, !3658, !3659, !3660}
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "prepare", scope: !3633, file: !80, line: 279, baseType: !3636, size: 64)
!3636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3637, size: 64)
!3637 = !DISubroutineType(types: !3638)
!3638 = !{!240, !3605}
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "complete", scope: !3633, file: !80, line: 280, baseType: !3627, size: 64, offset: 64)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "suspend", scope: !3633, file: !80, line: 281, baseType: !3636, size: 64, offset: 128)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "resume", scope: !3633, file: !80, line: 282, baseType: !3636, size: 64, offset: 192)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "freeze", scope: !3633, file: !80, line: 283, baseType: !3636, size: 64, offset: 256)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "thaw", scope: !3633, file: !80, line: 284, baseType: !3636, size: 64, offset: 320)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "poweroff", scope: !3633, file: !80, line: 285, baseType: !3636, size: 64, offset: 384)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "restore", scope: !3633, file: !80, line: 286, baseType: !3636, size: 64, offset: 448)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "suspend_late", scope: !3633, file: !80, line: 287, baseType: !3636, size: 64, offset: 512)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "resume_early", scope: !3633, file: !80, line: 288, baseType: !3636, size: 64, offset: 576)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "freeze_late", scope: !3633, file: !80, line: 289, baseType: !3636, size: 64, offset: 640)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "thaw_early", scope: !3633, file: !80, line: 290, baseType: !3636, size: 64, offset: 704)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "poweroff_late", scope: !3633, file: !80, line: 291, baseType: !3636, size: 64, offset: 768)
!3651 = !DIDerivedType(tag: DW_TAG_member, name: "restore_early", scope: !3633, file: !80, line: 292, baseType: !3636, size: 64, offset: 832)
!3652 = !DIDerivedType(tag: DW_TAG_member, name: "suspend_noirq", scope: !3633, file: !80, line: 293, baseType: !3636, size: 64, offset: 896)
!3653 = !DIDerivedType(tag: DW_TAG_member, name: "resume_noirq", scope: !3633, file: !80, line: 294, baseType: !3636, size: 64, offset: 960)
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "freeze_noirq", scope: !3633, file: !80, line: 295, baseType: !3636, size: 64, offset: 1024)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "thaw_noirq", scope: !3633, file: !80, line: 296, baseType: !3636, size: 64, offset: 1088)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "poweroff_noirq", scope: !3633, file: !80, line: 297, baseType: !3636, size: 64, offset: 1152)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "restore_noirq", scope: !3633, file: !80, line: 298, baseType: !3636, size: 64, offset: 1216)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_suspend", scope: !3633, file: !80, line: 299, baseType: !3636, size: 64, offset: 1280)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_resume", scope: !3633, file: !80, line: 300, baseType: !3636, size: 64, offset: 1344)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_idle", scope: !3633, file: !80, line: 301, baseType: !3636, size: 64, offset: 1408)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "bus", scope: !193, file: !73, line: 470, baseType: !3662, size: 64, offset: 768)
!3662 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3663, size: 64)
!3663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bus_type", file: !3664, line: 82, size: 1408, elements: !3665)
!3664 = !DIFile(filename: "./include/linux/device/bus.h", directory: "/home/lizy2001/genbc/linux")
!3665 = !{!3666, !3667, !3668, !3669, !3670, !3671, !3672, !3731, !3732, !3733, !3734, !3735, !3736, !3737, !3738, !3739, !3740, !3741, !3742, !3743, !3747, !3750, !3751}
!3666 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3663, file: !3664, line: 83, baseType: !147, size: 64)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "dev_name", scope: !3663, file: !3664, line: 84, baseType: !147, size: 64, offset: 64)
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "dev_root", scope: !3663, file: !3664, line: 85, baseType: !3605, size: 64, offset: 128)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "bus_groups", scope: !3663, file: !3664, line: 86, baseType: !310, size: 64, offset: 192)
!3670 = !DIDerivedType(tag: DW_TAG_member, name: "dev_groups", scope: !3663, file: !3664, line: 87, baseType: !310, size: 64, offset: 256)
!3671 = !DIDerivedType(tag: DW_TAG_member, name: "drv_groups", scope: !3663, file: !3664, line: 88, baseType: !310, size: 64, offset: 320)
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "match", scope: !3663, file: !3664, line: 90, baseType: !3673, size: 64, offset: 384)
!3673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3674, size: 64)
!3674 = !DISubroutineType(types: !3675)
!3675 = !{!240, !3605, !3676}
!3676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3677, size: 64)
!3677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "device_driver", file: !67, line: 95, size: 1152, elements: !3678)
!3678 = !{!3679, !3680, !3681, !3682, !3683, !3684, !3685, !3698, !3711, !3712, !3713, !3714, !3715, !3723, !3724, !3725, !3726, !3727, !3728}
!3679 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3677, file: !67, line: 96, baseType: !147, size: 64)
!3680 = !DIDerivedType(tag: DW_TAG_member, name: "bus", scope: !3677, file: !67, line: 97, baseType: !3662, size: 64, offset: 64)
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !3677, file: !67, line: 99, baseType: !610, size: 64, offset: 128)
!3682 = !DIDerivedType(tag: DW_TAG_member, name: "mod_name", scope: !3677, file: !67, line: 100, baseType: !147, size: 64, offset: 192)
!3683 = !DIDerivedType(tag: DW_TAG_member, name: "suppress_bind_attrs", scope: !3677, file: !67, line: 102, baseType: !180, size: 8, offset: 256)
!3684 = !DIDerivedType(tag: DW_TAG_member, name: "probe_type", scope: !3677, file: !67, line: 103, baseType: !66, size: 32, offset: 288)
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "of_match_table", scope: !3677, file: !67, line: 105, baseType: !3686, size: 64, offset: 320)
!3686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3687, size: 64)
!3687 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3688)
!3688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "of_device_id", file: !3689, line: 262, size: 1600, elements: !3690)
!3689 = !DIFile(filename: "./include/linux/mod_devicetable.h", directory: "/home/lizy2001/genbc/linux")
!3690 = !{!3691, !3692, !3693, !3697}
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3688, file: !3689, line: 263, baseType: !2932, size: 256)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3688, file: !3689, line: 264, baseType: !2932, size: 256, offset: 256)
!3693 = !DIDerivedType(tag: DW_TAG_member, name: "compatible", scope: !3688, file: !3689, line: 265, baseType: !3694, size: 1024, offset: 512)
!3694 = !DICompositeType(tag: DW_TAG_array_type, baseType: !149, size: 1024, elements: !3695)
!3695 = !{!3696}
!3696 = !DISubrange(count: 128)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3688, file: !3689, line: 266, baseType: !189, size: 64, offset: 1536)
!3698 = !DIDerivedType(tag: DW_TAG_member, name: "acpi_match_table", scope: !3677, file: !67, line: 106, baseType: !3699, size: 64, offset: 384)
!3699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3700, size: 64)
!3700 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3701)
!3701 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "acpi_device_id", file: !3689, line: 210, size: 256, elements: !3702)
!3702 = !{!3703, !3707, !3709, !3710}
!3703 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !3701, file: !3689, line: 211, baseType: !3704, size: 72)
!3704 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1373, size: 72, elements: !3705)
!3705 = !{!3706}
!3706 = !DISubrange(count: 9)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "driver_data", scope: !3701, file: !3689, line: 212, baseType: !3708, size: 64, offset: 128)
!3708 = !DIDerivedType(tag: DW_TAG_typedef, name: "kernel_ulong_t", file: !3689, line: 14, baseType: !306)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "cls", scope: !3701, file: !3689, line: 213, baseType: !154, size: 32, offset: 192)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "cls_msk", scope: !3701, file: !3689, line: 214, baseType: !154, size: 32, offset: 224)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "probe", scope: !3677, file: !67, line: 108, baseType: !3636, size: 64, offset: 448)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "sync_state", scope: !3677, file: !67, line: 109, baseType: !3627, size: 64, offset: 512)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "remove", scope: !3677, file: !67, line: 110, baseType: !3636, size: 64, offset: 576)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "shutdown", scope: !3677, file: !67, line: 111, baseType: !3627, size: 64, offset: 640)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "suspend", scope: !3677, file: !67, line: 112, baseType: !3716, size: 64, offset: 704)
!3716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3717, size: 64)
!3717 = !DISubroutineType(types: !3718)
!3718 = !{!240, !3605, !3719}
!3719 = !DIDerivedType(tag: DW_TAG_typedef, name: "pm_message_t", file: !80, line: 52, baseType: !3720)
!3720 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pm_message", file: !80, line: 50, size: 32, elements: !3721)
!3721 = !{!3722}
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "event", scope: !3720, file: !80, line: 51, baseType: !240, size: 32)
!3723 = !DIDerivedType(tag: DW_TAG_member, name: "resume", scope: !3677, file: !67, line: 113, baseType: !3636, size: 64, offset: 768)
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !3677, file: !67, line: 114, baseType: !310, size: 64, offset: 832)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "dev_groups", scope: !3677, file: !67, line: 115, baseType: !310, size: 64, offset: 896)
!3726 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !3677, file: !67, line: 117, baseType: !3631, size: 64, offset: 960)
!3727 = !DIDerivedType(tag: DW_TAG_member, name: "coredump", scope: !3677, file: !67, line: 118, baseType: !3627, size: 64, offset: 1024)
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !3677, file: !67, line: 120, baseType: !3729, size: 64, offset: 1088)
!3729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3730, size: 64)
!3730 = !DICompositeType(tag: DW_TAG_structure_type, name: "driver_private", file: !67, line: 120, flags: DIFlagFwdDecl)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "uevent", scope: !3663, file: !3664, line: 91, baseType: !3618, size: 64, offset: 448)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "probe", scope: !3663, file: !3664, line: 92, baseType: !3636, size: 64, offset: 512)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "sync_state", scope: !3663, file: !3664, line: 93, baseType: !3627, size: 64, offset: 576)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "remove", scope: !3663, file: !3664, line: 94, baseType: !3636, size: 64, offset: 640)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "shutdown", scope: !3663, file: !3664, line: 95, baseType: !3627, size: 64, offset: 704)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "online", scope: !3663, file: !3664, line: 97, baseType: !3636, size: 64, offset: 768)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "offline", scope: !3663, file: !3664, line: 98, baseType: !3636, size: 64, offset: 832)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "suspend", scope: !3663, file: !3664, line: 100, baseType: !3716, size: 64, offset: 896)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "resume", scope: !3663, file: !3664, line: 101, baseType: !3636, size: 64, offset: 960)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "num_vf", scope: !3663, file: !3664, line: 103, baseType: !3636, size: 64, offset: 1024)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "dma_configure", scope: !3663, file: !3664, line: 105, baseType: !3636, size: 64, offset: 1088)
!3742 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !3663, file: !3664, line: 107, baseType: !3631, size: 64, offset: 1152)
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "iommu_ops", scope: !3663, file: !3664, line: 109, baseType: !3744, size: 64, offset: 1216)
!3744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3745, size: 64)
!3745 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3746)
!3746 = !DICompositeType(tag: DW_TAG_structure_type, name: "iommu_ops", file: !3664, line: 109, flags: DIFlagFwdDecl)
!3747 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !3663, file: !3664, line: 111, baseType: !3748, size: 64, offset: 1280)
!3748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3749, size: 64)
!3749 = !DICompositeType(tag: DW_TAG_structure_type, name: "subsys_private", file: !3664, line: 111, flags: DIFlagFwdDecl)
!3750 = !DIDerivedType(tag: DW_TAG_member, name: "lock_key", scope: !3663, file: !3664, line: 112, baseType: !625, offset: 1344)
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "need_parent_lock", scope: !3663, file: !3664, line: 114, baseType: !180, size: 8, offset: 1344)
!3752 = !DIDerivedType(tag: DW_TAG_member, name: "driver", scope: !193, file: !73, line: 471, baseType: !3676, size: 64, offset: 832)
!3753 = !DIDerivedType(tag: DW_TAG_member, name: "platform_data", scope: !193, file: !73, line: 473, baseType: !330, size: 64, offset: 896)
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "driver_data", scope: !193, file: !73, line: 475, baseType: !330, size: 64, offset: 960)
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", scope: !193, file: !73, line: 480, baseType: !1194, size: 192, offset: 1024)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "links", scope: !193, file: !73, line: 484, baseType: !3757, size: 576, offset: 1216)
!3757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_links_info", file: !73, line: 361, size: 576, elements: !3758)
!3758 = !{!3759, !3760, !3761, !3762, !3763, !3764}
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "suppliers", scope: !3757, file: !73, line: 362, baseType: !201, size: 128)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "consumers", scope: !3757, file: !73, line: 363, baseType: !201, size: 128, offset: 128)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "needs_suppliers", scope: !3757, file: !73, line: 364, baseType: !201, size: 128, offset: 256)
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "defer_hook", scope: !3757, file: !73, line: 365, baseType: !201, size: 128, offset: 384)
!3763 = !DIDerivedType(tag: DW_TAG_member, name: "need_for_probe", scope: !3757, file: !73, line: 366, baseType: !180, size: 8, offset: 512)
!3764 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !3757, file: !73, line: 367, baseType: !72, size: 32, offset: 544)
!3765 = !DIDerivedType(tag: DW_TAG_member, name: "power", scope: !193, file: !73, line: 485, baseType: !3766, size: 2304, offset: 1792)
!3766 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pm_info", file: !80, line: 565, size: 2304, elements: !3767)
!3767 = !{!3768, !3769, !3770, !3771, !3772, !3773, !3774, !3775, !3776, !3777, !3778, !3779, !3780, !3781, !3782, !3783, !3821, !3822, !3823, !3824, !3825, !3826, !3827, !3828, !3829, !3830, !3831, !3832, !3833, !3834, !3835, !3836, !3837, !3838, !3839, !3840, !3841, !3842, !3843, !3844, !3845, !3846, !3847, !3848, !3849, !3850, !3851, !3852, !3853, !3863, !3867}
!3768 = !DIDerivedType(tag: DW_TAG_member, name: "power_state", scope: !3766, file: !80, line: 566, baseType: !3719, size: 32)
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "can_wakeup", scope: !3766, file: !80, line: 567, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 32)
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "async_suspend", scope: !3766, file: !80, line: 568, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 32)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "in_dpm_list", scope: !3766, file: !80, line: 569, baseType: !180, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 32)
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "is_prepared", scope: !3766, file: !80, line: 570, baseType: !180, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 32)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "is_suspended", scope: !3766, file: !80, line: 571, baseType: !180, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 32)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "is_noirq_suspended", scope: !3766, file: !80, line: 572, baseType: !180, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 32)
!3775 = !DIDerivedType(tag: DW_TAG_member, name: "is_late_suspended", scope: !3766, file: !80, line: 573, baseType: !180, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 32)
!3776 = !DIDerivedType(tag: DW_TAG_member, name: "no_pm", scope: !3766, file: !80, line: 574, baseType: !180, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 32)
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "early_init", scope: !3766, file: !80, line: 575, baseType: !180, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 32)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "direct_complete", scope: !3766, file: !80, line: 576, baseType: !180, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 32)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "driver_flags", scope: !3766, file: !80, line: 577, baseType: !152, size: 32, offset: 64)
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3766, file: !80, line: 578, baseType: !214, offset: 96)
!3781 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !3766, file: !80, line: 580, baseType: !201, size: 128, offset: 128)
!3782 = !DIDerivedType(tag: DW_TAG_member, name: "completion", scope: !3766, file: !80, line: 581, baseType: !1522, size: 192, offset: 256)
!3783 = !DIDerivedType(tag: DW_TAG_member, name: "wakeup", scope: !3766, file: !80, line: 582, baseType: !3784, size: 64, offset: 448)
!3784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3785, size: 64)
!3785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wakeup_source", file: !3786, line: 43, size: 1472, elements: !3787)
!3786 = !DIFile(filename: "./include/linux/pm_wakeup.h", directory: "/home/lizy2001/genbc/linux")
!3787 = !{!3788, !3789, !3790, !3791, !3792, !3795, !3807, !3808, !3809, !3810, !3811, !3812, !3813, !3814, !3815, !3816, !3817, !3818, !3819, !3820}
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3785, file: !3786, line: 44, baseType: !147, size: 64)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !3785, file: !3786, line: 45, baseType: !240, size: 32, offset: 64)
!3790 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !3785, file: !3786, line: 46, baseType: !201, size: 128, offset: 128)
!3791 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3785, file: !3786, line: 47, baseType: !214, offset: 256)
!3792 = !DIDerivedType(tag: DW_TAG_member, name: "wakeirq", scope: !3785, file: !3786, line: 48, baseType: !3793, size: 64, offset: 256)
!3793 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3794, size: 64)
!3794 = !DICompositeType(tag: DW_TAG_structure_type, name: "wake_irq", file: !80, line: 533, flags: DIFlagFwdDecl)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "timer", scope: !3785, file: !3786, line: 49, baseType: !3796, size: 320, offset: 320)
!3796 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timer_list", file: !3797, line: 11, size: 320, elements: !3798)
!3797 = !DIFile(filename: "./include/linux/timer.h", directory: "/home/lizy2001/genbc/linux")
!3798 = !{!3799, !3800, !3801, !3806}
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !3796, file: !3797, line: 16, baseType: !619, size: 128)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "expires", scope: !3796, file: !3797, line: 17, baseType: !306, size: 64, offset: 128)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !3796, file: !3797, line: 18, baseType: !3802, size: 64, offset: 192)
!3802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3803, size: 64)
!3803 = !DISubroutineType(types: !3804)
!3804 = !{null, !3805}
!3805 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3796, size: 64)
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3796, file: !3797, line: 19, baseType: !152, size: 32, offset: 256)
!3807 = !DIDerivedType(tag: DW_TAG_member, name: "timer_expires", scope: !3785, file: !3786, line: 50, baseType: !306, size: 64, offset: 640)
!3808 = !DIDerivedType(tag: DW_TAG_member, name: "total_time", scope: !3785, file: !3786, line: 51, baseType: !1320, size: 64, offset: 704)
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "max_time", scope: !3785, file: !3786, line: 52, baseType: !1320, size: 64, offset: 768)
!3810 = !DIDerivedType(tag: DW_TAG_member, name: "last_time", scope: !3785, file: !3786, line: 53, baseType: !1320, size: 64, offset: 832)
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "start_prevent_time", scope: !3785, file: !3786, line: 54, baseType: !1320, size: 64, offset: 896)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "prevent_sleep_time", scope: !3785, file: !3786, line: 55, baseType: !1320, size: 64, offset: 960)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "event_count", scope: !3785, file: !3786, line: 56, baseType: !306, size: 64, offset: 1024)
!3814 = !DIDerivedType(tag: DW_TAG_member, name: "active_count", scope: !3785, file: !3786, line: 57, baseType: !306, size: 64, offset: 1088)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "relax_count", scope: !3785, file: !3786, line: 58, baseType: !306, size: 64, offset: 1152)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "expire_count", scope: !3785, file: !3786, line: 59, baseType: !306, size: 64, offset: 1216)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "wakeup_count", scope: !3785, file: !3786, line: 60, baseType: !306, size: 64, offset: 1280)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "dev", scope: !3785, file: !3786, line: 61, baseType: !3605, size: 64, offset: 1344)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !3785, file: !3786, line: 62, baseType: !180, size: 1, offset: 1408, flags: DIFlagBitField, extraData: i64 1408)
!3820 = !DIDerivedType(tag: DW_TAG_member, name: "autosleep_enabled", scope: !3785, file: !3786, line: 63, baseType: !180, size: 1, offset: 1409, flags: DIFlagBitField, extraData: i64 1408)
!3821 = !DIDerivedType(tag: DW_TAG_member, name: "wakeup_path", scope: !3766, file: !80, line: 583, baseType: !180, size: 1, offset: 512, flags: DIFlagBitField, extraData: i64 512)
!3822 = !DIDerivedType(tag: DW_TAG_member, name: "syscore", scope: !3766, file: !80, line: 584, baseType: !180, size: 1, offset: 513, flags: DIFlagBitField, extraData: i64 512)
!3823 = !DIDerivedType(tag: DW_TAG_member, name: "no_pm_callbacks", scope: !3766, file: !80, line: 585, baseType: !180, size: 1, offset: 514, flags: DIFlagBitField, extraData: i64 512)
!3824 = !DIDerivedType(tag: DW_TAG_member, name: "must_resume", scope: !3766, file: !80, line: 586, baseType: !7, size: 1, offset: 515, flags: DIFlagBitField, extraData: i64 512)
!3825 = !DIDerivedType(tag: DW_TAG_member, name: "may_skip_resume", scope: !3766, file: !80, line: 587, baseType: !7, size: 1, offset: 516, flags: DIFlagBitField, extraData: i64 512)
!3826 = !DIDerivedType(tag: DW_TAG_member, name: "suspend_timer", scope: !3766, file: !80, line: 592, baseType: !1312, size: 512, offset: 576)
!3827 = !DIDerivedType(tag: DW_TAG_member, name: "timer_expires", scope: !3766, file: !80, line: 593, baseType: !400, size: 64, offset: 1088)
!3828 = !DIDerivedType(tag: DW_TAG_member, name: "work", scope: !3766, file: !80, line: 594, baseType: !1979, size: 256, offset: 1152)
!3829 = !DIDerivedType(tag: DW_TAG_member, name: "wait_queue", scope: !3766, file: !80, line: 595, baseType: !1501, size: 128, offset: 1408)
!3830 = !DIDerivedType(tag: DW_TAG_member, name: "wakeirq", scope: !3766, file: !80, line: 596, baseType: !3793, size: 64, offset: 1536)
!3831 = !DIDerivedType(tag: DW_TAG_member, name: "usage_count", scope: !3766, file: !80, line: 597, baseType: !728, size: 32, offset: 1600)
!3832 = !DIDerivedType(tag: DW_TAG_member, name: "child_count", scope: !3766, file: !80, line: 598, baseType: !728, size: 32, offset: 1632)
!3833 = !DIDerivedType(tag: DW_TAG_member, name: "disable_depth", scope: !3766, file: !80, line: 599, baseType: !7, size: 3, offset: 1664, flags: DIFlagBitField, extraData: i64 1664)
!3834 = !DIDerivedType(tag: DW_TAG_member, name: "idle_notification", scope: !3766, file: !80, line: 600, baseType: !7, size: 1, offset: 1667, flags: DIFlagBitField, extraData: i64 1664)
!3835 = !DIDerivedType(tag: DW_TAG_member, name: "request_pending", scope: !3766, file: !80, line: 601, baseType: !7, size: 1, offset: 1668, flags: DIFlagBitField, extraData: i64 1664)
!3836 = !DIDerivedType(tag: DW_TAG_member, name: "deferred_resume", scope: !3766, file: !80, line: 602, baseType: !7, size: 1, offset: 1669, flags: DIFlagBitField, extraData: i64 1664)
!3837 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_auto", scope: !3766, file: !80, line: 603, baseType: !7, size: 1, offset: 1670, flags: DIFlagBitField, extraData: i64 1664)
!3838 = !DIDerivedType(tag: DW_TAG_member, name: "ignore_children", scope: !3766, file: !80, line: 604, baseType: !180, size: 1, offset: 1671, flags: DIFlagBitField, extraData: i64 1664)
!3839 = !DIDerivedType(tag: DW_TAG_member, name: "no_callbacks", scope: !3766, file: !80, line: 605, baseType: !7, size: 1, offset: 1672, flags: DIFlagBitField, extraData: i64 1664)
!3840 = !DIDerivedType(tag: DW_TAG_member, name: "irq_safe", scope: !3766, file: !80, line: 606, baseType: !7, size: 1, offset: 1673, flags: DIFlagBitField, extraData: i64 1664)
!3841 = !DIDerivedType(tag: DW_TAG_member, name: "use_autosuspend", scope: !3766, file: !80, line: 607, baseType: !7, size: 1, offset: 1674, flags: DIFlagBitField, extraData: i64 1664)
!3842 = !DIDerivedType(tag: DW_TAG_member, name: "timer_autosuspends", scope: !3766, file: !80, line: 608, baseType: !7, size: 1, offset: 1675, flags: DIFlagBitField, extraData: i64 1664)
!3843 = !DIDerivedType(tag: DW_TAG_member, name: "memalloc_noio", scope: !3766, file: !80, line: 609, baseType: !7, size: 1, offset: 1676, flags: DIFlagBitField, extraData: i64 1664)
!3844 = !DIDerivedType(tag: DW_TAG_member, name: "links_count", scope: !3766, file: !80, line: 610, baseType: !7, size: 32, offset: 1696)
!3845 = !DIDerivedType(tag: DW_TAG_member, name: "request", scope: !3766, file: !80, line: 611, baseType: !79, size: 32, offset: 1728)
!3846 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_status", scope: !3766, file: !80, line: 612, baseType: !87, size: 32, offset: 1760)
!3847 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_error", scope: !3766, file: !80, line: 613, baseType: !240, size: 32, offset: 1792)
!3848 = !DIDerivedType(tag: DW_TAG_member, name: "autosuspend_delay", scope: !3766, file: !80, line: 614, baseType: !240, size: 32, offset: 1824)
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "last_busy", scope: !3766, file: !80, line: 615, baseType: !400, size: 64, offset: 1856)
!3850 = !DIDerivedType(tag: DW_TAG_member, name: "active_time", scope: !3766, file: !80, line: 616, baseType: !400, size: 64, offset: 1920)
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "suspended_time", scope: !3766, file: !80, line: 617, baseType: !400, size: 64, offset: 1984)
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "accounting_timestamp", scope: !3766, file: !80, line: 618, baseType: !400, size: 64, offset: 2048)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "subsys_data", scope: !3766, file: !80, line: 620, baseType: !3854, size: 64, offset: 2112)
!3854 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3855, size: 64)
!3855 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pm_subsys_data", file: !80, line: 536, size: 256, elements: !3856)
!3856 = !{!3857, !3858, !3859, !3860}
!3857 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3855, file: !80, line: 537, baseType: !214)
!3858 = !DIDerivedType(tag: DW_TAG_member, name: "refcount", scope: !3855, file: !80, line: 538, baseType: !7, size: 32)
!3859 = !DIDerivedType(tag: DW_TAG_member, name: "clock_list", scope: !3855, file: !80, line: 540, baseType: !201, size: 128, offset: 64)
!3860 = !DIDerivedType(tag: DW_TAG_member, name: "domain_data", scope: !3855, file: !80, line: 543, baseType: !3861, size: 64, offset: 192)
!3861 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3862, size: 64)
!3862 = !DICompositeType(tag: DW_TAG_structure_type, name: "pm_domain_data", file: !80, line: 534, flags: DIFlagFwdDecl)
!3863 = !DIDerivedType(tag: DW_TAG_member, name: "set_latency_tolerance", scope: !3766, file: !80, line: 621, baseType: !3864, size: 64, offset: 2176)
!3864 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3865, size: 64)
!3865 = !DISubroutineType(types: !3866)
!3866 = !{null, !3605, !1464}
!3867 = !DIDerivedType(tag: DW_TAG_member, name: "qos", scope: !3766, file: !80, line: 622, baseType: !3868, size: 64, offset: 2240)
!3868 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3869, size: 64)
!3869 = !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pm_qos", file: !80, line: 622, flags: DIFlagFwdDecl)
!3870 = !DIDerivedType(tag: DW_TAG_member, name: "pm_domain", scope: !193, file: !73, line: 486, baseType: !3871, size: 64, offset: 4096)
!3871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3872, size: 64)
!3872 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pm_domain", file: !80, line: 642, size: 1792, elements: !3873)
!3873 = !{!3874, !3875, !3876, !3880, !3881, !3882}
!3874 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3872, file: !80, line: 643, baseType: !3633, size: 1472)
!3875 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !3872, file: !80, line: 644, baseType: !3636, size: 64, offset: 1472)
!3876 = !DIDerivedType(tag: DW_TAG_member, name: "detach", scope: !3872, file: !80, line: 645, baseType: !3877, size: 64, offset: 1536)
!3877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3878, size: 64)
!3878 = !DISubroutineType(types: !3879)
!3879 = !{null, !3605, !180}
!3880 = !DIDerivedType(tag: DW_TAG_member, name: "activate", scope: !3872, file: !80, line: 646, baseType: !3636, size: 64, offset: 1600)
!3881 = !DIDerivedType(tag: DW_TAG_member, name: "sync", scope: !3872, file: !80, line: 647, baseType: !3627, size: 64, offset: 1664)
!3882 = !DIDerivedType(tag: DW_TAG_member, name: "dismiss", scope: !3872, file: !80, line: 648, baseType: !3627, size: 64, offset: 1728)
!3883 = !DIDerivedType(tag: DW_TAG_member, name: "msi_domain", scope: !193, file: !73, line: 493, baseType: !3884, size: 64, offset: 4160)
!3884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3885, size: 64)
!3885 = !DICompositeType(tag: DW_TAG_structure_type, name: "irq_domain", file: !3886, line: 13, flags: DIFlagFwdDecl)
!3886 = !DIFile(filename: "./arch/x86/include/asm/x86_init.h", directory: "/home/lizy2001/genbc/linux")
!3887 = !DIDerivedType(tag: DW_TAG_member, name: "msi_list", scope: !193, file: !73, line: 499, baseType: !201, size: 128, offset: 4224)
!3888 = !DIDerivedType(tag: DW_TAG_member, name: "dma_ops", scope: !193, file: !73, line: 502, baseType: !3889, size: 64, offset: 4352)
!3889 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3890, size: 64)
!3890 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3891)
!3891 = !DICompositeType(tag: DW_TAG_structure_type, name: "dma_map_ops", file: !73, line: 502, flags: DIFlagFwdDecl)
!3892 = !DIDerivedType(tag: DW_TAG_member, name: "dma_mask", scope: !193, file: !73, line: 504, baseType: !3893, size: 64, offset: 4416)
!3893 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !400, size: 64)
!3894 = !DIDerivedType(tag: DW_TAG_member, name: "coherent_dma_mask", scope: !193, file: !73, line: 505, baseType: !400, size: 64, offset: 4480)
!3895 = !DIDerivedType(tag: DW_TAG_member, name: "bus_dma_limit", scope: !193, file: !73, line: 510, baseType: !400, size: 64, offset: 4544)
!3896 = !DIDerivedType(tag: DW_TAG_member, name: "dma_range_map", scope: !193, file: !73, line: 511, baseType: !3897, size: 64, offset: 4608)
!3897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3898, size: 64)
!3898 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3899)
!3899 = !DICompositeType(tag: DW_TAG_structure_type, name: "bus_dma_region", file: !73, line: 511, flags: DIFlagFwdDecl)
!3900 = !DIDerivedType(tag: DW_TAG_member, name: "dma_parms", scope: !193, file: !73, line: 513, baseType: !3901, size: 64, offset: 4672)
!3901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3902, size: 64)
!3902 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "device_dma_parameters", file: !73, line: 288, size: 128, elements: !3903)
!3903 = !{!3904, !3905}
!3904 = !DIDerivedType(tag: DW_TAG_member, name: "max_segment_size", scope: !3902, file: !73, line: 293, baseType: !7, size: 32)
!3905 = !DIDerivedType(tag: DW_TAG_member, name: "segment_boundary_mask", scope: !3902, file: !73, line: 294, baseType: !306, size: 64, offset: 64)
!3906 = !DIDerivedType(tag: DW_TAG_member, name: "dma_pools", scope: !193, file: !73, line: 515, baseType: !201, size: 128, offset: 4736)
!3907 = !DIDerivedType(tag: DW_TAG_member, name: "archdata", scope: !193, file: !73, line: 526, baseType: !3908, offset: 4864)
!3908 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_archdata", file: !3909, line: 5, elements: !228)
!3909 = !DIFile(filename: "./arch/x86/include/asm/device.h", directory: "/home/lizy2001/genbc/linux")
!3910 = !DIDerivedType(tag: DW_TAG_member, name: "of_node", scope: !193, file: !73, line: 528, baseType: !142, size: 64, offset: 4864)
!3911 = !DIDerivedType(tag: DW_TAG_member, name: "fwnode", scope: !193, file: !73, line: 529, baseType: !162, size: 64, offset: 4928)
!3912 = !DIDerivedType(tag: DW_TAG_member, name: "devt", scope: !193, file: !73, line: 534, baseType: !490, size: 32, offset: 4992)
!3913 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !193, file: !73, line: 535, baseType: !152, size: 32, offset: 5024)
!3914 = !DIDerivedType(tag: DW_TAG_member, name: "devres_lock", scope: !193, file: !73, line: 537, baseType: !214, offset: 5056)
!3915 = !DIDerivedType(tag: DW_TAG_member, name: "devres_head", scope: !193, file: !73, line: 538, baseType: !201, size: 128, offset: 5056)
!3916 = !DIDerivedType(tag: DW_TAG_member, name: "class", scope: !193, file: !73, line: 540, baseType: !3917, size: 64, offset: 5184)
!3917 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3918, size: 64)
!3918 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "class", file: !3919, line: 54, size: 960, elements: !3920)
!3919 = !DIFile(filename: "./include/linux/device/class.h", directory: "/home/lizy2001/genbc/linux")
!3920 = !{!3921, !3922, !3923, !3924, !3925, !3926, !3927, !3931, !3935, !3936, !3937, !3938, !3942, !3946, !3947}
!3921 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3918, file: !3919, line: 55, baseType: !147, size: 64)
!3922 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !3918, file: !3919, line: 56, baseType: !610, size: 64, offset: 64)
!3923 = !DIDerivedType(tag: DW_TAG_member, name: "class_groups", scope: !3918, file: !3919, line: 58, baseType: !310, size: 64, offset: 128)
!3924 = !DIDerivedType(tag: DW_TAG_member, name: "dev_groups", scope: !3918, file: !3919, line: 59, baseType: !310, size: 64, offset: 192)
!3925 = !DIDerivedType(tag: DW_TAG_member, name: "dev_kobj", scope: !3918, file: !3919, line: 60, baseType: !207, size: 64, offset: 256)
!3926 = !DIDerivedType(tag: DW_TAG_member, name: "dev_uevent", scope: !3918, file: !3919, line: 62, baseType: !3618, size: 64, offset: 320)
!3927 = !DIDerivedType(tag: DW_TAG_member, name: "devnode", scope: !3918, file: !3919, line: 63, baseType: !3928, size: 64, offset: 384)
!3928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3929, size: 64)
!3929 = !DISubroutineType(types: !3930)
!3930 = !{!256, !3605, !3625}
!3931 = !DIDerivedType(tag: DW_TAG_member, name: "class_release", scope: !3918, file: !3919, line: 65, baseType: !3932, size: 64, offset: 448)
!3932 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3933, size: 64)
!3933 = !DISubroutineType(types: !3934)
!3934 = !{null, !3917}
!3935 = !DIDerivedType(tag: DW_TAG_member, name: "dev_release", scope: !3918, file: !3919, line: 66, baseType: !3627, size: 64, offset: 512)
!3936 = !DIDerivedType(tag: DW_TAG_member, name: "shutdown_pre", scope: !3918, file: !3919, line: 68, baseType: !3636, size: 64, offset: 576)
!3937 = !DIDerivedType(tag: DW_TAG_member, name: "ns_type", scope: !3918, file: !3919, line: 70, baseType: !3421, size: 64, offset: 640)
!3938 = !DIDerivedType(tag: DW_TAG_member, name: "namespace", scope: !3918, file: !3919, line: 71, baseType: !3939, size: 64, offset: 704)
!3939 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3940, size: 64)
!3940 = !DISubroutineType(types: !3941)
!3941 = !{!189, !3605}
!3942 = !DIDerivedType(tag: DW_TAG_member, name: "get_ownership", scope: !3918, file: !3919, line: 73, baseType: !3943, size: 64, offset: 768)
!3943 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3944, size: 64)
!3944 = !DISubroutineType(types: !3945)
!3945 = !{null, !3605, !3453, !3454}
!3946 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !3918, file: !3919, line: 75, baseType: !3631, size: 64, offset: 832)
!3947 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !3918, file: !3919, line: 77, baseType: !3748, size: 64, offset: 896)
!3948 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !193, file: !73, line: 541, baseType: !310, size: 64, offset: 5248)
!3949 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !193, file: !73, line: 543, baseType: !3627, size: 64, offset: 5312)
!3950 = !DIDerivedType(tag: DW_TAG_member, name: "iommu_group", scope: !193, file: !73, line: 544, baseType: !3951, size: 64, offset: 5376)
!3951 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3952, size: 64)
!3952 = !DICompositeType(tag: DW_TAG_structure_type, name: "iommu_group", file: !73, line: 45, flags: DIFlagFwdDecl)
!3953 = !DIDerivedType(tag: DW_TAG_member, name: "iommu", scope: !193, file: !73, line: 545, baseType: !3954, size: 64, offset: 5440)
!3954 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3955, size: 64)
!3955 = !DICompositeType(tag: DW_TAG_structure_type, name: "dev_iommu", file: !73, line: 47, flags: DIFlagFwdDecl)
!3956 = !DIDerivedType(tag: DW_TAG_member, name: "offline_disabled", scope: !193, file: !73, line: 547, baseType: !180, size: 1, offset: 5504, flags: DIFlagBitField, extraData: i64 5504)
!3957 = !DIDerivedType(tag: DW_TAG_member, name: "offline", scope: !193, file: !73, line: 548, baseType: !180, size: 1, offset: 5505, flags: DIFlagBitField, extraData: i64 5504)
!3958 = !DIDerivedType(tag: DW_TAG_member, name: "of_node_reused", scope: !193, file: !73, line: 549, baseType: !180, size: 1, offset: 5506, flags: DIFlagBitField, extraData: i64 5504)
!3959 = !DIDerivedType(tag: DW_TAG_member, name: "state_synced", scope: !193, file: !73, line: 550, baseType: !180, size: 1, offset: 5507, flags: DIFlagBitField, extraData: i64 5504)
!3960 = !DIDerivedType(tag: DW_TAG_member, name: "property_present", scope: !166, file: !159, line: 116, baseType: !3961, size: 64, offset: 256)
!3961 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3962, size: 64)
!3962 = !DISubroutineType(types: !3963)
!3963 = !{!180, !183, !147}
!3964 = !DIDerivedType(tag: DW_TAG_member, name: "property_read_int_array", scope: !166, file: !159, line: 118, baseType: !3965, size: 64, offset: 320)
!3965 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3966, size: 64)
!3966 = !DISubroutineType(types: !3967)
!3967 = !{!240, !183, !147, !7, !330, !303}
!3968 = !DIDerivedType(tag: DW_TAG_member, name: "property_read_string_array", scope: !166, file: !159, line: 123, baseType: !3969, size: 64, offset: 384)
!3969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3970, size: 64)
!3970 = !DISubroutineType(types: !3971)
!3971 = !{!240, !183, !147, !3972, !303}
!3972 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !147, size: 64)
!3973 = !DIDerivedType(tag: DW_TAG_member, name: "get_name", scope: !166, file: !159, line: 126, baseType: !3974, size: 64, offset: 448)
!3974 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3975, size: 64)
!3975 = !DISubroutineType(types: !3976)
!3976 = !{!147, !183}
!3977 = !DIDerivedType(tag: DW_TAG_member, name: "get_name_prefix", scope: !166, file: !159, line: 127, baseType: !3974, size: 64, offset: 512)
!3978 = !DIDerivedType(tag: DW_TAG_member, name: "get_parent", scope: !166, file: !159, line: 128, baseType: !3979, size: 64, offset: 576)
!3979 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3980, size: 64)
!3980 = !DISubroutineType(types: !3981)
!3981 = !{!162, !183}
!3982 = !DIDerivedType(tag: DW_TAG_member, name: "get_next_child_node", scope: !166, file: !159, line: 130, baseType: !3983, size: 64, offset: 640)
!3983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3984, size: 64)
!3984 = !DISubroutineType(types: !3985)
!3985 = !{!162, !183, !162}
!3986 = !DIDerivedType(tag: DW_TAG_member, name: "get_named_child_node", scope: !166, file: !159, line: 133, baseType: !3987, size: 64, offset: 704)
!3987 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3988, size: 64)
!3988 = !DISubroutineType(types: !3989)
!3989 = !{!162, !183, !147}
!3990 = !DIDerivedType(tag: DW_TAG_member, name: "get_reference_args", scope: !166, file: !159, line: 135, baseType: !3991, size: 64, offset: 768)
!3991 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3992, size: 64)
!3992 = !DISubroutineType(types: !3993)
!3993 = !{!240, !183, !147, !147, !7, !7, !3994}
!3994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3995, size: 64)
!3995 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fwnode_reference_args", file: !159, line: 43, size: 640, elements: !3996)
!3996 = !{!3997, !3998, !3999}
!3997 = !DIDerivedType(tag: DW_TAG_member, name: "fwnode", scope: !3995, file: !159, line: 44, baseType: !162, size: 64)
!3998 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !3995, file: !159, line: 45, baseType: !7, size: 32, offset: 64)
!3999 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !3995, file: !159, line: 46, baseType: !4000, size: 512, offset: 128)
!4000 = !DICompositeType(tag: DW_TAG_array_type, baseType: !400, size: 512, elements: !1350)
!4001 = !DIDerivedType(tag: DW_TAG_member, name: "graph_get_next_endpoint", scope: !166, file: !159, line: 140, baseType: !3983, size: 64, offset: 832)
!4002 = !DIDerivedType(tag: DW_TAG_member, name: "graph_get_remote_endpoint", scope: !166, file: !159, line: 143, baseType: !3979, size: 64, offset: 896)
!4003 = !DIDerivedType(tag: DW_TAG_member, name: "graph_get_port_parent", scope: !166, file: !159, line: 145, baseType: !169, size: 64, offset: 960)
!4004 = !DIDerivedType(tag: DW_TAG_member, name: "graph_parse_endpoint", scope: !166, file: !159, line: 146, baseType: !4005, size: 64, offset: 1024)
!4005 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4006, size: 64)
!4006 = !DISubroutineType(types: !4007)
!4007 = !{!240, !183, !4008}
!4008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4009, size: 64)
!4009 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fwnode_endpoint", file: !159, line: 29, size: 128, elements: !4010)
!4010 = !{!4011, !4012, !4013}
!4011 = !DIDerivedType(tag: DW_TAG_member, name: "port", scope: !4009, file: !159, line: 30, baseType: !7, size: 32)
!4012 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !4009, file: !159, line: 31, baseType: !7, size: 32, offset: 32)
!4013 = !DIDerivedType(tag: DW_TAG_member, name: "local_fwnode", scope: !4009, file: !159, line: 32, baseType: !183, size: 64, offset: 64)
!4014 = !DIDerivedType(tag: DW_TAG_member, name: "add_links", scope: !166, file: !159, line: 148, baseType: !4015, size: 64, offset: 1088)
!4015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4016, size: 64)
!4016 = !DISubroutineType(types: !4017)
!4017 = !{!240, !183, !3605}
!4018 = !DIDerivedType(tag: DW_TAG_member, name: "dev", scope: !158, file: !159, line: 20, baseType: !3605, size: 64, offset: 128)
!4019 = !DIDerivedType(tag: DW_TAG_member, name: "properties", scope: !143, file: !144, line: 57, baseType: !4020, size: 64, offset: 384)
!4020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4021, size: 64)
!4021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "property", file: !144, line: 31, size: 704, elements: !4022)
!4022 = !{!4023, !4024, !4025, !4026, !4027}
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4021, file: !144, line: 32, baseType: !256, size: 64)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !4021, file: !144, line: 33, baseType: !240, size: 32, offset: 64)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !4021, file: !144, line: 34, baseType: !330, size: 64, offset: 128)
!4026 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4021, file: !144, line: 35, baseType: !4020, size: 64, offset: 192)
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "attr", scope: !4021, file: !144, line: 43, baseType: !325, size: 448, offset: 256)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "deadprops", scope: !143, file: !144, line: 58, baseType: !4020, size: 64, offset: 448)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !143, file: !144, line: 59, baseType: !142, size: 64, offset: 512)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "child", scope: !143, file: !144, line: 60, baseType: !142, size: 64, offset: 576)
!4031 = !DIDerivedType(tag: DW_TAG_member, name: "sibling", scope: !143, file: !144, line: 61, baseType: !142, size: 64, offset: 640)
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "kobj", scope: !143, file: !144, line: 63, baseType: !196, size: 512, offset: 704)
!4033 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !143, file: !144, line: 65, baseType: !306, size: 64, offset: 1216)
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !143, file: !144, line: 66, baseType: !330, size: 64, offset: 1280)
!4035 = !{!4036, !4037, !4038, !4039, !4040, !4041, !4042}
!4036 = !DIEnumerator(name: "NAND_ECC_INVALID", value: 0, isUnsigned: true)
!4037 = !DIEnumerator(name: "NAND_ECC_NONE", value: 1, isUnsigned: true)
!4038 = !DIEnumerator(name: "NAND_ECC_SOFT", value: 2, isUnsigned: true)
!4039 = !DIEnumerator(name: "NAND_ECC_SOFT_BCH", value: 3, isUnsigned: true)
!4040 = !DIEnumerator(name: "NAND_ECC_HW", value: 4, isUnsigned: true)
!4041 = !DIEnumerator(name: "NAND_ECC_HW_SYNDROME", value: 5, isUnsigned: true)
!4042 = !DIEnumerator(name: "NAND_ECC_ON_DIE", value: 6, isUnsigned: true)
!4043 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "kmalloc_cache_type", file: !4044, line: 305, baseType: !7, size: 32, elements: !4045)
!4044 = !DIFile(filename: "./include/linux/slab.h", directory: "/home/lizy2001/genbc/linux")
!4045 = !{!4046, !4047, !4048, !4049}
!4046 = !DIEnumerator(name: "KMALLOC_NORMAL", value: 0, isUnsigned: true)
!4047 = !DIEnumerator(name: "KMALLOC_RECLAIM", value: 1, isUnsigned: true)
!4048 = !DIEnumerator(name: "KMALLOC_DMA", value: 2, isUnsigned: true)
!4049 = !DIEnumerator(name: "NR_KMALLOC_TYPES", value: 3, isUnsigned: true)
!4050 = !{!7, !240, !152, !291, !400, !4051, !508, !4052, !330, !2705, !4055, !401, !4056, !724, !2645, !4166, !2753, !306, !303}
!4051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1372, size: 64)
!4052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4053, size: 64)
!4053 = !DICompositeType(tag: DW_TAG_structure_type, name: "nand_bch_control", file: !4054, line: 13, flags: DIFlagFwdDecl)
!4054 = !DIFile(filename: "./include/linux/mtd/nand_bch.h", directory: "/home/lizy2001/genbc/linux")
!4055 = !DIDerivedType(tag: DW_TAG_typedef, name: "uintptr_t", file: !181, line: 37, baseType: !306)
!4056 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4057, size: 64)
!4057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_device", file: !94, line: 319, size: 11200, elements: !4058)
!4058 = !{!4059, !4060, !4072, !4141, !4146, !4150}
!4059 = !DIDerivedType(tag: DW_TAG_member, name: "mtd", scope: !4057, file: !94, line: 320, baseType: !2638, size: 9664)
!4060 = !DIDerivedType(tag: DW_TAG_member, name: "memorg", scope: !4057, file: !94, line: 321, baseType: !4061, size: 288, offset: 9664)
!4061 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_memory_organization", file: !94, line: 29, size: 288, elements: !4062)
!4062 = !{!4063, !4064, !4065, !4066, !4067, !4068, !4069, !4070, !4071}
!4063 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_cell", scope: !4061, file: !94, line: 30, baseType: !7, size: 32)
!4064 = !DIDerivedType(tag: DW_TAG_member, name: "pagesize", scope: !4061, file: !94, line: 31, baseType: !7, size: 32, offset: 32)
!4065 = !DIDerivedType(tag: DW_TAG_member, name: "oobsize", scope: !4061, file: !94, line: 32, baseType: !7, size: 32, offset: 64)
!4066 = !DIDerivedType(tag: DW_TAG_member, name: "pages_per_eraseblock", scope: !4061, file: !94, line: 33, baseType: !7, size: 32, offset: 96)
!4067 = !DIDerivedType(tag: DW_TAG_member, name: "eraseblocks_per_lun", scope: !4061, file: !94, line: 34, baseType: !7, size: 32, offset: 128)
!4068 = !DIDerivedType(tag: DW_TAG_member, name: "max_bad_eraseblocks_per_lun", scope: !4061, file: !94, line: 35, baseType: !7, size: 32, offset: 160)
!4069 = !DIDerivedType(tag: DW_TAG_member, name: "planes_per_lun", scope: !4061, file: !94, line: 36, baseType: !7, size: 32, offset: 192)
!4070 = !DIDerivedType(tag: DW_TAG_member, name: "luns_per_target", scope: !4061, file: !94, line: 37, baseType: !7, size: 32, offset: 224)
!4071 = !DIDerivedType(tag: DW_TAG_member, name: "ntargets", scope: !4061, file: !94, line: 38, baseType: !7, size: 32, offset: 256)
!4072 = !DIDerivedType(tag: DW_TAG_member, name: "ecc", scope: !4057, file: !94, line: 322, baseType: !4073, size: 1024, offset: 9984)
!4073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_ecc", file: !94, line: 291, size: 1024, elements: !4074)
!4074 = !{!4075, !4084, !4085, !4086, !4092, !4140}
!4075 = !DIDerivedType(tag: DW_TAG_member, name: "defaults", scope: !4073, file: !94, line: 292, baseType: !4076, size: 192)
!4076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_ecc_props", file: !94, line: 187, size: 192, elements: !4077)
!4077 = !{!4078, !4079, !4080, !4081, !4082, !4083}
!4078 = !DIDerivedType(tag: DW_TAG_member, name: "engine_type", scope: !4076, file: !94, line: 188, baseType: !93, size: 32)
!4079 = !DIDerivedType(tag: DW_TAG_member, name: "placement", scope: !4076, file: !94, line: 189, baseType: !101, size: 32, offset: 32)
!4080 = !DIDerivedType(tag: DW_TAG_member, name: "algo", scope: !4076, file: !94, line: 190, baseType: !106, size: 32, offset: 64)
!4081 = !DIDerivedType(tag: DW_TAG_member, name: "strength", scope: !4076, file: !94, line: 191, baseType: !7, size: 32, offset: 96)
!4082 = !DIDerivedType(tag: DW_TAG_member, name: "step_size", scope: !4076, file: !94, line: 192, baseType: !7, size: 32, offset: 128)
!4083 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !4076, file: !94, line: 193, baseType: !7, size: 32, offset: 160)
!4084 = !DIDerivedType(tag: DW_TAG_member, name: "requirements", scope: !4073, file: !94, line: 293, baseType: !4076, size: 192, offset: 192)
!4085 = !DIDerivedType(tag: DW_TAG_member, name: "user_conf", scope: !4073, file: !94, line: 294, baseType: !4076, size: 192, offset: 384)
!4086 = !DIDerivedType(tag: DW_TAG_member, name: "ctx", scope: !4073, file: !94, line: 295, baseType: !4087, size: 320, offset: 576)
!4087 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_ecc_context", file: !94, line: 238, size: 320, elements: !4088)
!4088 = !{!4089, !4090, !4091}
!4089 = !DIDerivedType(tag: DW_TAG_member, name: "conf", scope: !4087, file: !94, line: 239, baseType: !4076, size: 192)
!4090 = !DIDerivedType(tag: DW_TAG_member, name: "total", scope: !4087, file: !94, line: 240, baseType: !7, size: 32, offset: 192)
!4091 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !4087, file: !94, line: 241, baseType: !330, size: 64, offset: 256)
!4092 = !DIDerivedType(tag: DW_TAG_member, name: "ondie_engine", scope: !4073, file: !94, line: 296, baseType: !4093, size: 64, offset: 896)
!4093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4094, size: 64)
!4094 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_ecc_engine", file: !94, line: 268, size: 64, elements: !4095)
!4095 = !{!4096}
!4096 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !4094, file: !94, line: 269, baseType: !4097, size: 64)
!4097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4098, size: 64)
!4098 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_ecc_engine_ops", file: !94, line: 255, size: 256, elements: !4099)
!4099 = !{!4100, !4104, !4108, !4139}
!4100 = !DIDerivedType(tag: DW_TAG_member, name: "init_ctx", scope: !4098, file: !94, line: 256, baseType: !4101, size: 64)
!4101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4102, size: 64)
!4102 = !DISubroutineType(types: !4103)
!4103 = !{!240, !4056}
!4104 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup_ctx", scope: !4098, file: !94, line: 257, baseType: !4105, size: 64, offset: 64)
!4105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4106, size: 64)
!4106 = !DISubroutineType(types: !4107)
!4107 = !{null, !4056}
!4108 = !DIDerivedType(tag: DW_TAG_member, name: "prepare_io_req", scope: !4098, file: !94, line: 258, baseType: !4109, size: 64, offset: 128)
!4109 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4110, size: 64)
!4110 = !DISubroutineType(types: !4111)
!4111 = !{!240, !4056, !4112}
!4112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4113, size: 64)
!4113 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_page_io_req", file: !94, line: 112, size: 512, elements: !4114)
!4114 = !{!4115, !4116, !4124, !4125, !4126, !4131, !4132, !4133, !4138}
!4115 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4113, file: !94, line: 113, baseType: !112, size: 32)
!4116 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !4113, file: !94, line: 114, baseType: !4117, size: 160, offset: 32)
!4117 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_pos", file: !94, line: 77, size: 160, elements: !4118)
!4118 = !{!4119, !4120, !4121, !4122, !4123}
!4119 = !DIDerivedType(tag: DW_TAG_member, name: "target", scope: !4117, file: !94, line: 78, baseType: !7, size: 32)
!4120 = !DIDerivedType(tag: DW_TAG_member, name: "lun", scope: !4117, file: !94, line: 79, baseType: !7, size: 32, offset: 32)
!4121 = !DIDerivedType(tag: DW_TAG_member, name: "plane", scope: !4117, file: !94, line: 80, baseType: !7, size: 32, offset: 64)
!4122 = !DIDerivedType(tag: DW_TAG_member, name: "eraseblock", scope: !4117, file: !94, line: 81, baseType: !7, size: 32, offset: 96)
!4123 = !DIDerivedType(tag: DW_TAG_member, name: "page", scope: !4117, file: !94, line: 82, baseType: !7, size: 32, offset: 128)
!4124 = !DIDerivedType(tag: DW_TAG_member, name: "dataoffs", scope: !4113, file: !94, line: 115, baseType: !7, size: 32, offset: 192)
!4125 = !DIDerivedType(tag: DW_TAG_member, name: "datalen", scope: !4113, file: !94, line: 116, baseType: !7, size: 32, offset: 224)
!4126 = !DIDerivedType(tag: DW_TAG_member, name: "databuf", scope: !4113, file: !94, line: 120, baseType: !4127, size: 64, offset: 256)
!4127 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4113, file: !94, line: 117, size: 64, elements: !4128)
!4128 = !{!4129, !4130}
!4129 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !4127, file: !94, line: 118, baseType: !189, size: 64)
!4130 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !4127, file: !94, line: 119, baseType: !330, size: 64)
!4131 = !DIDerivedType(tag: DW_TAG_member, name: "ooboffs", scope: !4113, file: !94, line: 121, baseType: !7, size: 32, offset: 320)
!4132 = !DIDerivedType(tag: DW_TAG_member, name: "ooblen", scope: !4113, file: !94, line: 122, baseType: !7, size: 32, offset: 352)
!4133 = !DIDerivedType(tag: DW_TAG_member, name: "oobbuf", scope: !4113, file: !94, line: 126, baseType: !4134, size: 64, offset: 384)
!4134 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4113, file: !94, line: 123, size: 64, elements: !4135)
!4135 = !{!4136, !4137}
!4136 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !4134, file: !94, line: 124, baseType: !189, size: 64)
!4137 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !4134, file: !94, line: 125, baseType: !330, size: 64)
!4138 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !4113, file: !94, line: 127, baseType: !240, size: 32, offset: 448)
!4139 = !DIDerivedType(tag: DW_TAG_member, name: "finish_io_req", scope: !4098, file: !94, line: 260, baseType: !4109, size: 64, offset: 192)
!4140 = !DIDerivedType(tag: DW_TAG_member, name: "engine", scope: !4073, file: !94, line: 297, baseType: !4093, size: 64, offset: 960)
!4141 = !DIDerivedType(tag: DW_TAG_member, name: "rowconv", scope: !4057, file: !94, line: 323, baseType: !4142, size: 64, offset: 11008)
!4142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_row_converter", file: !94, line: 61, size: 64, elements: !4143)
!4143 = !{!4144, !4145}
!4144 = !DIDerivedType(tag: DW_TAG_member, name: "lun_addr_shift", scope: !4142, file: !94, line: 62, baseType: !7, size: 32)
!4145 = !DIDerivedType(tag: DW_TAG_member, name: "eraseblock_addr_shift", scope: !4142, file: !94, line: 63, baseType: !7, size: 32, offset: 32)
!4146 = !DIDerivedType(tag: DW_TAG_member, name: "bbt", scope: !4057, file: !94, line: 324, baseType: !4147, size: 64, offset: 11072)
!4147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_bbt", file: !94, line: 205, size: 64, elements: !4148)
!4148 = !{!4149}
!4149 = !DIDerivedType(tag: DW_TAG_member, name: "cache", scope: !4147, file: !94, line: 206, baseType: !2705, size: 64)
!4150 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !4057, file: !94, line: 325, baseType: !4151, size: 64, offset: 11136)
!4151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4152, size: 64)
!4152 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4153)
!4153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_ops", file: !94, line: 225, size: 192, elements: !4154)
!4154 = !{!4155, !4161, !4162}
!4155 = !DIDerivedType(tag: DW_TAG_member, name: "erase", scope: !4153, file: !94, line: 226, baseType: !4156, size: 64)
!4156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4157, size: 64)
!4157 = !DISubroutineType(types: !4158)
!4158 = !{!240, !4056, !4159}
!4159 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4160, size: 64)
!4160 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4117)
!4161 = !DIDerivedType(tag: DW_TAG_member, name: "markbad", scope: !4153, file: !94, line: 227, baseType: !4156, size: 64, offset: 64)
!4162 = !DIDerivedType(tag: DW_TAG_member, name: "isbad", scope: !4153, file: !94, line: 228, baseType: !4163, size: 64, offset: 128)
!4163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4164, size: 64)
!4164 = !DISubroutineType(types: !4165)
!4165 = !{!180, !4056, !4159}
!4166 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4167, size: 64)
!4167 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_chip", file: !117, line: 1096, size: 16704, elements: !4168)
!4168 = !{!4169, !4170, !4176, !4200, !4297, !4367, !4475, !4476, !4477, !4478, !4479, !4480, !4481, !4482, !4498, !4499, !4500, !4501, !4502, !4503, !4504, !4505, !4506, !4507, !4508, !4513, !4514, !4515, !4516, !4517, !4518, !4520, !4570}
!4169 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !4167, file: !117, line: 1097, baseType: !4057, size: 11200)
!4170 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !4167, file: !117, line: 1098, baseType: !4171, size: 96, offset: 11200)
!4171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_id", file: !117, line: 249, size: 96, elements: !4172)
!4172 = !{!4173, !4175}
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4171, file: !117, line: 250, baseType: !4174, size: 64)
!4174 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 64, elements: !1350)
!4175 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4171, file: !117, line: 251, baseType: !240, size: 32, offset: 64)
!4176 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !4167, file: !117, line: 1099, baseType: !4177, size: 704, offset: 11328)
!4177 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_parameters", file: !117, line: 230, size: 704, elements: !4178)
!4178 = !{!4179, !4180, !4181, !4183, !4184}
!4179 = !DIDerivedType(tag: DW_TAG_member, name: "model", scope: !4177, file: !117, line: 232, baseType: !147, size: 64)
!4180 = !DIDerivedType(tag: DW_TAG_member, name: "supports_set_get_features", scope: !4177, file: !117, line: 233, baseType: !180, size: 8, offset: 64)
!4181 = !DIDerivedType(tag: DW_TAG_member, name: "set_feature_list", scope: !4177, file: !117, line: 234, baseType: !4182, size: 256, offset: 128)
!4182 = !DICompositeType(tag: DW_TAG_array_type, baseType: !306, size: 256, elements: !1176)
!4183 = !DIDerivedType(tag: DW_TAG_member, name: "get_feature_list", scope: !4177, file: !117, line: 235, baseType: !4182, size: 256, offset: 384)
!4184 = !DIDerivedType(tag: DW_TAG_member, name: "onfi", scope: !4177, file: !117, line: 238, baseType: !4185, size: 64, offset: 640)
!4185 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4186, size: 64)
!4186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "onfi_params", file: !4187, line: 167, size: 832, elements: !4188)
!4187 = !DIFile(filename: "./include/linux/mtd/onfi.h", directory: "/home/lizy2001/genbc/linux")
!4188 = !{!4189, !4190, !4191, !4192, !4193, !4194, !4195, !4196}
!4189 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !4186, file: !4187, line: 168, baseType: !240, size: 32)
!4190 = !DIDerivedType(tag: DW_TAG_member, name: "tPROG", scope: !4186, file: !4187, line: 169, baseType: !840, size: 16, offset: 32)
!4191 = !DIDerivedType(tag: DW_TAG_member, name: "tBERS", scope: !4186, file: !4187, line: 170, baseType: !840, size: 16, offset: 48)
!4192 = !DIDerivedType(tag: DW_TAG_member, name: "tR", scope: !4186, file: !4187, line: 171, baseType: !840, size: 16, offset: 64)
!4193 = !DIDerivedType(tag: DW_TAG_member, name: "tCCS", scope: !4186, file: !4187, line: 172, baseType: !840, size: 16, offset: 80)
!4194 = !DIDerivedType(tag: DW_TAG_member, name: "async_timing_mode", scope: !4186, file: !4187, line: 173, baseType: !840, size: 16, offset: 96)
!4195 = !DIDerivedType(tag: DW_TAG_member, name: "vendor_revision", scope: !4186, file: !4187, line: 174, baseType: !840, size: 16, offset: 112)
!4196 = !DIDerivedType(tag: DW_TAG_member, name: "vendor", scope: !4186, file: !4187, line: 175, baseType: !4197, size: 704, offset: 128)
!4197 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 704, elements: !4198)
!4198 = !{!4199}
!4199 = !DISubrange(count: 88)
!4200 = !DIDerivedType(tag: DW_TAG_member, name: "manufacturer", scope: !4167, file: !117, line: 1100, baseType: !4201, size: 128, offset: 12032)
!4201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_manufacturer", file: !117, line: 1036, size: 128, elements: !4202)
!4202 = !{!4203, !4296}
!4203 = !DIDerivedType(tag: DW_TAG_member, name: "desc", scope: !4201, file: !117, line: 1037, baseType: !4204, size: 64)
!4204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4205, size: 64)
!4205 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4206)
!4206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_manufacturer_desc", file: !4207, line: 61, size: 192, elements: !4208)
!4207 = !DIFile(filename: "drivers/mtd/nand/raw/internals.h", directory: "/home/lizy2001/genbc/linux")
!4208 = !{!4209, !4210, !4211}
!4209 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !4206, file: !4207, line: 62, baseType: !240, size: 32)
!4210 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4206, file: !4207, line: 63, baseType: !256, size: 64, offset: 64)
!4211 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !4206, file: !4207, line: 64, baseType: !4212, size: 64, offset: 128)
!4212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4213, size: 64)
!4213 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4214)
!4214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_manufacturer_ops", file: !4207, line: 47, size: 256, elements: !4215)
!4215 = !{!4216, !4220, !4224, !4225}
!4216 = !DIDerivedType(tag: DW_TAG_member, name: "detect", scope: !4214, file: !4207, line: 48, baseType: !4217, size: 64)
!4217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4218, size: 64)
!4218 = !DISubroutineType(types: !4219)
!4219 = !{null, !4166}
!4220 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !4214, file: !4207, line: 49, baseType: !4221, size: 64, offset: 64)
!4221 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4222, size: 64)
!4222 = !DISubroutineType(types: !4223)
!4223 = !{!240, !4166}
!4224 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !4214, file: !4207, line: 50, baseType: !4217, size: 64, offset: 128)
!4225 = !DIDerivedType(tag: DW_TAG_member, name: "fixup_onfi_param_page", scope: !4214, file: !4207, line: 51, baseType: !4226, size: 64, offset: 192)
!4226 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4227, size: 64)
!4227 = !DISubroutineType(types: !4228)
!4228 = !{null, !4166, !4229}
!4229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4230, size: 64)
!4230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_onfi_params", file: !4187, line: 54, size: 2048, elements: !4231)
!4231 = !{!4232, !4234, !4236, !4237, !4238, !4240, !4241, !4242, !4246, !4248, !4250, !4251, !4252, !4256, !4258, !4259, !4260, !4261, !4262, !4263, !4264, !4265, !4266, !4267, !4268, !4269, !4270, !4271, !4272, !4273, !4274, !4275, !4276, !4277, !4278, !4279, !4280, !4281, !4282, !4283, !4284, !4285, !4286, !4287, !4288, !4289, !4290, !4291, !4292, !4293, !4294, !4295}
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !4230, file: !4187, line: 57, baseType: !4233, size: 32)
!4233 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 32, elements: !1176)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "revision", scope: !4230, file: !4187, line: 58, baseType: !4235, size: 16, offset: 32)
!4235 = !DIDerivedType(tag: DW_TAG_typedef, name: "__le16", file: !3138, line: 29, baseType: !841)
!4236 = !DIDerivedType(tag: DW_TAG_member, name: "features", scope: !4230, file: !4187, line: 59, baseType: !4235, size: 16, offset: 48)
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "opt_cmd", scope: !4230, file: !4187, line: 60, baseType: !4235, size: 16, offset: 64)
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "reserved0", scope: !4230, file: !4187, line: 61, baseType: !4239, size: 16, offset: 80)
!4239 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 16, elements: !1589)
!4240 = !DIDerivedType(tag: DW_TAG_member, name: "ext_param_page_length", scope: !4230, file: !4187, line: 62, baseType: !4235, size: 16, offset: 96)
!4241 = !DIDerivedType(tag: DW_TAG_member, name: "num_of_param_pages", scope: !4230, file: !4187, line: 63, baseType: !1372, size: 8, offset: 112)
!4242 = !DIDerivedType(tag: DW_TAG_member, name: "reserved1", scope: !4230, file: !4187, line: 64, baseType: !4243, size: 136, offset: 120)
!4243 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 136, elements: !4244)
!4244 = !{!4245}
!4245 = !DISubrange(count: 17)
!4246 = !DIDerivedType(tag: DW_TAG_member, name: "manufacturer", scope: !4230, file: !4187, line: 67, baseType: !4247, size: 96, offset: 256)
!4247 = !DICompositeType(tag: DW_TAG_array_type, baseType: !149, size: 96, elements: !2254)
!4248 = !DIDerivedType(tag: DW_TAG_member, name: "model", scope: !4230, file: !4187, line: 68, baseType: !4249, size: 160, offset: 352)
!4249 = !DICompositeType(tag: DW_TAG_array_type, baseType: !149, size: 160, elements: !2219)
!4250 = !DIDerivedType(tag: DW_TAG_member, name: "jedec_id", scope: !4230, file: !4187, line: 69, baseType: !1372, size: 8, offset: 512)
!4251 = !DIDerivedType(tag: DW_TAG_member, name: "date_code", scope: !4230, file: !4187, line: 70, baseType: !4235, size: 16, offset: 520)
!4252 = !DIDerivedType(tag: DW_TAG_member, name: "reserved2", scope: !4230, file: !4187, line: 71, baseType: !4253, size: 104, offset: 536)
!4253 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 104, elements: !4254)
!4254 = !{!4255}
!4255 = !DISubrange(count: 13)
!4256 = !DIDerivedType(tag: DW_TAG_member, name: "byte_per_page", scope: !4230, file: !4187, line: 74, baseType: !4257, size: 32, offset: 640)
!4257 = !DIDerivedType(tag: DW_TAG_typedef, name: "__le32", file: !3138, line: 31, baseType: !154)
!4258 = !DIDerivedType(tag: DW_TAG_member, name: "spare_bytes_per_page", scope: !4230, file: !4187, line: 75, baseType: !4235, size: 16, offset: 672)
!4259 = !DIDerivedType(tag: DW_TAG_member, name: "data_bytes_per_ppage", scope: !4230, file: !4187, line: 76, baseType: !4257, size: 32, offset: 688)
!4260 = !DIDerivedType(tag: DW_TAG_member, name: "spare_bytes_per_ppage", scope: !4230, file: !4187, line: 77, baseType: !4235, size: 16, offset: 720)
!4261 = !DIDerivedType(tag: DW_TAG_member, name: "pages_per_block", scope: !4230, file: !4187, line: 78, baseType: !4257, size: 32, offset: 736)
!4262 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_per_lun", scope: !4230, file: !4187, line: 79, baseType: !4257, size: 32, offset: 768)
!4263 = !DIDerivedType(tag: DW_TAG_member, name: "lun_count", scope: !4230, file: !4187, line: 80, baseType: !1372, size: 8, offset: 800)
!4264 = !DIDerivedType(tag: DW_TAG_member, name: "addr_cycles", scope: !4230, file: !4187, line: 81, baseType: !1372, size: 8, offset: 808)
!4265 = !DIDerivedType(tag: DW_TAG_member, name: "bits_per_cell", scope: !4230, file: !4187, line: 82, baseType: !1372, size: 8, offset: 816)
!4266 = !DIDerivedType(tag: DW_TAG_member, name: "bb_per_lun", scope: !4230, file: !4187, line: 83, baseType: !4235, size: 16, offset: 824)
!4267 = !DIDerivedType(tag: DW_TAG_member, name: "block_endurance", scope: !4230, file: !4187, line: 84, baseType: !4235, size: 16, offset: 840)
!4268 = !DIDerivedType(tag: DW_TAG_member, name: "guaranteed_good_blocks", scope: !4230, file: !4187, line: 85, baseType: !1372, size: 8, offset: 856)
!4269 = !DIDerivedType(tag: DW_TAG_member, name: "guaranteed_block_endurance", scope: !4230, file: !4187, line: 86, baseType: !4235, size: 16, offset: 864)
!4270 = !DIDerivedType(tag: DW_TAG_member, name: "programs_per_page", scope: !4230, file: !4187, line: 87, baseType: !1372, size: 8, offset: 880)
!4271 = !DIDerivedType(tag: DW_TAG_member, name: "ppage_attr", scope: !4230, file: !4187, line: 88, baseType: !1372, size: 8, offset: 888)
!4272 = !DIDerivedType(tag: DW_TAG_member, name: "ecc_bits", scope: !4230, file: !4187, line: 89, baseType: !1372, size: 8, offset: 896)
!4273 = !DIDerivedType(tag: DW_TAG_member, name: "interleaved_bits", scope: !4230, file: !4187, line: 90, baseType: !1372, size: 8, offset: 904)
!4274 = !DIDerivedType(tag: DW_TAG_member, name: "interleaved_ops", scope: !4230, file: !4187, line: 91, baseType: !1372, size: 8, offset: 912)
!4275 = !DIDerivedType(tag: DW_TAG_member, name: "reserved3", scope: !4230, file: !4187, line: 92, baseType: !4253, size: 104, offset: 920)
!4276 = !DIDerivedType(tag: DW_TAG_member, name: "io_pin_capacitance_max", scope: !4230, file: !4187, line: 95, baseType: !1372, size: 8, offset: 1024)
!4277 = !DIDerivedType(tag: DW_TAG_member, name: "async_timing_mode", scope: !4230, file: !4187, line: 96, baseType: !4235, size: 16, offset: 1032)
!4278 = !DIDerivedType(tag: DW_TAG_member, name: "program_cache_timing_mode", scope: !4230, file: !4187, line: 97, baseType: !4235, size: 16, offset: 1048)
!4279 = !DIDerivedType(tag: DW_TAG_member, name: "t_prog", scope: !4230, file: !4187, line: 98, baseType: !4235, size: 16, offset: 1064)
!4280 = !DIDerivedType(tag: DW_TAG_member, name: "t_bers", scope: !4230, file: !4187, line: 99, baseType: !4235, size: 16, offset: 1080)
!4281 = !DIDerivedType(tag: DW_TAG_member, name: "t_r", scope: !4230, file: !4187, line: 100, baseType: !4235, size: 16, offset: 1096)
!4282 = !DIDerivedType(tag: DW_TAG_member, name: "t_ccs", scope: !4230, file: !4187, line: 101, baseType: !4235, size: 16, offset: 1112)
!4283 = !DIDerivedType(tag: DW_TAG_member, name: "src_sync_timing_mode", scope: !4230, file: !4187, line: 102, baseType: !4235, size: 16, offset: 1128)
!4284 = !DIDerivedType(tag: DW_TAG_member, name: "src_ssync_features", scope: !4230, file: !4187, line: 103, baseType: !1372, size: 8, offset: 1144)
!4285 = !DIDerivedType(tag: DW_TAG_member, name: "clk_pin_capacitance_typ", scope: !4230, file: !4187, line: 104, baseType: !4235, size: 16, offset: 1152)
!4286 = !DIDerivedType(tag: DW_TAG_member, name: "io_pin_capacitance_typ", scope: !4230, file: !4187, line: 105, baseType: !4235, size: 16, offset: 1168)
!4287 = !DIDerivedType(tag: DW_TAG_member, name: "input_pin_capacitance_typ", scope: !4230, file: !4187, line: 106, baseType: !4235, size: 16, offset: 1184)
!4288 = !DIDerivedType(tag: DW_TAG_member, name: "input_pin_capacitance_max", scope: !4230, file: !4187, line: 107, baseType: !1372, size: 8, offset: 1200)
!4289 = !DIDerivedType(tag: DW_TAG_member, name: "driver_strength_support", scope: !4230, file: !4187, line: 108, baseType: !1372, size: 8, offset: 1208)
!4290 = !DIDerivedType(tag: DW_TAG_member, name: "t_int_r", scope: !4230, file: !4187, line: 109, baseType: !4235, size: 16, offset: 1216)
!4291 = !DIDerivedType(tag: DW_TAG_member, name: "t_adl", scope: !4230, file: !4187, line: 110, baseType: !4235, size: 16, offset: 1232)
!4292 = !DIDerivedType(tag: DW_TAG_member, name: "reserved4", scope: !4230, file: !4187, line: 111, baseType: !4174, size: 64, offset: 1248)
!4293 = !DIDerivedType(tag: DW_TAG_member, name: "vendor_revision", scope: !4230, file: !4187, line: 114, baseType: !4235, size: 16, offset: 1312)
!4294 = !DIDerivedType(tag: DW_TAG_member, name: "vendor", scope: !4230, file: !4187, line: 115, baseType: !4197, size: 704, offset: 1328)
!4295 = !DIDerivedType(tag: DW_TAG_member, name: "crc", scope: !4230, file: !4187, line: 117, baseType: !4235, size: 16, offset: 2032)
!4296 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !4201, file: !117, line: 1038, baseType: !330, size: 64, offset: 64)
!4297 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !4167, file: !117, line: 1101, baseType: !4298, size: 384, offset: 12160)
!4298 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_chip_ops", file: !117, line: 1021, size: 384, elements: !4299)
!4299 = !{!4300, !4301, !4302, !4306, !4307, !4311}
!4300 = !DIDerivedType(tag: DW_TAG_member, name: "suspend", scope: !4298, file: !117, line: 1022, baseType: !4221, size: 64)
!4301 = !DIDerivedType(tag: DW_TAG_member, name: "resume", scope: !4298, file: !117, line: 1023, baseType: !4217, size: 64, offset: 64)
!4302 = !DIDerivedType(tag: DW_TAG_member, name: "lock_area", scope: !4298, file: !117, line: 1024, baseType: !4303, size: 64, offset: 128)
!4303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4304, size: 64)
!4304 = !DISubroutineType(types: !4305)
!4305 = !{!240, !4166, !508, !2645}
!4306 = !DIDerivedType(tag: DW_TAG_member, name: "unlock_area", scope: !4298, file: !117, line: 1025, baseType: !4303, size: 64, offset: 192)
!4307 = !DIDerivedType(tag: DW_TAG_member, name: "setup_read_retry", scope: !4298, file: !117, line: 1026, baseType: !4308, size: 64, offset: 256)
!4308 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4309, size: 64)
!4309 = !DISubroutineType(types: !4310)
!4310 = !{!240, !4166, !240}
!4311 = !DIDerivedType(tag: DW_TAG_member, name: "choose_interface_config", scope: !4298, file: !117, line: 1027, baseType: !4312, size: 64, offset: 320)
!4312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4313, size: 64)
!4313 = !DISubroutineType(types: !4314)
!4314 = !{!240, !4166, !4315}
!4315 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4316, size: 64)
!4316 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_interface_config", file: !117, line: 492, size: 1536, elements: !4317)
!4317 = !{!4318, !4319}
!4318 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4316, file: !117, line: 493, baseType: !116, size: 32)
!4319 = !DIDerivedType(tag: DW_TAG_member, name: "timings", scope: !4316, file: !117, line: 499, baseType: !4320, size: 1472, offset: 64)
!4320 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_timings", file: !117, line: 494, size: 1472, elements: !4321)
!4321 = !{!4322, !4323}
!4322 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !4320, file: !117, line: 495, baseType: !7, size: 32)
!4323 = !DIDerivedType(tag: DW_TAG_member, scope: !4320, file: !117, line: 496, baseType: !4324, size: 1408, offset: 64)
!4324 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4320, file: !117, line: 496, size: 1408, elements: !4325)
!4325 = !{!4326}
!4326 = !DIDerivedType(tag: DW_TAG_member, name: "sdr", scope: !4324, file: !117, line: 497, baseType: !4327, size: 1408)
!4327 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_sdr_timings", file: !117, line: 436, size: 1408, elements: !4328)
!4328 = !{!4329, !4330, !4331, !4332, !4333, !4334, !4335, !4336, !4337, !4338, !4339, !4340, !4341, !4342, !4343, !4344, !4345, !4346, !4347, !4348, !4349, !4350, !4351, !4352, !4353, !4354, !4355, !4356, !4357, !4358, !4359, !4360, !4361, !4362, !4363, !4364, !4365, !4366}
!4329 = !DIDerivedType(tag: DW_TAG_member, name: "tBERS_max", scope: !4327, file: !117, line: 437, baseType: !400, size: 64)
!4330 = !DIDerivedType(tag: DW_TAG_member, name: "tCCS_min", scope: !4327, file: !117, line: 438, baseType: !152, size: 32, offset: 64)
!4331 = !DIDerivedType(tag: DW_TAG_member, name: "tPROG_max", scope: !4327, file: !117, line: 439, baseType: !400, size: 64, offset: 128)
!4332 = !DIDerivedType(tag: DW_TAG_member, name: "tR_max", scope: !4327, file: !117, line: 440, baseType: !400, size: 64, offset: 192)
!4333 = !DIDerivedType(tag: DW_TAG_member, name: "tALH_min", scope: !4327, file: !117, line: 441, baseType: !152, size: 32, offset: 256)
!4334 = !DIDerivedType(tag: DW_TAG_member, name: "tADL_min", scope: !4327, file: !117, line: 442, baseType: !152, size: 32, offset: 288)
!4335 = !DIDerivedType(tag: DW_TAG_member, name: "tALS_min", scope: !4327, file: !117, line: 443, baseType: !152, size: 32, offset: 320)
!4336 = !DIDerivedType(tag: DW_TAG_member, name: "tAR_min", scope: !4327, file: !117, line: 444, baseType: !152, size: 32, offset: 352)
!4337 = !DIDerivedType(tag: DW_TAG_member, name: "tCEA_max", scope: !4327, file: !117, line: 445, baseType: !152, size: 32, offset: 384)
!4338 = !DIDerivedType(tag: DW_TAG_member, name: "tCEH_min", scope: !4327, file: !117, line: 446, baseType: !152, size: 32, offset: 416)
!4339 = !DIDerivedType(tag: DW_TAG_member, name: "tCH_min", scope: !4327, file: !117, line: 447, baseType: !152, size: 32, offset: 448)
!4340 = !DIDerivedType(tag: DW_TAG_member, name: "tCHZ_max", scope: !4327, file: !117, line: 448, baseType: !152, size: 32, offset: 480)
!4341 = !DIDerivedType(tag: DW_TAG_member, name: "tCLH_min", scope: !4327, file: !117, line: 449, baseType: !152, size: 32, offset: 512)
!4342 = !DIDerivedType(tag: DW_TAG_member, name: "tCLR_min", scope: !4327, file: !117, line: 450, baseType: !152, size: 32, offset: 544)
!4343 = !DIDerivedType(tag: DW_TAG_member, name: "tCLS_min", scope: !4327, file: !117, line: 451, baseType: !152, size: 32, offset: 576)
!4344 = !DIDerivedType(tag: DW_TAG_member, name: "tCOH_min", scope: !4327, file: !117, line: 452, baseType: !152, size: 32, offset: 608)
!4345 = !DIDerivedType(tag: DW_TAG_member, name: "tCS_min", scope: !4327, file: !117, line: 453, baseType: !152, size: 32, offset: 640)
!4346 = !DIDerivedType(tag: DW_TAG_member, name: "tDH_min", scope: !4327, file: !117, line: 454, baseType: !152, size: 32, offset: 672)
!4347 = !DIDerivedType(tag: DW_TAG_member, name: "tDS_min", scope: !4327, file: !117, line: 455, baseType: !152, size: 32, offset: 704)
!4348 = !DIDerivedType(tag: DW_TAG_member, name: "tFEAT_max", scope: !4327, file: !117, line: 456, baseType: !152, size: 32, offset: 736)
!4349 = !DIDerivedType(tag: DW_TAG_member, name: "tIR_min", scope: !4327, file: !117, line: 457, baseType: !152, size: 32, offset: 768)
!4350 = !DIDerivedType(tag: DW_TAG_member, name: "tITC_max", scope: !4327, file: !117, line: 458, baseType: !152, size: 32, offset: 800)
!4351 = !DIDerivedType(tag: DW_TAG_member, name: "tRC_min", scope: !4327, file: !117, line: 459, baseType: !152, size: 32, offset: 832)
!4352 = !DIDerivedType(tag: DW_TAG_member, name: "tREA_max", scope: !4327, file: !117, line: 460, baseType: !152, size: 32, offset: 864)
!4353 = !DIDerivedType(tag: DW_TAG_member, name: "tREH_min", scope: !4327, file: !117, line: 461, baseType: !152, size: 32, offset: 896)
!4354 = !DIDerivedType(tag: DW_TAG_member, name: "tRHOH_min", scope: !4327, file: !117, line: 462, baseType: !152, size: 32, offset: 928)
!4355 = !DIDerivedType(tag: DW_TAG_member, name: "tRHW_min", scope: !4327, file: !117, line: 463, baseType: !152, size: 32, offset: 960)
!4356 = !DIDerivedType(tag: DW_TAG_member, name: "tRHZ_max", scope: !4327, file: !117, line: 464, baseType: !152, size: 32, offset: 992)
!4357 = !DIDerivedType(tag: DW_TAG_member, name: "tRLOH_min", scope: !4327, file: !117, line: 465, baseType: !152, size: 32, offset: 1024)
!4358 = !DIDerivedType(tag: DW_TAG_member, name: "tRP_min", scope: !4327, file: !117, line: 466, baseType: !152, size: 32, offset: 1056)
!4359 = !DIDerivedType(tag: DW_TAG_member, name: "tRR_min", scope: !4327, file: !117, line: 467, baseType: !152, size: 32, offset: 1088)
!4360 = !DIDerivedType(tag: DW_TAG_member, name: "tRST_max", scope: !4327, file: !117, line: 468, baseType: !400, size: 64, offset: 1152)
!4361 = !DIDerivedType(tag: DW_TAG_member, name: "tWB_max", scope: !4327, file: !117, line: 469, baseType: !152, size: 32, offset: 1216)
!4362 = !DIDerivedType(tag: DW_TAG_member, name: "tWC_min", scope: !4327, file: !117, line: 470, baseType: !152, size: 32, offset: 1248)
!4363 = !DIDerivedType(tag: DW_TAG_member, name: "tWH_min", scope: !4327, file: !117, line: 471, baseType: !152, size: 32, offset: 1280)
!4364 = !DIDerivedType(tag: DW_TAG_member, name: "tWHR_min", scope: !4327, file: !117, line: 472, baseType: !152, size: 32, offset: 1312)
!4365 = !DIDerivedType(tag: DW_TAG_member, name: "tWP_min", scope: !4327, file: !117, line: 473, baseType: !152, size: 32, offset: 1344)
!4366 = !DIDerivedType(tag: DW_TAG_member, name: "tWW_min", scope: !4327, file: !117, line: 474, baseType: !152, size: 32, offset: 1376)
!4367 = !DIDerivedType(tag: DW_TAG_member, name: "legacy", scope: !4167, file: !117, line: 1102, baseType: !4368, size: 1280, offset: 12544)
!4368 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_legacy", file: !117, line: 989, size: 1280, elements: !4369)
!4369 = !{!4370, !4371, !4372, !4376, !4380, !4384, !4390, !4394, !4398, !4402, !4403, !4404, !4408, !4409, !4413, !4414, !4415}
!4370 = !DIDerivedType(tag: DW_TAG_member, name: "IO_ADDR_R", scope: !4368, file: !117, line: 990, baseType: !330, size: 64)
!4371 = !DIDerivedType(tag: DW_TAG_member, name: "IO_ADDR_W", scope: !4368, file: !117, line: 991, baseType: !330, size: 64, offset: 64)
!4372 = !DIDerivedType(tag: DW_TAG_member, name: "select_chip", scope: !4368, file: !117, line: 992, baseType: !4373, size: 64, offset: 128)
!4373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4374, size: 64)
!4374 = !DISubroutineType(types: !4375)
!4375 = !{null, !4166, !240}
!4376 = !DIDerivedType(tag: DW_TAG_member, name: "read_byte", scope: !4368, file: !117, line: 993, baseType: !4377, size: 64, offset: 192)
!4377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4378, size: 64)
!4378 = !DISubroutineType(types: !4379)
!4379 = !{!1372, !4166}
!4380 = !DIDerivedType(tag: DW_TAG_member, name: "write_byte", scope: !4368, file: !117, line: 994, baseType: !4381, size: 64, offset: 256)
!4381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4382, size: 64)
!4382 = !DISubroutineType(types: !4383)
!4383 = !{null, !4166, !1372}
!4384 = !DIDerivedType(tag: DW_TAG_member, name: "write_buf", scope: !4368, file: !117, line: 995, baseType: !4385, size: 64, offset: 320)
!4385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4386, size: 64)
!4386 = !DISubroutineType(types: !4387)
!4387 = !{null, !4166, !4388, !240}
!4388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4389, size: 64)
!4389 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1372)
!4390 = !DIDerivedType(tag: DW_TAG_member, name: "read_buf", scope: !4368, file: !117, line: 996, baseType: !4391, size: 64, offset: 384)
!4391 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4392, size: 64)
!4392 = !DISubroutineType(types: !4393)
!4393 = !{null, !4166, !4051, !240}
!4394 = !DIDerivedType(tag: DW_TAG_member, name: "cmd_ctrl", scope: !4368, file: !117, line: 997, baseType: !4395, size: 64, offset: 448)
!4395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4396, size: 64)
!4396 = !DISubroutineType(types: !4397)
!4397 = !{null, !4166, !240, !7}
!4398 = !DIDerivedType(tag: DW_TAG_member, name: "cmdfunc", scope: !4368, file: !117, line: 998, baseType: !4399, size: 64, offset: 512)
!4399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4400, size: 64)
!4400 = !DISubroutineType(types: !4401)
!4401 = !{null, !4166, !7, !240, !240}
!4402 = !DIDerivedType(tag: DW_TAG_member, name: "dev_ready", scope: !4368, file: !117, line: 1000, baseType: !4221, size: 64, offset: 576)
!4403 = !DIDerivedType(tag: DW_TAG_member, name: "waitfunc", scope: !4368, file: !117, line: 1001, baseType: !4221, size: 64, offset: 640)
!4404 = !DIDerivedType(tag: DW_TAG_member, name: "block_bad", scope: !4368, file: !117, line: 1002, baseType: !4405, size: 64, offset: 704)
!4405 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4406, size: 64)
!4406 = !DISubroutineType(types: !4407)
!4407 = !{!240, !4166, !508}
!4408 = !DIDerivedType(tag: DW_TAG_member, name: "block_markbad", scope: !4368, file: !117, line: 1003, baseType: !4405, size: 64, offset: 768)
!4409 = !DIDerivedType(tag: DW_TAG_member, name: "set_features", scope: !4368, file: !117, line: 1004, baseType: !4410, size: 64, offset: 832)
!4410 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4411, size: 64)
!4411 = !DISubroutineType(types: !4412)
!4412 = !{!240, !4166, !240, !4051}
!4413 = !DIDerivedType(tag: DW_TAG_member, name: "get_features", scope: !4368, file: !117, line: 1006, baseType: !4410, size: 64, offset: 896)
!4414 = !DIDerivedType(tag: DW_TAG_member, name: "chip_delay", scope: !4368, file: !117, line: 1008, baseType: !240, size: 32, offset: 960)
!4415 = !DIDerivedType(tag: DW_TAG_member, name: "dummy_controller", scope: !4368, file: !117, line: 1009, baseType: !4416, size: 256, offset: 1024)
!4416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_controller", file: !117, line: 951, size: 256, elements: !4417)
!4417 = !{!4418, !4419}
!4418 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !4416, file: !117, line: 952, baseType: !1194, size: 192)
!4419 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !4416, file: !117, line: 953, baseType: !4420, size: 64, offset: 192)
!4420 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4421, size: 64)
!4421 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4422)
!4422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_controller_ops", file: !117, line: 935, size: 256, elements: !4423)
!4423 = !{!4424, !4425, !4426, !4469}
!4424 = !DIDerivedType(tag: DW_TAG_member, name: "attach_chip", scope: !4422, file: !117, line: 936, baseType: !4221, size: 64)
!4425 = !DIDerivedType(tag: DW_TAG_member, name: "detach_chip", scope: !4422, file: !117, line: 937, baseType: !4217, size: 64, offset: 64)
!4426 = !DIDerivedType(tag: DW_TAG_member, name: "exec_op", scope: !4422, file: !117, line: 938, baseType: !4427, size: 64, offset: 128)
!4427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4428, size: 64)
!4428 = !DISubroutineType(types: !4429)
!4429 = !{!240, !4166, !4430, !180}
!4430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4431, size: 64)
!4431 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4432)
!4432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_operation", file: !117, line: 860, size: 192, elements: !4433)
!4433 = !{!4434, !4435, !4468}
!4434 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !4432, file: !117, line: 861, baseType: !7, size: 32)
!4435 = !DIDerivedType(tag: DW_TAG_member, name: "instrs", scope: !4432, file: !117, line: 862, baseType: !4436, size: 64, offset: 64)
!4436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4437, size: 64)
!4437 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4438)
!4438 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_instr", file: !117, line: 593, size: 320, elements: !4439)
!4439 = !{!4440, !4441, !4467}
!4440 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4438, file: !117, line: 594, baseType: !120, size: 32)
!4441 = !DIDerivedType(tag: DW_TAG_member, name: "ctx", scope: !4438, file: !117, line: 600, baseType: !4442, size: 192, offset: 64)
!4442 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4438, file: !117, line: 595, size: 192, elements: !4443)
!4443 = !{!4444, !4448, !4453, !4463}
!4444 = !DIDerivedType(tag: DW_TAG_member, name: "cmd", scope: !4442, file: !117, line: 596, baseType: !4445, size: 8)
!4445 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_cmd_instr", file: !117, line: 519, size: 8, elements: !4446)
!4446 = !{!4447}
!4447 = !DIDerivedType(tag: DW_TAG_member, name: "opcode", scope: !4445, file: !117, line: 520, baseType: !1372, size: 8)
!4448 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !4442, file: !117, line: 597, baseType: !4449, size: 128)
!4449 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_addr_instr", file: !117, line: 528, size: 128, elements: !4450)
!4450 = !{!4451, !4452}
!4451 = !DIDerivedType(tag: DW_TAG_member, name: "naddrs", scope: !4449, file: !117, line: 529, baseType: !7, size: 32)
!4452 = !DIDerivedType(tag: DW_TAG_member, name: "addrs", scope: !4449, file: !117, line: 530, baseType: !4388, size: 64, offset: 64)
!4453 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !4442, file: !117, line: 598, baseType: !4454, size: 192)
!4454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_data_instr", file: !117, line: 545, size: 192, elements: !4455)
!4455 = !{!4456, !4457, !4462}
!4456 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4454, file: !117, line: 546, baseType: !7, size: 32)
!4457 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !4454, file: !117, line: 550, baseType: !4458, size: 64, offset: 64)
!4458 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4454, file: !117, line: 547, size: 64, elements: !4459)
!4459 = !{!4460, !4461}
!4460 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !4458, file: !117, line: 548, baseType: !330, size: 64)
!4461 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !4458, file: !117, line: 549, baseType: !189, size: 64)
!4462 = !DIDerivedType(tag: DW_TAG_member, name: "force_8bit", scope: !4454, file: !117, line: 551, baseType: !180, size: 8, offset: 128)
!4463 = !DIDerivedType(tag: DW_TAG_member, name: "waitrdy", scope: !4442, file: !117, line: 599, baseType: !4464, size: 32)
!4464 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_waitrdy_instr", file: !117, line: 558, size: 32, elements: !4465)
!4465 = !{!4466}
!4466 = !DIDerivedType(tag: DW_TAG_member, name: "timeout_ms", scope: !4464, file: !117, line: 559, baseType: !7, size: 32)
!4467 = !DIDerivedType(tag: DW_TAG_member, name: "delay_ns", scope: !4438, file: !117, line: 601, baseType: !7, size: 32, offset: 256)
!4468 = !DIDerivedType(tag: DW_TAG_member, name: "ninstrs", scope: !4432, file: !117, line: 863, baseType: !7, size: 32, offset: 128)
!4469 = !DIDerivedType(tag: DW_TAG_member, name: "setup_interface", scope: !4422, file: !117, line: 941, baseType: !4470, size: 64, offset: 192)
!4470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4471, size: 64)
!4471 = !DISubroutineType(types: !4472)
!4472 = !{!240, !4166, !240, !4473}
!4473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4474, size: 64)
!4474 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4316)
!4475 = !DIDerivedType(tag: DW_TAG_member, name: "options", scope: !4167, file: !117, line: 1103, baseType: !7, size: 32, offset: 13824)
!4476 = !DIDerivedType(tag: DW_TAG_member, name: "current_interface_config", scope: !4167, file: !117, line: 1106, baseType: !4473, size: 64, offset: 13888)
!4477 = !DIDerivedType(tag: DW_TAG_member, name: "best_interface_config", scope: !4167, file: !117, line: 1107, baseType: !4315, size: 64, offset: 13952)
!4478 = !DIDerivedType(tag: DW_TAG_member, name: "bbt_erase_shift", scope: !4167, file: !117, line: 1110, baseType: !7, size: 32, offset: 14016)
!4479 = !DIDerivedType(tag: DW_TAG_member, name: "bbt_options", scope: !4167, file: !117, line: 1111, baseType: !7, size: 32, offset: 14048)
!4480 = !DIDerivedType(tag: DW_TAG_member, name: "badblockpos", scope: !4167, file: !117, line: 1112, baseType: !7, size: 32, offset: 14080)
!4481 = !DIDerivedType(tag: DW_TAG_member, name: "badblockbits", scope: !4167, file: !117, line: 1113, baseType: !7, size: 32, offset: 14112)
!4482 = !DIDerivedType(tag: DW_TAG_member, name: "bbt_td", scope: !4167, file: !117, line: 1114, baseType: !4483, size: 64, offset: 14144)
!4483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4484, size: 64)
!4484 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_bbt_descr", file: !4485, line: 41, size: 576, elements: !4486)
!4485 = !DIFile(filename: "./include/linux/mtd/bbm.h", directory: "/home/lizy2001/genbc/linux")
!4486 = !{!4487, !4488, !4490, !4491, !4492, !4494, !4495, !4496, !4497}
!4487 = !DIDerivedType(tag: DW_TAG_member, name: "options", scope: !4484, file: !4485, line: 42, baseType: !240, size: 32)
!4488 = !DIDerivedType(tag: DW_TAG_member, name: "pages", scope: !4484, file: !4485, line: 43, baseType: !4489, size: 256, offset: 32)
!4489 = !DICompositeType(tag: DW_TAG_array_type, baseType: !240, size: 256, elements: !1350)
!4490 = !DIDerivedType(tag: DW_TAG_member, name: "offs", scope: !4484, file: !4485, line: 44, baseType: !240, size: 32, offset: 288)
!4491 = !DIDerivedType(tag: DW_TAG_member, name: "veroffs", scope: !4484, file: !4485, line: 45, baseType: !240, size: 32, offset: 320)
!4492 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !4484, file: !4485, line: 46, baseType: !4493, size: 64, offset: 352)
!4493 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2754, size: 64, elements: !1350)
!4494 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !4484, file: !4485, line: 47, baseType: !240, size: 32, offset: 416)
!4495 = !DIDerivedType(tag: DW_TAG_member, name: "maxblocks", scope: !4484, file: !4485, line: 48, baseType: !240, size: 32, offset: 448)
!4496 = !DIDerivedType(tag: DW_TAG_member, name: "reserved_block_code", scope: !4484, file: !4485, line: 49, baseType: !240, size: 32, offset: 480)
!4497 = !DIDerivedType(tag: DW_TAG_member, name: "pattern", scope: !4484, file: !4485, line: 50, baseType: !2753, size: 64, offset: 512)
!4498 = !DIDerivedType(tag: DW_TAG_member, name: "bbt_md", scope: !4167, file: !117, line: 1115, baseType: !4483, size: 64, offset: 14208)
!4499 = !DIDerivedType(tag: DW_TAG_member, name: "badblock_pattern", scope: !4167, file: !117, line: 1116, baseType: !4483, size: 64, offset: 14272)
!4500 = !DIDerivedType(tag: DW_TAG_member, name: "bbt", scope: !4167, file: !117, line: 1117, baseType: !4051, size: 64, offset: 14336)
!4501 = !DIDerivedType(tag: DW_TAG_member, name: "page_shift", scope: !4167, file: !117, line: 1120, baseType: !7, size: 32, offset: 14400)
!4502 = !DIDerivedType(tag: DW_TAG_member, name: "phys_erase_shift", scope: !4167, file: !117, line: 1121, baseType: !7, size: 32, offset: 14432)
!4503 = !DIDerivedType(tag: DW_TAG_member, name: "chip_shift", scope: !4167, file: !117, line: 1122, baseType: !7, size: 32, offset: 14464)
!4504 = !DIDerivedType(tag: DW_TAG_member, name: "pagemask", scope: !4167, file: !117, line: 1123, baseType: !7, size: 32, offset: 14496)
!4505 = !DIDerivedType(tag: DW_TAG_member, name: "subpagesize", scope: !4167, file: !117, line: 1124, baseType: !7, size: 32, offset: 14528)
!4506 = !DIDerivedType(tag: DW_TAG_member, name: "data_buf", scope: !4167, file: !117, line: 1127, baseType: !4051, size: 64, offset: 14592)
!4507 = !DIDerivedType(tag: DW_TAG_member, name: "oob_poi", scope: !4167, file: !117, line: 1128, baseType: !4051, size: 64, offset: 14656)
!4508 = !DIDerivedType(tag: DW_TAG_member, name: "pagecache", scope: !4167, file: !117, line: 1132, baseType: !4509, size: 64, offset: 14720)
!4509 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !4167, file: !117, line: 1129, size: 64, elements: !4510)
!4510 = !{!4511, !4512}
!4511 = !DIDerivedType(tag: DW_TAG_member, name: "bitflips", scope: !4509, file: !117, line: 1130, baseType: !7, size: 32)
!4512 = !DIDerivedType(tag: DW_TAG_member, name: "page", scope: !4509, file: !117, line: 1131, baseType: !240, size: 32, offset: 32)
!4513 = !DIDerivedType(tag: DW_TAG_member, name: "buf_align", scope: !4167, file: !117, line: 1133, baseType: !306, size: 64, offset: 14784)
!4514 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !4167, file: !117, line: 1136, baseType: !1194, size: 192, offset: 14848)
!4515 = !DIDerivedType(tag: DW_TAG_member, name: "suspended", scope: !4167, file: !117, line: 1137, baseType: !7, size: 1, offset: 15040, flags: DIFlagBitField, extraData: i64 15040)
!4516 = !DIDerivedType(tag: DW_TAG_member, name: "cur_cs", scope: !4167, file: !117, line: 1138, baseType: !240, size: 32, offset: 15072)
!4517 = !DIDerivedType(tag: DW_TAG_member, name: "read_retries", scope: !4167, file: !117, line: 1139, baseType: !240, size: 32, offset: 15104)
!4518 = !DIDerivedType(tag: DW_TAG_member, name: "controller", scope: !4167, file: !117, line: 1142, baseType: !4519, size: 64, offset: 15168)
!4519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4416, size: 64)
!4520 = !DIDerivedType(tag: DW_TAG_member, name: "ecc", scope: !4167, file: !117, line: 1143, baseType: !4521, size: 1408, offset: 15232)
!4521 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_ecc_ctrl", file: !117, line: 346, size: 1408, elements: !4522)
!4522 = !{!4523, !4524, !4525, !4526, !4527, !4528, !4529, !4530, !4531, !4532, !4533, !4534, !4535, !4536, !4537, !4538, !4544, !4548, !4552, !4556, !4557, !4561, !4565, !4566, !4567, !4568, !4569}
!4523 = !DIDerivedType(tag: DW_TAG_member, name: "engine_type", scope: !4521, file: !117, line: 347, baseType: !93, size: 32)
!4524 = !DIDerivedType(tag: DW_TAG_member, name: "placement", scope: !4521, file: !117, line: 348, baseType: !101, size: 32, offset: 32)
!4525 = !DIDerivedType(tag: DW_TAG_member, name: "algo", scope: !4521, file: !117, line: 349, baseType: !106, size: 32, offset: 64)
!4526 = !DIDerivedType(tag: DW_TAG_member, name: "steps", scope: !4521, file: !117, line: 350, baseType: !240, size: 32, offset: 96)
!4527 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !4521, file: !117, line: 351, baseType: !240, size: 32, offset: 128)
!4528 = !DIDerivedType(tag: DW_TAG_member, name: "bytes", scope: !4521, file: !117, line: 352, baseType: !240, size: 32, offset: 160)
!4529 = !DIDerivedType(tag: DW_TAG_member, name: "total", scope: !4521, file: !117, line: 353, baseType: !240, size: 32, offset: 192)
!4530 = !DIDerivedType(tag: DW_TAG_member, name: "strength", scope: !4521, file: !117, line: 354, baseType: !240, size: 32, offset: 224)
!4531 = !DIDerivedType(tag: DW_TAG_member, name: "prepad", scope: !4521, file: !117, line: 355, baseType: !240, size: 32, offset: 256)
!4532 = !DIDerivedType(tag: DW_TAG_member, name: "postpad", scope: !4521, file: !117, line: 356, baseType: !240, size: 32, offset: 288)
!4533 = !DIDerivedType(tag: DW_TAG_member, name: "options", scope: !4521, file: !117, line: 357, baseType: !7, size: 32, offset: 320)
!4534 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !4521, file: !117, line: 358, baseType: !330, size: 64, offset: 384)
!4535 = !DIDerivedType(tag: DW_TAG_member, name: "calc_buf", scope: !4521, file: !117, line: 359, baseType: !4051, size: 64, offset: 448)
!4536 = !DIDerivedType(tag: DW_TAG_member, name: "code_buf", scope: !4521, file: !117, line: 360, baseType: !4051, size: 64, offset: 512)
!4537 = !DIDerivedType(tag: DW_TAG_member, name: "hwctl", scope: !4521, file: !117, line: 361, baseType: !4373, size: 64, offset: 576)
!4538 = !DIDerivedType(tag: DW_TAG_member, name: "calculate", scope: !4521, file: !117, line: 362, baseType: !4539, size: 64, offset: 640)
!4539 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4540, size: 64)
!4540 = !DISubroutineType(types: !4541)
!4541 = !{!240, !4166, !4542, !2753}
!4542 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4543, size: 64)
!4543 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2754)
!4544 = !DIDerivedType(tag: DW_TAG_member, name: "correct", scope: !4521, file: !117, line: 364, baseType: !4545, size: 64, offset: 704)
!4545 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4546, size: 64)
!4546 = !DISubroutineType(types: !4547)
!4547 = !{!240, !4166, !2753, !2753, !2753}
!4548 = !DIDerivedType(tag: DW_TAG_member, name: "read_page_raw", scope: !4521, file: !117, line: 366, baseType: !4549, size: 64, offset: 768)
!4549 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4550, size: 64)
!4550 = !DISubroutineType(types: !4551)
!4551 = !{!240, !4166, !2753, !240, !240}
!4552 = !DIDerivedType(tag: DW_TAG_member, name: "write_page_raw", scope: !4521, file: !117, line: 368, baseType: !4553, size: 64, offset: 832)
!4553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4554, size: 64)
!4554 = !DISubroutineType(types: !4555)
!4555 = !{!240, !4166, !4542, !240, !240}
!4556 = !DIDerivedType(tag: DW_TAG_member, name: "read_page", scope: !4521, file: !117, line: 370, baseType: !4549, size: 64, offset: 896)
!4557 = !DIDerivedType(tag: DW_TAG_member, name: "read_subpage", scope: !4521, file: !117, line: 372, baseType: !4558, size: 64, offset: 960)
!4558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4559, size: 64)
!4559 = !DISubroutineType(types: !4560)
!4560 = !{!240, !4166, !536, !536, !2753, !240}
!4561 = !DIDerivedType(tag: DW_TAG_member, name: "write_subpage", scope: !4521, file: !117, line: 374, baseType: !4562, size: 64, offset: 1024)
!4562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4563, size: 64)
!4563 = !DISubroutineType(types: !4564)
!4564 = !{!240, !4166, !536, !536, !4542, !240, !240}
!4565 = !DIDerivedType(tag: DW_TAG_member, name: "write_page", scope: !4521, file: !117, line: 377, baseType: !4553, size: 64, offset: 1088)
!4566 = !DIDerivedType(tag: DW_TAG_member, name: "write_oob_raw", scope: !4521, file: !117, line: 379, baseType: !4308, size: 64, offset: 1152)
!4567 = !DIDerivedType(tag: DW_TAG_member, name: "read_oob_raw", scope: !4521, file: !117, line: 380, baseType: !4308, size: 64, offset: 1216)
!4568 = !DIDerivedType(tag: DW_TAG_member, name: "read_oob", scope: !4521, file: !117, line: 381, baseType: !4308, size: 64, offset: 1280)
!4569 = !DIDerivedType(tag: DW_TAG_member, name: "write_oob", scope: !4521, file: !117, line: 382, baseType: !4308, size: 64, offset: 1344)
!4570 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !4167, file: !117, line: 1144, baseType: !330, size: 64, offset: 16640)
!4571 = !{!0, !4572, !4577, !4580, !4585, !4590, !4595, !4625, !4630}
!4572 = !DIGlobalVariableExpression(var: !4573, expr: !DIExpression())
!4573 = distinct !DIGlobalVariable(name: "__UNIQUE_ID_file309", scope: !2, file: !3, line: 5988, type: !4574, isLocal: true, isDefinition: true, align: 8)
!4574 = !DICompositeType(tag: DW_TAG_array_type, baseType: !148, size: 288, elements: !4575)
!4575 = !{!4576}
!4576 = !DISubrange(count: 36)
!4577 = !DIGlobalVariableExpression(var: !4578, expr: !DIExpression())
!4578 = distinct !DIGlobalVariable(name: "__UNIQUE_ID_license310", scope: !2, file: !3, line: 5988, type: !4579, isLocal: true, isDefinition: true, align: 8)
!4579 = !DICompositeType(tag: DW_TAG_array_type, baseType: !148, size: 136, elements: !4244)
!4580 = !DIGlobalVariableExpression(var: !4581, expr: !DIExpression())
!4581 = distinct !DIGlobalVariable(name: "__UNIQUE_ID_author311", scope: !2, file: !3, line: 5989, type: !4582, isLocal: true, isDefinition: true, align: 8)
!4582 = !DICompositeType(tag: DW_TAG_array_type, baseType: !148, size: 440, elements: !4583)
!4583 = !{!4584}
!4584 = !DISubrange(count: 55)
!4585 = !DIGlobalVariableExpression(var: !4586, expr: !DIExpression())
!4586 = distinct !DIGlobalVariable(name: "__UNIQUE_ID_author312", scope: !2, file: !3, line: 5990, type: !4587, isLocal: true, isDefinition: true, align: 8)
!4587 = !DICompositeType(tag: DW_TAG_array_type, baseType: !148, size: 392, elements: !4588)
!4588 = !{!4589}
!4589 = !DISubrange(count: 49)
!4590 = !DIGlobalVariableExpression(var: !4591, expr: !DIExpression())
!4591 = distinct !DIGlobalVariable(name: "__UNIQUE_ID_description313", scope: !2, file: !3, line: 5991, type: !4592, isLocal: true, isDefinition: true, align: 8)
!4592 = !DICompositeType(tag: DW_TAG_array_type, baseType: !148, size: 384, elements: !4593)
!4593 = !{!4594}
!4594 = !DISubrange(count: 48)
!4595 = !DIGlobalVariableExpression(var: !4596, expr: !DIExpression())
!4596 = distinct !DIGlobalVariable(name: "__key", scope: !4597, file: !3, line: 5070, type: !625, isLocal: true, isDefinition: true)
!4597 = distinct !DISubprogram(name: "nand_scan_ident", scope: !3, file: !3, line: 5056, type: !4598, scopeLine: 5058, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4598 = !DISubroutineType(types: !4599)
!4599 = !{!240, !4166, !7, !4600}
!4600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4601, size: 64)
!4601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_flash_dev", file: !117, line: 1253, size: 320, elements: !4602)
!4602 = !{!4603, !4604, !4613, !4614, !4615, !4616, !4617, !4619, !4620}
!4603 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !4601, file: !117, line: 1254, baseType: !256, size: 64)
!4604 = !DIDerivedType(tag: DW_TAG_member, scope: !4601, file: !117, line: 1255, baseType: !4605, size: 64, offset: 64)
!4605 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !4601, file: !117, line: 1255, size: 64, elements: !4606)
!4606 = !{!4607, !4612}
!4607 = !DIDerivedType(tag: DW_TAG_member, scope: !4605, file: !117, line: 1256, baseType: !4608, size: 16)
!4608 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !4605, file: !117, line: 1256, size: 16, elements: !4609)
!4609 = !{!4610, !4611}
!4610 = !DIDerivedType(tag: DW_TAG_member, name: "mfr_id", scope: !4608, file: !117, line: 1257, baseType: !2754, size: 8)
!4611 = !DIDerivedType(tag: DW_TAG_member, name: "dev_id", scope: !4608, file: !117, line: 1258, baseType: !2754, size: 8, offset: 8)
!4612 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !4605, file: !117, line: 1260, baseType: !4493, size: 64)
!4613 = !DIDerivedType(tag: DW_TAG_member, name: "pagesize", scope: !4601, file: !117, line: 1262, baseType: !7, size: 32, offset: 128)
!4614 = !DIDerivedType(tag: DW_TAG_member, name: "chipsize", scope: !4601, file: !117, line: 1263, baseType: !7, size: 32, offset: 160)
!4615 = !DIDerivedType(tag: DW_TAG_member, name: "erasesize", scope: !4601, file: !117, line: 1264, baseType: !7, size: 32, offset: 192)
!4616 = !DIDerivedType(tag: DW_TAG_member, name: "options", scope: !4601, file: !117, line: 1265, baseType: !7, size: 32, offset: 224)
!4617 = !DIDerivedType(tag: DW_TAG_member, name: "id_len", scope: !4601, file: !117, line: 1266, baseType: !4618, size: 16, offset: 256)
!4618 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint16_t", file: !181, line: 103, baseType: !840)
!4619 = !DIDerivedType(tag: DW_TAG_member, name: "oobsize", scope: !4601, file: !117, line: 1267, baseType: !4618, size: 16, offset: 272)
!4620 = !DIDerivedType(tag: DW_TAG_member, name: "ecc", scope: !4601, file: !117, line: 1271, baseType: !4621, size: 32, offset: 288)
!4621 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !4601, file: !117, line: 1268, size: 32, elements: !4622)
!4622 = !{!4623, !4624}
!4623 = !DIDerivedType(tag: DW_TAG_member, name: "strength_ds", scope: !4621, file: !117, line: 1269, baseType: !4618, size: 16)
!4624 = !DIDerivedType(tag: DW_TAG_member, name: "step_ds", scope: !4621, file: !117, line: 1270, baseType: !4618, size: 16, offset: 16)
!4625 = !DIGlobalVariableExpression(var: !4626, expr: !DIExpression())
!4626 = distinct !DIGlobalVariable(name: "__key", scope: !4627, file: !117, line: 958, type: !625, isLocal: true, isDefinition: true)
!4627 = distinct !DISubprogram(name: "nand_controller_init", scope: !117, file: !117, line: 956, type: !4628, scopeLine: 957, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4628 = !DISubroutineType(types: !4629)
!4629 = !{null, !4519}
!4630 = !DIGlobalVariableExpression(var: !4631, expr: !DIExpression())
!4631 = distinct !DIGlobalVariable(name: "rawnand_ops", scope: !2, file: !3, line: 5592, type: !4152, isLocal: true, isDefinition: true)
!4632 = !{i32 7, !"Dwarf Version", i32 4}
!4633 = !{i32 2, !"Debug Info Version", i32 3}
!4634 = !{i32 1, !"wchar_size", i32 2}
!4635 = !{i32 1, !"Code Model", i32 2}
!4636 = !{!"clang version 10.0.1 (https://github.com/llvm/llvm-project.git ef32c611aa214dea855364efd7ba451ec5ec3f74)"}
!4637 = distinct !DISubprogram(name: "nand_pairing_dist3_get_info", scope: !3, file: !3, line: 49, type: !2681, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4638 = !DILocalVariable(name: "mtd", arg: 1, scope: !4637, file: !3, line: 49, type: !2637)
!4639 = !DILocation(line: 49, column: 57, scope: !4637)
!4640 = !DILocalVariable(name: "page", arg: 2, scope: !4637, file: !3, line: 49, type: !240)
!4641 = !DILocation(line: 49, column: 66, scope: !4637)
!4642 = !DILocalVariable(name: "info", arg: 3, scope: !4637, file: !3, line: 50, type: !2683)
!4643 = !DILocation(line: 50, column: 37, scope: !4637)
!4644 = !DILocalVariable(name: "lastpage", scope: !4637, file: !3, line: 52, type: !240)
!4645 = !DILocation(line: 52, column: 6, scope: !4637)
!4646 = !DILocation(line: 52, column: 18, scope: !4637)
!4647 = !DILocation(line: 52, column: 23, scope: !4637)
!4648 = !DILocation(line: 52, column: 35, scope: !4637)
!4649 = !DILocation(line: 52, column: 40, scope: !4637)
!4650 = !DILocation(line: 52, column: 33, scope: !4637)
!4651 = !DILocation(line: 52, column: 51, scope: !4637)
!4652 = !DILocalVariable(name: "dist", scope: !4637, file: !3, line: 53, type: !240)
!4653 = !DILocation(line: 53, column: 6, scope: !4637)
!4654 = !DILocation(line: 55, column: 6, scope: !4655)
!4655 = distinct !DILexicalBlock(scope: !4637, file: !3, line: 55, column: 6)
!4656 = !DILocation(line: 55, column: 14, scope: !4655)
!4657 = !DILocation(line: 55, column: 11, scope: !4655)
!4658 = !DILocation(line: 55, column: 6, scope: !4637)
!4659 = !DILocation(line: 56, column: 8, scope: !4655)
!4660 = !DILocation(line: 56, column: 3, scope: !4655)
!4661 = !DILocation(line: 58, column: 7, scope: !4662)
!4662 = distinct !DILexicalBlock(scope: !4637, file: !3, line: 58, column: 6)
!4663 = !DILocation(line: 58, column: 12, scope: !4662)
!4664 = !DILocation(line: 58, column: 16, scope: !4662)
!4665 = !DILocation(line: 58, column: 21, scope: !4662)
!4666 = !DILocation(line: 58, column: 6, scope: !4637)
!4667 = !DILocation(line: 59, column: 3, scope: !4668)
!4668 = distinct !DILexicalBlock(scope: !4662, file: !3, line: 58, column: 27)
!4669 = !DILocation(line: 59, column: 9, scope: !4668)
!4670 = !DILocation(line: 59, column: 15, scope: !4668)
!4671 = !DILocation(line: 60, column: 17, scope: !4668)
!4672 = !DILocation(line: 60, column: 22, scope: !4668)
!4673 = !DILocation(line: 60, column: 27, scope: !4668)
!4674 = !DILocation(line: 60, column: 3, scope: !4668)
!4675 = !DILocation(line: 60, column: 9, scope: !4668)
!4676 = !DILocation(line: 60, column: 14, scope: !4668)
!4677 = !DILocation(line: 61, column: 2, scope: !4668)
!4678 = !DILocation(line: 62, column: 3, scope: !4679)
!4679 = distinct !DILexicalBlock(scope: !4662, file: !3, line: 61, column: 9)
!4680 = !DILocation(line: 62, column: 9, scope: !4679)
!4681 = !DILocation(line: 62, column: 15, scope: !4679)
!4682 = !DILocation(line: 63, column: 17, scope: !4679)
!4683 = !DILocation(line: 63, column: 22, scope: !4679)
!4684 = !DILocation(line: 63, column: 28, scope: !4679)
!4685 = !DILocation(line: 63, column: 26, scope: !4679)
!4686 = !DILocation(line: 63, column: 34, scope: !4679)
!4687 = !DILocation(line: 63, column: 3, scope: !4679)
!4688 = !DILocation(line: 63, column: 9, scope: !4679)
!4689 = !DILocation(line: 63, column: 14, scope: !4679)
!4690 = !DILocation(line: 66, column: 2, scope: !4637)
!4691 = distinct !DISubprogram(name: "nand_pairing_dist3_get_wunit", scope: !3, file: !3, line: 69, type: !2690, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4692 = !DILocalVariable(name: "mtd", arg: 1, scope: !4691, file: !3, line: 69, type: !2637)
!4693 = !DILocation(line: 69, column: 58, scope: !4691)
!4694 = !DILocalVariable(name: "info", arg: 2, scope: !4691, file: !3, line: 70, type: !2692)
!4695 = !DILocation(line: 70, column: 37, scope: !4691)
!4696 = !DILocalVariable(name: "lastpair", scope: !4691, file: !3, line: 72, type: !240)
!4697 = !DILocation(line: 72, column: 6, scope: !4691)
!4698 = !DILocation(line: 72, column: 19, scope: !4691)
!4699 = !DILocation(line: 72, column: 24, scope: !4691)
!4700 = !DILocation(line: 72, column: 36, scope: !4691)
!4701 = !DILocation(line: 72, column: 41, scope: !4691)
!4702 = !DILocation(line: 72, column: 34, scope: !4691)
!4703 = !DILocation(line: 72, column: 52, scope: !4691)
!4704 = !DILocation(line: 72, column: 57, scope: !4691)
!4705 = !DILocalVariable(name: "page", scope: !4691, file: !3, line: 73, type: !240)
!4706 = !DILocation(line: 73, column: 6, scope: !4691)
!4707 = !DILocation(line: 73, column: 13, scope: !4691)
!4708 = !DILocation(line: 73, column: 19, scope: !4691)
!4709 = !DILocation(line: 73, column: 24, scope: !4691)
!4710 = !DILocalVariable(name: "dist", scope: !4691, file: !3, line: 74, type: !240)
!4711 = !DILocation(line: 74, column: 6, scope: !4691)
!4712 = !DILocation(line: 76, column: 7, scope: !4713)
!4713 = distinct !DILexicalBlock(scope: !4691, file: !3, line: 76, column: 6)
!4714 = !DILocation(line: 76, column: 13, scope: !4713)
!4715 = !DILocation(line: 76, column: 19, scope: !4713)
!4716 = !DILocation(line: 76, column: 23, scope: !4713)
!4717 = !DILocation(line: 76, column: 29, scope: !4713)
!4718 = !DILocation(line: 76, column: 6, scope: !4691)
!4719 = !DILocation(line: 77, column: 3, scope: !4713)
!4720 = !DILocation(line: 79, column: 6, scope: !4721)
!4721 = distinct !DILexicalBlock(scope: !4691, file: !3, line: 79, column: 6)
!4722 = !DILocation(line: 79, column: 12, scope: !4721)
!4723 = !DILocation(line: 79, column: 20, scope: !4721)
!4724 = !DILocation(line: 79, column: 17, scope: !4721)
!4725 = !DILocation(line: 79, column: 29, scope: !4721)
!4726 = !DILocation(line: 79, column: 32, scope: !4721)
!4727 = !DILocation(line: 79, column: 38, scope: !4721)
!4728 = !DILocation(line: 79, column: 6, scope: !4691)
!4729 = !DILocation(line: 80, column: 8, scope: !4721)
!4730 = !DILocation(line: 80, column: 3, scope: !4721)
!4731 = !DILocation(line: 82, column: 7, scope: !4732)
!4732 = distinct !DILexicalBlock(scope: !4691, file: !3, line: 82, column: 6)
!4733 = !DILocation(line: 82, column: 13, scope: !4732)
!4734 = !DILocation(line: 82, column: 6, scope: !4691)
!4735 = !DILocation(line: 83, column: 7, scope: !4732)
!4736 = !DILocation(line: 83, column: 3, scope: !4732)
!4737 = !DILocation(line: 84, column: 11, scope: !4738)
!4738 = distinct !DILexicalBlock(scope: !4732, file: !3, line: 84, column: 11)
!4739 = !DILocation(line: 84, column: 17, scope: !4738)
!4740 = !DILocation(line: 84, column: 11, scope: !4732)
!4741 = !DILocation(line: 85, column: 11, scope: !4738)
!4742 = !DILocation(line: 85, column: 16, scope: !4738)
!4743 = !DILocation(line: 85, column: 8, scope: !4738)
!4744 = !DILocation(line: 85, column: 3, scope: !4738)
!4745 = !DILocation(line: 87, column: 6, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4691, file: !3, line: 87, column: 6)
!4747 = !DILocation(line: 87, column: 14, scope: !4746)
!4748 = !DILocation(line: 87, column: 19, scope: !4746)
!4749 = !DILocation(line: 87, column: 31, scope: !4746)
!4750 = !DILocation(line: 87, column: 36, scope: !4746)
!4751 = !DILocation(line: 87, column: 29, scope: !4746)
!4752 = !DILocation(line: 87, column: 11, scope: !4746)
!4753 = !DILocation(line: 87, column: 6, scope: !4691)
!4754 = !DILocation(line: 88, column: 3, scope: !4746)
!4755 = !DILocation(line: 90, column: 9, scope: !4691)
!4756 = !DILocation(line: 90, column: 2, scope: !4691)
!4757 = !DILocation(line: 91, column: 1, scope: !4691)
!4758 = distinct !DISubprogram(name: "nand_extract_bits", scope: !3, file: !3, line: 128, type: !4759, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4759 = !DISubroutineType(types: !4760)
!4760 = !{null, !4051, !7, !4388, !7, !7}
!4761 = !DILocalVariable(name: "dst", arg: 1, scope: !4758, file: !3, line: 128, type: !4051)
!4762 = !DILocation(line: 128, column: 28, scope: !4758)
!4763 = !DILocalVariable(name: "dst_off", arg: 2, scope: !4758, file: !3, line: 128, type: !7)
!4764 = !DILocation(line: 128, column: 46, scope: !4758)
!4765 = !DILocalVariable(name: "src", arg: 3, scope: !4758, file: !3, line: 128, type: !4388)
!4766 = !DILocation(line: 128, column: 65, scope: !4758)
!4767 = !DILocalVariable(name: "src_off", arg: 4, scope: !4758, file: !3, line: 129, type: !7)
!4768 = !DILocation(line: 129, column: 23, scope: !4758)
!4769 = !DILocalVariable(name: "nbits", arg: 5, scope: !4758, file: !3, line: 129, type: !7)
!4770 = !DILocation(line: 129, column: 45, scope: !4758)
!4771 = !DILocalVariable(name: "tmp", scope: !4758, file: !3, line: 131, type: !7)
!4772 = !DILocation(line: 131, column: 15, scope: !4758)
!4773 = !DILocalVariable(name: "n", scope: !4758, file: !3, line: 131, type: !7)
!4774 = !DILocation(line: 131, column: 20, scope: !4758)
!4775 = !DILocation(line: 133, column: 9, scope: !4758)
!4776 = !DILocation(line: 133, column: 17, scope: !4758)
!4777 = !DILocation(line: 133, column: 6, scope: !4758)
!4778 = !DILocation(line: 134, column: 10, scope: !4758)
!4779 = !DILocation(line: 135, column: 9, scope: !4758)
!4780 = !DILocation(line: 135, column: 17, scope: !4758)
!4781 = !DILocation(line: 135, column: 6, scope: !4758)
!4782 = !DILocation(line: 136, column: 10, scope: !4758)
!4783 = !DILocation(line: 138, column: 2, scope: !4758)
!4784 = !DILocation(line: 138, column: 9, scope: !4758)
!4785 = !DILocalVariable(name: "__UNIQUE_ID___x244", scope: !4786, file: !3, line: 139, type: !7)
!4786 = distinct !DILexicalBlock(scope: !4787, file: !3, line: 139, column: 7)
!4787 = distinct !DILexicalBlock(scope: !4758, file: !3, line: 138, column: 16)
!4788 = !DILocation(line: 139, column: 7, scope: !4786)
!4789 = !DILocalVariable(name: "__UNIQUE_ID___x242", scope: !4790, file: !3, line: 139, type: !7)
!4790 = distinct !DILexicalBlock(scope: !4786, file: !3, line: 139, column: 7)
!4791 = !DILocation(line: 139, column: 7, scope: !4790)
!4792 = !DILocalVariable(name: "__UNIQUE_ID___y243", scope: !4790, file: !3, line: 139, type: !7)
!4793 = !DILocalVariable(name: "__UNIQUE_ID___y245", scope: !4786, file: !3, line: 139, type: !7)
!4794 = !DILocation(line: 139, column: 5, scope: !4787)
!4795 = !DILocation(line: 141, column: 11, scope: !4787)
!4796 = !DILocation(line: 141, column: 10, scope: !4787)
!4797 = !DILocation(line: 141, column: 18, scope: !4787)
!4798 = !DILocation(line: 141, column: 15, scope: !4787)
!4799 = !DILocation(line: 141, column: 9, scope: !4787)
!4800 = !DILocation(line: 141, column: 29, scope: !4787)
!4801 = !DILocation(line: 141, column: 27, scope: !4787)
!4802 = !DILocation(line: 141, column: 7, scope: !4787)
!4803 = !DILocation(line: 142, column: 12, scope: !4787)
!4804 = !DILocation(line: 142, column: 11, scope: !4787)
!4805 = !DILocation(line: 142, column: 4, scope: !4787)
!4806 = !DILocation(line: 142, column: 8, scope: !4787)
!4807 = !DILocation(line: 143, column: 11, scope: !4787)
!4808 = !DILocation(line: 143, column: 18, scope: !4787)
!4809 = !DILocation(line: 143, column: 15, scope: !4787)
!4810 = !DILocation(line: 143, column: 4, scope: !4787)
!4811 = !DILocation(line: 143, column: 8, scope: !4787)
!4812 = !DILocation(line: 145, column: 14, scope: !4787)
!4813 = !DILocation(line: 145, column: 11, scope: !4787)
!4814 = !DILocation(line: 146, column: 7, scope: !4815)
!4815 = distinct !DILexicalBlock(scope: !4787, file: !3, line: 146, column: 7)
!4816 = !DILocation(line: 146, column: 15, scope: !4815)
!4817 = !DILocation(line: 146, column: 7, scope: !4787)
!4818 = !DILocation(line: 147, column: 7, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4815, file: !3, line: 146, column: 21)
!4820 = !DILocation(line: 148, column: 12, scope: !4819)
!4821 = !DILocation(line: 149, column: 3, scope: !4819)
!4822 = !DILocation(line: 151, column: 14, scope: !4787)
!4823 = !DILocation(line: 151, column: 11, scope: !4787)
!4824 = !DILocation(line: 152, column: 7, scope: !4825)
!4825 = distinct !DILexicalBlock(scope: !4787, file: !3, line: 152, column: 7)
!4826 = !DILocation(line: 152, column: 15, scope: !4825)
!4827 = !DILocation(line: 152, column: 7, scope: !4787)
!4828 = !DILocation(line: 153, column: 7, scope: !4829)
!4829 = distinct !DILexicalBlock(scope: !4825, file: !3, line: 152, column: 21)
!4830 = !DILocation(line: 154, column: 12, scope: !4829)
!4831 = !DILocation(line: 155, column: 3, scope: !4829)
!4832 = !DILocation(line: 157, column: 12, scope: !4787)
!4833 = !DILocation(line: 157, column: 9, scope: !4787)
!4834 = distinct !{!4834, !4783, !4835}
!4835 = !DILocation(line: 158, column: 2, scope: !4758)
!4836 = !DILocation(line: 159, column: 1, scope: !4758)
!4837 = distinct !DISubprogram(name: "nand_select_target", scope: !3, file: !3, line: 171, type: !4838, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4838 = !DISubroutineType(types: !4839)
!4839 = !{null, !4166, !7}
!4840 = !DILocalVariable(name: "chip", arg: 1, scope: !4837, file: !3, line: 171, type: !4166)
!4841 = !DILocation(line: 171, column: 43, scope: !4837)
!4842 = !DILocalVariable(name: "cs", arg: 2, scope: !4837, file: !3, line: 171, type: !7)
!4843 = !DILocation(line: 171, column: 62, scope: !4837)
!4844 = !DILocalVariable(name: "__ret_warn_on", scope: !4845, file: !3, line: 177, type: !240)
!4845 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 177, column: 6)
!4846 = distinct !DILexicalBlock(scope: !4837, file: !3, line: 177, column: 6)
!4847 = !DILocation(line: 177, column: 6, scope: !4845)
!4848 = !DILocation(line: 177, column: 6, scope: !4849)
!4849 = distinct !DILexicalBlock(scope: !4845, file: !3, line: 177, column: 6)
!4850 = !DILocation(line: 177, column: 6, scope: !4851)
!4851 = distinct !DILexicalBlock(scope: !4849, file: !3, line: 177, column: 6)
!4852 = !DILocation(line: 177, column: 6, scope: !4853)
!4853 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 177, column: 6)
!4854 = !DILocation(line: 177, column: 6, scope: !4855)
!4855 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 177, column: 6)
!4856 = !{i32 -2141644375, i32 -2141644346, i32 -2141644300, i32 -2141644242, i32 -2141644188, i32 -2141644134, i32 -2141644079, i32 -2141644048}
!4857 = !DILocation(line: 177, column: 6, scope: !4858)
!4858 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 177, column: 6)
!4859 = !{i32 -2141643634, i32 -2141643627, i32 -2141643575, i32 -2141643544, i32 -2141643514}
!4860 = !DILocation(line: 177, column: 6, scope: !4861)
!4861 = distinct !DILexicalBlock(scope: !4851, file: !3, line: 177, column: 6)
!4862 = !DILocation(line: 177, column: 6, scope: !4846)
!4863 = !DILocation(line: 177, column: 6, scope: !4837)
!4864 = !DILocation(line: 178, column: 3, scope: !4846)
!4865 = !DILocation(line: 180, column: 17, scope: !4837)
!4866 = !DILocation(line: 180, column: 2, scope: !4837)
!4867 = !DILocation(line: 180, column: 8, scope: !4837)
!4868 = !DILocation(line: 180, column: 15, scope: !4837)
!4869 = !DILocation(line: 182, column: 6, scope: !4870)
!4870 = distinct !DILexicalBlock(scope: !4837, file: !3, line: 182, column: 6)
!4871 = !DILocation(line: 182, column: 12, scope: !4870)
!4872 = !DILocation(line: 182, column: 19, scope: !4870)
!4873 = !DILocation(line: 182, column: 6, scope: !4837)
!4874 = !DILocation(line: 183, column: 3, scope: !4870)
!4875 = !DILocation(line: 183, column: 9, scope: !4870)
!4876 = !DILocation(line: 183, column: 16, scope: !4870)
!4877 = !DILocation(line: 183, column: 28, scope: !4870)
!4878 = !DILocation(line: 183, column: 34, scope: !4870)
!4879 = !DILocation(line: 184, column: 1, scope: !4837)
!4880 = distinct !DISubprogram(name: "nanddev_ntargets", scope: !94, file: !94, line: 483, type: !4881, scopeLine: 484, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4881 = !DISubroutineType(types: !4882)
!4882 = !{!7, !4883}
!4883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4884, size: 64)
!4884 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4057)
!4885 = !DILocalVariable(name: "nand", arg: 1, scope: !4880, file: !94, line: 483, type: !4883)
!4886 = !DILocation(line: 483, column: 71, scope: !4880)
!4887 = !DILocation(line: 485, column: 9, scope: !4880)
!4888 = !DILocation(line: 485, column: 15, scope: !4880)
!4889 = !DILocation(line: 485, column: 22, scope: !4880)
!4890 = !DILocation(line: 485, column: 2, scope: !4880)
!4891 = distinct !DISubprogram(name: "nand_deselect_target", scope: !3, file: !3, line: 194, type: !4218, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4892 = !DILocalVariable(name: "chip", arg: 1, scope: !4891, file: !3, line: 194, type: !4166)
!4893 = !DILocation(line: 194, column: 45, scope: !4891)
!4894 = !DILocation(line: 196, column: 6, scope: !4895)
!4895 = distinct !DILexicalBlock(scope: !4891, file: !3, line: 196, column: 6)
!4896 = !DILocation(line: 196, column: 12, scope: !4895)
!4897 = !DILocation(line: 196, column: 19, scope: !4895)
!4898 = !DILocation(line: 196, column: 6, scope: !4891)
!4899 = !DILocation(line: 197, column: 3, scope: !4895)
!4900 = !DILocation(line: 197, column: 9, scope: !4895)
!4901 = !DILocation(line: 197, column: 16, scope: !4895)
!4902 = !DILocation(line: 197, column: 28, scope: !4895)
!4903 = !DILocation(line: 199, column: 2, scope: !4891)
!4904 = !DILocation(line: 199, column: 8, scope: !4891)
!4905 = !DILocation(line: 199, column: 15, scope: !4891)
!4906 = !DILocation(line: 200, column: 1, scope: !4891)
!4907 = distinct !DISubprogram(name: "nand_bbm_get_next_page", scope: !3, file: !3, line: 225, type: !4309, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4908 = !DILocalVariable(name: "chip", arg: 1, scope: !4907, file: !3, line: 225, type: !4166)
!4909 = !DILocation(line: 225, column: 46, scope: !4907)
!4910 = !DILocalVariable(name: "page", arg: 2, scope: !4907, file: !3, line: 225, type: !240)
!4911 = !DILocation(line: 225, column: 56, scope: !4907)
!4912 = !DILocalVariable(name: "mtd", scope: !4907, file: !3, line: 227, type: !2637)
!4913 = !DILocation(line: 227, column: 19, scope: !4907)
!4914 = !DILocation(line: 227, column: 37, scope: !4907)
!4915 = !DILocation(line: 227, column: 25, scope: !4907)
!4916 = !DILocalVariable(name: "last_page", scope: !4907, file: !3, line: 228, type: !240)
!4917 = !DILocation(line: 228, column: 6, scope: !4907)
!4918 = !DILocation(line: 228, column: 20, scope: !4907)
!4919 = !DILocation(line: 228, column: 25, scope: !4907)
!4920 = !DILocation(line: 228, column: 37, scope: !4907)
!4921 = !DILocation(line: 228, column: 42, scope: !4907)
!4922 = !DILocation(line: 228, column: 35, scope: !4907)
!4923 = !DILocation(line: 229, column: 5, scope: !4907)
!4924 = !DILocation(line: 229, column: 11, scope: !4907)
!4925 = !DILocation(line: 228, column: 53, scope: !4907)
!4926 = !DILocation(line: 229, column: 25, scope: !4907)
!4927 = !DILocation(line: 229, column: 31, scope: !4907)
!4928 = !DILocation(line: 229, column: 23, scope: !4907)
!4929 = !DILocalVariable(name: "bbm_flags", scope: !4907, file: !3, line: 230, type: !7)
!4930 = !DILocation(line: 230, column: 15, scope: !4907)
!4931 = !DILocation(line: 233, column: 6, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4907, file: !3, line: 233, column: 6)
!4933 = !DILocation(line: 233, column: 11, scope: !4932)
!4934 = !DILocation(line: 233, column: 16, scope: !4932)
!4935 = !DILocation(line: 233, column: 21, scope: !4932)
!4936 = !DILocation(line: 233, column: 27, scope: !4932)
!4937 = !DILocation(line: 233, column: 37, scope: !4932)
!4938 = !DILocation(line: 233, column: 35, scope: !4932)
!4939 = !DILocation(line: 233, column: 6, scope: !4907)
!4940 = !DILocation(line: 234, column: 3, scope: !4932)
!4941 = !DILocation(line: 235, column: 6, scope: !4942)
!4942 = distinct !DILexicalBlock(scope: !4907, file: !3, line: 235, column: 6)
!4943 = !DILocation(line: 235, column: 11, scope: !4942)
!4944 = !DILocation(line: 235, column: 16, scope: !4942)
!4945 = !DILocation(line: 235, column: 19, scope: !4942)
!4946 = !DILocation(line: 235, column: 25, scope: !4942)
!4947 = !DILocation(line: 235, column: 33, scope: !4942)
!4948 = !DILocation(line: 235, column: 6, scope: !4907)
!4949 = !DILocation(line: 236, column: 3, scope: !4942)
!4950 = !DILocation(line: 237, column: 6, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4907, file: !3, line: 237, column: 6)
!4952 = !DILocation(line: 237, column: 11, scope: !4951)
!4953 = !DILocation(line: 237, column: 16, scope: !4951)
!4954 = !DILocation(line: 237, column: 19, scope: !4951)
!4955 = !DILocation(line: 237, column: 25, scope: !4951)
!4956 = !DILocation(line: 237, column: 33, scope: !4951)
!4957 = !DILocation(line: 237, column: 6, scope: !4907)
!4958 = !DILocation(line: 238, column: 3, scope: !4951)
!4959 = !DILocation(line: 239, column: 6, scope: !4960)
!4960 = distinct !DILexicalBlock(scope: !4907, file: !3, line: 239, column: 6)
!4961 = !DILocation(line: 239, column: 14, scope: !4960)
!4962 = !DILocation(line: 239, column: 11, scope: !4960)
!4963 = !DILocation(line: 239, column: 24, scope: !4960)
!4964 = !DILocation(line: 239, column: 27, scope: !4960)
!4965 = !DILocation(line: 239, column: 33, scope: !4960)
!4966 = !DILocation(line: 239, column: 41, scope: !4960)
!4967 = !DILocation(line: 239, column: 6, scope: !4907)
!4968 = !DILocation(line: 240, column: 10, scope: !4960)
!4969 = !DILocation(line: 240, column: 3, scope: !4960)
!4970 = !DILocation(line: 242, column: 2, scope: !4907)
!4971 = !DILocation(line: 243, column: 1, scope: !4907)
!4972 = distinct !DISubprogram(name: "nand_to_mtd", scope: !117, file: !117, line: 1152, type: !4973, scopeLine: 1153, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4973 = !DISubroutineType(types: !4974)
!4974 = !{!2637, !4166}
!4975 = !DILocalVariable(name: "chip", arg: 1, scope: !4972, file: !117, line: 1152, type: !4166)
!4976 = !DILocation(line: 1152, column: 62, scope: !4972)
!4977 = !DILocation(line: 1154, column: 10, scope: !4972)
!4978 = !DILocation(line: 1154, column: 16, scope: !4972)
!4979 = !DILocation(line: 1154, column: 21, scope: !4972)
!4980 = !DILocation(line: 1154, column: 2, scope: !4972)
!4981 = distinct !DISubprogram(name: "nand_markbad_bbm", scope: !3, file: !3, line: 492, type: !4406, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!4982 = !DILocalVariable(name: "chip", arg: 1, scope: !4981, file: !3, line: 492, type: !4166)
!4983 = !DILocation(line: 492, column: 40, scope: !4981)
!4984 = !DILocalVariable(name: "ofs", arg: 2, scope: !4981, file: !3, line: 492, type: !508)
!4985 = !DILocation(line: 492, column: 53, scope: !4981)
!4986 = !DILocation(line: 494, column: 6, scope: !4987)
!4987 = distinct !DILexicalBlock(scope: !4981, file: !3, line: 494, column: 6)
!4988 = !DILocation(line: 494, column: 12, scope: !4987)
!4989 = !DILocation(line: 494, column: 19, scope: !4987)
!4990 = !DILocation(line: 494, column: 6, scope: !4981)
!4991 = !DILocation(line: 495, column: 10, scope: !4987)
!4992 = !DILocation(line: 495, column: 16, scope: !4987)
!4993 = !DILocation(line: 495, column: 23, scope: !4987)
!4994 = !DILocation(line: 495, column: 37, scope: !4987)
!4995 = !DILocation(line: 495, column: 43, scope: !4987)
!4996 = !DILocation(line: 495, column: 3, scope: !4987)
!4997 = !DILocation(line: 497, column: 36, scope: !4981)
!4998 = !DILocation(line: 497, column: 42, scope: !4981)
!4999 = !DILocation(line: 497, column: 9, scope: !4981)
!5000 = !DILocation(line: 497, column: 2, scope: !4981)
!5001 = !DILocation(line: 498, column: 1, scope: !4981)
!5002 = distinct !DISubprogram(name: "nand_default_block_markbad", scope: !3, file: !3, line: 453, type: !4406, scopeLine: 454, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5003 = !DILocalVariable(name: "chip", arg: 1, scope: !5002, file: !3, line: 453, type: !4166)
!5004 = !DILocation(line: 453, column: 57, scope: !5002)
!5005 = !DILocalVariable(name: "ofs", arg: 2, scope: !5002, file: !3, line: 453, type: !508)
!5006 = !DILocation(line: 453, column: 70, scope: !5002)
!5007 = !DILocalVariable(name: "mtd", scope: !5002, file: !3, line: 455, type: !2637)
!5008 = !DILocation(line: 455, column: 19, scope: !5002)
!5009 = !DILocation(line: 455, column: 37, scope: !5002)
!5010 = !DILocation(line: 455, column: 25, scope: !5002)
!5011 = !DILocalVariable(name: "ops", scope: !5002, file: !3, line: 456, type: !2744)
!5012 = !DILocation(line: 456, column: 21, scope: !5002)
!5013 = !DILocalVariable(name: "buf", scope: !5002, file: !3, line: 457, type: !5014)
!5014 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2754, size: 16, elements: !1589)
!5015 = !DILocation(line: 457, column: 10, scope: !5002)
!5016 = !DILocalVariable(name: "ret", scope: !5002, file: !3, line: 458, type: !240)
!5017 = !DILocation(line: 458, column: 6, scope: !5002)
!5018 = !DILocalVariable(name: "res", scope: !5002, file: !3, line: 458, type: !240)
!5019 = !DILocation(line: 458, column: 15, scope: !5002)
!5020 = !DILocalVariable(name: "page_offset", scope: !5002, file: !3, line: 458, type: !240)
!5021 = !DILocation(line: 458, column: 20, scope: !5002)
!5022 = !DILocation(line: 460, column: 2, scope: !5002)
!5023 = !DILocation(line: 461, column: 15, scope: !5002)
!5024 = !DILocation(line: 461, column: 6, scope: !5002)
!5025 = !DILocation(line: 461, column: 13, scope: !5002)
!5026 = !DILocation(line: 462, column: 16, scope: !5002)
!5027 = !DILocation(line: 462, column: 22, scope: !5002)
!5028 = !DILocation(line: 462, column: 6, scope: !5002)
!5029 = !DILocation(line: 462, column: 14, scope: !5002)
!5030 = !DILocation(line: 463, column: 6, scope: !5031)
!5031 = distinct !DILexicalBlock(scope: !5002, file: !3, line: 463, column: 6)
!5032 = !DILocation(line: 463, column: 12, scope: !5031)
!5033 = !DILocation(line: 463, column: 20, scope: !5031)
!5034 = !DILocation(line: 463, column: 6, scope: !5002)
!5035 = !DILocation(line: 464, column: 7, scope: !5036)
!5036 = distinct !DILexicalBlock(scope: !5031, file: !3, line: 463, column: 40)
!5037 = !DILocation(line: 464, column: 15, scope: !5036)
!5038 = !DILocation(line: 465, column: 17, scope: !5036)
!5039 = !DILocation(line: 465, column: 24, scope: !5036)
!5040 = !DILocation(line: 465, column: 7, scope: !5036)
!5041 = !DILocation(line: 465, column: 11, scope: !5036)
!5042 = !DILocation(line: 466, column: 2, scope: !5036)
!5043 = !DILocation(line: 467, column: 17, scope: !5044)
!5044 = distinct !DILexicalBlock(scope: !5031, file: !3, line: 466, column: 9)
!5045 = !DILocation(line: 467, column: 24, scope: !5044)
!5046 = !DILocation(line: 467, column: 7, scope: !5044)
!5047 = !DILocation(line: 467, column: 11, scope: !5044)
!5048 = !DILocation(line: 469, column: 6, scope: !5002)
!5049 = !DILocation(line: 469, column: 11, scope: !5002)
!5050 = !DILocation(line: 471, column: 39, scope: !5002)
!5051 = !DILocation(line: 471, column: 16, scope: !5002)
!5052 = !DILocation(line: 471, column: 14, scope: !5002)
!5053 = !DILocation(line: 473, column: 2, scope: !5002)
!5054 = !DILocation(line: 473, column: 9, scope: !5002)
!5055 = !DILocation(line: 473, column: 21, scope: !5002)
!5056 = !DILocation(line: 474, column: 27, scope: !5057)
!5057 = distinct !DILexicalBlock(scope: !5002, file: !3, line: 473, column: 27)
!5058 = !DILocation(line: 475, column: 6, scope: !5057)
!5059 = !DILocation(line: 475, column: 13, scope: !5057)
!5060 = !DILocation(line: 475, column: 27, scope: !5057)
!5061 = !DILocation(line: 475, column: 32, scope: !5057)
!5062 = !DILocation(line: 475, column: 25, scope: !5057)
!5063 = !DILocation(line: 475, column: 12, scope: !5057)
!5064 = !DILocation(line: 475, column: 10, scope: !5057)
!5065 = !DILocation(line: 474, column: 9, scope: !5057)
!5066 = !DILocation(line: 474, column: 7, scope: !5057)
!5067 = !DILocation(line: 478, column: 8, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !5057, file: !3, line: 478, column: 7)
!5069 = !DILocation(line: 478, column: 7, scope: !5057)
!5070 = !DILocation(line: 479, column: 10, scope: !5068)
!5071 = !DILocation(line: 479, column: 8, scope: !5068)
!5072 = !DILocation(line: 479, column: 4, scope: !5068)
!5073 = !DILocation(line: 481, column: 40, scope: !5057)
!5074 = !DILocation(line: 481, column: 46, scope: !5057)
!5075 = !DILocation(line: 481, column: 58, scope: !5057)
!5076 = !DILocation(line: 481, column: 17, scope: !5057)
!5077 = !DILocation(line: 481, column: 15, scope: !5057)
!5078 = distinct !{!5078, !5053, !5079}
!5079 = !DILocation(line: 482, column: 2, scope: !5002)
!5080 = !DILocation(line: 484, column: 9, scope: !5002)
!5081 = !DILocation(line: 484, column: 2, scope: !5002)
!5082 = distinct !DISubprogram(name: "nand_soft_waitrdy", scope: !3, file: !3, line: 607, type: !5083, scopeLine: 608, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5083 = !DISubroutineType(types: !5084)
!5084 = !{!240, !4166, !306}
!5085 = !DILocalVariable(name: "m", arg: 1, scope: !5086, file: !5087, line: 363, type: !3059)
!5086 = distinct !DISubprogram(name: "msecs_to_jiffies", scope: !5087, file: !5087, line: 363, type: !5088, scopeLine: 364, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5087 = !DIFile(filename: "./include/linux/jiffies.h", directory: "/home/lizy2001/genbc/linux")
!5088 = !DISubroutineType(types: !5089)
!5089 = !{!306, !3059}
!5090 = !DILocation(line: 363, column: 74, scope: !5086, inlinedAt: !5091)
!5091 = distinct !DILocation(line: 629, column: 25, scope: !5082)
!5092 = !DILocalVariable(name: "chip", arg: 1, scope: !5082, file: !3, line: 607, type: !4166)
!5093 = !DILocation(line: 607, column: 41, scope: !5082)
!5094 = !DILocalVariable(name: "timeout_ms", arg: 2, scope: !5082, file: !3, line: 607, type: !306)
!5095 = !DILocation(line: 607, column: 61, scope: !5082)
!5096 = !DILocalVariable(name: "timings", scope: !5082, file: !3, line: 609, type: !5097)
!5097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5098, size: 64)
!5098 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4327)
!5099 = !DILocation(line: 609, column: 33, scope: !5082)
!5100 = !DILocalVariable(name: "status", scope: !5082, file: !3, line: 610, type: !1372)
!5101 = !DILocation(line: 610, column: 5, scope: !5082)
!5102 = !DILocalVariable(name: "ret", scope: !5082, file: !3, line: 611, type: !240)
!5103 = !DILocation(line: 611, column: 6, scope: !5082)
!5104 = !DILocation(line: 613, column: 24, scope: !5105)
!5105 = distinct !DILexicalBlock(scope: !5082, file: !3, line: 613, column: 6)
!5106 = !DILocation(line: 613, column: 7, scope: !5105)
!5107 = !DILocation(line: 613, column: 6, scope: !5082)
!5108 = !DILocation(line: 614, column: 3, scope: !5105)
!5109 = !DILocation(line: 617, column: 59, scope: !5082)
!5110 = !DILocation(line: 617, column: 33, scope: !5082)
!5111 = !DILocation(line: 617, column: 12, scope: !5082)
!5112 = !DILocation(line: 617, column: 10, scope: !5082)
!5113 = !DILocation(line: 618, column: 2, scope: !5114)
!5114 = distinct !DILexicalBlock(scope: !5115, file: !3, line: 618, column: 2)
!5115 = distinct !DILexicalBlock(scope: !5116, file: !3, line: 618, column: 2)
!5116 = distinct !DILexicalBlock(scope: !5117, file: !3, line: 618, column: 2)
!5117 = distinct !DILexicalBlock(scope: !5082, file: !3, line: 618, column: 2)
!5118 = !DILocation(line: 618, column: 2, scope: !5115)
!5119 = !DILocation(line: 620, column: 23, scope: !5082)
!5120 = !DILocation(line: 620, column: 8, scope: !5082)
!5121 = !DILocation(line: 620, column: 6, scope: !5082)
!5122 = !DILocation(line: 621, column: 6, scope: !5123)
!5123 = distinct !DILexicalBlock(scope: !5082, file: !3, line: 621, column: 6)
!5124 = !DILocation(line: 621, column: 6, scope: !5082)
!5125 = !DILocation(line: 622, column: 10, scope: !5123)
!5126 = !DILocation(line: 622, column: 3, scope: !5123)
!5127 = !DILocation(line: 629, column: 15, scope: !5082)
!5128 = !DILocation(line: 629, column: 42, scope: !5082)
!5129 = !DILocation(line: 365, column: 27, scope: !5130, inlinedAt: !5091)
!5130 = distinct !DILexicalBlock(scope: !5086, file: !5087, line: 365, column: 6)
!5131 = !DILocation(line: 365, column: 6, scope: !5130, inlinedAt: !5091)
!5132 = !DILocation(line: 365, column: 6, scope: !5086, inlinedAt: !5091)
!5133 = !DILocation(line: 366, column: 12, scope: !5134, inlinedAt: !5091)
!5134 = distinct !DILexicalBlock(scope: !5135, file: !5087, line: 366, column: 7)
!5135 = distinct !DILexicalBlock(scope: !5130, file: !5087, line: 365, column: 31)
!5136 = !DILocation(line: 366, column: 14, scope: !5134, inlinedAt: !5091)
!5137 = !DILocation(line: 366, column: 7, scope: !5135, inlinedAt: !5091)
!5138 = !DILocation(line: 367, column: 4, scope: !5134, inlinedAt: !5091)
!5139 = !DILocation(line: 368, column: 28, scope: !5135, inlinedAt: !5091)
!5140 = !DILocation(line: 368, column: 10, scope: !5135, inlinedAt: !5091)
!5141 = !DILocation(line: 368, column: 3, scope: !5135, inlinedAt: !5091)
!5142 = !DILocation(line: 370, column: 29, scope: !5143, inlinedAt: !5091)
!5143 = distinct !DILexicalBlock(scope: !5130, file: !5087, line: 369, column: 9)
!5144 = !DILocation(line: 370, column: 10, scope: !5143, inlinedAt: !5091)
!5145 = !DILocation(line: 370, column: 3, scope: !5143, inlinedAt: !5091)
!5146 = !DILocation(line: 372, column: 1, scope: !5086, inlinedAt: !5091)
!5147 = !DILocation(line: 629, column: 23, scope: !5082)
!5148 = !DILocation(line: 629, column: 54, scope: !5082)
!5149 = !DILocation(line: 629, column: 13, scope: !5082)
!5150 = !DILocation(line: 630, column: 2, scope: !5082)
!5151 = !DILocation(line: 631, column: 27, scope: !5152)
!5152 = distinct !DILexicalBlock(scope: !5082, file: !3, line: 630, column: 5)
!5153 = !DILocation(line: 631, column: 9, scope: !5152)
!5154 = !DILocation(line: 631, column: 7, scope: !5152)
!5155 = !DILocation(line: 633, column: 7, scope: !5156)
!5156 = distinct !DILexicalBlock(scope: !5152, file: !3, line: 633, column: 7)
!5157 = !DILocation(line: 633, column: 7, scope: !5152)
!5158 = !DILocation(line: 634, column: 4, scope: !5156)
!5159 = !DILocation(line: 636, column: 7, scope: !5160)
!5160 = distinct !DILexicalBlock(scope: !5152, file: !3, line: 636, column: 7)
!5161 = !DILocation(line: 636, column: 14, scope: !5160)
!5162 = !DILocation(line: 636, column: 7, scope: !5152)
!5163 = !DILocation(line: 637, column: 4, scope: !5160)
!5164 = !DILocation(line: 644, column: 3, scope: !5165)
!5165 = distinct !DILexicalBlock(scope: !5166, file: !3, line: 644, column: 3)
!5166 = distinct !DILexicalBlock(scope: !5167, file: !3, line: 644, column: 3)
!5167 = distinct !DILexicalBlock(scope: !5168, file: !3, line: 644, column: 3)
!5168 = distinct !DILexicalBlock(scope: !5152, file: !3, line: 644, column: 3)
!5169 = !DILocation(line: 645, column: 2, scope: !5152)
!5170 = !DILocation(line: 645, column: 11, scope: !5082)
!5171 = distinct !{!5171, !5150, !5172}
!5172 = !DILocation(line: 645, column: 43, scope: !5082)
!5173 = !DILocation(line: 652, column: 22, scope: !5082)
!5174 = !DILocation(line: 652, column: 2, scope: !5082)
!5175 = !DILocation(line: 654, column: 6, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5082, file: !3, line: 654, column: 6)
!5177 = !DILocation(line: 654, column: 6, scope: !5082)
!5178 = !DILocation(line: 655, column: 10, scope: !5176)
!5179 = !DILocation(line: 655, column: 3, scope: !5176)
!5180 = !DILocation(line: 657, column: 9, scope: !5082)
!5181 = !DILocation(line: 657, column: 16, scope: !5082)
!5182 = !DILocation(line: 657, column: 2, scope: !5082)
!5183 = !DILocation(line: 658, column: 1, scope: !5082)
!5184 = distinct !DISubprogram(name: "nand_has_exec_op", scope: !4207, file: !4207, line: 110, type: !5185, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5185 = !DISubroutineType(types: !5186)
!5186 = !{!180, !4166}
!5187 = !DILocalVariable(name: "chip", arg: 1, scope: !5184, file: !4207, line: 110, type: !4166)
!5188 = !DILocation(line: 110, column: 55, scope: !5184)
!5189 = !DILocation(line: 112, column: 7, scope: !5190)
!5190 = distinct !DILexicalBlock(scope: !5184, file: !4207, line: 112, column: 6)
!5191 = !DILocation(line: 112, column: 13, scope: !5190)
!5192 = !DILocation(line: 112, column: 24, scope: !5190)
!5193 = !DILocation(line: 112, column: 28, scope: !5190)
!5194 = !DILocation(line: 112, column: 34, scope: !5190)
!5195 = !DILocation(line: 112, column: 46, scope: !5190)
!5196 = !DILocation(line: 112, column: 50, scope: !5190)
!5197 = !DILocation(line: 113, column: 7, scope: !5190)
!5198 = !DILocation(line: 113, column: 13, scope: !5190)
!5199 = !DILocation(line: 113, column: 25, scope: !5190)
!5200 = !DILocation(line: 113, column: 30, scope: !5190)
!5201 = !DILocation(line: 112, column: 6, scope: !5184)
!5202 = !DILocation(line: 114, column: 3, scope: !5190)
!5203 = !DILocation(line: 116, column: 2, scope: !5184)
!5204 = !DILocation(line: 117, column: 1, scope: !5184)
!5205 = distinct !DISubprogram(name: "nand_get_sdr_timings", scope: !117, file: !117, line: 507, type: !5206, scopeLine: 508, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5206 = !DISubroutineType(types: !5207)
!5207 = !{!5097, !4473}
!5208 = !DILocalVariable(name: "conf", arg: 1, scope: !5205, file: !117, line: 507, type: !4473)
!5209 = !DILocation(line: 507, column: 58, scope: !5205)
!5210 = !DILocation(line: 509, column: 6, scope: !5211)
!5211 = distinct !DILexicalBlock(scope: !5205, file: !117, line: 509, column: 6)
!5212 = !DILocation(line: 509, column: 12, scope: !5211)
!5213 = !DILocation(line: 509, column: 17, scope: !5211)
!5214 = !DILocation(line: 509, column: 6, scope: !5205)
!5215 = !DILocation(line: 510, column: 10, scope: !5211)
!5216 = !DILocation(line: 510, column: 3, scope: !5211)
!5217 = !DILocation(line: 512, column: 10, scope: !5205)
!5218 = !DILocation(line: 512, column: 16, scope: !5205)
!5219 = !DILocation(line: 512, column: 24, scope: !5205)
!5220 = !DILocation(line: 512, column: 2, scope: !5205)
!5221 = !DILocation(line: 513, column: 1, scope: !5205)
!5222 = distinct !DISubprogram(name: "nand_get_interface_config", scope: !117, file: !117, line: 1195, type: !5223, scopeLine: 1196, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5223 = !DISubroutineType(types: !5224)
!5224 = !{!4473, !4166}
!5225 = !DILocalVariable(name: "chip", arg: 1, scope: !5222, file: !117, line: 1195, type: !4166)
!5226 = !DILocation(line: 1195, column: 45, scope: !5222)
!5227 = !DILocation(line: 1197, column: 9, scope: !5222)
!5228 = !DILocation(line: 1197, column: 15, scope: !5222)
!5229 = !DILocation(line: 1197, column: 2, scope: !5222)
!5230 = distinct !DISubprogram(name: "nand_status_op", scope: !3, file: !3, line: 1600, type: !5231, scopeLine: 1601, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5231 = !DISubroutineType(types: !5232)
!5232 = !{!240, !4166, !4051}
!5233 = !DILocalVariable(name: "chip", arg: 1, scope: !5230, file: !3, line: 1600, type: !4166)
!5234 = !DILocation(line: 1600, column: 38, scope: !5230)
!5235 = !DILocalVariable(name: "status", arg: 2, scope: !5230, file: !3, line: 1600, type: !4051)
!5236 = !DILocation(line: 1600, column: 48, scope: !5230)
!5237 = !DILocation(line: 1602, column: 23, scope: !5238)
!5238 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 1602, column: 6)
!5239 = !DILocation(line: 1602, column: 6, scope: !5238)
!5240 = !DILocation(line: 1602, column: 6, scope: !5230)
!5241 = !DILocalVariable(name: "sdr", scope: !5242, file: !3, line: 1603, type: !5097)
!5242 = distinct !DILexicalBlock(scope: !5238, file: !3, line: 1602, column: 30)
!5243 = !DILocation(line: 1603, column: 34, scope: !5242)
!5244 = !DILocation(line: 1604, column: 51, scope: !5242)
!5245 = !DILocation(line: 1604, column: 25, scope: !5242)
!5246 = !DILocation(line: 1604, column: 4, scope: !5242)
!5247 = !DILocalVariable(name: "instrs", scope: !5242, file: !3, line: 1605, type: !5248)
!5248 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4438, size: 640, elements: !1589)
!5249 = !DILocation(line: 1605, column: 24, scope: !5242)
!5250 = !DILocation(line: 1605, column: 35, scope: !5242)
!5251 = !DILocation(line: 1606, column: 4, scope: !5242)
!5252 = !DILocation(line: 1606, column: 4, scope: !5253)
!5253 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 1606, column: 4)
!5254 = !DILocation(line: 1608, column: 4, scope: !5242)
!5255 = !DILocalVariable(name: "op", scope: !5242, file: !3, line: 1610, type: !4432)
!5256 = !DILocation(line: 1610, column: 25, scope: !5242)
!5257 = !DILocation(line: 1610, column: 30, scope: !5242)
!5258 = !DILocation(line: 1612, column: 8, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !5242, file: !3, line: 1612, column: 7)
!5260 = !DILocation(line: 1612, column: 7, scope: !5242)
!5261 = !DILocation(line: 1613, column: 7, scope: !5259)
!5262 = !DILocation(line: 1613, column: 14, scope: !5259)
!5263 = !DILocation(line: 1613, column: 4, scope: !5259)
!5264 = !DILocation(line: 1615, column: 23, scope: !5242)
!5265 = !DILocation(line: 1615, column: 10, scope: !5242)
!5266 = !DILocation(line: 1615, column: 3, scope: !5242)
!5267 = !DILocation(line: 1618, column: 2, scope: !5230)
!5268 = !DILocation(line: 1618, column: 8, scope: !5230)
!5269 = !DILocation(line: 1618, column: 15, scope: !5230)
!5270 = !DILocation(line: 1618, column: 23, scope: !5230)
!5271 = !DILocation(line: 1619, column: 6, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5230, file: !3, line: 1619, column: 6)
!5273 = !DILocation(line: 1619, column: 6, scope: !5230)
!5274 = !DILocation(line: 1620, column: 13, scope: !5272)
!5275 = !DILocation(line: 1620, column: 19, scope: !5272)
!5276 = !DILocation(line: 1620, column: 26, scope: !5272)
!5277 = !DILocation(line: 1620, column: 36, scope: !5272)
!5278 = !DILocation(line: 1620, column: 4, scope: !5272)
!5279 = !DILocation(line: 1620, column: 11, scope: !5272)
!5280 = !DILocation(line: 1620, column: 3, scope: !5272)
!5281 = !DILocation(line: 1622, column: 2, scope: !5230)
!5282 = !DILocation(line: 1623, column: 1, scope: !5230)
!5283 = distinct !DISubprogram(name: "nand_read_data_op", scope: !3, file: !3, line: 1867, type: !5284, scopeLine: 1869, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5284 = !DISubroutineType(types: !5285)
!5285 = !{!240, !4166, !330, !7, !180, !180}
!5286 = !DILocalVariable(name: "chip", arg: 1, scope: !5283, file: !3, line: 1867, type: !4166)
!5287 = !DILocation(line: 1867, column: 41, scope: !5283)
!5288 = !DILocalVariable(name: "buf", arg: 2, scope: !5283, file: !3, line: 1867, type: !330)
!5289 = !DILocation(line: 1867, column: 53, scope: !5283)
!5290 = !DILocalVariable(name: "len", arg: 3, scope: !5283, file: !3, line: 1867, type: !7)
!5291 = !DILocation(line: 1867, column: 71, scope: !5283)
!5292 = !DILocalVariable(name: "force_8bit", arg: 4, scope: !5283, file: !3, line: 1868, type: !180)
!5293 = !DILocation(line: 1868, column: 14, scope: !5283)
!5294 = !DILocalVariable(name: "check_only", arg: 5, scope: !5283, file: !3, line: 1868, type: !180)
!5295 = !DILocation(line: 1868, column: 31, scope: !5283)
!5296 = !DILocation(line: 1870, column: 7, scope: !5297)
!5297 = distinct !DILexicalBlock(scope: !5283, file: !3, line: 1870, column: 6)
!5298 = !DILocation(line: 1870, column: 11, scope: !5297)
!5299 = !DILocation(line: 1870, column: 15, scope: !5297)
!5300 = !DILocation(line: 1870, column: 6, scope: !5283)
!5301 = !DILocation(line: 1871, column: 3, scope: !5297)
!5302 = !DILocation(line: 1873, column: 23, scope: !5303)
!5303 = distinct !DILexicalBlock(scope: !5283, file: !3, line: 1873, column: 6)
!5304 = !DILocation(line: 1873, column: 6, scope: !5303)
!5305 = !DILocation(line: 1873, column: 6, scope: !5283)
!5306 = !DILocalVariable(name: "instrs", scope: !5307, file: !3, line: 1874, type: !5308)
!5307 = distinct !DILexicalBlock(scope: !5303, file: !3, line: 1873, column: 30)
!5308 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4438, size: 320, elements: !1391)
!5309 = !DILocation(line: 1874, column: 24, scope: !5307)
!5310 = !DILocation(line: 1874, column: 35, scope: !5307)
!5311 = !DILocation(line: 1875, column: 4, scope: !5307)
!5312 = !DILocalVariable(name: "op", scope: !5307, file: !3, line: 1877, type: !4432)
!5313 = !DILocation(line: 1877, column: 25, scope: !5307)
!5314 = !DILocation(line: 1877, column: 30, scope: !5307)
!5315 = !DILocation(line: 1879, column: 35, scope: !5307)
!5316 = !DILocation(line: 1879, column: 3, scope: !5307)
!5317 = !DILocation(line: 1879, column: 13, scope: !5307)
!5318 = !DILocation(line: 1879, column: 17, scope: !5307)
!5319 = !DILocation(line: 1879, column: 22, scope: !5307)
!5320 = !DILocation(line: 1879, column: 33, scope: !5307)
!5321 = !DILocation(line: 1881, column: 7, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5307, file: !3, line: 1881, column: 7)
!5323 = !DILocation(line: 1881, column: 7, scope: !5307)
!5324 = !DILocation(line: 1882, column: 25, scope: !5322)
!5325 = !DILocation(line: 1882, column: 11, scope: !5322)
!5326 = !DILocation(line: 1882, column: 4, scope: !5322)
!5327 = !DILocation(line: 1884, column: 23, scope: !5307)
!5328 = !DILocation(line: 1884, column: 10, scope: !5307)
!5329 = !DILocation(line: 1884, column: 3, scope: !5307)
!5330 = !DILocation(line: 1887, column: 6, scope: !5331)
!5331 = distinct !DILexicalBlock(scope: !5283, file: !3, line: 1887, column: 6)
!5332 = !DILocation(line: 1887, column: 6, scope: !5283)
!5333 = !DILocation(line: 1888, column: 3, scope: !5331)
!5334 = !DILocation(line: 1890, column: 6, scope: !5335)
!5335 = distinct !DILexicalBlock(scope: !5283, file: !3, line: 1890, column: 6)
!5336 = !DILocation(line: 1890, column: 6, scope: !5283)
!5337 = !DILocalVariable(name: "p", scope: !5338, file: !3, line: 1891, type: !4051)
!5338 = distinct !DILexicalBlock(scope: !5335, file: !3, line: 1890, column: 18)
!5339 = !DILocation(line: 1891, column: 7, scope: !5338)
!5340 = !DILocation(line: 1891, column: 11, scope: !5338)
!5341 = !DILocalVariable(name: "i", scope: !5338, file: !3, line: 1892, type: !7)
!5342 = !DILocation(line: 1892, column: 16, scope: !5338)
!5343 = !DILocation(line: 1894, column: 10, scope: !5344)
!5344 = distinct !DILexicalBlock(scope: !5338, file: !3, line: 1894, column: 3)
!5345 = !DILocation(line: 1894, column: 8, scope: !5344)
!5346 = !DILocation(line: 1894, column: 15, scope: !5347)
!5347 = distinct !DILexicalBlock(scope: !5344, file: !3, line: 1894, column: 3)
!5348 = !DILocation(line: 1894, column: 19, scope: !5347)
!5349 = !DILocation(line: 1894, column: 17, scope: !5347)
!5350 = !DILocation(line: 1894, column: 3, scope: !5344)
!5351 = !DILocation(line: 1895, column: 11, scope: !5347)
!5352 = !DILocation(line: 1895, column: 17, scope: !5347)
!5353 = !DILocation(line: 1895, column: 24, scope: !5347)
!5354 = !DILocation(line: 1895, column: 34, scope: !5347)
!5355 = !DILocation(line: 1895, column: 4, scope: !5347)
!5356 = !DILocation(line: 1895, column: 6, scope: !5347)
!5357 = !DILocation(line: 1895, column: 9, scope: !5347)
!5358 = !DILocation(line: 1894, column: 25, scope: !5347)
!5359 = !DILocation(line: 1894, column: 3, scope: !5347)
!5360 = distinct !{!5360, !5350, !5361}
!5361 = !DILocation(line: 1895, column: 38, scope: !5344)
!5362 = !DILocation(line: 1896, column: 2, scope: !5338)
!5363 = !DILocation(line: 1897, column: 3, scope: !5364)
!5364 = distinct !DILexicalBlock(scope: !5335, file: !3, line: 1896, column: 9)
!5365 = !DILocation(line: 1897, column: 9, scope: !5364)
!5366 = !DILocation(line: 1897, column: 16, scope: !5364)
!5367 = !DILocation(line: 1897, column: 25, scope: !5364)
!5368 = !DILocation(line: 1897, column: 31, scope: !5364)
!5369 = !DILocation(line: 1897, column: 36, scope: !5364)
!5370 = !DILocation(line: 1900, column: 2, scope: !5283)
!5371 = !DILocation(line: 1901, column: 1, scope: !5283)
!5372 = distinct !DISubprogram(name: "nand_exit_status_op", scope: !3, file: !3, line: 1637, type: !4222, scopeLine: 1638, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5373 = !DILocalVariable(name: "chip", arg: 1, scope: !5372, file: !3, line: 1637, type: !4166)
!5374 = !DILocation(line: 1637, column: 43, scope: !5372)
!5375 = !DILocation(line: 1639, column: 23, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5372, file: !3, line: 1639, column: 6)
!5377 = !DILocation(line: 1639, column: 6, scope: !5376)
!5378 = !DILocation(line: 1639, column: 6, scope: !5372)
!5379 = !DILocalVariable(name: "instrs", scope: !5380, file: !3, line: 1640, type: !5308)
!5380 = distinct !DILexicalBlock(scope: !5376, file: !3, line: 1639, column: 30)
!5381 = !DILocation(line: 1640, column: 24, scope: !5380)
!5382 = !DILocalVariable(name: "op", scope: !5380, file: !3, line: 1643, type: !4432)
!5383 = !DILocation(line: 1643, column: 25, scope: !5380)
!5384 = !DILocation(line: 1643, column: 30, scope: !5380)
!5385 = !DILocation(line: 1645, column: 23, scope: !5380)
!5386 = !DILocation(line: 1645, column: 10, scope: !5380)
!5387 = !DILocation(line: 1645, column: 3, scope: !5380)
!5388 = !DILocation(line: 1648, column: 2, scope: !5372)
!5389 = !DILocation(line: 1648, column: 8, scope: !5372)
!5390 = !DILocation(line: 1648, column: 15, scope: !5372)
!5391 = !DILocation(line: 1648, column: 23, scope: !5372)
!5392 = !DILocation(line: 1650, column: 2, scope: !5372)
!5393 = !DILocation(line: 1651, column: 1, scope: !5372)
!5394 = distinct !DISubprogram(name: "nand_gpio_waitrdy", scope: !3, file: !3, line: 675, type: !5395, scopeLine: 677, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5395 = !DISubroutineType(types: !5396)
!5396 = !{!240, !4166, !5397, !306}
!5397 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5398, size: 64)
!5398 = !DICompositeType(tag: DW_TAG_structure_type, name: "gpio_desc", file: !5399, line: 19, flags: DIFlagFwdDecl)
!5399 = !DIFile(filename: "./include/linux/gpio/consumer.h", directory: "/home/lizy2001/genbc/linux")
!5400 = !DILocation(line: 363, column: 74, scope: !5086, inlinedAt: !5401)
!5401 = distinct !DILocation(line: 685, column: 25, scope: !5394)
!5402 = !DILocalVariable(name: "chip", arg: 1, scope: !5394, file: !3, line: 675, type: !4166)
!5403 = !DILocation(line: 675, column: 41, scope: !5394)
!5404 = !DILocalVariable(name: "gpiod", arg: 2, scope: !5394, file: !3, line: 675, type: !5397)
!5405 = !DILocation(line: 675, column: 65, scope: !5394)
!5406 = !DILocalVariable(name: "timeout_ms", arg: 3, scope: !5394, file: !3, line: 676, type: !306)
!5407 = !DILocation(line: 676, column: 23, scope: !5394)
!5408 = !DILocation(line: 685, column: 15, scope: !5394)
!5409 = !DILocation(line: 685, column: 42, scope: !5394)
!5410 = !DILocation(line: 365, column: 27, scope: !5130, inlinedAt: !5401)
!5411 = !DILocation(line: 365, column: 6, scope: !5130, inlinedAt: !5401)
!5412 = !DILocation(line: 365, column: 6, scope: !5086, inlinedAt: !5401)
!5413 = !DILocation(line: 366, column: 12, scope: !5134, inlinedAt: !5401)
!5414 = !DILocation(line: 366, column: 14, scope: !5134, inlinedAt: !5401)
!5415 = !DILocation(line: 366, column: 7, scope: !5135, inlinedAt: !5401)
!5416 = !DILocation(line: 367, column: 4, scope: !5134, inlinedAt: !5401)
!5417 = !DILocation(line: 368, column: 28, scope: !5135, inlinedAt: !5401)
!5418 = !DILocation(line: 368, column: 10, scope: !5135, inlinedAt: !5401)
!5419 = !DILocation(line: 368, column: 3, scope: !5135, inlinedAt: !5401)
!5420 = !DILocation(line: 370, column: 29, scope: !5143, inlinedAt: !5401)
!5421 = !DILocation(line: 370, column: 10, scope: !5143, inlinedAt: !5401)
!5422 = !DILocation(line: 370, column: 3, scope: !5143, inlinedAt: !5401)
!5423 = !DILocation(line: 372, column: 1, scope: !5086, inlinedAt: !5401)
!5424 = !DILocation(line: 685, column: 23, scope: !5394)
!5425 = !DILocation(line: 685, column: 54, scope: !5394)
!5426 = !DILocation(line: 685, column: 13, scope: !5394)
!5427 = !DILocation(line: 686, column: 2, scope: !5394)
!5428 = !DILocation(line: 687, column: 32, scope: !5429)
!5429 = distinct !DILexicalBlock(scope: !5430, file: !3, line: 687, column: 7)
!5430 = distinct !DILexicalBlock(scope: !5394, file: !3, line: 686, column: 5)
!5431 = !DILocation(line: 687, column: 7, scope: !5429)
!5432 = !DILocation(line: 687, column: 7, scope: !5430)
!5433 = !DILocation(line: 688, column: 4, scope: !5429)
!5434 = !DILocation(line: 690, column: 3, scope: !5435)
!5435 = distinct !DILexicalBlock(scope: !5430, file: !3, line: 690, column: 3)
!5436 = !DILocation(line: 691, column: 2, scope: !5430)
!5437 = !DILocation(line: 691, column: 11, scope: !5394)
!5438 = distinct !{!5438, !5427, !5439}
!5439 = !DILocation(line: 691, column: 43, scope: !5394)
!5440 = !DILocation(line: 693, column: 34, scope: !5394)
!5441 = !DILocation(line: 693, column: 9, scope: !5394)
!5442 = !DILocation(line: 693, column: 2, scope: !5394)
!5443 = !DILocation(line: 694, column: 1, scope: !5394)
!5444 = distinct !DISubprogram(name: "___might_sleep", scope: !5445, file: !5445, line: 248, type: !5446, scopeLine: 249, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5445 = !DIFile(filename: "./include/linux/kernel.h", directory: "/home/lizy2001/genbc/linux")
!5446 = !DISubroutineType(types: !5447)
!5447 = !{null, !147, !240, !240}
!5448 = !DILocalVariable(name: "file", arg: 1, scope: !5444, file: !5445, line: 248, type: !147)
!5449 = !DILocation(line: 248, column: 49, scope: !5444)
!5450 = !DILocalVariable(name: "line", arg: 2, scope: !5444, file: !5445, line: 248, type: !240)
!5451 = !DILocation(line: 248, column: 59, scope: !5444)
!5452 = !DILocalVariable(name: "preempt_offset", arg: 3, scope: !5444, file: !5445, line: 249, type: !240)
!5453 = !DILocation(line: 249, column: 12, scope: !5444)
!5454 = !DILocation(line: 249, column: 30, scope: !5444)
!5455 = distinct !DISubprogram(name: "panic_nand_wait", scope: !3, file: !3, line: 706, type: !5456, scopeLine: 707, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5456 = !DISubroutineType(types: !5457)
!5457 = !{null, !4166, !306}
!5458 = !DILocalVariable(name: "chip", arg: 1, scope: !5455, file: !3, line: 706, type: !4166)
!5459 = !DILocation(line: 706, column: 40, scope: !5455)
!5460 = !DILocalVariable(name: "timeo", arg: 2, scope: !5455, file: !3, line: 706, type: !306)
!5461 = !DILocation(line: 706, column: 60, scope: !5455)
!5462 = !DILocalVariable(name: "i", scope: !5455, file: !3, line: 708, type: !240)
!5463 = !DILocation(line: 708, column: 6, scope: !5455)
!5464 = !DILocation(line: 709, column: 9, scope: !5465)
!5465 = distinct !DILexicalBlock(scope: !5455, file: !3, line: 709, column: 2)
!5466 = !DILocation(line: 709, column: 7, scope: !5465)
!5467 = !DILocation(line: 709, column: 14, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5465, file: !3, line: 709, column: 2)
!5469 = !DILocation(line: 709, column: 18, scope: !5468)
!5470 = !DILocation(line: 709, column: 16, scope: !5468)
!5471 = !DILocation(line: 709, column: 2, scope: !5465)
!5472 = !DILocation(line: 710, column: 7, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !5474, file: !3, line: 710, column: 7)
!5474 = distinct !DILexicalBlock(scope: !5468, file: !3, line: 709, column: 30)
!5475 = !DILocation(line: 710, column: 13, scope: !5473)
!5476 = !DILocation(line: 710, column: 20, scope: !5473)
!5477 = !DILocation(line: 710, column: 7, scope: !5474)
!5478 = !DILocation(line: 711, column: 8, scope: !5479)
!5479 = distinct !DILexicalBlock(scope: !5480, file: !3, line: 711, column: 8)
!5480 = distinct !DILexicalBlock(scope: !5473, file: !3, line: 710, column: 31)
!5481 = !DILocation(line: 711, column: 14, scope: !5479)
!5482 = !DILocation(line: 711, column: 21, scope: !5479)
!5483 = !DILocation(line: 711, column: 31, scope: !5479)
!5484 = !DILocation(line: 711, column: 8, scope: !5480)
!5485 = !DILocation(line: 712, column: 5, scope: !5479)
!5486 = !DILocation(line: 713, column: 3, scope: !5480)
!5487 = !DILocalVariable(name: "ret", scope: !5488, file: !3, line: 714, type: !240)
!5488 = distinct !DILexicalBlock(scope: !5473, file: !3, line: 713, column: 10)
!5489 = !DILocation(line: 714, column: 8, scope: !5488)
!5490 = !DILocalVariable(name: "status", scope: !5488, file: !3, line: 715, type: !1372)
!5491 = !DILocation(line: 715, column: 7, scope: !5488)
!5492 = !DILocation(line: 717, column: 28, scope: !5488)
!5493 = !DILocation(line: 717, column: 10, scope: !5488)
!5494 = !DILocation(line: 717, column: 8, scope: !5488)
!5495 = !DILocation(line: 719, column: 8, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5488, file: !3, line: 719, column: 8)
!5497 = !DILocation(line: 719, column: 8, scope: !5488)
!5498 = !DILocation(line: 720, column: 5, scope: !5496)
!5499 = !DILocation(line: 722, column: 8, scope: !5500)
!5500 = distinct !DILexicalBlock(scope: !5488, file: !3, line: 722, column: 8)
!5501 = !DILocation(line: 722, column: 15, scope: !5500)
!5502 = !DILocation(line: 722, column: 8, scope: !5488)
!5503 = !DILocation(line: 723, column: 5, scope: !5500)
!5504 = !DILocation(line: 725, column: 3, scope: !5505)
!5505 = distinct !DILexicalBlock(scope: !5506, file: !3, line: 725, column: 3)
!5506 = distinct !DILexicalBlock(scope: !5507, file: !3, line: 725, column: 3)
!5507 = distinct !DILexicalBlock(scope: !5508, file: !3, line: 725, column: 3)
!5508 = distinct !DILexicalBlock(scope: !5474, file: !3, line: 725, column: 3)
!5509 = !DILocation(line: 726, column: 2, scope: !5474)
!5510 = !DILocation(line: 709, column: 26, scope: !5468)
!5511 = !DILocation(line: 709, column: 2, scope: !5468)
!5512 = distinct !{!5512, !5471, !5513}
!5513 = !DILocation(line: 726, column: 2, scope: !5465)
!5514 = !DILocation(line: 727, column: 1, scope: !5455)
!5515 = distinct !DISubprogram(name: "nand_choose_best_sdr_timings", scope: !3, file: !3, line: 873, type: !5516, scopeLine: 876, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5516 = !DISubroutineType(types: !5517)
!5517 = !{!240, !4166, !4315, !5518}
!5518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4327, size: 64)
!5519 = !DILocalVariable(name: "x", arg: 1, scope: !5520, file: !5521, line: 324, type: !7)
!5520 = distinct !DISubprogram(name: "fls", scope: !5521, file: !5521, line: 324, type: !5522, scopeLine: 325, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5521 = !DIFile(filename: "./arch/x86/include/asm/bitops.h", directory: "/home/lizy2001/genbc/linux")
!5522 = !DISubroutineType(types: !5523)
!5523 = !{!240, !7}
!5524 = !DILocation(line: 324, column: 45, scope: !5520, inlinedAt: !5525)
!5525 = distinct !DILocation(line: 897, column: 15, scope: !5526)
!5526 = distinct !DILexicalBlock(scope: !5527, file: !3, line: 896, column: 36)
!5527 = distinct !DILexicalBlock(scope: !5528, file: !3, line: 896, column: 13)
!5528 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 882, column: 6)
!5529 = !DILocalVariable(name: "r", scope: !5520, file: !5521, line: 326, type: !240)
!5530 = !DILocation(line: 326, column: 6, scope: !5520, inlinedAt: !5525)
!5531 = !DILocalVariable(name: "chip", arg: 1, scope: !5515, file: !3, line: 873, type: !4166)
!5532 = !DILocation(line: 873, column: 52, scope: !5515)
!5533 = !DILocalVariable(name: "iface", arg: 2, scope: !5515, file: !3, line: 874, type: !4315)
!5534 = !DILocation(line: 874, column: 36, scope: !5515)
!5535 = !DILocalVariable(name: "spec_timings", arg: 3, scope: !5515, file: !3, line: 875, type: !5518)
!5536 = !DILocation(line: 875, column: 31, scope: !5515)
!5537 = !DILocalVariable(name: "ops", scope: !5515, file: !3, line: 877, type: !4420)
!5538 = !DILocation(line: 877, column: 36, scope: !5515)
!5539 = !DILocation(line: 877, column: 42, scope: !5515)
!5540 = !DILocation(line: 877, column: 48, scope: !5515)
!5541 = !DILocation(line: 877, column: 60, scope: !5515)
!5542 = !DILocalVariable(name: "best_mode", scope: !5515, file: !3, line: 878, type: !240)
!5543 = !DILocation(line: 878, column: 6, scope: !5515)
!5544 = !DILocalVariable(name: "mode", scope: !5515, file: !3, line: 878, type: !240)
!5545 = !DILocation(line: 878, column: 21, scope: !5515)
!5546 = !DILocalVariable(name: "ret", scope: !5515, file: !3, line: 878, type: !240)
!5547 = !DILocation(line: 878, column: 27, scope: !5515)
!5548 = !DILocation(line: 880, column: 2, scope: !5515)
!5549 = !DILocation(line: 880, column: 9, scope: !5515)
!5550 = !DILocation(line: 880, column: 14, scope: !5515)
!5551 = !DILocation(line: 882, column: 6, scope: !5528)
!5552 = !DILocation(line: 882, column: 6, scope: !5515)
!5553 = !DILocation(line: 883, column: 3, scope: !5554)
!5554 = distinct !DILexicalBlock(scope: !5528, file: !3, line: 882, column: 20)
!5555 = !DILocation(line: 883, column: 10, scope: !5554)
!5556 = !DILocation(line: 883, column: 18, scope: !5554)
!5557 = !DILocation(line: 883, column: 25, scope: !5554)
!5558 = !DILocation(line: 883, column: 24, scope: !5554)
!5559 = !DILocation(line: 884, column: 52, scope: !5554)
!5560 = !DILocation(line: 884, column: 25, scope: !5554)
!5561 = !DILocation(line: 884, column: 3, scope: !5554)
!5562 = !DILocation(line: 884, column: 10, scope: !5554)
!5563 = !DILocation(line: 884, column: 18, scope: !5554)
!5564 = !DILocation(line: 884, column: 23, scope: !5554)
!5565 = !DILocation(line: 887, column: 9, scope: !5554)
!5566 = !DILocation(line: 887, column: 14, scope: !5554)
!5567 = !DILocation(line: 887, column: 30, scope: !5554)
!5568 = !DILocation(line: 888, column: 9, scope: !5554)
!5569 = !DILocation(line: 887, column: 7, scope: !5554)
!5570 = !DILocation(line: 889, column: 8, scope: !5571)
!5571 = distinct !DILexicalBlock(scope: !5554, file: !3, line: 889, column: 7)
!5572 = !DILocation(line: 889, column: 7, scope: !5554)
!5573 = !DILocation(line: 890, column: 34, scope: !5574)
!5574 = distinct !DILexicalBlock(scope: !5571, file: !3, line: 889, column: 13)
!5575 = !DILocation(line: 890, column: 4, scope: !5574)
!5576 = !DILocation(line: 890, column: 10, scope: !5574)
!5577 = !DILocation(line: 890, column: 32, scope: !5574)
!5578 = !DILocation(line: 891, column: 11, scope: !5574)
!5579 = !DILocation(line: 891, column: 4, scope: !5574)
!5580 = !DILocation(line: 895, column: 15, scope: !5554)
!5581 = !DILocation(line: 895, column: 22, scope: !5554)
!5582 = !DILocation(line: 895, column: 30, scope: !5554)
!5583 = !DILocation(line: 895, column: 13, scope: !5554)
!5584 = !DILocation(line: 896, column: 2, scope: !5554)
!5585 = !DILocation(line: 896, column: 13, scope: !5527)
!5586 = !DILocation(line: 896, column: 19, scope: !5527)
!5587 = !DILocation(line: 896, column: 30, scope: !5527)
!5588 = !DILocation(line: 896, column: 13, scope: !5528)
!5589 = !DILocation(line: 897, column: 19, scope: !5526)
!5590 = !DILocation(line: 897, column: 25, scope: !5526)
!5591 = !DILocation(line: 897, column: 36, scope: !5526)
!5592 = !DILocation(line: 897, column: 42, scope: !5526)
!5593 = !DILocation(line: 340, column: 14, scope: !5520, inlinedAt: !5525)
!5594 = !DILocation(line: 338, column: 2, scope: !5520, inlinedAt: !5525)
!5595 = !{i32 454564}
!5596 = !DILocation(line: 351, column: 9, scope: !5520, inlinedAt: !5525)
!5597 = !DILocation(line: 351, column: 11, scope: !5520, inlinedAt: !5525)
!5598 = !DILocation(line: 897, column: 61, scope: !5526)
!5599 = !DILocation(line: 897, column: 13, scope: !5526)
!5600 = !DILocation(line: 898, column: 2, scope: !5526)
!5601 = !DILocation(line: 900, column: 14, scope: !5602)
!5602 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 900, column: 2)
!5603 = !DILocation(line: 900, column: 12, scope: !5602)
!5604 = !DILocation(line: 900, column: 7, scope: !5602)
!5605 = !DILocation(line: 900, column: 25, scope: !5606)
!5606 = distinct !DILexicalBlock(scope: !5602, file: !3, line: 900, column: 2)
!5607 = !DILocation(line: 900, column: 30, scope: !5606)
!5608 = !DILocation(line: 900, column: 2, scope: !5602)
!5609 = !DILocation(line: 901, column: 30, scope: !5610)
!5610 = distinct !DILexicalBlock(scope: !5606, file: !3, line: 900, column: 44)
!5611 = !DILocation(line: 901, column: 36, scope: !5610)
!5612 = !DILocation(line: 901, column: 59, scope: !5610)
!5613 = !DILocation(line: 901, column: 3, scope: !5610)
!5614 = !DILocation(line: 903, column: 9, scope: !5610)
!5615 = !DILocation(line: 903, column: 14, scope: !5610)
!5616 = !DILocation(line: 903, column: 30, scope: !5610)
!5617 = !DILocation(line: 904, column: 9, scope: !5610)
!5618 = !DILocation(line: 903, column: 7, scope: !5610)
!5619 = !DILocation(line: 905, column: 8, scope: !5620)
!5620 = distinct !DILexicalBlock(scope: !5610, file: !3, line: 905, column: 7)
!5621 = !DILocation(line: 905, column: 7, scope: !5610)
!5622 = !DILocation(line: 906, column: 4, scope: !5620)
!5623 = !DILocation(line: 907, column: 2, scope: !5610)
!5624 = !DILocation(line: 900, column: 40, scope: !5606)
!5625 = !DILocation(line: 900, column: 2, scope: !5606)
!5626 = distinct !{!5626, !5608, !5627}
!5627 = !DILocation(line: 907, column: 2, scope: !5602)
!5628 = !DILocation(line: 909, column: 32, scope: !5515)
!5629 = !DILocation(line: 909, column: 2, scope: !5515)
!5630 = !DILocation(line: 909, column: 8, scope: !5515)
!5631 = !DILocation(line: 909, column: 30, scope: !5515)
!5632 = !DILocation(line: 911, column: 2, scope: !5515)
!5633 = !DILocation(line: 912, column: 1, scope: !5515)
!5634 = distinct !DISubprogram(name: "nand_read_page_op", scope: !3, file: !3, line: 1097, type: !5635, scopeLine: 1099, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5635 = !DISubroutineType(types: !5636)
!5636 = !{!240, !4166, !7, !7, !330, !7}
!5637 = !DILocalVariable(name: "chip", arg: 1, scope: !5634, file: !3, line: 1097, type: !4166)
!5638 = !DILocation(line: 1097, column: 41, scope: !5634)
!5639 = !DILocalVariable(name: "page", arg: 2, scope: !5634, file: !3, line: 1097, type: !7)
!5640 = !DILocation(line: 1097, column: 60, scope: !5634)
!5641 = !DILocalVariable(name: "offset_in_page", arg: 3, scope: !5634, file: !3, line: 1098, type: !7)
!5642 = !DILocation(line: 1098, column: 22, scope: !5634)
!5643 = !DILocalVariable(name: "buf", arg: 4, scope: !5634, file: !3, line: 1098, type: !330)
!5644 = !DILocation(line: 1098, column: 44, scope: !5634)
!5645 = !DILocalVariable(name: "len", arg: 5, scope: !5634, file: !3, line: 1098, type: !7)
!5646 = !DILocation(line: 1098, column: 62, scope: !5634)
!5647 = !DILocalVariable(name: "mtd", scope: !5634, file: !3, line: 1100, type: !2637)
!5648 = !DILocation(line: 1100, column: 19, scope: !5634)
!5649 = !DILocation(line: 1100, column: 37, scope: !5634)
!5650 = !DILocation(line: 1100, column: 25, scope: !5634)
!5651 = !DILocation(line: 1102, column: 6, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5634, file: !3, line: 1102, column: 6)
!5653 = !DILocation(line: 1102, column: 10, scope: !5652)
!5654 = !DILocation(line: 1102, column: 14, scope: !5652)
!5655 = !DILocation(line: 1102, column: 6, scope: !5634)
!5656 = !DILocation(line: 1103, column: 3, scope: !5652)
!5657 = !DILocation(line: 1105, column: 6, scope: !5658)
!5658 = distinct !DILexicalBlock(scope: !5634, file: !3, line: 1105, column: 6)
!5659 = !DILocation(line: 1105, column: 23, scope: !5658)
!5660 = !DILocation(line: 1105, column: 21, scope: !5658)
!5661 = !DILocation(line: 1105, column: 29, scope: !5658)
!5662 = !DILocation(line: 1105, column: 34, scope: !5658)
!5663 = !DILocation(line: 1105, column: 46, scope: !5658)
!5664 = !DILocation(line: 1105, column: 51, scope: !5658)
!5665 = !DILocation(line: 1105, column: 44, scope: !5658)
!5666 = !DILocation(line: 1105, column: 27, scope: !5658)
!5667 = !DILocation(line: 1105, column: 6, scope: !5634)
!5668 = !DILocation(line: 1106, column: 3, scope: !5658)
!5669 = !DILocation(line: 1108, column: 23, scope: !5670)
!5670 = distinct !DILexicalBlock(scope: !5634, file: !3, line: 1108, column: 6)
!5671 = !DILocation(line: 1108, column: 6, scope: !5670)
!5672 = !DILocation(line: 1108, column: 6, scope: !5634)
!5673 = !DILocation(line: 1109, column: 7, scope: !5674)
!5674 = distinct !DILexicalBlock(scope: !5675, file: !3, line: 1109, column: 7)
!5675 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 1108, column: 30)
!5676 = !DILocation(line: 1109, column: 12, scope: !5674)
!5677 = !DILocation(line: 1109, column: 22, scope: !5674)
!5678 = !DILocation(line: 1109, column: 7, scope: !5675)
!5679 = !DILocation(line: 1110, column: 37, scope: !5674)
!5680 = !DILocation(line: 1110, column: 43, scope: !5674)
!5681 = !DILocation(line: 1111, column: 9, scope: !5674)
!5682 = !DILocation(line: 1111, column: 25, scope: !5674)
!5683 = !DILocation(line: 1112, column: 9, scope: !5674)
!5684 = !DILocation(line: 1110, column: 11, scope: !5674)
!5685 = !DILocation(line: 1110, column: 4, scope: !5674)
!5686 = !DILocation(line: 1114, column: 36, scope: !5675)
!5687 = !DILocation(line: 1114, column: 42, scope: !5675)
!5688 = !DILocation(line: 1114, column: 48, scope: !5675)
!5689 = !DILocation(line: 1115, column: 8, scope: !5675)
!5690 = !DILocation(line: 1115, column: 13, scope: !5675)
!5691 = !DILocation(line: 1114, column: 10, scope: !5675)
!5692 = !DILocation(line: 1114, column: 3, scope: !5675)
!5693 = !DILocation(line: 1118, column: 2, scope: !5634)
!5694 = !DILocation(line: 1118, column: 8, scope: !5634)
!5695 = !DILocation(line: 1118, column: 15, scope: !5634)
!5696 = !DILocation(line: 1118, column: 23, scope: !5634)
!5697 = !DILocation(line: 1118, column: 45, scope: !5634)
!5698 = !DILocation(line: 1118, column: 61, scope: !5634)
!5699 = !DILocation(line: 1119, column: 6, scope: !5700)
!5700 = distinct !DILexicalBlock(scope: !5634, file: !3, line: 1119, column: 6)
!5701 = !DILocation(line: 1119, column: 6, scope: !5634)
!5702 = !DILocation(line: 1120, column: 3, scope: !5700)
!5703 = !DILocation(line: 1120, column: 9, scope: !5700)
!5704 = !DILocation(line: 1120, column: 16, scope: !5700)
!5705 = !DILocation(line: 1120, column: 25, scope: !5700)
!5706 = !DILocation(line: 1120, column: 31, scope: !5700)
!5707 = !DILocation(line: 1120, column: 36, scope: !5700)
!5708 = !DILocation(line: 1122, column: 2, scope: !5634)
!5709 = !DILocation(line: 1123, column: 1, scope: !5634)
!5710 = distinct !DISubprogram(name: "nand_lp_exec_read_page_op", scope: !3, file: !3, line: 1047, type: !5635, scopeLine: 1050, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5711 = !DILocalVariable(name: "chip", arg: 1, scope: !5710, file: !3, line: 1047, type: !4166)
!5712 = !DILocation(line: 1047, column: 56, scope: !5710)
!5713 = !DILocalVariable(name: "page", arg: 2, scope: !5710, file: !3, line: 1047, type: !7)
!5714 = !DILocation(line: 1047, column: 75, scope: !5710)
!5715 = !DILocalVariable(name: "offset_in_page", arg: 3, scope: !5710, file: !3, line: 1048, type: !7)
!5716 = !DILocation(line: 1048, column: 23, scope: !5710)
!5717 = !DILocalVariable(name: "buf", arg: 4, scope: !5710, file: !3, line: 1048, type: !330)
!5718 = !DILocation(line: 1048, column: 45, scope: !5710)
!5719 = !DILocalVariable(name: "len", arg: 5, scope: !5710, file: !3, line: 1049, type: !7)
!5720 = !DILocation(line: 1049, column: 23, scope: !5710)
!5721 = !DILocalVariable(name: "sdr", scope: !5710, file: !3, line: 1051, type: !5097)
!5722 = !DILocation(line: 1051, column: 33, scope: !5710)
!5723 = !DILocation(line: 1052, column: 50, scope: !5710)
!5724 = !DILocation(line: 1052, column: 24, scope: !5710)
!5725 = !DILocation(line: 1052, column: 3, scope: !5710)
!5726 = !DILocalVariable(name: "addrs", scope: !5710, file: !3, line: 1053, type: !5727)
!5727 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 40, elements: !5728)
!5728 = !{!5729}
!5729 = !DISubrange(count: 5)
!5730 = !DILocation(line: 1053, column: 5, scope: !5710)
!5731 = !DILocalVariable(name: "instrs", scope: !5710, file: !3, line: 1054, type: !5732)
!5732 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4438, size: 1600, elements: !5728)
!5733 = !DILocation(line: 1054, column: 23, scope: !5710)
!5734 = !DILocation(line: 1054, column: 34, scope: !5710)
!5735 = !DILocation(line: 1055, column: 3, scope: !5710)
!5736 = !DILocation(line: 1056, column: 3, scope: !5710)
!5737 = !DILocation(line: 1057, column: 3, scope: !5710)
!5738 = !DILocation(line: 1057, column: 3, scope: !5739)
!5739 = distinct !DILexicalBlock(scope: !5710, file: !3, line: 1057, column: 3)
!5740 = !DILocation(line: 1058, column: 3, scope: !5710)
!5741 = !DILocation(line: 1058, column: 3, scope: !5742)
!5742 = distinct !DILexicalBlock(scope: !5710, file: !3, line: 1058, column: 3)
!5743 = !DILocation(line: 1058, column: 3, scope: !5744)
!5744 = distinct !DILexicalBlock(scope: !5710, file: !3, line: 1058, column: 3)
!5745 = !DILocation(line: 1060, column: 3, scope: !5710)
!5746 = !DILocalVariable(name: "op", scope: !5710, file: !3, line: 1062, type: !4432)
!5747 = !DILocation(line: 1062, column: 24, scope: !5710)
!5748 = !DILocation(line: 1062, column: 29, scope: !5710)
!5749 = !DILocalVariable(name: "ret", scope: !5710, file: !3, line: 1063, type: !240)
!5750 = !DILocation(line: 1063, column: 6, scope: !5710)
!5751 = !DILocation(line: 1066, column: 7, scope: !5752)
!5752 = distinct !DILexicalBlock(scope: !5710, file: !3, line: 1066, column: 6)
!5753 = !DILocation(line: 1066, column: 6, scope: !5710)
!5754 = !DILocation(line: 1067, column: 6, scope: !5752)
!5755 = !DILocation(line: 1067, column: 13, scope: !5752)
!5756 = !DILocation(line: 1067, column: 3, scope: !5752)
!5757 = !DILocation(line: 1069, column: 32, scope: !5710)
!5758 = !DILocation(line: 1069, column: 38, scope: !5710)
!5759 = !DILocation(line: 1069, column: 45, scope: !5710)
!5760 = !DILocation(line: 1069, column: 8, scope: !5710)
!5761 = !DILocation(line: 1069, column: 6, scope: !5710)
!5762 = !DILocation(line: 1070, column: 6, scope: !5763)
!5763 = distinct !DILexicalBlock(scope: !5710, file: !3, line: 1070, column: 6)
!5764 = !DILocation(line: 1070, column: 10, scope: !5763)
!5765 = !DILocation(line: 1070, column: 6, scope: !5710)
!5766 = !DILocation(line: 1071, column: 10, scope: !5763)
!5767 = !DILocation(line: 1071, column: 3, scope: !5763)
!5768 = !DILocation(line: 1073, column: 13, scope: !5710)
!5769 = !DILocation(line: 1073, column: 2, scope: !5710)
!5770 = !DILocation(line: 1073, column: 11, scope: !5710)
!5771 = !DILocation(line: 1074, column: 13, scope: !5710)
!5772 = !DILocation(line: 1074, column: 18, scope: !5710)
!5773 = !DILocation(line: 1074, column: 2, scope: !5710)
!5774 = !DILocation(line: 1074, column: 11, scope: !5710)
!5775 = !DILocation(line: 1076, column: 6, scope: !5776)
!5776 = distinct !DILexicalBlock(scope: !5710, file: !3, line: 1076, column: 6)
!5777 = !DILocation(line: 1076, column: 12, scope: !5776)
!5778 = !DILocation(line: 1076, column: 20, scope: !5776)
!5779 = !DILocation(line: 1076, column: 6, scope: !5710)
!5780 = !DILocation(line: 1077, column: 14, scope: !5781)
!5781 = distinct !DILexicalBlock(scope: !5776, file: !3, line: 1076, column: 39)
!5782 = !DILocation(line: 1077, column: 19, scope: !5781)
!5783 = !DILocation(line: 1077, column: 3, scope: !5781)
!5784 = !DILocation(line: 1077, column: 12, scope: !5781)
!5785 = !DILocation(line: 1078, column: 3, scope: !5781)
!5786 = !DILocation(line: 1078, column: 13, scope: !5781)
!5787 = !DILocation(line: 1078, column: 17, scope: !5781)
!5788 = !DILocation(line: 1078, column: 22, scope: !5781)
!5789 = !DILocation(line: 1078, column: 28, scope: !5781)
!5790 = !DILocation(line: 1079, column: 2, scope: !5781)
!5791 = !DILocation(line: 1081, column: 22, scope: !5710)
!5792 = !DILocation(line: 1081, column: 9, scope: !5710)
!5793 = !DILocation(line: 1081, column: 2, scope: !5710)
!5794 = !DILocation(line: 1082, column: 1, scope: !5710)
!5795 = distinct !DISubprogram(name: "nand_sp_exec_read_page_op", scope: !3, file: !3, line: 1004, type: !5635, scopeLine: 1007, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5796 = !DILocalVariable(name: "chip", arg: 1, scope: !5795, file: !3, line: 1004, type: !4166)
!5797 = !DILocation(line: 1004, column: 56, scope: !5795)
!5798 = !DILocalVariable(name: "page", arg: 2, scope: !5795, file: !3, line: 1004, type: !7)
!5799 = !DILocation(line: 1004, column: 75, scope: !5795)
!5800 = !DILocalVariable(name: "offset_in_page", arg: 3, scope: !5795, file: !3, line: 1005, type: !7)
!5801 = !DILocation(line: 1005, column: 23, scope: !5795)
!5802 = !DILocalVariable(name: "buf", arg: 4, scope: !5795, file: !3, line: 1005, type: !330)
!5803 = !DILocation(line: 1005, column: 45, scope: !5795)
!5804 = !DILocalVariable(name: "len", arg: 5, scope: !5795, file: !3, line: 1006, type: !7)
!5805 = !DILocation(line: 1006, column: 23, scope: !5795)
!5806 = !DILocalVariable(name: "sdr", scope: !5795, file: !3, line: 1008, type: !5097)
!5807 = !DILocation(line: 1008, column: 33, scope: !5795)
!5808 = !DILocation(line: 1009, column: 50, scope: !5795)
!5809 = !DILocation(line: 1009, column: 24, scope: !5795)
!5810 = !DILocation(line: 1009, column: 3, scope: !5795)
!5811 = !DILocalVariable(name: "mtd", scope: !5795, file: !3, line: 1010, type: !2637)
!5812 = !DILocation(line: 1010, column: 19, scope: !5795)
!5813 = !DILocation(line: 1010, column: 37, scope: !5795)
!5814 = !DILocation(line: 1010, column: 25, scope: !5795)
!5815 = !DILocalVariable(name: "addrs", scope: !5795, file: !3, line: 1011, type: !4233)
!5816 = !DILocation(line: 1011, column: 5, scope: !5795)
!5817 = !DILocalVariable(name: "instrs", scope: !5795, file: !3, line: 1012, type: !5818)
!5818 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4438, size: 1280, elements: !1176)
!5819 = !DILocation(line: 1012, column: 23, scope: !5795)
!5820 = !DILocation(line: 1012, column: 34, scope: !5795)
!5821 = !DILocation(line: 1013, column: 3, scope: !5795)
!5822 = !DILocation(line: 1014, column: 3, scope: !5795)
!5823 = !DILocation(line: 1014, column: 3, scope: !5824)
!5824 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 1014, column: 3)
!5825 = !DILocation(line: 1015, column: 3, scope: !5795)
!5826 = !DILocation(line: 1015, column: 3, scope: !5827)
!5827 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 1015, column: 3)
!5828 = !DILocation(line: 1015, column: 3, scope: !5829)
!5829 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 1015, column: 3)
!5830 = !DILocation(line: 1017, column: 3, scope: !5795)
!5831 = !DILocalVariable(name: "op", scope: !5795, file: !3, line: 1019, type: !4432)
!5832 = !DILocation(line: 1019, column: 24, scope: !5795)
!5833 = !DILocation(line: 1019, column: 29, scope: !5795)
!5834 = !DILocalVariable(name: "ret", scope: !5795, file: !3, line: 1020, type: !240)
!5835 = !DILocation(line: 1020, column: 6, scope: !5795)
!5836 = !DILocation(line: 1023, column: 7, scope: !5837)
!5837 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 1023, column: 6)
!5838 = !DILocation(line: 1023, column: 6, scope: !5795)
!5839 = !DILocation(line: 1024, column: 6, scope: !5837)
!5840 = !DILocation(line: 1024, column: 13, scope: !5837)
!5841 = !DILocation(line: 1024, column: 3, scope: !5837)
!5842 = !DILocation(line: 1026, column: 6, scope: !5843)
!5843 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 1026, column: 6)
!5844 = !DILocation(line: 1026, column: 24, scope: !5843)
!5845 = !DILocation(line: 1026, column: 29, scope: !5843)
!5846 = !DILocation(line: 1026, column: 21, scope: !5843)
!5847 = !DILocation(line: 1026, column: 6, scope: !5795)
!5848 = !DILocation(line: 1027, column: 3, scope: !5843)
!5849 = !DILocation(line: 1027, column: 13, scope: !5843)
!5850 = !DILocation(line: 1027, column: 17, scope: !5843)
!5851 = !DILocation(line: 1027, column: 21, scope: !5843)
!5852 = !DILocation(line: 1027, column: 28, scope: !5843)
!5853 = !DILocation(line: 1028, column: 11, scope: !5854)
!5854 = distinct !DILexicalBlock(scope: !5843, file: !3, line: 1028, column: 11)
!5855 = !DILocation(line: 1028, column: 26, scope: !5854)
!5856 = !DILocation(line: 1028, column: 33, scope: !5854)
!5857 = !DILocation(line: 1029, column: 6, scope: !5854)
!5858 = !DILocation(line: 1029, column: 12, scope: !5854)
!5859 = !DILocation(line: 1029, column: 20, scope: !5854)
!5860 = !DILocation(line: 1028, column: 11, scope: !5843)
!5861 = !DILocation(line: 1030, column: 3, scope: !5854)
!5862 = !DILocation(line: 1030, column: 13, scope: !5854)
!5863 = !DILocation(line: 1030, column: 17, scope: !5854)
!5864 = !DILocation(line: 1030, column: 21, scope: !5854)
!5865 = !DILocation(line: 1030, column: 28, scope: !5854)
!5866 = !DILocation(line: 1032, column: 32, scope: !5795)
!5867 = !DILocation(line: 1032, column: 38, scope: !5795)
!5868 = !DILocation(line: 1032, column: 45, scope: !5795)
!5869 = !DILocation(line: 1032, column: 8, scope: !5795)
!5870 = !DILocation(line: 1032, column: 6, scope: !5795)
!5871 = !DILocation(line: 1033, column: 6, scope: !5872)
!5872 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 1033, column: 6)
!5873 = !DILocation(line: 1033, column: 10, scope: !5872)
!5874 = !DILocation(line: 1033, column: 6, scope: !5795)
!5875 = !DILocation(line: 1034, column: 10, scope: !5872)
!5876 = !DILocation(line: 1034, column: 3, scope: !5872)
!5877 = !DILocation(line: 1036, column: 13, scope: !5795)
!5878 = !DILocation(line: 1036, column: 2, scope: !5795)
!5879 = !DILocation(line: 1036, column: 11, scope: !5795)
!5880 = !DILocation(line: 1037, column: 13, scope: !5795)
!5881 = !DILocation(line: 1037, column: 18, scope: !5795)
!5882 = !DILocation(line: 1037, column: 2, scope: !5795)
!5883 = !DILocation(line: 1037, column: 11, scope: !5795)
!5884 = !DILocation(line: 1039, column: 6, scope: !5885)
!5885 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 1039, column: 6)
!5886 = !DILocation(line: 1039, column: 12, scope: !5885)
!5887 = !DILocation(line: 1039, column: 20, scope: !5885)
!5888 = !DILocation(line: 1039, column: 6, scope: !5795)
!5889 = !DILocation(line: 1040, column: 14, scope: !5890)
!5890 = distinct !DILexicalBlock(scope: !5885, file: !3, line: 1039, column: 39)
!5891 = !DILocation(line: 1040, column: 19, scope: !5890)
!5892 = !DILocation(line: 1040, column: 3, scope: !5890)
!5893 = !DILocation(line: 1040, column: 12, scope: !5890)
!5894 = !DILocation(line: 1041, column: 3, scope: !5890)
!5895 = !DILocation(line: 1041, column: 13, scope: !5890)
!5896 = !DILocation(line: 1041, column: 17, scope: !5890)
!5897 = !DILocation(line: 1041, column: 22, scope: !5890)
!5898 = !DILocation(line: 1041, column: 28, scope: !5890)
!5899 = !DILocation(line: 1042, column: 2, scope: !5890)
!5900 = !DILocation(line: 1044, column: 22, scope: !5795)
!5901 = !DILocation(line: 1044, column: 9, scope: !5795)
!5902 = !DILocation(line: 1044, column: 2, scope: !5795)
!5903 = !DILocation(line: 1045, column: 1, scope: !5795)
!5904 = distinct !DISubprogram(name: "nand_read_param_page_op", scope: !3, file: !3, line: 1138, type: !5905, scopeLine: 1140, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5905 = !DISubroutineType(types: !5906)
!5906 = !{!240, !4166, !1372, !330, !7}
!5907 = !DILocalVariable(name: "chip", arg: 1, scope: !5904, file: !3, line: 1138, type: !4166)
!5908 = !DILocation(line: 1138, column: 47, scope: !5904)
!5909 = !DILocalVariable(name: "page", arg: 2, scope: !5904, file: !3, line: 1138, type: !1372)
!5910 = !DILocation(line: 1138, column: 56, scope: !5904)
!5911 = !DILocalVariable(name: "buf", arg: 3, scope: !5904, file: !3, line: 1138, type: !330)
!5912 = !DILocation(line: 1138, column: 68, scope: !5904)
!5913 = !DILocalVariable(name: "len", arg: 4, scope: !5904, file: !3, line: 1139, type: !7)
!5914 = !DILocation(line: 1139, column: 21, scope: !5904)
!5915 = !DILocalVariable(name: "i", scope: !5904, file: !3, line: 1141, type: !7)
!5916 = !DILocation(line: 1141, column: 15, scope: !5904)
!5917 = !DILocalVariable(name: "p", scope: !5904, file: !3, line: 1142, type: !4051)
!5918 = !DILocation(line: 1142, column: 6, scope: !5904)
!5919 = !DILocation(line: 1142, column: 10, scope: !5904)
!5920 = !DILocation(line: 1144, column: 6, scope: !5921)
!5921 = distinct !DILexicalBlock(scope: !5904, file: !3, line: 1144, column: 6)
!5922 = !DILocation(line: 1144, column: 10, scope: !5921)
!5923 = !DILocation(line: 1144, column: 14, scope: !5921)
!5924 = !DILocation(line: 1144, column: 6, scope: !5904)
!5925 = !DILocation(line: 1145, column: 3, scope: !5921)
!5926 = !DILocation(line: 1147, column: 23, scope: !5927)
!5927 = distinct !DILexicalBlock(scope: !5904, file: !3, line: 1147, column: 6)
!5928 = !DILocation(line: 1147, column: 6, scope: !5927)
!5929 = !DILocation(line: 1147, column: 6, scope: !5904)
!5930 = !DILocalVariable(name: "sdr", scope: !5931, file: !3, line: 1148, type: !5097)
!5931 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 1147, column: 30)
!5932 = !DILocation(line: 1148, column: 34, scope: !5931)
!5933 = !DILocation(line: 1149, column: 51, scope: !5931)
!5934 = !DILocation(line: 1149, column: 25, scope: !5931)
!5935 = !DILocation(line: 1149, column: 4, scope: !5931)
!5936 = !DILocalVariable(name: "instrs", scope: !5931, file: !3, line: 1150, type: !5818)
!5937 = !DILocation(line: 1150, column: 24, scope: !5931)
!5938 = !DILocation(line: 1150, column: 35, scope: !5931)
!5939 = !DILocation(line: 1151, column: 4, scope: !5931)
!5940 = !DILocation(line: 1152, column: 4, scope: !5931)
!5941 = !DILocation(line: 1152, column: 4, scope: !5942)
!5942 = distinct !DILexicalBlock(scope: !5931, file: !3, line: 1152, column: 4)
!5943 = !DILocation(line: 1153, column: 4, scope: !5931)
!5944 = !DILocation(line: 1153, column: 4, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5931, file: !3, line: 1153, column: 4)
!5946 = !DILocation(line: 1153, column: 4, scope: !5947)
!5947 = distinct !DILexicalBlock(scope: !5931, file: !3, line: 1153, column: 4)
!5948 = !DILocation(line: 1155, column: 4, scope: !5931)
!5949 = !DILocalVariable(name: "op", scope: !5931, file: !3, line: 1157, type: !4432)
!5950 = !DILocation(line: 1157, column: 25, scope: !5931)
!5951 = !DILocation(line: 1157, column: 30, scope: !5931)
!5952 = !DILocation(line: 1160, column: 8, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5931, file: !3, line: 1160, column: 7)
!5954 = !DILocation(line: 1160, column: 7, scope: !5931)
!5955 = !DILocation(line: 1161, column: 7, scope: !5953)
!5956 = !DILocation(line: 1161, column: 14, scope: !5953)
!5957 = !DILocation(line: 1161, column: 4, scope: !5953)
!5958 = !DILocation(line: 1163, column: 23, scope: !5931)
!5959 = !DILocation(line: 1163, column: 10, scope: !5931)
!5960 = !DILocation(line: 1163, column: 3, scope: !5931)
!5961 = !DILocation(line: 1166, column: 2, scope: !5904)
!5962 = !DILocation(line: 1166, column: 8, scope: !5904)
!5963 = !DILocation(line: 1166, column: 15, scope: !5904)
!5964 = !DILocation(line: 1166, column: 23, scope: !5904)
!5965 = !DILocation(line: 1166, column: 45, scope: !5904)
!5966 = !DILocation(line: 1167, column: 9, scope: !5967)
!5967 = distinct !DILexicalBlock(scope: !5904, file: !3, line: 1167, column: 2)
!5968 = !DILocation(line: 1167, column: 7, scope: !5967)
!5969 = !DILocation(line: 1167, column: 14, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5967, file: !3, line: 1167, column: 2)
!5971 = !DILocation(line: 1167, column: 18, scope: !5970)
!5972 = !DILocation(line: 1167, column: 16, scope: !5970)
!5973 = !DILocation(line: 1167, column: 2, scope: !5967)
!5974 = !DILocation(line: 1168, column: 10, scope: !5970)
!5975 = !DILocation(line: 1168, column: 16, scope: !5970)
!5976 = !DILocation(line: 1168, column: 23, scope: !5970)
!5977 = !DILocation(line: 1168, column: 33, scope: !5970)
!5978 = !DILocation(line: 1168, column: 3, scope: !5970)
!5979 = !DILocation(line: 1168, column: 5, scope: !5970)
!5980 = !DILocation(line: 1168, column: 8, scope: !5970)
!5981 = !DILocation(line: 1167, column: 24, scope: !5970)
!5982 = !DILocation(line: 1167, column: 2, scope: !5970)
!5983 = distinct !{!5983, !5973, !5984}
!5984 = !DILocation(line: 1168, column: 37, scope: !5967)
!5985 = !DILocation(line: 1170, column: 2, scope: !5904)
!5986 = !DILocation(line: 1171, column: 1, scope: !5904)
!5987 = distinct !DISubprogram(name: "nand_exec_op", scope: !4207, file: !4207, line: 128, type: !5988, scopeLine: 130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!5988 = !DISubroutineType(types: !5989)
!5989 = !{!240, !4166, !4430}
!5990 = !DILocalVariable(name: "chip", arg: 1, scope: !5987, file: !4207, line: 128, type: !4166)
!5991 = !DILocation(line: 128, column: 50, scope: !5987)
!5992 = !DILocalVariable(name: "op", arg: 2, scope: !5987, file: !4207, line: 129, type: !4430)
!5993 = !DILocation(line: 129, column: 40, scope: !5987)
!5994 = !DILocation(line: 131, column: 24, scope: !5995)
!5995 = distinct !DILexicalBlock(scope: !5987, file: !4207, line: 131, column: 6)
!5996 = !DILocation(line: 131, column: 7, scope: !5995)
!5997 = !DILocation(line: 131, column: 6, scope: !5987)
!5998 = !DILocation(line: 132, column: 3, scope: !5995)
!5999 = !DILocalVariable(name: "__ret_warn_on", scope: !6000, file: !4207, line: 134, type: !240)
!6000 = distinct !DILexicalBlock(scope: !6001, file: !4207, line: 134, column: 6)
!6001 = distinct !DILexicalBlock(scope: !5987, file: !4207, line: 134, column: 6)
!6002 = !DILocation(line: 134, column: 6, scope: !6000)
!6003 = !DILocation(line: 134, column: 6, scope: !6004)
!6004 = distinct !DILexicalBlock(scope: !6000, file: !4207, line: 134, column: 6)
!6005 = !DILocation(line: 134, column: 6, scope: !6006)
!6006 = distinct !DILexicalBlock(scope: !6004, file: !4207, line: 134, column: 6)
!6007 = !DILocation(line: 134, column: 6, scope: !6008)
!6008 = distinct !DILexicalBlock(scope: !6006, file: !4207, line: 134, column: 6)
!6009 = !DILocation(line: 134, column: 6, scope: !6010)
!6010 = distinct !DILexicalBlock(scope: !6006, file: !4207, line: 134, column: 6)
!6011 = !{i32 -2141658759, i32 -2141658730, i32 -2141658684, i32 -2141658626, i32 -2141658572, i32 -2141658518, i32 -2141658463, i32 -2141658432}
!6012 = !DILocation(line: 134, column: 6, scope: !6013)
!6013 = distinct !DILexicalBlock(scope: !6006, file: !4207, line: 134, column: 6)
!6014 = !{i32 -2141658018, i32 -2141658011, i32 -2141657959, i32 -2141657928, i32 -2141657898}
!6015 = !DILocation(line: 134, column: 6, scope: !6016)
!6016 = distinct !DILexicalBlock(scope: !6006, file: !4207, line: 134, column: 6)
!6017 = !DILocation(line: 134, column: 6, scope: !6001)
!6018 = !DILocation(line: 134, column: 6, scope: !5987)
!6019 = !DILocation(line: 135, column: 3, scope: !6001)
!6020 = !DILocation(line: 137, column: 9, scope: !5987)
!6021 = !DILocation(line: 137, column: 15, scope: !5987)
!6022 = !DILocation(line: 137, column: 27, scope: !5987)
!6023 = !DILocation(line: 137, column: 32, scope: !5987)
!6024 = !DILocation(line: 137, column: 40, scope: !5987)
!6025 = !DILocation(line: 137, column: 46, scope: !5987)
!6026 = !DILocation(line: 137, column: 2, scope: !5987)
!6027 = !DILocation(line: 138, column: 1, scope: !5987)
!6028 = distinct !DISubprogram(name: "nand_change_read_column_op", scope: !3, file: !3, line: 1186, type: !6029, scopeLine: 1189, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6029 = !DISubroutineType(types: !6030)
!6030 = !{!240, !4166, !7, !330, !7, !180}
!6031 = !DILocalVariable(name: "chip", arg: 1, scope: !6028, file: !3, line: 1186, type: !4166)
!6032 = !DILocation(line: 1186, column: 50, scope: !6028)
!6033 = !DILocalVariable(name: "offset_in_page", arg: 2, scope: !6028, file: !3, line: 1187, type: !7)
!6034 = !DILocation(line: 1187, column: 24, scope: !6028)
!6035 = !DILocalVariable(name: "buf", arg: 3, scope: !6028, file: !3, line: 1187, type: !330)
!6036 = !DILocation(line: 1187, column: 46, scope: !6028)
!6037 = !DILocalVariable(name: "len", arg: 4, scope: !6028, file: !3, line: 1188, type: !7)
!6038 = !DILocation(line: 1188, column: 24, scope: !6028)
!6039 = !DILocalVariable(name: "force_8bit", arg: 5, scope: !6028, file: !3, line: 1188, type: !180)
!6040 = !DILocation(line: 1188, column: 34, scope: !6028)
!6041 = !DILocalVariable(name: "mtd", scope: !6028, file: !3, line: 1190, type: !2637)
!6042 = !DILocation(line: 1190, column: 19, scope: !6028)
!6043 = !DILocation(line: 1190, column: 37, scope: !6028)
!6044 = !DILocation(line: 1190, column: 25, scope: !6028)
!6045 = !DILocation(line: 1192, column: 6, scope: !6046)
!6046 = distinct !DILexicalBlock(scope: !6028, file: !3, line: 1192, column: 6)
!6047 = !DILocation(line: 1192, column: 10, scope: !6046)
!6048 = !DILocation(line: 1192, column: 14, scope: !6046)
!6049 = !DILocation(line: 1192, column: 6, scope: !6028)
!6050 = !DILocation(line: 1193, column: 3, scope: !6046)
!6051 = !DILocation(line: 1195, column: 6, scope: !6052)
!6052 = distinct !DILexicalBlock(scope: !6028, file: !3, line: 1195, column: 6)
!6053 = !DILocation(line: 1195, column: 23, scope: !6052)
!6054 = !DILocation(line: 1195, column: 21, scope: !6052)
!6055 = !DILocation(line: 1195, column: 29, scope: !6052)
!6056 = !DILocation(line: 1195, column: 34, scope: !6052)
!6057 = !DILocation(line: 1195, column: 46, scope: !6052)
!6058 = !DILocation(line: 1195, column: 51, scope: !6052)
!6059 = !DILocation(line: 1195, column: 44, scope: !6052)
!6060 = !DILocation(line: 1195, column: 27, scope: !6052)
!6061 = !DILocation(line: 1195, column: 6, scope: !6028)
!6062 = !DILocation(line: 1196, column: 3, scope: !6052)
!6063 = !DILocation(line: 1199, column: 6, scope: !6064)
!6064 = distinct !DILexicalBlock(scope: !6028, file: !3, line: 1199, column: 6)
!6065 = !DILocation(line: 1199, column: 11, scope: !6064)
!6066 = !DILocation(line: 1199, column: 21, scope: !6064)
!6067 = !DILocation(line: 1199, column: 6, scope: !6028)
!6068 = !DILocation(line: 1200, column: 3, scope: !6064)
!6069 = !DILocation(line: 1202, column: 23, scope: !6070)
!6070 = distinct !DILexicalBlock(scope: !6028, file: !3, line: 1202, column: 6)
!6071 = !DILocation(line: 1202, column: 6, scope: !6070)
!6072 = !DILocation(line: 1202, column: 6, scope: !6028)
!6073 = !DILocalVariable(name: "sdr", scope: !6074, file: !3, line: 1203, type: !5097)
!6074 = distinct !DILexicalBlock(scope: !6070, file: !3, line: 1202, column: 30)
!6075 = !DILocation(line: 1203, column: 34, scope: !6074)
!6076 = !DILocation(line: 1204, column: 51, scope: !6074)
!6077 = !DILocation(line: 1204, column: 25, scope: !6074)
!6078 = !DILocation(line: 1204, column: 4, scope: !6074)
!6079 = !DILocalVariable(name: "addrs", scope: !6074, file: !3, line: 1205, type: !4239)
!6080 = !DILocation(line: 1205, column: 6, scope: !6074)
!6081 = !DILocalVariable(name: "instrs", scope: !6074, file: !3, line: 1206, type: !5818)
!6082 = !DILocation(line: 1206, column: 24, scope: !6074)
!6083 = !DILocation(line: 1206, column: 35, scope: !6074)
!6084 = !DILocation(line: 1207, column: 4, scope: !6074)
!6085 = !DILocation(line: 1208, column: 4, scope: !6074)
!6086 = !DILocation(line: 1209, column: 4, scope: !6074)
!6087 = !DILocation(line: 1209, column: 4, scope: !6088)
!6088 = distinct !DILexicalBlock(scope: !6074, file: !3, line: 1209, column: 4)
!6089 = !DILocation(line: 1211, column: 4, scope: !6074)
!6090 = !DILocalVariable(name: "op", scope: !6074, file: !3, line: 1213, type: !4432)
!6091 = !DILocation(line: 1213, column: 25, scope: !6074)
!6092 = !DILocation(line: 1213, column: 30, scope: !6074)
!6093 = !DILocalVariable(name: "ret", scope: !6074, file: !3, line: 1214, type: !240)
!6094 = !DILocation(line: 1214, column: 7, scope: !6074)
!6095 = !DILocation(line: 1216, column: 33, scope: !6074)
!6096 = !DILocation(line: 1216, column: 39, scope: !6074)
!6097 = !DILocation(line: 1216, column: 46, scope: !6074)
!6098 = !DILocation(line: 1216, column: 9, scope: !6074)
!6099 = !DILocation(line: 1216, column: 7, scope: !6074)
!6100 = !DILocation(line: 1217, column: 7, scope: !6101)
!6101 = distinct !DILexicalBlock(scope: !6074, file: !3, line: 1217, column: 7)
!6102 = !DILocation(line: 1217, column: 11, scope: !6101)
!6103 = !DILocation(line: 1217, column: 7, scope: !6074)
!6104 = !DILocation(line: 1218, column: 11, scope: !6101)
!6105 = !DILocation(line: 1218, column: 4, scope: !6101)
!6106 = !DILocation(line: 1221, column: 8, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !6074, file: !3, line: 1221, column: 7)
!6108 = !DILocation(line: 1221, column: 7, scope: !6074)
!6109 = !DILocation(line: 1222, column: 7, scope: !6107)
!6110 = !DILocation(line: 1222, column: 14, scope: !6107)
!6111 = !DILocation(line: 1222, column: 4, scope: !6107)
!6112 = !DILocation(line: 1224, column: 35, scope: !6074)
!6113 = !DILocation(line: 1224, column: 3, scope: !6074)
!6114 = !DILocation(line: 1224, column: 13, scope: !6074)
!6115 = !DILocation(line: 1224, column: 17, scope: !6074)
!6116 = !DILocation(line: 1224, column: 22, scope: !6074)
!6117 = !DILocation(line: 1224, column: 33, scope: !6074)
!6118 = !DILocation(line: 1226, column: 23, scope: !6074)
!6119 = !DILocation(line: 1226, column: 10, scope: !6074)
!6120 = !DILocation(line: 1226, column: 3, scope: !6074)
!6121 = !DILocation(line: 1229, column: 2, scope: !6028)
!6122 = !DILocation(line: 1229, column: 8, scope: !6028)
!6123 = !DILocation(line: 1229, column: 15, scope: !6028)
!6124 = !DILocation(line: 1229, column: 23, scope: !6028)
!6125 = !DILocation(line: 1229, column: 46, scope: !6028)
!6126 = !DILocation(line: 1230, column: 6, scope: !6127)
!6127 = distinct !DILexicalBlock(scope: !6028, file: !3, line: 1230, column: 6)
!6128 = !DILocation(line: 1230, column: 6, scope: !6028)
!6129 = !DILocation(line: 1231, column: 3, scope: !6127)
!6130 = !DILocation(line: 1231, column: 9, scope: !6127)
!6131 = !DILocation(line: 1231, column: 16, scope: !6127)
!6132 = !DILocation(line: 1231, column: 25, scope: !6127)
!6133 = !DILocation(line: 1231, column: 31, scope: !6127)
!6134 = !DILocation(line: 1231, column: 36, scope: !6127)
!6135 = !DILocation(line: 1233, column: 2, scope: !6028)
!6136 = !DILocation(line: 1234, column: 1, scope: !6028)
!6137 = distinct !DISubprogram(name: "nand_fill_column_cycles", scope: !3, file: !3, line: 962, type: !6138, scopeLine: 964, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6138 = !DISubroutineType(types: !6139)
!6139 = !{!240, !4166, !4051, !7}
!6140 = !DILocalVariable(name: "chip", arg: 1, scope: !6137, file: !3, line: 962, type: !4166)
!6141 = !DILocation(line: 962, column: 54, scope: !6137)
!6142 = !DILocalVariable(name: "addrs", arg: 2, scope: !6137, file: !3, line: 962, type: !4051)
!6143 = !DILocation(line: 962, column: 64, scope: !6137)
!6144 = !DILocalVariable(name: "offset_in_page", arg: 3, scope: !6137, file: !3, line: 963, type: !7)
!6145 = !DILocation(line: 963, column: 21, scope: !6137)
!6146 = !DILocalVariable(name: "mtd", scope: !6137, file: !3, line: 965, type: !2637)
!6147 = !DILocation(line: 965, column: 19, scope: !6137)
!6148 = !DILocation(line: 965, column: 37, scope: !6137)
!6149 = !DILocation(line: 965, column: 25, scope: !6137)
!6150 = !DILocation(line: 968, column: 6, scope: !6151)
!6151 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 968, column: 6)
!6152 = !DILocation(line: 968, column: 23, scope: !6151)
!6153 = !DILocation(line: 968, column: 28, scope: !6151)
!6154 = !DILocation(line: 968, column: 40, scope: !6151)
!6155 = !DILocation(line: 968, column: 45, scope: !6151)
!6156 = !DILocation(line: 968, column: 38, scope: !6151)
!6157 = !DILocation(line: 968, column: 21, scope: !6151)
!6158 = !DILocation(line: 968, column: 6, scope: !6137)
!6159 = !DILocation(line: 969, column: 3, scope: !6151)
!6160 = !DILocation(line: 976, column: 6, scope: !6161)
!6161 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 976, column: 6)
!6162 = !DILocation(line: 976, column: 11, scope: !6161)
!6163 = !DILocation(line: 976, column: 21, scope: !6161)
!6164 = !DILocation(line: 976, column: 28, scope: !6161)
!6165 = !DILocation(line: 976, column: 31, scope: !6161)
!6166 = !DILocation(line: 976, column: 49, scope: !6161)
!6167 = !DILocation(line: 976, column: 54, scope: !6161)
!6168 = !DILocation(line: 976, column: 46, scope: !6161)
!6169 = !DILocation(line: 976, column: 6, scope: !6137)
!6170 = !DILocation(line: 977, column: 21, scope: !6161)
!6171 = !DILocation(line: 977, column: 26, scope: !6161)
!6172 = !DILocation(line: 977, column: 18, scope: !6161)
!6173 = !DILocation(line: 977, column: 3, scope: !6161)
!6174 = !DILocation(line: 983, column: 6, scope: !6175)
!6175 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 983, column: 6)
!6176 = !DILocation(line: 983, column: 12, scope: !6175)
!6177 = !DILocation(line: 983, column: 20, scope: !6175)
!6178 = !DILocation(line: 983, column: 6, scope: !6137)
!6179 = !DILocalVariable(name: "__ret_warn_on", scope: !6180, file: !3, line: 984, type: !240)
!6180 = distinct !DILexicalBlock(scope: !6181, file: !3, line: 984, column: 7)
!6181 = distinct !DILexicalBlock(scope: !6182, file: !3, line: 984, column: 7)
!6182 = distinct !DILexicalBlock(scope: !6175, file: !3, line: 983, column: 40)
!6183 = !DILocation(line: 984, column: 7, scope: !6180)
!6184 = !DILocation(line: 984, column: 7, scope: !6185)
!6185 = distinct !DILexicalBlock(scope: !6180, file: !3, line: 984, column: 7)
!6186 = !DILocation(line: 984, column: 7, scope: !6187)
!6187 = distinct !DILexicalBlock(scope: !6185, file: !3, line: 984, column: 7)
!6188 = !DILocation(line: 984, column: 7, scope: !6189)
!6189 = distinct !DILexicalBlock(scope: !6187, file: !3, line: 984, column: 7)
!6190 = !DILocation(line: 984, column: 7, scope: !6191)
!6191 = distinct !DILexicalBlock(scope: !6187, file: !3, line: 984, column: 7)
!6192 = !{i32 -2141632937, i32 -2141632908, i32 -2141632862, i32 -2141632804, i32 -2141632750, i32 -2141632696, i32 -2141632641, i32 -2141632610}
!6193 = !DILocation(line: 984, column: 7, scope: !6194)
!6194 = distinct !DILexicalBlock(scope: !6187, file: !3, line: 984, column: 7)
!6195 = !{i32 -2141632196, i32 -2141632189, i32 -2141632137, i32 -2141632106, i32 -2141632076}
!6196 = !DILocation(line: 984, column: 7, scope: !6197)
!6197 = distinct !DILexicalBlock(scope: !6187, file: !3, line: 984, column: 7)
!6198 = !DILocation(line: 984, column: 7, scope: !6181)
!6199 = !DILocation(line: 984, column: 7, scope: !6182)
!6200 = !DILocation(line: 985, column: 4, scope: !6181)
!6201 = !DILocation(line: 987, column: 18, scope: !6182)
!6202 = !DILocation(line: 988, column: 2, scope: !6182)
!6203 = !DILocation(line: 990, column: 13, scope: !6137)
!6204 = !DILocation(line: 990, column: 2, scope: !6137)
!6205 = !DILocation(line: 990, column: 11, scope: !6137)
!6206 = !DILocation(line: 996, column: 6, scope: !6207)
!6207 = distinct !DILexicalBlock(scope: !6137, file: !3, line: 996, column: 6)
!6208 = !DILocation(line: 996, column: 11, scope: !6207)
!6209 = !DILocation(line: 996, column: 21, scope: !6207)
!6210 = !DILocation(line: 996, column: 6, scope: !6137)
!6211 = !DILocation(line: 997, column: 3, scope: !6207)
!6212 = !DILocation(line: 999, column: 13, scope: !6137)
!6213 = !DILocation(line: 999, column: 28, scope: !6137)
!6214 = !DILocation(line: 999, column: 2, scope: !6137)
!6215 = !DILocation(line: 999, column: 11, scope: !6137)
!6216 = !DILocation(line: 1001, column: 2, scope: !6137)
!6217 = !DILocation(line: 1002, column: 1, scope: !6137)
!6218 = distinct !DISubprogram(name: "nand_read_oob_op", scope: !3, file: !3, line: 1250, type: !5635, scopeLine: 1252, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6219 = !DILocalVariable(name: "chip", arg: 1, scope: !6218, file: !3, line: 1250, type: !4166)
!6220 = !DILocation(line: 1250, column: 40, scope: !6218)
!6221 = !DILocalVariable(name: "page", arg: 2, scope: !6218, file: !3, line: 1250, type: !7)
!6222 = !DILocation(line: 1250, column: 59, scope: !6218)
!6223 = !DILocalVariable(name: "offset_in_oob", arg: 3, scope: !6218, file: !3, line: 1251, type: !7)
!6224 = !DILocation(line: 1251, column: 21, scope: !6218)
!6225 = !DILocalVariable(name: "buf", arg: 4, scope: !6218, file: !3, line: 1251, type: !330)
!6226 = !DILocation(line: 1251, column: 42, scope: !6218)
!6227 = !DILocalVariable(name: "len", arg: 5, scope: !6218, file: !3, line: 1251, type: !7)
!6228 = !DILocation(line: 1251, column: 60, scope: !6218)
!6229 = !DILocalVariable(name: "mtd", scope: !6218, file: !3, line: 1253, type: !2637)
!6230 = !DILocation(line: 1253, column: 19, scope: !6218)
!6231 = !DILocation(line: 1253, column: 37, scope: !6218)
!6232 = !DILocation(line: 1253, column: 25, scope: !6218)
!6233 = !DILocation(line: 1255, column: 6, scope: !6234)
!6234 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 1255, column: 6)
!6235 = !DILocation(line: 1255, column: 10, scope: !6234)
!6236 = !DILocation(line: 1255, column: 14, scope: !6234)
!6237 = !DILocation(line: 1255, column: 6, scope: !6218)
!6238 = !DILocation(line: 1256, column: 3, scope: !6234)
!6239 = !DILocation(line: 1258, column: 6, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 1258, column: 6)
!6241 = !DILocation(line: 1258, column: 22, scope: !6240)
!6242 = !DILocation(line: 1258, column: 20, scope: !6240)
!6243 = !DILocation(line: 1258, column: 28, scope: !6240)
!6244 = !DILocation(line: 1258, column: 33, scope: !6240)
!6245 = !DILocation(line: 1258, column: 26, scope: !6240)
!6246 = !DILocation(line: 1258, column: 6, scope: !6218)
!6247 = !DILocation(line: 1259, column: 3, scope: !6240)
!6248 = !DILocation(line: 1261, column: 23, scope: !6249)
!6249 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 1261, column: 6)
!6250 = !DILocation(line: 1261, column: 6, scope: !6249)
!6251 = !DILocation(line: 1261, column: 6, scope: !6218)
!6252 = !DILocation(line: 1262, column: 28, scope: !6249)
!6253 = !DILocation(line: 1262, column: 34, scope: !6249)
!6254 = !DILocation(line: 1263, column: 7, scope: !6249)
!6255 = !DILocation(line: 1263, column: 12, scope: !6249)
!6256 = !DILocation(line: 1263, column: 24, scope: !6249)
!6257 = !DILocation(line: 1263, column: 22, scope: !6249)
!6258 = !DILocation(line: 1264, column: 7, scope: !6249)
!6259 = !DILocation(line: 1264, column: 12, scope: !6249)
!6260 = !DILocation(line: 1262, column: 10, scope: !6249)
!6261 = !DILocation(line: 1262, column: 3, scope: !6249)
!6262 = !DILocation(line: 1266, column: 2, scope: !6218)
!6263 = !DILocation(line: 1266, column: 8, scope: !6218)
!6264 = !DILocation(line: 1266, column: 15, scope: !6218)
!6265 = !DILocation(line: 1266, column: 23, scope: !6218)
!6266 = !DILocation(line: 1266, column: 47, scope: !6218)
!6267 = !DILocation(line: 1266, column: 62, scope: !6218)
!6268 = !DILocation(line: 1267, column: 6, scope: !6269)
!6269 = distinct !DILexicalBlock(scope: !6218, file: !3, line: 1267, column: 6)
!6270 = !DILocation(line: 1267, column: 6, scope: !6218)
!6271 = !DILocation(line: 1268, column: 3, scope: !6269)
!6272 = !DILocation(line: 1268, column: 9, scope: !6269)
!6273 = !DILocation(line: 1268, column: 16, scope: !6269)
!6274 = !DILocation(line: 1268, column: 25, scope: !6269)
!6275 = !DILocation(line: 1268, column: 31, scope: !6269)
!6276 = !DILocation(line: 1268, column: 36, scope: !6269)
!6277 = !DILocation(line: 1270, column: 2, scope: !6218)
!6278 = !DILocation(line: 1271, column: 1, scope: !6218)
!6279 = distinct !DISubprogram(name: "nand_prog_page_begin_op", scope: !3, file: !3, line: 1362, type: !6280, scopeLine: 1365, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6280 = !DISubroutineType(types: !6281)
!6281 = !{!240, !4166, !7, !7, !189, !7}
!6282 = !DILocalVariable(name: "chip", arg: 1, scope: !6279, file: !3, line: 1362, type: !4166)
!6283 = !DILocation(line: 1362, column: 47, scope: !6279)
!6284 = !DILocalVariable(name: "page", arg: 2, scope: !6279, file: !3, line: 1362, type: !7)
!6285 = !DILocation(line: 1362, column: 66, scope: !6279)
!6286 = !DILocalVariable(name: "offset_in_page", arg: 3, scope: !6279, file: !3, line: 1363, type: !7)
!6287 = !DILocation(line: 1363, column: 21, scope: !6279)
!6288 = !DILocalVariable(name: "buf", arg: 4, scope: !6279, file: !3, line: 1363, type: !189)
!6289 = !DILocation(line: 1363, column: 49, scope: !6279)
!6290 = !DILocalVariable(name: "len", arg: 5, scope: !6279, file: !3, line: 1364, type: !7)
!6291 = !DILocation(line: 1364, column: 21, scope: !6279)
!6292 = !DILocalVariable(name: "mtd", scope: !6279, file: !3, line: 1366, type: !2637)
!6293 = !DILocation(line: 1366, column: 19, scope: !6279)
!6294 = !DILocation(line: 1366, column: 37, scope: !6279)
!6295 = !DILocation(line: 1366, column: 25, scope: !6279)
!6296 = !DILocation(line: 1368, column: 6, scope: !6297)
!6297 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 1368, column: 6)
!6298 = !DILocation(line: 1368, column: 10, scope: !6297)
!6299 = !DILocation(line: 1368, column: 14, scope: !6297)
!6300 = !DILocation(line: 1368, column: 6, scope: !6279)
!6301 = !DILocation(line: 1369, column: 3, scope: !6297)
!6302 = !DILocation(line: 1371, column: 6, scope: !6303)
!6303 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 1371, column: 6)
!6304 = !DILocation(line: 1371, column: 23, scope: !6303)
!6305 = !DILocation(line: 1371, column: 21, scope: !6303)
!6306 = !DILocation(line: 1371, column: 29, scope: !6303)
!6307 = !DILocation(line: 1371, column: 34, scope: !6303)
!6308 = !DILocation(line: 1371, column: 46, scope: !6303)
!6309 = !DILocation(line: 1371, column: 51, scope: !6303)
!6310 = !DILocation(line: 1371, column: 44, scope: !6303)
!6311 = !DILocation(line: 1371, column: 27, scope: !6303)
!6312 = !DILocation(line: 1371, column: 6, scope: !6279)
!6313 = !DILocation(line: 1372, column: 3, scope: !6303)
!6314 = !DILocation(line: 1374, column: 23, scope: !6315)
!6315 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 1374, column: 6)
!6316 = !DILocation(line: 1374, column: 6, scope: !6315)
!6317 = !DILocation(line: 1374, column: 6, scope: !6279)
!6318 = !DILocation(line: 1375, column: 33, scope: !6315)
!6319 = !DILocation(line: 1375, column: 39, scope: !6315)
!6320 = !DILocation(line: 1375, column: 45, scope: !6315)
!6321 = !DILocation(line: 1375, column: 61, scope: !6315)
!6322 = !DILocation(line: 1376, column: 12, scope: !6315)
!6323 = !DILocation(line: 1375, column: 10, scope: !6315)
!6324 = !DILocation(line: 1375, column: 3, scope: !6315)
!6325 = !DILocation(line: 1378, column: 2, scope: !6279)
!6326 = !DILocation(line: 1378, column: 8, scope: !6279)
!6327 = !DILocation(line: 1378, column: 15, scope: !6279)
!6328 = !DILocation(line: 1378, column: 23, scope: !6279)
!6329 = !DILocation(line: 1378, column: 45, scope: !6279)
!6330 = !DILocation(line: 1378, column: 61, scope: !6279)
!6331 = !DILocation(line: 1380, column: 6, scope: !6332)
!6332 = distinct !DILexicalBlock(scope: !6279, file: !3, line: 1380, column: 6)
!6333 = !DILocation(line: 1380, column: 6, scope: !6279)
!6334 = !DILocation(line: 1381, column: 3, scope: !6332)
!6335 = !DILocation(line: 1381, column: 9, scope: !6332)
!6336 = !DILocation(line: 1381, column: 16, scope: !6332)
!6337 = !DILocation(line: 1381, column: 26, scope: !6332)
!6338 = !DILocation(line: 1381, column: 32, scope: !6332)
!6339 = !DILocation(line: 1381, column: 37, scope: !6332)
!6340 = !DILocation(line: 1383, column: 2, scope: !6279)
!6341 = !DILocation(line: 1384, column: 1, scope: !6279)
!6342 = distinct !DISubprogram(name: "nand_exec_prog_page_op", scope: !3, file: !3, line: 1274, type: !6343, scopeLine: 1277, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6343 = !DISubroutineType(types: !6344)
!6344 = !{!240, !4166, !7, !7, !189, !7, !180}
!6345 = !DILocalVariable(name: "chip", arg: 1, scope: !6342, file: !3, line: 1274, type: !4166)
!6346 = !DILocation(line: 1274, column: 53, scope: !6342)
!6347 = !DILocalVariable(name: "page", arg: 2, scope: !6342, file: !3, line: 1274, type: !7)
!6348 = !DILocation(line: 1274, column: 72, scope: !6342)
!6349 = !DILocalVariable(name: "offset_in_page", arg: 3, scope: !6342, file: !3, line: 1275, type: !7)
!6350 = !DILocation(line: 1275, column: 20, scope: !6342)
!6351 = !DILocalVariable(name: "buf", arg: 4, scope: !6342, file: !3, line: 1275, type: !189)
!6352 = !DILocation(line: 1275, column: 48, scope: !6342)
!6353 = !DILocalVariable(name: "len", arg: 5, scope: !6342, file: !3, line: 1276, type: !7)
!6354 = !DILocation(line: 1276, column: 20, scope: !6342)
!6355 = !DILocalVariable(name: "prog", arg: 6, scope: !6342, file: !3, line: 1276, type: !180)
!6356 = !DILocation(line: 1276, column: 30, scope: !6342)
!6357 = !DILocalVariable(name: "sdr", scope: !6342, file: !3, line: 1278, type: !5097)
!6358 = !DILocation(line: 1278, column: 33, scope: !6342)
!6359 = !DILocation(line: 1279, column: 50, scope: !6342)
!6360 = !DILocation(line: 1279, column: 24, scope: !6342)
!6361 = !DILocation(line: 1279, column: 3, scope: !6342)
!6362 = !DILocalVariable(name: "mtd", scope: !6342, file: !3, line: 1280, type: !2637)
!6363 = !DILocation(line: 1280, column: 19, scope: !6342)
!6364 = !DILocation(line: 1280, column: 37, scope: !6342)
!6365 = !DILocation(line: 1280, column: 25, scope: !6342)
!6366 = !DILocalVariable(name: "addrs", scope: !6342, file: !3, line: 1281, type: !5727)
!6367 = !DILocation(line: 1281, column: 5, scope: !6342)
!6368 = !DILocalVariable(name: "instrs", scope: !6342, file: !3, line: 1282, type: !6369)
!6369 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4438, size: 1920, elements: !1645)
!6370 = !DILocation(line: 1282, column: 23, scope: !6342)
!6371 = !DILocation(line: 1282, column: 34, scope: !6342)
!6372 = !DILocation(line: 1288, column: 3, scope: !6342)
!6373 = !DILocation(line: 1289, column: 3, scope: !6342)
!6374 = !DILocation(line: 1290, column: 3, scope: !6342)
!6375 = !DILocation(line: 1290, column: 3, scope: !6376)
!6376 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1290, column: 3)
!6377 = !DILocation(line: 1291, column: 3, scope: !6342)
!6378 = !DILocation(line: 1292, column: 3, scope: !6342)
!6379 = !DILocation(line: 1292, column: 3, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1292, column: 3)
!6381 = !DILocation(line: 1293, column: 3, scope: !6342)
!6382 = !DILocation(line: 1293, column: 3, scope: !6383)
!6383 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1293, column: 3)
!6384 = !DILocalVariable(name: "op", scope: !6342, file: !3, line: 1295, type: !4432)
!6385 = !DILocation(line: 1295, column: 24, scope: !6342)
!6386 = !DILocation(line: 1295, column: 29, scope: !6342)
!6387 = !DILocalVariable(name: "naddrs", scope: !6342, file: !3, line: 1296, type: !240)
!6388 = !DILocation(line: 1296, column: 6, scope: !6342)
!6389 = !DILocation(line: 1296, column: 39, scope: !6342)
!6390 = !DILocation(line: 1296, column: 45, scope: !6342)
!6391 = !DILocation(line: 1296, column: 52, scope: !6342)
!6392 = !DILocation(line: 1296, column: 15, scope: !6342)
!6393 = !DILocalVariable(name: "ret", scope: !6342, file: !3, line: 1297, type: !240)
!6394 = !DILocation(line: 1297, column: 6, scope: !6342)
!6395 = !DILocalVariable(name: "status", scope: !6342, file: !3, line: 1298, type: !1372)
!6396 = !DILocation(line: 1298, column: 5, scope: !6342)
!6397 = !DILocation(line: 1300, column: 6, scope: !6398)
!6398 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1300, column: 6)
!6399 = !DILocation(line: 1300, column: 13, scope: !6398)
!6400 = !DILocation(line: 1300, column: 6, scope: !6342)
!6401 = !DILocation(line: 1301, column: 10, scope: !6398)
!6402 = !DILocation(line: 1301, column: 3, scope: !6398)
!6403 = !DILocation(line: 1303, column: 20, scope: !6342)
!6404 = !DILocation(line: 1303, column: 14, scope: !6342)
!6405 = !DILocation(line: 1303, column: 2, scope: !6342)
!6406 = !DILocation(line: 1303, column: 18, scope: !6342)
!6407 = !DILocation(line: 1304, column: 20, scope: !6342)
!6408 = !DILocation(line: 1304, column: 25, scope: !6342)
!6409 = !DILocation(line: 1304, column: 14, scope: !6342)
!6410 = !DILocation(line: 1304, column: 2, scope: !6342)
!6411 = !DILocation(line: 1304, column: 18, scope: !6342)
!6412 = !DILocation(line: 1305, column: 6, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1305, column: 6)
!6414 = !DILocation(line: 1305, column: 12, scope: !6413)
!6415 = !DILocation(line: 1305, column: 20, scope: !6413)
!6416 = !DILocation(line: 1305, column: 6, scope: !6342)
!6417 = !DILocation(line: 1306, column: 21, scope: !6413)
!6418 = !DILocation(line: 1306, column: 26, scope: !6413)
!6419 = !DILocation(line: 1306, column: 15, scope: !6413)
!6420 = !DILocation(line: 1306, column: 3, scope: !6413)
!6421 = !DILocation(line: 1306, column: 19, scope: !6413)
!6422 = !DILocation(line: 1308, column: 30, scope: !6342)
!6423 = !DILocation(line: 1308, column: 2, scope: !6342)
!6424 = !DILocation(line: 1308, column: 12, scope: !6342)
!6425 = !DILocation(line: 1308, column: 16, scope: !6342)
!6426 = !DILocation(line: 1308, column: 21, scope: !6342)
!6427 = !DILocation(line: 1308, column: 28, scope: !6342)
!6428 = !DILocation(line: 1311, column: 7, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1311, column: 6)
!6430 = !DILocation(line: 1311, column: 6, scope: !6342)
!6431 = !DILocation(line: 1312, column: 6, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6429, file: !3, line: 1311, column: 13)
!6433 = !DILocation(line: 1312, column: 14, scope: !6432)
!6434 = !DILocation(line: 1314, column: 8, scope: !6435)
!6435 = distinct !DILexicalBlock(scope: !6432, file: !3, line: 1314, column: 7)
!6436 = !DILocation(line: 1314, column: 7, scope: !6432)
!6437 = !DILocation(line: 1315, column: 7, scope: !6435)
!6438 = !DILocation(line: 1315, column: 14, scope: !6435)
!6439 = !DILocation(line: 1315, column: 4, scope: !6435)
!6440 = !DILocation(line: 1316, column: 2, scope: !6432)
!6441 = !DILocation(line: 1318, column: 6, scope: !6442)
!6442 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1318, column: 6)
!6443 = !DILocation(line: 1318, column: 11, scope: !6442)
!6444 = !DILocation(line: 1318, column: 21, scope: !6442)
!6445 = !DILocation(line: 1318, column: 6, scope: !6342)
!6446 = !DILocation(line: 1324, column: 7, scope: !6447)
!6447 = distinct !DILexicalBlock(scope: !6448, file: !3, line: 1324, column: 7)
!6448 = distinct !DILexicalBlock(scope: !6442, file: !3, line: 1318, column: 29)
!6449 = !DILocation(line: 1324, column: 25, scope: !6447)
!6450 = !DILocation(line: 1324, column: 30, scope: !6447)
!6451 = !DILocation(line: 1324, column: 22, scope: !6447)
!6452 = !DILocation(line: 1324, column: 7, scope: !6448)
!6453 = !DILocation(line: 1325, column: 4, scope: !6447)
!6454 = !DILocation(line: 1325, column: 14, scope: !6447)
!6455 = !DILocation(line: 1325, column: 18, scope: !6447)
!6456 = !DILocation(line: 1325, column: 22, scope: !6447)
!6457 = !DILocation(line: 1325, column: 29, scope: !6447)
!6458 = !DILocation(line: 1326, column: 12, scope: !6459)
!6459 = distinct !DILexicalBlock(scope: !6447, file: !3, line: 1326, column: 12)
!6460 = !DILocation(line: 1326, column: 27, scope: !6459)
!6461 = !DILocation(line: 1326, column: 34, scope: !6459)
!6462 = !DILocation(line: 1327, column: 7, scope: !6459)
!6463 = !DILocation(line: 1327, column: 13, scope: !6459)
!6464 = !DILocation(line: 1327, column: 21, scope: !6459)
!6465 = !DILocation(line: 1326, column: 12, scope: !6447)
!6466 = !DILocation(line: 1328, column: 4, scope: !6459)
!6467 = !DILocation(line: 1328, column: 14, scope: !6459)
!6468 = !DILocation(line: 1328, column: 18, scope: !6459)
!6469 = !DILocation(line: 1328, column: 22, scope: !6459)
!6470 = !DILocation(line: 1328, column: 29, scope: !6459)
!6471 = !DILocation(line: 1329, column: 2, scope: !6448)
!6472 = !DILocation(line: 1334, column: 6, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6442, file: !3, line: 1329, column: 9)
!6474 = !DILocation(line: 1334, column: 12, scope: !6473)
!6475 = !DILocation(line: 1335, column: 6, scope: !6473)
!6476 = !DILocation(line: 1335, column: 13, scope: !6473)
!6477 = !DILocation(line: 1338, column: 21, scope: !6342)
!6478 = !DILocation(line: 1338, column: 8, scope: !6342)
!6479 = !DILocation(line: 1338, column: 6, scope: !6342)
!6480 = !DILocation(line: 1339, column: 7, scope: !6481)
!6481 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1339, column: 6)
!6482 = !DILocation(line: 1339, column: 12, scope: !6481)
!6483 = !DILocation(line: 1339, column: 15, scope: !6481)
!6484 = !DILocation(line: 1339, column: 6, scope: !6342)
!6485 = !DILocation(line: 1340, column: 10, scope: !6481)
!6486 = !DILocation(line: 1340, column: 3, scope: !6481)
!6487 = !DILocation(line: 1342, column: 23, scope: !6342)
!6488 = !DILocation(line: 1342, column: 8, scope: !6342)
!6489 = !DILocation(line: 1342, column: 6, scope: !6342)
!6490 = !DILocation(line: 1343, column: 6, scope: !6491)
!6491 = distinct !DILexicalBlock(scope: !6342, file: !3, line: 1343, column: 6)
!6492 = !DILocation(line: 1343, column: 6, scope: !6342)
!6493 = !DILocation(line: 1344, column: 10, scope: !6491)
!6494 = !DILocation(line: 1344, column: 3, scope: !6491)
!6495 = !DILocation(line: 1346, column: 9, scope: !6342)
!6496 = !DILocation(line: 1346, column: 2, scope: !6342)
!6497 = !DILocation(line: 1347, column: 1, scope: !6342)
!6498 = distinct !DISubprogram(name: "nand_prog_page_end_op", scope: !3, file: !3, line: 1396, type: !4222, scopeLine: 1397, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6499 = !DILocalVariable(name: "chip", arg: 1, scope: !6498, file: !3, line: 1396, type: !4166)
!6500 = !DILocation(line: 1396, column: 45, scope: !6498)
!6501 = !DILocalVariable(name: "ret", scope: !6498, file: !3, line: 1398, type: !240)
!6502 = !DILocation(line: 1398, column: 6, scope: !6498)
!6503 = !DILocalVariable(name: "status", scope: !6498, file: !3, line: 1399, type: !1372)
!6504 = !DILocation(line: 1399, column: 5, scope: !6498)
!6505 = !DILocation(line: 1401, column: 23, scope: !6506)
!6506 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 1401, column: 6)
!6507 = !DILocation(line: 1401, column: 6, scope: !6506)
!6508 = !DILocation(line: 1401, column: 6, scope: !6498)
!6509 = !DILocalVariable(name: "sdr", scope: !6510, file: !3, line: 1402, type: !5097)
!6510 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 1401, column: 30)
!6511 = !DILocation(line: 1402, column: 34, scope: !6510)
!6512 = !DILocation(line: 1403, column: 51, scope: !6510)
!6513 = !DILocation(line: 1403, column: 25, scope: !6510)
!6514 = !DILocation(line: 1403, column: 4, scope: !6510)
!6515 = !DILocalVariable(name: "instrs", scope: !6510, file: !3, line: 1404, type: !5248)
!6516 = !DILocation(line: 1404, column: 24, scope: !6510)
!6517 = !DILocation(line: 1404, column: 35, scope: !6510)
!6518 = !DILocation(line: 1405, column: 4, scope: !6510)
!6519 = !DILocation(line: 1405, column: 4, scope: !6520)
!6520 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 1405, column: 4)
!6521 = !DILocation(line: 1407, column: 4, scope: !6510)
!6522 = !DILocation(line: 1407, column: 4, scope: !6523)
!6523 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 1407, column: 4)
!6524 = !DILocalVariable(name: "op", scope: !6510, file: !3, line: 1409, type: !4432)
!6525 = !DILocation(line: 1409, column: 25, scope: !6510)
!6526 = !DILocation(line: 1409, column: 30, scope: !6510)
!6527 = !DILocation(line: 1411, column: 22, scope: !6510)
!6528 = !DILocation(line: 1411, column: 9, scope: !6510)
!6529 = !DILocation(line: 1411, column: 7, scope: !6510)
!6530 = !DILocation(line: 1412, column: 7, scope: !6531)
!6531 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 1412, column: 7)
!6532 = !DILocation(line: 1412, column: 7, scope: !6510)
!6533 = !DILocation(line: 1413, column: 11, scope: !6531)
!6534 = !DILocation(line: 1413, column: 4, scope: !6531)
!6535 = !DILocation(line: 1415, column: 24, scope: !6510)
!6536 = !DILocation(line: 1415, column: 9, scope: !6510)
!6537 = !DILocation(line: 1415, column: 7, scope: !6510)
!6538 = !DILocation(line: 1416, column: 7, scope: !6539)
!6539 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 1416, column: 7)
!6540 = !DILocation(line: 1416, column: 7, scope: !6510)
!6541 = !DILocation(line: 1417, column: 11, scope: !6539)
!6542 = !DILocation(line: 1417, column: 4, scope: !6539)
!6543 = !DILocation(line: 1418, column: 2, scope: !6510)
!6544 = !DILocation(line: 1419, column: 3, scope: !6545)
!6545 = distinct !DILexicalBlock(scope: !6506, file: !3, line: 1418, column: 9)
!6546 = !DILocation(line: 1419, column: 9, scope: !6545)
!6547 = !DILocation(line: 1419, column: 16, scope: !6545)
!6548 = !DILocation(line: 1419, column: 24, scope: !6545)
!6549 = !DILocation(line: 1420, column: 9, scope: !6545)
!6550 = !DILocation(line: 1420, column: 15, scope: !6545)
!6551 = !DILocation(line: 1420, column: 22, scope: !6545)
!6552 = !DILocation(line: 1420, column: 31, scope: !6545)
!6553 = !DILocation(line: 1420, column: 7, scope: !6545)
!6554 = !DILocation(line: 1421, column: 7, scope: !6555)
!6555 = distinct !DILexicalBlock(scope: !6545, file: !3, line: 1421, column: 7)
!6556 = !DILocation(line: 1421, column: 11, scope: !6555)
!6557 = !DILocation(line: 1421, column: 7, scope: !6545)
!6558 = !DILocation(line: 1422, column: 11, scope: !6555)
!6559 = !DILocation(line: 1422, column: 4, scope: !6555)
!6560 = !DILocation(line: 1424, column: 12, scope: !6545)
!6561 = !DILocation(line: 1424, column: 10, scope: !6545)
!6562 = !DILocation(line: 1427, column: 6, scope: !6563)
!6563 = distinct !DILexicalBlock(scope: !6498, file: !3, line: 1427, column: 6)
!6564 = !DILocation(line: 1427, column: 13, scope: !6563)
!6565 = !DILocation(line: 1427, column: 6, scope: !6498)
!6566 = !DILocation(line: 1428, column: 3, scope: !6563)
!6567 = !DILocation(line: 1430, column: 2, scope: !6498)
!6568 = !DILocation(line: 1431, column: 1, scope: !6498)
!6569 = distinct !DISubprogram(name: "nand_prog_page_op", scope: !3, file: !3, line: 1447, type: !6280, scopeLine: 1450, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6570 = !DILocalVariable(name: "chip", arg: 1, scope: !6569, file: !3, line: 1447, type: !4166)
!6571 = !DILocation(line: 1447, column: 41, scope: !6569)
!6572 = !DILocalVariable(name: "page", arg: 2, scope: !6569, file: !3, line: 1447, type: !7)
!6573 = !DILocation(line: 1447, column: 60, scope: !6569)
!6574 = !DILocalVariable(name: "offset_in_page", arg: 3, scope: !6569, file: !3, line: 1448, type: !7)
!6575 = !DILocation(line: 1448, column: 22, scope: !6569)
!6576 = !DILocalVariable(name: "buf", arg: 4, scope: !6569, file: !3, line: 1448, type: !189)
!6577 = !DILocation(line: 1448, column: 50, scope: !6569)
!6578 = !DILocalVariable(name: "len", arg: 5, scope: !6569, file: !3, line: 1449, type: !7)
!6579 = !DILocation(line: 1449, column: 22, scope: !6569)
!6580 = !DILocalVariable(name: "mtd", scope: !6569, file: !3, line: 1451, type: !2637)
!6581 = !DILocation(line: 1451, column: 19, scope: !6569)
!6582 = !DILocation(line: 1451, column: 37, scope: !6569)
!6583 = !DILocation(line: 1451, column: 25, scope: !6569)
!6584 = !DILocalVariable(name: "status", scope: !6569, file: !3, line: 1452, type: !240)
!6585 = !DILocation(line: 1452, column: 6, scope: !6569)
!6586 = !DILocation(line: 1454, column: 7, scope: !6587)
!6587 = distinct !DILexicalBlock(scope: !6569, file: !3, line: 1454, column: 6)
!6588 = !DILocation(line: 1454, column: 11, scope: !6587)
!6589 = !DILocation(line: 1454, column: 15, scope: !6587)
!6590 = !DILocation(line: 1454, column: 6, scope: !6569)
!6591 = !DILocation(line: 1455, column: 3, scope: !6587)
!6592 = !DILocation(line: 1457, column: 6, scope: !6593)
!6593 = distinct !DILexicalBlock(scope: !6569, file: !3, line: 1457, column: 6)
!6594 = !DILocation(line: 1457, column: 23, scope: !6593)
!6595 = !DILocation(line: 1457, column: 21, scope: !6593)
!6596 = !DILocation(line: 1457, column: 29, scope: !6593)
!6597 = !DILocation(line: 1457, column: 34, scope: !6593)
!6598 = !DILocation(line: 1457, column: 46, scope: !6593)
!6599 = !DILocation(line: 1457, column: 51, scope: !6593)
!6600 = !DILocation(line: 1457, column: 44, scope: !6593)
!6601 = !DILocation(line: 1457, column: 27, scope: !6593)
!6602 = !DILocation(line: 1457, column: 6, scope: !6569)
!6603 = !DILocation(line: 1458, column: 3, scope: !6593)
!6604 = !DILocation(line: 1460, column: 23, scope: !6605)
!6605 = distinct !DILexicalBlock(scope: !6569, file: !3, line: 1460, column: 6)
!6606 = !DILocation(line: 1460, column: 6, scope: !6605)
!6607 = !DILocation(line: 1460, column: 6, scope: !6569)
!6608 = !DILocation(line: 1461, column: 35, scope: !6609)
!6609 = distinct !DILexicalBlock(scope: !6605, file: !3, line: 1460, column: 30)
!6610 = !DILocation(line: 1461, column: 41, scope: !6609)
!6611 = !DILocation(line: 1461, column: 47, scope: !6609)
!6612 = !DILocation(line: 1461, column: 63, scope: !6609)
!6613 = !DILocation(line: 1462, column: 7, scope: !6609)
!6614 = !DILocation(line: 1461, column: 12, scope: !6609)
!6615 = !DILocation(line: 1461, column: 10, scope: !6609)
!6616 = !DILocation(line: 1463, column: 2, scope: !6609)
!6617 = !DILocation(line: 1464, column: 3, scope: !6618)
!6618 = distinct !DILexicalBlock(scope: !6605, file: !3, line: 1463, column: 9)
!6619 = !DILocation(line: 1464, column: 9, scope: !6618)
!6620 = !DILocation(line: 1464, column: 16, scope: !6618)
!6621 = !DILocation(line: 1464, column: 24, scope: !6618)
!6622 = !DILocation(line: 1464, column: 46, scope: !6618)
!6623 = !DILocation(line: 1465, column: 10, scope: !6618)
!6624 = !DILocation(line: 1466, column: 3, scope: !6618)
!6625 = !DILocation(line: 1466, column: 9, scope: !6618)
!6626 = !DILocation(line: 1466, column: 16, scope: !6618)
!6627 = !DILocation(line: 1466, column: 26, scope: !6618)
!6628 = !DILocation(line: 1466, column: 32, scope: !6618)
!6629 = !DILocation(line: 1466, column: 37, scope: !6618)
!6630 = !DILocation(line: 1467, column: 3, scope: !6618)
!6631 = !DILocation(line: 1467, column: 9, scope: !6618)
!6632 = !DILocation(line: 1467, column: 16, scope: !6618)
!6633 = !DILocation(line: 1467, column: 24, scope: !6618)
!6634 = !DILocation(line: 1468, column: 12, scope: !6618)
!6635 = !DILocation(line: 1468, column: 18, scope: !6618)
!6636 = !DILocation(line: 1468, column: 25, scope: !6618)
!6637 = !DILocation(line: 1468, column: 34, scope: !6618)
!6638 = !DILocation(line: 1468, column: 10, scope: !6618)
!6639 = !DILocation(line: 1471, column: 6, scope: !6640)
!6640 = distinct !DILexicalBlock(scope: !6569, file: !3, line: 1471, column: 6)
!6641 = !DILocation(line: 1471, column: 13, scope: !6640)
!6642 = !DILocation(line: 1471, column: 6, scope: !6569)
!6643 = !DILocation(line: 1472, column: 3, scope: !6640)
!6644 = !DILocation(line: 1474, column: 2, scope: !6569)
!6645 = !DILocation(line: 1475, column: 1, scope: !6569)
!6646 = distinct !DISubprogram(name: "nand_change_write_column_op", scope: !3, file: !3, line: 1491, type: !6647, scopeLine: 1495, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6647 = !DISubroutineType(types: !6648)
!6648 = !{!240, !4166, !7, !189, !7, !180}
!6649 = !DILocalVariable(name: "chip", arg: 1, scope: !6646, file: !3, line: 1491, type: !4166)
!6650 = !DILocation(line: 1491, column: 51, scope: !6646)
!6651 = !DILocalVariable(name: "offset_in_page", arg: 2, scope: !6646, file: !3, line: 1492, type: !7)
!6652 = !DILocation(line: 1492, column: 18, scope: !6646)
!6653 = !DILocalVariable(name: "buf", arg: 3, scope: !6646, file: !3, line: 1493, type: !189)
!6654 = !DILocation(line: 1493, column: 17, scope: !6646)
!6655 = !DILocalVariable(name: "len", arg: 4, scope: !6646, file: !3, line: 1493, type: !7)
!6656 = !DILocation(line: 1493, column: 35, scope: !6646)
!6657 = !DILocalVariable(name: "force_8bit", arg: 5, scope: !6646, file: !3, line: 1494, type: !180)
!6658 = !DILocation(line: 1494, column: 10, scope: !6646)
!6659 = !DILocalVariable(name: "mtd", scope: !6646, file: !3, line: 1496, type: !2637)
!6660 = !DILocation(line: 1496, column: 19, scope: !6646)
!6661 = !DILocation(line: 1496, column: 37, scope: !6646)
!6662 = !DILocation(line: 1496, column: 25, scope: !6646)
!6663 = !DILocation(line: 1498, column: 6, scope: !6664)
!6664 = distinct !DILexicalBlock(scope: !6646, file: !3, line: 1498, column: 6)
!6665 = !DILocation(line: 1498, column: 10, scope: !6664)
!6666 = !DILocation(line: 1498, column: 14, scope: !6664)
!6667 = !DILocation(line: 1498, column: 6, scope: !6646)
!6668 = !DILocation(line: 1499, column: 3, scope: !6664)
!6669 = !DILocation(line: 1501, column: 6, scope: !6670)
!6670 = distinct !DILexicalBlock(scope: !6646, file: !3, line: 1501, column: 6)
!6671 = !DILocation(line: 1501, column: 23, scope: !6670)
!6672 = !DILocation(line: 1501, column: 21, scope: !6670)
!6673 = !DILocation(line: 1501, column: 29, scope: !6670)
!6674 = !DILocation(line: 1501, column: 34, scope: !6670)
!6675 = !DILocation(line: 1501, column: 46, scope: !6670)
!6676 = !DILocation(line: 1501, column: 51, scope: !6670)
!6677 = !DILocation(line: 1501, column: 44, scope: !6670)
!6678 = !DILocation(line: 1501, column: 27, scope: !6670)
!6679 = !DILocation(line: 1501, column: 6, scope: !6646)
!6680 = !DILocation(line: 1502, column: 3, scope: !6670)
!6681 = !DILocation(line: 1505, column: 6, scope: !6682)
!6682 = distinct !DILexicalBlock(scope: !6646, file: !3, line: 1505, column: 6)
!6683 = !DILocation(line: 1505, column: 11, scope: !6682)
!6684 = !DILocation(line: 1505, column: 21, scope: !6682)
!6685 = !DILocation(line: 1505, column: 6, scope: !6646)
!6686 = !DILocation(line: 1506, column: 3, scope: !6682)
!6687 = !DILocation(line: 1508, column: 23, scope: !6688)
!6688 = distinct !DILexicalBlock(scope: !6646, file: !3, line: 1508, column: 6)
!6689 = !DILocation(line: 1508, column: 6, scope: !6688)
!6690 = !DILocation(line: 1508, column: 6, scope: !6646)
!6691 = !DILocalVariable(name: "sdr", scope: !6692, file: !3, line: 1509, type: !5097)
!6692 = distinct !DILexicalBlock(scope: !6688, file: !3, line: 1508, column: 30)
!6693 = !DILocation(line: 1509, column: 34, scope: !6692)
!6694 = !DILocation(line: 1510, column: 51, scope: !6692)
!6695 = !DILocation(line: 1510, column: 25, scope: !6692)
!6696 = !DILocation(line: 1510, column: 4, scope: !6692)
!6697 = !DILocalVariable(name: "addrs", scope: !6692, file: !3, line: 1511, type: !4239)
!6698 = !DILocation(line: 1511, column: 6, scope: !6692)
!6699 = !DILocalVariable(name: "instrs", scope: !6692, file: !3, line: 1512, type: !6700)
!6700 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4438, size: 960, elements: !257)
!6701 = !DILocation(line: 1512, column: 24, scope: !6692)
!6702 = !DILocation(line: 1512, column: 35, scope: !6692)
!6703 = !DILocation(line: 1513, column: 4, scope: !6692)
!6704 = !DILocation(line: 1514, column: 4, scope: !6692)
!6705 = !DILocation(line: 1514, column: 4, scope: !6706)
!6706 = distinct !DILexicalBlock(scope: !6692, file: !3, line: 1514, column: 4)
!6707 = !DILocation(line: 1515, column: 4, scope: !6692)
!6708 = !DILocalVariable(name: "op", scope: !6692, file: !3, line: 1517, type: !4432)
!6709 = !DILocation(line: 1517, column: 25, scope: !6692)
!6710 = !DILocation(line: 1517, column: 30, scope: !6692)
!6711 = !DILocalVariable(name: "ret", scope: !6692, file: !3, line: 1518, type: !240)
!6712 = !DILocation(line: 1518, column: 7, scope: !6692)
!6713 = !DILocation(line: 1520, column: 33, scope: !6692)
!6714 = !DILocation(line: 1520, column: 39, scope: !6692)
!6715 = !DILocation(line: 1520, column: 46, scope: !6692)
!6716 = !DILocation(line: 1520, column: 9, scope: !6692)
!6717 = !DILocation(line: 1520, column: 7, scope: !6692)
!6718 = !DILocation(line: 1521, column: 7, scope: !6719)
!6719 = distinct !DILexicalBlock(scope: !6692, file: !3, line: 1521, column: 7)
!6720 = !DILocation(line: 1521, column: 11, scope: !6719)
!6721 = !DILocation(line: 1521, column: 7, scope: !6692)
!6722 = !DILocation(line: 1522, column: 11, scope: !6719)
!6723 = !DILocation(line: 1522, column: 4, scope: !6719)
!6724 = !DILocation(line: 1524, column: 35, scope: !6692)
!6725 = !DILocation(line: 1524, column: 3, scope: !6692)
!6726 = !DILocation(line: 1524, column: 13, scope: !6692)
!6727 = !DILocation(line: 1524, column: 17, scope: !6692)
!6728 = !DILocation(line: 1524, column: 22, scope: !6692)
!6729 = !DILocation(line: 1524, column: 33, scope: !6692)
!6730 = !DILocation(line: 1527, column: 8, scope: !6731)
!6731 = distinct !DILexicalBlock(scope: !6692, file: !3, line: 1527, column: 7)
!6732 = !DILocation(line: 1527, column: 7, scope: !6692)
!6733 = !DILocation(line: 1528, column: 7, scope: !6731)
!6734 = !DILocation(line: 1528, column: 14, scope: !6731)
!6735 = !DILocation(line: 1528, column: 4, scope: !6731)
!6736 = !DILocation(line: 1530, column: 23, scope: !6692)
!6737 = !DILocation(line: 1530, column: 10, scope: !6692)
!6738 = !DILocation(line: 1530, column: 3, scope: !6692)
!6739 = !DILocation(line: 1533, column: 2, scope: !6646)
!6740 = !DILocation(line: 1533, column: 8, scope: !6646)
!6741 = !DILocation(line: 1533, column: 15, scope: !6646)
!6742 = !DILocation(line: 1533, column: 23, scope: !6646)
!6743 = !DILocation(line: 1533, column: 45, scope: !6646)
!6744 = !DILocation(line: 1534, column: 6, scope: !6745)
!6745 = distinct !DILexicalBlock(scope: !6646, file: !3, line: 1534, column: 6)
!6746 = !DILocation(line: 1534, column: 6, scope: !6646)
!6747 = !DILocation(line: 1535, column: 3, scope: !6745)
!6748 = !DILocation(line: 1535, column: 9, scope: !6745)
!6749 = !DILocation(line: 1535, column: 16, scope: !6745)
!6750 = !DILocation(line: 1535, column: 26, scope: !6745)
!6751 = !DILocation(line: 1535, column: 32, scope: !6745)
!6752 = !DILocation(line: 1535, column: 37, scope: !6745)
!6753 = !DILocation(line: 1537, column: 2, scope: !6646)
!6754 = !DILocation(line: 1538, column: 1, scope: !6646)
!6755 = distinct !DISubprogram(name: "nand_readid_op", scope: !3, file: !3, line: 1554, type: !5905, scopeLine: 1556, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6756 = !DILocalVariable(name: "chip", arg: 1, scope: !6755, file: !3, line: 1554, type: !4166)
!6757 = !DILocation(line: 1554, column: 38, scope: !6755)
!6758 = !DILocalVariable(name: "addr", arg: 2, scope: !6755, file: !3, line: 1554, type: !1372)
!6759 = !DILocation(line: 1554, column: 47, scope: !6755)
!6760 = !DILocalVariable(name: "buf", arg: 3, scope: !6755, file: !3, line: 1554, type: !330)
!6761 = !DILocation(line: 1554, column: 59, scope: !6755)
!6762 = !DILocalVariable(name: "len", arg: 4, scope: !6755, file: !3, line: 1555, type: !7)
!6763 = !DILocation(line: 1555, column: 19, scope: !6755)
!6764 = !DILocalVariable(name: "i", scope: !6755, file: !3, line: 1557, type: !7)
!6765 = !DILocation(line: 1557, column: 15, scope: !6755)
!6766 = !DILocalVariable(name: "id", scope: !6755, file: !3, line: 1558, type: !4051)
!6767 = !DILocation(line: 1558, column: 6, scope: !6755)
!6768 = !DILocation(line: 1558, column: 11, scope: !6755)
!6769 = !DILocation(line: 1560, column: 6, scope: !6770)
!6770 = distinct !DILexicalBlock(scope: !6755, file: !3, line: 1560, column: 6)
!6771 = !DILocation(line: 1560, column: 10, scope: !6770)
!6772 = !DILocation(line: 1560, column: 14, scope: !6770)
!6773 = !DILocation(line: 1560, column: 6, scope: !6755)
!6774 = !DILocation(line: 1561, column: 3, scope: !6770)
!6775 = !DILocation(line: 1563, column: 23, scope: !6776)
!6776 = distinct !DILexicalBlock(scope: !6755, file: !3, line: 1563, column: 6)
!6777 = !DILocation(line: 1563, column: 6, scope: !6776)
!6778 = !DILocation(line: 1563, column: 6, scope: !6755)
!6779 = !DILocalVariable(name: "sdr", scope: !6780, file: !3, line: 1564, type: !5097)
!6780 = distinct !DILexicalBlock(scope: !6776, file: !3, line: 1563, column: 30)
!6781 = !DILocation(line: 1564, column: 34, scope: !6780)
!6782 = !DILocation(line: 1565, column: 51, scope: !6780)
!6783 = !DILocation(line: 1565, column: 25, scope: !6780)
!6784 = !DILocation(line: 1565, column: 4, scope: !6780)
!6785 = !DILocalVariable(name: "instrs", scope: !6780, file: !3, line: 1566, type: !6700)
!6786 = !DILocation(line: 1566, column: 24, scope: !6780)
!6787 = !DILocation(line: 1566, column: 35, scope: !6780)
!6788 = !DILocation(line: 1567, column: 4, scope: !6780)
!6789 = !DILocation(line: 1568, column: 4, scope: !6780)
!6790 = !DILocation(line: 1568, column: 4, scope: !6791)
!6791 = distinct !DILexicalBlock(scope: !6780, file: !3, line: 1568, column: 4)
!6792 = !DILocation(line: 1569, column: 4, scope: !6780)
!6793 = !DILocalVariable(name: "op", scope: !6780, file: !3, line: 1571, type: !4432)
!6794 = !DILocation(line: 1571, column: 25, scope: !6780)
!6795 = !DILocation(line: 1571, column: 30, scope: !6780)
!6796 = !DILocation(line: 1574, column: 8, scope: !6797)
!6797 = distinct !DILexicalBlock(scope: !6780, file: !3, line: 1574, column: 7)
!6798 = !DILocation(line: 1574, column: 7, scope: !6780)
!6799 = !DILocation(line: 1575, column: 7, scope: !6797)
!6800 = !DILocation(line: 1575, column: 14, scope: !6797)
!6801 = !DILocation(line: 1575, column: 4, scope: !6797)
!6802 = !DILocation(line: 1577, column: 23, scope: !6780)
!6803 = !DILocation(line: 1577, column: 10, scope: !6780)
!6804 = !DILocation(line: 1577, column: 3, scope: !6780)
!6805 = !DILocation(line: 1580, column: 2, scope: !6755)
!6806 = !DILocation(line: 1580, column: 8, scope: !6755)
!6807 = !DILocation(line: 1580, column: 15, scope: !6755)
!6808 = !DILocation(line: 1580, column: 23, scope: !6755)
!6809 = !DILocation(line: 1580, column: 46, scope: !6755)
!6810 = !DILocation(line: 1582, column: 9, scope: !6811)
!6811 = distinct !DILexicalBlock(scope: !6755, file: !3, line: 1582, column: 2)
!6812 = !DILocation(line: 1582, column: 7, scope: !6811)
!6813 = !DILocation(line: 1582, column: 14, scope: !6814)
!6814 = distinct !DILexicalBlock(scope: !6811, file: !3, line: 1582, column: 2)
!6815 = !DILocation(line: 1582, column: 18, scope: !6814)
!6816 = !DILocation(line: 1582, column: 16, scope: !6814)
!6817 = !DILocation(line: 1582, column: 2, scope: !6811)
!6818 = !DILocation(line: 1583, column: 11, scope: !6814)
!6819 = !DILocation(line: 1583, column: 17, scope: !6814)
!6820 = !DILocation(line: 1583, column: 24, scope: !6814)
!6821 = !DILocation(line: 1583, column: 34, scope: !6814)
!6822 = !DILocation(line: 1583, column: 3, scope: !6814)
!6823 = !DILocation(line: 1583, column: 6, scope: !6814)
!6824 = !DILocation(line: 1583, column: 9, scope: !6814)
!6825 = !DILocation(line: 1582, column: 24, scope: !6814)
!6826 = !DILocation(line: 1582, column: 2, scope: !6814)
!6827 = distinct !{!6827, !6817, !6828}
!6828 = !DILocation(line: 1583, column: 38, scope: !6811)
!6829 = !DILocation(line: 1585, column: 2, scope: !6755)
!6830 = !DILocation(line: 1586, column: 1, scope: !6755)
!6831 = distinct !DISubprogram(name: "nand_erase_op", scope: !3, file: !3, line: 1664, type: !6832, scopeLine: 1665, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6832 = !DISubroutineType(types: !6833)
!6833 = !{!240, !4166, !7}
!6834 = !DILocalVariable(name: "chip", arg: 1, scope: !6831, file: !3, line: 1664, type: !4166)
!6835 = !DILocation(line: 1664, column: 37, scope: !6831)
!6836 = !DILocalVariable(name: "eraseblock", arg: 2, scope: !6831, file: !3, line: 1664, type: !7)
!6837 = !DILocation(line: 1664, column: 56, scope: !6831)
!6838 = !DILocalVariable(name: "page", scope: !6831, file: !3, line: 1666, type: !7)
!6839 = !DILocation(line: 1666, column: 15, scope: !6831)
!6840 = !DILocation(line: 1666, column: 22, scope: !6831)
!6841 = !DILocation(line: 1667, column: 9, scope: !6831)
!6842 = !DILocation(line: 1667, column: 15, scope: !6831)
!6843 = !DILocation(line: 1667, column: 34, scope: !6831)
!6844 = !DILocation(line: 1667, column: 40, scope: !6831)
!6845 = !DILocation(line: 1667, column: 32, scope: !6831)
!6846 = !DILocation(line: 1666, column: 33, scope: !6831)
!6847 = !DILocalVariable(name: "ret", scope: !6831, file: !3, line: 1668, type: !240)
!6848 = !DILocation(line: 1668, column: 6, scope: !6831)
!6849 = !DILocalVariable(name: "status", scope: !6831, file: !3, line: 1669, type: !1372)
!6850 = !DILocation(line: 1669, column: 5, scope: !6831)
!6851 = !DILocation(line: 1671, column: 23, scope: !6852)
!6852 = distinct !DILexicalBlock(scope: !6831, file: !3, line: 1671, column: 6)
!6853 = !DILocation(line: 1671, column: 6, scope: !6852)
!6854 = !DILocation(line: 1671, column: 6, scope: !6831)
!6855 = !DILocalVariable(name: "sdr", scope: !6856, file: !3, line: 1672, type: !5097)
!6856 = distinct !DILexicalBlock(scope: !6852, file: !3, line: 1671, column: 30)
!6857 = !DILocation(line: 1672, column: 34, scope: !6856)
!6858 = !DILocation(line: 1673, column: 51, scope: !6856)
!6859 = !DILocation(line: 1673, column: 25, scope: !6856)
!6860 = !DILocation(line: 1673, column: 4, scope: !6856)
!6861 = !DILocalVariable(name: "addrs", scope: !6856, file: !3, line: 1674, type: !6862)
!6862 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1372, size: 24, elements: !257)
!6863 = !DILocation(line: 1674, column: 6, scope: !6856)
!6864 = !DILocation(line: 1674, column: 17, scope: !6856)
!6865 = !DILocation(line: 1674, column: 19, scope: !6856)
!6866 = !DILocation(line: 1674, column: 25, scope: !6856)
!6867 = !DILocation(line: 1674, column: 30, scope: !6856)
!6868 = !DILocation(line: 1674, column: 36, scope: !6856)
!6869 = !DILocation(line: 1674, column: 41, scope: !6856)
!6870 = !DILocalVariable(name: "instrs", scope: !6856, file: !3, line: 1675, type: !5818)
!6871 = !DILocation(line: 1675, column: 24, scope: !6856)
!6872 = !DILocation(line: 1675, column: 35, scope: !6856)
!6873 = !DILocation(line: 1676, column: 4, scope: !6856)
!6874 = !DILocation(line: 1677, column: 4, scope: !6856)
!6875 = !DILocation(line: 1678, column: 4, scope: !6856)
!6876 = !DILocation(line: 1678, column: 4, scope: !6877)
!6877 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 1678, column: 4)
!6878 = !DILocation(line: 1680, column: 4, scope: !6856)
!6879 = !DILocation(line: 1680, column: 4, scope: !6880)
!6880 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 1680, column: 4)
!6881 = !DILocalVariable(name: "op", scope: !6856, file: !3, line: 1682, type: !4432)
!6882 = !DILocation(line: 1682, column: 25, scope: !6856)
!6883 = !DILocation(line: 1682, column: 30, scope: !6856)
!6884 = !DILocation(line: 1684, column: 7, scope: !6885)
!6885 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 1684, column: 7)
!6886 = !DILocation(line: 1684, column: 13, scope: !6885)
!6887 = !DILocation(line: 1684, column: 21, scope: !6885)
!6888 = !DILocation(line: 1684, column: 7, scope: !6856)
!6889 = !DILocation(line: 1685, column: 4, scope: !6885)
!6890 = !DILocation(line: 1685, column: 14, scope: !6885)
!6891 = !DILocation(line: 1685, column: 18, scope: !6885)
!6892 = !DILocation(line: 1685, column: 23, scope: !6885)
!6893 = !DILocation(line: 1685, column: 29, scope: !6885)
!6894 = !DILocation(line: 1687, column: 22, scope: !6856)
!6895 = !DILocation(line: 1687, column: 9, scope: !6856)
!6896 = !DILocation(line: 1687, column: 7, scope: !6856)
!6897 = !DILocation(line: 1688, column: 7, scope: !6898)
!6898 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 1688, column: 7)
!6899 = !DILocation(line: 1688, column: 7, scope: !6856)
!6900 = !DILocation(line: 1689, column: 11, scope: !6898)
!6901 = !DILocation(line: 1689, column: 4, scope: !6898)
!6902 = !DILocation(line: 1691, column: 24, scope: !6856)
!6903 = !DILocation(line: 1691, column: 9, scope: !6856)
!6904 = !DILocation(line: 1691, column: 7, scope: !6856)
!6905 = !DILocation(line: 1692, column: 7, scope: !6906)
!6906 = distinct !DILexicalBlock(scope: !6856, file: !3, line: 1692, column: 7)
!6907 = !DILocation(line: 1692, column: 7, scope: !6856)
!6908 = !DILocation(line: 1693, column: 11, scope: !6906)
!6909 = !DILocation(line: 1693, column: 4, scope: !6906)
!6910 = !DILocation(line: 1694, column: 2, scope: !6856)
!6911 = !DILocation(line: 1695, column: 3, scope: !6912)
!6912 = distinct !DILexicalBlock(scope: !6852, file: !3, line: 1694, column: 9)
!6913 = !DILocation(line: 1695, column: 9, scope: !6912)
!6914 = !DILocation(line: 1695, column: 16, scope: !6912)
!6915 = !DILocation(line: 1695, column: 24, scope: !6912)
!6916 = !DILocation(line: 1695, column: 51, scope: !6912)
!6917 = !DILocation(line: 1696, column: 3, scope: !6912)
!6918 = !DILocation(line: 1696, column: 9, scope: !6912)
!6919 = !DILocation(line: 1696, column: 16, scope: !6912)
!6920 = !DILocation(line: 1696, column: 24, scope: !6912)
!6921 = !DILocation(line: 1698, column: 9, scope: !6912)
!6922 = !DILocation(line: 1698, column: 15, scope: !6912)
!6923 = !DILocation(line: 1698, column: 22, scope: !6912)
!6924 = !DILocation(line: 1698, column: 31, scope: !6912)
!6925 = !DILocation(line: 1698, column: 7, scope: !6912)
!6926 = !DILocation(line: 1699, column: 7, scope: !6927)
!6927 = distinct !DILexicalBlock(scope: !6912, file: !3, line: 1699, column: 7)
!6928 = !DILocation(line: 1699, column: 11, scope: !6927)
!6929 = !DILocation(line: 1699, column: 7, scope: !6912)
!6930 = !DILocation(line: 1700, column: 11, scope: !6927)
!6931 = !DILocation(line: 1700, column: 4, scope: !6927)
!6932 = !DILocation(line: 1702, column: 12, scope: !6912)
!6933 = !DILocation(line: 1702, column: 10, scope: !6912)
!6934 = !DILocation(line: 1705, column: 6, scope: !6935)
!6935 = distinct !DILexicalBlock(scope: !6831, file: !3, line: 1705, column: 6)
!6936 = !DILocation(line: 1705, column: 13, scope: !6935)
!6937 = !DILocation(line: 1705, column: 6, scope: !6831)
!6938 = !DILocation(line: 1706, column: 3, scope: !6935)
!6939 = !DILocation(line: 1708, column: 2, scope: !6831)
!6940 = !DILocation(line: 1709, column: 1, scope: !6831)
!6941 = distinct !DISubprogram(name: "nand_reset_op", scope: !3, file: !3, line: 1832, type: !4222, scopeLine: 1833, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6942 = !DILocalVariable(name: "chip", arg: 1, scope: !6941, file: !3, line: 1832, type: !4166)
!6943 = !DILocation(line: 1832, column: 37, scope: !6941)
!6944 = !DILocation(line: 1834, column: 23, scope: !6945)
!6945 = distinct !DILexicalBlock(scope: !6941, file: !3, line: 1834, column: 6)
!6946 = !DILocation(line: 1834, column: 6, scope: !6945)
!6947 = !DILocation(line: 1834, column: 6, scope: !6941)
!6948 = !DILocalVariable(name: "sdr", scope: !6949, file: !3, line: 1835, type: !5097)
!6949 = distinct !DILexicalBlock(scope: !6945, file: !3, line: 1834, column: 30)
!6950 = !DILocation(line: 1835, column: 34, scope: !6949)
!6951 = !DILocation(line: 1836, column: 51, scope: !6949)
!6952 = !DILocation(line: 1836, column: 25, scope: !6949)
!6953 = !DILocation(line: 1836, column: 4, scope: !6949)
!6954 = !DILocalVariable(name: "instrs", scope: !6949, file: !3, line: 1837, type: !5248)
!6955 = !DILocation(line: 1837, column: 24, scope: !6949)
!6956 = !DILocation(line: 1837, column: 35, scope: !6949)
!6957 = !DILocation(line: 1838, column: 4, scope: !6949)
!6958 = !DILocation(line: 1838, column: 4, scope: !6959)
!6959 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 1838, column: 4)
!6960 = !DILocation(line: 1839, column: 4, scope: !6949)
!6961 = !DILocation(line: 1839, column: 4, scope: !6962)
!6962 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 1839, column: 4)
!6963 = !DILocalVariable(name: "op", scope: !6949, file: !3, line: 1841, type: !4432)
!6964 = !DILocation(line: 1841, column: 25, scope: !6949)
!6965 = !DILocation(line: 1841, column: 30, scope: !6949)
!6966 = !DILocation(line: 1843, column: 23, scope: !6949)
!6967 = !DILocation(line: 1843, column: 10, scope: !6949)
!6968 = !DILocation(line: 1843, column: 3, scope: !6949)
!6969 = !DILocation(line: 1846, column: 2, scope: !6941)
!6970 = !DILocation(line: 1846, column: 8, scope: !6941)
!6971 = !DILocation(line: 1846, column: 15, scope: !6941)
!6972 = !DILocation(line: 1846, column: 23, scope: !6941)
!6973 = !DILocation(line: 1848, column: 2, scope: !6941)
!6974 = !DILocation(line: 1849, column: 1, scope: !6941)
!6975 = distinct !DISubprogram(name: "nand_check_op", scope: !4207, file: !4207, line: 119, type: !5988, scopeLine: 121, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6976 = !DILocalVariable(name: "chip", arg: 1, scope: !6975, file: !4207, line: 119, type: !4166)
!6977 = !DILocation(line: 119, column: 51, scope: !6975)
!6978 = !DILocalVariable(name: "op", arg: 2, scope: !6975, file: !4207, line: 120, type: !4430)
!6979 = !DILocation(line: 120, column: 34, scope: !6975)
!6980 = !DILocation(line: 122, column: 24, scope: !6981)
!6981 = distinct !DILexicalBlock(scope: !6975, file: !4207, line: 122, column: 6)
!6982 = !DILocation(line: 122, column: 7, scope: !6981)
!6983 = !DILocation(line: 122, column: 6, scope: !6975)
!6984 = !DILocation(line: 123, column: 3, scope: !6981)
!6985 = !DILocation(line: 125, column: 9, scope: !6975)
!6986 = !DILocation(line: 125, column: 15, scope: !6975)
!6987 = !DILocation(line: 125, column: 27, scope: !6975)
!6988 = !DILocation(line: 125, column: 32, scope: !6975)
!6989 = !DILocation(line: 125, column: 40, scope: !6975)
!6990 = !DILocation(line: 125, column: 46, scope: !6975)
!6991 = !DILocation(line: 125, column: 2, scope: !6975)
!6992 = !DILocation(line: 126, column: 1, scope: !6975)
!6993 = distinct !DISubprogram(name: "nand_write_data_op", scope: !3, file: !3, line: 1917, type: !6994, scopeLine: 1919, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!6994 = !DISubroutineType(types: !6995)
!6995 = !{!240, !4166, !189, !7, !180}
!6996 = !DILocalVariable(name: "chip", arg: 1, scope: !6993, file: !3, line: 1917, type: !4166)
!6997 = !DILocation(line: 1917, column: 42, scope: !6993)
!6998 = !DILocalVariable(name: "buf", arg: 2, scope: !6993, file: !3, line: 1917, type: !189)
!6999 = !DILocation(line: 1917, column: 60, scope: !6993)
!7000 = !DILocalVariable(name: "len", arg: 3, scope: !6993, file: !3, line: 1918, type: !7)
!7001 = !DILocation(line: 1918, column: 23, scope: !6993)
!7002 = !DILocalVariable(name: "force_8bit", arg: 4, scope: !6993, file: !3, line: 1918, type: !180)
!7003 = !DILocation(line: 1918, column: 33, scope: !6993)
!7004 = !DILocation(line: 1920, column: 7, scope: !7005)
!7005 = distinct !DILexicalBlock(scope: !6993, file: !3, line: 1920, column: 6)
!7006 = !DILocation(line: 1920, column: 11, scope: !7005)
!7007 = !DILocation(line: 1920, column: 15, scope: !7005)
!7008 = !DILocation(line: 1920, column: 6, scope: !6993)
!7009 = !DILocation(line: 1921, column: 3, scope: !7005)
!7010 = !DILocation(line: 1923, column: 23, scope: !7011)
!7011 = distinct !DILexicalBlock(scope: !6993, file: !3, line: 1923, column: 6)
!7012 = !DILocation(line: 1923, column: 6, scope: !7011)
!7013 = !DILocation(line: 1923, column: 6, scope: !6993)
!7014 = !DILocalVariable(name: "instrs", scope: !7015, file: !3, line: 1924, type: !5308)
!7015 = distinct !DILexicalBlock(scope: !7011, file: !3, line: 1923, column: 30)
!7016 = !DILocation(line: 1924, column: 24, scope: !7015)
!7017 = !DILocation(line: 1924, column: 35, scope: !7015)
!7018 = !DILocation(line: 1925, column: 4, scope: !7015)
!7019 = !DILocalVariable(name: "op", scope: !7015, file: !3, line: 1927, type: !4432)
!7020 = !DILocation(line: 1927, column: 25, scope: !7015)
!7021 = !DILocation(line: 1927, column: 30, scope: !7015)
!7022 = !DILocation(line: 1929, column: 35, scope: !7015)
!7023 = !DILocation(line: 1929, column: 3, scope: !7015)
!7024 = !DILocation(line: 1929, column: 13, scope: !7015)
!7025 = !DILocation(line: 1929, column: 17, scope: !7015)
!7026 = !DILocation(line: 1929, column: 22, scope: !7015)
!7027 = !DILocation(line: 1929, column: 33, scope: !7015)
!7028 = !DILocation(line: 1931, column: 23, scope: !7015)
!7029 = !DILocation(line: 1931, column: 10, scope: !7015)
!7030 = !DILocation(line: 1931, column: 3, scope: !7015)
!7031 = !DILocation(line: 1934, column: 6, scope: !7032)
!7032 = distinct !DILexicalBlock(scope: !6993, file: !3, line: 1934, column: 6)
!7033 = !DILocation(line: 1934, column: 6, scope: !6993)
!7034 = !DILocalVariable(name: "p", scope: !7035, file: !3, line: 1935, type: !4388)
!7035 = distinct !DILexicalBlock(scope: !7032, file: !3, line: 1934, column: 18)
!7036 = !DILocation(line: 1935, column: 13, scope: !7035)
!7037 = !DILocation(line: 1935, column: 17, scope: !7035)
!7038 = !DILocalVariable(name: "i", scope: !7035, file: !3, line: 1936, type: !7)
!7039 = !DILocation(line: 1936, column: 16, scope: !7035)
!7040 = !DILocation(line: 1938, column: 10, scope: !7041)
!7041 = distinct !DILexicalBlock(scope: !7035, file: !3, line: 1938, column: 3)
!7042 = !DILocation(line: 1938, column: 8, scope: !7041)
!7043 = !DILocation(line: 1938, column: 15, scope: !7044)
!7044 = distinct !DILexicalBlock(scope: !7041, file: !3, line: 1938, column: 3)
!7045 = !DILocation(line: 1938, column: 19, scope: !7044)
!7046 = !DILocation(line: 1938, column: 17, scope: !7044)
!7047 = !DILocation(line: 1938, column: 3, scope: !7041)
!7048 = !DILocation(line: 1939, column: 4, scope: !7044)
!7049 = !DILocation(line: 1939, column: 10, scope: !7044)
!7050 = !DILocation(line: 1939, column: 17, scope: !7044)
!7051 = !DILocation(line: 1939, column: 28, scope: !7044)
!7052 = !DILocation(line: 1939, column: 34, scope: !7044)
!7053 = !DILocation(line: 1939, column: 36, scope: !7044)
!7054 = !DILocation(line: 1938, column: 25, scope: !7044)
!7055 = !DILocation(line: 1938, column: 3, scope: !7044)
!7056 = distinct !{!7056, !7047, !7057}
!7057 = !DILocation(line: 1939, column: 38, scope: !7041)
!7058 = !DILocation(line: 1940, column: 2, scope: !7035)
!7059 = !DILocation(line: 1941, column: 3, scope: !7060)
!7060 = distinct !DILexicalBlock(scope: !7032, file: !3, line: 1940, column: 9)
!7061 = !DILocation(line: 1941, column: 9, scope: !7060)
!7062 = !DILocation(line: 1941, column: 16, scope: !7060)
!7063 = !DILocation(line: 1941, column: 26, scope: !7060)
!7064 = !DILocation(line: 1941, column: 32, scope: !7060)
!7065 = !DILocation(line: 1941, column: 37, scope: !7060)
!7066 = !DILocation(line: 1944, column: 2, scope: !6993)
!7067 = !DILocation(line: 1945, column: 1, scope: !6993)
!7068 = distinct !DISubprogram(name: "nand_op_parser_exec_op", scope: !3, file: !3, line: 2169, type: !7069, scopeLine: 2172, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7069 = !DISubroutineType(types: !7070)
!7070 = !{!240, !4166, !7071, !4430, !180}
!7071 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7072, size: 64)
!7072 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7073)
!7073 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_parser", file: !117, line: 840, size: 128, elements: !7074)
!7074 = !{!7075, !7112}
!7075 = !DIDerivedType(tag: DW_TAG_member, name: "patterns", scope: !7073, file: !117, line: 841, baseType: !7076, size: 64)
!7076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7077, size: 64)
!7077 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7078)
!7078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_parser_pattern", file: !117, line: 812, size: 192, elements: !7079)
!7079 = !{!7080, !7098, !7099}
!7080 = !DIDerivedType(tag: DW_TAG_member, name: "elems", scope: !7078, file: !117, line: 813, baseType: !7081, size: 64)
!7081 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7082, size: 64)
!7082 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7083)
!7083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_parser_pattern_elem", file: !117, line: 752, size: 96, elements: !7084)
!7084 = !{!7085, !7086, !7087}
!7085 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !7083, file: !117, line: 753, baseType: !120, size: 32)
!7086 = !DIDerivedType(tag: DW_TAG_member, name: "optional", scope: !7083, file: !117, line: 754, baseType: !180, size: 8, offset: 32)
!7087 = !DIDerivedType(tag: DW_TAG_member, name: "ctx", scope: !7083, file: !117, line: 758, baseType: !7088, size: 32, offset: 64)
!7088 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !7083, file: !117, line: 755, size: 32, elements: !7089)
!7089 = !{!7090, !7094}
!7090 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !7088, file: !117, line: 756, baseType: !7091, size: 32)
!7091 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_parser_addr_constraints", file: !117, line: 732, size: 32, elements: !7092)
!7092 = !{!7093}
!7093 = !DIDerivedType(tag: DW_TAG_member, name: "maxcycles", scope: !7091, file: !117, line: 733, baseType: !7, size: 32)
!7094 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !7088, file: !117, line: 757, baseType: !7095, size: 32)
!7095 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_parser_data_constraints", file: !117, line: 740, size: 32, elements: !7096)
!7096 = !{!7097}
!7097 = !DIDerivedType(tag: DW_TAG_member, name: "maxlen", scope: !7095, file: !117, line: 741, baseType: !7, size: 32)
!7098 = !DIDerivedType(tag: DW_TAG_member, name: "nelems", scope: !7078, file: !117, line: 814, baseType: !7, size: 32, offset: 64)
!7099 = !DIDerivedType(tag: DW_TAG_member, name: "exec", scope: !7078, file: !117, line: 815, baseType: !7100, size: 64, offset: 128)
!7100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7101, size: 64)
!7101 = !DISubroutineType(types: !7102)
!7102 = !{!240, !4166, !7103}
!7103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7104, size: 64)
!7104 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7105)
!7105 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_subop", file: !117, line: 710, size: 256, elements: !7106)
!7106 = !{!7107, !7108, !7109, !7110, !7111}
!7107 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !7105, file: !117, line: 711, baseType: !7, size: 32)
!7108 = !DIDerivedType(tag: DW_TAG_member, name: "instrs", scope: !7105, file: !117, line: 712, baseType: !4436, size: 64, offset: 64)
!7109 = !DIDerivedType(tag: DW_TAG_member, name: "ninstrs", scope: !7105, file: !117, line: 713, baseType: !7, size: 32, offset: 128)
!7110 = !DIDerivedType(tag: DW_TAG_member, name: "first_instr_start_off", scope: !7105, file: !117, line: 714, baseType: !7, size: 32, offset: 160)
!7111 = !DIDerivedType(tag: DW_TAG_member, name: "last_instr_end_off", scope: !7105, file: !117, line: 715, baseType: !7, size: 32, offset: 192)
!7112 = !DIDerivedType(tag: DW_TAG_member, name: "npatterns", scope: !7073, file: !117, line: 842, baseType: !7, size: 32, offset: 64)
!7113 = !DILocalVariable(name: "chip", arg: 1, scope: !7068, file: !3, line: 2169, type: !4166)
!7114 = !DILocation(line: 2169, column: 46, scope: !7068)
!7115 = !DILocalVariable(name: "parser", arg: 2, scope: !7068, file: !3, line: 2170, type: !7071)
!7116 = !DILocation(line: 2170, column: 36, scope: !7068)
!7117 = !DILocalVariable(name: "op", arg: 3, scope: !7068, file: !3, line: 2171, type: !4430)
!7118 = !DILocation(line: 2171, column: 36, scope: !7068)
!7119 = !DILocalVariable(name: "check_only", arg: 4, scope: !7068, file: !3, line: 2171, type: !180)
!7120 = !DILocation(line: 2171, column: 45, scope: !7068)
!7121 = !DILocalVariable(name: "ctx", scope: !7068, file: !3, line: 2173, type: !7122)
!7122 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_op_parser_ctx", file: !3, line: 1957, size: 384, elements: !7123)
!7123 = !{!7124, !7125, !7126}
!7124 = !DIDerivedType(tag: DW_TAG_member, name: "instrs", scope: !7122, file: !3, line: 1958, baseType: !4436, size: 64)
!7125 = !DIDerivedType(tag: DW_TAG_member, name: "ninstrs", scope: !7122, file: !3, line: 1959, baseType: !7, size: 32, offset: 64)
!7126 = !DIDerivedType(tag: DW_TAG_member, name: "subop", scope: !7122, file: !3, line: 1960, baseType: !7105, size: 256, offset: 128)
!7127 = !DILocation(line: 2173, column: 28, scope: !7068)
!7128 = !DILocation(line: 2173, column: 34, scope: !7068)
!7129 = !DILocation(line: 2176, column: 13, scope: !7068)
!7130 = !DILocation(line: 2176, column: 17, scope: !7068)
!7131 = !DILocation(line: 2177, column: 14, scope: !7068)
!7132 = !DILocation(line: 2177, column: 18, scope: !7068)
!7133 = !DILocation(line: 2174, column: 9, scope: !7068)
!7134 = !DILocation(line: 2174, column: 15, scope: !7068)
!7135 = !DILocation(line: 2174, column: 19, scope: !7068)
!7136 = !DILocation(line: 2175, column: 19, scope: !7068)
!7137 = !DILocation(line: 2175, column: 23, scope: !7068)
!7138 = !DILocalVariable(name: "i", scope: !7068, file: !3, line: 2179, type: !7)
!7139 = !DILocation(line: 2179, column: 15, scope: !7068)
!7140 = !DILocation(line: 2181, column: 2, scope: !7068)
!7141 = !DILocation(line: 2181, column: 13, scope: !7068)
!7142 = !DILocation(line: 2181, column: 19, scope: !7068)
!7143 = !DILocation(line: 2181, column: 28, scope: !7068)
!7144 = !DILocation(line: 2181, column: 32, scope: !7068)
!7145 = !DILocation(line: 2181, column: 41, scope: !7068)
!7146 = !DILocation(line: 2181, column: 45, scope: !7068)
!7147 = !DILocation(line: 2181, column: 39, scope: !7068)
!7148 = !DILocation(line: 2181, column: 26, scope: !7068)
!7149 = !DILocalVariable(name: "pattern", scope: !7150, file: !3, line: 2182, type: !7076)
!7150 = distinct !DILexicalBlock(scope: !7068, file: !3, line: 2181, column: 54)
!7151 = !DILocation(line: 2182, column: 40, scope: !7150)
!7152 = !DILocalVariable(name: "best_ctx", scope: !7150, file: !3, line: 2183, type: !7122)
!7153 = !DILocation(line: 2183, column: 29, scope: !7150)
!7154 = !DILocalVariable(name: "ret", scope: !7150, file: !3, line: 2184, type: !240)
!7155 = !DILocation(line: 2184, column: 7, scope: !7150)
!7156 = !DILocalVariable(name: "best_pattern", scope: !7150, file: !3, line: 2184, type: !240)
!7157 = !DILocation(line: 2184, column: 12, scope: !7150)
!7158 = !DILocation(line: 2186, column: 10, scope: !7159)
!7159 = distinct !DILexicalBlock(scope: !7150, file: !3, line: 2186, column: 3)
!7160 = !DILocation(line: 2186, column: 8, scope: !7159)
!7161 = !DILocation(line: 2186, column: 15, scope: !7162)
!7162 = distinct !DILexicalBlock(scope: !7159, file: !3, line: 2186, column: 3)
!7163 = !DILocation(line: 2186, column: 19, scope: !7162)
!7164 = !DILocation(line: 2186, column: 27, scope: !7162)
!7165 = !DILocation(line: 2186, column: 17, scope: !7162)
!7166 = !DILocation(line: 2186, column: 3, scope: !7159)
!7167 = !DILocalVariable(name: "test_ctx", scope: !7168, file: !3, line: 2187, type: !7122)
!7168 = distinct !DILexicalBlock(scope: !7162, file: !3, line: 2186, column: 43)
!7169 = !DILocation(line: 2187, column: 30, scope: !7168)
!7170 = !DILocation(line: 2187, column: 41, scope: !7168)
!7171 = !DILocation(line: 2189, column: 15, scope: !7168)
!7172 = !DILocation(line: 2189, column: 23, scope: !7168)
!7173 = !DILocation(line: 2189, column: 32, scope: !7168)
!7174 = !DILocation(line: 2189, column: 12, scope: !7168)
!7175 = !DILocation(line: 2190, column: 34, scope: !7176)
!7176 = distinct !DILexicalBlock(scope: !7168, file: !3, line: 2190, column: 8)
!7177 = !DILocation(line: 2190, column: 9, scope: !7176)
!7178 = !DILocation(line: 2190, column: 8, scope: !7168)
!7179 = !DILocation(line: 2191, column: 5, scope: !7176)
!7180 = !DILocation(line: 2193, column: 8, scope: !7181)
!7181 = distinct !DILexicalBlock(scope: !7168, file: !3, line: 2193, column: 8)
!7182 = !DILocation(line: 2193, column: 21, scope: !7181)
!7183 = !DILocation(line: 2193, column: 26, scope: !7181)
!7184 = !DILocation(line: 2194, column: 8, scope: !7181)
!7185 = !DILocation(line: 2194, column: 53, scope: !7181)
!7186 = !DILocation(line: 2193, column: 8, scope: !7168)
!7187 = !DILocation(line: 2195, column: 5, scope: !7181)
!7188 = !DILocation(line: 2197, column: 19, scope: !7168)
!7189 = !DILocation(line: 2197, column: 17, scope: !7168)
!7190 = !DILocation(line: 2198, column: 15, scope: !7168)
!7191 = !DILocation(line: 2199, column: 3, scope: !7168)
!7192 = !DILocation(line: 2186, column: 39, scope: !7162)
!7193 = !DILocation(line: 2186, column: 3, scope: !7162)
!7194 = distinct !{!7194, !7166, !7195}
!7195 = !DILocation(line: 2199, column: 3, scope: !7159)
!7196 = !DILocation(line: 2201, column: 7, scope: !7197)
!7197 = distinct !DILexicalBlock(scope: !7150, file: !3, line: 2201, column: 7)
!7198 = !DILocation(line: 2201, column: 20, scope: !7197)
!7199 = !DILocation(line: 2201, column: 7, scope: !7150)
!7200 = !DILocation(line: 2202, column: 4, scope: !7201)
!7201 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 2202, column: 4)
!7202 = distinct !DILexicalBlock(scope: !7203, file: !3, line: 2202, column: 4)
!7203 = distinct !DILexicalBlock(scope: !7197, file: !3, line: 2201, column: 25)
!7204 = !DILocation(line: 2202, column: 4, scope: !7202)
!7205 = !DILocation(line: 2203, column: 4, scope: !7203)
!7206 = !DILocation(line: 2206, column: 9, scope: !7150)
!7207 = !DILocation(line: 2207, column: 3, scope: !7150)
!7208 = !DILocation(line: 2209, column: 8, scope: !7209)
!7209 = distinct !DILexicalBlock(scope: !7150, file: !3, line: 2209, column: 7)
!7210 = !DILocation(line: 2209, column: 7, scope: !7150)
!7211 = !DILocation(line: 2210, column: 15, scope: !7212)
!7212 = distinct !DILexicalBlock(scope: !7209, file: !3, line: 2209, column: 20)
!7213 = !DILocation(line: 2210, column: 23, scope: !7212)
!7214 = !DILocation(line: 2210, column: 32, scope: !7212)
!7215 = !DILocation(line: 2210, column: 12, scope: !7212)
!7216 = !DILocation(line: 2211, column: 10, scope: !7212)
!7217 = !DILocation(line: 2211, column: 19, scope: !7212)
!7218 = !DILocation(line: 2211, column: 24, scope: !7212)
!7219 = !DILocation(line: 2211, column: 35, scope: !7212)
!7220 = !DILocation(line: 2211, column: 8, scope: !7212)
!7221 = !DILocation(line: 2212, column: 8, scope: !7222)
!7222 = distinct !DILexicalBlock(scope: !7212, file: !3, line: 2212, column: 8)
!7223 = !DILocation(line: 2212, column: 8, scope: !7212)
!7224 = !DILocation(line: 2213, column: 12, scope: !7222)
!7225 = !DILocation(line: 2213, column: 5, scope: !7222)
!7226 = !DILocation(line: 2214, column: 3, scope: !7212)
!7227 = !DILocation(line: 2220, column: 26, scope: !7150)
!7228 = !DILocation(line: 2220, column: 32, scope: !7150)
!7229 = !DILocation(line: 2220, column: 45, scope: !7150)
!7230 = !DILocation(line: 2220, column: 51, scope: !7150)
!7231 = !DILocation(line: 2220, column: 39, scope: !7150)
!7232 = !DILocation(line: 2220, column: 7, scope: !7150)
!7233 = !DILocation(line: 2220, column: 13, scope: !7150)
!7234 = !DILocation(line: 2220, column: 20, scope: !7150)
!7235 = !DILocation(line: 2221, column: 11, scope: !7236)
!7236 = distinct !DILexicalBlock(scope: !7150, file: !3, line: 2221, column: 7)
!7237 = !DILocation(line: 2221, column: 17, scope: !7236)
!7238 = !DILocation(line: 2221, column: 7, scope: !7236)
!7239 = !DILocation(line: 2221, column: 7, scope: !7150)
!7240 = !DILocation(line: 2222, column: 8, scope: !7236)
!7241 = !DILocation(line: 2222, column: 14, scope: !7236)
!7242 = !DILocation(line: 2222, column: 21, scope: !7236)
!7243 = !DILocation(line: 2222, column: 4, scope: !7236)
!7244 = !DILocation(line: 2224, column: 41, scope: !7150)
!7245 = !DILocation(line: 2224, column: 47, scope: !7150)
!7246 = !DILocation(line: 2224, column: 7, scope: !7150)
!7247 = !DILocation(line: 2224, column: 13, scope: !7150)
!7248 = !DILocation(line: 2224, column: 35, scope: !7150)
!7249 = distinct !{!7249, !7140, !7250}
!7250 = !DILocation(line: 2225, column: 2, scope: !7068)
!7251 = !DILocation(line: 2227, column: 2, scope: !7068)
!7252 = !DILocation(line: 2228, column: 1, scope: !7068)
!7253 = distinct !DISubprogram(name: "nand_op_parser_match_pat", scope: !3, file: !3, line: 2031, type: !7254, scopeLine: 2033, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7254 = !DISubroutineType(types: !7255)
!7255 = !{!180, !7076, !7256}
!7256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7122, size: 64)
!7257 = !DILocalVariable(name: "pat", arg: 1, scope: !7253, file: !3, line: 2031, type: !7076)
!7258 = !DILocation(line: 2031, column: 63, scope: !7253)
!7259 = !DILocalVariable(name: "ctx", arg: 2, scope: !7253, file: !3, line: 2032, type: !7256)
!7260 = !DILocation(line: 2032, column: 32, scope: !7253)
!7261 = !DILocalVariable(name: "instr_offset", scope: !7253, file: !3, line: 2034, type: !7)
!7262 = !DILocation(line: 2034, column: 15, scope: !7253)
!7263 = !DILocation(line: 2034, column: 30, scope: !7253)
!7264 = !DILocation(line: 2034, column: 35, scope: !7253)
!7265 = !DILocation(line: 2034, column: 41, scope: !7253)
!7266 = !DILocalVariable(name: "end", scope: !7253, file: !3, line: 2035, type: !4436)
!7267 = !DILocation(line: 2035, column: 30, scope: !7253)
!7268 = !DILocation(line: 2035, column: 36, scope: !7253)
!7269 = !DILocation(line: 2035, column: 41, scope: !7253)
!7270 = !DILocation(line: 2035, column: 50, scope: !7253)
!7271 = !DILocation(line: 2035, column: 55, scope: !7253)
!7272 = !DILocation(line: 2035, column: 48, scope: !7253)
!7273 = !DILocalVariable(name: "instr", scope: !7253, file: !3, line: 2036, type: !4436)
!7274 = !DILocation(line: 2036, column: 30, scope: !7253)
!7275 = !DILocation(line: 2036, column: 38, scope: !7253)
!7276 = !DILocation(line: 2036, column: 43, scope: !7253)
!7277 = !DILocation(line: 2036, column: 49, scope: !7253)
!7278 = !DILocalVariable(name: "i", scope: !7253, file: !3, line: 2037, type: !7)
!7279 = !DILocation(line: 2037, column: 15, scope: !7253)
!7280 = !DILocalVariable(name: "ninstrs", scope: !7253, file: !3, line: 2037, type: !7)
!7281 = !DILocation(line: 2037, column: 18, scope: !7253)
!7282 = !DILocation(line: 2039, column: 9, scope: !7283)
!7283 = distinct !DILexicalBlock(scope: !7253, file: !3, line: 2039, column: 2)
!7284 = !DILocation(line: 2039, column: 22, scope: !7283)
!7285 = !DILocation(line: 2039, column: 7, scope: !7283)
!7286 = !DILocation(line: 2039, column: 27, scope: !7287)
!7287 = distinct !DILexicalBlock(scope: !7283, file: !3, line: 2039, column: 2)
!7288 = !DILocation(line: 2039, column: 31, scope: !7287)
!7289 = !DILocation(line: 2039, column: 36, scope: !7287)
!7290 = !DILocation(line: 2039, column: 29, scope: !7287)
!7291 = !DILocation(line: 2039, column: 43, scope: !7287)
!7292 = !DILocation(line: 2039, column: 46, scope: !7287)
!7293 = !DILocation(line: 2039, column: 54, scope: !7287)
!7294 = !DILocation(line: 2039, column: 52, scope: !7287)
!7295 = !DILocation(line: 0, scope: !7287)
!7296 = !DILocation(line: 2039, column: 2, scope: !7283)
!7297 = !DILocation(line: 2047, column: 7, scope: !7298)
!7298 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 2047, column: 7)
!7299 = distinct !DILexicalBlock(scope: !7287, file: !3, line: 2039, column: 64)
!7300 = !DILocation(line: 2047, column: 14, scope: !7298)
!7301 = !DILocation(line: 2047, column: 22, scope: !7298)
!7302 = !DILocation(line: 2047, column: 27, scope: !7298)
!7303 = !DILocation(line: 2047, column: 33, scope: !7298)
!7304 = !DILocation(line: 2047, column: 36, scope: !7298)
!7305 = !DILocation(line: 2047, column: 19, scope: !7298)
!7306 = !DILocation(line: 2047, column: 7, scope: !7299)
!7307 = !DILocation(line: 2048, column: 9, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7309, file: !3, line: 2048, column: 8)
!7309 = distinct !DILexicalBlock(scope: !7298, file: !3, line: 2047, column: 42)
!7310 = !DILocation(line: 2048, column: 14, scope: !7308)
!7311 = !DILocation(line: 2048, column: 20, scope: !7308)
!7312 = !DILocation(line: 2048, column: 23, scope: !7308)
!7313 = !DILocation(line: 2048, column: 8, scope: !7309)
!7314 = !DILocation(line: 2049, column: 5, scope: !7308)
!7315 = !DILocation(line: 2051, column: 4, scope: !7309)
!7316 = !DILocation(line: 2062, column: 40, scope: !7317)
!7317 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 2062, column: 7)
!7318 = !DILocation(line: 2062, column: 45, scope: !7317)
!7319 = !DILocation(line: 2062, column: 51, scope: !7317)
!7320 = !DILocation(line: 2062, column: 55, scope: !7317)
!7321 = !DILocation(line: 2062, column: 7, scope: !7317)
!7322 = !DILocation(line: 2062, column: 7, scope: !7299)
!7323 = !DILocation(line: 2064, column: 11, scope: !7324)
!7324 = distinct !DILexicalBlock(scope: !7317, file: !3, line: 2063, column: 27)
!7325 = !DILocation(line: 2065, column: 5, scope: !7324)
!7326 = !DILocation(line: 2066, column: 4, scope: !7324)
!7327 = !DILocation(line: 2069, column: 8, scope: !7299)
!7328 = !DILocation(line: 2070, column: 10, scope: !7299)
!7329 = !DILocation(line: 2071, column: 16, scope: !7299)
!7330 = !DILocation(line: 2072, column: 2, scope: !7299)
!7331 = !DILocation(line: 2039, column: 60, scope: !7287)
!7332 = !DILocation(line: 2039, column: 2, scope: !7287)
!7333 = distinct !{!7333, !7296, !7334}
!7334 = !DILocation(line: 2072, column: 2, scope: !7283)
!7335 = !DILocation(line: 2080, column: 7, scope: !7336)
!7336 = distinct !DILexicalBlock(scope: !7253, file: !3, line: 2080, column: 6)
!7337 = !DILocation(line: 2080, column: 6, scope: !7253)
!7338 = !DILocation(line: 2081, column: 3, scope: !7336)
!7339 = !DILocation(line: 2088, column: 2, scope: !7253)
!7340 = !DILocation(line: 2088, column: 9, scope: !7341)
!7341 = distinct !DILexicalBlock(scope: !7342, file: !3, line: 2088, column: 2)
!7342 = distinct !DILexicalBlock(scope: !7253, file: !3, line: 2088, column: 2)
!7343 = !DILocation(line: 2088, column: 13, scope: !7341)
!7344 = !DILocation(line: 2088, column: 18, scope: !7341)
!7345 = !DILocation(line: 2088, column: 11, scope: !7341)
!7346 = !DILocation(line: 2088, column: 2, scope: !7342)
!7347 = !DILocation(line: 2089, column: 8, scope: !7348)
!7348 = distinct !DILexicalBlock(scope: !7349, file: !3, line: 2089, column: 7)
!7349 = distinct !DILexicalBlock(scope: !7341, file: !3, line: 2088, column: 31)
!7350 = !DILocation(line: 2089, column: 13, scope: !7348)
!7351 = !DILocation(line: 2089, column: 19, scope: !7348)
!7352 = !DILocation(line: 2089, column: 22, scope: !7348)
!7353 = !DILocation(line: 2089, column: 7, scope: !7349)
!7354 = !DILocation(line: 2090, column: 4, scope: !7348)
!7355 = !DILocation(line: 2091, column: 2, scope: !7349)
!7356 = !DILocation(line: 2088, column: 27, scope: !7341)
!7357 = !DILocation(line: 2088, column: 2, scope: !7341)
!7358 = distinct !{!7358, !7346, !7359}
!7359 = !DILocation(line: 2091, column: 2, scope: !7342)
!7360 = !DILocation(line: 2097, column: 23, scope: !7253)
!7361 = !DILocation(line: 2097, column: 2, scope: !7253)
!7362 = !DILocation(line: 2097, column: 7, scope: !7253)
!7363 = !DILocation(line: 2097, column: 13, scope: !7253)
!7364 = !DILocation(line: 2097, column: 21, scope: !7253)
!7365 = !DILocation(line: 2098, column: 34, scope: !7253)
!7366 = !DILocation(line: 2098, column: 2, scope: !7253)
!7367 = !DILocation(line: 2098, column: 7, scope: !7253)
!7368 = !DILocation(line: 2098, column: 13, scope: !7253)
!7369 = !DILocation(line: 2098, column: 32, scope: !7253)
!7370 = !DILocation(line: 2100, column: 2, scope: !7253)
!7371 = !DILocation(line: 2101, column: 1, scope: !7253)
!7372 = distinct !DISubprogram(name: "nand_op_parser_cmp_ctx", scope: !3, file: !3, line: 2131, type: !7373, scopeLine: 2133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7373 = !DISubroutineType(types: !7374)
!7374 = !{!240, !7375, !7375}
!7375 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7376, size: 64)
!7376 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7122)
!7377 = !DILocalVariable(name: "a", arg: 1, scope: !7372, file: !3, line: 2131, type: !7375)
!7378 = !DILocation(line: 2131, column: 68, scope: !7372)
!7379 = !DILocalVariable(name: "b", arg: 2, scope: !7372, file: !3, line: 2132, type: !7375)
!7380 = !DILocation(line: 2132, column: 40, scope: !7372)
!7381 = !DILocation(line: 2134, column: 6, scope: !7382)
!7382 = distinct !DILexicalBlock(scope: !7372, file: !3, line: 2134, column: 6)
!7383 = !DILocation(line: 2134, column: 9, scope: !7382)
!7384 = !DILocation(line: 2134, column: 15, scope: !7382)
!7385 = !DILocation(line: 2134, column: 25, scope: !7382)
!7386 = !DILocation(line: 2134, column: 28, scope: !7382)
!7387 = !DILocation(line: 2134, column: 34, scope: !7382)
!7388 = !DILocation(line: 2134, column: 23, scope: !7382)
!7389 = !DILocation(line: 2134, column: 6, scope: !7372)
!7390 = !DILocation(line: 2135, column: 3, scope: !7382)
!7391 = !DILocation(line: 2136, column: 11, scope: !7392)
!7392 = distinct !DILexicalBlock(scope: !7382, file: !3, line: 2136, column: 11)
!7393 = !DILocation(line: 2136, column: 14, scope: !7392)
!7394 = !DILocation(line: 2136, column: 20, scope: !7392)
!7395 = !DILocation(line: 2136, column: 30, scope: !7392)
!7396 = !DILocation(line: 2136, column: 33, scope: !7392)
!7397 = !DILocation(line: 2136, column: 39, scope: !7392)
!7398 = !DILocation(line: 2136, column: 28, scope: !7392)
!7399 = !DILocation(line: 2136, column: 11, scope: !7382)
!7400 = !DILocation(line: 2137, column: 3, scope: !7392)
!7401 = !DILocation(line: 2139, column: 6, scope: !7402)
!7402 = distinct !DILexicalBlock(scope: !7372, file: !3, line: 2139, column: 6)
!7403 = !DILocation(line: 2139, column: 9, scope: !7402)
!7404 = !DILocation(line: 2139, column: 15, scope: !7402)
!7405 = !DILocation(line: 2139, column: 36, scope: !7402)
!7406 = !DILocation(line: 2139, column: 39, scope: !7402)
!7407 = !DILocation(line: 2139, column: 45, scope: !7402)
!7408 = !DILocation(line: 2139, column: 34, scope: !7402)
!7409 = !DILocation(line: 2139, column: 6, scope: !7372)
!7410 = !DILocation(line: 2140, column: 3, scope: !7402)
!7411 = !DILocation(line: 2141, column: 11, scope: !7412)
!7412 = distinct !DILexicalBlock(scope: !7402, file: !3, line: 2141, column: 11)
!7413 = !DILocation(line: 2141, column: 14, scope: !7412)
!7414 = !DILocation(line: 2141, column: 20, scope: !7412)
!7415 = !DILocation(line: 2141, column: 41, scope: !7412)
!7416 = !DILocation(line: 2141, column: 44, scope: !7412)
!7417 = !DILocation(line: 2141, column: 50, scope: !7412)
!7418 = !DILocation(line: 2141, column: 39, scope: !7412)
!7419 = !DILocation(line: 2141, column: 11, scope: !7402)
!7420 = !DILocation(line: 2142, column: 3, scope: !7412)
!7421 = !DILocation(line: 2144, column: 2, scope: !7372)
!7422 = !DILocation(line: 2145, column: 1, scope: !7372)
!7423 = distinct !DISubprogram(name: "nand_op_parser_trace", scope: !3, file: !3, line: 2125, type: !7424, scopeLine: 2126, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7424 = !DISubroutineType(types: !7425)
!7425 = !{null, !7375}
!7426 = !DILocalVariable(name: "ctx", arg: 1, scope: !7423, file: !3, line: 2125, type: !7375)
!7427 = !DILocation(line: 2125, column: 67, scope: !7423)
!7428 = !DILocation(line: 2128, column: 1, scope: !7423)
!7429 = distinct !DISubprogram(name: "nand_subop_get_addr_start_off", scope: !3, file: !3, line: 2263, type: !7430, scopeLine: 2265, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7430 = !DISubroutineType(types: !7431)
!7431 = !{!7, !7103, !7}
!7432 = !DILocalVariable(name: "subop", arg: 1, scope: !7429, file: !3, line: 2263, type: !7103)
!7433 = !DILocation(line: 2263, column: 69, scope: !7429)
!7434 = !DILocalVariable(name: "instr_idx", arg: 2, scope: !7429, file: !3, line: 2264, type: !7)
!7435 = !DILocation(line: 2264, column: 22, scope: !7429)
!7436 = !DILocalVariable(name: "__ret_warn_on", scope: !7437, file: !3, line: 2266, type: !240)
!7437 = distinct !DILexicalBlock(scope: !7438, file: !3, line: 2266, column: 6)
!7438 = distinct !DILexicalBlock(scope: !7429, file: !3, line: 2266, column: 6)
!7439 = !DILocation(line: 2266, column: 6, scope: !7437)
!7440 = !DILocation(line: 2266, column: 6, scope: !7441)
!7441 = distinct !DILexicalBlock(scope: !7437, file: !3, line: 2266, column: 6)
!7442 = !DILocation(line: 2266, column: 6, scope: !7443)
!7443 = distinct !DILexicalBlock(scope: !7441, file: !3, line: 2266, column: 6)
!7444 = !DILocation(line: 2266, column: 6, scope: !7445)
!7445 = distinct !DILexicalBlock(scope: !7443, file: !3, line: 2266, column: 6)
!7446 = !DILocation(line: 2266, column: 6, scope: !7447)
!7447 = distinct !DILexicalBlock(scope: !7443, file: !3, line: 2266, column: 6)
!7448 = !{i32 -2141576711, i32 -2141576682, i32 -2141576636, i32 -2141576578, i32 -2141576524, i32 -2141576470, i32 -2141576415, i32 -2141576384}
!7449 = !DILocation(line: 2266, column: 6, scope: !7450)
!7450 = distinct !DILexicalBlock(scope: !7443, file: !3, line: 2266, column: 6)
!7451 = !{i32 -2141575969, i32 -2141575962, i32 -2141575910, i32 -2141575879, i32 -2141575849}
!7452 = !DILocation(line: 2266, column: 6, scope: !7453)
!7453 = distinct !DILexicalBlock(scope: !7443, file: !3, line: 2266, column: 6)
!7454 = !DILocation(line: 2266, column: 6, scope: !7438)
!7455 = !DILocation(line: 2266, column: 6, scope: !7429)
!7456 = !DILocation(line: 2268, column: 3, scope: !7438)
!7457 = !DILocation(line: 2270, column: 34, scope: !7429)
!7458 = !DILocation(line: 2270, column: 41, scope: !7429)
!7459 = !DILocation(line: 2270, column: 9, scope: !7429)
!7460 = !DILocation(line: 2270, column: 2, scope: !7429)
!7461 = !DILocation(line: 2271, column: 1, scope: !7429)
!7462 = distinct !DISubprogram(name: "nand_subop_instr_is_valid", scope: !3, file: !3, line: 2237, type: !7463, scopeLine: 2239, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7463 = !DISubroutineType(types: !7464)
!7464 = !{!180, !7103, !7}
!7465 = !DILocalVariable(name: "subop", arg: 1, scope: !7462, file: !3, line: 2237, type: !7103)
!7466 = !DILocation(line: 2237, column: 64, scope: !7462)
!7467 = !DILocalVariable(name: "instr_idx", arg: 2, scope: !7462, file: !3, line: 2238, type: !7)
!7468 = !DILocation(line: 2238, column: 24, scope: !7462)
!7469 = !DILocation(line: 2240, column: 9, scope: !7462)
!7470 = !DILocation(line: 2240, column: 15, scope: !7462)
!7471 = !DILocation(line: 2240, column: 18, scope: !7462)
!7472 = !DILocation(line: 2240, column: 30, scope: !7462)
!7473 = !DILocation(line: 2240, column: 37, scope: !7462)
!7474 = !DILocation(line: 2240, column: 28, scope: !7462)
!7475 = !DILocation(line: 0, scope: !7462)
!7476 = !DILocation(line: 2240, column: 2, scope: !7462)
!7477 = distinct !DISubprogram(name: "nand_subop_get_start_off", scope: !3, file: !3, line: 2243, type: !7430, scopeLine: 2245, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7478 = !DILocalVariable(name: "subop", arg: 1, scope: !7477, file: !3, line: 2243, type: !7103)
!7479 = !DILocation(line: 2243, column: 71, scope: !7477)
!7480 = !DILocalVariable(name: "instr_idx", arg: 2, scope: !7477, file: !3, line: 2244, type: !7)
!7481 = !DILocation(line: 2244, column: 24, scope: !7477)
!7482 = !DILocation(line: 2246, column: 6, scope: !7483)
!7483 = distinct !DILexicalBlock(scope: !7477, file: !3, line: 2246, column: 6)
!7484 = !DILocation(line: 2246, column: 6, scope: !7477)
!7485 = !DILocation(line: 2247, column: 3, scope: !7483)
!7486 = !DILocation(line: 2249, column: 9, scope: !7477)
!7487 = !DILocation(line: 2249, column: 16, scope: !7477)
!7488 = !DILocation(line: 2249, column: 2, scope: !7477)
!7489 = !DILocation(line: 2250, column: 1, scope: !7477)
!7490 = distinct !DISubprogram(name: "nand_subop_get_num_addr_cyc", scope: !3, file: !3, line: 2285, type: !7430, scopeLine: 2287, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7491 = !DILocalVariable(name: "subop", arg: 1, scope: !7490, file: !3, line: 2285, type: !7103)
!7492 = !DILocation(line: 2285, column: 67, scope: !7490)
!7493 = !DILocalVariable(name: "instr_idx", arg: 2, scope: !7490, file: !3, line: 2286, type: !7)
!7494 = !DILocation(line: 2286, column: 20, scope: !7490)
!7495 = !DILocalVariable(name: "start_off", scope: !7490, file: !3, line: 2288, type: !240)
!7496 = !DILocation(line: 2288, column: 6, scope: !7490)
!7497 = !DILocalVariable(name: "end_off", scope: !7490, file: !3, line: 2288, type: !240)
!7498 = !DILocation(line: 2288, column: 17, scope: !7490)
!7499 = !DILocalVariable(name: "__ret_warn_on", scope: !7500, file: !3, line: 2290, type: !240)
!7500 = distinct !DILexicalBlock(scope: !7501, file: !3, line: 2290, column: 6)
!7501 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2290, column: 6)
!7502 = !DILocation(line: 2290, column: 6, scope: !7500)
!7503 = !DILocation(line: 2290, column: 6, scope: !7504)
!7504 = distinct !DILexicalBlock(scope: !7500, file: !3, line: 2290, column: 6)
!7505 = !DILocation(line: 2290, column: 6, scope: !7506)
!7506 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 2290, column: 6)
!7507 = !DILocation(line: 2290, column: 6, scope: !7508)
!7508 = distinct !DILexicalBlock(scope: !7506, file: !3, line: 2290, column: 6)
!7509 = !DILocation(line: 2290, column: 6, scope: !7510)
!7510 = distinct !DILexicalBlock(scope: !7506, file: !3, line: 2290, column: 6)
!7511 = !{i32 -2141575047, i32 -2141575018, i32 -2141574972, i32 -2141574914, i32 -2141574860, i32 -2141574806, i32 -2141574751, i32 -2141574720}
!7512 = !DILocation(line: 2290, column: 6, scope: !7513)
!7513 = distinct !DILexicalBlock(scope: !7506, file: !3, line: 2290, column: 6)
!7514 = !{i32 -2141574305, i32 -2141574298, i32 -2141574246, i32 -2141574215, i32 -2141574185}
!7515 = !DILocation(line: 2290, column: 6, scope: !7516)
!7516 = distinct !DILexicalBlock(scope: !7506, file: !3, line: 2290, column: 6)
!7517 = !DILocation(line: 2290, column: 6, scope: !7501)
!7518 = !DILocation(line: 2290, column: 6, scope: !7490)
!7519 = !DILocation(line: 2292, column: 3, scope: !7501)
!7520 = !DILocation(line: 2294, column: 44, scope: !7490)
!7521 = !DILocation(line: 2294, column: 51, scope: !7490)
!7522 = !DILocation(line: 2294, column: 14, scope: !7490)
!7523 = !DILocation(line: 2294, column: 12, scope: !7490)
!7524 = !DILocation(line: 2296, column: 6, scope: !7525)
!7525 = distinct !DILexicalBlock(scope: !7490, file: !3, line: 2296, column: 6)
!7526 = !DILocation(line: 2296, column: 19, scope: !7525)
!7527 = !DILocation(line: 2296, column: 26, scope: !7525)
!7528 = !DILocation(line: 2296, column: 34, scope: !7525)
!7529 = !DILocation(line: 2296, column: 16, scope: !7525)
!7530 = !DILocation(line: 2296, column: 38, scope: !7525)
!7531 = !DILocation(line: 2297, column: 6, scope: !7525)
!7532 = !DILocation(line: 2297, column: 13, scope: !7525)
!7533 = !DILocation(line: 2296, column: 6, scope: !7490)
!7534 = !DILocation(line: 2298, column: 13, scope: !7525)
!7535 = !DILocation(line: 2298, column: 20, scope: !7525)
!7536 = !DILocation(line: 2298, column: 11, scope: !7525)
!7537 = !DILocation(line: 2298, column: 3, scope: !7525)
!7538 = !DILocation(line: 2300, column: 13, scope: !7525)
!7539 = !DILocation(line: 2300, column: 20, scope: !7525)
!7540 = !DILocation(line: 2300, column: 27, scope: !7525)
!7541 = !DILocation(line: 2300, column: 38, scope: !7525)
!7542 = !DILocation(line: 2300, column: 42, scope: !7525)
!7543 = !DILocation(line: 2300, column: 47, scope: !7525)
!7544 = !DILocation(line: 2300, column: 11, scope: !7525)
!7545 = !DILocation(line: 2302, column: 9, scope: !7490)
!7546 = !DILocation(line: 2302, column: 19, scope: !7490)
!7547 = !DILocation(line: 2302, column: 17, scope: !7490)
!7548 = !DILocation(line: 2302, column: 2, scope: !7490)
!7549 = !DILocation(line: 2303, column: 1, scope: !7490)
!7550 = distinct !DISubprogram(name: "nand_subop_get_data_start_off", scope: !3, file: !3, line: 2317, type: !7430, scopeLine: 2319, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7551 = !DILocalVariable(name: "subop", arg: 1, scope: !7550, file: !3, line: 2317, type: !7103)
!7552 = !DILocation(line: 2317, column: 69, scope: !7550)
!7553 = !DILocalVariable(name: "instr_idx", arg: 2, scope: !7550, file: !3, line: 2318, type: !7)
!7554 = !DILocation(line: 2318, column: 22, scope: !7550)
!7555 = !DILocalVariable(name: "__ret_warn_on", scope: !7556, file: !3, line: 2320, type: !240)
!7556 = distinct !DILexicalBlock(scope: !7557, file: !3, line: 2320, column: 6)
!7557 = distinct !DILexicalBlock(scope: !7550, file: !3, line: 2320, column: 6)
!7558 = !DILocation(line: 2320, column: 6, scope: !7556)
!7559 = !DILocation(line: 2320, column: 6, scope: !7560)
!7560 = distinct !DILexicalBlock(scope: !7556, file: !3, line: 2320, column: 6)
!7561 = !DILocation(line: 2320, column: 6, scope: !7562)
!7562 = distinct !DILexicalBlock(scope: !7560, file: !3, line: 2320, column: 6)
!7563 = !DILocation(line: 2320, column: 6, scope: !7564)
!7564 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 2320, column: 6)
!7565 = !DILocation(line: 2320, column: 6, scope: !7566)
!7566 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 2320, column: 6)
!7567 = !{i32 -2141573392, i32 -2141573363, i32 -2141573317, i32 -2141573259, i32 -2141573205, i32 -2141573151, i32 -2141573096, i32 -2141573065}
!7568 = !DILocation(line: 2320, column: 6, scope: !7569)
!7569 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 2320, column: 6)
!7570 = !{i32 -2141572650, i32 -2141572643, i32 -2141572591, i32 -2141572560, i32 -2141572530}
!7571 = !DILocation(line: 2320, column: 6, scope: !7572)
!7572 = distinct !DILexicalBlock(scope: !7562, file: !3, line: 2320, column: 6)
!7573 = !DILocation(line: 2320, column: 6, scope: !7557)
!7574 = !DILocation(line: 2320, column: 6, scope: !7550)
!7575 = !DILocation(line: 2322, column: 3, scope: !7557)
!7576 = !DILocation(line: 2324, column: 34, scope: !7550)
!7577 = !DILocation(line: 2324, column: 41, scope: !7550)
!7578 = !DILocation(line: 2324, column: 9, scope: !7550)
!7579 = !DILocation(line: 2324, column: 2, scope: !7550)
!7580 = !DILocation(line: 2325, column: 1, scope: !7550)
!7581 = distinct !DISubprogram(name: "nand_instr_is_data", scope: !3, file: !3, line: 2231, type: !7582, scopeLine: 2232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7582 = !DISubroutineType(types: !7583)
!7583 = !{!180, !4436}
!7584 = !DILocalVariable(name: "instr", arg: 1, scope: !7581, file: !3, line: 2231, type: !4436)
!7585 = !DILocation(line: 2231, column: 60, scope: !7581)
!7586 = !DILocation(line: 2233, column: 9, scope: !7581)
!7587 = !DILocation(line: 2233, column: 15, scope: !7581)
!7588 = !DILocation(line: 2233, column: 19, scope: !7581)
!7589 = !DILocation(line: 2233, column: 26, scope: !7581)
!7590 = !DILocation(line: 2233, column: 31, scope: !7581)
!7591 = !DILocation(line: 2233, column: 56, scope: !7581)
!7592 = !DILocation(line: 2234, column: 5, scope: !7581)
!7593 = !DILocation(line: 2234, column: 12, scope: !7581)
!7594 = !DILocation(line: 2234, column: 17, scope: !7581)
!7595 = !DILocation(line: 0, scope: !7581)
!7596 = !DILocation(line: 2233, column: 2, scope: !7581)
!7597 = distinct !DISubprogram(name: "nand_subop_get_data_len", scope: !3, file: !3, line: 2339, type: !7430, scopeLine: 2341, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7598 = !DILocalVariable(name: "subop", arg: 1, scope: !7597, file: !3, line: 2339, type: !7103)
!7599 = !DILocation(line: 2339, column: 63, scope: !7597)
!7600 = !DILocalVariable(name: "instr_idx", arg: 2, scope: !7597, file: !3, line: 2340, type: !7)
!7601 = !DILocation(line: 2340, column: 23, scope: !7597)
!7602 = !DILocalVariable(name: "start_off", scope: !7597, file: !3, line: 2342, type: !240)
!7603 = !DILocation(line: 2342, column: 6, scope: !7597)
!7604 = !DILocalVariable(name: "end_off", scope: !7597, file: !3, line: 2342, type: !240)
!7605 = !DILocation(line: 2342, column: 21, scope: !7597)
!7606 = !DILocalVariable(name: "__ret_warn_on", scope: !7607, file: !3, line: 2344, type: !240)
!7607 = distinct !DILexicalBlock(scope: !7608, file: !3, line: 2344, column: 6)
!7608 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 2344, column: 6)
!7609 = !DILocation(line: 2344, column: 6, scope: !7607)
!7610 = !DILocation(line: 2344, column: 6, scope: !7611)
!7611 = distinct !DILexicalBlock(scope: !7607, file: !3, line: 2344, column: 6)
!7612 = !DILocation(line: 2344, column: 6, scope: !7613)
!7613 = distinct !DILexicalBlock(scope: !7611, file: !3, line: 2344, column: 6)
!7614 = !DILocation(line: 2344, column: 6, scope: !7615)
!7615 = distinct !DILexicalBlock(scope: !7613, file: !3, line: 2344, column: 6)
!7616 = !DILocation(line: 2344, column: 6, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7613, file: !3, line: 2344, column: 6)
!7618 = !{i32 -2141571733, i32 -2141571704, i32 -2141571658, i32 -2141571600, i32 -2141571546, i32 -2141571492, i32 -2141571437, i32 -2141571406}
!7619 = !DILocation(line: 2344, column: 6, scope: !7620)
!7620 = distinct !DILexicalBlock(scope: !7613, file: !3, line: 2344, column: 6)
!7621 = !{i32 -2141570991, i32 -2141570984, i32 -2141570932, i32 -2141570901, i32 -2141570871}
!7622 = !DILocation(line: 2344, column: 6, scope: !7623)
!7623 = distinct !DILexicalBlock(scope: !7613, file: !3, line: 2344, column: 6)
!7624 = !DILocation(line: 2344, column: 6, scope: !7608)
!7625 = !DILocation(line: 2344, column: 6, scope: !7597)
!7626 = !DILocation(line: 2346, column: 3, scope: !7608)
!7627 = !DILocation(line: 2348, column: 44, scope: !7597)
!7628 = !DILocation(line: 2348, column: 51, scope: !7597)
!7629 = !DILocation(line: 2348, column: 14, scope: !7597)
!7630 = !DILocation(line: 2348, column: 12, scope: !7597)
!7631 = !DILocation(line: 2350, column: 6, scope: !7632)
!7632 = distinct !DILexicalBlock(scope: !7597, file: !3, line: 2350, column: 6)
!7633 = !DILocation(line: 2350, column: 19, scope: !7632)
!7634 = !DILocation(line: 2350, column: 26, scope: !7632)
!7635 = !DILocation(line: 2350, column: 34, scope: !7632)
!7636 = !DILocation(line: 2350, column: 16, scope: !7632)
!7637 = !DILocation(line: 2350, column: 38, scope: !7632)
!7638 = !DILocation(line: 2351, column: 6, scope: !7632)
!7639 = !DILocation(line: 2351, column: 13, scope: !7632)
!7640 = !DILocation(line: 2350, column: 6, scope: !7597)
!7641 = !DILocation(line: 2352, column: 13, scope: !7632)
!7642 = !DILocation(line: 2352, column: 20, scope: !7632)
!7643 = !DILocation(line: 2352, column: 11, scope: !7632)
!7644 = !DILocation(line: 2352, column: 3, scope: !7632)
!7645 = !DILocation(line: 2354, column: 13, scope: !7632)
!7646 = !DILocation(line: 2354, column: 20, scope: !7632)
!7647 = !DILocation(line: 2354, column: 27, scope: !7632)
!7648 = !DILocation(line: 2354, column: 38, scope: !7632)
!7649 = !DILocation(line: 2354, column: 42, scope: !7632)
!7650 = !DILocation(line: 2354, column: 47, scope: !7632)
!7651 = !DILocation(line: 2354, column: 11, scope: !7632)
!7652 = !DILocation(line: 2356, column: 9, scope: !7597)
!7653 = !DILocation(line: 2356, column: 19, scope: !7597)
!7654 = !DILocation(line: 2356, column: 17, scope: !7597)
!7655 = !DILocation(line: 2356, column: 2, scope: !7597)
!7656 = !DILocation(line: 2357, column: 1, scope: !7597)
!7657 = distinct !DISubprogram(name: "nand_reset", scope: !3, file: !3, line: 2371, type: !4309, scopeLine: 2372, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7658 = !DILocalVariable(name: "chip", arg: 1, scope: !7657, file: !3, line: 2371, type: !4166)
!7659 = !DILocation(line: 2371, column: 34, scope: !7657)
!7660 = !DILocalVariable(name: "chipnr", arg: 2, scope: !7657, file: !3, line: 2371, type: !240)
!7661 = !DILocation(line: 2371, column: 44, scope: !7657)
!7662 = !DILocalVariable(name: "ret", scope: !7657, file: !3, line: 2373, type: !240)
!7663 = !DILocation(line: 2373, column: 6, scope: !7657)
!7664 = !DILocation(line: 2375, column: 29, scope: !7657)
!7665 = !DILocation(line: 2375, column: 35, scope: !7657)
!7666 = !DILocation(line: 2375, column: 8, scope: !7657)
!7667 = !DILocation(line: 2375, column: 6, scope: !7657)
!7668 = !DILocation(line: 2376, column: 6, scope: !7669)
!7669 = distinct !DILexicalBlock(scope: !7657, file: !3, line: 2376, column: 6)
!7670 = !DILocation(line: 2376, column: 6, scope: !7657)
!7671 = !DILocation(line: 2377, column: 10, scope: !7669)
!7672 = !DILocation(line: 2377, column: 3, scope: !7669)
!7673 = !DILocation(line: 2384, column: 21, scope: !7657)
!7674 = !DILocation(line: 2384, column: 27, scope: !7657)
!7675 = !DILocation(line: 2384, column: 2, scope: !7657)
!7676 = !DILocation(line: 2385, column: 22, scope: !7657)
!7677 = !DILocation(line: 2385, column: 8, scope: !7657)
!7678 = !DILocation(line: 2385, column: 6, scope: !7657)
!7679 = !DILocation(line: 2386, column: 23, scope: !7657)
!7680 = !DILocation(line: 2386, column: 2, scope: !7657)
!7681 = !DILocation(line: 2387, column: 6, scope: !7682)
!7682 = distinct !DILexicalBlock(scope: !7657, file: !3, line: 2387, column: 6)
!7683 = !DILocation(line: 2387, column: 6, scope: !7657)
!7684 = !DILocation(line: 2388, column: 10, scope: !7682)
!7685 = !DILocation(line: 2388, column: 3, scope: !7682)
!7686 = !DILocation(line: 2390, column: 29, scope: !7657)
!7687 = !DILocation(line: 2390, column: 35, scope: !7657)
!7688 = !DILocation(line: 2390, column: 8, scope: !7657)
!7689 = !DILocation(line: 2390, column: 6, scope: !7657)
!7690 = !DILocation(line: 2391, column: 6, scope: !7691)
!7691 = distinct !DILexicalBlock(scope: !7657, file: !3, line: 2391, column: 6)
!7692 = !DILocation(line: 2391, column: 6, scope: !7657)
!7693 = !DILocation(line: 2392, column: 10, scope: !7691)
!7694 = !DILocation(line: 2392, column: 3, scope: !7691)
!7695 = !DILocation(line: 2394, column: 2, scope: !7657)
!7696 = !DILocation(line: 2395, column: 1, scope: !7657)
!7697 = distinct !DISubprogram(name: "nand_reset_interface", scope: !3, file: !3, line: 750, type: !4309, scopeLine: 751, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7698 = !DILocalVariable(name: "chip", arg: 1, scope: !7697, file: !3, line: 750, type: !4166)
!7699 = !DILocation(line: 750, column: 51, scope: !7697)
!7700 = !DILocalVariable(name: "chipnr", arg: 2, scope: !7697, file: !3, line: 750, type: !240)
!7701 = !DILocation(line: 750, column: 61, scope: !7697)
!7702 = !DILocalVariable(name: "ops", scope: !7697, file: !3, line: 752, type: !4420)
!7703 = !DILocation(line: 752, column: 36, scope: !7697)
!7704 = !DILocation(line: 752, column: 42, scope: !7697)
!7705 = !DILocation(line: 752, column: 48, scope: !7697)
!7706 = !DILocation(line: 752, column: 60, scope: !7697)
!7707 = !DILocalVariable(name: "ret", scope: !7697, file: !3, line: 753, type: !240)
!7708 = !DILocation(line: 753, column: 6, scope: !7697)
!7709 = !DILocation(line: 755, column: 43, scope: !7710)
!7710 = distinct !DILexicalBlock(scope: !7697, file: !3, line: 755, column: 6)
!7711 = !DILocation(line: 755, column: 7, scope: !7710)
!7712 = !DILocation(line: 755, column: 6, scope: !7697)
!7713 = !DILocation(line: 756, column: 3, scope: !7710)
!7714 = !DILocation(line: 772, column: 35, scope: !7697)
!7715 = !DILocation(line: 772, column: 2, scope: !7697)
!7716 = !DILocation(line: 772, column: 8, scope: !7697)
!7717 = !DILocation(line: 772, column: 33, scope: !7697)
!7718 = !DILocation(line: 773, column: 8, scope: !7697)
!7719 = !DILocation(line: 773, column: 13, scope: !7697)
!7720 = !DILocation(line: 773, column: 29, scope: !7697)
!7721 = !DILocation(line: 773, column: 35, scope: !7697)
!7722 = !DILocation(line: 774, column: 8, scope: !7697)
!7723 = !DILocation(line: 774, column: 14, scope: !7697)
!7724 = !DILocation(line: 773, column: 6, scope: !7697)
!7725 = !DILocation(line: 775, column: 6, scope: !7726)
!7726 = distinct !DILexicalBlock(scope: !7697, file: !3, line: 775, column: 6)
!7727 = !DILocation(line: 775, column: 6, scope: !7697)
!7728 = !DILocation(line: 776, column: 3, scope: !7726)
!7729 = !DILocation(line: 778, column: 9, scope: !7697)
!7730 = !DILocation(line: 778, column: 2, scope: !7697)
!7731 = !DILocation(line: 779, column: 1, scope: !7697)
!7732 = distinct !DISubprogram(name: "nand_setup_interface", scope: !3, file: !3, line: 791, type: !4309, scopeLine: 792, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7733 = !DILocalVariable(name: "chip", arg: 1, scope: !7732, file: !3, line: 791, type: !4166)
!7734 = !DILocation(line: 791, column: 51, scope: !7732)
!7735 = !DILocalVariable(name: "chipnr", arg: 2, scope: !7732, file: !3, line: 791, type: !240)
!7736 = !DILocation(line: 791, column: 61, scope: !7732)
!7737 = !DILocalVariable(name: "ops", scope: !7732, file: !3, line: 793, type: !4420)
!7738 = !DILocation(line: 793, column: 36, scope: !7732)
!7739 = !DILocation(line: 793, column: 42, scope: !7732)
!7740 = !DILocation(line: 793, column: 48, scope: !7732)
!7741 = !DILocation(line: 793, column: 60, scope: !7732)
!7742 = !DILocalVariable(name: "tmode_param", scope: !7732, file: !3, line: 794, type: !4233)
!7743 = !DILocation(line: 794, column: 5, scope: !7732)
!7744 = !DILocalVariable(name: "ret", scope: !7732, file: !3, line: 795, type: !240)
!7745 = !DILocation(line: 795, column: 6, scope: !7732)
!7746 = !DILocation(line: 797, column: 43, scope: !7747)
!7747 = distinct !DILexicalBlock(scope: !7732, file: !3, line: 797, column: 6)
!7748 = !DILocation(line: 797, column: 7, scope: !7747)
!7749 = !DILocation(line: 797, column: 6, scope: !7732)
!7750 = !DILocation(line: 798, column: 3, scope: !7747)
!7751 = !DILocation(line: 807, column: 7, scope: !7752)
!7752 = distinct !DILexicalBlock(scope: !7732, file: !3, line: 807, column: 6)
!7753 = !DILocation(line: 807, column: 13, scope: !7752)
!7754 = !DILocation(line: 807, column: 6, scope: !7732)
!7755 = !DILocation(line: 808, column: 3, scope: !7752)
!7756 = !DILocation(line: 810, column: 19, scope: !7732)
!7757 = !DILocation(line: 810, column: 25, scope: !7732)
!7758 = !DILocation(line: 810, column: 48, scope: !7732)
!7759 = !DILocation(line: 810, column: 56, scope: !7732)
!7760 = !DILocation(line: 810, column: 2, scope: !7732)
!7761 = !DILocation(line: 810, column: 17, scope: !7732)
!7762 = !DILocation(line: 813, column: 33, scope: !7763)
!7763 = distinct !DILexicalBlock(scope: !7732, file: !3, line: 813, column: 6)
!7764 = !DILocation(line: 813, column: 6, scope: !7763)
!7765 = !DILocation(line: 813, column: 6, scope: !7732)
!7766 = !DILocation(line: 814, column: 22, scope: !7767)
!7767 = distinct !DILexicalBlock(scope: !7763, file: !3, line: 813, column: 71)
!7768 = !DILocation(line: 814, column: 28, scope: !7767)
!7769 = !DILocation(line: 814, column: 3, scope: !7767)
!7770 = !DILocation(line: 815, column: 27, scope: !7767)
!7771 = !DILocation(line: 816, column: 6, scope: !7767)
!7772 = !DILocation(line: 815, column: 9, scope: !7767)
!7773 = !DILocation(line: 815, column: 7, scope: !7767)
!7774 = !DILocation(line: 817, column: 24, scope: !7767)
!7775 = !DILocation(line: 817, column: 3, scope: !7767)
!7776 = !DILocation(line: 818, column: 7, scope: !7777)
!7777 = distinct !DILexicalBlock(scope: !7767, file: !3, line: 818, column: 7)
!7778 = !DILocation(line: 818, column: 7, scope: !7767)
!7779 = !DILocation(line: 819, column: 11, scope: !7777)
!7780 = !DILocation(line: 819, column: 4, scope: !7777)
!7781 = !DILocation(line: 820, column: 2, scope: !7767)
!7782 = !DILocation(line: 823, column: 8, scope: !7732)
!7783 = !DILocation(line: 823, column: 13, scope: !7732)
!7784 = !DILocation(line: 823, column: 29, scope: !7732)
!7785 = !DILocation(line: 823, column: 35, scope: !7732)
!7786 = !DILocation(line: 823, column: 43, scope: !7732)
!7787 = !DILocation(line: 823, column: 49, scope: !7732)
!7788 = !DILocation(line: 823, column: 6, scope: !7732)
!7789 = !DILocation(line: 824, column: 6, scope: !7790)
!7790 = distinct !DILexicalBlock(scope: !7732, file: !3, line: 824, column: 6)
!7791 = !DILocation(line: 824, column: 6, scope: !7732)
!7792 = !DILocation(line: 825, column: 10, scope: !7790)
!7793 = !DILocation(line: 825, column: 3, scope: !7790)
!7794 = !DILocation(line: 828, column: 34, scope: !7795)
!7795 = distinct !DILexicalBlock(scope: !7732, file: !3, line: 828, column: 6)
!7796 = !DILocation(line: 828, column: 7, scope: !7795)
!7797 = !DILocation(line: 828, column: 6, scope: !7732)
!7798 = !DILocation(line: 829, column: 3, scope: !7795)
!7799 = !DILocation(line: 831, column: 2, scope: !7732)
!7800 = !DILocation(line: 832, column: 21, scope: !7732)
!7801 = !DILocation(line: 832, column: 27, scope: !7732)
!7802 = !DILocation(line: 832, column: 2, scope: !7732)
!7803 = !DILocation(line: 833, column: 26, scope: !7732)
!7804 = !DILocation(line: 834, column: 5, scope: !7732)
!7805 = !DILocation(line: 833, column: 8, scope: !7732)
!7806 = !DILocation(line: 833, column: 6, scope: !7732)
!7807 = !DILocation(line: 835, column: 23, scope: !7732)
!7808 = !DILocation(line: 835, column: 2, scope: !7732)
!7809 = !DILocation(line: 836, column: 6, scope: !7810)
!7810 = distinct !DILexicalBlock(scope: !7732, file: !3, line: 836, column: 6)
!7811 = !DILocation(line: 836, column: 6, scope: !7732)
!7812 = !DILocation(line: 837, column: 3, scope: !7810)
!7813 = !DILocation(line: 839, column: 6, scope: !7814)
!7814 = distinct !DILexicalBlock(scope: !7732, file: !3, line: 839, column: 6)
!7815 = !DILocation(line: 839, column: 24, scope: !7814)
!7816 = !DILocation(line: 839, column: 30, scope: !7814)
!7817 = !DILocation(line: 839, column: 53, scope: !7814)
!7818 = !DILocation(line: 839, column: 61, scope: !7814)
!7819 = !DILocation(line: 839, column: 21, scope: !7814)
!7820 = !DILocation(line: 839, column: 6, scope: !7732)
!7821 = !DILocation(line: 840, column: 3, scope: !7822)
!7822 = distinct !DILexicalBlock(scope: !7814, file: !3, line: 839, column: 67)
!7823 = !DILocation(line: 842, column: 3, scope: !7822)
!7824 = !DILabel(scope: !7732, name: "update_interface_config", file: !3, line: 845)
!7825 = !DILocation(line: 845, column: 1, scope: !7732)
!7826 = !DILocation(line: 846, column: 35, scope: !7732)
!7827 = !DILocation(line: 846, column: 41, scope: !7732)
!7828 = !DILocation(line: 846, column: 2, scope: !7732)
!7829 = !DILocation(line: 846, column: 8, scope: !7732)
!7830 = !DILocation(line: 846, column: 33, scope: !7732)
!7831 = !DILocation(line: 848, column: 2, scope: !7732)
!7832 = !DILabel(scope: !7732, name: "err_reset_chip", file: !3, line: 850)
!7833 = !DILocation(line: 850, column: 1, scope: !7732)
!7834 = !DILocation(line: 855, column: 23, scope: !7732)
!7835 = !DILocation(line: 855, column: 29, scope: !7732)
!7836 = !DILocation(line: 855, column: 2, scope: !7732)
!7837 = !DILocation(line: 856, column: 21, scope: !7732)
!7838 = !DILocation(line: 856, column: 27, scope: !7732)
!7839 = !DILocation(line: 856, column: 2, scope: !7732)
!7840 = !DILocation(line: 857, column: 16, scope: !7732)
!7841 = !DILocation(line: 857, column: 2, scope: !7732)
!7842 = !DILocation(line: 858, column: 23, scope: !7732)
!7843 = !DILocation(line: 858, column: 2, scope: !7732)
!7844 = !DILocation(line: 860, column: 9, scope: !7732)
!7845 = !DILocation(line: 860, column: 2, scope: !7732)
!7846 = !DILocation(line: 861, column: 1, scope: !7732)
!7847 = distinct !DISubprogram(name: "nand_get_features", scope: !3, file: !3, line: 2407, type: !4411, scopeLine: 2409, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7848 = !DILocalVariable(name: "chip", arg: 1, scope: !7847, file: !3, line: 2407, type: !4166)
!7849 = !DILocation(line: 2407, column: 41, scope: !7847)
!7850 = !DILocalVariable(name: "addr", arg: 2, scope: !7847, file: !3, line: 2407, type: !240)
!7851 = !DILocation(line: 2407, column: 51, scope: !7847)
!7852 = !DILocalVariable(name: "subfeature_param", arg: 3, scope: !7847, file: !3, line: 2408, type: !4051)
!7853 = !DILocation(line: 2408, column: 13, scope: !7847)
!7854 = !DILocation(line: 2410, column: 34, scope: !7855)
!7855 = distinct !DILexicalBlock(scope: !7847, file: !3, line: 2410, column: 6)
!7856 = !DILocation(line: 2410, column: 40, scope: !7855)
!7857 = !DILocation(line: 2410, column: 7, scope: !7855)
!7858 = !DILocation(line: 2410, column: 6, scope: !7847)
!7859 = !DILocation(line: 2411, column: 3, scope: !7855)
!7860 = !DILocation(line: 2413, column: 6, scope: !7861)
!7861 = distinct !DILexicalBlock(scope: !7847, file: !3, line: 2413, column: 6)
!7862 = !DILocation(line: 2413, column: 12, scope: !7861)
!7863 = !DILocation(line: 2413, column: 19, scope: !7861)
!7864 = !DILocation(line: 2413, column: 6, scope: !7847)
!7865 = !DILocation(line: 2414, column: 10, scope: !7861)
!7866 = !DILocation(line: 2414, column: 16, scope: !7861)
!7867 = !DILocation(line: 2414, column: 23, scope: !7861)
!7868 = !DILocation(line: 2414, column: 36, scope: !7861)
!7869 = !DILocation(line: 2414, column: 42, scope: !7861)
!7870 = !DILocation(line: 2414, column: 48, scope: !7861)
!7871 = !DILocation(line: 2414, column: 3, scope: !7861)
!7872 = !DILocation(line: 2416, column: 30, scope: !7847)
!7873 = !DILocation(line: 2416, column: 36, scope: !7847)
!7874 = !DILocation(line: 2416, column: 42, scope: !7847)
!7875 = !DILocation(line: 2416, column: 9, scope: !7847)
!7876 = !DILocation(line: 2416, column: 2, scope: !7847)
!7877 = !DILocation(line: 2417, column: 1, scope: !7847)
!7878 = distinct !DISubprogram(name: "nand_supports_get_features", scope: !3, file: !3, line: 729, type: !7879, scopeLine: 730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7879 = !DISubroutineType(types: !7880)
!7880 = !{!180, !4166, !240}
!7881 = !DILocalVariable(name: "chip", arg: 1, scope: !7878, file: !3, line: 729, type: !4166)
!7882 = !DILocation(line: 729, column: 58, scope: !7878)
!7883 = !DILocalVariable(name: "addr", arg: 2, scope: !7878, file: !3, line: 729, type: !240)
!7884 = !DILocation(line: 729, column: 68, scope: !7878)
!7885 = !DILocation(line: 731, column: 10, scope: !7878)
!7886 = !DILocation(line: 731, column: 16, scope: !7878)
!7887 = !DILocation(line: 731, column: 27, scope: !7878)
!7888 = !DILocation(line: 731, column: 53, scope: !7878)
!7889 = !DILocation(line: 732, column: 12, scope: !7878)
!7890 = !DILocation(line: 732, column: 18, scope: !7878)
!7891 = !DILocation(line: 732, column: 24, scope: !7878)
!7892 = !DILocation(line: 732, column: 35, scope: !7878)
!7893 = !DILocation(line: 732, column: 3, scope: !7878)
!7894 = !DILocation(line: 0, scope: !7878)
!7895 = !DILocation(line: 731, column: 2, scope: !7878)
!7896 = distinct !DISubprogram(name: "nand_get_features_op", scope: !3, file: !3, line: 1771, type: !7897, scopeLine: 1773, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7897 = !DISubroutineType(types: !7898)
!7898 = !{!240, !4166, !1372, !330}
!7899 = !DILocalVariable(name: "chip", arg: 1, scope: !7896, file: !3, line: 1771, type: !4166)
!7900 = !DILocation(line: 1771, column: 51, scope: !7896)
!7901 = !DILocalVariable(name: "feature", arg: 2, scope: !7896, file: !3, line: 1771, type: !1372)
!7902 = !DILocation(line: 1771, column: 60, scope: !7896)
!7903 = !DILocalVariable(name: "data", arg: 3, scope: !7896, file: !3, line: 1772, type: !330)
!7904 = !DILocation(line: 1772, column: 11, scope: !7896)
!7905 = !DILocalVariable(name: "params", scope: !7896, file: !3, line: 1774, type: !4051)
!7906 = !DILocation(line: 1774, column: 6, scope: !7896)
!7907 = !DILocation(line: 1774, column: 15, scope: !7896)
!7908 = !DILocalVariable(name: "i", scope: !7896, file: !3, line: 1775, type: !240)
!7909 = !DILocation(line: 1775, column: 6, scope: !7896)
!7910 = !DILocation(line: 1777, column: 23, scope: !7911)
!7911 = distinct !DILexicalBlock(scope: !7896, file: !3, line: 1777, column: 6)
!7912 = !DILocation(line: 1777, column: 6, scope: !7911)
!7913 = !DILocation(line: 1777, column: 6, scope: !7896)
!7914 = !DILocalVariable(name: "sdr", scope: !7915, file: !3, line: 1778, type: !5097)
!7915 = distinct !DILexicalBlock(scope: !7911, file: !3, line: 1777, column: 30)
!7916 = !DILocation(line: 1778, column: 34, scope: !7915)
!7917 = !DILocation(line: 1779, column: 51, scope: !7915)
!7918 = !DILocation(line: 1779, column: 25, scope: !7915)
!7919 = !DILocation(line: 1779, column: 4, scope: !7915)
!7920 = !DILocalVariable(name: "instrs", scope: !7915, file: !3, line: 1780, type: !5818)
!7921 = !DILocation(line: 1780, column: 24, scope: !7915)
!7922 = !DILocation(line: 1780, column: 35, scope: !7915)
!7923 = !DILocation(line: 1781, column: 4, scope: !7915)
!7924 = !DILocation(line: 1782, column: 4, scope: !7915)
!7925 = !DILocation(line: 1782, column: 4, scope: !7926)
!7926 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 1782, column: 4)
!7927 = !DILocation(line: 1783, column: 4, scope: !7915)
!7928 = !DILocation(line: 1783, column: 4, scope: !7929)
!7929 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 1783, column: 4)
!7930 = !DILocation(line: 1783, column: 4, scope: !7931)
!7931 = distinct !DILexicalBlock(scope: !7915, file: !3, line: 1783, column: 4)
!7932 = !DILocation(line: 1785, column: 4, scope: !7915)
!7933 = !DILocalVariable(name: "op", scope: !7915, file: !3, line: 1788, type: !4432)
!7934 = !DILocation(line: 1788, column: 25, scope: !7915)
!7935 = !DILocation(line: 1788, column: 30, scope: !7915)
!7936 = !DILocation(line: 1790, column: 23, scope: !7915)
!7937 = !DILocation(line: 1790, column: 10, scope: !7915)
!7938 = !DILocation(line: 1790, column: 3, scope: !7915)
!7939 = !DILocation(line: 1793, column: 2, scope: !7896)
!7940 = !DILocation(line: 1793, column: 8, scope: !7896)
!7941 = !DILocation(line: 1793, column: 15, scope: !7896)
!7942 = !DILocation(line: 1793, column: 23, scope: !7896)
!7943 = !DILocation(line: 1793, column: 52, scope: !7896)
!7944 = !DILocation(line: 1794, column: 9, scope: !7945)
!7945 = distinct !DILexicalBlock(scope: !7896, file: !3, line: 1794, column: 2)
!7946 = !DILocation(line: 1794, column: 7, scope: !7945)
!7947 = !DILocation(line: 1794, column: 14, scope: !7948)
!7948 = distinct !DILexicalBlock(scope: !7945, file: !3, line: 1794, column: 2)
!7949 = !DILocation(line: 1794, column: 16, scope: !7948)
!7950 = !DILocation(line: 1794, column: 2, scope: !7945)
!7951 = !DILocation(line: 1795, column: 15, scope: !7948)
!7952 = !DILocation(line: 1795, column: 21, scope: !7948)
!7953 = !DILocation(line: 1795, column: 28, scope: !7948)
!7954 = !DILocation(line: 1795, column: 38, scope: !7948)
!7955 = !DILocation(line: 1795, column: 3, scope: !7948)
!7956 = !DILocation(line: 1795, column: 10, scope: !7948)
!7957 = !DILocation(line: 1795, column: 13, scope: !7948)
!7958 = !DILocation(line: 1794, column: 45, scope: !7948)
!7959 = !DILocation(line: 1794, column: 2, scope: !7948)
!7960 = distinct !{!7960, !7950, !7961}
!7961 = !DILocation(line: 1795, column: 42, scope: !7945)
!7962 = !DILocation(line: 1797, column: 2, scope: !7896)
!7963 = !DILocation(line: 1798, column: 1, scope: !7896)
!7964 = distinct !DISubprogram(name: "nand_set_features", scope: !3, file: !3, line: 2428, type: !4411, scopeLine: 2430, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7965 = !DILocalVariable(name: "chip", arg: 1, scope: !7964, file: !3, line: 2428, type: !4166)
!7966 = !DILocation(line: 2428, column: 41, scope: !7964)
!7967 = !DILocalVariable(name: "addr", arg: 2, scope: !7964, file: !3, line: 2428, type: !240)
!7968 = !DILocation(line: 2428, column: 51, scope: !7964)
!7969 = !DILocalVariable(name: "subfeature_param", arg: 3, scope: !7964, file: !3, line: 2429, type: !4051)
!7970 = !DILocation(line: 2429, column: 13, scope: !7964)
!7971 = !DILocation(line: 2431, column: 34, scope: !7972)
!7972 = distinct !DILexicalBlock(scope: !7964, file: !3, line: 2431, column: 6)
!7973 = !DILocation(line: 2431, column: 40, scope: !7972)
!7974 = !DILocation(line: 2431, column: 7, scope: !7972)
!7975 = !DILocation(line: 2431, column: 6, scope: !7964)
!7976 = !DILocation(line: 2432, column: 3, scope: !7972)
!7977 = !DILocation(line: 2434, column: 6, scope: !7978)
!7978 = distinct !DILexicalBlock(scope: !7964, file: !3, line: 2434, column: 6)
!7979 = !DILocation(line: 2434, column: 12, scope: !7978)
!7980 = !DILocation(line: 2434, column: 19, scope: !7978)
!7981 = !DILocation(line: 2434, column: 6, scope: !7964)
!7982 = !DILocation(line: 2435, column: 10, scope: !7978)
!7983 = !DILocation(line: 2435, column: 16, scope: !7978)
!7984 = !DILocation(line: 2435, column: 23, scope: !7978)
!7985 = !DILocation(line: 2435, column: 36, scope: !7978)
!7986 = !DILocation(line: 2435, column: 42, scope: !7978)
!7987 = !DILocation(line: 2435, column: 48, scope: !7978)
!7988 = !DILocation(line: 2435, column: 3, scope: !7978)
!7989 = !DILocation(line: 2437, column: 30, scope: !7964)
!7990 = !DILocation(line: 2437, column: 36, scope: !7964)
!7991 = !DILocation(line: 2437, column: 42, scope: !7964)
!7992 = !DILocation(line: 2437, column: 9, scope: !7964)
!7993 = !DILocation(line: 2437, column: 2, scope: !7964)
!7994 = !DILocation(line: 2438, column: 1, scope: !7964)
!7995 = distinct !DISubprogram(name: "nand_supports_set_features", scope: !3, file: !3, line: 735, type: !7879, scopeLine: 736, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!7996 = !DILocalVariable(name: "chip", arg: 1, scope: !7995, file: !3, line: 735, type: !4166)
!7997 = !DILocation(line: 735, column: 58, scope: !7995)
!7998 = !DILocalVariable(name: "addr", arg: 2, scope: !7995, file: !3, line: 735, type: !240)
!7999 = !DILocation(line: 735, column: 68, scope: !7995)
!8000 = !DILocation(line: 737, column: 10, scope: !7995)
!8001 = !DILocation(line: 737, column: 16, scope: !7995)
!8002 = !DILocation(line: 737, column: 27, scope: !7995)
!8003 = !DILocation(line: 737, column: 53, scope: !7995)
!8004 = !DILocation(line: 738, column: 12, scope: !7995)
!8005 = !DILocation(line: 738, column: 18, scope: !7995)
!8006 = !DILocation(line: 738, column: 24, scope: !7995)
!8007 = !DILocation(line: 738, column: 35, scope: !7995)
!8008 = !DILocation(line: 738, column: 3, scope: !7995)
!8009 = !DILocation(line: 0, scope: !7995)
!8010 = !DILocation(line: 737, column: 2, scope: !7995)
!8011 = distinct !DISubprogram(name: "nand_set_features_op", scope: !3, file: !3, line: 1724, type: !8012, scopeLine: 1726, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8012 = !DISubroutineType(types: !8013)
!8013 = !{!240, !4166, !1372, !189}
!8014 = !DILocalVariable(name: "chip", arg: 1, scope: !8011, file: !3, line: 1724, type: !4166)
!8015 = !DILocation(line: 1724, column: 51, scope: !8011)
!8016 = !DILocalVariable(name: "feature", arg: 2, scope: !8011, file: !3, line: 1724, type: !1372)
!8017 = !DILocation(line: 1724, column: 60, scope: !8011)
!8018 = !DILocalVariable(name: "data", arg: 3, scope: !8011, file: !3, line: 1725, type: !189)
!8019 = !DILocation(line: 1725, column: 17, scope: !8011)
!8020 = !DILocalVariable(name: "params", scope: !8011, file: !3, line: 1727, type: !4388)
!8021 = !DILocation(line: 1727, column: 12, scope: !8011)
!8022 = !DILocation(line: 1727, column: 21, scope: !8011)
!8023 = !DILocalVariable(name: "i", scope: !8011, file: !3, line: 1728, type: !240)
!8024 = !DILocation(line: 1728, column: 6, scope: !8011)
!8025 = !DILocalVariable(name: "ret", scope: !8011, file: !3, line: 1728, type: !240)
!8026 = !DILocation(line: 1728, column: 9, scope: !8011)
!8027 = !DILocation(line: 1730, column: 23, scope: !8028)
!8028 = distinct !DILexicalBlock(scope: !8011, file: !3, line: 1730, column: 6)
!8029 = !DILocation(line: 1730, column: 6, scope: !8028)
!8030 = !DILocation(line: 1730, column: 6, scope: !8011)
!8031 = !DILocalVariable(name: "sdr", scope: !8032, file: !3, line: 1731, type: !5097)
!8032 = distinct !DILexicalBlock(scope: !8028, file: !3, line: 1730, column: 30)
!8033 = !DILocation(line: 1731, column: 34, scope: !8032)
!8034 = !DILocation(line: 1732, column: 51, scope: !8032)
!8035 = !DILocation(line: 1732, column: 25, scope: !8032)
!8036 = !DILocation(line: 1732, column: 4, scope: !8032)
!8037 = !DILocalVariable(name: "instrs", scope: !8032, file: !3, line: 1733, type: !5818)
!8038 = !DILocation(line: 1733, column: 24, scope: !8032)
!8039 = !DILocation(line: 1733, column: 35, scope: !8032)
!8040 = !DILocation(line: 1734, column: 4, scope: !8032)
!8041 = !DILocation(line: 1735, column: 4, scope: !8032)
!8042 = !DILocation(line: 1735, column: 4, scope: !8043)
!8043 = distinct !DILexicalBlock(scope: !8032, file: !3, line: 1735, column: 4)
!8044 = !DILocation(line: 1736, column: 4, scope: !8032)
!8045 = !DILocation(line: 1736, column: 4, scope: !8046)
!8046 = distinct !DILexicalBlock(scope: !8032, file: !3, line: 1736, column: 4)
!8047 = !DILocation(line: 1738, column: 4, scope: !8032)
!8048 = !DILocation(line: 1738, column: 4, scope: !8049)
!8049 = distinct !DILexicalBlock(scope: !8032, file: !3, line: 1738, column: 4)
!8050 = !DILocalVariable(name: "op", scope: !8032, file: !3, line: 1740, type: !4432)
!8051 = !DILocation(line: 1740, column: 25, scope: !8032)
!8052 = !DILocation(line: 1740, column: 30, scope: !8032)
!8053 = !DILocation(line: 1742, column: 23, scope: !8032)
!8054 = !DILocation(line: 1742, column: 10, scope: !8032)
!8055 = !DILocation(line: 1742, column: 3, scope: !8032)
!8056 = !DILocation(line: 1745, column: 2, scope: !8011)
!8057 = !DILocation(line: 1745, column: 8, scope: !8011)
!8058 = !DILocation(line: 1745, column: 15, scope: !8011)
!8059 = !DILocation(line: 1745, column: 23, scope: !8011)
!8060 = !DILocation(line: 1745, column: 52, scope: !8011)
!8061 = !DILocation(line: 1746, column: 9, scope: !8062)
!8062 = distinct !DILexicalBlock(scope: !8011, file: !3, line: 1746, column: 2)
!8063 = !DILocation(line: 1746, column: 7, scope: !8062)
!8064 = !DILocation(line: 1746, column: 14, scope: !8065)
!8065 = distinct !DILexicalBlock(scope: !8062, file: !3, line: 1746, column: 2)
!8066 = !DILocation(line: 1746, column: 16, scope: !8065)
!8067 = !DILocation(line: 1746, column: 2, scope: !8062)
!8068 = !DILocation(line: 1747, column: 3, scope: !8065)
!8069 = !DILocation(line: 1747, column: 9, scope: !8065)
!8070 = !DILocation(line: 1747, column: 16, scope: !8065)
!8071 = !DILocation(line: 1747, column: 27, scope: !8065)
!8072 = !DILocation(line: 1747, column: 33, scope: !8065)
!8073 = !DILocation(line: 1747, column: 40, scope: !8065)
!8074 = !DILocation(line: 1746, column: 45, scope: !8065)
!8075 = !DILocation(line: 1746, column: 2, scope: !8065)
!8076 = distinct !{!8076, !8067, !8077}
!8077 = !DILocation(line: 1747, column: 42, scope: !8062)
!8078 = !DILocation(line: 1749, column: 8, scope: !8011)
!8079 = !DILocation(line: 1749, column: 14, scope: !8011)
!8080 = !DILocation(line: 1749, column: 21, scope: !8011)
!8081 = !DILocation(line: 1749, column: 30, scope: !8011)
!8082 = !DILocation(line: 1749, column: 6, scope: !8011)
!8083 = !DILocation(line: 1750, column: 6, scope: !8084)
!8084 = distinct !DILexicalBlock(scope: !8011, file: !3, line: 1750, column: 6)
!8085 = !DILocation(line: 1750, column: 10, scope: !8084)
!8086 = !DILocation(line: 1750, column: 6, scope: !8011)
!8087 = !DILocation(line: 1751, column: 10, scope: !8084)
!8088 = !DILocation(line: 1751, column: 3, scope: !8084)
!8089 = !DILocation(line: 1753, column: 6, scope: !8090)
!8090 = distinct !DILexicalBlock(scope: !8011, file: !3, line: 1753, column: 6)
!8091 = !DILocation(line: 1753, column: 10, scope: !8090)
!8092 = !DILocation(line: 1753, column: 6, scope: !8011)
!8093 = !DILocation(line: 1754, column: 3, scope: !8090)
!8094 = !DILocation(line: 1756, column: 2, scope: !8011)
!8095 = !DILocation(line: 1757, column: 1, scope: !8011)
!8096 = distinct !DISubprogram(name: "nand_check_erased_ecc_chunk", scope: !3, file: !3, line: 2533, type: !8097, scopeLine: 2537, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8097 = !DISubroutineType(types: !8098)
!8098 = !{!240, !330, !240, !330, !240, !330, !240, !240}
!8099 = !DILocalVariable(name: "data", arg: 1, scope: !8096, file: !3, line: 2533, type: !330)
!8100 = !DILocation(line: 2533, column: 39, scope: !8096)
!8101 = !DILocalVariable(name: "datalen", arg: 2, scope: !8096, file: !3, line: 2533, type: !240)
!8102 = !DILocation(line: 2533, column: 49, scope: !8096)
!8103 = !DILocalVariable(name: "ecc", arg: 3, scope: !8096, file: !3, line: 2534, type: !330)
!8104 = !DILocation(line: 2534, column: 11, scope: !8096)
!8105 = !DILocalVariable(name: "ecclen", arg: 4, scope: !8096, file: !3, line: 2534, type: !240)
!8106 = !DILocation(line: 2534, column: 20, scope: !8096)
!8107 = !DILocalVariable(name: "extraoob", arg: 5, scope: !8096, file: !3, line: 2535, type: !330)
!8108 = !DILocation(line: 2535, column: 11, scope: !8096)
!8109 = !DILocalVariable(name: "extraooblen", arg: 6, scope: !8096, file: !3, line: 2535, type: !240)
!8110 = !DILocation(line: 2535, column: 25, scope: !8096)
!8111 = !DILocalVariable(name: "bitflips_threshold", arg: 7, scope: !8096, file: !3, line: 2536, type: !240)
!8112 = !DILocation(line: 2536, column: 9, scope: !8096)
!8113 = !DILocalVariable(name: "data_bitflips", scope: !8096, file: !3, line: 2538, type: !240)
!8114 = !DILocation(line: 2538, column: 6, scope: !8096)
!8115 = !DILocalVariable(name: "ecc_bitflips", scope: !8096, file: !3, line: 2538, type: !240)
!8116 = !DILocation(line: 2538, column: 25, scope: !8096)
!8117 = !DILocalVariable(name: "extraoob_bitflips", scope: !8096, file: !3, line: 2538, type: !240)
!8118 = !DILocation(line: 2538, column: 43, scope: !8096)
!8119 = !DILocation(line: 2540, column: 40, scope: !8096)
!8120 = !DILocation(line: 2540, column: 46, scope: !8096)
!8121 = !DILocation(line: 2541, column: 12, scope: !8096)
!8122 = !DILocation(line: 2540, column: 18, scope: !8096)
!8123 = !DILocation(line: 2540, column: 16, scope: !8096)
!8124 = !DILocation(line: 2542, column: 6, scope: !8125)
!8125 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 2542, column: 6)
!8126 = !DILocation(line: 2542, column: 20, scope: !8125)
!8127 = !DILocation(line: 2542, column: 6, scope: !8096)
!8128 = !DILocation(line: 2543, column: 10, scope: !8125)
!8129 = !DILocation(line: 2543, column: 3, scope: !8125)
!8130 = !DILocation(line: 2545, column: 24, scope: !8096)
!8131 = !DILocation(line: 2545, column: 21, scope: !8096)
!8132 = !DILocation(line: 2547, column: 39, scope: !8096)
!8133 = !DILocation(line: 2547, column: 44, scope: !8096)
!8134 = !DILocation(line: 2547, column: 52, scope: !8096)
!8135 = !DILocation(line: 2547, column: 17, scope: !8096)
!8136 = !DILocation(line: 2547, column: 15, scope: !8096)
!8137 = !DILocation(line: 2548, column: 6, scope: !8138)
!8138 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 2548, column: 6)
!8139 = !DILocation(line: 2548, column: 19, scope: !8138)
!8140 = !DILocation(line: 2548, column: 6, scope: !8096)
!8141 = !DILocation(line: 2549, column: 10, scope: !8138)
!8142 = !DILocation(line: 2549, column: 3, scope: !8138)
!8143 = !DILocation(line: 2551, column: 24, scope: !8096)
!8144 = !DILocation(line: 2551, column: 21, scope: !8096)
!8145 = !DILocation(line: 2553, column: 44, scope: !8096)
!8146 = !DILocation(line: 2553, column: 54, scope: !8096)
!8147 = !DILocation(line: 2554, column: 9, scope: !8096)
!8148 = !DILocation(line: 2553, column: 22, scope: !8096)
!8149 = !DILocation(line: 2553, column: 20, scope: !8096)
!8150 = !DILocation(line: 2555, column: 6, scope: !8151)
!8151 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 2555, column: 6)
!8152 = !DILocation(line: 2555, column: 24, scope: !8151)
!8153 = !DILocation(line: 2555, column: 6, scope: !8096)
!8154 = !DILocation(line: 2556, column: 10, scope: !8151)
!8155 = !DILocation(line: 2556, column: 3, scope: !8151)
!8156 = !DILocation(line: 2558, column: 6, scope: !8157)
!8157 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 2558, column: 6)
!8158 = !DILocation(line: 2558, column: 6, scope: !8096)
!8159 = !DILocation(line: 2559, column: 10, scope: !8157)
!8160 = !DILocation(line: 2559, column: 22, scope: !8157)
!8161 = !DILocation(line: 2559, column: 3, scope: !8157)
!8162 = !DILocation(line: 2561, column: 6, scope: !8163)
!8163 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 2561, column: 6)
!8164 = !DILocation(line: 2561, column: 6, scope: !8096)
!8165 = !DILocation(line: 2562, column: 10, scope: !8163)
!8166 = !DILocation(line: 2562, column: 21, scope: !8163)
!8167 = !DILocation(line: 2562, column: 3, scope: !8163)
!8168 = !DILocation(line: 2564, column: 6, scope: !8169)
!8169 = distinct !DILexicalBlock(scope: !8096, file: !3, line: 2564, column: 6)
!8170 = !DILocation(line: 2564, column: 6, scope: !8096)
!8171 = !DILocation(line: 2565, column: 10, scope: !8169)
!8172 = !DILocation(line: 2565, column: 26, scope: !8169)
!8173 = !DILocation(line: 2565, column: 3, scope: !8169)
!8174 = !DILocation(line: 2567, column: 9, scope: !8096)
!8175 = !DILocation(line: 2567, column: 25, scope: !8096)
!8176 = !DILocation(line: 2567, column: 23, scope: !8096)
!8177 = !DILocation(line: 2567, column: 40, scope: !8096)
!8178 = !DILocation(line: 2567, column: 38, scope: !8096)
!8179 = !DILocation(line: 2567, column: 2, scope: !8096)
!8180 = !DILocation(line: 2568, column: 1, scope: !8096)
!8181 = distinct !DISubprogram(name: "nand_check_erased_buf", scope: !3, file: !3, line: 2459, type: !8182, scopeLine: 2460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8182 = !DISubroutineType(types: !8183)
!8183 = !{!240, !330, !240, !240}
!8184 = !DILocalVariable(name: "w", arg: 1, scope: !8185, file: !8186, line: 43, type: !401)
!8185 = distinct !DISubprogram(name: "__arch_hweight64", scope: !8186, file: !8186, line: 43, type: !8187, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8186 = !DIFile(filename: "./arch/x86/include/asm/arch_hweight.h", directory: "/home/lizy2001/genbc/linux")
!8187 = !DISubroutineType(types: !8188)
!8188 = !{!306, !401}
!8189 = !DILocation(line: 43, column: 61, scope: !8185, inlinedAt: !8190)
!8190 = distinct !DILocation(line: 75, column: 41, scope: !8191, inlinedAt: !8195)
!8191 = distinct !DISubprogram(name: "hweight_long", scope: !8192, file: !8192, line: 73, type: !8193, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8192 = !DIFile(filename: "./include/linux/bitops.h", directory: "/home/lizy2001/genbc/linux")
!8193 = !DISubroutineType(types: !8194)
!8194 = !{!306, !306}
!8195 = distinct !DILocation(line: 2478, column: 12, scope: !8196)
!8196 = distinct !DILexicalBlock(scope: !8197, file: !3, line: 2474, column: 52)
!8197 = distinct !DILexicalBlock(scope: !8198, file: !3, line: 2473, column: 2)
!8198 = distinct !DILexicalBlock(scope: !8181, file: !3, line: 2473, column: 2)
!8199 = !DILocalVariable(name: "res", scope: !8185, file: !8186, line: 45, type: !306)
!8200 = !DILocation(line: 45, column: 16, scope: !8185, inlinedAt: !8190)
!8201 = !DILocalVariable(name: "w", arg: 1, scope: !8191, file: !8192, line: 73, type: !306)
!8202 = !DILocation(line: 73, column: 65, scope: !8191, inlinedAt: !8195)
!8203 = !DILocalVariable(name: "buf", arg: 1, scope: !8181, file: !3, line: 2459, type: !330)
!8204 = !DILocation(line: 2459, column: 40, scope: !8181)
!8205 = !DILocalVariable(name: "len", arg: 2, scope: !8181, file: !3, line: 2459, type: !240)
!8206 = !DILocation(line: 2459, column: 49, scope: !8181)
!8207 = !DILocalVariable(name: "bitflips_threshold", arg: 3, scope: !8181, file: !3, line: 2459, type: !240)
!8208 = !DILocation(line: 2459, column: 58, scope: !8181)
!8209 = !DILocalVariable(name: "bitmap", scope: !8181, file: !3, line: 2461, type: !404)
!8210 = !DILocation(line: 2461, column: 23, scope: !8181)
!8211 = !DILocation(line: 2461, column: 32, scope: !8181)
!8212 = !DILocalVariable(name: "bitflips", scope: !8181, file: !3, line: 2462, type: !240)
!8213 = !DILocation(line: 2462, column: 6, scope: !8181)
!8214 = !DILocalVariable(name: "weight", scope: !8181, file: !3, line: 2463, type: !240)
!8215 = !DILocation(line: 2463, column: 6, scope: !8181)
!8216 = !DILocation(line: 2465, column: 2, scope: !8181)
!8217 = !DILocation(line: 2465, column: 9, scope: !8218)
!8218 = distinct !DILexicalBlock(scope: !8219, file: !3, line: 2465, column: 2)
!8219 = distinct !DILexicalBlock(scope: !8181, file: !3, line: 2465, column: 2)
!8220 = !DILocation(line: 2465, column: 13, scope: !8218)
!8221 = !DILocation(line: 2465, column: 28, scope: !8218)
!8222 = !DILocation(line: 2465, column: 17, scope: !8218)
!8223 = !DILocation(line: 2465, column: 36, scope: !8218)
!8224 = !DILocation(line: 0, scope: !8218)
!8225 = !DILocation(line: 2465, column: 2, scope: !8219)
!8226 = !DILocation(line: 2467, column: 12, scope: !8227)
!8227 = distinct !DILexicalBlock(scope: !8218, file: !3, line: 2466, column: 24)
!8228 = !DILocation(line: 2467, column: 10, scope: !8227)
!8229 = !DILocation(line: 2468, column: 31, scope: !8227)
!8230 = !DILocation(line: 2468, column: 29, scope: !8227)
!8231 = !DILocation(line: 2468, column: 12, scope: !8227)
!8232 = !DILocation(line: 2469, column: 7, scope: !8233)
!8233 = distinct !DILexicalBlock(scope: !8227, file: !3, line: 2469, column: 7)
!8234 = !DILocation(line: 2469, column: 7, scope: !8227)
!8235 = !DILocation(line: 2470, column: 4, scope: !8233)
!8236 = !DILocation(line: 2471, column: 2, scope: !8227)
!8237 = !DILocation(line: 2466, column: 10, scope: !8218)
!8238 = !DILocation(line: 2466, column: 20, scope: !8218)
!8239 = !DILocation(line: 2465, column: 2, scope: !8218)
!8240 = distinct !{!8240, !8225, !8241}
!8241 = !DILocation(line: 2471, column: 2, scope: !8219)
!8242 = !DILocation(line: 2473, column: 2, scope: !8181)
!8243 = !DILocation(line: 2473, column: 9, scope: !8197)
!8244 = !DILocation(line: 2473, column: 13, scope: !8197)
!8245 = !DILocation(line: 2473, column: 2, scope: !8198)
!8246 = !DILocalVariable(name: "d", scope: !8196, file: !3, line: 2475, type: !306)
!8247 = !DILocation(line: 2475, column: 17, scope: !8196)
!8248 = !DILocation(line: 2475, column: 40, scope: !8196)
!8249 = !DILocation(line: 2475, column: 21, scope: !8196)
!8250 = !DILocation(line: 2476, column: 7, scope: !8251)
!8251 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 2476, column: 7)
!8252 = !DILocation(line: 2476, column: 9, scope: !8251)
!8253 = !DILocation(line: 2476, column: 7, scope: !8196)
!8254 = !DILocation(line: 2477, column: 4, scope: !8251)
!8255 = !DILocation(line: 2478, column: 25, scope: !8196)
!8256 = !DILocation(line: 75, column: 41, scope: !8191, inlinedAt: !8195)
!8257 = !DILocation(line: 49, column: 15, scope: !8185, inlinedAt: !8190)
!8258 = !DILocation(line: 47, column: 2, scope: !8185, inlinedAt: !8190)
!8259 = !{i32 -2146945959, i32 -2146945931, i32 -2146945925, i32 -2146945909, i32 -2146945893, i32 -2146945866, i32 -2146945533, i32 -2146946251, i32 -2146945527, i32 -2146945479, i32 -2146945415, i32 -2146945353, i32 -2146945296, i32 -2146945240, i32 -2146946171, i32 -2146946146, i32 -2146945006, i32 -2146944876, i32 -2146944945, i32 -2146944862, i32 -2146946046}
!8260 = !DILocation(line: 51, column: 9, scope: !8185, inlinedAt: !8190)
!8261 = !DILocation(line: 2478, column: 12, scope: !8196)
!8262 = !DILocation(line: 2478, column: 10, scope: !8196)
!8263 = !DILocation(line: 2479, column: 31, scope: !8196)
!8264 = !DILocation(line: 2479, column: 29, scope: !8196)
!8265 = !DILocation(line: 2479, column: 12, scope: !8196)
!8266 = !DILocation(line: 2480, column: 7, scope: !8267)
!8267 = distinct !DILexicalBlock(scope: !8196, file: !3, line: 2480, column: 7)
!8268 = !DILocation(line: 2480, column: 7, scope: !8196)
!8269 = !DILocation(line: 2481, column: 4, scope: !8267)
!8270 = !DILocation(line: 2482, column: 2, scope: !8196)
!8271 = !DILocation(line: 2474, column: 11, scope: !8197)
!8272 = !DILocation(line: 2474, column: 35, scope: !8197)
!8273 = !DILocation(line: 2473, column: 2, scope: !8197)
!8274 = distinct !{!8274, !8245, !8275}
!8275 = !DILocation(line: 2482, column: 2, scope: !8198)
!8276 = !DILocation(line: 2484, column: 2, scope: !8181)
!8277 = !DILocation(line: 2484, column: 9, scope: !8278)
!8278 = distinct !DILexicalBlock(scope: !8279, file: !3, line: 2484, column: 2)
!8279 = distinct !DILexicalBlock(scope: !8181, file: !3, line: 2484, column: 2)
!8280 = !DILocation(line: 2484, column: 13, scope: !8278)
!8281 = !DILocation(line: 2484, column: 2, scope: !8279)
!8282 = !DILocation(line: 2485, column: 12, scope: !8283)
!8283 = distinct !DILexicalBlock(scope: !8278, file: !3, line: 2484, column: 35)
!8284 = !DILocation(line: 2485, column: 10, scope: !8283)
!8285 = !DILocation(line: 2486, column: 31, scope: !8283)
!8286 = !DILocation(line: 2486, column: 29, scope: !8283)
!8287 = !DILocation(line: 2486, column: 12, scope: !8283)
!8288 = !DILocation(line: 2487, column: 7, scope: !8289)
!8289 = distinct !DILexicalBlock(scope: !8283, file: !3, line: 2487, column: 7)
!8290 = !DILocation(line: 2487, column: 7, scope: !8283)
!8291 = !DILocation(line: 2488, column: 4, scope: !8289)
!8292 = !DILocation(line: 2489, column: 2, scope: !8283)
!8293 = !DILocation(line: 2484, column: 21, scope: !8278)
!8294 = !DILocation(line: 2484, column: 31, scope: !8278)
!8295 = !DILocation(line: 2484, column: 2, scope: !8278)
!8296 = distinct !{!8296, !8281, !8297}
!8297 = !DILocation(line: 2489, column: 2, scope: !8279)
!8298 = !DILocation(line: 2491, column: 9, scope: !8181)
!8299 = !DILocation(line: 2491, column: 2, scope: !8181)
!8300 = !DILocation(line: 2492, column: 1, scope: !8181)
!8301 = distinct !DISubprogram(name: "nand_read_page_raw_notsupp", scope: !3, file: !3, line: 2580, type: !8302, scopeLine: 2582, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8302 = !DISubroutineType(types: !8303)
!8303 = !{!240, !4166, !4051, !240, !240}
!8304 = !DILocalVariable(name: "chip", arg: 1, scope: !8301, file: !3, line: 2580, type: !4166)
!8305 = !DILocation(line: 2580, column: 50, scope: !8301)
!8306 = !DILocalVariable(name: "buf", arg: 2, scope: !8301, file: !3, line: 2580, type: !4051)
!8307 = !DILocation(line: 2580, column: 60, scope: !8301)
!8308 = !DILocalVariable(name: "oob_required", arg: 3, scope: !8301, file: !3, line: 2581, type: !240)
!8309 = !DILocation(line: 2581, column: 15, scope: !8301)
!8310 = !DILocalVariable(name: "page", arg: 4, scope: !8301, file: !3, line: 2581, type: !240)
!8311 = !DILocation(line: 2581, column: 33, scope: !8301)
!8312 = !DILocation(line: 2583, column: 2, scope: !8301)
!8313 = distinct !DISubprogram(name: "nand_read_page_raw", scope: !3, file: !3, line: 2595, type: !4550, scopeLine: 2597, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8314 = !DILocalVariable(name: "chip", arg: 1, scope: !8313, file: !3, line: 2595, type: !4166)
!8315 = !DILocation(line: 2595, column: 42, scope: !8313)
!8316 = !DILocalVariable(name: "buf", arg: 2, scope: !8313, file: !3, line: 2595, type: !2753)
!8317 = !DILocation(line: 2595, column: 57, scope: !8313)
!8318 = !DILocalVariable(name: "oob_required", arg: 3, scope: !8313, file: !3, line: 2595, type: !240)
!8319 = !DILocation(line: 2595, column: 66, scope: !8313)
!8320 = !DILocalVariable(name: "page", arg: 4, scope: !8313, file: !3, line: 2596, type: !240)
!8321 = !DILocation(line: 2596, column: 14, scope: !8313)
!8322 = !DILocalVariable(name: "mtd", scope: !8313, file: !3, line: 2598, type: !2637)
!8323 = !DILocation(line: 2598, column: 19, scope: !8313)
!8324 = !DILocation(line: 2598, column: 37, scope: !8313)
!8325 = !DILocation(line: 2598, column: 25, scope: !8313)
!8326 = !DILocalVariable(name: "ret", scope: !8313, file: !3, line: 2599, type: !240)
!8327 = !DILocation(line: 2599, column: 6, scope: !8313)
!8328 = !DILocation(line: 2601, column: 26, scope: !8313)
!8329 = !DILocation(line: 2601, column: 32, scope: !8313)
!8330 = !DILocation(line: 2601, column: 41, scope: !8313)
!8331 = !DILocation(line: 2601, column: 46, scope: !8313)
!8332 = !DILocation(line: 2601, column: 51, scope: !8313)
!8333 = !DILocation(line: 2601, column: 8, scope: !8313)
!8334 = !DILocation(line: 2601, column: 6, scope: !8313)
!8335 = !DILocation(line: 2602, column: 6, scope: !8336)
!8336 = distinct !DILexicalBlock(scope: !8313, file: !3, line: 2602, column: 6)
!8337 = !DILocation(line: 2602, column: 6, scope: !8313)
!8338 = !DILocation(line: 2603, column: 10, scope: !8336)
!8339 = !DILocation(line: 2603, column: 3, scope: !8336)
!8340 = !DILocation(line: 2605, column: 6, scope: !8341)
!8341 = distinct !DILexicalBlock(scope: !8313, file: !3, line: 2605, column: 6)
!8342 = !DILocation(line: 2605, column: 6, scope: !8313)
!8343 = !DILocation(line: 2606, column: 27, scope: !8344)
!8344 = distinct !DILexicalBlock(scope: !8341, file: !3, line: 2605, column: 20)
!8345 = !DILocation(line: 2606, column: 33, scope: !8344)
!8346 = !DILocation(line: 2606, column: 39, scope: !8344)
!8347 = !DILocation(line: 2606, column: 48, scope: !8344)
!8348 = !DILocation(line: 2606, column: 53, scope: !8344)
!8349 = !DILocation(line: 2606, column: 9, scope: !8344)
!8350 = !DILocation(line: 2606, column: 7, scope: !8344)
!8351 = !DILocation(line: 2608, column: 7, scope: !8352)
!8352 = distinct !DILexicalBlock(scope: !8344, file: !3, line: 2608, column: 7)
!8353 = !DILocation(line: 2608, column: 7, scope: !8344)
!8354 = !DILocation(line: 2609, column: 11, scope: !8352)
!8355 = !DILocation(line: 2609, column: 4, scope: !8352)
!8356 = !DILocation(line: 2610, column: 2, scope: !8344)
!8357 = !DILocation(line: 2612, column: 2, scope: !8313)
!8358 = !DILocation(line: 2613, column: 1, scope: !8313)
!8359 = distinct !DISubprogram(name: "nand_monolithic_read_page_raw", scope: !3, file: !3, line: 2631, type: !8302, scopeLine: 2633, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8360 = !DILocalVariable(name: "chip", arg: 1, scope: !8359, file: !3, line: 2631, type: !4166)
!8361 = !DILocation(line: 2631, column: 53, scope: !8359)
!8362 = !DILocalVariable(name: "buf", arg: 2, scope: !8359, file: !3, line: 2631, type: !4051)
!8363 = !DILocation(line: 2631, column: 63, scope: !8359)
!8364 = !DILocalVariable(name: "oob_required", arg: 3, scope: !8359, file: !3, line: 2632, type: !240)
!8365 = !DILocation(line: 2632, column: 11, scope: !8359)
!8366 = !DILocalVariable(name: "page", arg: 4, scope: !8359, file: !3, line: 2632, type: !240)
!8367 = !DILocation(line: 2632, column: 29, scope: !8359)
!8368 = !DILocalVariable(name: "mtd", scope: !8359, file: !3, line: 2634, type: !2637)
!8369 = !DILocation(line: 2634, column: 19, scope: !8359)
!8370 = !DILocation(line: 2634, column: 37, scope: !8359)
!8371 = !DILocation(line: 2634, column: 25, scope: !8359)
!8372 = !DILocalVariable(name: "size", scope: !8359, file: !3, line: 2635, type: !7)
!8373 = !DILocation(line: 2635, column: 15, scope: !8359)
!8374 = !DILocation(line: 2635, column: 22, scope: !8359)
!8375 = !DILocation(line: 2635, column: 27, scope: !8359)
!8376 = !DILocalVariable(name: "read_buf", scope: !8359, file: !3, line: 2636, type: !4051)
!8377 = !DILocation(line: 2636, column: 6, scope: !8359)
!8378 = !DILocation(line: 2636, column: 17, scope: !8359)
!8379 = !DILocalVariable(name: "ret", scope: !8359, file: !3, line: 2637, type: !240)
!8380 = !DILocation(line: 2637, column: 6, scope: !8359)
!8381 = !DILocation(line: 2639, column: 6, scope: !8382)
!8382 = distinct !DILexicalBlock(scope: !8359, file: !3, line: 2639, column: 6)
!8383 = !DILocation(line: 2639, column: 6, scope: !8359)
!8384 = !DILocation(line: 2640, column: 11, scope: !8385)
!8385 = distinct !DILexicalBlock(scope: !8382, file: !3, line: 2639, column: 20)
!8386 = !DILocation(line: 2640, column: 16, scope: !8385)
!8387 = !DILocation(line: 2640, column: 8, scope: !8385)
!8388 = !DILocation(line: 2642, column: 7, scope: !8389)
!8389 = distinct !DILexicalBlock(scope: !8385, file: !3, line: 2642, column: 7)
!8390 = !DILocation(line: 2642, column: 14, scope: !8389)
!8391 = !DILocation(line: 2642, column: 20, scope: !8389)
!8392 = !DILocation(line: 2642, column: 11, scope: !8389)
!8393 = !DILocation(line: 2642, column: 7, scope: !8385)
!8394 = !DILocation(line: 2643, column: 33, scope: !8389)
!8395 = !DILocation(line: 2643, column: 15, scope: !8389)
!8396 = !DILocation(line: 2643, column: 13, scope: !8389)
!8397 = !DILocation(line: 2643, column: 4, scope: !8389)
!8398 = !DILocation(line: 2644, column: 2, scope: !8385)
!8399 = !DILocation(line: 2646, column: 26, scope: !8359)
!8400 = !DILocation(line: 2646, column: 32, scope: !8359)
!8401 = !DILocation(line: 2646, column: 41, scope: !8359)
!8402 = !DILocation(line: 2646, column: 51, scope: !8359)
!8403 = !DILocation(line: 2646, column: 8, scope: !8359)
!8404 = !DILocation(line: 2646, column: 6, scope: !8359)
!8405 = !DILocation(line: 2647, column: 6, scope: !8406)
!8406 = distinct !DILexicalBlock(scope: !8359, file: !3, line: 2647, column: 6)
!8407 = !DILocation(line: 2647, column: 6, scope: !8359)
!8408 = !DILocation(line: 2648, column: 10, scope: !8406)
!8409 = !DILocation(line: 2648, column: 3, scope: !8406)
!8410 = !DILocation(line: 2650, column: 6, scope: !8411)
!8411 = distinct !DILexicalBlock(scope: !8359, file: !3, line: 2650, column: 6)
!8412 = !DILocation(line: 2650, column: 13, scope: !8411)
!8413 = !DILocation(line: 2650, column: 19, scope: !8411)
!8414 = !DILocation(line: 2650, column: 10, scope: !8411)
!8415 = !DILocation(line: 2650, column: 6, scope: !8359)
!8416 = !DILocation(line: 2651, column: 10, scope: !8411)
!8417 = !DILocation(line: 2651, column: 15, scope: !8411)
!8418 = !DILocation(line: 2651, column: 25, scope: !8411)
!8419 = !DILocation(line: 2651, column: 30, scope: !8411)
!8420 = !DILocation(line: 2651, column: 3, scope: !8411)
!8421 = !DILocation(line: 2653, column: 2, scope: !8359)
!8422 = !DILocation(line: 2654, column: 1, scope: !8359)
!8423 = distinct !DISubprogram(name: "nand_get_data_buf", scope: !117, file: !117, line: 1416, type: !8424, scopeLine: 1417, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8424 = !DISubroutineType(types: !8425)
!8425 = !{!330, !4166}
!8426 = !DILocalVariable(name: "chip", arg: 1, scope: !8423, file: !117, line: 1416, type: !4166)
!8427 = !DILocation(line: 1416, column: 57, scope: !8423)
!8428 = !DILocation(line: 1418, column: 2, scope: !8423)
!8429 = !DILocation(line: 1418, column: 8, scope: !8423)
!8430 = !DILocation(line: 1418, column: 18, scope: !8423)
!8431 = !DILocation(line: 1418, column: 23, scope: !8423)
!8432 = !DILocation(line: 1420, column: 9, scope: !8423)
!8433 = !DILocation(line: 1420, column: 15, scope: !8423)
!8434 = !DILocation(line: 1420, column: 2, scope: !8423)
!8435 = distinct !DISubprogram(name: "nand_read_oob_std", scope: !3, file: !3, line: 3289, type: !4309, scopeLine: 3290, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8436 = !DILocalVariable(name: "chip", arg: 1, scope: !8435, file: !3, line: 3289, type: !4166)
!8437 = !DILocation(line: 3289, column: 41, scope: !8435)
!8438 = !DILocalVariable(name: "page", arg: 2, scope: !8435, file: !3, line: 3289, type: !240)
!8439 = !DILocation(line: 3289, column: 51, scope: !8435)
!8440 = !DILocalVariable(name: "mtd", scope: !8435, file: !3, line: 3291, type: !2637)
!8441 = !DILocation(line: 3291, column: 19, scope: !8435)
!8442 = !DILocation(line: 3291, column: 37, scope: !8435)
!8443 = !DILocation(line: 3291, column: 25, scope: !8435)
!8444 = !DILocation(line: 3293, column: 26, scope: !8435)
!8445 = !DILocation(line: 3293, column: 32, scope: !8435)
!8446 = !DILocation(line: 3293, column: 41, scope: !8435)
!8447 = !DILocation(line: 3293, column: 47, scope: !8435)
!8448 = !DILocation(line: 3293, column: 56, scope: !8435)
!8449 = !DILocation(line: 3293, column: 61, scope: !8435)
!8450 = !DILocation(line: 3293, column: 9, scope: !8435)
!8451 = !DILocation(line: 3293, column: 2, scope: !8435)
!8452 = distinct !DISubprogram(name: "nand_write_oob_std", scope: !3, file: !3, line: 3356, type: !4309, scopeLine: 3357, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8453 = !DILocalVariable(name: "chip", arg: 1, scope: !8452, file: !3, line: 3356, type: !4166)
!8454 = !DILocation(line: 3356, column: 42, scope: !8452)
!8455 = !DILocalVariable(name: "page", arg: 2, scope: !8452, file: !3, line: 3356, type: !240)
!8456 = !DILocation(line: 3356, column: 52, scope: !8452)
!8457 = !DILocalVariable(name: "mtd", scope: !8452, file: !3, line: 3358, type: !2637)
!8458 = !DILocation(line: 3358, column: 19, scope: !8452)
!8459 = !DILocation(line: 3358, column: 37, scope: !8452)
!8460 = !DILocation(line: 3358, column: 25, scope: !8452)
!8461 = !DILocation(line: 3360, column: 27, scope: !8452)
!8462 = !DILocation(line: 3360, column: 33, scope: !8452)
!8463 = !DILocation(line: 3360, column: 39, scope: !8452)
!8464 = !DILocation(line: 3360, column: 44, scope: !8452)
!8465 = !DILocation(line: 3360, column: 55, scope: !8452)
!8466 = !DILocation(line: 3360, column: 61, scope: !8452)
!8467 = !DILocation(line: 3361, column: 6, scope: !8452)
!8468 = !DILocation(line: 3361, column: 11, scope: !8452)
!8469 = !DILocation(line: 3360, column: 9, scope: !8452)
!8470 = !DILocation(line: 3360, column: 2, scope: !8452)
!8471 = distinct !DISubprogram(name: "nand_write_page_raw_notsupp", scope: !3, file: !3, line: 3559, type: !8472, scopeLine: 3561, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8472 = !DISubroutineType(types: !8473)
!8473 = !{!240, !4166, !4388, !240, !240}
!8474 = !DILocalVariable(name: "chip", arg: 1, scope: !8471, file: !3, line: 3559, type: !4166)
!8475 = !DILocation(line: 3559, column: 51, scope: !8471)
!8476 = !DILocalVariable(name: "buf", arg: 2, scope: !8471, file: !3, line: 3559, type: !4388)
!8477 = !DILocation(line: 3559, column: 67, scope: !8471)
!8478 = !DILocalVariable(name: "oob_required", arg: 3, scope: !8471, file: !3, line: 3560, type: !240)
!8479 = !DILocation(line: 3560, column: 9, scope: !8471)
!8480 = !DILocalVariable(name: "page", arg: 4, scope: !8471, file: !3, line: 3560, type: !240)
!8481 = !DILocation(line: 3560, column: 27, scope: !8471)
!8482 = !DILocation(line: 3562, column: 2, scope: !8471)
!8483 = distinct !DISubprogram(name: "nand_write_page_raw", scope: !3, file: !3, line: 3574, type: !4554, scopeLine: 3576, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8484 = !DILocalVariable(name: "chip", arg: 1, scope: !8483, file: !3, line: 3574, type: !4166)
!8485 = !DILocation(line: 3574, column: 43, scope: !8483)
!8486 = !DILocalVariable(name: "buf", arg: 2, scope: !8483, file: !3, line: 3574, type: !4542)
!8487 = !DILocation(line: 3574, column: 64, scope: !8483)
!8488 = !DILocalVariable(name: "oob_required", arg: 3, scope: !8483, file: !3, line: 3575, type: !240)
!8489 = !DILocation(line: 3575, column: 8, scope: !8483)
!8490 = !DILocalVariable(name: "page", arg: 4, scope: !8483, file: !3, line: 3575, type: !240)
!8491 = !DILocation(line: 3575, column: 26, scope: !8483)
!8492 = !DILocalVariable(name: "mtd", scope: !8483, file: !3, line: 3577, type: !2637)
!8493 = !DILocation(line: 3577, column: 19, scope: !8483)
!8494 = !DILocation(line: 3577, column: 37, scope: !8483)
!8495 = !DILocation(line: 3577, column: 25, scope: !8483)
!8496 = !DILocalVariable(name: "ret", scope: !8483, file: !3, line: 3578, type: !240)
!8497 = !DILocation(line: 3578, column: 6, scope: !8483)
!8498 = !DILocation(line: 3580, column: 32, scope: !8483)
!8499 = !DILocation(line: 3580, column: 38, scope: !8483)
!8500 = !DILocation(line: 3580, column: 47, scope: !8483)
!8501 = !DILocation(line: 3580, column: 52, scope: !8483)
!8502 = !DILocation(line: 3580, column: 57, scope: !8483)
!8503 = !DILocation(line: 3580, column: 8, scope: !8483)
!8504 = !DILocation(line: 3580, column: 6, scope: !8483)
!8505 = !DILocation(line: 3581, column: 6, scope: !8506)
!8506 = distinct !DILexicalBlock(scope: !8483, file: !3, line: 3581, column: 6)
!8507 = !DILocation(line: 3581, column: 6, scope: !8483)
!8508 = !DILocation(line: 3582, column: 10, scope: !8506)
!8509 = !DILocation(line: 3582, column: 3, scope: !8506)
!8510 = !DILocation(line: 3584, column: 6, scope: !8511)
!8511 = distinct !DILexicalBlock(scope: !8483, file: !3, line: 3584, column: 6)
!8512 = !DILocation(line: 3584, column: 6, scope: !8483)
!8513 = !DILocation(line: 3585, column: 28, scope: !8514)
!8514 = distinct !DILexicalBlock(scope: !8511, file: !3, line: 3584, column: 20)
!8515 = !DILocation(line: 3585, column: 34, scope: !8514)
!8516 = !DILocation(line: 3585, column: 40, scope: !8514)
!8517 = !DILocation(line: 3585, column: 49, scope: !8514)
!8518 = !DILocation(line: 3585, column: 54, scope: !8514)
!8519 = !DILocation(line: 3585, column: 9, scope: !8514)
!8520 = !DILocation(line: 3585, column: 7, scope: !8514)
!8521 = !DILocation(line: 3587, column: 7, scope: !8522)
!8522 = distinct !DILexicalBlock(scope: !8514, file: !3, line: 3587, column: 7)
!8523 = !DILocation(line: 3587, column: 7, scope: !8514)
!8524 = !DILocation(line: 3588, column: 11, scope: !8522)
!8525 = !DILocation(line: 3588, column: 4, scope: !8522)
!8526 = !DILocation(line: 3589, column: 2, scope: !8514)
!8527 = !DILocation(line: 3591, column: 31, scope: !8483)
!8528 = !DILocation(line: 3591, column: 9, scope: !8483)
!8529 = !DILocation(line: 3591, column: 2, scope: !8483)
!8530 = !DILocation(line: 3592, column: 1, scope: !8483)
!8531 = distinct !DISubprogram(name: "nand_monolithic_write_page_raw", scope: !3, file: !3, line: 3611, type: !8472, scopeLine: 3613, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8532 = !DILocalVariable(name: "chip", arg: 1, scope: !8531, file: !3, line: 3611, type: !4166)
!8533 = !DILocation(line: 3611, column: 54, scope: !8531)
!8534 = !DILocalVariable(name: "buf", arg: 2, scope: !8531, file: !3, line: 3611, type: !4388)
!8535 = !DILocation(line: 3611, column: 70, scope: !8531)
!8536 = !DILocalVariable(name: "oob_required", arg: 3, scope: !8531, file: !3, line: 3612, type: !240)
!8537 = !DILocation(line: 3612, column: 12, scope: !8531)
!8538 = !DILocalVariable(name: "page", arg: 4, scope: !8531, file: !3, line: 3612, type: !240)
!8539 = !DILocation(line: 3612, column: 30, scope: !8531)
!8540 = !DILocalVariable(name: "mtd", scope: !8531, file: !3, line: 3614, type: !2637)
!8541 = !DILocation(line: 3614, column: 19, scope: !8531)
!8542 = !DILocation(line: 3614, column: 37, scope: !8531)
!8543 = !DILocation(line: 3614, column: 25, scope: !8531)
!8544 = !DILocalVariable(name: "size", scope: !8531, file: !3, line: 3615, type: !7)
!8545 = !DILocation(line: 3615, column: 15, scope: !8531)
!8546 = !DILocation(line: 3615, column: 22, scope: !8531)
!8547 = !DILocation(line: 3615, column: 27, scope: !8531)
!8548 = !DILocalVariable(name: "write_buf", scope: !8531, file: !3, line: 3616, type: !4051)
!8549 = !DILocation(line: 3616, column: 6, scope: !8531)
!8550 = !DILocation(line: 3616, column: 24, scope: !8531)
!8551 = !DILocation(line: 3618, column: 6, scope: !8552)
!8552 = distinct !DILexicalBlock(scope: !8531, file: !3, line: 3618, column: 6)
!8553 = !DILocation(line: 3618, column: 6, scope: !8531)
!8554 = !DILocation(line: 3619, column: 11, scope: !8555)
!8555 = distinct !DILexicalBlock(scope: !8552, file: !3, line: 3618, column: 20)
!8556 = !DILocation(line: 3619, column: 16, scope: !8555)
!8557 = !DILocation(line: 3619, column: 8, scope: !8555)
!8558 = !DILocation(line: 3621, column: 7, scope: !8559)
!8559 = distinct !DILexicalBlock(scope: !8555, file: !3, line: 3621, column: 7)
!8560 = !DILocation(line: 3621, column: 14, scope: !8559)
!8561 = !DILocation(line: 3621, column: 20, scope: !8559)
!8562 = !DILocation(line: 3621, column: 11, scope: !8559)
!8563 = !DILocation(line: 3621, column: 7, scope: !8555)
!8564 = !DILocation(line: 3622, column: 34, scope: !8565)
!8565 = distinct !DILexicalBlock(scope: !8559, file: !3, line: 3621, column: 30)
!8566 = !DILocation(line: 3622, column: 16, scope: !8565)
!8567 = !DILocation(line: 3622, column: 14, scope: !8565)
!8568 = !DILocation(line: 3623, column: 11, scope: !8565)
!8569 = !DILocation(line: 3623, column: 22, scope: !8565)
!8570 = !DILocation(line: 3623, column: 27, scope: !8565)
!8571 = !DILocation(line: 3623, column: 32, scope: !8565)
!8572 = !DILocation(line: 3623, column: 4, scope: !8565)
!8573 = !DILocation(line: 3624, column: 3, scope: !8565)
!8574 = !DILocation(line: 3625, column: 2, scope: !8555)
!8575 = !DILocation(line: 3627, column: 27, scope: !8531)
!8576 = !DILocation(line: 3627, column: 33, scope: !8531)
!8577 = !DILocation(line: 3627, column: 42, scope: !8531)
!8578 = !DILocation(line: 3627, column: 53, scope: !8531)
!8579 = !DILocation(line: 3627, column: 9, scope: !8531)
!8580 = !DILocation(line: 3627, column: 2, scope: !8531)
!8581 = distinct !DISubprogram(name: "nand_erase_nand", scope: !3, file: !3, line: 4170, type: !8582, scopeLine: 4172, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8582 = !DISubroutineType(types: !8583)
!8583 = !{!240, !4166, !2710, !240}
!8584 = !DILocalVariable(name: "chip", arg: 1, scope: !8581, file: !3, line: 4170, type: !4166)
!8585 = !DILocation(line: 4170, column: 39, scope: !8581)
!8586 = !DILocalVariable(name: "instr", arg: 2, scope: !8581, file: !3, line: 4170, type: !2710)
!8587 = !DILocation(line: 4170, column: 64, scope: !8581)
!8588 = !DILocalVariable(name: "allowbbt", arg: 3, scope: !8581, file: !3, line: 4171, type: !240)
!8589 = !DILocation(line: 4171, column: 11, scope: !8581)
!8590 = !DILocalVariable(name: "page", scope: !8581, file: !3, line: 4173, type: !240)
!8591 = !DILocation(line: 4173, column: 6, scope: !8581)
!8592 = !DILocalVariable(name: "pages_per_block", scope: !8581, file: !3, line: 4173, type: !240)
!8593 = !DILocation(line: 4173, column: 12, scope: !8581)
!8594 = !DILocalVariable(name: "ret", scope: !8581, file: !3, line: 4173, type: !240)
!8595 = !DILocation(line: 4173, column: 29, scope: !8581)
!8596 = !DILocalVariable(name: "chipnr", scope: !8581, file: !3, line: 4173, type: !240)
!8597 = !DILocation(line: 4173, column: 34, scope: !8581)
!8598 = !DILocalVariable(name: "len", scope: !8581, file: !3, line: 4174, type: !508)
!8599 = !DILocation(line: 4174, column: 9, scope: !8581)
!8600 = !DILocation(line: 4176, column: 2, scope: !8601)
!8601 = distinct !DILexicalBlock(scope: !8602, file: !3, line: 4176, column: 2)
!8602 = distinct !DILexicalBlock(scope: !8581, file: !3, line: 4176, column: 2)
!8603 = !DILocation(line: 4176, column: 2, scope: !8602)
!8604 = !DILocation(line: 4180, column: 21, scope: !8605)
!8605 = distinct !DILexicalBlock(scope: !8581, file: !3, line: 4180, column: 6)
!8606 = !DILocation(line: 4180, column: 27, scope: !8605)
!8607 = !DILocation(line: 4180, column: 34, scope: !8605)
!8608 = !DILocation(line: 4180, column: 40, scope: !8605)
!8609 = !DILocation(line: 4180, column: 47, scope: !8605)
!8610 = !DILocation(line: 4180, column: 6, scope: !8605)
!8611 = !DILocation(line: 4180, column: 6, scope: !8581)
!8612 = !DILocation(line: 4181, column: 3, scope: !8605)
!8613 = !DILocation(line: 4184, column: 24, scope: !8581)
!8614 = !DILocation(line: 4184, column: 8, scope: !8581)
!8615 = !DILocation(line: 4184, column: 6, scope: !8581)
!8616 = !DILocation(line: 4185, column: 6, scope: !8617)
!8617 = distinct !DILexicalBlock(scope: !8581, file: !3, line: 4185, column: 6)
!8618 = !DILocation(line: 4185, column: 6, scope: !8581)
!8619 = !DILocation(line: 4186, column: 10, scope: !8617)
!8620 = !DILocation(line: 4186, column: 3, scope: !8617)
!8621 = !DILocation(line: 4189, column: 15, scope: !8581)
!8622 = !DILocation(line: 4189, column: 22, scope: !8581)
!8623 = !DILocation(line: 4189, column: 30, scope: !8581)
!8624 = !DILocation(line: 4189, column: 36, scope: !8581)
!8625 = !DILocation(line: 4189, column: 27, scope: !8581)
!8626 = !DILocation(line: 4189, column: 9, scope: !8581)
!8627 = !DILocation(line: 4189, column: 7, scope: !8581)
!8628 = !DILocation(line: 4190, column: 17, scope: !8581)
!8629 = !DILocation(line: 4190, column: 24, scope: !8581)
!8630 = !DILocation(line: 4190, column: 32, scope: !8581)
!8631 = !DILocation(line: 4190, column: 38, scope: !8581)
!8632 = !DILocation(line: 4190, column: 29, scope: !8581)
!8633 = !DILocation(line: 4190, column: 11, scope: !8581)
!8634 = !DILocation(line: 4190, column: 9, scope: !8581)
!8635 = !DILocation(line: 4193, column: 26, scope: !8581)
!8636 = !DILocation(line: 4193, column: 32, scope: !8581)
!8637 = !DILocation(line: 4193, column: 51, scope: !8581)
!8638 = !DILocation(line: 4193, column: 57, scope: !8581)
!8639 = !DILocation(line: 4193, column: 49, scope: !8581)
!8640 = !DILocation(line: 4193, column: 22, scope: !8581)
!8641 = !DILocation(line: 4193, column: 18, scope: !8581)
!8642 = !DILocation(line: 4196, column: 21, scope: !8581)
!8643 = !DILocation(line: 4196, column: 27, scope: !8581)
!8644 = !DILocation(line: 4196, column: 2, scope: !8581)
!8645 = !DILocation(line: 4199, column: 20, scope: !8646)
!8646 = distinct !DILexicalBlock(scope: !8581, file: !3, line: 4199, column: 6)
!8647 = !DILocation(line: 4199, column: 6, scope: !8646)
!8648 = !DILocation(line: 4199, column: 6, scope: !8581)
!8649 = !DILocation(line: 4200, column: 3, scope: !8650)
!8650 = distinct !DILexicalBlock(scope: !8651, file: !3, line: 4200, column: 3)
!8651 = distinct !DILexicalBlock(scope: !8652, file: !3, line: 4200, column: 3)
!8652 = distinct !DILexicalBlock(scope: !8646, file: !3, line: 4199, column: 27)
!8653 = !DILocation(line: 4200, column: 3, scope: !8651)
!8654 = !DILocation(line: 4202, column: 7, scope: !8652)
!8655 = !DILocation(line: 4203, column: 3, scope: !8652)
!8656 = !DILocation(line: 4207, column: 8, scope: !8581)
!8657 = !DILocation(line: 4207, column: 15, scope: !8581)
!8658 = !DILocation(line: 4207, column: 6, scope: !8581)
!8659 = !DILocation(line: 4209, column: 2, scope: !8581)
!8660 = !DILocation(line: 4209, column: 9, scope: !8581)
!8661 = !DILocation(line: 4211, column: 27, scope: !8662)
!8662 = distinct !DILexicalBlock(scope: !8663, file: !3, line: 4211, column: 7)
!8663 = distinct !DILexicalBlock(scope: !8581, file: !3, line: 4209, column: 14)
!8664 = !DILocation(line: 4211, column: 43, scope: !8662)
!8665 = !DILocation(line: 4211, column: 34, scope: !8662)
!8666 = !DILocation(line: 4212, column: 6, scope: !8662)
!8667 = !DILocation(line: 4212, column: 12, scope: !8662)
!8668 = !DILocation(line: 4211, column: 49, scope: !8662)
!8669 = !DILocation(line: 4212, column: 24, scope: !8662)
!8670 = !DILocation(line: 4211, column: 7, scope: !8662)
!8671 = !DILocation(line: 4211, column: 7, scope: !8663)
!8672 = !DILocation(line: 4213, column: 4, scope: !8673)
!8673 = distinct !DILexicalBlock(scope: !8662, file: !3, line: 4212, column: 35)
!8674 = !DILocation(line: 4215, column: 8, scope: !8673)
!8675 = !DILocation(line: 4216, column: 4, scope: !8673)
!8676 = !DILocation(line: 4223, column: 7, scope: !8677)
!8677 = distinct !DILexicalBlock(scope: !8663, file: !3, line: 4223, column: 7)
!8678 = !DILocation(line: 4223, column: 15, scope: !8677)
!8679 = !DILocation(line: 4223, column: 21, scope: !8677)
!8680 = !DILocation(line: 4223, column: 31, scope: !8677)
!8681 = !DILocation(line: 4223, column: 12, scope: !8677)
!8682 = !DILocation(line: 4223, column: 36, scope: !8677)
!8683 = !DILocation(line: 4223, column: 39, scope: !8677)
!8684 = !DILocation(line: 4223, column: 45, scope: !8677)
!8685 = !DILocation(line: 4223, column: 55, scope: !8677)
!8686 = !DILocation(line: 4224, column: 8, scope: !8677)
!8687 = !DILocation(line: 4224, column: 15, scope: !8677)
!8688 = !DILocation(line: 4224, column: 13, scope: !8677)
!8689 = !DILocation(line: 4223, column: 60, scope: !8677)
!8690 = !DILocation(line: 4223, column: 7, scope: !8663)
!8691 = !DILocation(line: 4225, column: 4, scope: !8677)
!8692 = !DILocation(line: 4225, column: 10, scope: !8677)
!8693 = !DILocation(line: 4225, column: 20, scope: !8677)
!8694 = !DILocation(line: 4225, column: 25, scope: !8677)
!8695 = !DILocation(line: 4227, column: 23, scope: !8663)
!8696 = !DILocation(line: 4227, column: 30, scope: !8663)
!8697 = !DILocation(line: 4227, column: 37, scope: !8663)
!8698 = !DILocation(line: 4227, column: 43, scope: !8663)
!8699 = !DILocation(line: 4227, column: 35, scope: !8663)
!8700 = !DILocation(line: 4228, column: 10, scope: !8663)
!8701 = !DILocation(line: 4228, column: 16, scope: !8663)
!8702 = !DILocation(line: 4228, column: 35, scope: !8663)
!8703 = !DILocation(line: 4228, column: 41, scope: !8663)
!8704 = !DILocation(line: 4228, column: 33, scope: !8663)
!8705 = !DILocation(line: 4227, column: 53, scope: !8663)
!8706 = !DILocation(line: 4227, column: 9, scope: !8663)
!8707 = !DILocation(line: 4227, column: 7, scope: !8663)
!8708 = !DILocation(line: 4229, column: 7, scope: !8709)
!8709 = distinct !DILexicalBlock(scope: !8663, file: !3, line: 4229, column: 7)
!8710 = !DILocation(line: 4229, column: 7, scope: !8663)
!8711 = !DILocation(line: 4230, column: 4, scope: !8712)
!8712 = distinct !DILexicalBlock(scope: !8713, file: !3, line: 4230, column: 4)
!8713 = distinct !DILexicalBlock(scope: !8714, file: !3, line: 4230, column: 4)
!8714 = distinct !DILexicalBlock(scope: !8709, file: !3, line: 4229, column: 12)
!8715 = !DILocation(line: 4230, column: 4, scope: !8713)
!8716 = !DILocation(line: 4233, column: 14, scope: !8714)
!8717 = !DILocation(line: 4233, column: 6, scope: !8714)
!8718 = !DILocation(line: 4233, column: 22, scope: !8714)
!8719 = !DILocation(line: 4233, column: 28, scope: !8714)
!8720 = !DILocation(line: 4233, column: 19, scope: !8714)
!8721 = !DILocation(line: 4232, column: 4, scope: !8714)
!8722 = !DILocation(line: 4232, column: 11, scope: !8714)
!8723 = !DILocation(line: 4232, column: 21, scope: !8714)
!8724 = !DILocation(line: 4234, column: 4, scope: !8714)
!8725 = !DILocation(line: 4238, column: 19, scope: !8663)
!8726 = !DILocation(line: 4238, column: 25, scope: !8663)
!8727 = !DILocation(line: 4238, column: 16, scope: !8663)
!8728 = !DILocation(line: 4238, column: 7, scope: !8663)
!8729 = !DILocation(line: 4239, column: 11, scope: !8663)
!8730 = !DILocation(line: 4239, column: 8, scope: !8663)
!8731 = !DILocation(line: 4242, column: 7, scope: !8732)
!8732 = distinct !DILexicalBlock(scope: !8663, file: !3, line: 4242, column: 7)
!8733 = !DILocation(line: 4242, column: 11, scope: !8732)
!8734 = !DILocation(line: 4242, column: 16, scope: !8732)
!8735 = !DILocation(line: 4242, column: 23, scope: !8732)
!8736 = !DILocation(line: 4242, column: 29, scope: !8732)
!8737 = !DILocation(line: 4242, column: 21, scope: !8732)
!8738 = !DILocation(line: 4242, column: 7, scope: !8663)
!8739 = !DILocation(line: 4243, column: 10, scope: !8740)
!8740 = distinct !DILexicalBlock(scope: !8732, file: !3, line: 4242, column: 40)
!8741 = !DILocation(line: 4244, column: 25, scope: !8740)
!8742 = !DILocation(line: 4244, column: 4, scope: !8740)
!8743 = !DILocation(line: 4245, column: 23, scope: !8740)
!8744 = !DILocation(line: 4245, column: 29, scope: !8740)
!8745 = !DILocation(line: 4245, column: 4, scope: !8740)
!8746 = !DILocation(line: 4246, column: 3, scope: !8740)
!8747 = distinct !{!8747, !8659, !8748}
!8748 = !DILocation(line: 4247, column: 2, scope: !8581)
!8749 = !DILocation(line: 4249, column: 6, scope: !8581)
!8750 = !DILocation(line: 4249, column: 2, scope: !8581)
!8751 = !DILabel(scope: !8581, name: "erase_exit", file: !3, line: 4250)
!8752 = !DILocation(line: 4250, column: 1, scope: !8581)
!8753 = !DILocation(line: 4253, column: 23, scope: !8581)
!8754 = !DILocation(line: 4253, column: 2, scope: !8581)
!8755 = !DILocation(line: 4254, column: 22, scope: !8581)
!8756 = !DILocation(line: 4254, column: 2, scope: !8581)
!8757 = !DILocation(line: 4257, column: 9, scope: !8581)
!8758 = !DILocation(line: 4257, column: 2, scope: !8581)
!8759 = !DILocation(line: 4258, column: 1, scope: !8581)
!8760 = distinct !DISubprogram(name: "check_offs_len", scope: !3, file: !3, line: 99, type: !4304, scopeLine: 100, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8761 = !DILocalVariable(name: "chip", arg: 1, scope: !8760, file: !3, line: 99, type: !4166)
!8762 = !DILocation(line: 99, column: 45, scope: !8760)
!8763 = !DILocalVariable(name: "ofs", arg: 2, scope: !8760, file: !3, line: 99, type: !508)
!8764 = !DILocation(line: 99, column: 58, scope: !8760)
!8765 = !DILocalVariable(name: "len", arg: 3, scope: !8760, file: !3, line: 99, type: !2645)
!8766 = !DILocation(line: 99, column: 72, scope: !8760)
!8767 = !DILocalVariable(name: "ret", scope: !8760, file: !3, line: 101, type: !240)
!8768 = !DILocation(line: 101, column: 6, scope: !8760)
!8769 = !DILocation(line: 104, column: 6, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !8760, file: !3, line: 104, column: 6)
!8771 = !DILocation(line: 104, column: 22, scope: !8770)
!8772 = !DILocation(line: 104, column: 28, scope: !8770)
!8773 = !DILocation(line: 104, column: 19, scope: !8770)
!8774 = !DILocation(line: 104, column: 46, scope: !8770)
!8775 = !DILocation(line: 104, column: 10, scope: !8770)
!8776 = !DILocation(line: 104, column: 6, scope: !8760)
!8777 = !DILocation(line: 105, column: 3, scope: !8778)
!8778 = distinct !DILexicalBlock(scope: !8779, file: !3, line: 105, column: 3)
!8779 = distinct !DILexicalBlock(scope: !8780, file: !3, line: 105, column: 3)
!8780 = distinct !DILexicalBlock(scope: !8770, file: !3, line: 104, column: 52)
!8781 = !DILocation(line: 105, column: 3, scope: !8779)
!8782 = !DILocation(line: 106, column: 7, scope: !8780)
!8783 = !DILocation(line: 107, column: 2, scope: !8780)
!8784 = !DILocation(line: 110, column: 6, scope: !8785)
!8785 = distinct !DILexicalBlock(scope: !8760, file: !3, line: 110, column: 6)
!8786 = !DILocation(line: 110, column: 22, scope: !8785)
!8787 = !DILocation(line: 110, column: 28, scope: !8785)
!8788 = !DILocation(line: 110, column: 19, scope: !8785)
!8789 = !DILocation(line: 110, column: 46, scope: !8785)
!8790 = !DILocation(line: 110, column: 10, scope: !8785)
!8791 = !DILocation(line: 110, column: 6, scope: !8760)
!8792 = !DILocation(line: 111, column: 3, scope: !8793)
!8793 = distinct !DILexicalBlock(scope: !8794, file: !3, line: 111, column: 3)
!8794 = distinct !DILexicalBlock(scope: !8795, file: !3, line: 111, column: 3)
!8795 = distinct !DILexicalBlock(scope: !8785, file: !3, line: 110, column: 52)
!8796 = !DILocation(line: 111, column: 3, scope: !8794)
!8797 = !DILocation(line: 112, column: 7, scope: !8795)
!8798 = !DILocation(line: 113, column: 2, scope: !8795)
!8799 = !DILocation(line: 115, column: 9, scope: !8760)
!8800 = !DILocation(line: 115, column: 2, scope: !8760)
!8801 = distinct !DISubprogram(name: "nand_get_device", scope: !3, file: !3, line: 300, type: !4222, scopeLine: 301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8802 = !DILocalVariable(name: "chip", arg: 1, scope: !8801, file: !3, line: 300, type: !4166)
!8803 = !DILocation(line: 300, column: 46, scope: !8801)
!8804 = !DILocation(line: 302, column: 14, scope: !8801)
!8805 = !DILocation(line: 302, column: 20, scope: !8801)
!8806 = !DILocation(line: 302, column: 2, scope: !8801)
!8807 = !DILocation(line: 303, column: 6, scope: !8808)
!8808 = distinct !DILexicalBlock(scope: !8801, file: !3, line: 303, column: 6)
!8809 = !DILocation(line: 303, column: 12, scope: !8808)
!8810 = !DILocation(line: 303, column: 6, scope: !8801)
!8811 = !DILocation(line: 304, column: 17, scope: !8812)
!8812 = distinct !DILexicalBlock(scope: !8808, file: !3, line: 303, column: 23)
!8813 = !DILocation(line: 304, column: 23, scope: !8812)
!8814 = !DILocation(line: 304, column: 3, scope: !8812)
!8815 = !DILocation(line: 305, column: 3, scope: !8812)
!8816 = !DILocation(line: 307, column: 14, scope: !8801)
!8817 = !DILocation(line: 307, column: 20, scope: !8801)
!8818 = !DILocation(line: 307, column: 32, scope: !8801)
!8819 = !DILocation(line: 307, column: 2, scope: !8801)
!8820 = !DILocation(line: 309, column: 2, scope: !8801)
!8821 = !DILocation(line: 310, column: 1, scope: !8801)
!8822 = distinct !DISubprogram(name: "nand_check_wp", scope: !3, file: !3, line: 319, type: !4222, scopeLine: 320, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8823 = !DILocalVariable(name: "chip", arg: 1, scope: !8822, file: !3, line: 319, type: !4166)
!8824 = !DILocation(line: 319, column: 44, scope: !8822)
!8825 = !DILocalVariable(name: "status", scope: !8822, file: !3, line: 321, type: !1372)
!8826 = !DILocation(line: 321, column: 5, scope: !8822)
!8827 = !DILocalVariable(name: "ret", scope: !8822, file: !3, line: 322, type: !240)
!8828 = !DILocation(line: 322, column: 6, scope: !8822)
!8829 = !DILocation(line: 325, column: 6, scope: !8830)
!8830 = distinct !DILexicalBlock(scope: !8822, file: !3, line: 325, column: 6)
!8831 = !DILocation(line: 325, column: 12, scope: !8830)
!8832 = !DILocation(line: 325, column: 20, scope: !8830)
!8833 = !DILocation(line: 325, column: 6, scope: !8822)
!8834 = !DILocation(line: 326, column: 3, scope: !8830)
!8835 = !DILocation(line: 329, column: 23, scope: !8822)
!8836 = !DILocation(line: 329, column: 8, scope: !8822)
!8837 = !DILocation(line: 329, column: 6, scope: !8822)
!8838 = !DILocation(line: 330, column: 6, scope: !8839)
!8839 = distinct !DILexicalBlock(scope: !8822, file: !3, line: 330, column: 6)
!8840 = !DILocation(line: 330, column: 6, scope: !8822)
!8841 = !DILocation(line: 331, column: 10, scope: !8839)
!8842 = !DILocation(line: 331, column: 3, scope: !8839)
!8843 = !DILocation(line: 333, column: 9, scope: !8822)
!8844 = !DILocation(line: 333, column: 16, scope: !8822)
!8845 = !DILocation(line: 333, column: 2, scope: !8822)
!8846 = !DILocation(line: 334, column: 1, scope: !8822)
!8847 = distinct !DISubprogram(name: "nand_block_checkbad", scope: !3, file: !3, line: 581, type: !8848, scopeLine: 582, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8848 = !DISubroutineType(types: !8849)
!8849 = !{!240, !4166, !508, !240}
!8850 = !DILocalVariable(name: "chip", arg: 1, scope: !8847, file: !3, line: 581, type: !4166)
!8851 = !DILocation(line: 581, column: 50, scope: !8847)
!8852 = !DILocalVariable(name: "ofs", arg: 2, scope: !8847, file: !3, line: 581, type: !508)
!8853 = !DILocation(line: 581, column: 63, scope: !8847)
!8854 = !DILocalVariable(name: "allowbbt", arg: 3, scope: !8847, file: !3, line: 581, type: !240)
!8855 = !DILocation(line: 581, column: 72, scope: !8847)
!8856 = !DILocation(line: 584, column: 6, scope: !8857)
!8857 = distinct !DILexicalBlock(scope: !8847, file: !3, line: 584, column: 6)
!8858 = !DILocation(line: 584, column: 12, scope: !8857)
!8859 = !DILocation(line: 584, column: 6, scope: !8847)
!8860 = !DILocation(line: 585, column: 25, scope: !8857)
!8861 = !DILocation(line: 585, column: 31, scope: !8857)
!8862 = !DILocation(line: 585, column: 36, scope: !8857)
!8863 = !DILocation(line: 585, column: 10, scope: !8857)
!8864 = !DILocation(line: 585, column: 3, scope: !8857)
!8865 = !DILocation(line: 587, column: 24, scope: !8847)
!8866 = !DILocation(line: 587, column: 30, scope: !8847)
!8867 = !DILocation(line: 587, column: 9, scope: !8847)
!8868 = !DILocation(line: 587, column: 2, scope: !8847)
!8869 = !DILocation(line: 588, column: 1, scope: !8847)
!8870 = distinct !DISubprogram(name: "nand_release_device", scope: !3, file: !3, line: 209, type: !4218, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8871 = !DILocalVariable(name: "chip", arg: 1, scope: !8870, file: !3, line: 209, type: !4166)
!8872 = !DILocation(line: 209, column: 51, scope: !8870)
!8873 = !DILocation(line: 212, column: 16, scope: !8870)
!8874 = !DILocation(line: 212, column: 22, scope: !8870)
!8875 = !DILocation(line: 212, column: 34, scope: !8870)
!8876 = !DILocation(line: 212, column: 2, scope: !8870)
!8877 = !DILocation(line: 213, column: 16, scope: !8870)
!8878 = !DILocation(line: 213, column: 22, scope: !8870)
!8879 = !DILocation(line: 213, column: 2, scope: !8870)
!8880 = !DILocation(line: 214, column: 1, scope: !8870)
!8881 = distinct !DISubprogram(name: "sanitize_string", scope: !3, file: !3, line: 4423, type: !8882, scopeLine: 4424, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8882 = !DISubroutineType(types: !8883)
!8883 = !{null, !2753, !303}
!8884 = !DILocalVariable(name: "s", arg: 1, scope: !8881, file: !3, line: 4423, type: !2753)
!8885 = !DILocation(line: 4423, column: 31, scope: !8881)
!8886 = !DILocalVariable(name: "len", arg: 2, scope: !8881, file: !3, line: 4423, type: !303)
!8887 = !DILocation(line: 4423, column: 41, scope: !8881)
!8888 = !DILocalVariable(name: "i", scope: !8881, file: !3, line: 4425, type: !287)
!8889 = !DILocation(line: 4425, column: 10, scope: !8881)
!8890 = !DILocation(line: 4428, column: 2, scope: !8881)
!8891 = !DILocation(line: 4428, column: 4, scope: !8881)
!8892 = !DILocation(line: 4428, column: 8, scope: !8881)
!8893 = !DILocation(line: 4428, column: 13, scope: !8881)
!8894 = !DILocation(line: 4431, column: 9, scope: !8895)
!8895 = distinct !DILexicalBlock(scope: !8881, file: !3, line: 4431, column: 2)
!8896 = !DILocation(line: 4431, column: 7, scope: !8895)
!8897 = !DILocation(line: 4431, column: 14, scope: !8898)
!8898 = distinct !DILexicalBlock(scope: !8895, file: !3, line: 4431, column: 2)
!8899 = !DILocation(line: 4431, column: 18, scope: !8898)
!8900 = !DILocation(line: 4431, column: 22, scope: !8898)
!8901 = !DILocation(line: 4431, column: 16, scope: !8898)
!8902 = !DILocation(line: 4431, column: 2, scope: !8895)
!8903 = !DILocation(line: 4432, column: 7, scope: !8904)
!8904 = distinct !DILexicalBlock(scope: !8905, file: !3, line: 4432, column: 7)
!8905 = distinct !DILexicalBlock(scope: !8898, file: !3, line: 4431, column: 32)
!8906 = !DILocation(line: 4432, column: 9, scope: !8904)
!8907 = !DILocation(line: 4432, column: 12, scope: !8904)
!8908 = !DILocation(line: 4432, column: 18, scope: !8904)
!8909 = !DILocation(line: 4432, column: 21, scope: !8904)
!8910 = !DILocation(line: 4432, column: 23, scope: !8904)
!8911 = !DILocation(line: 4432, column: 26, scope: !8904)
!8912 = !DILocation(line: 4432, column: 7, scope: !8905)
!8913 = !DILocation(line: 4433, column: 4, scope: !8904)
!8914 = !DILocation(line: 4433, column: 6, scope: !8904)
!8915 = !DILocation(line: 4433, column: 9, scope: !8904)
!8916 = !DILocation(line: 4434, column: 2, scope: !8905)
!8917 = !DILocation(line: 4431, column: 28, scope: !8898)
!8918 = !DILocation(line: 4431, column: 2, scope: !8898)
!8919 = distinct !{!8919, !8902, !8920}
!8920 = !DILocation(line: 4434, column: 2, scope: !8895)
!8921 = !DILocation(line: 4437, column: 8, scope: !8881)
!8922 = !DILocation(line: 4437, column: 2, scope: !8881)
!8923 = !DILocation(line: 4438, column: 1, scope: !8881)
!8924 = distinct !DISubprogram(name: "nand_decode_ext_id", scope: !3, file: !3, line: 4514, type: !4218, scopeLine: 4515, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!8925 = !DILocalVariable(name: "chip", arg: 1, scope: !8924, file: !3, line: 4514, type: !4166)
!8926 = !DILocation(line: 4514, column: 43, scope: !8924)
!8927 = !DILocalVariable(name: "memorg", scope: !8924, file: !3, line: 4516, type: !8928)
!8928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4061, size: 64)
!8929 = !DILocation(line: 4516, column: 35, scope: !8924)
!8930 = !DILocalVariable(name: "mtd", scope: !8924, file: !3, line: 4517, type: !2637)
!8931 = !DILocation(line: 4517, column: 19, scope: !8924)
!8932 = !DILocation(line: 4517, column: 37, scope: !8924)
!8933 = !DILocation(line: 4517, column: 25, scope: !8924)
!8934 = !DILocalVariable(name: "extid", scope: !8924, file: !3, line: 4518, type: !240)
!8935 = !DILocation(line: 4518, column: 6, scope: !8924)
!8936 = !DILocalVariable(name: "id_data", scope: !8924, file: !3, line: 4519, type: !4051)
!8937 = !DILocation(line: 4519, column: 6, scope: !8924)
!8938 = !DILocation(line: 4519, column: 16, scope: !8924)
!8939 = !DILocation(line: 4519, column: 22, scope: !8924)
!8940 = !DILocation(line: 4519, column: 25, scope: !8924)
!8941 = !DILocation(line: 4521, column: 31, scope: !8924)
!8942 = !DILocation(line: 4521, column: 37, scope: !8924)
!8943 = !DILocation(line: 4521, column: 11, scope: !8924)
!8944 = !DILocation(line: 4521, column: 9, scope: !8924)
!8945 = !DILocation(line: 4524, column: 49, scope: !8924)
!8946 = !DILocation(line: 4524, column: 26, scope: !8924)
!8947 = !DILocation(line: 4524, column: 2, scope: !8924)
!8948 = !DILocation(line: 4524, column: 10, scope: !8924)
!8949 = !DILocation(line: 4524, column: 24, scope: !8924)
!8950 = !DILocation(line: 4526, column: 10, scope: !8924)
!8951 = !DILocation(line: 4526, column: 8, scope: !8924)
!8952 = !DILocation(line: 4529, column: 30, scope: !8924)
!8953 = !DILocation(line: 4529, column: 36, scope: !8924)
!8954 = !DILocation(line: 4529, column: 26, scope: !8924)
!8955 = !DILocation(line: 4529, column: 2, scope: !8924)
!8956 = !DILocation(line: 4529, column: 10, scope: !8924)
!8957 = !DILocation(line: 4529, column: 19, scope: !8924)
!8958 = !DILocation(line: 4530, column: 19, scope: !8924)
!8959 = !DILocation(line: 4530, column: 27, scope: !8924)
!8960 = !DILocation(line: 4530, column: 2, scope: !8924)
!8961 = !DILocation(line: 4530, column: 7, scope: !8924)
!8962 = !DILocation(line: 4530, column: 17, scope: !8924)
!8963 = !DILocation(line: 4531, column: 8, scope: !8924)
!8964 = !DILocation(line: 4533, column: 27, scope: !8924)
!8965 = !DILocation(line: 4533, column: 33, scope: !8924)
!8966 = !DILocation(line: 4533, column: 23, scope: !8924)
!8967 = !DILocation(line: 4533, column: 45, scope: !8924)
!8968 = !DILocation(line: 4533, column: 50, scope: !8924)
!8969 = !DILocation(line: 4533, column: 60, scope: !8924)
!8970 = !DILocation(line: 4533, column: 42, scope: !8924)
!8971 = !DILocation(line: 4533, column: 2, scope: !8924)
!8972 = !DILocation(line: 4533, column: 10, scope: !8924)
!8973 = !DILocation(line: 4533, column: 18, scope: !8924)
!8974 = !DILocation(line: 4534, column: 17, scope: !8924)
!8975 = !DILocation(line: 4534, column: 25, scope: !8924)
!8976 = !DILocation(line: 4534, column: 2, scope: !8924)
!8977 = !DILocation(line: 4534, column: 7, scope: !8924)
!8978 = !DILocation(line: 4534, column: 15, scope: !8924)
!8979 = !DILocation(line: 4535, column: 8, scope: !8924)
!8980 = !DILocation(line: 4537, column: 50, scope: !8924)
!8981 = !DILocation(line: 4537, column: 56, scope: !8924)
!8982 = !DILocation(line: 4537, column: 46, scope: !8924)
!8983 = !DILocation(line: 4538, column: 12, scope: !8924)
!8984 = !DILocation(line: 4538, column: 20, scope: !8924)
!8985 = !DILocation(line: 4537, column: 65, scope: !8924)
!8986 = !DILocation(line: 4537, column: 2, scope: !8924)
!8987 = !DILocation(line: 4537, column: 10, scope: !8924)
!8988 = !DILocation(line: 4537, column: 31, scope: !8924)
!8989 = !DILocation(line: 4539, column: 35, scope: !8924)
!8990 = !DILocation(line: 4539, column: 41, scope: !8924)
!8991 = !DILocation(line: 4539, column: 31, scope: !8924)
!8992 = !DILocation(line: 4539, column: 2, scope: !8924)
!8993 = !DILocation(line: 4539, column: 7, scope: !8924)
!8994 = !DILocation(line: 4539, column: 17, scope: !8924)
!8995 = !DILocation(line: 4540, column: 8, scope: !8924)
!8996 = !DILocation(line: 4542, column: 6, scope: !8997)
!8997 = distinct !DILexicalBlock(scope: !8924, file: !3, line: 4542, column: 6)
!8998 = !DILocation(line: 4542, column: 12, scope: !8997)
!8999 = !DILocation(line: 4542, column: 6, scope: !8924)
!9000 = !DILocation(line: 4543, column: 3, scope: !8997)
!9001 = !DILocation(line: 4543, column: 9, scope: !8997)
!9002 = !DILocation(line: 4543, column: 17, scope: !8997)
!9003 = !DILocation(line: 4544, column: 1, scope: !8924)
!9004 = distinct !DISubprogram(name: "nanddev_get_memorg", scope: !94, file: !94, line: 521, type: !9005, scopeLine: 522, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9005 = !DISubroutineType(types: !9006)
!9006 = !{!8928, !4056}
!9007 = !DILocalVariable(name: "nand", arg: 1, scope: !9004, file: !94, line: 521, type: !4056)
!9008 = !DILocation(line: 521, column: 40, scope: !9004)
!9009 = !DILocation(line: 523, column: 10, scope: !9004)
!9010 = !DILocation(line: 523, column: 16, scope: !9004)
!9011 = !DILocation(line: 523, column: 2, scope: !9004)
!9012 = distinct !DISubprogram(name: "nand_get_bits_per_cell", scope: !3, file: !3, line: 4500, type: !9013, scopeLine: 4501, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9013 = !DISubroutineType(types: !9014)
!9014 = !{!240, !1372}
!9015 = !DILocalVariable(name: "cellinfo", arg: 1, scope: !9012, file: !3, line: 4500, type: !1372)
!9016 = !DILocation(line: 4500, column: 38, scope: !9012)
!9017 = !DILocalVariable(name: "bits", scope: !9012, file: !3, line: 4502, type: !240)
!9018 = !DILocation(line: 4502, column: 6, scope: !9012)
!9019 = !DILocation(line: 4504, column: 9, scope: !9012)
!9020 = !DILocation(line: 4504, column: 18, scope: !9012)
!9021 = !DILocation(line: 4504, column: 7, scope: !9012)
!9022 = !DILocation(line: 4505, column: 7, scope: !9012)
!9023 = !DILocation(line: 4506, column: 9, scope: !9012)
!9024 = !DILocation(line: 4506, column: 14, scope: !9012)
!9025 = !DILocation(line: 4506, column: 2, scope: !9012)
!9026 = distinct !DISubprogram(name: "nand_ecc_choose_conf", scope: !3, file: !3, line: 5532, type: !9027, scopeLine: 5534, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9027 = !DISubroutineType(types: !9028)
!9028 = !{!240, !4166, !9029, !240}
!9029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9030, size: 64)
!9030 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9031)
!9031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_ecc_caps", file: !117, line: 272, size: 192, elements: !9032)
!9032 = !{!9033, !9043, !9044}
!9033 = !DIDerivedType(tag: DW_TAG_member, name: "stepinfos", scope: !9031, file: !117, line: 273, baseType: !9034, size: 64)
!9034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9035, size: 64)
!9035 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9036)
!9036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nand_ecc_step_info", file: !117, line: 260, size: 192, elements: !9037)
!9037 = !{!9038, !9039, !9042}
!9038 = !DIDerivedType(tag: DW_TAG_member, name: "stepsize", scope: !9036, file: !117, line: 261, baseType: !240, size: 32)
!9039 = !DIDerivedType(tag: DW_TAG_member, name: "strengths", scope: !9036, file: !117, line: 262, baseType: !9040, size: 64, offset: 64)
!9040 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9041, size: 64)
!9041 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !240)
!9042 = !DIDerivedType(tag: DW_TAG_member, name: "nstrengths", scope: !9036, file: !117, line: 263, baseType: !240, size: 32, offset: 128)
!9043 = !DIDerivedType(tag: DW_TAG_member, name: "nstepinfos", scope: !9031, file: !117, line: 274, baseType: !240, size: 32, offset: 64)
!9044 = !DIDerivedType(tag: DW_TAG_member, name: "calc_ecc_bytes", scope: !9031, file: !117, line: 275, baseType: !9045, size: 64, offset: 128)
!9045 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9046, size: 64)
!9046 = !DISubroutineType(types: !9047)
!9047 = !{!240, !240, !240}
!9048 = !DILocalVariable(name: "chip", arg: 1, scope: !9026, file: !3, line: 5532, type: !4166)
!9049 = !DILocation(line: 5532, column: 44, scope: !9026)
!9050 = !DILocalVariable(name: "caps", arg: 2, scope: !9026, file: !3, line: 5533, type: !9029)
!9051 = !DILocation(line: 5533, column: 33, scope: !9026)
!9052 = !DILocalVariable(name: "oobavail", arg: 3, scope: !9026, file: !3, line: 5533, type: !240)
!9053 = !DILocation(line: 5533, column: 43, scope: !9026)
!9054 = !DILocalVariable(name: "mtd", scope: !9026, file: !3, line: 5535, type: !2637)
!9055 = !DILocation(line: 5535, column: 19, scope: !9026)
!9056 = !DILocation(line: 5535, column: 37, scope: !9026)
!9057 = !DILocation(line: 5535, column: 25, scope: !9026)
!9058 = !DILocalVariable(name: "nanddev", scope: !9026, file: !3, line: 5536, type: !4056)
!9059 = !DILocation(line: 5536, column: 22, scope: !9026)
!9060 = !DILocation(line: 5536, column: 47, scope: !9026)
!9061 = !DILocation(line: 5536, column: 32, scope: !9026)
!9062 = !DILocalVariable(name: "__ret_warn_on", scope: !9063, file: !3, line: 5538, type: !240)
!9063 = distinct !DILexicalBlock(scope: !9064, file: !3, line: 5538, column: 6)
!9064 = distinct !DILexicalBlock(scope: !9026, file: !3, line: 5538, column: 6)
!9065 = !DILocation(line: 5538, column: 6, scope: !9063)
!9066 = !DILocation(line: 5538, column: 6, scope: !9067)
!9067 = distinct !DILexicalBlock(scope: !9063, file: !3, line: 5538, column: 6)
!9068 = !DILocation(line: 5538, column: 6, scope: !9069)
!9069 = distinct !DILexicalBlock(scope: !9067, file: !3, line: 5538, column: 6)
!9070 = !DILocation(line: 5538, column: 6, scope: !9071)
!9071 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 5538, column: 6)
!9072 = !DILocation(line: 5538, column: 6, scope: !9073)
!9073 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 5538, column: 6)
!9074 = !{i32 -2141507386, i32 -2141507357, i32 -2141507311, i32 -2141507253, i32 -2141507199, i32 -2141507145, i32 -2141507090, i32 -2141507059}
!9075 = !DILocation(line: 5538, column: 6, scope: !9076)
!9076 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 5538, column: 6)
!9077 = !{i32 -2141506644, i32 -2141506637, i32 -2141506585, i32 -2141506554, i32 -2141506524}
!9078 = !DILocation(line: 5538, column: 6, scope: !9079)
!9079 = distinct !DILexicalBlock(scope: !9069, file: !3, line: 5538, column: 6)
!9080 = !DILocation(line: 5538, column: 6, scope: !9064)
!9081 = !DILocation(line: 5538, column: 6, scope: !9026)
!9082 = !DILocation(line: 5539, column: 3, scope: !9064)
!9083 = !DILocation(line: 5541, column: 6, scope: !9084)
!9084 = distinct !DILexicalBlock(scope: !9026, file: !3, line: 5541, column: 6)
!9085 = !DILocation(line: 5541, column: 12, scope: !9084)
!9086 = !DILocation(line: 5541, column: 16, scope: !9084)
!9087 = !DILocation(line: 5541, column: 21, scope: !9084)
!9088 = !DILocation(line: 5541, column: 24, scope: !9084)
!9089 = !DILocation(line: 5541, column: 30, scope: !9084)
!9090 = !DILocation(line: 5541, column: 34, scope: !9084)
!9091 = !DILocation(line: 5541, column: 6, scope: !9026)
!9092 = !DILocation(line: 5542, column: 30, scope: !9084)
!9093 = !DILocation(line: 5542, column: 36, scope: !9084)
!9094 = !DILocation(line: 5542, column: 42, scope: !9084)
!9095 = !DILocation(line: 5542, column: 10, scope: !9084)
!9096 = !DILocation(line: 5542, column: 3, scope: !9084)
!9097 = !DILocation(line: 5544, column: 6, scope: !9098)
!9098 = distinct !DILexicalBlock(scope: !9026, file: !3, line: 5544, column: 6)
!9099 = !DILocation(line: 5544, column: 15, scope: !9098)
!9100 = !DILocation(line: 5544, column: 19, scope: !9098)
!9101 = !DILocation(line: 5544, column: 29, scope: !9098)
!9102 = !DILocation(line: 5544, column: 35, scope: !9098)
!9103 = !DILocation(line: 5544, column: 6, scope: !9026)
!9104 = !DILocation(line: 5545, column: 28, scope: !9098)
!9105 = !DILocation(line: 5545, column: 34, scope: !9098)
!9106 = !DILocation(line: 5545, column: 40, scope: !9098)
!9107 = !DILocation(line: 5545, column: 10, scope: !9098)
!9108 = !DILocation(line: 5545, column: 3, scope: !9098)
!9109 = !DILocation(line: 5547, column: 26, scope: !9110)
!9110 = distinct !DILexicalBlock(scope: !9026, file: !3, line: 5547, column: 6)
!9111 = !DILocation(line: 5547, column: 32, scope: !9110)
!9112 = !DILocation(line: 5547, column: 38, scope: !9110)
!9113 = !DILocation(line: 5547, column: 7, scope: !9110)
!9114 = !DILocation(line: 5547, column: 6, scope: !9026)
!9115 = !DILocation(line: 5548, column: 3, scope: !9110)
!9116 = !DILocation(line: 5550, column: 27, scope: !9026)
!9117 = !DILocation(line: 5550, column: 33, scope: !9026)
!9118 = !DILocation(line: 5550, column: 39, scope: !9026)
!9119 = !DILocation(line: 5550, column: 9, scope: !9026)
!9120 = !DILocation(line: 5550, column: 2, scope: !9026)
!9121 = !DILocation(line: 5551, column: 1, scope: !9026)
!9122 = distinct !DISubprogram(name: "mtd_to_nanddev", scope: !94, file: !94, line: 352, type: !9123, scopeLine: 353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9123 = !DISubroutineType(types: !9124)
!9124 = !{!4056, !2637}
!9125 = !DILocalVariable(name: "mtd", arg: 1, scope: !9122, file: !94, line: 352, type: !2637)
!9126 = !DILocation(line: 352, column: 67, scope: !9122)
!9127 = !DILocalVariable(name: "__mptr", scope: !9128, file: !94, line: 354, type: !330)
!9128 = distinct !DILexicalBlock(scope: !9122, file: !94, line: 354, column: 9)
!9129 = !DILocation(line: 354, column: 9, scope: !9128)
!9130 = !DILocation(line: 354, column: 9, scope: !9131)
!9131 = distinct !DILexicalBlock(scope: !9128, file: !94, line: 354, column: 9)
!9132 = !DILocation(line: 354, column: 2, scope: !9122)
!9133 = distinct !DISubprogram(name: "nand_check_ecc_caps", scope: !3, file: !3, line: 5317, type: !9027, scopeLine: 5319, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9134 = !DILocalVariable(name: "chip", arg: 1, scope: !9133, file: !3, line: 5317, type: !4166)
!9135 = !DILocation(line: 5317, column: 39, scope: !9133)
!9136 = !DILocalVariable(name: "caps", arg: 2, scope: !9133, file: !3, line: 5318, type: !9029)
!9137 = !DILocation(line: 5318, column: 35, scope: !9133)
!9138 = !DILocalVariable(name: "oobavail", arg: 3, scope: !9133, file: !3, line: 5318, type: !240)
!9139 = !DILocation(line: 5318, column: 45, scope: !9133)
!9140 = !DILocalVariable(name: "mtd", scope: !9133, file: !3, line: 5320, type: !2637)
!9141 = !DILocation(line: 5320, column: 19, scope: !9133)
!9142 = !DILocation(line: 5320, column: 37, scope: !9133)
!9143 = !DILocation(line: 5320, column: 25, scope: !9133)
!9144 = !DILocalVariable(name: "stepinfo", scope: !9133, file: !3, line: 5321, type: !9034)
!9145 = !DILocation(line: 5321, column: 35, scope: !9133)
!9146 = !DILocalVariable(name: "preset_step", scope: !9133, file: !3, line: 5322, type: !240)
!9147 = !DILocation(line: 5322, column: 6, scope: !9133)
!9148 = !DILocation(line: 5322, column: 20, scope: !9133)
!9149 = !DILocation(line: 5322, column: 26, scope: !9133)
!9150 = !DILocation(line: 5322, column: 30, scope: !9133)
!9151 = !DILocalVariable(name: "preset_strength", scope: !9133, file: !3, line: 5323, type: !240)
!9152 = !DILocation(line: 5323, column: 6, scope: !9133)
!9153 = !DILocation(line: 5323, column: 24, scope: !9133)
!9154 = !DILocation(line: 5323, column: 30, scope: !9133)
!9155 = !DILocation(line: 5323, column: 34, scope: !9133)
!9156 = !DILocalVariable(name: "ecc_bytes", scope: !9133, file: !3, line: 5324, type: !240)
!9157 = !DILocation(line: 5324, column: 6, scope: !9133)
!9158 = !DILocalVariable(name: "nsteps", scope: !9133, file: !3, line: 5324, type: !240)
!9159 = !DILocation(line: 5324, column: 17, scope: !9133)
!9160 = !DILocation(line: 5324, column: 26, scope: !9133)
!9161 = !DILocation(line: 5324, column: 31, scope: !9133)
!9162 = !DILocation(line: 5324, column: 43, scope: !9133)
!9163 = !DILocation(line: 5324, column: 41, scope: !9133)
!9164 = !DILocalVariable(name: "i", scope: !9133, file: !3, line: 5325, type: !240)
!9165 = !DILocation(line: 5325, column: 6, scope: !9133)
!9166 = !DILocalVariable(name: "j", scope: !9133, file: !3, line: 5325, type: !240)
!9167 = !DILocation(line: 5325, column: 9, scope: !9133)
!9168 = !DILocation(line: 5327, column: 9, scope: !9169)
!9169 = distinct !DILexicalBlock(scope: !9133, file: !3, line: 5327, column: 2)
!9170 = !DILocation(line: 5327, column: 7, scope: !9169)
!9171 = !DILocation(line: 5327, column: 14, scope: !9172)
!9172 = distinct !DILexicalBlock(scope: !9169, file: !3, line: 5327, column: 2)
!9173 = !DILocation(line: 5327, column: 18, scope: !9172)
!9174 = !DILocation(line: 5327, column: 24, scope: !9172)
!9175 = !DILocation(line: 5327, column: 16, scope: !9172)
!9176 = !DILocation(line: 5327, column: 2, scope: !9169)
!9177 = !DILocation(line: 5328, column: 15, scope: !9178)
!9178 = distinct !DILexicalBlock(scope: !9172, file: !3, line: 5327, column: 41)
!9179 = !DILocation(line: 5328, column: 21, scope: !9178)
!9180 = !DILocation(line: 5328, column: 31, scope: !9178)
!9181 = !DILocation(line: 5328, column: 12, scope: !9178)
!9182 = !DILocation(line: 5330, column: 7, scope: !9183)
!9183 = distinct !DILexicalBlock(scope: !9178, file: !3, line: 5330, column: 7)
!9184 = !DILocation(line: 5330, column: 17, scope: !9183)
!9185 = !DILocation(line: 5330, column: 29, scope: !9183)
!9186 = !DILocation(line: 5330, column: 26, scope: !9183)
!9187 = !DILocation(line: 5330, column: 7, scope: !9178)
!9188 = !DILocation(line: 5331, column: 4, scope: !9183)
!9189 = !DILocation(line: 5333, column: 10, scope: !9190)
!9190 = distinct !DILexicalBlock(scope: !9178, file: !3, line: 5333, column: 3)
!9191 = !DILocation(line: 5333, column: 8, scope: !9190)
!9192 = !DILocation(line: 5333, column: 15, scope: !9193)
!9193 = distinct !DILexicalBlock(scope: !9190, file: !3, line: 5333, column: 3)
!9194 = !DILocation(line: 5333, column: 19, scope: !9193)
!9195 = !DILocation(line: 5333, column: 29, scope: !9193)
!9196 = !DILocation(line: 5333, column: 17, scope: !9193)
!9197 = !DILocation(line: 5333, column: 3, scope: !9190)
!9198 = !DILocation(line: 5334, column: 8, scope: !9199)
!9199 = distinct !DILexicalBlock(scope: !9200, file: !3, line: 5334, column: 8)
!9200 = distinct !DILexicalBlock(scope: !9193, file: !3, line: 5333, column: 46)
!9201 = !DILocation(line: 5334, column: 18, scope: !9199)
!9202 = !DILocation(line: 5334, column: 28, scope: !9199)
!9203 = !DILocation(line: 5334, column: 34, scope: !9199)
!9204 = !DILocation(line: 5334, column: 31, scope: !9199)
!9205 = !DILocation(line: 5334, column: 8, scope: !9200)
!9206 = !DILocation(line: 5335, column: 5, scope: !9199)
!9207 = !DILocation(line: 5337, column: 16, scope: !9200)
!9208 = !DILocation(line: 5337, column: 22, scope: !9200)
!9209 = !DILocation(line: 5337, column: 37, scope: !9200)
!9210 = !DILocation(line: 5338, column: 9, scope: !9200)
!9211 = !DILocation(line: 5337, column: 14, scope: !9200)
!9212 = !DILocalVariable(name: "__ret_warn_on", scope: !9213, file: !3, line: 5339, type: !240)
!9213 = distinct !DILexicalBlock(scope: !9214, file: !3, line: 5339, column: 8)
!9214 = distinct !DILexicalBlock(scope: !9200, file: !3, line: 5339, column: 8)
!9215 = !DILocation(line: 5339, column: 8, scope: !9213)
!9216 = !DILocation(line: 5339, column: 8, scope: !9217)
!9217 = distinct !DILexicalBlock(scope: !9213, file: !3, line: 5339, column: 8)
!9218 = !DILocation(line: 5339, column: 8, scope: !9219)
!9219 = distinct !DILexicalBlock(scope: !9217, file: !3, line: 5339, column: 8)
!9220 = !DILocation(line: 5339, column: 8, scope: !9221)
!9221 = distinct !DILexicalBlock(scope: !9219, file: !3, line: 5339, column: 8)
!9222 = !DILocation(line: 5339, column: 8, scope: !9223)
!9223 = distinct !DILexicalBlock(scope: !9219, file: !3, line: 5339, column: 8)
!9224 = !{i32 -2141512387, i32 -2141512358, i32 -2141512312, i32 -2141512254, i32 -2141512200, i32 -2141512146, i32 -2141512091, i32 -2141512060}
!9225 = !DILocation(line: 5339, column: 8, scope: !9226)
!9226 = distinct !DILexicalBlock(scope: !9219, file: !3, line: 5339, column: 8)
!9227 = !{i32 -2141511634, i32 -2141511627, i32 -2141511575, i32 -2141511544, i32 -2141511514}
!9228 = !DILocation(line: 5339, column: 8, scope: !9229)
!9229 = distinct !DILexicalBlock(scope: !9219, file: !3, line: 5339, column: 8)
!9230 = !DILocation(line: 5339, column: 8, scope: !9214)
!9231 = !DILocation(line: 5339, column: 8, scope: !9200)
!9232 = !DILocation(line: 5340, column: 12, scope: !9214)
!9233 = !DILocation(line: 5340, column: 5, scope: !9214)
!9234 = !DILocation(line: 5342, column: 8, scope: !9235)
!9235 = distinct !DILexicalBlock(scope: !9200, file: !3, line: 5342, column: 8)
!9236 = !DILocation(line: 5342, column: 20, scope: !9235)
!9237 = !DILocation(line: 5342, column: 18, scope: !9235)
!9238 = !DILocation(line: 5342, column: 29, scope: !9235)
!9239 = !DILocation(line: 5342, column: 27, scope: !9235)
!9240 = !DILocation(line: 5342, column: 8, scope: !9200)
!9241 = !DILocation(line: 5343, column: 5, scope: !9242)
!9242 = distinct !DILexicalBlock(scope: !9235, file: !3, line: 5342, column: 39)
!9243 = !DILocation(line: 5345, column: 5, scope: !9242)
!9244 = !DILocation(line: 5348, column: 22, scope: !9200)
!9245 = !DILocation(line: 5348, column: 4, scope: !9200)
!9246 = !DILocation(line: 5348, column: 10, scope: !9200)
!9247 = !DILocation(line: 5348, column: 14, scope: !9200)
!9248 = !DILocation(line: 5348, column: 20, scope: !9200)
!9249 = !DILocation(line: 5350, column: 4, scope: !9200)
!9250 = !DILocation(line: 5333, column: 42, scope: !9193)
!9251 = !DILocation(line: 5333, column: 3, scope: !9193)
!9252 = distinct !{!9252, !9197, !9253}
!9253 = !DILocation(line: 5351, column: 3, scope: !9190)
!9254 = !DILocation(line: 5352, column: 2, scope: !9178)
!9255 = !DILocation(line: 5327, column: 37, scope: !9172)
!9256 = !DILocation(line: 5327, column: 2, scope: !9172)
!9257 = distinct !{!9257, !9176, !9258}
!9258 = !DILocation(line: 5352, column: 2, scope: !9169)
!9259 = !DILocation(line: 5354, column: 2, scope: !9133)
!9260 = !DILocation(line: 5357, column: 2, scope: !9133)
!9261 = !DILocation(line: 5358, column: 1, scope: !9133)
!9262 = distinct !DISubprogram(name: "nand_maximize_ecc", scope: !3, file: !3, line: 5454, type: !9027, scopeLine: 5456, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9263 = !DILocalVariable(name: "chip", arg: 1, scope: !9262, file: !3, line: 5454, type: !4166)
!9264 = !DILocation(line: 5454, column: 37, scope: !9262)
!9265 = !DILocalVariable(name: "caps", arg: 2, scope: !9262, file: !3, line: 5455, type: !9029)
!9266 = !DILocation(line: 5455, column: 33, scope: !9262)
!9267 = !DILocalVariable(name: "oobavail", arg: 3, scope: !9262, file: !3, line: 5455, type: !240)
!9268 = !DILocation(line: 5455, column: 43, scope: !9262)
!9269 = !DILocalVariable(name: "mtd", scope: !9262, file: !3, line: 5457, type: !2637)
!9270 = !DILocation(line: 5457, column: 19, scope: !9262)
!9271 = !DILocation(line: 5457, column: 37, scope: !9262)
!9272 = !DILocation(line: 5457, column: 25, scope: !9262)
!9273 = !DILocalVariable(name: "stepinfo", scope: !9262, file: !3, line: 5458, type: !9034)
!9274 = !DILocation(line: 5458, column: 35, scope: !9262)
!9275 = !DILocalVariable(name: "step_size", scope: !9262, file: !3, line: 5459, type: !240)
!9276 = !DILocation(line: 5459, column: 6, scope: !9262)
!9277 = !DILocalVariable(name: "strength", scope: !9262, file: !3, line: 5459, type: !240)
!9278 = !DILocation(line: 5459, column: 17, scope: !9262)
!9279 = !DILocalVariable(name: "nsteps", scope: !9262, file: !3, line: 5459, type: !240)
!9280 = !DILocation(line: 5459, column: 27, scope: !9262)
!9281 = !DILocalVariable(name: "ecc_bytes", scope: !9262, file: !3, line: 5459, type: !240)
!9282 = !DILocation(line: 5459, column: 35, scope: !9262)
!9283 = !DILocalVariable(name: "corr", scope: !9262, file: !3, line: 5459, type: !240)
!9284 = !DILocation(line: 5459, column: 46, scope: !9262)
!9285 = !DILocalVariable(name: "best_corr", scope: !9262, file: !3, line: 5460, type: !240)
!9286 = !DILocation(line: 5460, column: 6, scope: !9262)
!9287 = !DILocalVariable(name: "best_step", scope: !9262, file: !3, line: 5461, type: !240)
!9288 = !DILocation(line: 5461, column: 6, scope: !9262)
!9289 = !DILocalVariable(name: "best_strength", scope: !9262, file: !3, line: 5462, type: !240)
!9290 = !DILocation(line: 5462, column: 6, scope: !9262)
!9291 = !DILocalVariable(name: "best_ecc_bytes", scope: !9262, file: !3, line: 5462, type: !240)
!9292 = !DILocation(line: 5462, column: 21, scope: !9262)
!9293 = !DILocalVariable(name: "i", scope: !9262, file: !3, line: 5463, type: !240)
!9294 = !DILocation(line: 5463, column: 6, scope: !9262)
!9295 = !DILocalVariable(name: "j", scope: !9262, file: !3, line: 5463, type: !240)
!9296 = !DILocation(line: 5463, column: 9, scope: !9262)
!9297 = !DILocation(line: 5465, column: 9, scope: !9298)
!9298 = distinct !DILexicalBlock(scope: !9262, file: !3, line: 5465, column: 2)
!9299 = !DILocation(line: 5465, column: 7, scope: !9298)
!9300 = !DILocation(line: 5465, column: 14, scope: !9301)
!9301 = distinct !DILexicalBlock(scope: !9298, file: !3, line: 5465, column: 2)
!9302 = !DILocation(line: 5465, column: 18, scope: !9301)
!9303 = !DILocation(line: 5465, column: 24, scope: !9301)
!9304 = !DILocation(line: 5465, column: 16, scope: !9301)
!9305 = !DILocation(line: 5465, column: 2, scope: !9298)
!9306 = !DILocation(line: 5466, column: 15, scope: !9307)
!9307 = distinct !DILexicalBlock(scope: !9301, file: !3, line: 5465, column: 41)
!9308 = !DILocation(line: 5466, column: 21, scope: !9307)
!9309 = !DILocation(line: 5466, column: 31, scope: !9307)
!9310 = !DILocation(line: 5466, column: 12, scope: !9307)
!9311 = !DILocation(line: 5467, column: 15, scope: !9307)
!9312 = !DILocation(line: 5467, column: 25, scope: !9307)
!9313 = !DILocation(line: 5467, column: 13, scope: !9307)
!9314 = !DILocation(line: 5470, column: 7, scope: !9315)
!9315 = distinct !DILexicalBlock(scope: !9307, file: !3, line: 5470, column: 7)
!9316 = !DILocation(line: 5470, column: 13, scope: !9315)
!9317 = !DILocation(line: 5470, column: 17, scope: !9315)
!9318 = !DILocation(line: 5470, column: 22, scope: !9315)
!9319 = !DILocation(line: 5470, column: 25, scope: !9315)
!9320 = !DILocation(line: 5470, column: 38, scope: !9315)
!9321 = !DILocation(line: 5470, column: 44, scope: !9315)
!9322 = !DILocation(line: 5470, column: 48, scope: !9315)
!9323 = !DILocation(line: 5470, column: 35, scope: !9315)
!9324 = !DILocation(line: 5470, column: 7, scope: !9307)
!9325 = !DILocation(line: 5471, column: 4, scope: !9315)
!9326 = !DILocation(line: 5473, column: 10, scope: !9327)
!9327 = distinct !DILexicalBlock(scope: !9307, file: !3, line: 5473, column: 3)
!9328 = !DILocation(line: 5473, column: 8, scope: !9327)
!9329 = !DILocation(line: 5473, column: 15, scope: !9330)
!9330 = distinct !DILexicalBlock(scope: !9327, file: !3, line: 5473, column: 3)
!9331 = !DILocation(line: 5473, column: 19, scope: !9330)
!9332 = !DILocation(line: 5473, column: 29, scope: !9330)
!9333 = !DILocation(line: 5473, column: 17, scope: !9330)
!9334 = !DILocation(line: 5473, column: 3, scope: !9327)
!9335 = !DILocation(line: 5474, column: 15, scope: !9336)
!9336 = distinct !DILexicalBlock(scope: !9330, file: !3, line: 5473, column: 46)
!9337 = !DILocation(line: 5474, column: 25, scope: !9336)
!9338 = !DILocation(line: 5474, column: 35, scope: !9336)
!9339 = !DILocation(line: 5474, column: 13, scope: !9336)
!9340 = !DILocation(line: 5476, column: 8, scope: !9341)
!9341 = distinct !DILexicalBlock(scope: !9336, file: !3, line: 5476, column: 8)
!9342 = !DILocation(line: 5476, column: 13, scope: !9341)
!9343 = !DILocation(line: 5476, column: 25, scope: !9341)
!9344 = !DILocation(line: 5476, column: 23, scope: !9341)
!9345 = !DILocation(line: 5476, column: 8, scope: !9336)
!9346 = !DILocation(line: 5477, column: 5, scope: !9341)
!9347 = !DILocation(line: 5479, column: 13, scope: !9336)
!9348 = !DILocation(line: 5479, column: 18, scope: !9336)
!9349 = !DILocation(line: 5479, column: 30, scope: !9336)
!9350 = !DILocation(line: 5479, column: 28, scope: !9336)
!9351 = !DILocation(line: 5479, column: 11, scope: !9336)
!9352 = !DILocation(line: 5481, column: 16, scope: !9336)
!9353 = !DILocation(line: 5481, column: 22, scope: !9336)
!9354 = !DILocation(line: 5481, column: 37, scope: !9336)
!9355 = !DILocation(line: 5481, column: 48, scope: !9336)
!9356 = !DILocation(line: 5481, column: 14, scope: !9336)
!9357 = !DILocalVariable(name: "__ret_warn_on", scope: !9358, file: !3, line: 5482, type: !240)
!9358 = distinct !DILexicalBlock(scope: !9359, file: !3, line: 5482, column: 8)
!9359 = distinct !DILexicalBlock(scope: !9336, file: !3, line: 5482, column: 8)
!9360 = !DILocation(line: 5482, column: 8, scope: !9358)
!9361 = !DILocation(line: 5482, column: 8, scope: !9362)
!9362 = distinct !DILexicalBlock(scope: !9358, file: !3, line: 5482, column: 8)
!9363 = !DILocation(line: 5482, column: 8, scope: !9364)
!9364 = distinct !DILexicalBlock(scope: !9362, file: !3, line: 5482, column: 8)
!9365 = !DILocation(line: 5482, column: 8, scope: !9366)
!9366 = distinct !DILexicalBlock(scope: !9364, file: !3, line: 5482, column: 8)
!9367 = !DILocation(line: 5482, column: 8, scope: !9368)
!9368 = distinct !DILexicalBlock(scope: !9364, file: !3, line: 5482, column: 8)
!9369 = !{i32 -2141508874, i32 -2141508845, i32 -2141508799, i32 -2141508741, i32 -2141508687, i32 -2141508633, i32 -2141508578, i32 -2141508547}
!9370 = !DILocation(line: 5482, column: 8, scope: !9371)
!9371 = distinct !DILexicalBlock(scope: !9364, file: !3, line: 5482, column: 8)
!9372 = !{i32 -2141508121, i32 -2141508114, i32 -2141508062, i32 -2141508031, i32 -2141508001}
!9373 = !DILocation(line: 5482, column: 8, scope: !9374)
!9374 = distinct !DILexicalBlock(scope: !9364, file: !3, line: 5482, column: 8)
!9375 = !DILocation(line: 5482, column: 8, scope: !9359)
!9376 = !DILocation(line: 5482, column: 8, scope: !9336)
!9377 = !DILocation(line: 5483, column: 5, scope: !9359)
!9378 = !DILocation(line: 5485, column: 8, scope: !9379)
!9379 = distinct !DILexicalBlock(scope: !9336, file: !3, line: 5485, column: 8)
!9380 = !DILocation(line: 5485, column: 20, scope: !9379)
!9381 = !DILocation(line: 5485, column: 18, scope: !9379)
!9382 = !DILocation(line: 5485, column: 29, scope: !9379)
!9383 = !DILocation(line: 5485, column: 27, scope: !9379)
!9384 = !DILocation(line: 5485, column: 8, scope: !9336)
!9385 = !DILocation(line: 5486, column: 5, scope: !9379)
!9386 = !DILocation(line: 5488, column: 11, scope: !9336)
!9387 = !DILocation(line: 5488, column: 22, scope: !9336)
!9388 = !DILocation(line: 5488, column: 20, scope: !9336)
!9389 = !DILocation(line: 5488, column: 9, scope: !9336)
!9390 = !DILocation(line: 5494, column: 8, scope: !9391)
!9391 = distinct !DILexicalBlock(scope: !9336, file: !3, line: 5494, column: 8)
!9392 = !DILocation(line: 5494, column: 15, scope: !9391)
!9393 = !DILocation(line: 5494, column: 13, scope: !9391)
!9394 = !DILocation(line: 5494, column: 25, scope: !9391)
!9395 = !DILocation(line: 5495, column: 9, scope: !9391)
!9396 = !DILocation(line: 5495, column: 17, scope: !9391)
!9397 = !DILocation(line: 5495, column: 14, scope: !9391)
!9398 = !DILocation(line: 5495, column: 27, scope: !9391)
!9399 = !DILocation(line: 5495, column: 30, scope: !9391)
!9400 = !DILocation(line: 5495, column: 42, scope: !9391)
!9401 = !DILocation(line: 5495, column: 40, scope: !9391)
!9402 = !DILocation(line: 5494, column: 8, scope: !9336)
!9403 = !DILocation(line: 5496, column: 17, scope: !9404)
!9404 = distinct !DILexicalBlock(scope: !9391, file: !3, line: 5495, column: 54)
!9405 = !DILocation(line: 5496, column: 15, scope: !9404)
!9406 = !DILocation(line: 5497, column: 17, scope: !9404)
!9407 = !DILocation(line: 5497, column: 15, scope: !9404)
!9408 = !DILocation(line: 5498, column: 21, scope: !9404)
!9409 = !DILocation(line: 5498, column: 19, scope: !9404)
!9410 = !DILocation(line: 5499, column: 22, scope: !9404)
!9411 = !DILocation(line: 5499, column: 20, scope: !9404)
!9412 = !DILocation(line: 5500, column: 4, scope: !9404)
!9413 = !DILocation(line: 5501, column: 3, scope: !9336)
!9414 = !DILocation(line: 5473, column: 42, scope: !9330)
!9415 = !DILocation(line: 5473, column: 3, scope: !9330)
!9416 = distinct !{!9416, !9334, !9417}
!9417 = !DILocation(line: 5501, column: 3, scope: !9327)
!9418 = !DILocation(line: 5502, column: 2, scope: !9307)
!9419 = !DILocation(line: 5465, column: 37, scope: !9301)
!9420 = !DILocation(line: 5465, column: 2, scope: !9301)
!9421 = distinct !{!9421, !9305, !9422}
!9422 = !DILocation(line: 5502, column: 2, scope: !9298)
!9423 = !DILocation(line: 5504, column: 7, scope: !9424)
!9424 = distinct !DILexicalBlock(scope: !9262, file: !3, line: 5504, column: 6)
!9425 = !DILocation(line: 5504, column: 6, scope: !9262)
!9426 = !DILocation(line: 5505, column: 3, scope: !9424)
!9427 = !DILocation(line: 5507, column: 19, scope: !9262)
!9428 = !DILocation(line: 5507, column: 2, scope: !9262)
!9429 = !DILocation(line: 5507, column: 8, scope: !9262)
!9430 = !DILocation(line: 5507, column: 12, scope: !9262)
!9431 = !DILocation(line: 5507, column: 17, scope: !9262)
!9432 = !DILocation(line: 5508, column: 23, scope: !9262)
!9433 = !DILocation(line: 5508, column: 2, scope: !9262)
!9434 = !DILocation(line: 5508, column: 8, scope: !9262)
!9435 = !DILocation(line: 5508, column: 12, scope: !9262)
!9436 = !DILocation(line: 5508, column: 21, scope: !9262)
!9437 = !DILocation(line: 5509, column: 20, scope: !9262)
!9438 = !DILocation(line: 5509, column: 2, scope: !9262)
!9439 = !DILocation(line: 5509, column: 8, scope: !9262)
!9440 = !DILocation(line: 5509, column: 12, scope: !9262)
!9441 = !DILocation(line: 5509, column: 18, scope: !9262)
!9442 = !DILocation(line: 5511, column: 2, scope: !9262)
!9443 = !DILocation(line: 5512, column: 1, scope: !9262)
!9444 = distinct !DISubprogram(name: "nand_match_ecc_req", scope: !3, file: !3, line: 5371, type: !9027, scopeLine: 5373, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9445 = !DILocalVariable(name: "chip", arg: 1, scope: !9444, file: !3, line: 5371, type: !4166)
!9446 = !DILocation(line: 5371, column: 38, scope: !9444)
!9447 = !DILocalVariable(name: "caps", arg: 2, scope: !9444, file: !3, line: 5372, type: !9029)
!9448 = !DILocation(line: 5372, column: 34, scope: !9444)
!9449 = !DILocalVariable(name: "oobavail", arg: 3, scope: !9444, file: !3, line: 5372, type: !240)
!9450 = !DILocation(line: 5372, column: 44, scope: !9444)
!9451 = !DILocalVariable(name: "requirements", scope: !9444, file: !3, line: 5374, type: !9452)
!9452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9453, size: 64)
!9453 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !4076)
!9454 = !DILocation(line: 5374, column: 31, scope: !9444)
!9455 = !DILocation(line: 5375, column: 33, scope: !9444)
!9456 = !DILocation(line: 5375, column: 39, scope: !9444)
!9457 = !DILocation(line: 5375, column: 3, scope: !9444)
!9458 = !DILocalVariable(name: "mtd", scope: !9444, file: !3, line: 5376, type: !2637)
!9459 = !DILocation(line: 5376, column: 19, scope: !9444)
!9460 = !DILocation(line: 5376, column: 37, scope: !9444)
!9461 = !DILocation(line: 5376, column: 25, scope: !9444)
!9462 = !DILocalVariable(name: "stepinfo", scope: !9444, file: !3, line: 5377, type: !9034)
!9463 = !DILocation(line: 5377, column: 35, scope: !9444)
!9464 = !DILocalVariable(name: "req_step", scope: !9444, file: !3, line: 5378, type: !240)
!9465 = !DILocation(line: 5378, column: 6, scope: !9444)
!9466 = !DILocation(line: 5378, column: 17, scope: !9444)
!9467 = !DILocation(line: 5378, column: 31, scope: !9444)
!9468 = !DILocalVariable(name: "req_strength", scope: !9444, file: !3, line: 5379, type: !240)
!9469 = !DILocation(line: 5379, column: 6, scope: !9444)
!9470 = !DILocation(line: 5379, column: 21, scope: !9444)
!9471 = !DILocation(line: 5379, column: 35, scope: !9444)
!9472 = !DILocalVariable(name: "req_corr", scope: !9444, file: !3, line: 5380, type: !240)
!9473 = !DILocation(line: 5380, column: 6, scope: !9444)
!9474 = !DILocalVariable(name: "step_size", scope: !9444, file: !3, line: 5380, type: !240)
!9475 = !DILocation(line: 5380, column: 16, scope: !9444)
!9476 = !DILocalVariable(name: "strength", scope: !9444, file: !3, line: 5380, type: !240)
!9477 = !DILocation(line: 5380, column: 27, scope: !9444)
!9478 = !DILocalVariable(name: "nsteps", scope: !9444, file: !3, line: 5380, type: !240)
!9479 = !DILocation(line: 5380, column: 37, scope: !9444)
!9480 = !DILocalVariable(name: "ecc_bytes", scope: !9444, file: !3, line: 5380, type: !240)
!9481 = !DILocation(line: 5380, column: 45, scope: !9444)
!9482 = !DILocalVariable(name: "ecc_bytes_total", scope: !9444, file: !3, line: 5380, type: !240)
!9483 = !DILocation(line: 5380, column: 56, scope: !9444)
!9484 = !DILocalVariable(name: "best_step", scope: !9444, file: !3, line: 5381, type: !240)
!9485 = !DILocation(line: 5381, column: 6, scope: !9444)
!9486 = !DILocalVariable(name: "best_strength", scope: !9444, file: !3, line: 5381, type: !240)
!9487 = !DILocation(line: 5381, column: 17, scope: !9444)
!9488 = !DILocalVariable(name: "best_ecc_bytes", scope: !9444, file: !3, line: 5381, type: !240)
!9489 = !DILocation(line: 5381, column: 32, scope: !9444)
!9490 = !DILocalVariable(name: "best_ecc_bytes_total", scope: !9444, file: !3, line: 5382, type: !240)
!9491 = !DILocation(line: 5382, column: 6, scope: !9444)
!9492 = !DILocalVariable(name: "i", scope: !9444, file: !3, line: 5383, type: !240)
!9493 = !DILocation(line: 5383, column: 6, scope: !9444)
!9494 = !DILocalVariable(name: "j", scope: !9444, file: !3, line: 5383, type: !240)
!9495 = !DILocation(line: 5383, column: 9, scope: !9444)
!9496 = !DILocation(line: 5386, column: 7, scope: !9497)
!9497 = distinct !DILexicalBlock(scope: !9444, file: !3, line: 5386, column: 6)
!9498 = !DILocation(line: 5386, column: 16, scope: !9497)
!9499 = !DILocation(line: 5386, column: 20, scope: !9497)
!9500 = !DILocation(line: 5386, column: 6, scope: !9444)
!9501 = !DILocation(line: 5387, column: 3, scope: !9497)
!9502 = !DILocation(line: 5390, column: 13, scope: !9444)
!9503 = !DILocation(line: 5390, column: 18, scope: !9444)
!9504 = !DILocation(line: 5390, column: 30, scope: !9444)
!9505 = !DILocation(line: 5390, column: 28, scope: !9444)
!9506 = !DILocation(line: 5390, column: 41, scope: !9444)
!9507 = !DILocation(line: 5390, column: 39, scope: !9444)
!9508 = !DILocation(line: 5390, column: 11, scope: !9444)
!9509 = !DILocation(line: 5392, column: 9, scope: !9510)
!9510 = distinct !DILexicalBlock(scope: !9444, file: !3, line: 5392, column: 2)
!9511 = !DILocation(line: 5392, column: 7, scope: !9510)
!9512 = !DILocation(line: 5392, column: 14, scope: !9513)
!9513 = distinct !DILexicalBlock(scope: !9510, file: !3, line: 5392, column: 2)
!9514 = !DILocation(line: 5392, column: 18, scope: !9513)
!9515 = !DILocation(line: 5392, column: 24, scope: !9513)
!9516 = !DILocation(line: 5392, column: 16, scope: !9513)
!9517 = !DILocation(line: 5392, column: 2, scope: !9510)
!9518 = !DILocation(line: 5393, column: 15, scope: !9519)
!9519 = distinct !DILexicalBlock(scope: !9513, file: !3, line: 5392, column: 41)
!9520 = !DILocation(line: 5393, column: 21, scope: !9519)
!9521 = !DILocation(line: 5393, column: 31, scope: !9519)
!9522 = !DILocation(line: 5393, column: 12, scope: !9519)
!9523 = !DILocation(line: 5394, column: 15, scope: !9519)
!9524 = !DILocation(line: 5394, column: 25, scope: !9519)
!9525 = !DILocation(line: 5394, column: 13, scope: !9519)
!9526 = !DILocation(line: 5396, column: 10, scope: !9527)
!9527 = distinct !DILexicalBlock(scope: !9519, file: !3, line: 5396, column: 3)
!9528 = !DILocation(line: 5396, column: 8, scope: !9527)
!9529 = !DILocation(line: 5396, column: 15, scope: !9530)
!9530 = distinct !DILexicalBlock(scope: !9527, file: !3, line: 5396, column: 3)
!9531 = !DILocation(line: 5396, column: 19, scope: !9530)
!9532 = !DILocation(line: 5396, column: 29, scope: !9530)
!9533 = !DILocation(line: 5396, column: 17, scope: !9530)
!9534 = !DILocation(line: 5396, column: 3, scope: !9527)
!9535 = !DILocation(line: 5397, column: 15, scope: !9536)
!9536 = distinct !DILexicalBlock(scope: !9530, file: !3, line: 5396, column: 46)
!9537 = !DILocation(line: 5397, column: 25, scope: !9536)
!9538 = !DILocation(line: 5397, column: 35, scope: !9536)
!9539 = !DILocation(line: 5397, column: 13, scope: !9536)
!9540 = !DILocation(line: 5404, column: 8, scope: !9541)
!9541 = distinct !DILexicalBlock(scope: !9536, file: !3, line: 5404, column: 8)
!9542 = !DILocation(line: 5404, column: 20, scope: !9541)
!9543 = !DILocation(line: 5404, column: 18, scope: !9541)
!9544 = !DILocation(line: 5404, column: 29, scope: !9541)
!9545 = !DILocation(line: 5404, column: 32, scope: !9541)
!9546 = !DILocation(line: 5404, column: 43, scope: !9541)
!9547 = !DILocation(line: 5404, column: 41, scope: !9541)
!9548 = !DILocation(line: 5404, column: 8, scope: !9536)
!9549 = !DILocation(line: 5405, column: 5, scope: !9541)
!9550 = !DILocation(line: 5407, column: 8, scope: !9551)
!9551 = distinct !DILexicalBlock(scope: !9536, file: !3, line: 5407, column: 8)
!9552 = !DILocation(line: 5407, column: 13, scope: !9551)
!9553 = !DILocation(line: 5407, column: 25, scope: !9551)
!9554 = !DILocation(line: 5407, column: 23, scope: !9551)
!9555 = !DILocation(line: 5407, column: 8, scope: !9536)
!9556 = !DILocation(line: 5408, column: 5, scope: !9551)
!9557 = !DILocation(line: 5410, column: 13, scope: !9536)
!9558 = !DILocation(line: 5410, column: 18, scope: !9536)
!9559 = !DILocation(line: 5410, column: 30, scope: !9536)
!9560 = !DILocation(line: 5410, column: 28, scope: !9536)
!9561 = !DILocation(line: 5410, column: 11, scope: !9536)
!9562 = !DILocation(line: 5412, column: 16, scope: !9536)
!9563 = !DILocation(line: 5412, column: 22, scope: !9536)
!9564 = !DILocation(line: 5412, column: 37, scope: !9536)
!9565 = !DILocation(line: 5412, column: 48, scope: !9536)
!9566 = !DILocation(line: 5412, column: 14, scope: !9536)
!9567 = !DILocalVariable(name: "__ret_warn_on", scope: !9568, file: !3, line: 5413, type: !240)
!9568 = distinct !DILexicalBlock(scope: !9569, file: !3, line: 5413, column: 8)
!9569 = distinct !DILexicalBlock(scope: !9536, file: !3, line: 5413, column: 8)
!9570 = !DILocation(line: 5413, column: 8, scope: !9568)
!9571 = !DILocation(line: 5413, column: 8, scope: !9572)
!9572 = distinct !DILexicalBlock(scope: !9568, file: !3, line: 5413, column: 8)
!9573 = !DILocation(line: 5413, column: 8, scope: !9574)
!9574 = distinct !DILexicalBlock(scope: !9572, file: !3, line: 5413, column: 8)
!9575 = !DILocation(line: 5413, column: 8, scope: !9576)
!9576 = distinct !DILexicalBlock(scope: !9574, file: !3, line: 5413, column: 8)
!9577 = !DILocation(line: 5413, column: 8, scope: !9578)
!9578 = distinct !DILexicalBlock(scope: !9574, file: !3, line: 5413, column: 8)
!9579 = !{i32 -2141510382, i32 -2141510353, i32 -2141510307, i32 -2141510249, i32 -2141510195, i32 -2141510141, i32 -2141510086, i32 -2141510055}
!9580 = !DILocation(line: 5413, column: 8, scope: !9581)
!9581 = distinct !DILexicalBlock(scope: !9574, file: !3, line: 5413, column: 8)
!9582 = !{i32 -2141509629, i32 -2141509622, i32 -2141509570, i32 -2141509539, i32 -2141509509}
!9583 = !DILocation(line: 5413, column: 8, scope: !9584)
!9584 = distinct !DILexicalBlock(scope: !9574, file: !3, line: 5413, column: 8)
!9585 = !DILocation(line: 5413, column: 8, scope: !9569)
!9586 = !DILocation(line: 5413, column: 8, scope: !9536)
!9587 = !DILocation(line: 5414, column: 5, scope: !9569)
!9588 = !DILocation(line: 5415, column: 22, scope: !9536)
!9589 = !DILocation(line: 5415, column: 34, scope: !9536)
!9590 = !DILocation(line: 5415, column: 32, scope: !9536)
!9591 = !DILocation(line: 5415, column: 20, scope: !9536)
!9592 = !DILocation(line: 5417, column: 8, scope: !9593)
!9593 = distinct !DILexicalBlock(scope: !9536, file: !3, line: 5417, column: 8)
!9594 = !DILocation(line: 5417, column: 26, scope: !9593)
!9595 = !DILocation(line: 5417, column: 24, scope: !9593)
!9596 = !DILocation(line: 5417, column: 35, scope: !9593)
!9597 = !DILocation(line: 5418, column: 8, scope: !9593)
!9598 = !DILocation(line: 5418, column: 19, scope: !9593)
!9599 = !DILocation(line: 5418, column: 17, scope: !9593)
!9600 = !DILocation(line: 5418, column: 28, scope: !9593)
!9601 = !DILocation(line: 5418, column: 26, scope: !9593)
!9602 = !DILocation(line: 5417, column: 8, scope: !9536)
!9603 = !DILocation(line: 5419, column: 5, scope: !9593)
!9604 = !DILocation(line: 5425, column: 8, scope: !9605)
!9605 = distinct !DILexicalBlock(scope: !9536, file: !3, line: 5425, column: 8)
!9606 = !DILocation(line: 5425, column: 26, scope: !9605)
!9607 = !DILocation(line: 5425, column: 24, scope: !9605)
!9608 = !DILocation(line: 5425, column: 8, scope: !9536)
!9609 = !DILocation(line: 5426, column: 28, scope: !9610)
!9610 = distinct !DILexicalBlock(scope: !9605, file: !3, line: 5425, column: 48)
!9611 = !DILocation(line: 5426, column: 26, scope: !9610)
!9612 = !DILocation(line: 5427, column: 17, scope: !9610)
!9613 = !DILocation(line: 5427, column: 15, scope: !9610)
!9614 = !DILocation(line: 5428, column: 21, scope: !9610)
!9615 = !DILocation(line: 5428, column: 19, scope: !9610)
!9616 = !DILocation(line: 5429, column: 22, scope: !9610)
!9617 = !DILocation(line: 5429, column: 20, scope: !9610)
!9618 = !DILocation(line: 5430, column: 4, scope: !9610)
!9619 = !DILocation(line: 5431, column: 3, scope: !9536)
!9620 = !DILocation(line: 5396, column: 42, scope: !9530)
!9621 = !DILocation(line: 5396, column: 3, scope: !9530)
!9622 = distinct !{!9622, !9534, !9623}
!9623 = !DILocation(line: 5431, column: 3, scope: !9527)
!9624 = !DILocation(line: 5432, column: 2, scope: !9519)
!9625 = !DILocation(line: 5392, column: 37, scope: !9513)
!9626 = !DILocation(line: 5392, column: 2, scope: !9513)
!9627 = distinct !{!9627, !9517, !9628}
!9628 = !DILocation(line: 5432, column: 2, scope: !9510)
!9629 = !DILocation(line: 5434, column: 6, scope: !9630)
!9630 = distinct !DILexicalBlock(scope: !9444, file: !3, line: 5434, column: 6)
!9631 = !DILocation(line: 5434, column: 27, scope: !9630)
!9632 = !DILocation(line: 5434, column: 6, scope: !9444)
!9633 = !DILocation(line: 5435, column: 3, scope: !9630)
!9634 = !DILocation(line: 5437, column: 19, scope: !9444)
!9635 = !DILocation(line: 5437, column: 2, scope: !9444)
!9636 = !DILocation(line: 5437, column: 8, scope: !9444)
!9637 = !DILocation(line: 5437, column: 12, scope: !9444)
!9638 = !DILocation(line: 5437, column: 17, scope: !9444)
!9639 = !DILocation(line: 5438, column: 23, scope: !9444)
!9640 = !DILocation(line: 5438, column: 2, scope: !9444)
!9641 = !DILocation(line: 5438, column: 8, scope: !9444)
!9642 = !DILocation(line: 5438, column: 12, scope: !9444)
!9643 = !DILocation(line: 5438, column: 21, scope: !9444)
!9644 = !DILocation(line: 5439, column: 20, scope: !9444)
!9645 = !DILocation(line: 5439, column: 2, scope: !9444)
!9646 = !DILocation(line: 5439, column: 8, scope: !9444)
!9647 = !DILocation(line: 5439, column: 12, scope: !9444)
!9648 = !DILocation(line: 5439, column: 18, scope: !9444)
!9649 = !DILocation(line: 5441, column: 2, scope: !9444)
!9650 = !DILocation(line: 5442, column: 1, scope: !9444)
!9651 = distinct !DISubprogram(name: "nand_scan_with_ids", scope: !3, file: !3, line: 5919, type: !4598, scopeLine: 5921, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9652 = !DILocalVariable(name: "chip", arg: 1, scope: !9651, file: !3, line: 5919, type: !4166)
!9653 = !DILocation(line: 5919, column: 42, scope: !9651)
!9654 = !DILocalVariable(name: "maxchips", arg: 2, scope: !9651, file: !3, line: 5919, type: !7)
!9655 = !DILocation(line: 5919, column: 61, scope: !9651)
!9656 = !DILocalVariable(name: "ids", arg: 3, scope: !9651, file: !3, line: 5920, type: !4600)
!9657 = !DILocation(line: 5920, column: 33, scope: !9651)
!9658 = !DILocalVariable(name: "ret", scope: !9651, file: !3, line: 5922, type: !240)
!9659 = !DILocation(line: 5922, column: 6, scope: !9651)
!9660 = !DILocation(line: 5924, column: 7, scope: !9661)
!9661 = distinct !DILexicalBlock(scope: !9651, file: !3, line: 5924, column: 6)
!9662 = !DILocation(line: 5924, column: 6, scope: !9651)
!9663 = !DILocation(line: 5925, column: 3, scope: !9661)
!9664 = !DILocation(line: 5927, column: 24, scope: !9651)
!9665 = !DILocation(line: 5927, column: 30, scope: !9651)
!9666 = !DILocation(line: 5927, column: 40, scope: !9651)
!9667 = !DILocation(line: 5927, column: 8, scope: !9651)
!9668 = !DILocation(line: 5927, column: 6, scope: !9651)
!9669 = !DILocation(line: 5928, column: 6, scope: !9670)
!9670 = distinct !DILexicalBlock(scope: !9651, file: !3, line: 5928, column: 6)
!9671 = !DILocation(line: 5928, column: 6, scope: !9651)
!9672 = !DILocation(line: 5929, column: 10, scope: !9670)
!9673 = !DILocation(line: 5929, column: 3, scope: !9670)
!9674 = !DILocation(line: 5931, column: 20, scope: !9651)
!9675 = !DILocation(line: 5931, column: 8, scope: !9651)
!9676 = !DILocation(line: 5931, column: 6, scope: !9651)
!9677 = !DILocation(line: 5932, column: 6, scope: !9678)
!9678 = distinct !DILexicalBlock(scope: !9651, file: !3, line: 5932, column: 6)
!9679 = !DILocation(line: 5932, column: 6, scope: !9651)
!9680 = !DILocation(line: 5933, column: 3, scope: !9678)
!9681 = !DILocation(line: 5935, column: 23, scope: !9651)
!9682 = !DILocation(line: 5935, column: 8, scope: !9651)
!9683 = !DILocation(line: 5935, column: 6, scope: !9651)
!9684 = !DILocation(line: 5936, column: 6, scope: !9685)
!9685 = distinct !DILexicalBlock(scope: !9651, file: !3, line: 5936, column: 6)
!9686 = !DILocation(line: 5936, column: 6, scope: !9651)
!9687 = !DILocation(line: 5937, column: 3, scope: !9685)
!9688 = !DILocation(line: 5939, column: 2, scope: !9651)
!9689 = !DILabel(scope: !9651, name: "detach_chip", file: !3, line: 5941)
!9690 = !DILocation(line: 5941, column: 1, scope: !9651)
!9691 = !DILocation(line: 5942, column: 14, scope: !9651)
!9692 = !DILocation(line: 5942, column: 2, scope: !9651)
!9693 = !DILabel(scope: !9651, name: "cleanup_ident", file: !3, line: 5943)
!9694 = !DILocation(line: 5943, column: 1, scope: !9651)
!9695 = !DILocation(line: 5944, column: 26, scope: !9651)
!9696 = !DILocation(line: 5944, column: 2, scope: !9651)
!9697 = !DILocation(line: 5946, column: 9, scope: !9651)
!9698 = !DILocation(line: 5946, column: 2, scope: !9651)
!9699 = !DILocation(line: 5947, column: 1, scope: !9651)
!9700 = !DILocalVariable(name: "chip", arg: 1, scope: !4597, file: !3, line: 5056, type: !4166)
!9701 = !DILocation(line: 5056, column: 46, scope: !4597)
!9702 = !DILocalVariable(name: "maxchips", arg: 2, scope: !4597, file: !3, line: 5056, type: !7)
!9703 = !DILocation(line: 5056, column: 65, scope: !4597)
!9704 = !DILocalVariable(name: "table", arg: 3, scope: !4597, file: !3, line: 5057, type: !4600)
!9705 = !DILocation(line: 5057, column: 30, scope: !4597)
!9706 = !DILocalVariable(name: "mtd", scope: !4597, file: !3, line: 5059, type: !2637)
!9707 = !DILocation(line: 5059, column: 19, scope: !4597)
!9708 = !DILocation(line: 5059, column: 37, scope: !4597)
!9709 = !DILocation(line: 5059, column: 25, scope: !4597)
!9710 = !DILocalVariable(name: "memorg", scope: !4597, file: !3, line: 5060, type: !8928)
!9711 = !DILocation(line: 5060, column: 35, scope: !4597)
!9712 = !DILocalVariable(name: "nand_maf_id", scope: !4597, file: !3, line: 5061, type: !240)
!9713 = !DILocation(line: 5061, column: 6, scope: !4597)
!9714 = !DILocalVariable(name: "nand_dev_id", scope: !4597, file: !3, line: 5061, type: !240)
!9715 = !DILocation(line: 5061, column: 19, scope: !4597)
!9716 = !DILocalVariable(name: "i", scope: !4597, file: !3, line: 5062, type: !7)
!9717 = !DILocation(line: 5062, column: 15, scope: !4597)
!9718 = !DILocalVariable(name: "ret", scope: !4597, file: !3, line: 5063, type: !240)
!9719 = !DILocation(line: 5063, column: 6, scope: !4597)
!9720 = !DILocation(line: 5065, column: 31, scope: !4597)
!9721 = !DILocation(line: 5065, column: 37, scope: !4597)
!9722 = !DILocation(line: 5065, column: 11, scope: !4597)
!9723 = !DILocation(line: 5065, column: 9, scope: !4597)
!9724 = !DILocation(line: 5068, column: 2, scope: !4597)
!9725 = !DILocation(line: 5068, column: 8, scope: !4597)
!9726 = !DILocation(line: 5068, column: 15, scope: !4597)
!9727 = !DILocation(line: 5070, column: 2, scope: !4597)
!9728 = !DILocation(line: 5070, column: 2, scope: !9729)
!9729 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 5070, column: 2)
!9730 = !DILocation(line: 5073, column: 35, scope: !4597)
!9731 = !DILocation(line: 5073, column: 2, scope: !4597)
!9732 = !DILocation(line: 5073, column: 8, scope: !4597)
!9733 = !DILocation(line: 5073, column: 33, scope: !4597)
!9734 = !DILocation(line: 5075, column: 24, scope: !4597)
!9735 = !DILocation(line: 5075, column: 8, scope: !4597)
!9736 = !DILocation(line: 5075, column: 6, scope: !4597)
!9737 = !DILocation(line: 5076, column: 6, scope: !9738)
!9738 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 5076, column: 6)
!9739 = !DILocation(line: 5076, column: 6, scope: !4597)
!9740 = !DILocation(line: 5077, column: 10, scope: !9738)
!9741 = !DILocation(line: 5077, column: 3, scope: !9738)
!9742 = !DILocation(line: 5079, column: 7, scope: !9743)
!9743 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 5079, column: 6)
!9744 = !DILocation(line: 5079, column: 12, scope: !9743)
!9745 = !DILocation(line: 5079, column: 17, scope: !9743)
!9746 = !DILocation(line: 5079, column: 20, scope: !9743)
!9747 = !DILocation(line: 5079, column: 25, scope: !9743)
!9748 = !DILocation(line: 5079, column: 29, scope: !9743)
!9749 = !DILocation(line: 5079, column: 6, scope: !4597)
!9750 = !DILocation(line: 5080, column: 24, scope: !9743)
!9751 = !DILocation(line: 5080, column: 29, scope: !9743)
!9752 = !DILocation(line: 5080, column: 33, scope: !9743)
!9753 = !DILocation(line: 5080, column: 15, scope: !9743)
!9754 = !DILocation(line: 5080, column: 3, scope: !9743)
!9755 = !DILocation(line: 5080, column: 8, scope: !9743)
!9756 = !DILocation(line: 5080, column: 13, scope: !9743)
!9757 = !DILocation(line: 5083, column: 20, scope: !4597)
!9758 = !DILocation(line: 5083, column: 2, scope: !4597)
!9759 = !DILocation(line: 5085, column: 32, scope: !4597)
!9760 = !DILocation(line: 5085, column: 8, scope: !4597)
!9761 = !DILocation(line: 5085, column: 6, scope: !4597)
!9762 = !DILocation(line: 5086, column: 6, scope: !9763)
!9763 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 5086, column: 6)
!9764 = !DILocation(line: 5086, column: 6, scope: !4597)
!9765 = !DILocation(line: 5087, column: 10, scope: !9763)
!9766 = !DILocation(line: 5087, column: 3, scope: !9763)
!9767 = !DILocation(line: 5089, column: 21, scope: !4597)
!9768 = !DILocation(line: 5089, column: 2, scope: !4597)
!9769 = !DILocation(line: 5089, column: 10, scope: !4597)
!9770 = !DILocation(line: 5089, column: 19, scope: !4597)
!9771 = !DILocation(line: 5092, column: 20, scope: !4597)
!9772 = !DILocation(line: 5092, column: 26, scope: !4597)
!9773 = !DILocation(line: 5092, column: 8, scope: !4597)
!9774 = !DILocation(line: 5092, column: 6, scope: !4597)
!9775 = !DILocation(line: 5093, column: 6, scope: !9776)
!9776 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 5093, column: 6)
!9777 = !DILocation(line: 5093, column: 6, scope: !4597)
!9778 = !DILocation(line: 5094, column: 9, scope: !9779)
!9779 = distinct !DILexicalBlock(scope: !9780, file: !3, line: 5094, column: 7)
!9780 = distinct !DILexicalBlock(scope: !9776, file: !3, line: 5093, column: 11)
!9781 = !DILocation(line: 5094, column: 15, scope: !9779)
!9782 = !DILocation(line: 5094, column: 23, scope: !9779)
!9783 = !DILocation(line: 5094, column: 7, scope: !9780)
!9784 = !DILocation(line: 5095, column: 4, scope: !9779)
!9785 = !DILocation(line: 5096, column: 24, scope: !9780)
!9786 = !DILocation(line: 5096, column: 3, scope: !9780)
!9787 = !DILocation(line: 5097, column: 10, scope: !9780)
!9788 = !DILocation(line: 5097, column: 3, scope: !9780)
!9789 = !DILocation(line: 5100, column: 16, scope: !4597)
!9790 = !DILocation(line: 5100, column: 22, scope: !4597)
!9791 = !DILocation(line: 5100, column: 25, scope: !4597)
!9792 = !DILocation(line: 5100, column: 14, scope: !4597)
!9793 = !DILocation(line: 5101, column: 16, scope: !4597)
!9794 = !DILocation(line: 5101, column: 22, scope: !4597)
!9795 = !DILocation(line: 5101, column: 25, scope: !4597)
!9796 = !DILocation(line: 5101, column: 14, scope: !4597)
!9797 = !DILocation(line: 5103, column: 23, scope: !4597)
!9798 = !DILocation(line: 5103, column: 2, scope: !4597)
!9799 = !DILocation(line: 5106, column: 9, scope: !9800)
!9800 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 5106, column: 2)
!9801 = !DILocation(line: 5106, column: 7, scope: !9800)
!9802 = !DILocation(line: 5106, column: 14, scope: !9803)
!9803 = distinct !DILexicalBlock(scope: !9800, file: !3, line: 5106, column: 2)
!9804 = !DILocation(line: 5106, column: 18, scope: !9803)
!9805 = !DILocation(line: 5106, column: 16, scope: !9803)
!9806 = !DILocation(line: 5106, column: 2, scope: !9800)
!9807 = !DILocalVariable(name: "id", scope: !9808, file: !3, line: 5107, type: !4239)
!9808 = distinct !DILexicalBlock(scope: !9803, file: !3, line: 5106, column: 33)
!9809 = !DILocation(line: 5107, column: 6, scope: !9808)
!9810 = !DILocation(line: 5110, column: 20, scope: !9808)
!9811 = !DILocation(line: 5110, column: 26, scope: !9808)
!9812 = !DILocation(line: 5110, column: 9, scope: !9808)
!9813 = !DILocation(line: 5110, column: 7, scope: !9808)
!9814 = !DILocation(line: 5111, column: 7, scope: !9815)
!9815 = distinct !DILexicalBlock(scope: !9808, file: !3, line: 5111, column: 7)
!9816 = !DILocation(line: 5111, column: 7, scope: !9808)
!9817 = !DILocation(line: 5112, column: 4, scope: !9815)
!9818 = !DILocation(line: 5114, column: 22, scope: !9808)
!9819 = !DILocation(line: 5114, column: 28, scope: !9808)
!9820 = !DILocation(line: 5114, column: 3, scope: !9808)
!9821 = !DILocation(line: 5116, column: 24, scope: !9808)
!9822 = !DILocation(line: 5116, column: 33, scope: !9808)
!9823 = !DILocation(line: 5116, column: 9, scope: !9808)
!9824 = !DILocation(line: 5116, column: 7, scope: !9808)
!9825 = !DILocation(line: 5117, column: 7, scope: !9826)
!9826 = distinct !DILexicalBlock(scope: !9808, file: !3, line: 5117, column: 7)
!9827 = !DILocation(line: 5117, column: 7, scope: !9808)
!9828 = !DILocation(line: 5118, column: 4, scope: !9826)
!9829 = !DILocation(line: 5120, column: 7, scope: !9830)
!9830 = distinct !DILexicalBlock(scope: !9808, file: !3, line: 5120, column: 7)
!9831 = !DILocation(line: 5120, column: 22, scope: !9830)
!9832 = !DILocation(line: 5120, column: 19, scope: !9830)
!9833 = !DILocation(line: 5120, column: 28, scope: !9830)
!9834 = !DILocation(line: 5120, column: 31, scope: !9830)
!9835 = !DILocation(line: 5120, column: 46, scope: !9830)
!9836 = !DILocation(line: 5120, column: 43, scope: !9830)
!9837 = !DILocation(line: 5120, column: 7, scope: !9808)
!9838 = !DILocation(line: 5121, column: 25, scope: !9839)
!9839 = distinct !DILexicalBlock(scope: !9830, file: !3, line: 5120, column: 53)
!9840 = !DILocation(line: 5121, column: 4, scope: !9839)
!9841 = !DILocation(line: 5122, column: 4, scope: !9839)
!9842 = !DILocation(line: 5124, column: 24, scope: !9808)
!9843 = !DILocation(line: 5124, column: 3, scope: !9808)
!9844 = !DILocation(line: 5125, column: 2, scope: !9808)
!9845 = !DILocation(line: 5106, column: 29, scope: !9803)
!9846 = !DILocation(line: 5106, column: 2, scope: !9803)
!9847 = distinct !{!9847, !9806, !9848}
!9848 = !DILocation(line: 5125, column: 2, scope: !9800)
!9849 = !DILocation(line: 5126, column: 6, scope: !9850)
!9850 = distinct !DILexicalBlock(scope: !4597, file: !3, line: 5126, column: 6)
!9851 = !DILocation(line: 5126, column: 8, scope: !9850)
!9852 = !DILocation(line: 5126, column: 6, scope: !4597)
!9853 = !DILocation(line: 5127, column: 3, scope: !9850)
!9854 = !DILocation(line: 5130, column: 21, scope: !4597)
!9855 = !DILocation(line: 5130, column: 2, scope: !4597)
!9856 = !DILocation(line: 5130, column: 10, scope: !4597)
!9857 = !DILocation(line: 5130, column: 19, scope: !4597)
!9858 = !DILocation(line: 5131, column: 14, scope: !4597)
!9859 = !DILocation(line: 5131, column: 39, scope: !4597)
!9860 = !DILocation(line: 5131, column: 45, scope: !4597)
!9861 = !DILocation(line: 5131, column: 18, scope: !4597)
!9862 = !DILocation(line: 5131, column: 16, scope: !4597)
!9863 = !DILocation(line: 5131, column: 2, scope: !4597)
!9864 = !DILocation(line: 5131, column: 7, scope: !4597)
!9865 = !DILocation(line: 5131, column: 12, scope: !4597)
!9866 = !DILocation(line: 5133, column: 2, scope: !4597)
!9867 = !DILocation(line: 5134, column: 1, scope: !4597)
!9868 = distinct !DISubprogram(name: "nand_attach", scope: !3, file: !3, line: 5895, type: !4222, scopeLine: 5896, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9869 = !DILocalVariable(name: "chip", arg: 1, scope: !9868, file: !3, line: 5895, type: !4166)
!9870 = !DILocation(line: 5895, column: 42, scope: !9868)
!9871 = !DILocation(line: 5897, column: 6, scope: !9872)
!9872 = distinct !DILexicalBlock(scope: !9868, file: !3, line: 5897, column: 6)
!9873 = !DILocation(line: 5897, column: 12, scope: !9872)
!9874 = !DILocation(line: 5897, column: 24, scope: !9872)
!9875 = !DILocation(line: 5897, column: 28, scope: !9872)
!9876 = !DILocation(line: 5897, column: 31, scope: !9872)
!9877 = !DILocation(line: 5897, column: 37, scope: !9872)
!9878 = !DILocation(line: 5897, column: 49, scope: !9872)
!9879 = !DILocation(line: 5897, column: 54, scope: !9872)
!9880 = !DILocation(line: 5897, column: 6, scope: !9868)
!9881 = !DILocation(line: 5898, column: 10, scope: !9872)
!9882 = !DILocation(line: 5898, column: 16, scope: !9872)
!9883 = !DILocation(line: 5898, column: 28, scope: !9872)
!9884 = !DILocation(line: 5898, column: 33, scope: !9872)
!9885 = !DILocation(line: 5898, column: 45, scope: !9872)
!9886 = !DILocation(line: 5898, column: 3, scope: !9872)
!9887 = !DILocation(line: 5900, column: 2, scope: !9868)
!9888 = !DILocation(line: 5901, column: 1, scope: !9868)
!9889 = distinct !DISubprogram(name: "nand_scan_tail", scope: !3, file: !3, line: 5606, type: !4222, scopeLine: 5607, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9890 = !DILocalVariable(name: "s", arg: 1, scope: !9891, file: !4044, line: 445, type: !956)
!9891 = distinct !DISubprogram(name: "kmem_cache_alloc_trace", scope: !4044, file: !4044, line: 445, type: !9892, scopeLine: 447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9892 = !DISubroutineType(types: !9893)
!9893 = !{!330, !956, !724, !303}
!9894 = !DILocation(line: 445, column: 72, scope: !9891, inlinedAt: !9895)
!9895 = distinct !DILocation(line: 552, column: 10, scope: !9896, inlinedAt: !9901)
!9896 = distinct !DILexicalBlock(scope: !9897, file: !4044, line: 540, column: 34)
!9897 = distinct !DILexicalBlock(scope: !9898, file: !4044, line: 540, column: 6)
!9898 = distinct !DISubprogram(name: "kmalloc", scope: !4044, file: !4044, line: 538, type: !9899, scopeLine: 539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9899 = !DISubroutineType(types: !9900)
!9900 = !{!330, !303, !724}
!9901 = distinct !DILocation(line: 5738, column: 19, scope: !9902)
!9902 = distinct !DILexicalBlock(scope: !9903, file: !3, line: 5736, column: 38)
!9903 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5736, column: 6)
!9904 = !DILocalVariable(name: "flags", arg: 2, scope: !9891, file: !4044, line: 446, type: !724)
!9905 = !DILocation(line: 446, column: 9, scope: !9891, inlinedAt: !9895)
!9906 = !DILocalVariable(name: "size", arg: 3, scope: !9891, file: !4044, line: 446, type: !303)
!9907 = !DILocation(line: 446, column: 23, scope: !9891, inlinedAt: !9895)
!9908 = !DILocalVariable(name: "ret", scope: !9891, file: !4044, line: 448, type: !330)
!9909 = !DILocation(line: 448, column: 8, scope: !9891, inlinedAt: !9895)
!9910 = !DILocalVariable(name: "flags", arg: 1, scope: !9911, file: !4044, line: 318, type: !724)
!9911 = distinct !DISubprogram(name: "kmalloc_type", scope: !4044, file: !4044, line: 318, type: !9912, scopeLine: 319, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9912 = !DISubroutineType(types: !9913)
!9913 = !{!4043, !724}
!9914 = !DILocation(line: 318, column: 67, scope: !9911, inlinedAt: !9915)
!9915 = distinct !DILocation(line: 553, column: 20, scope: !9896, inlinedAt: !9901)
!9916 = !DILocalVariable(name: "size", arg: 1, scope: !9917, file: !4044, line: 346, type: !303)
!9917 = distinct !DISubprogram(name: "kmalloc_index", scope: !4044, file: !4044, line: 346, type: !9918, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9918 = !DISubroutineType(types: !9919)
!9919 = !{!7, !303}
!9920 = !DILocation(line: 346, column: 58, scope: !9917, inlinedAt: !9921)
!9921 = distinct !DILocation(line: 547, column: 11, scope: !9896, inlinedAt: !9901)
!9922 = !DILocalVariable(name: "size", arg: 1, scope: !9923, file: !4044, line: 472, type: !303)
!9923 = distinct !DISubprogram(name: "kmalloc_order_trace", scope: !4044, file: !4044, line: 472, type: !9924, scopeLine: 473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9924 = !DISubroutineType(types: !9925)
!9925 = !{!330, !303, !724, !7}
!9926 = !DILocation(line: 472, column: 28, scope: !9923, inlinedAt: !9927)
!9927 = distinct !DILocation(line: 481, column: 9, scope: !9928, inlinedAt: !9929)
!9928 = distinct !DISubprogram(name: "kmalloc_large", scope: !4044, file: !4044, line: 478, type: !9899, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!9929 = distinct !DILocation(line: 545, column: 11, scope: !9930, inlinedAt: !9901)
!9930 = distinct !DILexicalBlock(scope: !9896, file: !4044, line: 544, column: 7)
!9931 = !DILocalVariable(name: "flags", arg: 2, scope: !9923, file: !4044, line: 472, type: !724)
!9932 = !DILocation(line: 472, column: 40, scope: !9923, inlinedAt: !9927)
!9933 = !DILocalVariable(name: "order", arg: 3, scope: !9923, file: !4044, line: 472, type: !7)
!9934 = !DILocation(line: 472, column: 60, scope: !9923, inlinedAt: !9927)
!9935 = !DILocalVariable(name: "size", arg: 1, scope: !9928, file: !4044, line: 478, type: !303)
!9936 = !DILocation(line: 478, column: 51, scope: !9928, inlinedAt: !9929)
!9937 = !DILocalVariable(name: "flags", arg: 2, scope: !9928, file: !4044, line: 478, type: !724)
!9938 = !DILocation(line: 478, column: 63, scope: !9928, inlinedAt: !9929)
!9939 = !DILocalVariable(name: "order", scope: !9928, file: !4044, line: 480, type: !7)
!9940 = !DILocation(line: 480, column: 15, scope: !9928, inlinedAt: !9929)
!9941 = !DILocalVariable(name: "size", arg: 1, scope: !9898, file: !4044, line: 538, type: !303)
!9942 = !DILocation(line: 538, column: 45, scope: !9898, inlinedAt: !9901)
!9943 = !DILocalVariable(name: "flags", arg: 2, scope: !9898, file: !4044, line: 538, type: !724)
!9944 = !DILocation(line: 538, column: 57, scope: !9898, inlinedAt: !9901)
!9945 = !DILocalVariable(name: "index", scope: !9896, file: !4044, line: 542, type: !7)
!9946 = !DILocation(line: 542, column: 16, scope: !9896, inlinedAt: !9901)
!9947 = !DILocation(line: 445, column: 72, scope: !9891, inlinedAt: !9948)
!9948 = distinct !DILocation(line: 552, column: 10, scope: !9896, inlinedAt: !9949)
!9949 = distinct !DILocation(line: 5737, column: 19, scope: !9902)
!9950 = !DILocation(line: 446, column: 9, scope: !9891, inlinedAt: !9948)
!9951 = !DILocation(line: 446, column: 23, scope: !9891, inlinedAt: !9948)
!9952 = !DILocation(line: 448, column: 8, scope: !9891, inlinedAt: !9948)
!9953 = !DILocation(line: 318, column: 67, scope: !9911, inlinedAt: !9954)
!9954 = distinct !DILocation(line: 553, column: 20, scope: !9896, inlinedAt: !9949)
!9955 = !DILocation(line: 346, column: 58, scope: !9917, inlinedAt: !9956)
!9956 = distinct !DILocation(line: 547, column: 11, scope: !9896, inlinedAt: !9949)
!9957 = !DILocation(line: 472, column: 28, scope: !9923, inlinedAt: !9958)
!9958 = distinct !DILocation(line: 481, column: 9, scope: !9928, inlinedAt: !9959)
!9959 = distinct !DILocation(line: 545, column: 11, scope: !9930, inlinedAt: !9949)
!9960 = !DILocation(line: 472, column: 40, scope: !9923, inlinedAt: !9958)
!9961 = !DILocation(line: 472, column: 60, scope: !9923, inlinedAt: !9958)
!9962 = !DILocation(line: 478, column: 51, scope: !9928, inlinedAt: !9959)
!9963 = !DILocation(line: 478, column: 63, scope: !9928, inlinedAt: !9959)
!9964 = !DILocation(line: 480, column: 15, scope: !9928, inlinedAt: !9959)
!9965 = !DILocation(line: 538, column: 45, scope: !9898, inlinedAt: !9949)
!9966 = !DILocation(line: 538, column: 57, scope: !9898, inlinedAt: !9949)
!9967 = !DILocation(line: 542, column: 16, scope: !9896, inlinedAt: !9949)
!9968 = !DILocation(line: 445, column: 72, scope: !9891, inlinedAt: !9969)
!9969 = distinct !DILocation(line: 552, column: 10, scope: !9896, inlinedAt: !9970)
!9970 = distinct !DILocation(line: 5618, column: 19, scope: !9889)
!9971 = !DILocation(line: 446, column: 9, scope: !9891, inlinedAt: !9969)
!9972 = !DILocation(line: 446, column: 23, scope: !9891, inlinedAt: !9969)
!9973 = !DILocation(line: 448, column: 8, scope: !9891, inlinedAt: !9969)
!9974 = !DILocation(line: 318, column: 67, scope: !9911, inlinedAt: !9975)
!9975 = distinct !DILocation(line: 553, column: 20, scope: !9896, inlinedAt: !9970)
!9976 = !DILocation(line: 346, column: 58, scope: !9917, inlinedAt: !9977)
!9977 = distinct !DILocation(line: 547, column: 11, scope: !9896, inlinedAt: !9970)
!9978 = !DILocation(line: 472, column: 28, scope: !9923, inlinedAt: !9979)
!9979 = distinct !DILocation(line: 481, column: 9, scope: !9928, inlinedAt: !9980)
!9980 = distinct !DILocation(line: 545, column: 11, scope: !9930, inlinedAt: !9970)
!9981 = !DILocation(line: 472, column: 40, scope: !9923, inlinedAt: !9979)
!9982 = !DILocation(line: 472, column: 60, scope: !9923, inlinedAt: !9979)
!9983 = !DILocation(line: 478, column: 51, scope: !9928, inlinedAt: !9980)
!9984 = !DILocation(line: 478, column: 63, scope: !9928, inlinedAt: !9980)
!9985 = !DILocation(line: 480, column: 15, scope: !9928, inlinedAt: !9980)
!9986 = !DILocation(line: 538, column: 45, scope: !9898, inlinedAt: !9970)
!9987 = !DILocation(line: 538, column: 57, scope: !9898, inlinedAt: !9970)
!9988 = !DILocation(line: 542, column: 16, scope: !9896, inlinedAt: !9970)
!9989 = !DILocalVariable(name: "chip", arg: 1, scope: !9889, file: !3, line: 5606, type: !4166)
!9990 = !DILocation(line: 5606, column: 45, scope: !9889)
!9991 = !DILocalVariable(name: "mtd", scope: !9889, file: !3, line: 5608, type: !2637)
!9992 = !DILocation(line: 5608, column: 19, scope: !9889)
!9993 = !DILocation(line: 5608, column: 37, scope: !9889)
!9994 = !DILocation(line: 5608, column: 25, scope: !9889)
!9995 = !DILocalVariable(name: "ecc", scope: !9889, file: !3, line: 5609, type: !9996)
!9996 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4521, size: 64)
!9997 = !DILocation(line: 5609, column: 24, scope: !9889)
!9998 = !DILocation(line: 5609, column: 31, scope: !9889)
!9999 = !DILocation(line: 5609, column: 37, scope: !9889)
!10000 = !DILocalVariable(name: "ret", scope: !9889, file: !3, line: 5610, type: !240)
!10001 = !DILocation(line: 5610, column: 6, scope: !9889)
!10002 = !DILocalVariable(name: "i", scope: !9889, file: !3, line: 5610, type: !240)
!10003 = !DILocation(line: 5610, column: 11, scope: !9889)
!10004 = !DILocalVariable(name: "__ret_warn_on", scope: !10005, file: !3, line: 5613, type: !240)
!10005 = distinct !DILexicalBlock(scope: !10006, file: !3, line: 5613, column: 6)
!10006 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5613, column: 6)
!10007 = !DILocation(line: 5613, column: 6, scope: !10005)
!10008 = !DILocation(line: 0, scope: !10005)
!10009 = !DILocation(line: 5613, column: 6, scope: !10010)
!10010 = distinct !DILexicalBlock(scope: !10005, file: !3, line: 5613, column: 6)
!10011 = !DILocation(line: 5613, column: 6, scope: !10012)
!10012 = distinct !DILexicalBlock(scope: !10010, file: !3, line: 5613, column: 6)
!10013 = !DILocation(line: 5613, column: 6, scope: !10014)
!10014 = distinct !DILexicalBlock(scope: !10012, file: !3, line: 5613, column: 6)
!10015 = !DILocation(line: 5613, column: 6, scope: !10016)
!10016 = distinct !DILexicalBlock(scope: !10012, file: !3, line: 5613, column: 6)
!10017 = !{i32 -2141501342, i32 -2141501313, i32 -2141501267, i32 -2141501209, i32 -2141501155, i32 -2141501101, i32 -2141501046, i32 -2141501015}
!10018 = !DILocation(line: 5613, column: 6, scope: !10019)
!10019 = distinct !DILexicalBlock(scope: !10012, file: !3, line: 5613, column: 6)
!10020 = !{i32 -2141500600, i32 -2141500593, i32 -2141500541, i32 -2141500510, i32 -2141500480}
!10021 = !DILocation(line: 5613, column: 6, scope: !10022)
!10022 = distinct !DILexicalBlock(scope: !10012, file: !3, line: 5613, column: 6)
!10023 = !DILocation(line: 5613, column: 6, scope: !10006)
!10024 = !DILocation(line: 5613, column: 6, scope: !9889)
!10025 = !DILocation(line: 5615, column: 3, scope: !10026)
!10026 = distinct !DILexicalBlock(scope: !10006, file: !3, line: 5614, column: 50)
!10027 = !DILocation(line: 5618, column: 27, scope: !9889)
!10028 = !DILocation(line: 5618, column: 32, scope: !9889)
!10029 = !DILocation(line: 5618, column: 44, scope: !9889)
!10030 = !DILocation(line: 5618, column: 49, scope: !9889)
!10031 = !DILocation(line: 5618, column: 42, scope: !9889)
!10032 = !DILocation(line: 540, column: 27, scope: !9897, inlinedAt: !9970)
!10033 = !DILocation(line: 540, column: 6, scope: !9897, inlinedAt: !9970)
!10034 = !DILocation(line: 540, column: 6, scope: !9898, inlinedAt: !9970)
!10035 = !DILocation(line: 544, column: 7, scope: !9930, inlinedAt: !9970)
!10036 = !DILocation(line: 544, column: 12, scope: !9930, inlinedAt: !9970)
!10037 = !DILocation(line: 544, column: 7, scope: !9896, inlinedAt: !9970)
!10038 = !DILocation(line: 545, column: 25, scope: !9930, inlinedAt: !9970)
!10039 = !DILocation(line: 545, column: 31, scope: !9930, inlinedAt: !9970)
!10040 = !DILocation(line: 480, column: 33, scope: !9928, inlinedAt: !9980)
!10041 = !DILocation(line: 480, column: 23, scope: !9928, inlinedAt: !9980)
!10042 = !DILocation(line: 481, column: 29, scope: !9928, inlinedAt: !9980)
!10043 = !DILocation(line: 481, column: 35, scope: !9928, inlinedAt: !9980)
!10044 = !DILocation(line: 481, column: 42, scope: !9928, inlinedAt: !9980)
!10045 = !DILocation(line: 474, column: 23, scope: !9923, inlinedAt: !9979)
!10046 = !DILocation(line: 474, column: 29, scope: !9923, inlinedAt: !9979)
!10047 = !DILocation(line: 474, column: 36, scope: !9923, inlinedAt: !9979)
!10048 = !DILocation(line: 474, column: 9, scope: !9923, inlinedAt: !9979)
!10049 = !DILocation(line: 545, column: 4, scope: !9930, inlinedAt: !9970)
!10050 = !DILocation(line: 547, column: 25, scope: !9896, inlinedAt: !9970)
!10051 = !DILocation(line: 348, column: 7, scope: !10052, inlinedAt: !9977)
!10052 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 348, column: 6)
!10053 = !DILocation(line: 348, column: 6, scope: !9917, inlinedAt: !9977)
!10054 = !DILocation(line: 349, column: 3, scope: !10052, inlinedAt: !9977)
!10055 = !DILocation(line: 351, column: 6, scope: !10056, inlinedAt: !9977)
!10056 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 351, column: 6)
!10057 = !DILocation(line: 351, column: 11, scope: !10056, inlinedAt: !9977)
!10058 = !DILocation(line: 351, column: 6, scope: !9917, inlinedAt: !9977)
!10059 = !DILocation(line: 352, column: 3, scope: !10056, inlinedAt: !9977)
!10060 = !DILocation(line: 354, column: 32, scope: !10061, inlinedAt: !9977)
!10061 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 354, column: 6)
!10062 = !DILocation(line: 354, column: 37, scope: !10061, inlinedAt: !9977)
!10063 = !DILocation(line: 354, column: 42, scope: !10061, inlinedAt: !9977)
!10064 = !DILocation(line: 354, column: 45, scope: !10061, inlinedAt: !9977)
!10065 = !DILocation(line: 354, column: 50, scope: !10061, inlinedAt: !9977)
!10066 = !DILocation(line: 354, column: 6, scope: !9917, inlinedAt: !9977)
!10067 = !DILocation(line: 355, column: 3, scope: !10061, inlinedAt: !9977)
!10068 = !DILocation(line: 356, column: 32, scope: !10069, inlinedAt: !9977)
!10069 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 356, column: 6)
!10070 = !DILocation(line: 356, column: 37, scope: !10069, inlinedAt: !9977)
!10071 = !DILocation(line: 356, column: 43, scope: !10069, inlinedAt: !9977)
!10072 = !DILocation(line: 356, column: 46, scope: !10069, inlinedAt: !9977)
!10073 = !DILocation(line: 356, column: 51, scope: !10069, inlinedAt: !9977)
!10074 = !DILocation(line: 356, column: 6, scope: !9917, inlinedAt: !9977)
!10075 = !DILocation(line: 357, column: 3, scope: !10069, inlinedAt: !9977)
!10076 = !DILocation(line: 358, column: 6, scope: !10077, inlinedAt: !9977)
!10077 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 358, column: 6)
!10078 = !DILocation(line: 358, column: 11, scope: !10077, inlinedAt: !9977)
!10079 = !DILocation(line: 358, column: 6, scope: !9917, inlinedAt: !9977)
!10080 = !DILocation(line: 358, column: 26, scope: !10077, inlinedAt: !9977)
!10081 = !DILocation(line: 359, column: 6, scope: !10082, inlinedAt: !9977)
!10082 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 359, column: 6)
!10083 = !DILocation(line: 359, column: 11, scope: !10082, inlinedAt: !9977)
!10084 = !DILocation(line: 359, column: 6, scope: !9917, inlinedAt: !9977)
!10085 = !DILocation(line: 359, column: 26, scope: !10082, inlinedAt: !9977)
!10086 = !DILocation(line: 360, column: 6, scope: !10087, inlinedAt: !9977)
!10087 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 360, column: 6)
!10088 = !DILocation(line: 360, column: 11, scope: !10087, inlinedAt: !9977)
!10089 = !DILocation(line: 360, column: 6, scope: !9917, inlinedAt: !9977)
!10090 = !DILocation(line: 360, column: 26, scope: !10087, inlinedAt: !9977)
!10091 = !DILocation(line: 361, column: 6, scope: !10092, inlinedAt: !9977)
!10092 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 361, column: 6)
!10093 = !DILocation(line: 361, column: 11, scope: !10092, inlinedAt: !9977)
!10094 = !DILocation(line: 361, column: 6, scope: !9917, inlinedAt: !9977)
!10095 = !DILocation(line: 361, column: 26, scope: !10092, inlinedAt: !9977)
!10096 = !DILocation(line: 362, column: 6, scope: !10097, inlinedAt: !9977)
!10097 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 362, column: 6)
!10098 = !DILocation(line: 362, column: 11, scope: !10097, inlinedAt: !9977)
!10099 = !DILocation(line: 362, column: 6, scope: !9917, inlinedAt: !9977)
!10100 = !DILocation(line: 362, column: 26, scope: !10097, inlinedAt: !9977)
!10101 = !DILocation(line: 363, column: 6, scope: !10102, inlinedAt: !9977)
!10102 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 363, column: 6)
!10103 = !DILocation(line: 363, column: 11, scope: !10102, inlinedAt: !9977)
!10104 = !DILocation(line: 363, column: 6, scope: !9917, inlinedAt: !9977)
!10105 = !DILocation(line: 363, column: 26, scope: !10102, inlinedAt: !9977)
!10106 = !DILocation(line: 364, column: 6, scope: !10107, inlinedAt: !9977)
!10107 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 364, column: 6)
!10108 = !DILocation(line: 364, column: 11, scope: !10107, inlinedAt: !9977)
!10109 = !DILocation(line: 364, column: 6, scope: !9917, inlinedAt: !9977)
!10110 = !DILocation(line: 364, column: 26, scope: !10107, inlinedAt: !9977)
!10111 = !DILocation(line: 365, column: 6, scope: !10112, inlinedAt: !9977)
!10112 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 365, column: 6)
!10113 = !DILocation(line: 365, column: 11, scope: !10112, inlinedAt: !9977)
!10114 = !DILocation(line: 365, column: 6, scope: !9917, inlinedAt: !9977)
!10115 = !DILocation(line: 365, column: 26, scope: !10112, inlinedAt: !9977)
!10116 = !DILocation(line: 366, column: 6, scope: !10117, inlinedAt: !9977)
!10117 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 366, column: 6)
!10118 = !DILocation(line: 366, column: 11, scope: !10117, inlinedAt: !9977)
!10119 = !DILocation(line: 366, column: 6, scope: !9917, inlinedAt: !9977)
!10120 = !DILocation(line: 366, column: 26, scope: !10117, inlinedAt: !9977)
!10121 = !DILocation(line: 367, column: 6, scope: !10122, inlinedAt: !9977)
!10122 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 367, column: 6)
!10123 = !DILocation(line: 367, column: 11, scope: !10122, inlinedAt: !9977)
!10124 = !DILocation(line: 367, column: 6, scope: !9917, inlinedAt: !9977)
!10125 = !DILocation(line: 367, column: 26, scope: !10122, inlinedAt: !9977)
!10126 = !DILocation(line: 368, column: 6, scope: !10127, inlinedAt: !9977)
!10127 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 368, column: 6)
!10128 = !DILocation(line: 368, column: 11, scope: !10127, inlinedAt: !9977)
!10129 = !DILocation(line: 368, column: 6, scope: !9917, inlinedAt: !9977)
!10130 = !DILocation(line: 368, column: 26, scope: !10127, inlinedAt: !9977)
!10131 = !DILocation(line: 369, column: 6, scope: !10132, inlinedAt: !9977)
!10132 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 369, column: 6)
!10133 = !DILocation(line: 369, column: 11, scope: !10132, inlinedAt: !9977)
!10134 = !DILocation(line: 369, column: 6, scope: !9917, inlinedAt: !9977)
!10135 = !DILocation(line: 369, column: 26, scope: !10132, inlinedAt: !9977)
!10136 = !DILocation(line: 370, column: 6, scope: !10137, inlinedAt: !9977)
!10137 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 370, column: 6)
!10138 = !DILocation(line: 370, column: 11, scope: !10137, inlinedAt: !9977)
!10139 = !DILocation(line: 370, column: 6, scope: !9917, inlinedAt: !9977)
!10140 = !DILocation(line: 370, column: 26, scope: !10137, inlinedAt: !9977)
!10141 = !DILocation(line: 371, column: 6, scope: !10142, inlinedAt: !9977)
!10142 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 371, column: 6)
!10143 = !DILocation(line: 371, column: 11, scope: !10142, inlinedAt: !9977)
!10144 = !DILocation(line: 371, column: 6, scope: !9917, inlinedAt: !9977)
!10145 = !DILocation(line: 371, column: 26, scope: !10142, inlinedAt: !9977)
!10146 = !DILocation(line: 372, column: 6, scope: !10147, inlinedAt: !9977)
!10147 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 372, column: 6)
!10148 = !DILocation(line: 372, column: 11, scope: !10147, inlinedAt: !9977)
!10149 = !DILocation(line: 372, column: 6, scope: !9917, inlinedAt: !9977)
!10150 = !DILocation(line: 372, column: 26, scope: !10147, inlinedAt: !9977)
!10151 = !DILocation(line: 373, column: 6, scope: !10152, inlinedAt: !9977)
!10152 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 373, column: 6)
!10153 = !DILocation(line: 373, column: 11, scope: !10152, inlinedAt: !9977)
!10154 = !DILocation(line: 373, column: 6, scope: !9917, inlinedAt: !9977)
!10155 = !DILocation(line: 373, column: 26, scope: !10152, inlinedAt: !9977)
!10156 = !DILocation(line: 374, column: 6, scope: !10157, inlinedAt: !9977)
!10157 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 374, column: 6)
!10158 = !DILocation(line: 374, column: 11, scope: !10157, inlinedAt: !9977)
!10159 = !DILocation(line: 374, column: 6, scope: !9917, inlinedAt: !9977)
!10160 = !DILocation(line: 374, column: 26, scope: !10157, inlinedAt: !9977)
!10161 = !DILocation(line: 375, column: 6, scope: !10162, inlinedAt: !9977)
!10162 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 375, column: 6)
!10163 = !DILocation(line: 375, column: 11, scope: !10162, inlinedAt: !9977)
!10164 = !DILocation(line: 375, column: 6, scope: !9917, inlinedAt: !9977)
!10165 = !DILocation(line: 375, column: 27, scope: !10162, inlinedAt: !9977)
!10166 = !DILocation(line: 376, column: 6, scope: !10167, inlinedAt: !9977)
!10167 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 376, column: 6)
!10168 = !DILocation(line: 376, column: 11, scope: !10167, inlinedAt: !9977)
!10169 = !DILocation(line: 376, column: 6, scope: !9917, inlinedAt: !9977)
!10170 = !DILocation(line: 376, column: 32, scope: !10167, inlinedAt: !9977)
!10171 = !DILocation(line: 377, column: 6, scope: !10172, inlinedAt: !9977)
!10172 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 377, column: 6)
!10173 = !DILocation(line: 377, column: 11, scope: !10172, inlinedAt: !9977)
!10174 = !DILocation(line: 377, column: 6, scope: !9917, inlinedAt: !9977)
!10175 = !DILocation(line: 377, column: 32, scope: !10172, inlinedAt: !9977)
!10176 = !DILocation(line: 378, column: 6, scope: !10177, inlinedAt: !9977)
!10177 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 378, column: 6)
!10178 = !DILocation(line: 378, column: 11, scope: !10177, inlinedAt: !9977)
!10179 = !DILocation(line: 378, column: 6, scope: !9917, inlinedAt: !9977)
!10180 = !DILocation(line: 378, column: 32, scope: !10177, inlinedAt: !9977)
!10181 = !DILocation(line: 379, column: 6, scope: !10182, inlinedAt: !9977)
!10182 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 379, column: 6)
!10183 = !DILocation(line: 379, column: 11, scope: !10182, inlinedAt: !9977)
!10184 = !DILocation(line: 379, column: 6, scope: !9917, inlinedAt: !9977)
!10185 = !DILocation(line: 379, column: 33, scope: !10182, inlinedAt: !9977)
!10186 = !DILocation(line: 380, column: 6, scope: !10187, inlinedAt: !9977)
!10187 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 380, column: 6)
!10188 = !DILocation(line: 380, column: 11, scope: !10187, inlinedAt: !9977)
!10189 = !DILocation(line: 380, column: 6, scope: !9917, inlinedAt: !9977)
!10190 = !DILocation(line: 380, column: 33, scope: !10187, inlinedAt: !9977)
!10191 = !DILocation(line: 381, column: 6, scope: !10192, inlinedAt: !9977)
!10192 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 381, column: 6)
!10193 = !DILocation(line: 381, column: 11, scope: !10192, inlinedAt: !9977)
!10194 = !DILocation(line: 381, column: 6, scope: !9917, inlinedAt: !9977)
!10195 = !DILocation(line: 381, column: 33, scope: !10192, inlinedAt: !9977)
!10196 = !DILocation(line: 382, column: 2, scope: !10197, inlinedAt: !9977)
!10197 = distinct !DILexicalBlock(scope: !10198, file: !4044, line: 382, column: 2)
!10198 = distinct !DILexicalBlock(scope: !9917, file: !4044, line: 382, column: 2)
!10199 = !{i32 -2143603236, i32 -2143603207, i32 -2143603161, i32 -2143603103, i32 -2143603049, i32 -2143602995, i32 -2143602940, i32 -2143602909}
!10200 = !DILocation(line: 382, column: 2, scope: !10201, inlinedAt: !9977)
!10201 = distinct !DILexicalBlock(scope: !10202, file: !4044, line: 382, column: 2)
!10202 = distinct !DILexicalBlock(scope: !10198, file: !4044, line: 382, column: 2)
!10203 = !{i32 -2143602466, i32 -2143602459, i32 -2143602405, i32 -2143602374, i32 -2143602344}
!10204 = !DILocation(line: 382, column: 2, scope: !10202, inlinedAt: !9977)
!10205 = !DILocation(line: 386, column: 1, scope: !9917, inlinedAt: !9977)
!10206 = !DILocation(line: 547, column: 9, scope: !9896, inlinedAt: !9970)
!10207 = !DILocation(line: 549, column: 8, scope: !10208, inlinedAt: !9970)
!10208 = distinct !DILexicalBlock(scope: !9896, file: !4044, line: 549, column: 7)
!10209 = !DILocation(line: 549, column: 7, scope: !9896, inlinedAt: !9970)
!10210 = !DILocation(line: 550, column: 4, scope: !10208, inlinedAt: !9970)
!10211 = !DILocation(line: 553, column: 33, scope: !9896, inlinedAt: !9970)
!10212 = !DILocation(line: 325, column: 6, scope: !10213, inlinedAt: !9975)
!10213 = distinct !DILexicalBlock(scope: !9911, file: !4044, line: 325, column: 6)
!10214 = !DILocation(line: 325, column: 6, scope: !9911, inlinedAt: !9975)
!10215 = !DILocation(line: 326, column: 3, scope: !10213, inlinedAt: !9975)
!10216 = !DILocation(line: 332, column: 9, scope: !9911, inlinedAt: !9975)
!10217 = !DILocation(line: 332, column: 15, scope: !9911, inlinedAt: !9975)
!10218 = !DILocation(line: 332, column: 2, scope: !9911, inlinedAt: !9975)
!10219 = !DILocation(line: 336, column: 1, scope: !9911, inlinedAt: !9975)
!10220 = !DILocation(line: 553, column: 5, scope: !9896, inlinedAt: !9970)
!10221 = !DILocation(line: 553, column: 41, scope: !9896, inlinedAt: !9970)
!10222 = !DILocation(line: 554, column: 5, scope: !9896, inlinedAt: !9970)
!10223 = !DILocation(line: 554, column: 12, scope: !9896, inlinedAt: !9970)
!10224 = !DILocation(line: 448, column: 31, scope: !9891, inlinedAt: !9969)
!10225 = !DILocation(line: 448, column: 34, scope: !9891, inlinedAt: !9969)
!10226 = !DILocation(line: 448, column: 14, scope: !9891, inlinedAt: !9969)
!10227 = !DILocation(line: 450, column: 22, scope: !9891, inlinedAt: !9969)
!10228 = !DILocation(line: 450, column: 25, scope: !9891, inlinedAt: !9969)
!10229 = !DILocation(line: 450, column: 30, scope: !9891, inlinedAt: !9969)
!10230 = !DILocation(line: 450, column: 36, scope: !9891, inlinedAt: !9969)
!10231 = !DILocation(line: 450, column: 8, scope: !9891, inlinedAt: !9969)
!10232 = !DILocation(line: 450, column: 6, scope: !9891, inlinedAt: !9969)
!10233 = !DILocation(line: 451, column: 9, scope: !9891, inlinedAt: !9969)
!10234 = !DILocation(line: 552, column: 3, scope: !9896, inlinedAt: !9970)
!10235 = !DILocation(line: 557, column: 19, scope: !9898, inlinedAt: !9970)
!10236 = !DILocation(line: 557, column: 25, scope: !9898, inlinedAt: !9970)
!10237 = !DILocation(line: 557, column: 9, scope: !9898, inlinedAt: !9970)
!10238 = !DILocation(line: 557, column: 2, scope: !9898, inlinedAt: !9970)
!10239 = !DILocation(line: 558, column: 1, scope: !9898, inlinedAt: !9970)
!10240 = !DILocation(line: 5618, column: 2, scope: !9889)
!10241 = !DILocation(line: 5618, column: 8, scope: !9889)
!10242 = !DILocation(line: 5618, column: 17, scope: !9889)
!10243 = !DILocation(line: 5619, column: 7, scope: !10244)
!10244 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5619, column: 6)
!10245 = !DILocation(line: 5619, column: 13, scope: !10244)
!10246 = !DILocation(line: 5619, column: 6, scope: !9889)
!10247 = !DILocation(line: 5620, column: 3, scope: !10244)
!10248 = !DILocation(line: 5628, column: 21, scope: !9889)
!10249 = !DILocation(line: 5628, column: 2, scope: !9889)
!10250 = !DILocation(line: 5629, column: 31, scope: !9889)
!10251 = !DILocation(line: 5629, column: 8, scope: !9889)
!10252 = !DILocation(line: 5629, column: 6, scope: !9889)
!10253 = !DILocation(line: 5630, column: 23, scope: !9889)
!10254 = !DILocation(line: 5630, column: 2, scope: !9889)
!10255 = !DILocation(line: 5631, column: 6, scope: !10256)
!10256 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5631, column: 6)
!10257 = !DILocation(line: 5631, column: 6, scope: !9889)
!10258 = !DILocation(line: 5632, column: 3, scope: !10256)
!10259 = !DILocation(line: 5635, column: 18, scope: !9889)
!10260 = !DILocation(line: 5635, column: 24, scope: !9889)
!10261 = !DILocation(line: 5635, column: 35, scope: !9889)
!10262 = !DILocation(line: 5635, column: 40, scope: !9889)
!10263 = !DILocation(line: 5635, column: 33, scope: !9889)
!10264 = !DILocation(line: 5635, column: 2, scope: !9889)
!10265 = !DILocation(line: 5635, column: 8, scope: !9889)
!10266 = !DILocation(line: 5635, column: 16, scope: !9889)
!10267 = !DILocation(line: 5640, column: 7, scope: !10268)
!10268 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5640, column: 6)
!10269 = !DILocation(line: 5640, column: 12, scope: !10268)
!10270 = !DILocation(line: 5640, column: 22, scope: !10268)
!10271 = !DILocation(line: 5641, column: 8, scope: !10268)
!10272 = !DILocation(line: 5641, column: 13, scope: !10268)
!10273 = !DILocation(line: 5641, column: 25, scope: !10268)
!10274 = !DILocation(line: 5641, column: 54, scope: !10268)
!10275 = !DILocation(line: 5642, column: 8, scope: !10268)
!10276 = !DILocation(line: 5642, column: 13, scope: !10268)
!10277 = !DILocation(line: 5642, column: 18, scope: !10268)
!10278 = !DILocation(line: 5640, column: 6, scope: !9889)
!10279 = !DILocation(line: 5643, column: 11, scope: !10280)
!10280 = distinct !DILexicalBlock(scope: !10268, file: !3, line: 5642, column: 41)
!10281 = !DILocation(line: 5643, column: 16, scope: !10280)
!10282 = !DILocation(line: 5643, column: 3, scope: !10280)
!10283 = !DILocation(line: 5646, column: 22, scope: !10284)
!10284 = distinct !DILexicalBlock(scope: !10280, file: !3, line: 5643, column: 25)
!10285 = !DILocation(line: 5646, column: 27, scope: !10284)
!10286 = !DILocation(line: 5646, column: 4, scope: !10284)
!10287 = !DILocation(line: 5647, column: 4, scope: !10284)
!10288 = !DILocation(line: 5650, column: 22, scope: !10284)
!10289 = !DILocation(line: 5651, column: 8, scope: !10284)
!10290 = !DILocation(line: 5650, column: 4, scope: !10284)
!10291 = !DILocation(line: 5652, column: 4, scope: !10284)
!10292 = !DILocation(line: 5661, column: 8, scope: !10293)
!10293 = distinct !DILexicalBlock(scope: !10284, file: !3, line: 5661, column: 8)
!10294 = !DILocation(line: 5661, column: 13, scope: !10293)
!10295 = !DILocation(line: 5661, column: 25, scope: !10293)
!10296 = !DILocation(line: 5661, column: 8, scope: !10284)
!10297 = !DILocation(line: 5662, column: 23, scope: !10298)
!10298 = distinct !DILexicalBlock(scope: !10293, file: !3, line: 5661, column: 55)
!10299 = !DILocation(line: 5663, column: 9, scope: !10298)
!10300 = !DILocation(line: 5662, column: 5, scope: !10298)
!10301 = !DILocation(line: 5664, column: 5, scope: !10298)
!10302 = !DILocalVariable(name: "__ret_warn_on", scope: !10303, file: !3, line: 5667, type: !240)
!10303 = distinct !DILexicalBlock(scope: !10284, file: !3, line: 5667, column: 4)
!10304 = !DILocation(line: 5667, column: 4, scope: !10303)
!10305 = !DILocation(line: 5667, column: 4, scope: !10306)
!10306 = distinct !DILexicalBlock(scope: !10303, file: !3, line: 5667, column: 4)
!10307 = !DILocation(line: 5667, column: 4, scope: !10308)
!10308 = distinct !DILexicalBlock(scope: !10306, file: !3, line: 5667, column: 4)
!10309 = !DILocation(line: 5667, column: 4, scope: !10310)
!10310 = distinct !DILexicalBlock(scope: !10308, file: !3, line: 5667, column: 4)
!10311 = !DILocation(line: 5667, column: 4, scope: !10312)
!10312 = distinct !DILexicalBlock(scope: !10308, file: !3, line: 5667, column: 4)
!10313 = !DILocation(line: 5667, column: 4, scope: !10314)
!10314 = distinct !DILexicalBlock(scope: !10312, file: !3, line: 5667, column: 4)
!10315 = !DILocation(line: 5667, column: 4, scope: !10316)
!10316 = distinct !DILexicalBlock(scope: !10312, file: !3, line: 5667, column: 4)
!10317 = !{i32 -2141499408, i32 -2141499379, i32 -2141499333, i32 -2141499275, i32 -2141499221, i32 -2141499167, i32 -2141499112, i32 -2141499081}
!10318 = !DILocation(line: 5667, column: 4, scope: !10319)
!10319 = distinct !DILexicalBlock(scope: !10312, file: !3, line: 5667, column: 4)
!10320 = !{i32 -2141498655, i32 -2141498648, i32 -2141498596, i32 -2141498565, i32 -2141498535}
!10321 = !DILocation(line: 5667, column: 4, scope: !10322)
!10322 = distinct !DILexicalBlock(scope: !10312, file: !3, line: 5667, column: 4)
!10323 = !DILocation(line: 5667, column: 4, scope: !10324)
!10324 = distinct !DILexicalBlock(scope: !10308, file: !3, line: 5667, column: 4)
!10325 = !DILocation(line: 5669, column: 8, scope: !10284)
!10326 = !DILocation(line: 5670, column: 4, scope: !10284)
!10327 = !DILocation(line: 5672, column: 2, scope: !10280)
!10328 = !DILocation(line: 5679, column: 10, scope: !9889)
!10329 = !DILocation(line: 5679, column: 15, scope: !9889)
!10330 = !DILocation(line: 5679, column: 2, scope: !9889)
!10331 = !DILocation(line: 5681, column: 34, scope: !10332)
!10332 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5679, column: 28)
!10333 = !DILocation(line: 5681, column: 9, scope: !10332)
!10334 = !DILocation(line: 5681, column: 7, scope: !10332)
!10335 = !DILocation(line: 5682, column: 7, scope: !10336)
!10336 = distinct !DILexicalBlock(scope: !10332, file: !3, line: 5682, column: 7)
!10337 = !DILocation(line: 5682, column: 7, scope: !10332)
!10338 = !DILocation(line: 5683, column: 4, scope: !10336)
!10339 = !DILocation(line: 5685, column: 7, scope: !10340)
!10340 = distinct !DILexicalBlock(scope: !10332, file: !3, line: 5685, column: 7)
!10341 = !DILocation(line: 5685, column: 12, scope: !10340)
!10342 = !DILocation(line: 5685, column: 25, scope: !10340)
!10343 = !DILocation(line: 5685, column: 30, scope: !10340)
!10344 = !DILocation(line: 5685, column: 22, scope: !10340)
!10345 = !DILocation(line: 5685, column: 7, scope: !10332)
!10346 = !DILocation(line: 5686, column: 9, scope: !10347)
!10347 = distinct !DILexicalBlock(scope: !10348, file: !3, line: 5686, column: 8)
!10348 = distinct !DILexicalBlock(scope: !10340, file: !3, line: 5685, column: 36)
!10349 = !DILocation(line: 5686, column: 14, scope: !10347)
!10350 = !DILocation(line: 5686, column: 8, scope: !10348)
!10351 = !DILocalVariable(name: "__ret_warn_on", scope: !10352, file: !3, line: 5687, type: !240)
!10352 = distinct !DILexicalBlock(scope: !10353, file: !3, line: 5687, column: 5)
!10353 = distinct !DILexicalBlock(scope: !10347, file: !3, line: 5686, column: 24)
!10354 = !DILocation(line: 5687, column: 5, scope: !10352)
!10355 = !DILocation(line: 5687, column: 5, scope: !10356)
!10356 = distinct !DILexicalBlock(scope: !10352, file: !3, line: 5687, column: 5)
!10357 = !DILocation(line: 5687, column: 5, scope: !10358)
!10358 = distinct !DILexicalBlock(scope: !10356, file: !3, line: 5687, column: 5)
!10359 = !DILocation(line: 5687, column: 5, scope: !10360)
!10360 = distinct !DILexicalBlock(scope: !10358, file: !3, line: 5687, column: 5)
!10361 = !DILocation(line: 5687, column: 5, scope: !10362)
!10362 = distinct !DILexicalBlock(scope: !10358, file: !3, line: 5687, column: 5)
!10363 = !DILocation(line: 5687, column: 5, scope: !10364)
!10364 = distinct !DILexicalBlock(scope: !10362, file: !3, line: 5687, column: 5)
!10365 = !DILocation(line: 5687, column: 5, scope: !10366)
!10366 = distinct !DILexicalBlock(scope: !10362, file: !3, line: 5687, column: 5)
!10367 = !{i32 -2141497635, i32 -2141497606, i32 -2141497560, i32 -2141497502, i32 -2141497448, i32 -2141497394, i32 -2141497339, i32 -2141497308}
!10368 = !DILocation(line: 5687, column: 5, scope: !10369)
!10369 = distinct !DILexicalBlock(scope: !10362, file: !3, line: 5687, column: 5)
!10370 = !{i32 -2141496882, i32 -2141496875, i32 -2141496823, i32 -2141496792, i32 -2141496762}
!10371 = !DILocation(line: 5687, column: 5, scope: !10372)
!10372 = distinct !DILexicalBlock(scope: !10362, file: !3, line: 5687, column: 5)
!10373 = !DILocation(line: 5687, column: 5, scope: !10374)
!10374 = distinct !DILexicalBlock(scope: !10358, file: !3, line: 5687, column: 5)
!10375 = !DILocation(line: 5688, column: 9, scope: !10353)
!10376 = !DILocation(line: 5689, column: 5, scope: !10353)
!10377 = !DILocation(line: 5691, column: 4, scope: !10348)
!10378 = !DILocation(line: 5693, column: 3, scope: !10332)
!10379 = !DILocation(line: 5695, column: 3, scope: !10332)
!10380 = !DILocation(line: 5695, column: 8, scope: !10332)
!10381 = !DILocation(line: 5695, column: 20, scope: !10332)
!10382 = !DILocation(line: 5696, column: 3, scope: !10332)
!10383 = !DILocation(line: 5696, column: 8, scope: !10332)
!10384 = !DILocation(line: 5696, column: 13, scope: !10332)
!10385 = !DILocation(line: 5700, column: 31, scope: !10332)
!10386 = !DILocation(line: 5700, column: 9, scope: !10332)
!10387 = !DILocation(line: 5700, column: 7, scope: !10332)
!10388 = !DILocation(line: 5701, column: 7, scope: !10389)
!10389 = distinct !DILexicalBlock(scope: !10332, file: !3, line: 5701, column: 7)
!10390 = !DILocation(line: 5701, column: 7, scope: !10332)
!10391 = !DILocation(line: 5702, column: 4, scope: !10389)
!10392 = !DILocation(line: 5703, column: 3, scope: !10332)
!10393 = !DILocation(line: 5706, column: 8, scope: !10394)
!10394 = distinct !DILexicalBlock(scope: !10332, file: !3, line: 5706, column: 7)
!10395 = !DILocation(line: 5706, column: 13, scope: !10394)
!10396 = !DILocation(line: 5706, column: 23, scope: !10394)
!10397 = !DILocation(line: 5706, column: 27, scope: !10394)
!10398 = !DILocation(line: 5706, column: 32, scope: !10394)
!10399 = !DILocation(line: 5706, column: 7, scope: !10332)
!10400 = !DILocalVariable(name: "__ret_warn_on", scope: !10401, file: !3, line: 5707, type: !240)
!10401 = distinct !DILexicalBlock(scope: !10402, file: !3, line: 5707, column: 4)
!10402 = distinct !DILexicalBlock(scope: !10394, file: !3, line: 5706, column: 44)
!10403 = !DILocation(line: 5707, column: 4, scope: !10401)
!10404 = !DILocation(line: 5707, column: 4, scope: !10405)
!10405 = distinct !DILexicalBlock(scope: !10401, file: !3, line: 5707, column: 4)
!10406 = !DILocation(line: 5707, column: 4, scope: !10407)
!10407 = distinct !DILexicalBlock(scope: !10405, file: !3, line: 5707, column: 4)
!10408 = !DILocation(line: 5707, column: 4, scope: !10409)
!10409 = distinct !DILexicalBlock(scope: !10407, file: !3, line: 5707, column: 4)
!10410 = !DILocation(line: 5707, column: 4, scope: !10411)
!10411 = distinct !DILexicalBlock(scope: !10407, file: !3, line: 5707, column: 4)
!10412 = !DILocation(line: 5707, column: 4, scope: !10413)
!10413 = distinct !DILexicalBlock(scope: !10411, file: !3, line: 5707, column: 4)
!10414 = !DILocation(line: 5707, column: 4, scope: !10415)
!10415 = distinct !DILexicalBlock(scope: !10411, file: !3, line: 5707, column: 4)
!10416 = !{i32 -2141495562, i32 -2141495533, i32 -2141495487, i32 -2141495429, i32 -2141495375, i32 -2141495321, i32 -2141495266, i32 -2141495235}
!10417 = !DILocation(line: 5707, column: 4, scope: !10418)
!10418 = distinct !DILexicalBlock(scope: !10411, file: !3, line: 5707, column: 4)
!10419 = !{i32 -2141494809, i32 -2141494802, i32 -2141494750, i32 -2141494719, i32 -2141494689}
!10420 = !DILocation(line: 5707, column: 4, scope: !10421)
!10421 = distinct !DILexicalBlock(scope: !10411, file: !3, line: 5707, column: 4)
!10422 = !DILocation(line: 5707, column: 4, scope: !10423)
!10423 = distinct !DILexicalBlock(scope: !10407, file: !3, line: 5707, column: 4)
!10424 = !DILocation(line: 5708, column: 8, scope: !10402)
!10425 = !DILocation(line: 5709, column: 4, scope: !10402)
!10426 = !DILocation(line: 5711, column: 8, scope: !10427)
!10427 = distinct !DILexicalBlock(scope: !10332, file: !3, line: 5711, column: 7)
!10428 = !DILocation(line: 5711, column: 13, scope: !10427)
!10429 = !DILocation(line: 5711, column: 7, scope: !10332)
!10430 = !DILocation(line: 5712, column: 4, scope: !10427)
!10431 = !DILocation(line: 5712, column: 9, scope: !10427)
!10432 = !DILocation(line: 5712, column: 18, scope: !10427)
!10433 = !DILocation(line: 5713, column: 8, scope: !10434)
!10434 = distinct !DILexicalBlock(scope: !10332, file: !3, line: 5713, column: 7)
!10435 = !DILocation(line: 5713, column: 13, scope: !10434)
!10436 = !DILocation(line: 5713, column: 7, scope: !10332)
!10437 = !DILocation(line: 5714, column: 4, scope: !10434)
!10438 = !DILocation(line: 5714, column: 9, scope: !10434)
!10439 = !DILocation(line: 5714, column: 19, scope: !10434)
!10440 = !DILocation(line: 5715, column: 3, scope: !10332)
!10441 = !DILocation(line: 5718, column: 3, scope: !10332)
!10442 = !DILocation(line: 5719, column: 3, scope: !10332)
!10443 = !DILocation(line: 5719, column: 8, scope: !10332)
!10444 = !DILocation(line: 5719, column: 18, scope: !10332)
!10445 = !DILocation(line: 5720, column: 3, scope: !10332)
!10446 = !DILocation(line: 5720, column: 8, scope: !10332)
!10447 = !DILocation(line: 5720, column: 19, scope: !10332)
!10448 = !DILocation(line: 5721, column: 3, scope: !10332)
!10449 = !DILocation(line: 5721, column: 8, scope: !10332)
!10450 = !DILocation(line: 5721, column: 17, scope: !10332)
!10451 = !DILocation(line: 5722, column: 3, scope: !10332)
!10452 = !DILocation(line: 5722, column: 8, scope: !10332)
!10453 = !DILocation(line: 5722, column: 22, scope: !10332)
!10454 = !DILocation(line: 5723, column: 3, scope: !10332)
!10455 = !DILocation(line: 5723, column: 8, scope: !10332)
!10456 = !DILocation(line: 5723, column: 23, scope: !10332)
!10457 = !DILocation(line: 5724, column: 3, scope: !10332)
!10458 = !DILocation(line: 5724, column: 8, scope: !10332)
!10459 = !DILocation(line: 5724, column: 18, scope: !10332)
!10460 = !DILocation(line: 5725, column: 15, scope: !10332)
!10461 = !DILocation(line: 5725, column: 20, scope: !10332)
!10462 = !DILocation(line: 5725, column: 3, scope: !10332)
!10463 = !DILocation(line: 5725, column: 8, scope: !10332)
!10464 = !DILocation(line: 5725, column: 13, scope: !10332)
!10465 = !DILocation(line: 5726, column: 3, scope: !10332)
!10466 = !DILocation(line: 5726, column: 8, scope: !10332)
!10467 = !DILocation(line: 5726, column: 14, scope: !10332)
!10468 = !DILocation(line: 5727, column: 3, scope: !10332)
!10469 = !DILocation(line: 5727, column: 8, scope: !10332)
!10470 = !DILocation(line: 5727, column: 17, scope: !10332)
!10471 = !DILocation(line: 5728, column: 3, scope: !10332)
!10472 = !DILocalVariable(name: "__ret_warn_on", scope: !10473, file: !3, line: 5731, type: !240)
!10473 = distinct !DILexicalBlock(scope: !10332, file: !3, line: 5731, column: 3)
!10474 = !DILocation(line: 5731, column: 3, scope: !10473)
!10475 = !DILocation(line: 5731, column: 3, scope: !10476)
!10476 = distinct !DILexicalBlock(scope: !10473, file: !3, line: 5731, column: 3)
!10477 = !DILocation(line: 5731, column: 3, scope: !10478)
!10478 = distinct !DILexicalBlock(scope: !10476, file: !3, line: 5731, column: 3)
!10479 = !DILocation(line: 5731, column: 3, scope: !10480)
!10480 = distinct !DILexicalBlock(scope: !10478, file: !3, line: 5731, column: 3)
!10481 = !DILocation(line: 5731, column: 3, scope: !10482)
!10482 = distinct !DILexicalBlock(scope: !10478, file: !3, line: 5731, column: 3)
!10483 = !DILocation(line: 5731, column: 3, scope: !10484)
!10484 = distinct !DILexicalBlock(scope: !10482, file: !3, line: 5731, column: 3)
!10485 = !DILocation(line: 5731, column: 3, scope: !10486)
!10486 = distinct !DILexicalBlock(scope: !10482, file: !3, line: 5731, column: 3)
!10487 = !{i32 -2141493548, i32 -2141493519, i32 -2141493473, i32 -2141493415, i32 -2141493361, i32 -2141493307, i32 -2141493252, i32 -2141493221}
!10488 = !DILocation(line: 5731, column: 3, scope: !10489)
!10489 = distinct !DILexicalBlock(scope: !10482, file: !3, line: 5731, column: 3)
!10490 = !{i32 -2141492795, i32 -2141492788, i32 -2141492736, i32 -2141492705, i32 -2141492675}
!10491 = !DILocation(line: 5731, column: 3, scope: !10492)
!10492 = distinct !DILexicalBlock(scope: !10482, file: !3, line: 5731, column: 3)
!10493 = !DILocation(line: 5731, column: 3, scope: !10494)
!10494 = distinct !DILexicalBlock(scope: !10478, file: !3, line: 5731, column: 3)
!10495 = !DILocation(line: 5732, column: 7, scope: !10332)
!10496 = !DILocation(line: 5733, column: 3, scope: !10332)
!10497 = !DILocation(line: 5736, column: 6, scope: !9903)
!10498 = !DILocation(line: 5736, column: 11, scope: !9903)
!10499 = !DILocation(line: 5736, column: 19, scope: !9903)
!10500 = !DILocation(line: 5736, column: 22, scope: !9903)
!10501 = !DILocation(line: 5736, column: 27, scope: !9903)
!10502 = !DILocation(line: 5736, column: 6, scope: !9889)
!10503 = !DILocation(line: 5737, column: 27, scope: !9902)
!10504 = !DILocation(line: 5737, column: 32, scope: !9902)
!10505 = !DILocation(line: 540, column: 27, scope: !9897, inlinedAt: !9949)
!10506 = !DILocation(line: 540, column: 6, scope: !9897, inlinedAt: !9949)
!10507 = !DILocation(line: 540, column: 6, scope: !9898, inlinedAt: !9949)
!10508 = !DILocation(line: 544, column: 7, scope: !9930, inlinedAt: !9949)
!10509 = !DILocation(line: 544, column: 12, scope: !9930, inlinedAt: !9949)
!10510 = !DILocation(line: 544, column: 7, scope: !9896, inlinedAt: !9949)
!10511 = !DILocation(line: 545, column: 25, scope: !9930, inlinedAt: !9949)
!10512 = !DILocation(line: 545, column: 31, scope: !9930, inlinedAt: !9949)
!10513 = !DILocation(line: 480, column: 33, scope: !9928, inlinedAt: !9959)
!10514 = !DILocation(line: 480, column: 23, scope: !9928, inlinedAt: !9959)
!10515 = !DILocation(line: 481, column: 29, scope: !9928, inlinedAt: !9959)
!10516 = !DILocation(line: 481, column: 35, scope: !9928, inlinedAt: !9959)
!10517 = !DILocation(line: 481, column: 42, scope: !9928, inlinedAt: !9959)
!10518 = !DILocation(line: 474, column: 23, scope: !9923, inlinedAt: !9958)
!10519 = !DILocation(line: 474, column: 29, scope: !9923, inlinedAt: !9958)
!10520 = !DILocation(line: 474, column: 36, scope: !9923, inlinedAt: !9958)
!10521 = !DILocation(line: 474, column: 9, scope: !9923, inlinedAt: !9958)
!10522 = !DILocation(line: 545, column: 4, scope: !9930, inlinedAt: !9949)
!10523 = !DILocation(line: 547, column: 25, scope: !9896, inlinedAt: !9949)
!10524 = !DILocation(line: 348, column: 7, scope: !10052, inlinedAt: !9956)
!10525 = !DILocation(line: 348, column: 6, scope: !9917, inlinedAt: !9956)
!10526 = !DILocation(line: 349, column: 3, scope: !10052, inlinedAt: !9956)
!10527 = !DILocation(line: 351, column: 6, scope: !10056, inlinedAt: !9956)
!10528 = !DILocation(line: 351, column: 11, scope: !10056, inlinedAt: !9956)
!10529 = !DILocation(line: 351, column: 6, scope: !9917, inlinedAt: !9956)
!10530 = !DILocation(line: 352, column: 3, scope: !10056, inlinedAt: !9956)
!10531 = !DILocation(line: 354, column: 32, scope: !10061, inlinedAt: !9956)
!10532 = !DILocation(line: 354, column: 37, scope: !10061, inlinedAt: !9956)
!10533 = !DILocation(line: 354, column: 42, scope: !10061, inlinedAt: !9956)
!10534 = !DILocation(line: 354, column: 45, scope: !10061, inlinedAt: !9956)
!10535 = !DILocation(line: 354, column: 50, scope: !10061, inlinedAt: !9956)
!10536 = !DILocation(line: 354, column: 6, scope: !9917, inlinedAt: !9956)
!10537 = !DILocation(line: 355, column: 3, scope: !10061, inlinedAt: !9956)
!10538 = !DILocation(line: 356, column: 32, scope: !10069, inlinedAt: !9956)
!10539 = !DILocation(line: 356, column: 37, scope: !10069, inlinedAt: !9956)
!10540 = !DILocation(line: 356, column: 43, scope: !10069, inlinedAt: !9956)
!10541 = !DILocation(line: 356, column: 46, scope: !10069, inlinedAt: !9956)
!10542 = !DILocation(line: 356, column: 51, scope: !10069, inlinedAt: !9956)
!10543 = !DILocation(line: 356, column: 6, scope: !9917, inlinedAt: !9956)
!10544 = !DILocation(line: 357, column: 3, scope: !10069, inlinedAt: !9956)
!10545 = !DILocation(line: 358, column: 6, scope: !10077, inlinedAt: !9956)
!10546 = !DILocation(line: 358, column: 11, scope: !10077, inlinedAt: !9956)
!10547 = !DILocation(line: 358, column: 6, scope: !9917, inlinedAt: !9956)
!10548 = !DILocation(line: 358, column: 26, scope: !10077, inlinedAt: !9956)
!10549 = !DILocation(line: 359, column: 6, scope: !10082, inlinedAt: !9956)
!10550 = !DILocation(line: 359, column: 11, scope: !10082, inlinedAt: !9956)
!10551 = !DILocation(line: 359, column: 6, scope: !9917, inlinedAt: !9956)
!10552 = !DILocation(line: 359, column: 26, scope: !10082, inlinedAt: !9956)
!10553 = !DILocation(line: 360, column: 6, scope: !10087, inlinedAt: !9956)
!10554 = !DILocation(line: 360, column: 11, scope: !10087, inlinedAt: !9956)
!10555 = !DILocation(line: 360, column: 6, scope: !9917, inlinedAt: !9956)
!10556 = !DILocation(line: 360, column: 26, scope: !10087, inlinedAt: !9956)
!10557 = !DILocation(line: 361, column: 6, scope: !10092, inlinedAt: !9956)
!10558 = !DILocation(line: 361, column: 11, scope: !10092, inlinedAt: !9956)
!10559 = !DILocation(line: 361, column: 6, scope: !9917, inlinedAt: !9956)
!10560 = !DILocation(line: 361, column: 26, scope: !10092, inlinedAt: !9956)
!10561 = !DILocation(line: 362, column: 6, scope: !10097, inlinedAt: !9956)
!10562 = !DILocation(line: 362, column: 11, scope: !10097, inlinedAt: !9956)
!10563 = !DILocation(line: 362, column: 6, scope: !9917, inlinedAt: !9956)
!10564 = !DILocation(line: 362, column: 26, scope: !10097, inlinedAt: !9956)
!10565 = !DILocation(line: 363, column: 6, scope: !10102, inlinedAt: !9956)
!10566 = !DILocation(line: 363, column: 11, scope: !10102, inlinedAt: !9956)
!10567 = !DILocation(line: 363, column: 6, scope: !9917, inlinedAt: !9956)
!10568 = !DILocation(line: 363, column: 26, scope: !10102, inlinedAt: !9956)
!10569 = !DILocation(line: 364, column: 6, scope: !10107, inlinedAt: !9956)
!10570 = !DILocation(line: 364, column: 11, scope: !10107, inlinedAt: !9956)
!10571 = !DILocation(line: 364, column: 6, scope: !9917, inlinedAt: !9956)
!10572 = !DILocation(line: 364, column: 26, scope: !10107, inlinedAt: !9956)
!10573 = !DILocation(line: 365, column: 6, scope: !10112, inlinedAt: !9956)
!10574 = !DILocation(line: 365, column: 11, scope: !10112, inlinedAt: !9956)
!10575 = !DILocation(line: 365, column: 6, scope: !9917, inlinedAt: !9956)
!10576 = !DILocation(line: 365, column: 26, scope: !10112, inlinedAt: !9956)
!10577 = !DILocation(line: 366, column: 6, scope: !10117, inlinedAt: !9956)
!10578 = !DILocation(line: 366, column: 11, scope: !10117, inlinedAt: !9956)
!10579 = !DILocation(line: 366, column: 6, scope: !9917, inlinedAt: !9956)
!10580 = !DILocation(line: 366, column: 26, scope: !10117, inlinedAt: !9956)
!10581 = !DILocation(line: 367, column: 6, scope: !10122, inlinedAt: !9956)
!10582 = !DILocation(line: 367, column: 11, scope: !10122, inlinedAt: !9956)
!10583 = !DILocation(line: 367, column: 6, scope: !9917, inlinedAt: !9956)
!10584 = !DILocation(line: 367, column: 26, scope: !10122, inlinedAt: !9956)
!10585 = !DILocation(line: 368, column: 6, scope: !10127, inlinedAt: !9956)
!10586 = !DILocation(line: 368, column: 11, scope: !10127, inlinedAt: !9956)
!10587 = !DILocation(line: 368, column: 6, scope: !9917, inlinedAt: !9956)
!10588 = !DILocation(line: 368, column: 26, scope: !10127, inlinedAt: !9956)
!10589 = !DILocation(line: 369, column: 6, scope: !10132, inlinedAt: !9956)
!10590 = !DILocation(line: 369, column: 11, scope: !10132, inlinedAt: !9956)
!10591 = !DILocation(line: 369, column: 6, scope: !9917, inlinedAt: !9956)
!10592 = !DILocation(line: 369, column: 26, scope: !10132, inlinedAt: !9956)
!10593 = !DILocation(line: 370, column: 6, scope: !10137, inlinedAt: !9956)
!10594 = !DILocation(line: 370, column: 11, scope: !10137, inlinedAt: !9956)
!10595 = !DILocation(line: 370, column: 6, scope: !9917, inlinedAt: !9956)
!10596 = !DILocation(line: 370, column: 26, scope: !10137, inlinedAt: !9956)
!10597 = !DILocation(line: 371, column: 6, scope: !10142, inlinedAt: !9956)
!10598 = !DILocation(line: 371, column: 11, scope: !10142, inlinedAt: !9956)
!10599 = !DILocation(line: 371, column: 6, scope: !9917, inlinedAt: !9956)
!10600 = !DILocation(line: 371, column: 26, scope: !10142, inlinedAt: !9956)
!10601 = !DILocation(line: 372, column: 6, scope: !10147, inlinedAt: !9956)
!10602 = !DILocation(line: 372, column: 11, scope: !10147, inlinedAt: !9956)
!10603 = !DILocation(line: 372, column: 6, scope: !9917, inlinedAt: !9956)
!10604 = !DILocation(line: 372, column: 26, scope: !10147, inlinedAt: !9956)
!10605 = !DILocation(line: 373, column: 6, scope: !10152, inlinedAt: !9956)
!10606 = !DILocation(line: 373, column: 11, scope: !10152, inlinedAt: !9956)
!10607 = !DILocation(line: 373, column: 6, scope: !9917, inlinedAt: !9956)
!10608 = !DILocation(line: 373, column: 26, scope: !10152, inlinedAt: !9956)
!10609 = !DILocation(line: 374, column: 6, scope: !10157, inlinedAt: !9956)
!10610 = !DILocation(line: 374, column: 11, scope: !10157, inlinedAt: !9956)
!10611 = !DILocation(line: 374, column: 6, scope: !9917, inlinedAt: !9956)
!10612 = !DILocation(line: 374, column: 26, scope: !10157, inlinedAt: !9956)
!10613 = !DILocation(line: 375, column: 6, scope: !10162, inlinedAt: !9956)
!10614 = !DILocation(line: 375, column: 11, scope: !10162, inlinedAt: !9956)
!10615 = !DILocation(line: 375, column: 6, scope: !9917, inlinedAt: !9956)
!10616 = !DILocation(line: 375, column: 27, scope: !10162, inlinedAt: !9956)
!10617 = !DILocation(line: 376, column: 6, scope: !10167, inlinedAt: !9956)
!10618 = !DILocation(line: 376, column: 11, scope: !10167, inlinedAt: !9956)
!10619 = !DILocation(line: 376, column: 6, scope: !9917, inlinedAt: !9956)
!10620 = !DILocation(line: 376, column: 32, scope: !10167, inlinedAt: !9956)
!10621 = !DILocation(line: 377, column: 6, scope: !10172, inlinedAt: !9956)
!10622 = !DILocation(line: 377, column: 11, scope: !10172, inlinedAt: !9956)
!10623 = !DILocation(line: 377, column: 6, scope: !9917, inlinedAt: !9956)
!10624 = !DILocation(line: 377, column: 32, scope: !10172, inlinedAt: !9956)
!10625 = !DILocation(line: 378, column: 6, scope: !10177, inlinedAt: !9956)
!10626 = !DILocation(line: 378, column: 11, scope: !10177, inlinedAt: !9956)
!10627 = !DILocation(line: 378, column: 6, scope: !9917, inlinedAt: !9956)
!10628 = !DILocation(line: 378, column: 32, scope: !10177, inlinedAt: !9956)
!10629 = !DILocation(line: 379, column: 6, scope: !10182, inlinedAt: !9956)
!10630 = !DILocation(line: 379, column: 11, scope: !10182, inlinedAt: !9956)
!10631 = !DILocation(line: 379, column: 6, scope: !9917, inlinedAt: !9956)
!10632 = !DILocation(line: 379, column: 33, scope: !10182, inlinedAt: !9956)
!10633 = !DILocation(line: 380, column: 6, scope: !10187, inlinedAt: !9956)
!10634 = !DILocation(line: 380, column: 11, scope: !10187, inlinedAt: !9956)
!10635 = !DILocation(line: 380, column: 6, scope: !9917, inlinedAt: !9956)
!10636 = !DILocation(line: 380, column: 33, scope: !10187, inlinedAt: !9956)
!10637 = !DILocation(line: 381, column: 6, scope: !10192, inlinedAt: !9956)
!10638 = !DILocation(line: 381, column: 11, scope: !10192, inlinedAt: !9956)
!10639 = !DILocation(line: 381, column: 6, scope: !9917, inlinedAt: !9956)
!10640 = !DILocation(line: 381, column: 33, scope: !10192, inlinedAt: !9956)
!10641 = !DILocation(line: 382, column: 2, scope: !10197, inlinedAt: !9956)
!10642 = !DILocation(line: 382, column: 2, scope: !10201, inlinedAt: !9956)
!10643 = !DILocation(line: 382, column: 2, scope: !10202, inlinedAt: !9956)
!10644 = !DILocation(line: 386, column: 1, scope: !9917, inlinedAt: !9956)
!10645 = !DILocation(line: 547, column: 9, scope: !9896, inlinedAt: !9949)
!10646 = !DILocation(line: 549, column: 8, scope: !10208, inlinedAt: !9949)
!10647 = !DILocation(line: 549, column: 7, scope: !9896, inlinedAt: !9949)
!10648 = !DILocation(line: 550, column: 4, scope: !10208, inlinedAt: !9949)
!10649 = !DILocation(line: 553, column: 33, scope: !9896, inlinedAt: !9949)
!10650 = !DILocation(line: 325, column: 6, scope: !10213, inlinedAt: !9954)
!10651 = !DILocation(line: 325, column: 6, scope: !9911, inlinedAt: !9954)
!10652 = !DILocation(line: 326, column: 3, scope: !10213, inlinedAt: !9954)
!10653 = !DILocation(line: 332, column: 9, scope: !9911, inlinedAt: !9954)
!10654 = !DILocation(line: 332, column: 15, scope: !9911, inlinedAt: !9954)
!10655 = !DILocation(line: 332, column: 2, scope: !9911, inlinedAt: !9954)
!10656 = !DILocation(line: 336, column: 1, scope: !9911, inlinedAt: !9954)
!10657 = !DILocation(line: 553, column: 5, scope: !9896, inlinedAt: !9949)
!10658 = !DILocation(line: 553, column: 41, scope: !9896, inlinedAt: !9949)
!10659 = !DILocation(line: 554, column: 5, scope: !9896, inlinedAt: !9949)
!10660 = !DILocation(line: 554, column: 12, scope: !9896, inlinedAt: !9949)
!10661 = !DILocation(line: 448, column: 31, scope: !9891, inlinedAt: !9948)
!10662 = !DILocation(line: 448, column: 34, scope: !9891, inlinedAt: !9948)
!10663 = !DILocation(line: 448, column: 14, scope: !9891, inlinedAt: !9948)
!10664 = !DILocation(line: 450, column: 22, scope: !9891, inlinedAt: !9948)
!10665 = !DILocation(line: 450, column: 25, scope: !9891, inlinedAt: !9948)
!10666 = !DILocation(line: 450, column: 30, scope: !9891, inlinedAt: !9948)
!10667 = !DILocation(line: 450, column: 36, scope: !9891, inlinedAt: !9948)
!10668 = !DILocation(line: 450, column: 8, scope: !9891, inlinedAt: !9948)
!10669 = !DILocation(line: 450, column: 6, scope: !9891, inlinedAt: !9948)
!10670 = !DILocation(line: 451, column: 9, scope: !9891, inlinedAt: !9948)
!10671 = !DILocation(line: 552, column: 3, scope: !9896, inlinedAt: !9949)
!10672 = !DILocation(line: 557, column: 19, scope: !9898, inlinedAt: !9949)
!10673 = !DILocation(line: 557, column: 25, scope: !9898, inlinedAt: !9949)
!10674 = !DILocation(line: 557, column: 9, scope: !9898, inlinedAt: !9949)
!10675 = !DILocation(line: 557, column: 2, scope: !9898, inlinedAt: !9949)
!10676 = !DILocation(line: 558, column: 1, scope: !9898, inlinedAt: !9949)
!10677 = !DILocation(line: 5737, column: 3, scope: !9902)
!10678 = !DILocation(line: 5737, column: 8, scope: !9902)
!10679 = !DILocation(line: 5737, column: 17, scope: !9902)
!10680 = !DILocation(line: 5738, column: 27, scope: !9902)
!10681 = !DILocation(line: 5738, column: 32, scope: !9902)
!10682 = !DILocation(line: 540, column: 27, scope: !9897, inlinedAt: !9901)
!10683 = !DILocation(line: 540, column: 6, scope: !9897, inlinedAt: !9901)
!10684 = !DILocation(line: 540, column: 6, scope: !9898, inlinedAt: !9901)
!10685 = !DILocation(line: 544, column: 7, scope: !9930, inlinedAt: !9901)
!10686 = !DILocation(line: 544, column: 12, scope: !9930, inlinedAt: !9901)
!10687 = !DILocation(line: 544, column: 7, scope: !9896, inlinedAt: !9901)
!10688 = !DILocation(line: 545, column: 25, scope: !9930, inlinedAt: !9901)
!10689 = !DILocation(line: 545, column: 31, scope: !9930, inlinedAt: !9901)
!10690 = !DILocation(line: 480, column: 33, scope: !9928, inlinedAt: !9929)
!10691 = !DILocation(line: 480, column: 23, scope: !9928, inlinedAt: !9929)
!10692 = !DILocation(line: 481, column: 29, scope: !9928, inlinedAt: !9929)
!10693 = !DILocation(line: 481, column: 35, scope: !9928, inlinedAt: !9929)
!10694 = !DILocation(line: 481, column: 42, scope: !9928, inlinedAt: !9929)
!10695 = !DILocation(line: 474, column: 23, scope: !9923, inlinedAt: !9927)
!10696 = !DILocation(line: 474, column: 29, scope: !9923, inlinedAt: !9927)
!10697 = !DILocation(line: 474, column: 36, scope: !9923, inlinedAt: !9927)
!10698 = !DILocation(line: 474, column: 9, scope: !9923, inlinedAt: !9927)
!10699 = !DILocation(line: 545, column: 4, scope: !9930, inlinedAt: !9901)
!10700 = !DILocation(line: 547, column: 25, scope: !9896, inlinedAt: !9901)
!10701 = !DILocation(line: 348, column: 7, scope: !10052, inlinedAt: !9921)
!10702 = !DILocation(line: 348, column: 6, scope: !9917, inlinedAt: !9921)
!10703 = !DILocation(line: 349, column: 3, scope: !10052, inlinedAt: !9921)
!10704 = !DILocation(line: 351, column: 6, scope: !10056, inlinedAt: !9921)
!10705 = !DILocation(line: 351, column: 11, scope: !10056, inlinedAt: !9921)
!10706 = !DILocation(line: 351, column: 6, scope: !9917, inlinedAt: !9921)
!10707 = !DILocation(line: 352, column: 3, scope: !10056, inlinedAt: !9921)
!10708 = !DILocation(line: 354, column: 32, scope: !10061, inlinedAt: !9921)
!10709 = !DILocation(line: 354, column: 37, scope: !10061, inlinedAt: !9921)
!10710 = !DILocation(line: 354, column: 42, scope: !10061, inlinedAt: !9921)
!10711 = !DILocation(line: 354, column: 45, scope: !10061, inlinedAt: !9921)
!10712 = !DILocation(line: 354, column: 50, scope: !10061, inlinedAt: !9921)
!10713 = !DILocation(line: 354, column: 6, scope: !9917, inlinedAt: !9921)
!10714 = !DILocation(line: 355, column: 3, scope: !10061, inlinedAt: !9921)
!10715 = !DILocation(line: 356, column: 32, scope: !10069, inlinedAt: !9921)
!10716 = !DILocation(line: 356, column: 37, scope: !10069, inlinedAt: !9921)
!10717 = !DILocation(line: 356, column: 43, scope: !10069, inlinedAt: !9921)
!10718 = !DILocation(line: 356, column: 46, scope: !10069, inlinedAt: !9921)
!10719 = !DILocation(line: 356, column: 51, scope: !10069, inlinedAt: !9921)
!10720 = !DILocation(line: 356, column: 6, scope: !9917, inlinedAt: !9921)
!10721 = !DILocation(line: 357, column: 3, scope: !10069, inlinedAt: !9921)
!10722 = !DILocation(line: 358, column: 6, scope: !10077, inlinedAt: !9921)
!10723 = !DILocation(line: 358, column: 11, scope: !10077, inlinedAt: !9921)
!10724 = !DILocation(line: 358, column: 6, scope: !9917, inlinedAt: !9921)
!10725 = !DILocation(line: 358, column: 26, scope: !10077, inlinedAt: !9921)
!10726 = !DILocation(line: 359, column: 6, scope: !10082, inlinedAt: !9921)
!10727 = !DILocation(line: 359, column: 11, scope: !10082, inlinedAt: !9921)
!10728 = !DILocation(line: 359, column: 6, scope: !9917, inlinedAt: !9921)
!10729 = !DILocation(line: 359, column: 26, scope: !10082, inlinedAt: !9921)
!10730 = !DILocation(line: 360, column: 6, scope: !10087, inlinedAt: !9921)
!10731 = !DILocation(line: 360, column: 11, scope: !10087, inlinedAt: !9921)
!10732 = !DILocation(line: 360, column: 6, scope: !9917, inlinedAt: !9921)
!10733 = !DILocation(line: 360, column: 26, scope: !10087, inlinedAt: !9921)
!10734 = !DILocation(line: 361, column: 6, scope: !10092, inlinedAt: !9921)
!10735 = !DILocation(line: 361, column: 11, scope: !10092, inlinedAt: !9921)
!10736 = !DILocation(line: 361, column: 6, scope: !9917, inlinedAt: !9921)
!10737 = !DILocation(line: 361, column: 26, scope: !10092, inlinedAt: !9921)
!10738 = !DILocation(line: 362, column: 6, scope: !10097, inlinedAt: !9921)
!10739 = !DILocation(line: 362, column: 11, scope: !10097, inlinedAt: !9921)
!10740 = !DILocation(line: 362, column: 6, scope: !9917, inlinedAt: !9921)
!10741 = !DILocation(line: 362, column: 26, scope: !10097, inlinedAt: !9921)
!10742 = !DILocation(line: 363, column: 6, scope: !10102, inlinedAt: !9921)
!10743 = !DILocation(line: 363, column: 11, scope: !10102, inlinedAt: !9921)
!10744 = !DILocation(line: 363, column: 6, scope: !9917, inlinedAt: !9921)
!10745 = !DILocation(line: 363, column: 26, scope: !10102, inlinedAt: !9921)
!10746 = !DILocation(line: 364, column: 6, scope: !10107, inlinedAt: !9921)
!10747 = !DILocation(line: 364, column: 11, scope: !10107, inlinedAt: !9921)
!10748 = !DILocation(line: 364, column: 6, scope: !9917, inlinedAt: !9921)
!10749 = !DILocation(line: 364, column: 26, scope: !10107, inlinedAt: !9921)
!10750 = !DILocation(line: 365, column: 6, scope: !10112, inlinedAt: !9921)
!10751 = !DILocation(line: 365, column: 11, scope: !10112, inlinedAt: !9921)
!10752 = !DILocation(line: 365, column: 6, scope: !9917, inlinedAt: !9921)
!10753 = !DILocation(line: 365, column: 26, scope: !10112, inlinedAt: !9921)
!10754 = !DILocation(line: 366, column: 6, scope: !10117, inlinedAt: !9921)
!10755 = !DILocation(line: 366, column: 11, scope: !10117, inlinedAt: !9921)
!10756 = !DILocation(line: 366, column: 6, scope: !9917, inlinedAt: !9921)
!10757 = !DILocation(line: 366, column: 26, scope: !10117, inlinedAt: !9921)
!10758 = !DILocation(line: 367, column: 6, scope: !10122, inlinedAt: !9921)
!10759 = !DILocation(line: 367, column: 11, scope: !10122, inlinedAt: !9921)
!10760 = !DILocation(line: 367, column: 6, scope: !9917, inlinedAt: !9921)
!10761 = !DILocation(line: 367, column: 26, scope: !10122, inlinedAt: !9921)
!10762 = !DILocation(line: 368, column: 6, scope: !10127, inlinedAt: !9921)
!10763 = !DILocation(line: 368, column: 11, scope: !10127, inlinedAt: !9921)
!10764 = !DILocation(line: 368, column: 6, scope: !9917, inlinedAt: !9921)
!10765 = !DILocation(line: 368, column: 26, scope: !10127, inlinedAt: !9921)
!10766 = !DILocation(line: 369, column: 6, scope: !10132, inlinedAt: !9921)
!10767 = !DILocation(line: 369, column: 11, scope: !10132, inlinedAt: !9921)
!10768 = !DILocation(line: 369, column: 6, scope: !9917, inlinedAt: !9921)
!10769 = !DILocation(line: 369, column: 26, scope: !10132, inlinedAt: !9921)
!10770 = !DILocation(line: 370, column: 6, scope: !10137, inlinedAt: !9921)
!10771 = !DILocation(line: 370, column: 11, scope: !10137, inlinedAt: !9921)
!10772 = !DILocation(line: 370, column: 6, scope: !9917, inlinedAt: !9921)
!10773 = !DILocation(line: 370, column: 26, scope: !10137, inlinedAt: !9921)
!10774 = !DILocation(line: 371, column: 6, scope: !10142, inlinedAt: !9921)
!10775 = !DILocation(line: 371, column: 11, scope: !10142, inlinedAt: !9921)
!10776 = !DILocation(line: 371, column: 6, scope: !9917, inlinedAt: !9921)
!10777 = !DILocation(line: 371, column: 26, scope: !10142, inlinedAt: !9921)
!10778 = !DILocation(line: 372, column: 6, scope: !10147, inlinedAt: !9921)
!10779 = !DILocation(line: 372, column: 11, scope: !10147, inlinedAt: !9921)
!10780 = !DILocation(line: 372, column: 6, scope: !9917, inlinedAt: !9921)
!10781 = !DILocation(line: 372, column: 26, scope: !10147, inlinedAt: !9921)
!10782 = !DILocation(line: 373, column: 6, scope: !10152, inlinedAt: !9921)
!10783 = !DILocation(line: 373, column: 11, scope: !10152, inlinedAt: !9921)
!10784 = !DILocation(line: 373, column: 6, scope: !9917, inlinedAt: !9921)
!10785 = !DILocation(line: 373, column: 26, scope: !10152, inlinedAt: !9921)
!10786 = !DILocation(line: 374, column: 6, scope: !10157, inlinedAt: !9921)
!10787 = !DILocation(line: 374, column: 11, scope: !10157, inlinedAt: !9921)
!10788 = !DILocation(line: 374, column: 6, scope: !9917, inlinedAt: !9921)
!10789 = !DILocation(line: 374, column: 26, scope: !10157, inlinedAt: !9921)
!10790 = !DILocation(line: 375, column: 6, scope: !10162, inlinedAt: !9921)
!10791 = !DILocation(line: 375, column: 11, scope: !10162, inlinedAt: !9921)
!10792 = !DILocation(line: 375, column: 6, scope: !9917, inlinedAt: !9921)
!10793 = !DILocation(line: 375, column: 27, scope: !10162, inlinedAt: !9921)
!10794 = !DILocation(line: 376, column: 6, scope: !10167, inlinedAt: !9921)
!10795 = !DILocation(line: 376, column: 11, scope: !10167, inlinedAt: !9921)
!10796 = !DILocation(line: 376, column: 6, scope: !9917, inlinedAt: !9921)
!10797 = !DILocation(line: 376, column: 32, scope: !10167, inlinedAt: !9921)
!10798 = !DILocation(line: 377, column: 6, scope: !10172, inlinedAt: !9921)
!10799 = !DILocation(line: 377, column: 11, scope: !10172, inlinedAt: !9921)
!10800 = !DILocation(line: 377, column: 6, scope: !9917, inlinedAt: !9921)
!10801 = !DILocation(line: 377, column: 32, scope: !10172, inlinedAt: !9921)
!10802 = !DILocation(line: 378, column: 6, scope: !10177, inlinedAt: !9921)
!10803 = !DILocation(line: 378, column: 11, scope: !10177, inlinedAt: !9921)
!10804 = !DILocation(line: 378, column: 6, scope: !9917, inlinedAt: !9921)
!10805 = !DILocation(line: 378, column: 32, scope: !10177, inlinedAt: !9921)
!10806 = !DILocation(line: 379, column: 6, scope: !10182, inlinedAt: !9921)
!10807 = !DILocation(line: 379, column: 11, scope: !10182, inlinedAt: !9921)
!10808 = !DILocation(line: 379, column: 6, scope: !9917, inlinedAt: !9921)
!10809 = !DILocation(line: 379, column: 33, scope: !10182, inlinedAt: !9921)
!10810 = !DILocation(line: 380, column: 6, scope: !10187, inlinedAt: !9921)
!10811 = !DILocation(line: 380, column: 11, scope: !10187, inlinedAt: !9921)
!10812 = !DILocation(line: 380, column: 6, scope: !9917, inlinedAt: !9921)
!10813 = !DILocation(line: 380, column: 33, scope: !10187, inlinedAt: !9921)
!10814 = !DILocation(line: 381, column: 6, scope: !10192, inlinedAt: !9921)
!10815 = !DILocation(line: 381, column: 11, scope: !10192, inlinedAt: !9921)
!10816 = !DILocation(line: 381, column: 6, scope: !9917, inlinedAt: !9921)
!10817 = !DILocation(line: 381, column: 33, scope: !10192, inlinedAt: !9921)
!10818 = !DILocation(line: 382, column: 2, scope: !10197, inlinedAt: !9921)
!10819 = !DILocation(line: 382, column: 2, scope: !10201, inlinedAt: !9921)
!10820 = !DILocation(line: 382, column: 2, scope: !10202, inlinedAt: !9921)
!10821 = !DILocation(line: 386, column: 1, scope: !9917, inlinedAt: !9921)
!10822 = !DILocation(line: 547, column: 9, scope: !9896, inlinedAt: !9901)
!10823 = !DILocation(line: 549, column: 8, scope: !10208, inlinedAt: !9901)
!10824 = !DILocation(line: 549, column: 7, scope: !9896, inlinedAt: !9901)
!10825 = !DILocation(line: 550, column: 4, scope: !10208, inlinedAt: !9901)
!10826 = !DILocation(line: 553, column: 33, scope: !9896, inlinedAt: !9901)
!10827 = !DILocation(line: 325, column: 6, scope: !10213, inlinedAt: !9915)
!10828 = !DILocation(line: 325, column: 6, scope: !9911, inlinedAt: !9915)
!10829 = !DILocation(line: 326, column: 3, scope: !10213, inlinedAt: !9915)
!10830 = !DILocation(line: 332, column: 9, scope: !9911, inlinedAt: !9915)
!10831 = !DILocation(line: 332, column: 15, scope: !9911, inlinedAt: !9915)
!10832 = !DILocation(line: 332, column: 2, scope: !9911, inlinedAt: !9915)
!10833 = !DILocation(line: 336, column: 1, scope: !9911, inlinedAt: !9915)
!10834 = !DILocation(line: 553, column: 5, scope: !9896, inlinedAt: !9901)
!10835 = !DILocation(line: 553, column: 41, scope: !9896, inlinedAt: !9901)
!10836 = !DILocation(line: 554, column: 5, scope: !9896, inlinedAt: !9901)
!10837 = !DILocation(line: 554, column: 12, scope: !9896, inlinedAt: !9901)
!10838 = !DILocation(line: 448, column: 31, scope: !9891, inlinedAt: !9895)
!10839 = !DILocation(line: 448, column: 34, scope: !9891, inlinedAt: !9895)
!10840 = !DILocation(line: 448, column: 14, scope: !9891, inlinedAt: !9895)
!10841 = !DILocation(line: 450, column: 22, scope: !9891, inlinedAt: !9895)
!10842 = !DILocation(line: 450, column: 25, scope: !9891, inlinedAt: !9895)
!10843 = !DILocation(line: 450, column: 30, scope: !9891, inlinedAt: !9895)
!10844 = !DILocation(line: 450, column: 36, scope: !9891, inlinedAt: !9895)
!10845 = !DILocation(line: 450, column: 8, scope: !9891, inlinedAt: !9895)
!10846 = !DILocation(line: 450, column: 6, scope: !9891, inlinedAt: !9895)
!10847 = !DILocation(line: 451, column: 9, scope: !9891, inlinedAt: !9895)
!10848 = !DILocation(line: 552, column: 3, scope: !9896, inlinedAt: !9901)
!10849 = !DILocation(line: 557, column: 19, scope: !9898, inlinedAt: !9901)
!10850 = !DILocation(line: 557, column: 25, scope: !9898, inlinedAt: !9901)
!10851 = !DILocation(line: 557, column: 9, scope: !9898, inlinedAt: !9901)
!10852 = !DILocation(line: 557, column: 2, scope: !9898, inlinedAt: !9901)
!10853 = !DILocation(line: 558, column: 1, scope: !9898, inlinedAt: !9901)
!10854 = !DILocation(line: 5738, column: 3, scope: !9902)
!10855 = !DILocation(line: 5738, column: 8, scope: !9902)
!10856 = !DILocation(line: 5738, column: 17, scope: !9902)
!10857 = !DILocation(line: 5739, column: 8, scope: !10858)
!10858 = distinct !DILexicalBlock(scope: !9902, file: !3, line: 5739, column: 7)
!10859 = !DILocation(line: 5739, column: 13, scope: !10858)
!10860 = !DILocation(line: 5739, column: 22, scope: !10858)
!10861 = !DILocation(line: 5739, column: 26, scope: !10858)
!10862 = !DILocation(line: 5739, column: 31, scope: !10858)
!10863 = !DILocation(line: 5739, column: 7, scope: !9902)
!10864 = !DILocation(line: 5740, column: 8, scope: !10865)
!10865 = distinct !DILexicalBlock(scope: !10858, file: !3, line: 5739, column: 41)
!10866 = !DILocation(line: 5741, column: 4, scope: !10865)
!10867 = !DILocation(line: 5743, column: 2, scope: !9902)
!10868 = !DILocation(line: 5746, column: 7, scope: !10869)
!10869 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5746, column: 6)
!10870 = !DILocation(line: 5746, column: 12, scope: !10869)
!10871 = !DILocation(line: 5746, column: 6, scope: !9889)
!10872 = !DILocation(line: 5747, column: 23, scope: !10869)
!10873 = !DILocation(line: 5747, column: 28, scope: !10869)
!10874 = !DILocation(line: 5747, column: 3, scope: !10869)
!10875 = !DILocation(line: 5747, column: 8, scope: !10869)
!10876 = !DILocation(line: 5747, column: 21, scope: !10869)
!10877 = !DILocation(line: 5748, column: 7, scope: !10878)
!10878 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5748, column: 6)
!10879 = !DILocation(line: 5748, column: 12, scope: !10878)
!10880 = !DILocation(line: 5748, column: 6, scope: !9889)
!10881 = !DILocation(line: 5749, column: 24, scope: !10878)
!10882 = !DILocation(line: 5749, column: 29, scope: !10878)
!10883 = !DILocation(line: 5749, column: 3, scope: !10878)
!10884 = !DILocation(line: 5749, column: 8, scope: !10878)
!10885 = !DILocation(line: 5749, column: 22, scope: !10878)
!10886 = !DILocation(line: 5752, column: 22, scope: !9889)
!10887 = !DILocation(line: 5752, column: 27, scope: !9889)
!10888 = !DILocation(line: 5752, column: 2, scope: !9889)
!10889 = !DILocation(line: 5752, column: 7, scope: !9889)
!10890 = !DILocation(line: 5752, column: 20, scope: !9889)
!10891 = !DILocation(line: 5753, column: 23, scope: !9889)
!10892 = !DILocation(line: 5753, column: 28, scope: !9889)
!10893 = !DILocation(line: 5753, column: 2, scope: !9889)
!10894 = !DILocation(line: 5753, column: 7, scope: !9889)
!10895 = !DILocation(line: 5753, column: 21, scope: !9889)
!10896 = !DILocation(line: 5759, column: 15, scope: !9889)
!10897 = !DILocation(line: 5759, column: 20, scope: !9889)
!10898 = !DILocation(line: 5759, column: 32, scope: !9889)
!10899 = !DILocation(line: 5759, column: 37, scope: !9889)
!10900 = !DILocation(line: 5759, column: 30, scope: !9889)
!10901 = !DILocation(line: 5759, column: 2, scope: !9889)
!10902 = !DILocation(line: 5759, column: 7, scope: !9889)
!10903 = !DILocation(line: 5759, column: 13, scope: !9889)
!10904 = !DILocation(line: 5760, column: 6, scope: !10905)
!10905 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5760, column: 6)
!10906 = !DILocation(line: 5760, column: 11, scope: !10905)
!10907 = !DILocation(line: 5760, column: 19, scope: !10905)
!10908 = !DILocation(line: 5760, column: 24, scope: !10905)
!10909 = !DILocation(line: 5760, column: 17, scope: !10905)
!10910 = !DILocation(line: 5760, column: 32, scope: !10905)
!10911 = !DILocation(line: 5760, column: 37, scope: !10905)
!10912 = !DILocation(line: 5760, column: 29, scope: !10905)
!10913 = !DILocation(line: 5760, column: 6, scope: !9889)
!10914 = !DILocalVariable(name: "__ret_warn_on", scope: !10915, file: !3, line: 5761, type: !240)
!10915 = distinct !DILexicalBlock(scope: !10916, file: !3, line: 5761, column: 3)
!10916 = distinct !DILexicalBlock(scope: !10905, file: !3, line: 5760, column: 48)
!10917 = !DILocation(line: 5761, column: 3, scope: !10915)
!10918 = !DILocation(line: 5761, column: 3, scope: !10919)
!10919 = distinct !DILexicalBlock(scope: !10915, file: !3, line: 5761, column: 3)
!10920 = !DILocation(line: 5761, column: 3, scope: !10921)
!10921 = distinct !DILexicalBlock(scope: !10919, file: !3, line: 5761, column: 3)
!10922 = !DILocation(line: 5761, column: 3, scope: !10923)
!10923 = distinct !DILexicalBlock(scope: !10921, file: !3, line: 5761, column: 3)
!10924 = !DILocation(line: 5761, column: 3, scope: !10925)
!10925 = distinct !DILexicalBlock(scope: !10921, file: !3, line: 5761, column: 3)
!10926 = !DILocation(line: 5761, column: 3, scope: !10927)
!10927 = distinct !DILexicalBlock(scope: !10925, file: !3, line: 5761, column: 3)
!10928 = !DILocation(line: 5761, column: 3, scope: !10929)
!10929 = distinct !DILexicalBlock(scope: !10925, file: !3, line: 5761, column: 3)
!10930 = !{i32 -2141491470, i32 -2141491441, i32 -2141491395, i32 -2141491337, i32 -2141491283, i32 -2141491229, i32 -2141491174, i32 -2141491143}
!10931 = !DILocation(line: 5761, column: 3, scope: !10932)
!10932 = distinct !DILexicalBlock(scope: !10925, file: !3, line: 5761, column: 3)
!10933 = !{i32 -2141490717, i32 -2141490710, i32 -2141490658, i32 -2141490627, i32 -2141490597}
!10934 = !DILocation(line: 5761, column: 3, scope: !10935)
!10935 = distinct !DILexicalBlock(scope: !10925, file: !3, line: 5761, column: 3)
!10936 = !DILocation(line: 5761, column: 3, scope: !10937)
!10937 = distinct !DILexicalBlock(scope: !10921, file: !3, line: 5761, column: 3)
!10938 = !DILocation(line: 5762, column: 7, scope: !10916)
!10939 = !DILocation(line: 5763, column: 3, scope: !10916)
!10940 = !DILocation(line: 5766, column: 15, scope: !9889)
!10941 = !DILocation(line: 5766, column: 20, scope: !9889)
!10942 = !DILocation(line: 5766, column: 28, scope: !9889)
!10943 = !DILocation(line: 5766, column: 33, scope: !9889)
!10944 = !DILocation(line: 5766, column: 26, scope: !9889)
!10945 = !DILocation(line: 5766, column: 2, scope: !9889)
!10946 = !DILocation(line: 5766, column: 7, scope: !9889)
!10947 = !DILocation(line: 5766, column: 13, scope: !9889)
!10948 = !DILocation(line: 5767, column: 29, scope: !9889)
!10949 = !DILocation(line: 5767, column: 34, scope: !9889)
!10950 = !DILocation(line: 5767, column: 2, scope: !9889)
!10951 = !DILocation(line: 5767, column: 8, scope: !9889)
!10952 = !DILocation(line: 5767, column: 13, scope: !9889)
!10953 = !DILocation(line: 5767, column: 17, scope: !9889)
!10954 = !DILocation(line: 5767, column: 21, scope: !9889)
!10955 = !DILocation(line: 5767, column: 27, scope: !9889)
!10956 = !DILocation(line: 5769, column: 6, scope: !10957)
!10957 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5769, column: 6)
!10958 = !DILocation(line: 5769, column: 11, scope: !10957)
!10959 = !DILocation(line: 5769, column: 19, scope: !10957)
!10960 = !DILocation(line: 5769, column: 24, scope: !10957)
!10961 = !DILocation(line: 5769, column: 17, scope: !10957)
!10962 = !DILocation(line: 5769, column: 6, scope: !9889)
!10963 = !DILocalVariable(name: "__ret_warn_on", scope: !10964, file: !3, line: 5770, type: !240)
!10964 = distinct !DILexicalBlock(scope: !10965, file: !3, line: 5770, column: 3)
!10965 = distinct !DILexicalBlock(scope: !10957, file: !3, line: 5769, column: 33)
!10966 = !DILocation(line: 5770, column: 3, scope: !10964)
!10967 = !DILocation(line: 5770, column: 3, scope: !10968)
!10968 = distinct !DILexicalBlock(scope: !10964, file: !3, line: 5770, column: 3)
!10969 = !DILocation(line: 5770, column: 3, scope: !10970)
!10970 = distinct !DILexicalBlock(scope: !10968, file: !3, line: 5770, column: 3)
!10971 = !DILocation(line: 5770, column: 3, scope: !10972)
!10972 = distinct !DILexicalBlock(scope: !10970, file: !3, line: 5770, column: 3)
!10973 = !DILocation(line: 5770, column: 3, scope: !10974)
!10974 = distinct !DILexicalBlock(scope: !10970, file: !3, line: 5770, column: 3)
!10975 = !DILocation(line: 5770, column: 3, scope: !10976)
!10976 = distinct !DILexicalBlock(scope: !10974, file: !3, line: 5770, column: 3)
!10977 = !DILocation(line: 5770, column: 3, scope: !10978)
!10978 = distinct !DILexicalBlock(scope: !10974, file: !3, line: 5770, column: 3)
!10979 = !{i32 -2141489717, i32 -2141489688, i32 -2141489642, i32 -2141489584, i32 -2141489530, i32 -2141489476, i32 -2141489421, i32 -2141489390}
!10980 = !DILocation(line: 5770, column: 3, scope: !10981)
!10981 = distinct !DILexicalBlock(scope: !10974, file: !3, line: 5770, column: 3)
!10982 = !{i32 -2141484903, i32 -2141484896, i32 -2141484844, i32 -2141484813, i32 -2141484783}
!10983 = !DILocation(line: 5770, column: 3, scope: !10984)
!10984 = distinct !DILexicalBlock(scope: !10974, file: !3, line: 5770, column: 3)
!10985 = !DILocation(line: 5770, column: 3, scope: !10986)
!10986 = distinct !DILexicalBlock(scope: !10970, file: !3, line: 5770, column: 3)
!10987 = !DILocation(line: 5771, column: 7, scope: !10965)
!10988 = !DILocation(line: 5772, column: 3, scope: !10965)
!10989 = !DILocation(line: 5779, column: 38, scope: !9889)
!10990 = !DILocation(line: 5779, column: 8, scope: !9889)
!10991 = !DILocation(line: 5779, column: 6, scope: !9889)
!10992 = !DILocation(line: 5780, column: 6, scope: !10993)
!10993 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5780, column: 6)
!10994 = !DILocation(line: 5780, column: 10, scope: !10993)
!10995 = !DILocation(line: 5780, column: 6, scope: !9889)
!10996 = !DILocation(line: 5781, column: 7, scope: !10993)
!10997 = !DILocation(line: 5781, column: 3, scope: !10993)
!10998 = !DILocation(line: 5783, column: 18, scope: !9889)
!10999 = !DILocation(line: 5783, column: 2, scope: !9889)
!11000 = !DILocation(line: 5783, column: 7, scope: !9889)
!11001 = !DILocation(line: 5783, column: 16, scope: !9889)
!11002 = !DILocation(line: 5786, column: 34, scope: !11003)
!11003 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5786, column: 6)
!11004 = !DILocation(line: 5786, column: 40, scope: !11003)
!11005 = !DILocation(line: 5786, column: 7, scope: !11003)
!11006 = !DILocation(line: 5786, column: 6, scope: !9889)
!11007 = !DILocation(line: 5787, column: 3, scope: !11003)
!11008 = !DILocation(line: 5793, column: 8, scope: !11009)
!11009 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5793, column: 6)
!11010 = !DILocation(line: 5793, column: 14, scope: !11009)
!11011 = !DILocation(line: 5793, column: 22, scope: !11009)
!11012 = !DILocation(line: 5793, column: 47, scope: !11009)
!11013 = !DILocation(line: 5793, column: 62, scope: !11009)
!11014 = !DILocation(line: 5793, column: 50, scope: !11009)
!11015 = !DILocation(line: 5793, column: 6, scope: !9889)
!11016 = !DILocation(line: 5794, column: 11, scope: !11017)
!11017 = distinct !DILexicalBlock(scope: !11009, file: !3, line: 5793, column: 69)
!11018 = !DILocation(line: 5794, column: 16, scope: !11017)
!11019 = !DILocation(line: 5794, column: 3, scope: !11017)
!11020 = !DILocation(line: 5796, column: 4, scope: !11021)
!11021 = distinct !DILexicalBlock(scope: !11017, file: !3, line: 5794, column: 23)
!11022 = !DILocation(line: 5796, column: 9, scope: !11021)
!11023 = !DILocation(line: 5796, column: 21, scope: !11021)
!11024 = !DILocation(line: 5797, column: 4, scope: !11021)
!11025 = !DILocation(line: 5801, column: 4, scope: !11021)
!11026 = !DILocation(line: 5801, column: 9, scope: !11021)
!11027 = !DILocation(line: 5801, column: 21, scope: !11021)
!11028 = !DILocation(line: 5802, column: 4, scope: !11021)
!11029 = !DILocation(line: 5804, column: 2, scope: !11017)
!11030 = !DILocation(line: 5805, column: 22, scope: !9889)
!11031 = !DILocation(line: 5805, column: 27, scope: !9889)
!11032 = !DILocation(line: 5805, column: 40, scope: !9889)
!11033 = !DILocation(line: 5805, column: 45, scope: !9889)
!11034 = !DILocation(line: 5805, column: 37, scope: !9889)
!11035 = !DILocation(line: 5805, column: 2, scope: !9889)
!11036 = !DILocation(line: 5805, column: 8, scope: !9889)
!11037 = !DILocation(line: 5805, column: 20, scope: !9889)
!11038 = !DILocation(line: 5808, column: 2, scope: !9889)
!11039 = !DILocation(line: 5808, column: 8, scope: !9889)
!11040 = !DILocation(line: 5808, column: 18, scope: !9889)
!11041 = !DILocation(line: 5808, column: 23, scope: !9889)
!11042 = !DILocation(line: 5811, column: 10, scope: !9889)
!11043 = !DILocation(line: 5811, column: 15, scope: !9889)
!11044 = !DILocation(line: 5811, column: 2, scope: !9889)
!11045 = !DILocation(line: 5813, column: 7, scope: !11046)
!11046 = distinct !DILexicalBlock(scope: !11047, file: !3, line: 5813, column: 7)
!11047 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5811, column: 28)
!11048 = !DILocation(line: 5813, column: 13, scope: !11046)
!11049 = !DILocation(line: 5813, column: 24, scope: !11046)
!11050 = !DILocation(line: 5813, column: 7, scope: !11047)
!11051 = !DILocation(line: 5814, column: 4, scope: !11046)
!11052 = !DILocation(line: 5814, column: 10, scope: !11046)
!11053 = !DILocation(line: 5814, column: 18, scope: !11046)
!11054 = !DILocation(line: 5815, column: 3, scope: !11047)
!11055 = !DILocation(line: 5818, column: 3, scope: !11047)
!11056 = !DILocation(line: 5821, column: 22, scope: !9889)
!11057 = !DILocation(line: 5821, column: 28, scope: !9889)
!11058 = !DILocation(line: 5821, column: 48, scope: !9889)
!11059 = !DILocation(line: 5821, column: 53, scope: !9889)
!11060 = !DILocation(line: 5821, column: 8, scope: !9889)
!11061 = !DILocation(line: 5821, column: 6, scope: !9889)
!11062 = !DILocation(line: 5822, column: 6, scope: !11063)
!11063 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5822, column: 6)
!11064 = !DILocation(line: 5822, column: 6, scope: !9889)
!11065 = !DILocation(line: 5823, column: 3, scope: !11063)
!11066 = !DILocation(line: 5826, column: 6, scope: !11067)
!11067 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5826, column: 6)
!11068 = !DILocation(line: 5826, column: 12, scope: !11067)
!11069 = !DILocation(line: 5826, column: 20, scope: !11067)
!11070 = !DILocation(line: 5826, column: 6, scope: !9889)
!11071 = !DILocation(line: 5827, column: 3, scope: !11067)
!11072 = !DILocation(line: 5827, column: 8, scope: !11067)
!11073 = !DILocation(line: 5827, column: 14, scope: !11067)
!11074 = !DILocation(line: 5830, column: 2, scope: !9889)
!11075 = !DILocation(line: 5830, column: 7, scope: !9889)
!11076 = !DILocation(line: 5830, column: 14, scope: !9889)
!11077 = !DILocation(line: 5831, column: 2, scope: !9889)
!11078 = !DILocation(line: 5831, column: 7, scope: !9889)
!11079 = !DILocation(line: 5831, column: 14, scope: !9889)
!11080 = !DILocation(line: 5832, column: 2, scope: !9889)
!11081 = !DILocation(line: 5832, column: 7, scope: !9889)
!11082 = !DILocation(line: 5832, column: 16, scope: !9889)
!11083 = !DILocation(line: 5833, column: 2, scope: !9889)
!11084 = !DILocation(line: 5833, column: 7, scope: !9889)
!11085 = !DILocation(line: 5833, column: 20, scope: !9889)
!11086 = !DILocation(line: 5834, column: 2, scope: !9889)
!11087 = !DILocation(line: 5834, column: 7, scope: !9889)
!11088 = !DILocation(line: 5834, column: 17, scope: !9889)
!11089 = !DILocation(line: 5835, column: 2, scope: !9889)
!11090 = !DILocation(line: 5835, column: 7, scope: !9889)
!11091 = !DILocation(line: 5835, column: 18, scope: !9889)
!11092 = !DILocation(line: 5836, column: 2, scope: !9889)
!11093 = !DILocation(line: 5836, column: 7, scope: !9889)
!11094 = !DILocation(line: 5836, column: 13, scope: !9889)
!11095 = !DILocation(line: 5837, column: 2, scope: !9889)
!11096 = !DILocation(line: 5837, column: 7, scope: !9889)
!11097 = !DILocation(line: 5837, column: 13, scope: !9889)
!11098 = !DILocation(line: 5838, column: 2, scope: !9889)
!11099 = !DILocation(line: 5838, column: 7, scope: !9889)
!11100 = !DILocation(line: 5838, column: 15, scope: !9889)
!11101 = !DILocation(line: 5839, column: 2, scope: !9889)
!11102 = !DILocation(line: 5839, column: 7, scope: !9889)
!11103 = !DILocation(line: 5839, column: 16, scope: !9889)
!11104 = !DILocation(line: 5840, column: 2, scope: !9889)
!11105 = !DILocation(line: 5840, column: 7, scope: !9889)
!11106 = !DILocation(line: 5840, column: 15, scope: !9889)
!11107 = !DILocation(line: 5841, column: 2, scope: !9889)
!11108 = !DILocation(line: 5841, column: 7, scope: !9889)
!11109 = !DILocation(line: 5841, column: 15, scope: !9889)
!11110 = !DILocation(line: 5842, column: 2, scope: !9889)
!11111 = !DILocation(line: 5842, column: 7, scope: !9889)
!11112 = !DILocation(line: 5842, column: 25, scope: !9889)
!11113 = !DILocation(line: 5843, column: 2, scope: !9889)
!11114 = !DILocation(line: 5843, column: 7, scope: !9889)
!11115 = !DILocation(line: 5843, column: 20, scope: !9889)
!11116 = !DILocation(line: 5844, column: 2, scope: !9889)
!11117 = !DILocation(line: 5844, column: 7, scope: !9889)
!11118 = !DILocation(line: 5844, column: 22, scope: !9889)
!11119 = !DILocation(line: 5845, column: 2, scope: !9889)
!11120 = !DILocation(line: 5845, column: 7, scope: !9889)
!11121 = !DILocation(line: 5845, column: 23, scope: !9889)
!11122 = !DILocation(line: 5852, column: 7, scope: !11123)
!11123 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5852, column: 6)
!11124 = !DILocation(line: 5852, column: 12, scope: !11123)
!11125 = !DILocation(line: 5852, column: 6, scope: !9889)
!11126 = !DILocation(line: 5853, column: 28, scope: !11123)
!11127 = !DILocation(line: 5853, column: 3, scope: !11123)
!11128 = !DILocation(line: 5853, column: 8, scope: !11123)
!11129 = !DILocation(line: 5853, column: 26, scope: !11123)
!11130 = !DILocation(line: 5856, column: 37, scope: !9889)
!11131 = !DILocation(line: 5856, column: 8, scope: !9889)
!11132 = !DILocation(line: 5856, column: 6, scope: !9889)
!11133 = !DILocation(line: 5857, column: 6, scope: !11134)
!11134 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5857, column: 6)
!11135 = !DILocation(line: 5857, column: 6, scope: !9889)
!11136 = !DILocation(line: 5858, column: 3, scope: !11134)
!11137 = !DILocation(line: 5861, column: 9, scope: !11138)
!11138 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5861, column: 2)
!11139 = !DILocation(line: 5861, column: 7, scope: !11138)
!11140 = !DILocation(line: 5861, column: 14, scope: !11141)
!11141 = distinct !DILexicalBlock(scope: !11138, file: !3, line: 5861, column: 2)
!11142 = !DILocation(line: 5861, column: 36, scope: !11141)
!11143 = !DILocation(line: 5861, column: 42, scope: !11141)
!11144 = !DILocation(line: 5861, column: 18, scope: !11141)
!11145 = !DILocation(line: 5861, column: 16, scope: !11141)
!11146 = !DILocation(line: 5861, column: 2, scope: !11138)
!11147 = !DILocation(line: 5862, column: 30, scope: !11148)
!11148 = distinct !DILexicalBlock(scope: !11141, file: !3, line: 5861, column: 54)
!11149 = !DILocation(line: 5862, column: 36, scope: !11148)
!11150 = !DILocation(line: 5862, column: 9, scope: !11148)
!11151 = !DILocation(line: 5862, column: 7, scope: !11148)
!11152 = !DILocation(line: 5863, column: 7, scope: !11153)
!11153 = distinct !DILexicalBlock(scope: !11148, file: !3, line: 5863, column: 7)
!11154 = !DILocation(line: 5863, column: 7, scope: !11148)
!11155 = !DILocation(line: 5864, column: 4, scope: !11153)
!11156 = !DILocation(line: 5865, column: 2, scope: !11148)
!11157 = !DILocation(line: 5861, column: 50, scope: !11141)
!11158 = !DILocation(line: 5861, column: 2, scope: !11141)
!11159 = distinct !{!11159, !11146, !11160}
!11160 = !DILocation(line: 5865, column: 2, scope: !11138)
!11161 = !DILocation(line: 5868, column: 6, scope: !11162)
!11162 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5868, column: 6)
!11163 = !DILocation(line: 5868, column: 12, scope: !11162)
!11164 = !DILocation(line: 5868, column: 20, scope: !11162)
!11165 = !DILocation(line: 5868, column: 6, scope: !9889)
!11166 = !DILocation(line: 5869, column: 3, scope: !11162)
!11167 = !DILocation(line: 5872, column: 24, scope: !9889)
!11168 = !DILocation(line: 5872, column: 8, scope: !9889)
!11169 = !DILocation(line: 5872, column: 6, scope: !9889)
!11170 = !DILocation(line: 5873, column: 6, scope: !11171)
!11171 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 5873, column: 6)
!11172 = !DILocation(line: 5873, column: 6, scope: !9889)
!11173 = !DILocation(line: 5874, column: 3, scope: !11171)
!11174 = !DILocation(line: 5876, column: 2, scope: !9889)
!11175 = !DILabel(scope: !9889, name: "err_free_interface_config", file: !3, line: 5878)
!11176 = !DILocation(line: 5878, column: 1, scope: !9889)
!11177 = !DILocation(line: 5879, column: 8, scope: !9889)
!11178 = !DILocation(line: 5879, column: 14, scope: !9889)
!11179 = !DILocation(line: 5879, column: 2, scope: !9889)
!11180 = !DILabel(scope: !9889, name: "err_nanddev_cleanup", file: !3, line: 5881)
!11181 = !DILocation(line: 5881, column: 1, scope: !9889)
!11182 = !DILocation(line: 5882, column: 19, scope: !9889)
!11183 = !DILocation(line: 5882, column: 25, scope: !9889)
!11184 = !DILocation(line: 5882, column: 2, scope: !9889)
!11185 = !DILabel(scope: !9889, name: "err_nand_manuf_cleanup", file: !3, line: 5884)
!11186 = !DILocation(line: 5884, column: 1, scope: !9889)
!11187 = !DILocation(line: 5885, column: 28, scope: !9889)
!11188 = !DILocation(line: 5885, column: 2, scope: !9889)
!11189 = !DILabel(scope: !9889, name: "err_free_buf", file: !3, line: 5887)
!11190 = !DILocation(line: 5887, column: 1, scope: !9889)
!11191 = !DILocation(line: 5888, column: 8, scope: !9889)
!11192 = !DILocation(line: 5888, column: 14, scope: !9889)
!11193 = !DILocation(line: 5888, column: 2, scope: !9889)
!11194 = !DILocation(line: 5889, column: 8, scope: !9889)
!11195 = !DILocation(line: 5889, column: 13, scope: !9889)
!11196 = !DILocation(line: 5889, column: 2, scope: !9889)
!11197 = !DILocation(line: 5890, column: 8, scope: !9889)
!11198 = !DILocation(line: 5890, column: 13, scope: !9889)
!11199 = !DILocation(line: 5890, column: 2, scope: !9889)
!11200 = !DILocation(line: 5892, column: 9, scope: !9889)
!11201 = !DILocation(line: 5892, column: 2, scope: !9889)
!11202 = !DILocation(line: 5893, column: 1, scope: !9889)
!11203 = distinct !DISubprogram(name: "nand_detach", scope: !3, file: !3, line: 5903, type: !4218, scopeLine: 5904, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11204 = !DILocalVariable(name: "chip", arg: 1, scope: !11203, file: !3, line: 5903, type: !4166)
!11205 = !DILocation(line: 5903, column: 43, scope: !11203)
!11206 = !DILocation(line: 5905, column: 6, scope: !11207)
!11207 = distinct !DILexicalBlock(scope: !11203, file: !3, line: 5905, column: 6)
!11208 = !DILocation(line: 5905, column: 12, scope: !11207)
!11209 = !DILocation(line: 5905, column: 24, scope: !11207)
!11210 = !DILocation(line: 5905, column: 28, scope: !11207)
!11211 = !DILocation(line: 5905, column: 31, scope: !11207)
!11212 = !DILocation(line: 5905, column: 37, scope: !11207)
!11213 = !DILocation(line: 5905, column: 49, scope: !11207)
!11214 = !DILocation(line: 5905, column: 54, scope: !11207)
!11215 = !DILocation(line: 5905, column: 6, scope: !11203)
!11216 = !DILocation(line: 5906, column: 3, scope: !11207)
!11217 = !DILocation(line: 5906, column: 9, scope: !11207)
!11218 = !DILocation(line: 5906, column: 21, scope: !11207)
!11219 = !DILocation(line: 5906, column: 26, scope: !11207)
!11220 = !DILocation(line: 5906, column: 38, scope: !11207)
!11221 = !DILocation(line: 5907, column: 1, scope: !11203)
!11222 = distinct !DISubprogram(name: "nand_scan_ident_cleanup", scope: !3, file: !3, line: 5136, type: !4218, scopeLine: 5137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11223 = !DILocalVariable(name: "chip", arg: 1, scope: !11222, file: !3, line: 5136, type: !4166)
!11224 = !DILocation(line: 5136, column: 55, scope: !11222)
!11225 = !DILocation(line: 5138, column: 8, scope: !11222)
!11226 = !DILocation(line: 5138, column: 14, scope: !11222)
!11227 = !DILocation(line: 5138, column: 25, scope: !11222)
!11228 = !DILocation(line: 5138, column: 2, scope: !11222)
!11229 = !DILocation(line: 5139, column: 8, scope: !11222)
!11230 = !DILocation(line: 5139, column: 14, scope: !11222)
!11231 = !DILocation(line: 5139, column: 25, scope: !11222)
!11232 = !DILocation(line: 5139, column: 2, scope: !11222)
!11233 = !DILocation(line: 5140, column: 1, scope: !11222)
!11234 = distinct !DISubprogram(name: "nand_cleanup", scope: !3, file: !3, line: 5954, type: !4218, scopeLine: 5955, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11235 = !DILocalVariable(name: "chip", arg: 1, scope: !11234, file: !3, line: 5954, type: !4166)
!11236 = !DILocation(line: 5954, column: 37, scope: !11234)
!11237 = !DILocation(line: 5956, column: 6, scope: !11238)
!11238 = distinct !DILexicalBlock(scope: !11234, file: !3, line: 5956, column: 6)
!11239 = !DILocation(line: 5956, column: 12, scope: !11238)
!11240 = !DILocation(line: 5956, column: 16, scope: !11238)
!11241 = !DILocation(line: 5956, column: 28, scope: !11238)
!11242 = !DILocation(line: 5956, column: 57, scope: !11238)
!11243 = !DILocation(line: 5957, column: 6, scope: !11238)
!11244 = !DILocation(line: 5957, column: 12, scope: !11238)
!11245 = !DILocation(line: 5957, column: 16, scope: !11238)
!11246 = !DILocation(line: 5957, column: 21, scope: !11238)
!11247 = !DILocation(line: 5956, column: 6, scope: !11234)
!11248 = !DILocation(line: 5958, column: 44, scope: !11238)
!11249 = !DILocation(line: 5958, column: 50, scope: !11238)
!11250 = !DILocation(line: 5958, column: 54, scope: !11238)
!11251 = !DILocation(line: 5958, column: 17, scope: !11238)
!11252 = !DILocation(line: 5958, column: 3, scope: !11238)
!11253 = !DILocation(line: 5960, column: 19, scope: !11234)
!11254 = !DILocation(line: 5960, column: 25, scope: !11234)
!11255 = !DILocation(line: 5960, column: 2, scope: !11234)
!11256 = !DILocation(line: 5963, column: 8, scope: !11234)
!11257 = !DILocation(line: 5963, column: 14, scope: !11234)
!11258 = !DILocation(line: 5963, column: 2, scope: !11234)
!11259 = !DILocation(line: 5964, column: 8, scope: !11234)
!11260 = !DILocation(line: 5964, column: 14, scope: !11234)
!11261 = !DILocation(line: 5964, column: 2, scope: !11234)
!11262 = !DILocation(line: 5965, column: 8, scope: !11234)
!11263 = !DILocation(line: 5965, column: 14, scope: !11234)
!11264 = !DILocation(line: 5965, column: 18, scope: !11234)
!11265 = !DILocation(line: 5965, column: 2, scope: !11234)
!11266 = !DILocation(line: 5966, column: 8, scope: !11234)
!11267 = !DILocation(line: 5966, column: 14, scope: !11234)
!11268 = !DILocation(line: 5966, column: 18, scope: !11234)
!11269 = !DILocation(line: 5966, column: 2, scope: !11234)
!11270 = !DILocation(line: 5969, column: 6, scope: !11271)
!11271 = distinct !DILexicalBlock(scope: !11234, file: !3, line: 5969, column: 6)
!11272 = !DILocation(line: 5969, column: 12, scope: !11271)
!11273 = !DILocation(line: 5969, column: 29, scope: !11271)
!11274 = !DILocation(line: 5969, column: 32, scope: !11271)
!11275 = !DILocation(line: 5969, column: 38, scope: !11271)
!11276 = !DILocation(line: 5969, column: 56, scope: !11271)
!11277 = !DILocation(line: 5970, column: 4, scope: !11271)
!11278 = !DILocation(line: 5969, column: 6, scope: !11234)
!11279 = !DILocation(line: 5971, column: 9, scope: !11271)
!11280 = !DILocation(line: 5971, column: 15, scope: !11271)
!11281 = !DILocation(line: 5971, column: 3, scope: !11271)
!11282 = !DILocation(line: 5974, column: 8, scope: !11234)
!11283 = !DILocation(line: 5974, column: 14, scope: !11234)
!11284 = !DILocation(line: 5974, column: 2, scope: !11234)
!11285 = !DILocation(line: 5977, column: 28, scope: !11234)
!11286 = !DILocation(line: 5977, column: 2, scope: !11234)
!11287 = !DILocation(line: 5980, column: 14, scope: !11234)
!11288 = !DILocation(line: 5980, column: 2, scope: !11234)
!11289 = !DILocation(line: 5983, column: 26, scope: !11234)
!11290 = !DILocation(line: 5983, column: 2, scope: !11234)
!11291 = !DILocation(line: 5984, column: 1, scope: !11234)
!11292 = distinct !DISubprogram(name: "nand_bch_free", scope: !4054, file: !4054, line: 62, type: !11293, scopeLine: 62, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11293 = !DISubroutineType(types: !11294)
!11294 = !{null, !4052}
!11295 = !DILocalVariable(name: "nbc", arg: 1, scope: !11292, file: !4054, line: 62, type: !4052)
!11296 = !DILocation(line: 62, column: 59, scope: !11292)
!11297 = !DILocation(line: 62, column: 65, scope: !11292)
!11298 = distinct !DISubprogram(name: "nand_manufacturer_cleanup", scope: !3, file: !3, line: 4676, type: !4218, scopeLine: 4677, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11299 = !DILocalVariable(name: "chip", arg: 1, scope: !11298, file: !3, line: 4676, type: !4166)
!11300 = !DILocation(line: 4676, column: 57, scope: !11298)
!11301 = !DILocation(line: 4679, column: 6, scope: !11302)
!11302 = distinct !DILexicalBlock(scope: !11298, file: !3, line: 4679, column: 6)
!11303 = !DILocation(line: 4679, column: 12, scope: !11302)
!11304 = !DILocation(line: 4679, column: 25, scope: !11302)
!11305 = !DILocation(line: 4679, column: 30, scope: !11302)
!11306 = !DILocation(line: 4679, column: 33, scope: !11302)
!11307 = !DILocation(line: 4679, column: 39, scope: !11302)
!11308 = !DILocation(line: 4679, column: 52, scope: !11302)
!11309 = !DILocation(line: 4679, column: 58, scope: !11302)
!11310 = !DILocation(line: 4679, column: 62, scope: !11302)
!11311 = !DILocation(line: 4680, column: 6, scope: !11302)
!11312 = !DILocation(line: 4680, column: 12, scope: !11302)
!11313 = !DILocation(line: 4680, column: 25, scope: !11302)
!11314 = !DILocation(line: 4680, column: 31, scope: !11302)
!11315 = !DILocation(line: 4680, column: 36, scope: !11302)
!11316 = !DILocation(line: 4679, column: 6, scope: !11298)
!11317 = !DILocation(line: 4681, column: 3, scope: !11302)
!11318 = !DILocation(line: 4681, column: 9, scope: !11302)
!11319 = !DILocation(line: 4681, column: 22, scope: !11302)
!11320 = !DILocation(line: 4681, column: 28, scope: !11302)
!11321 = !DILocation(line: 4681, column: 33, scope: !11302)
!11322 = !DILocation(line: 4681, column: 41, scope: !11302)
!11323 = !DILocation(line: 4682, column: 1, scope: !11298)
!11324 = distinct !DISubprogram(name: "nand_do_write_oob", scope: !3, file: !3, line: 382, type: !11325, scopeLine: 384, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11325 = !DISubroutineType(types: !11326)
!11326 = !{!240, !4166, !508, !2743}
!11327 = !DILocalVariable(name: "chip", arg: 1, scope: !11324, file: !3, line: 382, type: !4166)
!11328 = !DILocation(line: 382, column: 48, scope: !11324)
!11329 = !DILocalVariable(name: "to", arg: 2, scope: !11324, file: !3, line: 382, type: !508)
!11330 = !DILocation(line: 382, column: 61, scope: !11324)
!11331 = !DILocalVariable(name: "ops", arg: 3, scope: !11324, file: !3, line: 383, type: !2743)
!11332 = !DILocation(line: 383, column: 29, scope: !11324)
!11333 = !DILocalVariable(name: "mtd", scope: !11324, file: !3, line: 385, type: !2637)
!11334 = !DILocation(line: 385, column: 19, scope: !11324)
!11335 = !DILocation(line: 385, column: 37, scope: !11324)
!11336 = !DILocation(line: 385, column: 25, scope: !11324)
!11337 = !DILocalVariable(name: "chipnr", scope: !11324, file: !3, line: 386, type: !240)
!11338 = !DILocation(line: 386, column: 6, scope: !11324)
!11339 = !DILocalVariable(name: "page", scope: !11324, file: !3, line: 386, type: !240)
!11340 = !DILocation(line: 386, column: 14, scope: !11324)
!11341 = !DILocalVariable(name: "status", scope: !11324, file: !3, line: 386, type: !240)
!11342 = !DILocation(line: 386, column: 20, scope: !11324)
!11343 = !DILocalVariable(name: "len", scope: !11324, file: !3, line: 386, type: !240)
!11344 = !DILocation(line: 386, column: 28, scope: !11324)
!11345 = !DILocalVariable(name: "ret", scope: !11324, file: !3, line: 386, type: !240)
!11346 = !DILocation(line: 386, column: 33, scope: !11324)
!11347 = !DILocation(line: 388, column: 2, scope: !11348)
!11348 = distinct !DILexicalBlock(scope: !11349, file: !3, line: 388, column: 2)
!11349 = distinct !DILexicalBlock(scope: !11324, file: !3, line: 388, column: 2)
!11350 = !DILocation(line: 388, column: 2, scope: !11349)
!11351 = !DILocation(line: 391, column: 21, scope: !11324)
!11352 = !DILocation(line: 391, column: 26, scope: !11324)
!11353 = !DILocation(line: 391, column: 8, scope: !11324)
!11354 = !DILocation(line: 391, column: 6, scope: !11324)
!11355 = !DILocation(line: 394, column: 7, scope: !11356)
!11356 = distinct !DILexicalBlock(scope: !11324, file: !3, line: 394, column: 6)
!11357 = !DILocation(line: 394, column: 12, scope: !11356)
!11358 = !DILocation(line: 394, column: 22, scope: !11356)
!11359 = !DILocation(line: 394, column: 27, scope: !11356)
!11360 = !DILocation(line: 394, column: 20, scope: !11356)
!11361 = !DILocation(line: 394, column: 37, scope: !11356)
!11362 = !DILocation(line: 394, column: 35, scope: !11356)
!11363 = !DILocation(line: 394, column: 6, scope: !11324)
!11364 = !DILocation(line: 395, column: 3, scope: !11365)
!11365 = distinct !DILexicalBlock(scope: !11366, file: !3, line: 395, column: 3)
!11366 = distinct !DILexicalBlock(scope: !11367, file: !3, line: 395, column: 3)
!11367 = distinct !DILexicalBlock(scope: !11356, file: !3, line: 394, column: 42)
!11368 = !DILocation(line: 395, column: 3, scope: !11366)
!11369 = !DILocation(line: 397, column: 3, scope: !11367)
!11370 = !DILocation(line: 400, column: 17, scope: !11324)
!11371 = !DILocation(line: 400, column: 23, scope: !11324)
!11372 = !DILocation(line: 400, column: 29, scope: !11324)
!11373 = !DILocation(line: 400, column: 20, scope: !11324)
!11374 = !DILocation(line: 400, column: 11, scope: !11324)
!11375 = !DILocation(line: 400, column: 9, scope: !11324)
!11376 = !DILocation(line: 408, column: 19, scope: !11324)
!11377 = !DILocation(line: 408, column: 25, scope: !11324)
!11378 = !DILocation(line: 408, column: 8, scope: !11324)
!11379 = !DILocation(line: 408, column: 6, scope: !11324)
!11380 = !DILocation(line: 409, column: 6, scope: !11381)
!11381 = distinct !DILexicalBlock(scope: !11324, file: !3, line: 409, column: 6)
!11382 = !DILocation(line: 409, column: 6, scope: !11324)
!11383 = !DILocation(line: 410, column: 10, scope: !11381)
!11384 = !DILocation(line: 410, column: 3, scope: !11381)
!11385 = !DILocation(line: 412, column: 21, scope: !11324)
!11386 = !DILocation(line: 412, column: 27, scope: !11324)
!11387 = !DILocation(line: 412, column: 2, scope: !11324)
!11388 = !DILocation(line: 415, column: 15, scope: !11324)
!11389 = !DILocation(line: 415, column: 21, scope: !11324)
!11390 = !DILocation(line: 415, column: 27, scope: !11324)
!11391 = !DILocation(line: 415, column: 18, scope: !11324)
!11392 = !DILocation(line: 415, column: 9, scope: !11324)
!11393 = !DILocation(line: 415, column: 7, scope: !11324)
!11394 = !DILocation(line: 418, column: 20, scope: !11395)
!11395 = distinct !DILexicalBlock(scope: !11324, file: !3, line: 418, column: 6)
!11396 = !DILocation(line: 418, column: 6, scope: !11395)
!11397 = !DILocation(line: 418, column: 6, scope: !11324)
!11398 = !DILocation(line: 419, column: 24, scope: !11399)
!11399 = distinct !DILexicalBlock(scope: !11395, file: !3, line: 418, column: 27)
!11400 = !DILocation(line: 419, column: 3, scope: !11399)
!11401 = !DILocation(line: 420, column: 3, scope: !11399)
!11402 = !DILocation(line: 424, column: 6, scope: !11403)
!11403 = distinct !DILexicalBlock(scope: !11324, file: !3, line: 424, column: 6)
!11404 = !DILocation(line: 424, column: 14, scope: !11403)
!11405 = !DILocation(line: 424, column: 20, scope: !11403)
!11406 = !DILocation(line: 424, column: 30, scope: !11403)
!11407 = !DILocation(line: 424, column: 11, scope: !11403)
!11408 = !DILocation(line: 424, column: 6, scope: !11324)
!11409 = !DILocation(line: 425, column: 3, scope: !11403)
!11410 = !DILocation(line: 425, column: 9, scope: !11403)
!11411 = !DILocation(line: 425, column: 19, scope: !11403)
!11412 = !DILocation(line: 425, column: 24, scope: !11403)
!11413 = !DILocation(line: 427, column: 16, scope: !11324)
!11414 = !DILocation(line: 427, column: 22, scope: !11324)
!11415 = !DILocation(line: 427, column: 27, scope: !11324)
!11416 = !DILocation(line: 427, column: 35, scope: !11324)
!11417 = !DILocation(line: 427, column: 40, scope: !11324)
!11418 = !DILocation(line: 427, column: 48, scope: !11324)
!11419 = !DILocation(line: 427, column: 2, scope: !11324)
!11420 = !DILocation(line: 429, column: 6, scope: !11421)
!11421 = distinct !DILexicalBlock(scope: !11324, file: !3, line: 429, column: 6)
!11422 = !DILocation(line: 429, column: 11, scope: !11421)
!11423 = !DILocation(line: 429, column: 16, scope: !11421)
!11424 = !DILocation(line: 429, column: 6, scope: !11324)
!11425 = !DILocation(line: 430, column: 12, scope: !11421)
!11426 = !DILocation(line: 430, column: 18, scope: !11421)
!11427 = !DILocation(line: 430, column: 22, scope: !11421)
!11428 = !DILocation(line: 430, column: 36, scope: !11421)
!11429 = !DILocation(line: 430, column: 42, scope: !11421)
!11430 = !DILocation(line: 430, column: 49, scope: !11421)
!11431 = !DILocation(line: 430, column: 55, scope: !11421)
!11432 = !DILocation(line: 430, column: 47, scope: !11421)
!11433 = !DILocation(line: 430, column: 10, scope: !11421)
!11434 = !DILocation(line: 430, column: 3, scope: !11421)
!11435 = !DILocation(line: 432, column: 12, scope: !11421)
!11436 = !DILocation(line: 432, column: 18, scope: !11421)
!11437 = !DILocation(line: 432, column: 22, scope: !11421)
!11438 = !DILocation(line: 432, column: 32, scope: !11421)
!11439 = !DILocation(line: 432, column: 38, scope: !11421)
!11440 = !DILocation(line: 432, column: 45, scope: !11421)
!11441 = !DILocation(line: 432, column: 51, scope: !11421)
!11442 = !DILocation(line: 432, column: 43, scope: !11421)
!11443 = !DILocation(line: 432, column: 10, scope: !11421)
!11444 = !DILocation(line: 434, column: 23, scope: !11324)
!11445 = !DILocation(line: 434, column: 2, scope: !11324)
!11446 = !DILocation(line: 436, column: 6, scope: !11447)
!11447 = distinct !DILexicalBlock(scope: !11324, file: !3, line: 436, column: 6)
!11448 = !DILocation(line: 436, column: 6, scope: !11324)
!11449 = !DILocation(line: 437, column: 10, scope: !11447)
!11450 = !DILocation(line: 437, column: 3, scope: !11447)
!11451 = !DILocation(line: 439, column: 19, scope: !11324)
!11452 = !DILocation(line: 439, column: 24, scope: !11324)
!11453 = !DILocation(line: 439, column: 2, scope: !11324)
!11454 = !DILocation(line: 439, column: 7, scope: !11324)
!11455 = !DILocation(line: 439, column: 17, scope: !11324)
!11456 = !DILocation(line: 441, column: 2, scope: !11324)
!11457 = !DILocation(line: 442, column: 1, scope: !11324)
!11458 = distinct !DISubprogram(name: "mtd_oobavail", scope: !2639, file: !2639, line: 468, type: !11459, scopeLine: 469, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11459 = !DISubroutineType(types: !11460)
!11460 = !{!152, !2637, !2743}
!11461 = !DILocalVariable(name: "mtd", arg: 1, scope: !11458, file: !2639, line: 468, type: !2637)
!11462 = !DILocation(line: 468, column: 49, scope: !11458)
!11463 = !DILocalVariable(name: "ops", arg: 2, scope: !11458, file: !2639, line: 468, type: !2743)
!11464 = !DILocation(line: 468, column: 74, scope: !11458)
!11465 = !DILocation(line: 470, column: 9, scope: !11458)
!11466 = !DILocation(line: 470, column: 14, scope: !11458)
!11467 = !DILocation(line: 470, column: 19, scope: !11458)
!11468 = !DILocation(line: 470, column: 41, scope: !11458)
!11469 = !DILocation(line: 470, column: 46, scope: !11458)
!11470 = !DILocation(line: 470, column: 57, scope: !11458)
!11471 = !DILocation(line: 470, column: 62, scope: !11458)
!11472 = !DILocation(line: 470, column: 2, scope: !11458)
!11473 = distinct !DISubprogram(name: "nand_fill_oob", scope: !3, file: !3, line: 343, type: !11474, scopeLine: 345, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11474 = !DISubroutineType(types: !11475)
!11475 = !{!2753, !4166, !2753, !303, !2743}
!11476 = !DILocalVariable(name: "chip", arg: 1, scope: !11473, file: !3, line: 343, type: !4166)
!11477 = !DILocation(line: 343, column: 49, scope: !11473)
!11478 = !DILocalVariable(name: "oob", arg: 2, scope: !11473, file: !3, line: 343, type: !2753)
!11479 = !DILocation(line: 343, column: 64, scope: !11473)
!11480 = !DILocalVariable(name: "len", arg: 3, scope: !11473, file: !3, line: 343, type: !303)
!11481 = !DILocation(line: 343, column: 76, scope: !11473)
!11482 = !DILocalVariable(name: "ops", arg: 4, scope: !11473, file: !3, line: 344, type: !2743)
!11483 = !DILocation(line: 344, column: 30, scope: !11473)
!11484 = !DILocalVariable(name: "mtd", scope: !11473, file: !3, line: 346, type: !2637)
!11485 = !DILocation(line: 346, column: 19, scope: !11473)
!11486 = !DILocation(line: 346, column: 37, scope: !11473)
!11487 = !DILocation(line: 346, column: 25, scope: !11473)
!11488 = !DILocalVariable(name: "ret", scope: !11473, file: !3, line: 347, type: !240)
!11489 = !DILocation(line: 347, column: 6, scope: !11473)
!11490 = !DILocation(line: 353, column: 9, scope: !11473)
!11491 = !DILocation(line: 353, column: 15, scope: !11473)
!11492 = !DILocation(line: 353, column: 30, scope: !11473)
!11493 = !DILocation(line: 353, column: 35, scope: !11473)
!11494 = !DILocation(line: 353, column: 2, scope: !11473)
!11495 = !DILocation(line: 355, column: 10, scope: !11473)
!11496 = !DILocation(line: 355, column: 15, scope: !11473)
!11497 = !DILocation(line: 355, column: 2, scope: !11473)
!11498 = !DILocation(line: 359, column: 10, scope: !11499)
!11499 = distinct !DILexicalBlock(scope: !11473, file: !3, line: 355, column: 21)
!11500 = !DILocation(line: 359, column: 16, scope: !11499)
!11501 = !DILocation(line: 359, column: 26, scope: !11499)
!11502 = !DILocation(line: 359, column: 31, scope: !11499)
!11503 = !DILocation(line: 359, column: 24, scope: !11499)
!11504 = !DILocation(line: 359, column: 40, scope: !11499)
!11505 = !DILocation(line: 359, column: 45, scope: !11499)
!11506 = !DILocation(line: 359, column: 3, scope: !11499)
!11507 = !DILocation(line: 360, column: 10, scope: !11499)
!11508 = !DILocation(line: 360, column: 16, scope: !11499)
!11509 = !DILocation(line: 360, column: 14, scope: !11499)
!11510 = !DILocation(line: 360, column: 3, scope: !11499)
!11511 = !DILocation(line: 363, column: 37, scope: !11499)
!11512 = !DILocation(line: 363, column: 42, scope: !11499)
!11513 = !DILocation(line: 363, column: 47, scope: !11499)
!11514 = !DILocation(line: 363, column: 53, scope: !11499)
!11515 = !DILocation(line: 364, column: 9, scope: !11499)
!11516 = !DILocation(line: 364, column: 14, scope: !11499)
!11517 = !DILocation(line: 364, column: 23, scope: !11499)
!11518 = !DILocation(line: 363, column: 9, scope: !11499)
!11519 = !DILocation(line: 363, column: 7, scope: !11499)
!11520 = !DILocation(line: 365, column: 3, scope: !11499)
!11521 = !DILocation(line: 365, column: 3, scope: !11522)
!11522 = distinct !DILexicalBlock(scope: !11523, file: !3, line: 365, column: 3)
!11523 = distinct !DILexicalBlock(scope: !11499, file: !3, line: 365, column: 3)
!11524 = !DILocation(line: 365, column: 3, scope: !11523)
!11525 = !DILocation(line: 365, column: 3, scope: !11526)
!11526 = distinct !DILexicalBlock(scope: !11522, file: !3, line: 365, column: 3)
!11527 = !DILocation(line: 365, column: 3, scope: !11528)
!11528 = distinct !DILexicalBlock(scope: !11526, file: !3, line: 365, column: 3)
!11529 = !DILocation(line: 365, column: 3, scope: !11530)
!11530 = distinct !DILexicalBlock(scope: !11526, file: !3, line: 365, column: 3)
!11531 = !{i32 -2141641844, i32 -2141641815, i32 -2141641769, i32 -2141641711, i32 -2141641657, i32 -2141641603, i32 -2141641548, i32 -2141641517}
!11532 = !DILocation(line: 365, column: 3, scope: !11533)
!11533 = distinct !DILexicalBlock(scope: !11534, file: !3, line: 365, column: 3)
!11534 = distinct !DILexicalBlock(scope: !11526, file: !3, line: 365, column: 3)
!11535 = !{i32 -2141641062, i32 -2141641055, i32 -2141641001, i32 -2141640970, i32 -2141640940}
!11536 = !DILocation(line: 365, column: 3, scope: !11534)
!11537 = !DILocation(line: 366, column: 10, scope: !11499)
!11538 = !DILocation(line: 366, column: 16, scope: !11499)
!11539 = !DILocation(line: 366, column: 14, scope: !11499)
!11540 = !DILocation(line: 366, column: 3, scope: !11499)
!11541 = !DILocation(line: 369, column: 3, scope: !11499)
!11542 = !DILocation(line: 369, column: 3, scope: !11543)
!11543 = distinct !DILexicalBlock(scope: !11499, file: !3, line: 369, column: 3)
!11544 = !DILocation(line: 369, column: 3, scope: !11545)
!11545 = distinct !DILexicalBlock(scope: !11543, file: !3, line: 369, column: 3)
!11546 = !DILocation(line: 369, column: 3, scope: !11547)
!11547 = distinct !DILexicalBlock(scope: !11543, file: !3, line: 369, column: 3)
!11548 = !{i32 -2141640735, i32 -2141640706, i32 -2141640660, i32 -2141640602, i32 -2141640548, i32 -2141640494, i32 -2141640439, i32 -2141640408}
!11549 = !DILocation(line: 369, column: 3, scope: !11550)
!11550 = distinct !DILexicalBlock(scope: !11551, file: !3, line: 369, column: 3)
!11551 = distinct !DILexicalBlock(scope: !11543, file: !3, line: 369, column: 3)
!11552 = !{i32 -2141639953, i32 -2141639946, i32 -2141639892, i32 -2141639861, i32 -2141639831}
!11553 = !DILocation(line: 369, column: 3, scope: !11551)
!11554 = !DILocation(line: 370, column: 2, scope: !11499)
!11555 = !DILocation(line: 371, column: 2, scope: !11473)
!11556 = !DILocation(line: 372, column: 1, scope: !11473)
!11557 = distinct !DISubprogram(name: "ERR_PTR", scope: !11558, file: !11558, line: 24, type: !11559, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11558 = !DIFile(filename: "./include/linux/err.h", directory: "/home/lizy2001/genbc/linux")
!11559 = !DISubroutineType(types: !11560)
!11560 = !{!330, !291}
!11561 = !DILocalVariable(name: "error", arg: 1, scope: !11557, file: !11558, line: 24, type: !291)
!11562 = !DILocation(line: 24, column: 48, scope: !11557)
!11563 = !DILocation(line: 26, column: 18, scope: !11557)
!11564 = !DILocation(line: 26, column: 9, scope: !11557)
!11565 = !DILocation(line: 26, column: 2, scope: !11557)
!11566 = distinct !DISubprogram(name: "_msecs_to_jiffies", scope: !5087, file: !5087, line: 308, type: !5088, scopeLine: 309, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11567 = !DILocalVariable(name: "m", arg: 1, scope: !11566, file: !5087, line: 308, type: !3059)
!11568 = !DILocation(line: 308, column: 66, scope: !11566)
!11569 = !DILocation(line: 310, column: 10, scope: !11566)
!11570 = !DILocation(line: 310, column: 12, scope: !11566)
!11571 = !DILocation(line: 310, column: 34, scope: !11566)
!11572 = !DILocation(line: 310, column: 39, scope: !11566)
!11573 = !DILocation(line: 310, column: 2, scope: !11566)
!11574 = distinct !DISubprogram(name: "nand_op_parser_must_split_instr", scope: !3, file: !3, line: 1984, type: !11575, scopeLine: 1987, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11575 = !DISubroutineType(types: !11576)
!11576 = !{!180, !7081, !4436, !2915}
!11577 = !DILocalVariable(name: "pat", arg: 1, scope: !11574, file: !3, line: 1984, type: !7081)
!11578 = !DILocation(line: 1984, column: 75, scope: !11574)
!11579 = !DILocalVariable(name: "instr", arg: 2, scope: !11574, file: !3, line: 1985, type: !4436)
!11580 = !DILocation(line: 1985, column: 33, scope: !11574)
!11581 = !DILocalVariable(name: "start_offset", arg: 3, scope: !11574, file: !3, line: 1986, type: !2915)
!11582 = !DILocation(line: 1986, column: 19, scope: !11574)
!11583 = !DILocation(line: 1988, column: 10, scope: !11574)
!11584 = !DILocation(line: 1988, column: 15, scope: !11574)
!11585 = !DILocation(line: 1988, column: 2, scope: !11574)
!11586 = !DILocation(line: 1990, column: 8, scope: !11587)
!11587 = distinct !DILexicalBlock(scope: !11588, file: !3, line: 1990, column: 7)
!11588 = distinct !DILexicalBlock(scope: !11574, file: !3, line: 1988, column: 21)
!11589 = !DILocation(line: 1990, column: 13, scope: !11587)
!11590 = !DILocation(line: 1990, column: 17, scope: !11587)
!11591 = !DILocation(line: 1990, column: 22, scope: !11587)
!11592 = !DILocation(line: 1990, column: 7, scope: !11588)
!11593 = !DILocation(line: 1991, column: 4, scope: !11587)
!11594 = !DILocation(line: 1993, column: 7, scope: !11595)
!11595 = distinct !DILexicalBlock(scope: !11588, file: !3, line: 1993, column: 7)
!11596 = !DILocation(line: 1993, column: 14, scope: !11595)
!11597 = !DILocation(line: 1993, column: 18, scope: !11595)
!11598 = !DILocation(line: 1993, column: 23, scope: !11595)
!11599 = !DILocation(line: 1993, column: 33, scope: !11595)
!11600 = !DILocation(line: 1993, column: 32, scope: !11595)
!11601 = !DILocation(line: 1993, column: 30, scope: !11595)
!11602 = !DILocation(line: 1994, column: 7, scope: !11595)
!11603 = !DILocation(line: 1994, column: 12, scope: !11595)
!11604 = !DILocation(line: 1994, column: 16, scope: !11595)
!11605 = !DILocation(line: 1994, column: 21, scope: !11595)
!11606 = !DILocation(line: 1993, column: 46, scope: !11595)
!11607 = !DILocation(line: 1993, column: 7, scope: !11588)
!11608 = !DILocation(line: 1995, column: 21, scope: !11609)
!11609 = distinct !DILexicalBlock(scope: !11595, file: !3, line: 1994, column: 32)
!11610 = !DILocation(line: 1995, column: 26, scope: !11609)
!11611 = !DILocation(line: 1995, column: 30, scope: !11609)
!11612 = !DILocation(line: 1995, column: 35, scope: !11609)
!11613 = !DILocation(line: 1995, column: 5, scope: !11609)
!11614 = !DILocation(line: 1995, column: 18, scope: !11609)
!11615 = !DILocation(line: 1996, column: 4, scope: !11609)
!11616 = !DILocation(line: 1998, column: 3, scope: !11588)
!11617 = !DILocation(line: 2002, column: 8, scope: !11618)
!11618 = distinct !DILexicalBlock(scope: !11588, file: !3, line: 2002, column: 7)
!11619 = !DILocation(line: 2002, column: 13, scope: !11618)
!11620 = !DILocation(line: 2002, column: 17, scope: !11618)
!11621 = !DILocation(line: 2002, column: 22, scope: !11618)
!11622 = !DILocation(line: 2002, column: 7, scope: !11588)
!11623 = !DILocation(line: 2003, column: 4, scope: !11618)
!11624 = !DILocation(line: 2005, column: 7, scope: !11625)
!11625 = distinct !DILexicalBlock(scope: !11588, file: !3, line: 2005, column: 7)
!11626 = !DILocation(line: 2005, column: 14, scope: !11625)
!11627 = !DILocation(line: 2005, column: 18, scope: !11625)
!11628 = !DILocation(line: 2005, column: 23, scope: !11625)
!11629 = !DILocation(line: 2005, column: 30, scope: !11625)
!11630 = !DILocation(line: 2005, column: 29, scope: !11625)
!11631 = !DILocation(line: 2005, column: 27, scope: !11625)
!11632 = !DILocation(line: 2006, column: 7, scope: !11625)
!11633 = !DILocation(line: 2006, column: 12, scope: !11625)
!11634 = !DILocation(line: 2006, column: 16, scope: !11625)
!11635 = !DILocation(line: 2006, column: 21, scope: !11625)
!11636 = !DILocation(line: 2005, column: 43, scope: !11625)
!11637 = !DILocation(line: 2005, column: 7, scope: !11588)
!11638 = !DILocation(line: 2007, column: 21, scope: !11639)
!11639 = distinct !DILexicalBlock(scope: !11625, file: !3, line: 2006, column: 29)
!11640 = !DILocation(line: 2007, column: 26, scope: !11639)
!11641 = !DILocation(line: 2007, column: 30, scope: !11639)
!11642 = !DILocation(line: 2007, column: 35, scope: !11639)
!11643 = !DILocation(line: 2007, column: 5, scope: !11639)
!11644 = !DILocation(line: 2007, column: 18, scope: !11639)
!11645 = !DILocation(line: 2008, column: 4, scope: !11639)
!11646 = !DILocation(line: 2010, column: 3, scope: !11588)
!11647 = !DILocation(line: 2013, column: 3, scope: !11588)
!11648 = !DILocation(line: 2016, column: 2, scope: !11574)
!11649 = !DILocation(line: 2017, column: 1, scope: !11574)
!11650 = distinct !DISubprogram(name: "nand_controller_can_setup_interface", scope: !4207, file: !4207, line: 140, type: !5185, scopeLine: 141, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11651 = !DILocalVariable(name: "chip", arg: 1, scope: !11650, file: !4207, line: 140, type: !4166)
!11652 = !DILocation(line: 140, column: 74, scope: !11650)
!11653 = !DILocation(line: 142, column: 7, scope: !11654)
!11654 = distinct !DILexicalBlock(scope: !11650, file: !4207, line: 142, column: 6)
!11655 = !DILocation(line: 142, column: 13, scope: !11654)
!11656 = !DILocation(line: 142, column: 24, scope: !11654)
!11657 = !DILocation(line: 142, column: 28, scope: !11654)
!11658 = !DILocation(line: 142, column: 34, scope: !11654)
!11659 = !DILocation(line: 142, column: 46, scope: !11654)
!11660 = !DILocation(line: 142, column: 50, scope: !11654)
!11661 = !DILocation(line: 143, column: 7, scope: !11654)
!11662 = !DILocation(line: 143, column: 13, scope: !11654)
!11663 = !DILocation(line: 143, column: 25, scope: !11654)
!11664 = !DILocation(line: 143, column: 30, scope: !11654)
!11665 = !DILocation(line: 142, column: 6, scope: !11650)
!11666 = !DILocation(line: 144, column: 3, scope: !11654)
!11667 = !DILocation(line: 146, column: 6, scope: !11668)
!11668 = distinct !DILexicalBlock(scope: !11650, file: !4207, line: 146, column: 6)
!11669 = !DILocation(line: 146, column: 12, scope: !11668)
!11670 = !DILocation(line: 146, column: 20, scope: !11668)
!11671 = !DILocation(line: 146, column: 6, scope: !11650)
!11672 = !DILocation(line: 147, column: 3, scope: !11668)
!11673 = !DILocation(line: 149, column: 2, scope: !11650)
!11674 = !DILocation(line: 150, column: 1, scope: !11650)
!11675 = distinct !DISubprogram(name: "test_bit", scope: !11676, file: !11676, line: 132, type: !11677, scopeLine: 133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11676 = !DIFile(filename: "./include/asm-generic/bitops/instrumented-non-atomic.h", directory: "/home/lizy2001/genbc/linux")
!11677 = !DISubroutineType(types: !11678)
!11678 = !{!180, !291, !11679}
!11679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11680, size: 64)
!11680 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11681)
!11681 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !306)
!11682 = !DILocalVariable(name: "nr", arg: 1, scope: !11683, file: !5521, line: 210, type: !291)
!11683 = distinct !DISubprogram(name: "variable_test_bit", scope: !5521, file: !5521, line: 210, type: !11677, scopeLine: 211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11684 = !DILocation(line: 210, column: 52, scope: !11683, inlinedAt: !11685)
!11685 = distinct !DILocation(line: 135, column: 9, scope: !11675)
!11686 = !DILocalVariable(name: "addr", arg: 2, scope: !11683, file: !5521, line: 210, type: !11679)
!11687 = !DILocation(line: 210, column: 86, scope: !11683, inlinedAt: !11685)
!11688 = !DILocalVariable(name: "oldbit", scope: !11683, file: !5521, line: 212, type: !180)
!11689 = !DILocation(line: 212, column: 7, scope: !11683, inlinedAt: !11685)
!11690 = !DILocalVariable(name: "nr", arg: 1, scope: !11691, file: !5521, line: 204, type: !291)
!11691 = distinct !DISubprogram(name: "constant_test_bit", scope: !5521, file: !5521, line: 204, type: !11677, scopeLine: 205, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11692 = !DILocation(line: 204, column: 52, scope: !11691, inlinedAt: !11693)
!11693 = distinct !DILocation(line: 135, column: 9, scope: !11675)
!11694 = !DILocalVariable(name: "addr", arg: 2, scope: !11691, file: !5521, line: 204, type: !11679)
!11695 = !DILocation(line: 204, column: 86, scope: !11691, inlinedAt: !11693)
!11696 = !DILocalVariable(name: "v", arg: 1, scope: !11697, file: !11698, line: 69, type: !11701)
!11697 = distinct !DISubprogram(name: "instrument_atomic_read", scope: !11698, file: !11698, line: 69, type: !11699, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11698 = !DIFile(filename: "./include/linux/instrumented.h", directory: "/home/lizy2001/genbc/linux")
!11699 = !DISubroutineType(types: !11700)
!11700 = !{null, !11701, !303}
!11701 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11702, size: 64)
!11702 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !11703)
!11703 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: null)
!11704 = !DILocation(line: 69, column: 73, scope: !11697, inlinedAt: !11705)
!11705 = distinct !DILocation(line: 134, column: 2, scope: !11675)
!11706 = !DILocalVariable(name: "size", arg: 2, scope: !11697, file: !11698, line: 69, type: !303)
!11707 = !DILocation(line: 69, column: 83, scope: !11697, inlinedAt: !11705)
!11708 = !DILocalVariable(name: "nr", arg: 1, scope: !11675, file: !11676, line: 132, type: !291)
!11709 = !DILocation(line: 132, column: 34, scope: !11675)
!11710 = !DILocalVariable(name: "addr", arg: 2, scope: !11675, file: !11676, line: 132, type: !11679)
!11711 = !DILocation(line: 132, column: 68, scope: !11675)
!11712 = !DILocation(line: 134, column: 25, scope: !11675)
!11713 = !DILocation(line: 134, column: 32, scope: !11675)
!11714 = !DILocation(line: 134, column: 30, scope: !11675)
!11715 = !DILocation(line: 71, column: 19, scope: !11697, inlinedAt: !11705)
!11716 = !DILocation(line: 71, column: 22, scope: !11697, inlinedAt: !11705)
!11717 = !DILocation(line: 71, column: 2, scope: !11697, inlinedAt: !11705)
!11718 = !DILocation(line: 72, column: 2, scope: !11697, inlinedAt: !11705)
!11719 = !DILocation(line: 135, column: 9, scope: !11675)
!11720 = !DILocation(line: 206, column: 19, scope: !11691, inlinedAt: !11693)
!11721 = !DILocation(line: 206, column: 22, scope: !11691, inlinedAt: !11693)
!11722 = !DILocation(line: 206, column: 15, scope: !11691, inlinedAt: !11693)
!11723 = !DILocation(line: 207, column: 4, scope: !11691, inlinedAt: !11693)
!11724 = !DILocation(line: 207, column: 9, scope: !11691, inlinedAt: !11693)
!11725 = !DILocation(line: 207, column: 12, scope: !11691, inlinedAt: !11693)
!11726 = !DILocation(line: 206, column: 44, scope: !11691, inlinedAt: !11693)
!11727 = !DILocation(line: 207, column: 37, scope: !11691, inlinedAt: !11693)
!11728 = !DILocation(line: 217, column: 33, scope: !11683, inlinedAt: !11685)
!11729 = !DILocation(line: 217, column: 46, scope: !11683, inlinedAt: !11685)
!11730 = !DILocation(line: 214, column: 2, scope: !11683, inlinedAt: !11685)
!11731 = !{i32 -2146987443, i32 -2146987383}
!11732 = !DILocation(line: 219, column: 9, scope: !11683, inlinedAt: !11685)
!11733 = !DILocation(line: 135, column: 2, scope: !11675)
!11734 = distinct !DISubprogram(name: "kasan_check_read", scope: !11735, file: !11735, line: 34, type: !11736, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11735 = !DIFile(filename: "./include/linux/kasan-checks.h", directory: "/home/lizy2001/genbc/linux")
!11736 = !DISubroutineType(types: !11737)
!11737 = !{!180, !11701, !7}
!11738 = !DILocalVariable(name: "p", arg: 1, scope: !11734, file: !11735, line: 34, type: !11701)
!11739 = !DILocation(line: 34, column: 58, scope: !11734)
!11740 = !DILocalVariable(name: "size", arg: 2, scope: !11734, file: !11735, line: 34, type: !7)
!11741 = !DILocation(line: 34, column: 74, scope: !11734)
!11742 = !DILocation(line: 36, column: 2, scope: !11734)
!11743 = distinct !DISubprogram(name: "kcsan_check_access", scope: !11744, file: !11744, line: 178, type: !11745, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11744 = !DIFile(filename: "./include/linux/kcsan-checks.h", directory: "/home/lizy2001/genbc/linux")
!11745 = !DISubroutineType(types: !11746)
!11746 = !{null, !11701, !303, !240}
!11747 = !DILocalVariable(name: "ptr", arg: 1, scope: !11743, file: !11744, line: 178, type: !11701)
!11748 = !DILocation(line: 178, column: 60, scope: !11743)
!11749 = !DILocalVariable(name: "size", arg: 2, scope: !11743, file: !11744, line: 178, type: !303)
!11750 = !DILocation(line: 178, column: 72, scope: !11743)
!11751 = !DILocalVariable(name: "type", arg: 3, scope: !11743, file: !11744, line: 179, type: !240)
!11752 = !DILocation(line: 179, column: 15, scope: !11743)
!11753 = !DILocation(line: 179, column: 23, scope: !11743)
!11754 = distinct !DISubprogram(name: "__arch_hweight8", scope: !8186, file: !8186, line: 31, type: !11755, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11755 = !DISubroutineType(types: !11756)
!11756 = !{!7, !7}
!11757 = !DILocalVariable(name: "w", arg: 1, scope: !11758, file: !8186, line: 15, type: !7)
!11758 = distinct !DISubprogram(name: "__arch_hweight32", scope: !8186, file: !8186, line: 15, type: !11755, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11759 = !DILocation(line: 15, column: 67, scope: !11758, inlinedAt: !11760)
!11760 = distinct !DILocation(line: 33, column: 9, scope: !11754)
!11761 = !DILocalVariable(name: "res", scope: !11758, file: !8186, line: 17, type: !7)
!11762 = !DILocation(line: 17, column: 15, scope: !11758, inlinedAt: !11760)
!11763 = !DILocalVariable(name: "w", arg: 1, scope: !11754, file: !8186, line: 31, type: !7)
!11764 = !DILocation(line: 31, column: 57, scope: !11754)
!11765 = !DILocation(line: 33, column: 26, scope: !11754)
!11766 = !DILocation(line: 33, column: 28, scope: !11754)
!11767 = !DILocation(line: 21, column: 15, scope: !11758, inlinedAt: !11760)
!11768 = !DILocation(line: 19, column: 2, scope: !11758, inlinedAt: !11760)
!11769 = !{i32 -2146947937, i32 -2146947909, i32 -2146947903, i32 -2146947887, i32 -2146947871, i32 -2146947844, i32 -2146947511, i32 -2146948229, i32 -2146947505, i32 -2146947457, i32 -2146947393, i32 -2146947331, i32 -2146947274, i32 -2146947218, i32 -2146948149, i32 -2146948124, i32 -2146946984, i32 -2146946854, i32 -2146946923, i32 -2146946840, i32 -2146948024}
!11770 = !DILocation(line: 23, column: 9, scope: !11758, inlinedAt: !11760)
!11771 = !DILocation(line: 33, column: 2, scope: !11754)
!11772 = distinct !DISubprogram(name: "nand_isbad_bbm", scope: !3, file: !3, line: 281, type: !4406, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11773 = !DILocalVariable(name: "chip", arg: 1, scope: !11772, file: !3, line: 281, type: !4166)
!11774 = !DILocation(line: 281, column: 45, scope: !11772)
!11775 = !DILocalVariable(name: "ofs", arg: 2, scope: !11772, file: !3, line: 281, type: !508)
!11776 = !DILocation(line: 281, column: 58, scope: !11772)
!11777 = !DILocation(line: 283, column: 6, scope: !11778)
!11778 = distinct !DILexicalBlock(scope: !11772, file: !3, line: 283, column: 6)
!11779 = !DILocation(line: 283, column: 12, scope: !11778)
!11780 = !DILocation(line: 283, column: 20, scope: !11778)
!11781 = !DILocation(line: 283, column: 6, scope: !11772)
!11782 = !DILocation(line: 284, column: 3, scope: !11778)
!11783 = !DILocation(line: 286, column: 6, scope: !11784)
!11784 = distinct !DILexicalBlock(scope: !11772, file: !3, line: 286, column: 6)
!11785 = !DILocation(line: 286, column: 12, scope: !11784)
!11786 = !DILocation(line: 286, column: 19, scope: !11784)
!11787 = !DILocation(line: 286, column: 6, scope: !11772)
!11788 = !DILocation(line: 287, column: 10, scope: !11784)
!11789 = !DILocation(line: 287, column: 16, scope: !11784)
!11790 = !DILocation(line: 287, column: 23, scope: !11784)
!11791 = !DILocation(line: 287, column: 33, scope: !11784)
!11792 = !DILocation(line: 287, column: 39, scope: !11784)
!11793 = !DILocation(line: 287, column: 3, scope: !11784)
!11794 = !DILocation(line: 289, column: 24, scope: !11772)
!11795 = !DILocation(line: 289, column: 30, scope: !11772)
!11796 = !DILocation(line: 289, column: 9, scope: !11772)
!11797 = !DILocation(line: 289, column: 2, scope: !11772)
!11798 = !DILocation(line: 290, column: 1, scope: !11772)
!11799 = distinct !DISubprogram(name: "nand_block_bad", scope: !3, file: !3, line: 252, type: !4406, scopeLine: 253, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11800 = !DILocalVariable(name: "chip", arg: 1, scope: !11799, file: !3, line: 252, type: !4166)
!11801 = !DILocation(line: 252, column: 45, scope: !11799)
!11802 = !DILocalVariable(name: "ofs", arg: 2, scope: !11799, file: !3, line: 252, type: !508)
!11803 = !DILocation(line: 252, column: 58, scope: !11799)
!11804 = !DILocalVariable(name: "first_page", scope: !11799, file: !3, line: 254, type: !240)
!11805 = !DILocation(line: 254, column: 6, scope: !11799)
!11806 = !DILocalVariable(name: "page_offset", scope: !11799, file: !3, line: 254, type: !240)
!11807 = !DILocation(line: 254, column: 18, scope: !11799)
!11808 = !DILocalVariable(name: "res", scope: !11799, file: !3, line: 255, type: !240)
!11809 = !DILocation(line: 255, column: 6, scope: !11799)
!11810 = !DILocalVariable(name: "bad", scope: !11799, file: !3, line: 256, type: !1372)
!11811 = !DILocation(line: 256, column: 5, scope: !11799)
!11812 = !DILocation(line: 258, column: 21, scope: !11799)
!11813 = !DILocation(line: 258, column: 28, scope: !11799)
!11814 = !DILocation(line: 258, column: 34, scope: !11799)
!11815 = !DILocation(line: 258, column: 25, scope: !11799)
!11816 = !DILocation(line: 258, column: 15, scope: !11799)
!11817 = !DILocation(line: 258, column: 48, scope: !11799)
!11818 = !DILocation(line: 258, column: 54, scope: !11799)
!11819 = !DILocation(line: 258, column: 46, scope: !11799)
!11820 = !DILocation(line: 258, column: 13, scope: !11799)
!11821 = !DILocation(line: 259, column: 39, scope: !11799)
!11822 = !DILocation(line: 259, column: 16, scope: !11799)
!11823 = !DILocation(line: 259, column: 14, scope: !11799)
!11824 = !DILocation(line: 261, column: 2, scope: !11799)
!11825 = !DILocation(line: 261, column: 9, scope: !11799)
!11826 = !DILocation(line: 261, column: 21, scope: !11799)
!11827 = !DILocation(line: 262, column: 9, scope: !11828)
!11828 = distinct !DILexicalBlock(scope: !11799, file: !3, line: 261, column: 27)
!11829 = !DILocation(line: 262, column: 15, scope: !11828)
!11830 = !DILocation(line: 262, column: 19, scope: !11828)
!11831 = !DILocation(line: 262, column: 28, scope: !11828)
!11832 = !DILocation(line: 262, column: 34, scope: !11828)
!11833 = !DILocation(line: 262, column: 47, scope: !11828)
!11834 = !DILocation(line: 262, column: 45, scope: !11828)
!11835 = !DILocation(line: 262, column: 7, scope: !11828)
!11836 = !DILocation(line: 263, column: 7, scope: !11837)
!11837 = distinct !DILexicalBlock(scope: !11828, file: !3, line: 263, column: 7)
!11838 = !DILocation(line: 263, column: 11, scope: !11837)
!11839 = !DILocation(line: 263, column: 7, scope: !11828)
!11840 = !DILocation(line: 264, column: 11, scope: !11837)
!11841 = !DILocation(line: 264, column: 4, scope: !11837)
!11842 = !DILocation(line: 266, column: 9, scope: !11828)
!11843 = !DILocation(line: 266, column: 15, scope: !11828)
!11844 = !DILocation(line: 266, column: 23, scope: !11828)
!11845 = !DILocation(line: 266, column: 29, scope: !11828)
!11846 = !DILocation(line: 266, column: 7, scope: !11828)
!11847 = !DILocation(line: 268, column: 7, scope: !11848)
!11848 = distinct !DILexicalBlock(scope: !11828, file: !3, line: 268, column: 7)
!11849 = !DILocation(line: 268, column: 7, scope: !11828)
!11850 = !DILocation(line: 269, column: 10, scope: !11848)
!11851 = !DILocation(line: 269, column: 14, scope: !11848)
!11852 = !DILocation(line: 269, column: 8, scope: !11848)
!11853 = !DILocation(line: 269, column: 4, scope: !11848)
!11854 = !DILocation(line: 271, column: 10, scope: !11848)
!11855 = !DILocation(line: 271, column: 26, scope: !11848)
!11856 = !DILocation(line: 271, column: 32, scope: !11848)
!11857 = !DILocation(line: 271, column: 24, scope: !11848)
!11858 = !DILocation(line: 271, column: 8, scope: !11848)
!11859 = !DILocation(line: 272, column: 7, scope: !11860)
!11860 = distinct !DILexicalBlock(scope: !11828, file: !3, line: 272, column: 7)
!11861 = !DILocation(line: 272, column: 7, scope: !11828)
!11862 = !DILocation(line: 273, column: 11, scope: !11860)
!11863 = !DILocation(line: 273, column: 4, scope: !11860)
!11864 = !DILocation(line: 275, column: 40, scope: !11828)
!11865 = !DILocation(line: 275, column: 46, scope: !11828)
!11866 = !DILocation(line: 275, column: 58, scope: !11828)
!11867 = !DILocation(line: 275, column: 17, scope: !11828)
!11868 = !DILocation(line: 275, column: 15, scope: !11828)
!11869 = distinct !{!11869, !11824, !11870}
!11870 = !DILocation(line: 276, column: 2, scope: !11799)
!11871 = !DILocation(line: 278, column: 2, scope: !11799)
!11872 = !DILocation(line: 279, column: 1, scope: !11799)
!11873 = distinct !DISubprogram(name: "nanddev_get_ecc_requirements", scope: !94, file: !94, line: 542, type: !11874, scopeLine: 543, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11874 = !DISubroutineType(types: !11875)
!11875 = !{!9452, !4056}
!11876 = !DILocalVariable(name: "nand", arg: 1, scope: !11873, file: !94, line: 542, type: !4056)
!11877 = !DILocation(line: 542, column: 50, scope: !11873)
!11878 = !DILocation(line: 544, column: 10, scope: !11873)
!11879 = !DILocation(line: 544, column: 16, scope: !11873)
!11880 = !DILocation(line: 544, column: 20, scope: !11873)
!11881 = !DILocation(line: 544, column: 2, scope: !11873)
!11882 = distinct !DISubprogram(name: "rawnand_dt_init", scope: !3, file: !3, line: 4998, type: !4222, scopeLine: 4999, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11883 = !DILocalVariable(name: "chip", arg: 1, scope: !11882, file: !3, line: 4998, type: !4166)
!11884 = !DILocation(line: 4998, column: 46, scope: !11882)
!11885 = !DILocalVariable(name: "nand", scope: !11882, file: !3, line: 5000, type: !4056)
!11886 = !DILocation(line: 5000, column: 22, scope: !11882)
!11887 = !DILocation(line: 5000, column: 56, scope: !11882)
!11888 = !DILocation(line: 5000, column: 44, scope: !11882)
!11889 = !DILocation(line: 5000, column: 29, scope: !11882)
!11890 = !DILocalVariable(name: "dn", scope: !11882, file: !3, line: 5001, type: !142)
!11891 = !DILocation(line: 5001, column: 22, scope: !11882)
!11892 = !DILocation(line: 5001, column: 47, scope: !11882)
!11893 = !DILocation(line: 5001, column: 27, scope: !11882)
!11894 = !DILocation(line: 5003, column: 7, scope: !11895)
!11895 = distinct !DILexicalBlock(scope: !11882, file: !3, line: 5003, column: 6)
!11896 = !DILocation(line: 5003, column: 6, scope: !11882)
!11897 = !DILocation(line: 5004, column: 3, scope: !11895)
!11898 = !DILocation(line: 5006, column: 28, scope: !11899)
!11899 = distinct !DILexicalBlock(scope: !11882, file: !3, line: 5006, column: 6)
!11900 = !DILocation(line: 5006, column: 6, scope: !11899)
!11901 = !DILocation(line: 5006, column: 32, scope: !11899)
!11902 = !DILocation(line: 5006, column: 6, scope: !11882)
!11903 = !DILocation(line: 5007, column: 3, scope: !11899)
!11904 = !DILocation(line: 5007, column: 9, scope: !11899)
!11905 = !DILocation(line: 5007, column: 17, scope: !11899)
!11906 = !DILocation(line: 5009, column: 28, scope: !11907)
!11907 = distinct !DILexicalBlock(scope: !11882, file: !3, line: 5009, column: 6)
!11908 = !DILocation(line: 5009, column: 6, scope: !11907)
!11909 = !DILocation(line: 5009, column: 6, scope: !11882)
!11910 = !DILocation(line: 5010, column: 3, scope: !11907)
!11911 = !DILocation(line: 5010, column: 9, scope: !11907)
!11912 = !DILocation(line: 5010, column: 17, scope: !11907)
!11913 = !DILocation(line: 5012, column: 31, scope: !11914)
!11914 = distinct !DILexicalBlock(scope: !11882, file: !3, line: 5012, column: 6)
!11915 = !DILocation(line: 5012, column: 6, scope: !11914)
!11916 = !DILocation(line: 5012, column: 6, scope: !11882)
!11917 = !DILocation(line: 5013, column: 3, scope: !11914)
!11918 = !DILocation(line: 5013, column: 9, scope: !11914)
!11919 = !DILocation(line: 5013, column: 21, scope: !11914)
!11920 = !DILocation(line: 5015, column: 30, scope: !11882)
!11921 = !DILocation(line: 5015, column: 2, scope: !11882)
!11922 = !DILocation(line: 5016, column: 37, scope: !11882)
!11923 = !DILocation(line: 5016, column: 2, scope: !11882)
!11924 = !DILocation(line: 5022, column: 2, scope: !11882)
!11925 = !DILocation(line: 5022, column: 8, scope: !11882)
!11926 = !DILocation(line: 5022, column: 12, scope: !11882)
!11927 = !DILocation(line: 5022, column: 21, scope: !11882)
!11928 = !DILocation(line: 5022, column: 33, scope: !11882)
!11929 = !DILocation(line: 5029, column: 6, scope: !11930)
!11930 = distinct !DILexicalBlock(scope: !11882, file: !3, line: 5029, column: 6)
!11931 = !DILocation(line: 5029, column: 12, scope: !11930)
!11932 = !DILocation(line: 5029, column: 16, scope: !11930)
!11933 = !DILocation(line: 5029, column: 26, scope: !11930)
!11934 = !DILocation(line: 5029, column: 38, scope: !11930)
!11935 = !DILocation(line: 5029, column: 6, scope: !11882)
!11936 = !DILocation(line: 5030, column: 27, scope: !11930)
!11937 = !DILocation(line: 5030, column: 33, scope: !11930)
!11938 = !DILocation(line: 5030, column: 37, scope: !11930)
!11939 = !DILocation(line: 5030, column: 47, scope: !11930)
!11940 = !DILocation(line: 5030, column: 3, scope: !11930)
!11941 = !DILocation(line: 5030, column: 9, scope: !11930)
!11942 = !DILocation(line: 5030, column: 13, scope: !11930)
!11943 = !DILocation(line: 5030, column: 25, scope: !11930)
!11944 = !DILocation(line: 5031, column: 6, scope: !11945)
!11945 = distinct !DILexicalBlock(scope: !11882, file: !3, line: 5031, column: 6)
!11946 = !DILocation(line: 5031, column: 12, scope: !11945)
!11947 = !DILocation(line: 5031, column: 16, scope: !11945)
!11948 = !DILocation(line: 5031, column: 28, scope: !11945)
!11949 = !DILocation(line: 5031, column: 6, scope: !11882)
!11950 = !DILocation(line: 5032, column: 27, scope: !11945)
!11951 = !DILocation(line: 5032, column: 33, scope: !11945)
!11952 = !DILocation(line: 5032, column: 37, scope: !11945)
!11953 = !DILocation(line: 5032, column: 46, scope: !11945)
!11954 = !DILocation(line: 5032, column: 3, scope: !11945)
!11955 = !DILocation(line: 5032, column: 9, scope: !11945)
!11956 = !DILocation(line: 5032, column: 13, scope: !11945)
!11957 = !DILocation(line: 5032, column: 25, scope: !11945)
!11958 = !DILocation(line: 5034, column: 24, scope: !11882)
!11959 = !DILocation(line: 5034, column: 30, scope: !11882)
!11960 = !DILocation(line: 5034, column: 34, scope: !11882)
!11961 = !DILocation(line: 5034, column: 44, scope: !11882)
!11962 = !DILocation(line: 5034, column: 2, scope: !11882)
!11963 = !DILocation(line: 5034, column: 8, scope: !11882)
!11964 = !DILocation(line: 5034, column: 12, scope: !11882)
!11965 = !DILocation(line: 5034, column: 22, scope: !11882)
!11966 = !DILocation(line: 5035, column: 19, scope: !11882)
!11967 = !DILocation(line: 5035, column: 25, scope: !11882)
!11968 = !DILocation(line: 5035, column: 29, scope: !11882)
!11969 = !DILocation(line: 5035, column: 39, scope: !11882)
!11970 = !DILocation(line: 5035, column: 2, scope: !11882)
!11971 = !DILocation(line: 5035, column: 8, scope: !11882)
!11972 = !DILocation(line: 5035, column: 12, scope: !11882)
!11973 = !DILocation(line: 5035, column: 17, scope: !11882)
!11974 = !DILocation(line: 5036, column: 23, scope: !11882)
!11975 = !DILocation(line: 5036, column: 29, scope: !11882)
!11976 = !DILocation(line: 5036, column: 33, scope: !11882)
!11977 = !DILocation(line: 5036, column: 43, scope: !11882)
!11978 = !DILocation(line: 5036, column: 2, scope: !11882)
!11979 = !DILocation(line: 5036, column: 8, scope: !11882)
!11980 = !DILocation(line: 5036, column: 12, scope: !11882)
!11981 = !DILocation(line: 5036, column: 21, scope: !11882)
!11982 = !DILocation(line: 5037, column: 19, scope: !11882)
!11983 = !DILocation(line: 5037, column: 25, scope: !11882)
!11984 = !DILocation(line: 5037, column: 29, scope: !11882)
!11985 = !DILocation(line: 5037, column: 39, scope: !11882)
!11986 = !DILocation(line: 5037, column: 2, scope: !11882)
!11987 = !DILocation(line: 5037, column: 8, scope: !11882)
!11988 = !DILocation(line: 5037, column: 12, scope: !11882)
!11989 = !DILocation(line: 5037, column: 17, scope: !11882)
!11990 = !DILocation(line: 5039, column: 2, scope: !11882)
!11991 = !DILocation(line: 5040, column: 1, scope: !11882)
!11992 = distinct !DISubprogram(name: "dev_name", scope: !73, file: !73, line: 609, type: !11993, scopeLine: 610, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!11993 = !DISubroutineType(types: !11994)
!11994 = !{!147, !191}
!11995 = !DILocalVariable(name: "dev", arg: 1, scope: !11992, file: !73, line: 609, type: !191)
!11996 = !DILocation(line: 609, column: 57, scope: !11992)
!11997 = !DILocation(line: 612, column: 6, scope: !11998)
!11998 = distinct !DILexicalBlock(scope: !11992, file: !73, line: 612, column: 6)
!11999 = !DILocation(line: 612, column: 11, scope: !11998)
!12000 = !DILocation(line: 612, column: 6, scope: !11992)
!12001 = !DILocation(line: 613, column: 10, scope: !11998)
!12002 = !DILocation(line: 613, column: 15, scope: !11998)
!12003 = !DILocation(line: 613, column: 3, scope: !11998)
!12004 = !DILocation(line: 615, column: 23, scope: !11992)
!12005 = !DILocation(line: 615, column: 28, scope: !11992)
!12006 = !DILocation(line: 615, column: 9, scope: !11992)
!12007 = !DILocation(line: 615, column: 2, scope: !11992)
!12008 = !DILocation(line: 616, column: 1, scope: !11992)
!12009 = distinct !DISubprogram(name: "nand_set_defaults", scope: !3, file: !3, line: 4408, type: !4218, scopeLine: 4409, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12010 = !DILocalVariable(name: "chip", arg: 1, scope: !12009, file: !3, line: 4408, type: !4166)
!12011 = !DILocation(line: 4408, column: 49, scope: !12009)
!12012 = !DILocation(line: 4411, column: 7, scope: !12013)
!12013 = distinct !DILexicalBlock(scope: !12009, file: !3, line: 4411, column: 6)
!12014 = !DILocation(line: 4411, column: 13, scope: !12013)
!12015 = !DILocation(line: 4411, column: 6, scope: !12009)
!12016 = !DILocation(line: 4412, column: 23, scope: !12017)
!12017 = distinct !DILexicalBlock(scope: !12013, file: !3, line: 4411, column: 25)
!12018 = !DILocation(line: 4412, column: 29, scope: !12017)
!12019 = !DILocation(line: 4412, column: 36, scope: !12017)
!12020 = !DILocation(line: 4412, column: 3, scope: !12017)
!12021 = !DILocation(line: 4412, column: 9, scope: !12017)
!12022 = !DILocation(line: 4412, column: 20, scope: !12017)
!12023 = !DILocation(line: 4413, column: 24, scope: !12017)
!12024 = !DILocation(line: 4413, column: 30, scope: !12017)
!12025 = !DILocation(line: 4413, column: 3, scope: !12017)
!12026 = !DILocation(line: 4414, column: 2, scope: !12017)
!12027 = !DILocation(line: 4416, column: 27, scope: !12009)
!12028 = !DILocation(line: 4416, column: 2, scope: !12009)
!12029 = !DILocation(line: 4418, column: 7, scope: !12030)
!12030 = distinct !DILexicalBlock(scope: !12009, file: !3, line: 4418, column: 6)
!12031 = !DILocation(line: 4418, column: 13, scope: !12030)
!12032 = !DILocation(line: 4418, column: 6, scope: !12009)
!12033 = !DILocation(line: 4419, column: 3, scope: !12030)
!12034 = !DILocation(line: 4419, column: 9, scope: !12030)
!12035 = !DILocation(line: 4419, column: 19, scope: !12030)
!12036 = !DILocation(line: 4420, column: 1, scope: !12009)
!12037 = distinct !DISubprogram(name: "nand_detect", scope: !3, file: !3, line: 4693, type: !12038, scopeLine: 4694, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12038 = !DISubroutineType(types: !12039)
!12039 = !{!240, !4166, !4600}
!12040 = !DILocalVariable(name: "x", arg: 1, scope: !12041, file: !5521, line: 283, type: !240)
!12041 = distinct !DISubprogram(name: "ffs", scope: !5521, file: !5521, line: 283, type: !3284, scopeLine: 284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12042 = !DILocation(line: 283, column: 36, scope: !12041, inlinedAt: !12043)
!12043 = distinct !DILocation(line: 4854, column: 22, scope: !12044)
!12044 = distinct !DILexicalBlock(scope: !12045, file: !3, line: 4853, column: 7)
!12045 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4851, column: 6)
!12046 = !DILocalVariable(name: "r", scope: !12041, file: !5521, line: 285, type: !240)
!12047 = !DILocation(line: 285, column: 6, scope: !12041, inlinedAt: !12043)
!12048 = !DILocation(line: 283, column: 36, scope: !12041, inlinedAt: !12049)
!12049 = distinct !DILocation(line: 4852, column: 22, scope: !12045)
!12050 = !DILocation(line: 285, column: 6, scope: !12041, inlinedAt: !12049)
!12051 = !DILocation(line: 283, column: 36, scope: !12041, inlinedAt: !12052)
!12052 = distinct !DILocation(line: 4850, column: 3, scope: !12037)
!12053 = !DILocation(line: 285, column: 6, scope: !12041, inlinedAt: !12052)
!12054 = !DILocation(line: 283, column: 36, scope: !12041, inlinedAt: !12055)
!12055 = distinct !DILocation(line: 4844, column: 21, scope: !12037)
!12056 = !DILocation(line: 285, column: 6, scope: !12041, inlinedAt: !12055)
!12057 = !DILocalVariable(name: "chip", arg: 1, scope: !12037, file: !3, line: 4693, type: !4166)
!12058 = !DILocation(line: 4693, column: 42, scope: !12037)
!12059 = !DILocalVariable(name: "type", arg: 2, scope: !12037, file: !3, line: 4693, type: !4600)
!12060 = !DILocation(line: 4693, column: 71, scope: !12037)
!12061 = !DILocalVariable(name: "manufacturer_desc", scope: !12037, file: !3, line: 4695, type: !4204)
!12062 = !DILocation(line: 4695, column: 39, scope: !12037)
!12063 = !DILocalVariable(name: "mtd", scope: !12037, file: !3, line: 4696, type: !2637)
!12064 = !DILocation(line: 4696, column: 19, scope: !12037)
!12065 = !DILocation(line: 4696, column: 37, scope: !12037)
!12066 = !DILocation(line: 4696, column: 25, scope: !12037)
!12067 = !DILocalVariable(name: "memorg", scope: !12037, file: !3, line: 4697, type: !8928)
!12068 = !DILocation(line: 4697, column: 35, scope: !12037)
!12069 = !DILocalVariable(name: "busw", scope: !12037, file: !3, line: 4698, type: !240)
!12070 = !DILocation(line: 4698, column: 6, scope: !12037)
!12071 = !DILocalVariable(name: "ret", scope: !12037, file: !3, line: 4698, type: !240)
!12072 = !DILocation(line: 4698, column: 12, scope: !12037)
!12073 = !DILocalVariable(name: "id_data", scope: !12037, file: !3, line: 4699, type: !4051)
!12074 = !DILocation(line: 4699, column: 6, scope: !12037)
!12075 = !DILocation(line: 4699, column: 16, scope: !12037)
!12076 = !DILocation(line: 4699, column: 22, scope: !12037)
!12077 = !DILocation(line: 4699, column: 25, scope: !12037)
!12078 = !DILocalVariable(name: "maf_id", scope: !12037, file: !3, line: 4700, type: !1372)
!12079 = !DILocation(line: 4700, column: 5, scope: !12037)
!12080 = !DILocalVariable(name: "dev_id", scope: !12037, file: !3, line: 4700, type: !1372)
!12081 = !DILocation(line: 4700, column: 13, scope: !12037)
!12082 = !DILocalVariable(name: "targetsize", scope: !12037, file: !3, line: 4701, type: !400)
!12083 = !DILocation(line: 4701, column: 6, scope: !12037)
!12084 = !DILocation(line: 4707, column: 31, scope: !12037)
!12085 = !DILocation(line: 4707, column: 37, scope: !12037)
!12086 = !DILocation(line: 4707, column: 11, scope: !12037)
!12087 = !DILocation(line: 4707, column: 9, scope: !12037)
!12088 = !DILocation(line: 4708, column: 2, scope: !12037)
!12089 = !DILocation(line: 4708, column: 10, scope: !12037)
!12090 = !DILocation(line: 4708, column: 25, scope: !12037)
!12091 = !DILocation(line: 4709, column: 2, scope: !12037)
!12092 = !DILocation(line: 4709, column: 10, scope: !12037)
!12093 = !DILocation(line: 4709, column: 26, scope: !12037)
!12094 = !DILocation(line: 4715, column: 19, scope: !12037)
!12095 = !DILocation(line: 4715, column: 8, scope: !12037)
!12096 = !DILocation(line: 4715, column: 6, scope: !12037)
!12097 = !DILocation(line: 4716, column: 6, scope: !12098)
!12098 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4716, column: 6)
!12099 = !DILocation(line: 4716, column: 6, scope: !12037)
!12100 = !DILocation(line: 4717, column: 10, scope: !12098)
!12101 = !DILocation(line: 4717, column: 3, scope: !12098)
!12102 = !DILocation(line: 4720, column: 21, scope: !12037)
!12103 = !DILocation(line: 4720, column: 2, scope: !12037)
!12104 = !DILocation(line: 4723, column: 23, scope: !12037)
!12105 = !DILocation(line: 4723, column: 32, scope: !12037)
!12106 = !DILocation(line: 4723, column: 8, scope: !12037)
!12107 = !DILocation(line: 4723, column: 6, scope: !12037)
!12108 = !DILocation(line: 4724, column: 6, scope: !12109)
!12109 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4724, column: 6)
!12110 = !DILocation(line: 4724, column: 6, scope: !12037)
!12111 = !DILocation(line: 4725, column: 10, scope: !12109)
!12112 = !DILocation(line: 4725, column: 3, scope: !12109)
!12113 = !DILocation(line: 4728, column: 11, scope: !12037)
!12114 = !DILocation(line: 4728, column: 9, scope: !12037)
!12115 = !DILocation(line: 4729, column: 11, scope: !12037)
!12116 = !DILocation(line: 4729, column: 9, scope: !12037)
!12117 = !DILocation(line: 4739, column: 23, scope: !12037)
!12118 = !DILocation(line: 4739, column: 32, scope: !12037)
!12119 = !DILocation(line: 4739, column: 8, scope: !12037)
!12120 = !DILocation(line: 4739, column: 6, scope: !12037)
!12121 = !DILocation(line: 4740, column: 6, scope: !12122)
!12122 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4740, column: 6)
!12123 = !DILocation(line: 4740, column: 6, scope: !12037)
!12124 = !DILocation(line: 4741, column: 10, scope: !12122)
!12125 = !DILocation(line: 4741, column: 3, scope: !12122)
!12126 = !DILocation(line: 4743, column: 6, scope: !12127)
!12127 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4743, column: 6)
!12128 = !DILocation(line: 4743, column: 20, scope: !12127)
!12129 = !DILocation(line: 4743, column: 17, scope: !12127)
!12130 = !DILocation(line: 4743, column: 27, scope: !12127)
!12131 = !DILocation(line: 4743, column: 30, scope: !12127)
!12132 = !DILocation(line: 4743, column: 44, scope: !12127)
!12133 = !DILocation(line: 4743, column: 41, scope: !12127)
!12134 = !DILocation(line: 4743, column: 6, scope: !12037)
!12135 = !DILocation(line: 4744, column: 3, scope: !12136)
!12136 = distinct !DILexicalBlock(scope: !12127, file: !3, line: 4743, column: 52)
!12137 = !DILocation(line: 4746, column: 3, scope: !12136)
!12138 = !DILocation(line: 4749, column: 29, scope: !12037)
!12139 = !DILocation(line: 4749, column: 17, scope: !12037)
!12140 = !DILocation(line: 4749, column: 2, scope: !12037)
!12141 = !DILocation(line: 4749, column: 8, scope: !12037)
!12142 = !DILocation(line: 4749, column: 11, scope: !12037)
!12143 = !DILocation(line: 4749, column: 15, scope: !12037)
!12144 = !DILocation(line: 4752, column: 49, scope: !12037)
!12145 = !DILocation(line: 4752, column: 22, scope: !12037)
!12146 = !DILocation(line: 4752, column: 20, scope: !12037)
!12147 = !DILocation(line: 4753, column: 28, scope: !12037)
!12148 = !DILocation(line: 4753, column: 2, scope: !12037)
!12149 = !DILocation(line: 4753, column: 8, scope: !12037)
!12150 = !DILocation(line: 4753, column: 21, scope: !12037)
!12151 = !DILocation(line: 4753, column: 26, scope: !12037)
!12152 = !DILocation(line: 4755, column: 7, scope: !12153)
!12153 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4755, column: 6)
!12154 = !DILocation(line: 4755, column: 6, scope: !12037)
!12155 = !DILocation(line: 4756, column: 8, scope: !12153)
!12156 = !DILocation(line: 4756, column: 3, scope: !12153)
!12157 = !DILocation(line: 4765, column: 9, scope: !12037)
!12158 = !DILocation(line: 4765, column: 15, scope: !12037)
!12159 = !DILocation(line: 4765, column: 23, scope: !12037)
!12160 = !DILocation(line: 4765, column: 7, scope: !12037)
!12161 = !DILocation(line: 4771, column: 2, scope: !12037)
!12162 = !DILocation(line: 4771, column: 8, scope: !12037)
!12163 = !DILocation(line: 4771, column: 16, scope: !12037)
!12164 = !DILocation(line: 4773, column: 2, scope: !12037)
!12165 = !DILocation(line: 4773, column: 9, scope: !12166)
!12166 = distinct !DILexicalBlock(scope: !12167, file: !3, line: 4773, column: 2)
!12167 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4773, column: 2)
!12168 = !DILocation(line: 4773, column: 15, scope: !12166)
!12169 = !DILocation(line: 4773, column: 20, scope: !12166)
!12170 = !DILocation(line: 4773, column: 2, scope: !12167)
!12171 = !DILocation(line: 4774, column: 23, scope: !12172)
!12172 = distinct !DILexicalBlock(scope: !12173, file: !3, line: 4774, column: 7)
!12173 = distinct !DILexicalBlock(scope: !12166, file: !3, line: 4773, column: 37)
!12174 = !DILocation(line: 4774, column: 7, scope: !12172)
!12175 = !DILocation(line: 4774, column: 7, scope: !12173)
!12176 = !DILocation(line: 4775, column: 26, scope: !12177)
!12177 = distinct !DILexicalBlock(scope: !12178, file: !3, line: 4775, column: 8)
!12178 = distinct !DILexicalBlock(scope: !12172, file: !3, line: 4774, column: 30)
!12179 = !DILocation(line: 4775, column: 32, scope: !12177)
!12180 = !DILocation(line: 4775, column: 8, scope: !12177)
!12181 = !DILocation(line: 4775, column: 8, scope: !12178)
!12182 = !DILocation(line: 4776, column: 5, scope: !12177)
!12183 = !DILocation(line: 4777, column: 3, scope: !12178)
!12184 = !DILocation(line: 4777, column: 14, scope: !12185)
!12185 = distinct !DILexicalBlock(scope: !12172, file: !3, line: 4777, column: 14)
!12186 = !DILocation(line: 4777, column: 24, scope: !12185)
!12187 = !DILocation(line: 4777, column: 30, scope: !12185)
!12188 = !DILocation(line: 4777, column: 21, scope: !12185)
!12189 = !DILocation(line: 4777, column: 14, scope: !12172)
!12190 = !DILocation(line: 4778, column: 4, scope: !12191)
!12191 = distinct !DILexicalBlock(scope: !12185, file: !3, line: 4777, column: 38)
!12192 = !DILocation(line: 4780, column: 2, scope: !12173)
!12193 = !DILocation(line: 4773, column: 33, scope: !12166)
!12194 = !DILocation(line: 4773, column: 2, scope: !12166)
!12195 = distinct !{!12195, !12170, !12196}
!12196 = !DILocation(line: 4780, column: 2, scope: !12167)
!12197 = !DILocation(line: 4782, column: 7, scope: !12198)
!12198 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4782, column: 6)
!12199 = !DILocation(line: 4782, column: 13, scope: !12198)
!12200 = !DILocation(line: 4782, column: 18, scope: !12198)
!12201 = !DILocation(line: 4782, column: 22, scope: !12198)
!12202 = !DILocation(line: 4782, column: 28, scope: !12198)
!12203 = !DILocation(line: 4782, column: 6, scope: !12037)
!12204 = !DILocation(line: 4784, column: 26, scope: !12205)
!12205 = distinct !DILexicalBlock(scope: !12198, file: !3, line: 4782, column: 38)
!12206 = !DILocation(line: 4784, column: 9, scope: !12205)
!12207 = !DILocation(line: 4784, column: 7, scope: !12205)
!12208 = !DILocation(line: 4785, column: 7, scope: !12209)
!12209 = distinct !DILexicalBlock(scope: !12205, file: !3, line: 4785, column: 7)
!12210 = !DILocation(line: 4785, column: 11, scope: !12209)
!12211 = !DILocation(line: 4785, column: 7, scope: !12205)
!12212 = !DILocation(line: 4786, column: 11, scope: !12209)
!12213 = !DILocation(line: 4786, column: 4, scope: !12209)
!12214 = !DILocation(line: 4787, column: 12, scope: !12215)
!12215 = distinct !DILexicalBlock(scope: !12209, file: !3, line: 4787, column: 12)
!12216 = !DILocation(line: 4787, column: 12, scope: !12209)
!12217 = !DILocation(line: 4788, column: 4, scope: !12215)
!12218 = !DILocation(line: 4791, column: 27, scope: !12205)
!12219 = !DILocation(line: 4791, column: 9, scope: !12205)
!12220 = !DILocation(line: 4791, column: 7, scope: !12205)
!12221 = !DILocation(line: 4792, column: 7, scope: !12222)
!12222 = distinct !DILexicalBlock(scope: !12205, file: !3, line: 4792, column: 7)
!12223 = !DILocation(line: 4792, column: 11, scope: !12222)
!12224 = !DILocation(line: 4792, column: 7, scope: !12205)
!12225 = !DILocation(line: 4793, column: 11, scope: !12222)
!12226 = !DILocation(line: 4793, column: 4, scope: !12222)
!12227 = !DILocation(line: 4794, column: 12, scope: !12228)
!12228 = distinct !DILexicalBlock(scope: !12222, file: !3, line: 4794, column: 12)
!12229 = !DILocation(line: 4794, column: 12, scope: !12222)
!12230 = !DILocation(line: 4795, column: 4, scope: !12228)
!12231 = !DILocation(line: 4796, column: 2, scope: !12205)
!12232 = !DILocation(line: 4798, column: 7, scope: !12233)
!12233 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4798, column: 6)
!12234 = !DILocation(line: 4798, column: 13, scope: !12233)
!12235 = !DILocation(line: 4798, column: 6, scope: !12037)
!12236 = !DILocation(line: 4799, column: 3, scope: !12233)
!12237 = !DILocation(line: 4801, column: 35, scope: !12037)
!12238 = !DILocation(line: 4801, column: 41, scope: !12037)
!12239 = !DILocation(line: 4801, column: 27, scope: !12037)
!12240 = !DILocation(line: 4801, column: 2, scope: !12037)
!12241 = !DILocation(line: 4801, column: 8, scope: !12037)
!12242 = !DILocation(line: 4801, column: 19, scope: !12037)
!12243 = !DILocation(line: 4801, column: 25, scope: !12037)
!12244 = !DILocation(line: 4802, column: 7, scope: !12245)
!12245 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4802, column: 6)
!12246 = !DILocation(line: 4802, column: 13, scope: !12245)
!12247 = !DILocation(line: 4802, column: 24, scope: !12245)
!12248 = !DILocation(line: 4802, column: 6, scope: !12037)
!12249 = !DILocation(line: 4803, column: 3, scope: !12245)
!12250 = !DILocation(line: 4805, column: 7, scope: !12251)
!12251 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4805, column: 6)
!12252 = !DILocation(line: 4805, column: 13, scope: !12251)
!12253 = !DILocation(line: 4805, column: 6, scope: !12037)
!12254 = !DILocation(line: 4806, column: 28, scope: !12251)
!12255 = !DILocation(line: 4806, column: 3, scope: !12251)
!12256 = !DILocation(line: 4808, column: 18, scope: !12251)
!12257 = !DILocation(line: 4808, column: 24, scope: !12251)
!12258 = !DILocation(line: 4808, column: 3, scope: !12251)
!12259 = !DILocation(line: 4811, column: 19, scope: !12037)
!12260 = !DILocation(line: 4811, column: 25, scope: !12037)
!12261 = !DILocation(line: 4811, column: 2, scope: !12037)
!12262 = !DILocation(line: 4811, column: 8, scope: !12037)
!12263 = !DILocation(line: 4811, column: 16, scope: !12037)
!12264 = !DILocalVariable(name: "_tmp", scope: !12265, file: !3, line: 4814, type: !402)
!12265 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4814, column: 4)
!12266 = !DILocation(line: 4814, column: 4, scope: !12265)
!12267 = !DILocalVariable(name: "__base", scope: !12268, file: !3, line: 4814, type: !536)
!12268 = distinct !DILexicalBlock(scope: !12265, file: !3, line: 4814, column: 4)
!12269 = !DILocation(line: 4814, column: 4, scope: !12268)
!12270 = !DILocalVariable(name: "__rem", scope: !12268, file: !3, line: 4814, type: !536)
!12271 = !DILocation(line: 4814, column: 4, scope: !12037)
!12272 = !DILocation(line: 4813, column: 2, scope: !12037)
!12273 = !DILocation(line: 4813, column: 10, scope: !12037)
!12274 = !DILocation(line: 4813, column: 30, scope: !12037)
!12275 = !DILabel(scope: !12037, name: "ident_done", file: !3, line: 4818)
!12276 = !DILocation(line: 4818, column: 1, scope: !12037)
!12277 = !DILocation(line: 4819, column: 7, scope: !12278)
!12278 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4819, column: 6)
!12279 = !DILocation(line: 4819, column: 12, scope: !12278)
!12280 = !DILocation(line: 4819, column: 6, scope: !12037)
!12281 = !DILocation(line: 4820, column: 15, scope: !12278)
!12282 = !DILocation(line: 4820, column: 21, scope: !12278)
!12283 = !DILocation(line: 4820, column: 32, scope: !12278)
!12284 = !DILocation(line: 4820, column: 3, scope: !12278)
!12285 = !DILocation(line: 4820, column: 8, scope: !12278)
!12286 = !DILocation(line: 4820, column: 13, scope: !12278)
!12287 = !DILocation(line: 4822, column: 6, scope: !12288)
!12288 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4822, column: 6)
!12289 = !DILocation(line: 4822, column: 12, scope: !12288)
!12290 = !DILocation(line: 4822, column: 20, scope: !12288)
!12291 = !DILocation(line: 4822, column: 6, scope: !12037)
!12292 = !DILocalVariable(name: "__ret_warn_on", scope: !12293, file: !3, line: 4823, type: !240)
!12293 = distinct !DILexicalBlock(scope: !12294, file: !3, line: 4823, column: 3)
!12294 = distinct !DILexicalBlock(scope: !12288, file: !3, line: 4822, column: 42)
!12295 = !DILocation(line: 4823, column: 3, scope: !12293)
!12296 = !DILocation(line: 4823, column: 3, scope: !12297)
!12297 = distinct !DILexicalBlock(scope: !12293, file: !3, line: 4823, column: 3)
!12298 = !DILocation(line: 4823, column: 3, scope: !12299)
!12299 = distinct !DILexicalBlock(scope: !12297, file: !3, line: 4823, column: 3)
!12300 = !DILocation(line: 4823, column: 3, scope: !12301)
!12301 = distinct !DILexicalBlock(scope: !12299, file: !3, line: 4823, column: 3)
!12302 = !DILocation(line: 4823, column: 3, scope: !12303)
!12303 = distinct !DILexicalBlock(scope: !12299, file: !3, line: 4823, column: 3)
!12304 = !{i32 -2141528289, i32 -2141528260, i32 -2141528214, i32 -2141528156, i32 -2141528102, i32 -2141528048, i32 -2141527993, i32 -2141527962}
!12305 = !DILocation(line: 4823, column: 3, scope: !12306)
!12306 = distinct !DILexicalBlock(scope: !12299, file: !3, line: 4823, column: 3)
!12307 = !{i32 -2141527547, i32 -2141527540, i32 -2141527488, i32 -2141527457, i32 -2141527427}
!12308 = !DILocation(line: 4823, column: 3, scope: !12309)
!12309 = distinct !DILexicalBlock(scope: !12299, file: !3, line: 4823, column: 3)
!12310 = !DILocation(line: 4824, column: 21, scope: !12294)
!12311 = !DILocation(line: 4824, column: 3, scope: !12294)
!12312 = !DILocation(line: 4825, column: 2, scope: !12294)
!12313 = !DILocation(line: 4825, column: 13, scope: !12314)
!12314 = distinct !DILexicalBlock(scope: !12288, file: !3, line: 4825, column: 13)
!12315 = !DILocation(line: 4825, column: 22, scope: !12314)
!12316 = !DILocation(line: 4825, column: 28, scope: !12314)
!12317 = !DILocation(line: 4825, column: 36, scope: !12314)
!12318 = !DILocation(line: 4825, column: 18, scope: !12314)
!12319 = !DILocation(line: 4825, column: 13, scope: !12288)
!12320 = !DILocation(line: 4830, column: 3, scope: !12321)
!12321 = distinct !DILexicalBlock(scope: !12314, file: !3, line: 4825, column: 57)
!12322 = !DILocation(line: 4832, column: 3, scope: !12321)
!12323 = !DILocation(line: 4834, column: 3, scope: !12321)
!12324 = !DILocation(line: 4836, column: 7, scope: !12321)
!12325 = !DILocation(line: 4838, column: 3, scope: !12321)
!12326 = !DILocation(line: 4841, column: 26, scope: !12037)
!12327 = !DILocation(line: 4841, column: 2, scope: !12037)
!12328 = !DILocation(line: 4844, column: 25, scope: !12037)
!12329 = !DILocation(line: 4844, column: 30, scope: !12037)
!12330 = !DILocation(line: 299, column: 14, scope: !12041, inlinedAt: !12055)
!12331 = !DILocation(line: 297, column: 2, scope: !12041, inlinedAt: !12055)
!12332 = !{i32 453463}
!12333 = !DILocation(line: 310, column: 9, scope: !12041, inlinedAt: !12055)
!12334 = !DILocation(line: 310, column: 11, scope: !12041, inlinedAt: !12055)
!12335 = !DILocation(line: 4844, column: 41, scope: !12037)
!12336 = !DILocation(line: 4844, column: 2, scope: !12037)
!12337 = !DILocation(line: 4844, column: 8, scope: !12037)
!12338 = !DILocation(line: 4844, column: 19, scope: !12037)
!12339 = !DILocation(line: 4846, column: 36, scope: !12037)
!12340 = !DILocation(line: 4846, column: 42, scope: !12037)
!12341 = !DILocation(line: 4846, column: 15, scope: !12037)
!12342 = !DILocation(line: 4846, column: 13, scope: !12037)
!12343 = !DILocation(line: 4847, column: 20, scope: !12037)
!12344 = !DILocation(line: 4847, column: 34, scope: !12037)
!12345 = !DILocation(line: 4847, column: 40, scope: !12037)
!12346 = !DILocation(line: 4847, column: 31, scope: !12037)
!12347 = !DILocation(line: 4847, column: 52, scope: !12037)
!12348 = !DILocation(line: 4847, column: 19, scope: !12037)
!12349 = !DILocation(line: 4847, column: 2, scope: !12037)
!12350 = !DILocation(line: 4847, column: 8, scope: !12037)
!12351 = !DILocation(line: 4847, column: 17, scope: !12037)
!12352 = !DILocation(line: 4850, column: 7, scope: !12037)
!12353 = !DILocation(line: 4850, column: 12, scope: !12037)
!12354 = !DILocation(line: 299, column: 14, scope: !12041, inlinedAt: !12052)
!12355 = !DILocation(line: 297, column: 2, scope: !12041, inlinedAt: !12052)
!12356 = !DILocation(line: 310, column: 9, scope: !12041, inlinedAt: !12052)
!12357 = !DILocation(line: 310, column: 11, scope: !12041, inlinedAt: !12052)
!12358 = !DILocation(line: 4850, column: 23, scope: !12037)
!12359 = !DILocation(line: 4849, column: 26, scope: !12037)
!12360 = !DILocation(line: 4849, column: 32, scope: !12037)
!12361 = !DILocation(line: 4849, column: 49, scope: !12037)
!12362 = !DILocation(line: 4849, column: 2, scope: !12037)
!12363 = !DILocation(line: 4849, column: 8, scope: !12037)
!12364 = !DILocation(line: 4849, column: 24, scope: !12037)
!12365 = !DILocation(line: 4851, column: 6, scope: !12045)
!12366 = !DILocation(line: 4851, column: 17, scope: !12045)
!12367 = !DILocation(line: 4851, column: 6, scope: !12037)
!12368 = !DILocation(line: 4852, column: 36, scope: !12045)
!12369 = !DILocation(line: 4852, column: 26, scope: !12045)
!12370 = !DILocation(line: 299, column: 14, scope: !12041, inlinedAt: !12049)
!12371 = !DILocation(line: 297, column: 2, scope: !12041, inlinedAt: !12049)
!12372 = !DILocation(line: 310, column: 9, scope: !12041, inlinedAt: !12049)
!12373 = !DILocation(line: 310, column: 11, scope: !12041, inlinedAt: !12049)
!12374 = !DILocation(line: 4852, column: 48, scope: !12045)
!12375 = !DILocation(line: 4852, column: 3, scope: !12045)
!12376 = !DILocation(line: 4852, column: 9, scope: !12045)
!12377 = !DILocation(line: 4852, column: 20, scope: !12045)
!12378 = !DILocation(line: 4854, column: 37, scope: !12044)
!12379 = !DILocation(line: 4854, column: 48, scope: !12044)
!12380 = !DILocation(line: 4854, column: 26, scope: !12044)
!12381 = !DILocation(line: 299, column: 14, scope: !12041, inlinedAt: !12043)
!12382 = !DILocation(line: 297, column: 2, scope: !12041, inlinedAt: !12043)
!12383 = !DILocation(line: 310, column: 9, scope: !12041, inlinedAt: !12043)
!12384 = !DILocation(line: 310, column: 11, scope: !12041, inlinedAt: !12043)
!12385 = !DILocation(line: 4854, column: 3, scope: !12044)
!12386 = !DILocation(line: 4854, column: 9, scope: !12044)
!12387 = !DILocation(line: 4854, column: 20, scope: !12044)
!12388 = !DILocation(line: 4855, column: 3, scope: !12044)
!12389 = !DILocation(line: 4855, column: 9, scope: !12044)
!12390 = !DILocation(line: 4855, column: 20, scope: !12044)
!12391 = !DILocation(line: 4858, column: 6, scope: !12392)
!12392 = distinct !DILexicalBlock(scope: !12037, file: !3, line: 4858, column: 6)
!12393 = !DILocation(line: 4858, column: 12, scope: !12392)
!12394 = !DILocation(line: 4858, column: 25, scope: !12392)
!12395 = !DILocation(line: 4858, column: 31, scope: !12392)
!12396 = !DILocation(line: 4858, column: 23, scope: !12392)
!12397 = !DILocation(line: 4858, column: 42, scope: !12392)
!12398 = !DILocation(line: 4858, column: 6, scope: !12037)
!12399 = !DILocation(line: 4859, column: 3, scope: !12392)
!12400 = !DILocation(line: 4859, column: 9, scope: !12392)
!12401 = !DILocation(line: 4859, column: 17, scope: !12392)
!12402 = !DILocation(line: 4861, column: 2, scope: !12037)
!12403 = !DILocation(line: 4861, column: 8, scope: !12037)
!12404 = !DILocation(line: 4861, column: 21, scope: !12037)
!12405 = !DILocation(line: 4863, column: 29, scope: !12037)
!12406 = !DILocation(line: 4863, column: 2, scope: !12037)
!12407 = !DILocation(line: 4865, column: 2, scope: !12037)
!12408 = !DILocation(line: 4867, column: 2, scope: !12037)
!12409 = !DILocation(line: 4869, column: 2, scope: !12037)
!12410 = !DILocation(line: 4872, column: 2, scope: !12037)
!12411 = !DILabel(scope: !12037, name: "free_detect_allocation", file: !3, line: 4874)
!12412 = !DILocation(line: 4874, column: 1, scope: !12037)
!12413 = !DILocation(line: 4875, column: 8, scope: !12037)
!12414 = !DILocation(line: 4875, column: 14, scope: !12037)
!12415 = !DILocation(line: 4875, column: 25, scope: !12037)
!12416 = !DILocation(line: 4875, column: 2, scope: !12037)
!12417 = !DILocation(line: 4877, column: 9, scope: !12037)
!12418 = !DILocation(line: 4877, column: 2, scope: !12037)
!12419 = !DILocation(line: 4878, column: 1, scope: !12037)
!12420 = distinct !DISubprogram(name: "nanddev_target_size", scope: !94, file: !94, line: 469, type: !12421, scopeLine: 470, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12421 = !DISubroutineType(types: !12422)
!12422 = !{!400, !4883}
!12423 = !DILocalVariable(name: "nand", arg: 1, scope: !12420, file: !94, line: 469, type: !4883)
!12424 = !DILocation(line: 469, column: 65, scope: !12420)
!12425 = !DILocation(line: 471, column: 14, scope: !12420)
!12426 = !DILocation(line: 471, column: 20, scope: !12420)
!12427 = !DILocation(line: 471, column: 27, scope: !12420)
!12428 = !DILocation(line: 471, column: 9, scope: !12420)
!12429 = !DILocation(line: 472, column: 9, scope: !12420)
!12430 = !DILocation(line: 472, column: 15, scope: !12420)
!12431 = !DILocation(line: 472, column: 22, scope: !12420)
!12432 = !DILocation(line: 471, column: 43, scope: !12420)
!12433 = !DILocation(line: 473, column: 9, scope: !12420)
!12434 = !DILocation(line: 473, column: 15, scope: !12420)
!12435 = !DILocation(line: 473, column: 22, scope: !12420)
!12436 = !DILocation(line: 472, column: 42, scope: !12420)
!12437 = !DILocation(line: 474, column: 9, scope: !12420)
!12438 = !DILocation(line: 474, column: 15, scope: !12420)
!12439 = !DILocation(line: 474, column: 22, scope: !12420)
!12440 = !DILocation(line: 473, column: 43, scope: !12420)
!12441 = !DILocation(line: 471, column: 2, scope: !12420)
!12442 = distinct !DISubprogram(name: "nand_get_flash_node", scope: !117, file: !117, line: 1184, type: !12443, scopeLine: 1185, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12443 = !DISubroutineType(types: !12444)
!12444 = !{!142, !4166}
!12445 = !DILocalVariable(name: "chip", arg: 1, scope: !12442, file: !117, line: 1184, type: !4166)
!12446 = !DILocation(line: 1184, column: 73, scope: !12442)
!12447 = !DILocation(line: 1186, column: 37, scope: !12442)
!12448 = !DILocation(line: 1186, column: 25, scope: !12442)
!12449 = !DILocation(line: 1186, column: 9, scope: !12442)
!12450 = !DILocation(line: 1186, column: 2, scope: !12442)
!12451 = distinct !DISubprogram(name: "of_get_nand_bus_width", scope: !3, file: !3, line: 4977, type: !12452, scopeLine: 4978, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12452 = !DISubroutineType(types: !12453)
!12453 = !{!240, !142}
!12454 = !DILocalVariable(name: "np", arg: 1, scope: !12451, file: !3, line: 4977, type: !142)
!12455 = !DILocation(line: 4977, column: 54, scope: !12451)
!12456 = !DILocalVariable(name: "val", scope: !12451, file: !3, line: 4979, type: !152)
!12457 = !DILocation(line: 4979, column: 6, scope: !12451)
!12458 = !DILocation(line: 4981, column: 27, scope: !12459)
!12459 = distinct !DILexicalBlock(scope: !12451, file: !3, line: 4981, column: 6)
!12460 = !DILocation(line: 4981, column: 6, scope: !12459)
!12461 = !DILocation(line: 4981, column: 6, scope: !12451)
!12462 = !DILocation(line: 4982, column: 3, scope: !12459)
!12463 = !DILocation(line: 4984, column: 10, scope: !12451)
!12464 = !DILocation(line: 4984, column: 2, scope: !12451)
!12465 = !DILocation(line: 4987, column: 10, scope: !12466)
!12466 = distinct !DILexicalBlock(scope: !12451, file: !3, line: 4984, column: 15)
!12467 = !DILocation(line: 4987, column: 3, scope: !12466)
!12468 = !DILocation(line: 4989, column: 3, scope: !12466)
!12469 = !DILocation(line: 4991, column: 1, scope: !12451)
!12470 = distinct !DISubprogram(name: "of_property_read_bool", scope: !144, file: !144, line: 1192, type: !12471, scopeLine: 1194, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12471 = !DISubroutineType(types: !12472)
!12472 = !{!180, !12473, !147}
!12473 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12474, size: 64)
!12474 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !143)
!12475 = !DILocalVariable(name: "np", arg: 1, scope: !12470, file: !144, line: 1192, type: !12473)
!12476 = !DILocation(line: 1192, column: 68, scope: !12470)
!12477 = !DILocalVariable(name: "propname", arg: 2, scope: !12470, file: !144, line: 1193, type: !147)
!12478 = !DILocation(line: 1193, column: 19, scope: !12470)
!12479 = !DILocalVariable(name: "prop", scope: !12470, file: !144, line: 1195, type: !4020)
!12480 = !DILocation(line: 1195, column: 19, scope: !12470)
!12481 = !DILocation(line: 1195, column: 43, scope: !12470)
!12482 = !DILocation(line: 1195, column: 47, scope: !12470)
!12483 = !DILocation(line: 1195, column: 26, scope: !12470)
!12484 = !DILocation(line: 1197, column: 9, scope: !12470)
!12485 = !DILocation(line: 1197, column: 2, scope: !12470)
!12486 = distinct !DISubprogram(name: "of_get_nand_on_flash_bbt", scope: !3, file: !3, line: 4993, type: !12487, scopeLine: 4994, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12487 = !DISubroutineType(types: !12488)
!12488 = !{!180, !142}
!12489 = !DILocalVariable(name: "np", arg: 1, scope: !12486, file: !3, line: 4993, type: !142)
!12490 = !DILocation(line: 4993, column: 58, scope: !12486)
!12491 = !DILocation(line: 4995, column: 31, scope: !12486)
!12492 = !DILocation(line: 4995, column: 9, scope: !12486)
!12493 = !DILocation(line: 4995, column: 2, scope: !12486)
!12494 = distinct !DISubprogram(name: "of_get_nand_ecc_legacy_user_config", scope: !3, file: !3, line: 4962, type: !4218, scopeLine: 4963, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12495 = !DILocalVariable(name: "chip", arg: 1, scope: !12494, file: !3, line: 4962, type: !4166)
!12496 = !DILocation(line: 4962, column: 66, scope: !12494)
!12497 = !DILocalVariable(name: "dn", scope: !12494, file: !3, line: 4964, type: !142)
!12498 = !DILocation(line: 4964, column: 22, scope: !12494)
!12499 = !DILocation(line: 4964, column: 47, scope: !12494)
!12500 = !DILocation(line: 4964, column: 27, scope: !12494)
!12501 = !DILocalVariable(name: "user_conf", scope: !12494, file: !3, line: 4965, type: !12502)
!12502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4076, size: 64)
!12503 = !DILocation(line: 4965, column: 25, scope: !12494)
!12504 = !DILocation(line: 4965, column: 38, scope: !12494)
!12505 = !DILocation(line: 4965, column: 44, scope: !12494)
!12506 = !DILocation(line: 4965, column: 49, scope: !12494)
!12507 = !DILocation(line: 4965, column: 53, scope: !12494)
!12508 = !DILocation(line: 4967, column: 6, scope: !12509)
!12509 = distinct !DILexicalBlock(scope: !12494, file: !3, line: 4967, column: 6)
!12510 = !DILocation(line: 4967, column: 17, scope: !12509)
!12511 = !DILocation(line: 4967, column: 29, scope: !12509)
!12512 = !DILocation(line: 4967, column: 6, scope: !12494)
!12513 = !DILocation(line: 4968, column: 66, scope: !12509)
!12514 = !DILocation(line: 4968, column: 28, scope: !12509)
!12515 = !DILocation(line: 4968, column: 3, scope: !12509)
!12516 = !DILocation(line: 4968, column: 14, scope: !12509)
!12517 = !DILocation(line: 4968, column: 26, scope: !12509)
!12518 = !DILocation(line: 4970, column: 6, scope: !12519)
!12519 = distinct !DILexicalBlock(scope: !12494, file: !3, line: 4970, column: 6)
!12520 = !DILocation(line: 4970, column: 17, scope: !12519)
!12521 = !DILocation(line: 4970, column: 22, scope: !12519)
!12522 = !DILocation(line: 4970, column: 6, scope: !12494)
!12523 = !DILocation(line: 4971, column: 52, scope: !12519)
!12524 = !DILocation(line: 4971, column: 21, scope: !12519)
!12525 = !DILocation(line: 4971, column: 3, scope: !12519)
!12526 = !DILocation(line: 4971, column: 14, scope: !12519)
!12527 = !DILocation(line: 4971, column: 19, scope: !12519)
!12528 = !DILocation(line: 4973, column: 6, scope: !12529)
!12529 = distinct !DILexicalBlock(scope: !12494, file: !3, line: 4973, column: 6)
!12530 = !DILocation(line: 4973, column: 17, scope: !12529)
!12531 = !DILocation(line: 4973, column: 27, scope: !12529)
!12532 = !DILocation(line: 4973, column: 6, scope: !12494)
!12533 = !DILocation(line: 4974, column: 62, scope: !12529)
!12534 = !DILocation(line: 4974, column: 26, scope: !12529)
!12535 = !DILocation(line: 4974, column: 3, scope: !12529)
!12536 = !DILocation(line: 4974, column: 14, scope: !12529)
!12537 = !DILocation(line: 4974, column: 24, scope: !12529)
!12538 = !DILocation(line: 4975, column: 1, scope: !12494)
!12539 = distinct !DISubprogram(name: "mtd_get_of_node", scope: !2639, file: !2639, line: 463, type: !12540, scopeLine: 464, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12540 = !DISubroutineType(types: !12541)
!12541 = !{!142, !2637}
!12542 = !DILocalVariable(name: "mtd", arg: 1, scope: !12539, file: !2639, line: 463, type: !2637)
!12543 = !DILocation(line: 463, column: 68, scope: !12539)
!12544 = !DILocation(line: 465, column: 22, scope: !12539)
!12545 = !DILocation(line: 465, column: 27, scope: !12539)
!12546 = !DILocation(line: 465, column: 9, scope: !12539)
!12547 = !DILocation(line: 465, column: 2, scope: !12539)
!12548 = distinct !DISubprogram(name: "dev_of_node", scope: !73, file: !73, line: 754, type: !12549, scopeLine: 755, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12549 = !DISubroutineType(types: !12550)
!12550 = !{!142, !3605}
!12551 = !DILocalVariable(name: "dev", arg: 1, scope: !12548, file: !73, line: 754, type: !3605)
!12552 = !DILocation(line: 754, column: 62, scope: !12548)
!12553 = !DILocation(line: 756, column: 33, scope: !12554)
!12554 = distinct !DILexicalBlock(scope: !12548, file: !73, line: 756, column: 6)
!12555 = !DILocation(line: 756, column: 6, scope: !12548)
!12556 = !DILocation(line: 757, column: 3, scope: !12554)
!12557 = !DILocation(line: 758, column: 9, scope: !12548)
!12558 = !DILocation(line: 758, column: 14, scope: !12548)
!12559 = !DILocation(line: 758, column: 2, scope: !12548)
!12560 = !DILocation(line: 759, column: 1, scope: !12548)
!12561 = distinct !DISubprogram(name: "of_property_read_u32", scope: !144, file: !144, line: 1214, type: !12562, scopeLine: 1217, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12562 = !DISubroutineType(types: !12563)
!12563 = !{!240, !12473, !147, !1435}
!12564 = !DILocalVariable(name: "np", arg: 1, scope: !12561, file: !144, line: 1214, type: !12473)
!12565 = !DILocation(line: 1214, column: 66, scope: !12561)
!12566 = !DILocalVariable(name: "propname", arg: 2, scope: !12561, file: !144, line: 1215, type: !147)
!12567 = !DILocation(line: 1215, column: 24, scope: !12561)
!12568 = !DILocalVariable(name: "out_value", arg: 3, scope: !12561, file: !144, line: 1216, type: !1435)
!12569 = !DILocation(line: 1216, column: 17, scope: !12561)
!12570 = !DILocation(line: 1218, column: 36, scope: !12561)
!12571 = !DILocation(line: 1218, column: 40, scope: !12561)
!12572 = !DILocation(line: 1218, column: 50, scope: !12561)
!12573 = !DILocation(line: 1218, column: 9, scope: !12561)
!12574 = !DILocation(line: 1218, column: 2, scope: !12561)
!12575 = distinct !DISubprogram(name: "of_property_read_u32_array", scope: !144, file: !144, line: 494, type: !12576, scopeLine: 497, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12576 = !DISubroutineType(types: !12577)
!12577 = !{!240, !12473, !147, !1435, !303}
!12578 = !DILocalVariable(name: "np", arg: 1, scope: !12575, file: !144, line: 494, type: !12473)
!12579 = !DILocation(line: 494, column: 72, scope: !12575)
!12580 = !DILocalVariable(name: "propname", arg: 2, scope: !12575, file: !144, line: 495, type: !147)
!12581 = !DILocation(line: 495, column: 23, scope: !12575)
!12582 = !DILocalVariable(name: "out_values", arg: 3, scope: !12575, file: !144, line: 496, type: !1435)
!12583 = !DILocation(line: 496, column: 16, scope: !12575)
!12584 = !DILocalVariable(name: "sz", arg: 4, scope: !12575, file: !144, line: 496, type: !303)
!12585 = !DILocation(line: 496, column: 35, scope: !12575)
!12586 = !DILocalVariable(name: "ret", scope: !12575, file: !144, line: 498, type: !240)
!12587 = !DILocation(line: 498, column: 6, scope: !12575)
!12588 = !DILocation(line: 498, column: 48, scope: !12575)
!12589 = !DILocation(line: 498, column: 52, scope: !12575)
!12590 = !DILocation(line: 498, column: 62, scope: !12575)
!12591 = !DILocation(line: 499, column: 13, scope: !12575)
!12592 = !DILocation(line: 498, column: 12, scope: !12575)
!12593 = !DILocation(line: 500, column: 6, scope: !12594)
!12594 = distinct !DILexicalBlock(scope: !12575, file: !144, line: 500, column: 6)
!12595 = !DILocation(line: 500, column: 10, scope: !12594)
!12596 = !DILocation(line: 500, column: 6, scope: !12575)
!12597 = !DILocation(line: 501, column: 3, scope: !12594)
!12598 = !DILocation(line: 503, column: 10, scope: !12594)
!12599 = !DILocation(line: 503, column: 3, scope: !12594)
!12600 = !DILocation(line: 504, column: 1, scope: !12575)
!12601 = !DILocalVariable(name: "np", arg: 1, scope: !139, file: !3, line: 4881, type: !142)
!12602 = !DILocation(line: 4881, column: 59, scope: !139)
!12603 = !DILocalVariable(name: "nand_ecc_legacy_modes", scope: !139, file: !3, line: 4892, type: !12604)
!12604 = !DICompositeType(tag: DW_TAG_array_type, baseType: !12605, size: 448, elements: !12606)
!12605 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !147)
!12606 = !{!12607}
!12607 = !DISubrange(count: 7)
!12608 = !DILocation(line: 4892, column: 21, scope: !139)
!12609 = !DILocalVariable(name: "eng_type", scope: !139, file: !3, line: 4900, type: !138)
!12610 = !DILocation(line: 4900, column: 28, scope: !139)
!12611 = !DILocalVariable(name: "pm", scope: !139, file: !3, line: 4901, type: !147)
!12612 = !DILocation(line: 4901, column: 14, scope: !139)
!12613 = !DILocalVariable(name: "err", scope: !139, file: !3, line: 4902, type: !240)
!12614 = !DILocation(line: 4902, column: 6, scope: !139)
!12615 = !DILocation(line: 4904, column: 32, scope: !139)
!12616 = !DILocation(line: 4904, column: 8, scope: !139)
!12617 = !DILocation(line: 4904, column: 6, scope: !139)
!12618 = !DILocation(line: 4905, column: 6, scope: !12619)
!12619 = distinct !DILexicalBlock(scope: !139, file: !3, line: 4905, column: 6)
!12620 = !DILocation(line: 4905, column: 6, scope: !139)
!12621 = !DILocation(line: 4906, column: 3, scope: !12619)
!12622 = !DILocation(line: 4908, column: 16, scope: !12623)
!12623 = distinct !DILexicalBlock(scope: !139, file: !3, line: 4908, column: 2)
!12624 = !DILocation(line: 4908, column: 7, scope: !12623)
!12625 = !DILocation(line: 4909, column: 7, scope: !12626)
!12626 = distinct !DILexicalBlock(scope: !12623, file: !3, line: 4908, column: 2)
!12627 = !DILocation(line: 4909, column: 16, scope: !12626)
!12628 = !DILocation(line: 4908, column: 2, scope: !12623)
!12629 = !DILocation(line: 4910, column: 19, scope: !12630)
!12630 = distinct !DILexicalBlock(scope: !12631, file: !3, line: 4910, column: 7)
!12631 = distinct !DILexicalBlock(scope: !12626, file: !3, line: 4909, column: 65)
!12632 = !DILocation(line: 4910, column: 45, scope: !12630)
!12633 = !DILocation(line: 4910, column: 23, scope: !12630)
!12634 = !DILocation(line: 4910, column: 8, scope: !12630)
!12635 = !DILocation(line: 4910, column: 7, scope: !12631)
!12636 = !DILocation(line: 4911, column: 12, scope: !12637)
!12637 = distinct !DILexicalBlock(scope: !12630, file: !3, line: 4910, column: 57)
!12638 = !DILocation(line: 4911, column: 4, scope: !12637)
!12639 = !DILocation(line: 4913, column: 5, scope: !12640)
!12640 = distinct !DILexicalBlock(scope: !12637, file: !3, line: 4911, column: 22)
!12641 = !DILocation(line: 4916, column: 5, scope: !12640)
!12642 = !DILocation(line: 4919, column: 5, scope: !12640)
!12643 = !DILocation(line: 4921, column: 5, scope: !12640)
!12644 = !DILocation(line: 4923, column: 5, scope: !12640)
!12645 = !DILocation(line: 4925, column: 3, scope: !12637)
!12646 = !DILocation(line: 4926, column: 2, scope: !12631)
!12647 = !DILocation(line: 4909, column: 61, scope: !12626)
!12648 = !DILocation(line: 4908, column: 2, scope: !12626)
!12649 = distinct !{!12649, !12628, !12650}
!12650 = !DILocation(line: 4926, column: 2, scope: !12623)
!12651 = !DILocation(line: 4928, column: 2, scope: !139)
!12652 = !DILocation(line: 4929, column: 1, scope: !139)
!12653 = distinct !DISubprogram(name: "of_get_rawnand_ecc_algo_legacy", scope: !3, file: !3, line: 4946, type: !12654, scopeLine: 4947, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12654 = !DISubroutineType(types: !12655)
!12655 = !{!106, !142}
!12656 = !DILocalVariable(name: "np", arg: 1, scope: !12653, file: !3, line: 4946, type: !142)
!12657 = !DILocation(line: 4946, column: 78, scope: !12653)
!12658 = !DILocalVariable(name: "pm", scope: !12653, file: !3, line: 4948, type: !147)
!12659 = !DILocation(line: 4948, column: 14, scope: !12653)
!12660 = !DILocalVariable(name: "err", scope: !12653, file: !3, line: 4949, type: !240)
!12661 = !DILocation(line: 4949, column: 6, scope: !12653)
!12662 = !DILocation(line: 4951, column: 32, scope: !12653)
!12663 = !DILocation(line: 4951, column: 8, scope: !12653)
!12664 = !DILocation(line: 4951, column: 6, scope: !12653)
!12665 = !DILocation(line: 4952, column: 7, scope: !12666)
!12666 = distinct !DILexicalBlock(scope: !12653, file: !3, line: 4952, column: 6)
!12667 = !DILocation(line: 4952, column: 6, scope: !12653)
!12668 = !DILocation(line: 4953, column: 19, scope: !12669)
!12669 = distinct !DILexicalBlock(scope: !12670, file: !3, line: 4953, column: 7)
!12670 = distinct !DILexicalBlock(scope: !12666, file: !3, line: 4952, column: 12)
!12671 = !DILocation(line: 4953, column: 8, scope: !12669)
!12672 = !DILocation(line: 4953, column: 7, scope: !12670)
!12673 = !DILocation(line: 4954, column: 4, scope: !12669)
!12674 = !DILocation(line: 4955, column: 24, scope: !12675)
!12675 = distinct !DILexicalBlock(scope: !12669, file: !3, line: 4955, column: 12)
!12676 = !DILocation(line: 4955, column: 13, scope: !12675)
!12677 = !DILocation(line: 4955, column: 12, scope: !12669)
!12678 = !DILocation(line: 4956, column: 4, scope: !12675)
!12679 = !DILocation(line: 4957, column: 2, scope: !12670)
!12680 = !DILocation(line: 4959, column: 2, scope: !12653)
!12681 = !DILocation(line: 4960, column: 1, scope: !12653)
!12682 = distinct !DISubprogram(name: "of_get_rawnand_ecc_placement_legacy", scope: !3, file: !3, line: 4932, type: !12683, scopeLine: 4933, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12683 = !DISubroutineType(types: !12684)
!12684 = !{!101, !142}
!12685 = !DILocalVariable(name: "np", arg: 1, scope: !12682, file: !3, line: 4932, type: !142)
!12686 = !DILocation(line: 4932, column: 57, scope: !12682)
!12687 = !DILocalVariable(name: "pm", scope: !12682, file: !3, line: 4934, type: !147)
!12688 = !DILocation(line: 4934, column: 14, scope: !12682)
!12689 = !DILocalVariable(name: "err", scope: !12682, file: !3, line: 4935, type: !240)
!12690 = !DILocation(line: 4935, column: 6, scope: !12682)
!12691 = !DILocation(line: 4937, column: 32, scope: !12682)
!12692 = !DILocation(line: 4937, column: 8, scope: !12682)
!12693 = !DILocation(line: 4937, column: 6, scope: !12682)
!12694 = !DILocation(line: 4938, column: 7, scope: !12695)
!12695 = distinct !DILexicalBlock(scope: !12682, file: !3, line: 4938, column: 6)
!12696 = !DILocation(line: 4938, column: 6, scope: !12682)
!12697 = !DILocation(line: 4939, column: 19, scope: !12698)
!12698 = distinct !DILexicalBlock(scope: !12699, file: !3, line: 4939, column: 7)
!12699 = distinct !DILexicalBlock(scope: !12695, file: !3, line: 4938, column: 12)
!12700 = !DILocation(line: 4939, column: 8, scope: !12698)
!12701 = !DILocation(line: 4939, column: 7, scope: !12699)
!12702 = !DILocation(line: 4940, column: 4, scope: !12698)
!12703 = !DILocation(line: 4941, column: 2, scope: !12699)
!12704 = !DILocation(line: 4943, column: 2, scope: !12682)
!12705 = !DILocation(line: 4944, column: 1, scope: !12682)
!12706 = distinct !DISubprogram(name: "kobject_name", scope: !197, file: !197, line: 88, type: !12707, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12707 = !DISubroutineType(types: !12708)
!12708 = !{!147, !12709}
!12709 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12710, size: 64)
!12710 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !196)
!12711 = !DILocalVariable(name: "kobj", arg: 1, scope: !12706, file: !197, line: 88, type: !12709)
!12712 = !DILocation(line: 88, column: 62, scope: !12706)
!12713 = !DILocation(line: 90, column: 9, scope: !12706)
!12714 = !DILocation(line: 90, column: 15, scope: !12706)
!12715 = !DILocation(line: 90, column: 2, scope: !12706)
!12716 = !DILocalVariable(name: "nfc", arg: 1, scope: !4627, file: !117, line: 956, type: !4519)
!12717 = !DILocation(line: 956, column: 65, scope: !4627)
!12718 = !DILocation(line: 958, column: 2, scope: !4627)
!12719 = !DILocation(line: 958, column: 2, scope: !12720)
!12720 = distinct !DILexicalBlock(scope: !4627, file: !117, line: 958, column: 2)
!12721 = !DILocation(line: 959, column: 1, scope: !4627)
!12722 = distinct !DISubprogram(name: "nand_id_len", scope: !3, file: !3, line: 4469, type: !12723, scopeLine: 4470, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12723 = !DISubroutineType(types: !12724)
!12724 = !{!240, !4051, !240}
!12725 = !DILocalVariable(name: "id_data", arg: 1, scope: !12722, file: !3, line: 4469, type: !4051)
!12726 = !DILocation(line: 4469, column: 28, scope: !12722)
!12727 = !DILocalVariable(name: "arrlen", arg: 2, scope: !12722, file: !3, line: 4469, type: !240)
!12728 = !DILocation(line: 4469, column: 41, scope: !12722)
!12729 = !DILocalVariable(name: "last_nonzero", scope: !12722, file: !3, line: 4471, type: !240)
!12730 = !DILocation(line: 4471, column: 6, scope: !12722)
!12731 = !DILocalVariable(name: "period", scope: !12722, file: !3, line: 4471, type: !240)
!12732 = !DILocation(line: 4471, column: 20, scope: !12722)
!12733 = !DILocation(line: 4474, column: 22, scope: !12734)
!12734 = distinct !DILexicalBlock(scope: !12722, file: !3, line: 4474, column: 2)
!12735 = !DILocation(line: 4474, column: 29, scope: !12734)
!12736 = !DILocation(line: 4474, column: 20, scope: !12734)
!12737 = !DILocation(line: 4474, column: 7, scope: !12734)
!12738 = !DILocation(line: 4474, column: 34, scope: !12739)
!12739 = distinct !DILexicalBlock(scope: !12734, file: !3, line: 4474, column: 2)
!12740 = !DILocation(line: 4474, column: 47, scope: !12739)
!12741 = !DILocation(line: 4474, column: 2, scope: !12734)
!12742 = !DILocation(line: 4475, column: 7, scope: !12743)
!12743 = distinct !DILexicalBlock(scope: !12739, file: !3, line: 4475, column: 7)
!12744 = !DILocation(line: 4475, column: 15, scope: !12743)
!12745 = !DILocation(line: 4475, column: 7, scope: !12739)
!12746 = !DILocation(line: 4476, column: 4, scope: !12743)
!12747 = !DILocation(line: 4475, column: 27, scope: !12743)
!12748 = !DILocation(line: 4474, column: 65, scope: !12739)
!12749 = !DILocation(line: 4474, column: 2, scope: !12739)
!12750 = distinct !{!12750, !12741, !12751}
!12751 = !DILocation(line: 4476, column: 4, scope: !12734)
!12752 = !DILocation(line: 4479, column: 6, scope: !12753)
!12753 = distinct !DILexicalBlock(scope: !12722, file: !3, line: 4479, column: 6)
!12754 = !DILocation(line: 4479, column: 19, scope: !12753)
!12755 = !DILocation(line: 4479, column: 6, scope: !12722)
!12756 = !DILocation(line: 4480, column: 3, scope: !12753)
!12757 = !DILocation(line: 4483, column: 14, scope: !12758)
!12758 = distinct !DILexicalBlock(scope: !12722, file: !3, line: 4483, column: 2)
!12759 = !DILocation(line: 4483, column: 7, scope: !12758)
!12760 = !DILocation(line: 4483, column: 19, scope: !12761)
!12761 = distinct !DILexicalBlock(scope: !12758, file: !3, line: 4483, column: 2)
!12762 = !DILocation(line: 4483, column: 28, scope: !12761)
!12763 = !DILocation(line: 4483, column: 26, scope: !12761)
!12764 = !DILocation(line: 4483, column: 2, scope: !12758)
!12765 = !DILocation(line: 4484, column: 26, scope: !12766)
!12766 = distinct !DILexicalBlock(scope: !12761, file: !3, line: 4484, column: 7)
!12767 = !DILocation(line: 4484, column: 35, scope: !12766)
!12768 = !DILocation(line: 4484, column: 43, scope: !12766)
!12769 = !DILocation(line: 4484, column: 7, scope: !12766)
!12770 = !DILocation(line: 4484, column: 7, scope: !12761)
!12771 = !DILocation(line: 4485, column: 4, scope: !12766)
!12772 = !DILocation(line: 4484, column: 49, scope: !12766)
!12773 = !DILocation(line: 4483, column: 42, scope: !12761)
!12774 = !DILocation(line: 4483, column: 2, scope: !12761)
!12775 = distinct !{!12775, !12764, !12776}
!12776 = !DILocation(line: 4485, column: 4, scope: !12758)
!12777 = !DILocation(line: 4488, column: 6, scope: !12778)
!12778 = distinct !DILexicalBlock(scope: !12722, file: !3, line: 4488, column: 6)
!12779 = !DILocation(line: 4488, column: 15, scope: !12778)
!12780 = !DILocation(line: 4488, column: 13, scope: !12778)
!12781 = !DILocation(line: 4488, column: 6, scope: !12722)
!12782 = !DILocation(line: 4489, column: 10, scope: !12778)
!12783 = !DILocation(line: 4489, column: 3, scope: !12778)
!12784 = !DILocation(line: 4492, column: 6, scope: !12785)
!12785 = distinct !DILexicalBlock(scope: !12722, file: !3, line: 4492, column: 6)
!12786 = !DILocation(line: 4492, column: 21, scope: !12785)
!12787 = !DILocation(line: 4492, column: 28, scope: !12785)
!12788 = !DILocation(line: 4492, column: 19, scope: !12785)
!12789 = !DILocation(line: 4492, column: 6, scope: !12722)
!12790 = !DILocation(line: 4493, column: 10, scope: !12785)
!12791 = !DILocation(line: 4493, column: 23, scope: !12785)
!12792 = !DILocation(line: 4493, column: 3, scope: !12785)
!12793 = !DILocation(line: 4496, column: 9, scope: !12722)
!12794 = !DILocation(line: 4496, column: 2, scope: !12722)
!12795 = !DILocation(line: 4497, column: 1, scope: !12722)
!12796 = distinct !DISubprogram(name: "is_full_id_nand", scope: !3, file: !3, line: 4586, type: !12797, scopeLine: 4587, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12797 = !DISubroutineType(types: !12798)
!12798 = !{!180, !4600}
!12799 = !DILocalVariable(name: "type", arg: 1, scope: !12796, file: !3, line: 4586, type: !4600)
!12800 = !DILocation(line: 4586, column: 59, scope: !12796)
!12801 = !DILocation(line: 4588, column: 9, scope: !12796)
!12802 = !DILocation(line: 4588, column: 15, scope: !12796)
!12803 = !DILocation(line: 4588, column: 2, scope: !12796)
!12804 = distinct !DISubprogram(name: "find_full_id_nand", scope: !3, file: !3, line: 4591, type: !12805, scopeLine: 4593, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12805 = !DISubroutineType(types: !12806)
!12806 = !{!180, !4166, !4600}
!12807 = !DILocalVariable(name: "chip", arg: 1, scope: !12804, file: !3, line: 4591, type: !4166)
!12808 = !DILocation(line: 4591, column: 49, scope: !12804)
!12809 = !DILocalVariable(name: "type", arg: 2, scope: !12804, file: !3, line: 4592, type: !4600)
!12810 = !DILocation(line: 4592, column: 33, scope: !12804)
!12811 = !DILocalVariable(name: "base", scope: !12804, file: !3, line: 4594, type: !4056)
!12812 = !DILocation(line: 4594, column: 22, scope: !12804)
!12813 = !DILocation(line: 4594, column: 30, scope: !12804)
!12814 = !DILocation(line: 4594, column: 36, scope: !12804)
!12815 = !DILocalVariable(name: "requirements", scope: !12804, file: !3, line: 4595, type: !4076)
!12816 = !DILocation(line: 4595, column: 24, scope: !12804)
!12817 = !DILocalVariable(name: "mtd", scope: !12804, file: !3, line: 4596, type: !2637)
!12818 = !DILocation(line: 4596, column: 19, scope: !12804)
!12819 = !DILocation(line: 4596, column: 37, scope: !12804)
!12820 = !DILocation(line: 4596, column: 25, scope: !12804)
!12821 = !DILocalVariable(name: "memorg", scope: !12804, file: !3, line: 4597, type: !8928)
!12822 = !DILocation(line: 4597, column: 35, scope: !12804)
!12823 = !DILocalVariable(name: "id_data", scope: !12804, file: !3, line: 4598, type: !4051)
!12824 = !DILocation(line: 4598, column: 6, scope: !12804)
!12825 = !DILocation(line: 4598, column: 16, scope: !12804)
!12826 = !DILocation(line: 4598, column: 22, scope: !12804)
!12827 = !DILocation(line: 4598, column: 25, scope: !12804)
!12828 = !DILocation(line: 4600, column: 31, scope: !12804)
!12829 = !DILocation(line: 4600, column: 37, scope: !12804)
!12830 = !DILocation(line: 4600, column: 11, scope: !12804)
!12831 = !DILocation(line: 4600, column: 9, scope: !12804)
!12832 = !DILocation(line: 4602, column: 15, scope: !12833)
!12833 = distinct !DILexicalBlock(scope: !12804, file: !3, line: 4602, column: 6)
!12834 = !DILocation(line: 4602, column: 21, scope: !12833)
!12835 = !DILocation(line: 4602, column: 25, scope: !12833)
!12836 = !DILocation(line: 4602, column: 34, scope: !12833)
!12837 = !DILocation(line: 4602, column: 40, scope: !12833)
!12838 = !DILocation(line: 4602, column: 7, scope: !12833)
!12839 = !DILocation(line: 4602, column: 6, scope: !12804)
!12840 = !DILocation(line: 4603, column: 22, scope: !12841)
!12841 = distinct !DILexicalBlock(scope: !12833, file: !3, line: 4602, column: 49)
!12842 = !DILocation(line: 4603, column: 28, scope: !12841)
!12843 = !DILocation(line: 4603, column: 3, scope: !12841)
!12844 = !DILocation(line: 4603, column: 11, scope: !12841)
!12845 = !DILocation(line: 4603, column: 20, scope: !12841)
!12846 = !DILocation(line: 4604, column: 20, scope: !12841)
!12847 = !DILocation(line: 4604, column: 28, scope: !12841)
!12848 = !DILocation(line: 4604, column: 3, scope: !12841)
!12849 = !DILocation(line: 4604, column: 8, scope: !12841)
!12850 = !DILocation(line: 4604, column: 18, scope: !12841)
!12851 = !DILocation(line: 4605, column: 34, scope: !12841)
!12852 = !DILocation(line: 4605, column: 40, scope: !12841)
!12853 = !DILocation(line: 4606, column: 13, scope: !12841)
!12854 = !DILocation(line: 4606, column: 19, scope: !12841)
!12855 = !DILocation(line: 4605, column: 50, scope: !12841)
!12856 = !DILocation(line: 4605, column: 3, scope: !12841)
!12857 = !DILocation(line: 4605, column: 11, scope: !12841)
!12858 = !DILocation(line: 4605, column: 32, scope: !12841)
!12859 = !DILocation(line: 4607, column: 20, scope: !12841)
!12860 = !DILocation(line: 4607, column: 26, scope: !12841)
!12861 = !DILocation(line: 4607, column: 3, scope: !12841)
!12862 = !DILocation(line: 4607, column: 8, scope: !12841)
!12863 = !DILocation(line: 4607, column: 18, scope: !12841)
!12864 = !DILocation(line: 4608, column: 21, scope: !12841)
!12865 = !DILocation(line: 4608, column: 27, scope: !12841)
!12866 = !DILocation(line: 4608, column: 3, scope: !12841)
!12867 = !DILocation(line: 4608, column: 11, scope: !12841)
!12868 = !DILocation(line: 4608, column: 19, scope: !12841)
!12869 = !DILocation(line: 4609, column: 18, scope: !12841)
!12870 = !DILocation(line: 4609, column: 26, scope: !12841)
!12871 = !DILocation(line: 4609, column: 3, scope: !12841)
!12872 = !DILocation(line: 4609, column: 8, scope: !12841)
!12873 = !DILocation(line: 4609, column: 16, scope: !12841)
!12874 = !DILocation(line: 4611, column: 50, scope: !12841)
!12875 = !DILocation(line: 4611, column: 27, scope: !12841)
!12876 = !DILocation(line: 4611, column: 3, scope: !12841)
!12877 = !DILocation(line: 4611, column: 11, scope: !12841)
!12878 = !DILocation(line: 4611, column: 25, scope: !12841)
!12879 = !DILocalVariable(name: "_tmp", scope: !12880, file: !3, line: 4613, type: !402)
!12880 = distinct !DILexicalBlock(scope: !12841, file: !3, line: 4613, column: 4)
!12881 = !DILocation(line: 4613, column: 4, scope: !12880)
!12882 = !DILocalVariable(name: "__base", scope: !12883, file: !3, line: 4613, type: !536)
!12883 = distinct !DILexicalBlock(scope: !12880, file: !3, line: 4613, column: 4)
!12884 = !DILocation(line: 4613, column: 4, scope: !12883)
!12885 = !DILocalVariable(name: "__rem", scope: !12883, file: !3, line: 4613, type: !536)
!12886 = !DILocation(line: 4613, column: 4, scope: !12841)
!12887 = !DILocation(line: 4612, column: 3, scope: !12841)
!12888 = !DILocation(line: 4612, column: 11, scope: !12841)
!12889 = !DILocation(line: 4612, column: 31, scope: !12841)
!12890 = !DILocation(line: 4616, column: 20, scope: !12841)
!12891 = !DILocation(line: 4616, column: 26, scope: !12841)
!12892 = !DILocation(line: 4616, column: 3, scope: !12841)
!12893 = !DILocation(line: 4616, column: 9, scope: !12841)
!12894 = !DILocation(line: 4616, column: 17, scope: !12841)
!12895 = !DILocation(line: 4617, column: 27, scope: !12841)
!12896 = !DILocation(line: 4617, column: 16, scope: !12841)
!12897 = !DILocation(line: 4617, column: 25, scope: !12841)
!12898 = !DILocation(line: 4618, column: 28, scope: !12841)
!12899 = !DILocation(line: 4618, column: 16, scope: !12841)
!12900 = !DILocation(line: 4618, column: 26, scope: !12841)
!12901 = !DILocation(line: 4619, column: 32, scope: !12841)
!12902 = !DILocation(line: 4619, column: 3, scope: !12841)
!12903 = !DILocation(line: 4621, column: 36, scope: !12841)
!12904 = !DILocation(line: 4621, column: 42, scope: !12841)
!12905 = !DILocation(line: 4621, column: 28, scope: !12841)
!12906 = !DILocation(line: 4621, column: 3, scope: !12841)
!12907 = !DILocation(line: 4621, column: 9, scope: !12841)
!12908 = !DILocation(line: 4621, column: 20, scope: !12841)
!12909 = !DILocation(line: 4621, column: 26, scope: !12841)
!12910 = !DILocation(line: 4622, column: 8, scope: !12911)
!12911 = distinct !DILexicalBlock(scope: !12841, file: !3, line: 4622, column: 7)
!12912 = !DILocation(line: 4622, column: 14, scope: !12911)
!12913 = !DILocation(line: 4622, column: 25, scope: !12911)
!12914 = !DILocation(line: 4622, column: 7, scope: !12841)
!12915 = !DILocation(line: 4623, column: 4, scope: !12911)
!12916 = !DILocation(line: 4625, column: 3, scope: !12841)
!12917 = !DILocation(line: 4627, column: 2, scope: !12804)
!12918 = !DILocation(line: 4628, column: 1, scope: !12804)
!12919 = distinct !DISubprogram(name: "nand_manufacturer_detect", scope: !3, file: !3, line: 4635, type: !4218, scopeLine: 4636, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12920 = !DILocalVariable(name: "chip", arg: 1, scope: !12919, file: !3, line: 4635, type: !4166)
!12921 = !DILocation(line: 4635, column: 56, scope: !12919)
!12922 = !DILocation(line: 4641, column: 6, scope: !12923)
!12923 = distinct !DILexicalBlock(scope: !12919, file: !3, line: 4641, column: 6)
!12924 = !DILocation(line: 4641, column: 12, scope: !12923)
!12925 = !DILocation(line: 4641, column: 25, scope: !12923)
!12926 = !DILocation(line: 4641, column: 30, scope: !12923)
!12927 = !DILocation(line: 4641, column: 33, scope: !12923)
!12928 = !DILocation(line: 4641, column: 39, scope: !12923)
!12929 = !DILocation(line: 4641, column: 52, scope: !12923)
!12930 = !DILocation(line: 4641, column: 58, scope: !12923)
!12931 = !DILocation(line: 4641, column: 62, scope: !12923)
!12932 = !DILocation(line: 4642, column: 6, scope: !12923)
!12933 = !DILocation(line: 4642, column: 12, scope: !12923)
!12934 = !DILocation(line: 4642, column: 25, scope: !12923)
!12935 = !DILocation(line: 4642, column: 31, scope: !12923)
!12936 = !DILocation(line: 4642, column: 36, scope: !12923)
!12937 = !DILocation(line: 4641, column: 6, scope: !12919)
!12938 = !DILocalVariable(name: "memorg", scope: !12939, file: !3, line: 4643, type: !8928)
!12939 = distinct !DILexicalBlock(scope: !12923, file: !3, line: 4642, column: 44)
!12940 = !DILocation(line: 4643, column: 36, scope: !12939)
!12941 = !DILocation(line: 4645, column: 32, scope: !12939)
!12942 = !DILocation(line: 4645, column: 38, scope: !12939)
!12943 = !DILocation(line: 4645, column: 12, scope: !12939)
!12944 = !DILocation(line: 4645, column: 10, scope: !12939)
!12945 = !DILocation(line: 4648, column: 50, scope: !12939)
!12946 = !DILocation(line: 4648, column: 56, scope: !12939)
!12947 = !DILocation(line: 4648, column: 59, scope: !12939)
!12948 = !DILocation(line: 4648, column: 27, scope: !12939)
!12949 = !DILocation(line: 4648, column: 3, scope: !12939)
!12950 = !DILocation(line: 4648, column: 11, scope: !12939)
!12951 = !DILocation(line: 4648, column: 25, scope: !12939)
!12952 = !DILocation(line: 4649, column: 3, scope: !12939)
!12953 = !DILocation(line: 4649, column: 9, scope: !12939)
!12954 = !DILocation(line: 4649, column: 22, scope: !12939)
!12955 = !DILocation(line: 4649, column: 28, scope: !12939)
!12956 = !DILocation(line: 4649, column: 33, scope: !12939)
!12957 = !DILocation(line: 4649, column: 40, scope: !12939)
!12958 = !DILocation(line: 4650, column: 2, scope: !12939)
!12959 = !DILocation(line: 4651, column: 22, scope: !12960)
!12960 = distinct !DILexicalBlock(scope: !12923, file: !3, line: 4650, column: 9)
!12961 = !DILocation(line: 4651, column: 3, scope: !12960)
!12962 = !DILocation(line: 4653, column: 1, scope: !12919)
!12963 = distinct !DISubprogram(name: "nand_decode_id", scope: !3, file: !3, line: 4552, type: !12964, scopeLine: 4553, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!12964 = !DISubroutineType(types: !12965)
!12965 = !{null, !4166, !4600}
!12966 = !DILocalVariable(name: "chip", arg: 1, scope: !12963, file: !3, line: 4552, type: !4166)
!12967 = !DILocation(line: 4552, column: 46, scope: !12963)
!12968 = !DILocalVariable(name: "type", arg: 2, scope: !12963, file: !3, line: 4552, type: !4600)
!12969 = !DILocation(line: 4552, column: 75, scope: !12963)
!12970 = !DILocalVariable(name: "mtd", scope: !12963, file: !3, line: 4554, type: !2637)
!12971 = !DILocation(line: 4554, column: 19, scope: !12963)
!12972 = !DILocation(line: 4554, column: 37, scope: !12963)
!12973 = !DILocation(line: 4554, column: 25, scope: !12963)
!12974 = !DILocalVariable(name: "memorg", scope: !12963, file: !3, line: 4555, type: !8928)
!12975 = !DILocation(line: 4555, column: 35, scope: !12963)
!12976 = !DILocation(line: 4557, column: 31, scope: !12963)
!12977 = !DILocation(line: 4557, column: 37, scope: !12963)
!12978 = !DILocation(line: 4557, column: 11, scope: !12963)
!12979 = !DILocation(line: 4557, column: 9, scope: !12963)
!12980 = !DILocation(line: 4559, column: 33, scope: !12963)
!12981 = !DILocation(line: 4559, column: 39, scope: !12963)
!12982 = !DILocation(line: 4559, column: 51, scope: !12963)
!12983 = !DILocation(line: 4559, column: 57, scope: !12963)
!12984 = !DILocation(line: 4559, column: 49, scope: !12963)
!12985 = !DILocation(line: 4559, column: 2, scope: !12963)
!12986 = !DILocation(line: 4559, column: 10, scope: !12963)
!12987 = !DILocation(line: 4559, column: 31, scope: !12963)
!12988 = !DILocation(line: 4560, column: 19, scope: !12963)
!12989 = !DILocation(line: 4560, column: 25, scope: !12963)
!12990 = !DILocation(line: 4560, column: 2, scope: !12963)
!12991 = !DILocation(line: 4560, column: 7, scope: !12963)
!12992 = !DILocation(line: 4560, column: 17, scope: !12963)
!12993 = !DILocation(line: 4561, column: 21, scope: !12963)
!12994 = !DILocation(line: 4561, column: 27, scope: !12963)
!12995 = !DILocation(line: 4561, column: 2, scope: !12963)
!12996 = !DILocation(line: 4561, column: 10, scope: !12963)
!12997 = !DILocation(line: 4561, column: 19, scope: !12963)
!12998 = !DILocation(line: 4562, column: 19, scope: !12963)
!12999 = !DILocation(line: 4562, column: 27, scope: !12963)
!13000 = !DILocation(line: 4562, column: 2, scope: !12963)
!13001 = !DILocation(line: 4562, column: 7, scope: !12963)
!13002 = !DILocation(line: 4562, column: 17, scope: !12963)
!13003 = !DILocation(line: 4563, column: 20, scope: !12963)
!13004 = !DILocation(line: 4563, column: 28, scope: !12963)
!13005 = !DILocation(line: 4563, column: 37, scope: !12963)
!13006 = !DILocation(line: 4563, column: 2, scope: !12963)
!13007 = !DILocation(line: 4563, column: 10, scope: !12963)
!13008 = !DILocation(line: 4563, column: 18, scope: !12963)
!13009 = !DILocation(line: 4564, column: 17, scope: !12963)
!13010 = !DILocation(line: 4564, column: 25, scope: !12963)
!13011 = !DILocation(line: 4564, column: 2, scope: !12963)
!13012 = !DILocation(line: 4564, column: 7, scope: !12963)
!13013 = !DILocation(line: 4564, column: 15, scope: !12963)
!13014 = !DILocation(line: 4567, column: 2, scope: !12963)
!13015 = !DILocation(line: 4567, column: 10, scope: !12963)
!13016 = !DILocation(line: 4567, column: 24, scope: !12963)
!13017 = !DILocation(line: 4568, column: 1, scope: !12963)
!13018 = distinct !DISubprogram(name: "nand_manufacturer_name", scope: !3, file: !3, line: 4685, type: !13019, scopeLine: 4686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13019 = !DISubroutineType(types: !13020)
!13020 = !{!147, !4204}
!13021 = !DILocalVariable(name: "manufacturer_desc", arg: 1, scope: !13018, file: !3, line: 4685, type: !4204)
!13022 = !DILocation(line: 4685, column: 61, scope: !13018)
!13023 = !DILocation(line: 4687, column: 9, scope: !13018)
!13024 = !DILocation(line: 4687, column: 29, scope: !13018)
!13025 = !DILocation(line: 4687, column: 48, scope: !13018)
!13026 = !DILocation(line: 4687, column: 2, scope: !13018)
!13027 = distinct !DISubprogram(name: "nand_decode_bbm_options", scope: !3, file: !3, line: 4575, type: !4218, scopeLine: 4576, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13028 = !DILocalVariable(name: "chip", arg: 1, scope: !13027, file: !3, line: 4575, type: !4166)
!13029 = !DILocation(line: 4575, column: 55, scope: !13027)
!13030 = !DILocalVariable(name: "mtd", scope: !13027, file: !3, line: 4577, type: !2637)
!13031 = !DILocation(line: 4577, column: 19, scope: !13027)
!13032 = !DILocation(line: 4577, column: 37, scope: !13027)
!13033 = !DILocation(line: 4577, column: 25, scope: !13027)
!13034 = !DILocation(line: 4580, column: 6, scope: !13035)
!13035 = distinct !DILexicalBlock(scope: !13027, file: !3, line: 4580, column: 6)
!13036 = !DILocation(line: 4580, column: 11, scope: !13035)
!13037 = !DILocation(line: 4580, column: 21, scope: !13035)
!13038 = !DILocation(line: 4580, column: 27, scope: !13035)
!13039 = !DILocation(line: 4580, column: 31, scope: !13035)
!13040 = !DILocation(line: 4580, column: 37, scope: !13035)
!13041 = !DILocation(line: 4580, column: 45, scope: !13035)
!13042 = !DILocation(line: 4580, column: 6, scope: !13027)
!13043 = !DILocation(line: 4581, column: 3, scope: !13035)
!13044 = !DILocation(line: 4581, column: 9, scope: !13035)
!13045 = !DILocation(line: 4581, column: 21, scope: !13035)
!13046 = !DILocation(line: 4583, column: 3, scope: !13035)
!13047 = !DILocation(line: 4583, column: 9, scope: !13035)
!13048 = !DILocation(line: 4583, column: 21, scope: !13035)
!13049 = !DILocation(line: 4584, column: 1, scope: !13027)
!13050 = distinct !DISubprogram(name: "nand_is_slc", scope: !117, file: !117, line: 1281, type: !5185, scopeLine: 1282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13051 = !DILocalVariable(name: "chip", arg: 1, scope: !13050, file: !117, line: 1281, type: !4166)
!13052 = !DILocation(line: 1281, column: 50, scope: !13050)
!13053 = !DILocalVariable(name: "__ret_warn_on", scope: !13054, file: !117, line: 1283, type: !240)
!13054 = distinct !DILexicalBlock(scope: !13050, file: !117, line: 1283, column: 2)
!13055 = !DILocation(line: 1283, column: 2, scope: !13054)
!13056 = !DILocation(line: 1283, column: 2, scope: !13057)
!13057 = distinct !DILexicalBlock(scope: !13054, file: !117, line: 1283, column: 2)
!13058 = !DILocation(line: 1283, column: 2, scope: !13059)
!13059 = distinct !DILexicalBlock(scope: !13057, file: !117, line: 1283, column: 2)
!13060 = !DILocation(line: 1283, column: 2, scope: !13061)
!13061 = distinct !DILexicalBlock(scope: !13059, file: !117, line: 1283, column: 2)
!13062 = !DILocation(line: 1283, column: 2, scope: !13063)
!13063 = distinct !DILexicalBlock(scope: !13059, file: !117, line: 1283, column: 2)
!13064 = !DILocation(line: 1283, column: 2, scope: !13065)
!13065 = distinct !DILexicalBlock(scope: !13063, file: !117, line: 1283, column: 2)
!13066 = !DILocation(line: 1283, column: 2, scope: !13067)
!13067 = distinct !DILexicalBlock(scope: !13063, file: !117, line: 1283, column: 2)
!13068 = !{i32 -2141661280, i32 -2141661251, i32 -2141661205, i32 -2141661147, i32 -2141661093, i32 -2141661039, i32 -2141660984, i32 -2141660953}
!13069 = !DILocation(line: 1283, column: 2, scope: !13070)
!13070 = distinct !DILexicalBlock(scope: !13063, file: !117, line: 1283, column: 2)
!13071 = !{i32 -2141660532, i32 -2141660525, i32 -2141660473, i32 -2141660442, i32 -2141660412}
!13072 = !DILocation(line: 1283, column: 2, scope: !13073)
!13073 = distinct !DILexicalBlock(scope: !13063, file: !117, line: 1283, column: 2)
!13074 = !DILocation(line: 1283, column: 2, scope: !13075)
!13075 = distinct !DILexicalBlock(scope: !13059, file: !117, line: 1283, column: 2)
!13076 = !DILocation(line: 1285, column: 32, scope: !13050)
!13077 = !DILocation(line: 1285, column: 38, scope: !13050)
!13078 = !DILocation(line: 1285, column: 9, scope: !13050)
!13079 = !DILocation(line: 1285, column: 44, scope: !13050)
!13080 = !DILocation(line: 1285, column: 2, scope: !13050)
!13081 = distinct !DISubprogram(name: "nand_id_has_period", scope: !3, file: !3, line: 4451, type: !13082, scopeLine: 4452, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13082 = !DISubroutineType(types: !13083)
!13083 = !{!240, !4051, !240, !240}
!13084 = !DILocalVariable(name: "id_data", arg: 1, scope: !13081, file: !3, line: 4451, type: !4051)
!13085 = !DILocation(line: 4451, column: 35, scope: !13081)
!13086 = !DILocalVariable(name: "arrlen", arg: 2, scope: !13081, file: !3, line: 4451, type: !240)
!13087 = !DILocation(line: 4451, column: 48, scope: !13081)
!13088 = !DILocalVariable(name: "period", arg: 3, scope: !13081, file: !3, line: 4451, type: !240)
!13089 = !DILocation(line: 4451, column: 60, scope: !13081)
!13090 = !DILocalVariable(name: "i", scope: !13081, file: !3, line: 4453, type: !240)
!13091 = !DILocation(line: 4453, column: 6, scope: !13081)
!13092 = !DILocalVariable(name: "j", scope: !13081, file: !3, line: 4453, type: !240)
!13093 = !DILocation(line: 4453, column: 9, scope: !13081)
!13094 = !DILocation(line: 4454, column: 9, scope: !13095)
!13095 = distinct !DILexicalBlock(scope: !13081, file: !3, line: 4454, column: 2)
!13096 = !DILocation(line: 4454, column: 7, scope: !13095)
!13097 = !DILocation(line: 4454, column: 14, scope: !13098)
!13098 = distinct !DILexicalBlock(scope: !13095, file: !3, line: 4454, column: 2)
!13099 = !DILocation(line: 4454, column: 18, scope: !13098)
!13100 = !DILocation(line: 4454, column: 16, scope: !13098)
!13101 = !DILocation(line: 4454, column: 2, scope: !13095)
!13102 = !DILocation(line: 4455, column: 12, scope: !13103)
!13103 = distinct !DILexicalBlock(scope: !13098, file: !3, line: 4455, column: 3)
!13104 = !DILocation(line: 4455, column: 16, scope: !13103)
!13105 = !DILocation(line: 4455, column: 14, scope: !13103)
!13106 = !DILocation(line: 4455, column: 10, scope: !13103)
!13107 = !DILocation(line: 4455, column: 8, scope: !13103)
!13108 = !DILocation(line: 4455, column: 24, scope: !13109)
!13109 = distinct !DILexicalBlock(scope: !13103, file: !3, line: 4455, column: 3)
!13110 = !DILocation(line: 4455, column: 28, scope: !13109)
!13111 = !DILocation(line: 4455, column: 26, scope: !13109)
!13112 = !DILocation(line: 4455, column: 3, scope: !13103)
!13113 = !DILocation(line: 4456, column: 8, scope: !13114)
!13114 = distinct !DILexicalBlock(scope: !13109, file: !3, line: 4456, column: 8)
!13115 = !DILocation(line: 4456, column: 16, scope: !13114)
!13116 = !DILocation(line: 4456, column: 22, scope: !13114)
!13117 = !DILocation(line: 4456, column: 30, scope: !13114)
!13118 = !DILocation(line: 4456, column: 19, scope: !13114)
!13119 = !DILocation(line: 4456, column: 8, scope: !13109)
!13120 = !DILocation(line: 4457, column: 5, scope: !13114)
!13121 = !DILocation(line: 4456, column: 31, scope: !13114)
!13122 = !DILocation(line: 4455, column: 41, scope: !13109)
!13123 = !DILocation(line: 4455, column: 38, scope: !13109)
!13124 = !DILocation(line: 4455, column: 3, scope: !13109)
!13125 = distinct !{!13125, !13112, !13126}
!13126 = !DILocation(line: 4457, column: 12, scope: !13103)
!13127 = !DILocation(line: 4454, column: 27, scope: !13098)
!13128 = !DILocation(line: 4454, column: 2, scope: !13098)
!13129 = distinct !{!13129, !13101, !13130}
!13130 = !DILocation(line: 4457, column: 12, scope: !13095)
!13131 = !DILocation(line: 4458, column: 2, scope: !13081)
!13132 = !DILocation(line: 4459, column: 1, scope: !13081)
!13133 = distinct !DISubprogram(name: "nanddev_set_ecc_requirements", scope: !94, file: !94, line: 554, type: !13134, scopeLine: 556, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13134 = !DISubroutineType(types: !13135)
!13135 = !{null, !4056, !9452}
!13136 = !DILocalVariable(name: "nand", arg: 1, scope: !13133, file: !94, line: 554, type: !4056)
!13137 = !DILocation(line: 554, column: 50, scope: !13133)
!13138 = !DILocalVariable(name: "reqs", arg: 2, scope: !13133, file: !94, line: 555, type: !9452)
!13139 = !DILocation(line: 555, column: 38, scope: !13133)
!13140 = !DILocation(line: 557, column: 2, scope: !13133)
!13141 = !DILocation(line: 557, column: 8, scope: !13133)
!13142 = !DILocation(line: 557, column: 12, scope: !13133)
!13143 = !DILocation(line: 557, column: 28, scope: !13133)
!13144 = !DILocation(line: 557, column: 27, scope: !13133)
!13145 = !DILocation(line: 558, column: 1, scope: !13133)
!13146 = distinct !DISubprogram(name: "nanddev_bits_per_cell", scope: !94, file: !94, line: 374, type: !4881, scopeLine: 375, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13147 = !DILocalVariable(name: "nand", arg: 1, scope: !13146, file: !94, line: 374, type: !4883)
!13148 = !DILocation(line: 374, column: 76, scope: !13146)
!13149 = !DILocation(line: 376, column: 9, scope: !13146)
!13150 = !DILocation(line: 376, column: 15, scope: !13146)
!13151 = !DILocation(line: 376, column: 22, scope: !13146)
!13152 = !DILocation(line: 376, column: 2, scope: !13146)
!13153 = distinct !DISubprogram(name: "nand_manufacturer_init", scope: !3, file: !3, line: 4661, type: !4222, scopeLine: 4662, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13154 = !DILocalVariable(name: "chip", arg: 1, scope: !13153, file: !3, line: 4661, type: !4166)
!13155 = !DILocation(line: 4661, column: 53, scope: !13153)
!13156 = !DILocation(line: 4663, column: 7, scope: !13157)
!13157 = distinct !DILexicalBlock(scope: !13153, file: !3, line: 4663, column: 6)
!13158 = !DILocation(line: 4663, column: 13, scope: !13157)
!13159 = !DILocation(line: 4663, column: 26, scope: !13157)
!13160 = !DILocation(line: 4663, column: 31, scope: !13157)
!13161 = !DILocation(line: 4663, column: 35, scope: !13157)
!13162 = !DILocation(line: 4663, column: 41, scope: !13157)
!13163 = !DILocation(line: 4663, column: 54, scope: !13157)
!13164 = !DILocation(line: 4663, column: 60, scope: !13157)
!13165 = !DILocation(line: 4663, column: 64, scope: !13157)
!13166 = !DILocation(line: 4664, column: 7, scope: !13157)
!13167 = !DILocation(line: 4664, column: 13, scope: !13157)
!13168 = !DILocation(line: 4664, column: 26, scope: !13157)
!13169 = !DILocation(line: 4664, column: 32, scope: !13157)
!13170 = !DILocation(line: 4664, column: 37, scope: !13157)
!13171 = !DILocation(line: 4663, column: 6, scope: !13153)
!13172 = !DILocation(line: 4665, column: 3, scope: !13157)
!13173 = !DILocation(line: 4667, column: 9, scope: !13153)
!13174 = !DILocation(line: 4667, column: 15, scope: !13153)
!13175 = !DILocation(line: 4667, column: 28, scope: !13153)
!13176 = !DILocation(line: 4667, column: 34, scope: !13153)
!13177 = !DILocation(line: 4667, column: 39, scope: !13153)
!13178 = !DILocation(line: 4667, column: 44, scope: !13153)
!13179 = !DILocation(line: 4667, column: 2, scope: !13153)
!13180 = !DILocation(line: 4668, column: 1, scope: !13153)
!13181 = distinct !DISubprogram(name: "mtd_set_ooblayout", scope: !2639, file: !2639, line: 443, type: !13182, scopeLine: 445, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13182 = !DISubroutineType(types: !13183)
!13183 = !{null, !2637, !2659}
!13184 = !DILocalVariable(name: "mtd", arg: 1, scope: !13181, file: !2639, line: 443, type: !2637)
!13185 = !DILocation(line: 443, column: 55, scope: !13181)
!13186 = !DILocalVariable(name: "ooblayout", arg: 2, scope: !13181, file: !2639, line: 444, type: !2659)
!13187 = !DILocation(line: 444, column: 42, scope: !13181)
!13188 = !DILocation(line: 446, column: 19, scope: !13181)
!13189 = !DILocation(line: 446, column: 2, scope: !13181)
!13190 = !DILocation(line: 446, column: 7, scope: !13181)
!13191 = !DILocation(line: 446, column: 17, scope: !13181)
!13192 = !DILocation(line: 447, column: 1, scope: !13181)
!13193 = distinct !DISubprogram(name: "nand_set_ecc_on_host_ops", scope: !3, file: !3, line: 5142, type: !4222, scopeLine: 5143, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13194 = !DILocalVariable(name: "chip", arg: 1, scope: !13193, file: !3, line: 5142, type: !4166)
!13195 = !DILocation(line: 5142, column: 55, scope: !13193)
!13196 = !DILocalVariable(name: "ecc", scope: !13193, file: !3, line: 5144, type: !9996)
!13197 = !DILocation(line: 5144, column: 24, scope: !13193)
!13198 = !DILocation(line: 5144, column: 31, scope: !13193)
!13199 = !DILocation(line: 5144, column: 37, scope: !13193)
!13200 = !DILocation(line: 5146, column: 10, scope: !13193)
!13201 = !DILocation(line: 5146, column: 15, scope: !13193)
!13202 = !DILocation(line: 5146, column: 2, scope: !13193)
!13203 = !DILocation(line: 5150, column: 8, scope: !13204)
!13204 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5150, column: 7)
!13205 = distinct !DILexicalBlock(scope: !13193, file: !3, line: 5146, column: 26)
!13206 = !DILocation(line: 5150, column: 13, scope: !13204)
!13207 = !DILocation(line: 5150, column: 7, scope: !13205)
!13208 = !DILocation(line: 5151, column: 4, scope: !13204)
!13209 = !DILocation(line: 5151, column: 9, scope: !13204)
!13210 = !DILocation(line: 5151, column: 19, scope: !13204)
!13211 = !DILocation(line: 5152, column: 8, scope: !13212)
!13212 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5152, column: 7)
!13213 = !DILocation(line: 5152, column: 13, scope: !13212)
!13214 = !DILocation(line: 5152, column: 7, scope: !13205)
!13215 = !DILocation(line: 5153, column: 4, scope: !13212)
!13216 = !DILocation(line: 5153, column: 9, scope: !13212)
!13217 = !DILocation(line: 5153, column: 20, scope: !13212)
!13218 = !DILocation(line: 5154, column: 8, scope: !13219)
!13219 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5154, column: 7)
!13220 = !DILocation(line: 5154, column: 13, scope: !13219)
!13221 = !DILocation(line: 5154, column: 7, scope: !13205)
!13222 = !DILocation(line: 5155, column: 4, scope: !13219)
!13223 = !DILocation(line: 5155, column: 9, scope: !13219)
!13224 = !DILocation(line: 5155, column: 23, scope: !13219)
!13225 = !DILocation(line: 5156, column: 8, scope: !13226)
!13226 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5156, column: 7)
!13227 = !DILocation(line: 5156, column: 13, scope: !13226)
!13228 = !DILocation(line: 5156, column: 7, scope: !13205)
!13229 = !DILocation(line: 5157, column: 4, scope: !13226)
!13230 = !DILocation(line: 5157, column: 9, scope: !13226)
!13231 = !DILocation(line: 5157, column: 24, scope: !13226)
!13232 = !DILocation(line: 5158, column: 8, scope: !13233)
!13233 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5158, column: 7)
!13234 = !DILocation(line: 5158, column: 13, scope: !13233)
!13235 = !DILocation(line: 5158, column: 7, scope: !13205)
!13236 = !DILocation(line: 5159, column: 4, scope: !13233)
!13237 = !DILocation(line: 5159, column: 9, scope: !13233)
!13238 = !DILocation(line: 5159, column: 18, scope: !13233)
!13239 = !DILocation(line: 5160, column: 8, scope: !13240)
!13240 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5160, column: 7)
!13241 = !DILocation(line: 5160, column: 13, scope: !13240)
!13242 = !DILocation(line: 5160, column: 7, scope: !13205)
!13243 = !DILocation(line: 5161, column: 4, scope: !13240)
!13244 = !DILocation(line: 5161, column: 9, scope: !13240)
!13245 = !DILocation(line: 5161, column: 19, scope: !13240)
!13246 = !DILocation(line: 5162, column: 8, scope: !13247)
!13247 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5162, column: 7)
!13248 = !DILocation(line: 5162, column: 13, scope: !13247)
!13249 = !DILocation(line: 5162, column: 7, scope: !13205)
!13250 = !DILocation(line: 5163, column: 4, scope: !13247)
!13251 = !DILocation(line: 5163, column: 9, scope: !13247)
!13252 = !DILocation(line: 5163, column: 22, scope: !13247)
!13253 = !DILocation(line: 5164, column: 8, scope: !13254)
!13254 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5164, column: 7)
!13255 = !DILocation(line: 5164, column: 13, scope: !13254)
!13256 = !DILocation(line: 5164, column: 27, scope: !13254)
!13257 = !DILocation(line: 5164, column: 30, scope: !13254)
!13258 = !DILocation(line: 5164, column: 35, scope: !13254)
!13259 = !DILocation(line: 5164, column: 41, scope: !13254)
!13260 = !DILocation(line: 5164, column: 44, scope: !13254)
!13261 = !DILocation(line: 5164, column: 49, scope: !13254)
!13262 = !DILocation(line: 5164, column: 7, scope: !13205)
!13263 = !DILocation(line: 5165, column: 4, scope: !13254)
!13264 = !DILocation(line: 5165, column: 9, scope: !13254)
!13265 = !DILocation(line: 5165, column: 23, scope: !13254)
!13266 = !DILocation(line: 5169, column: 9, scope: !13267)
!13267 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5169, column: 7)
!13268 = !DILocation(line: 5169, column: 14, scope: !13267)
!13269 = !DILocation(line: 5169, column: 24, scope: !13267)
!13270 = !DILocation(line: 5169, column: 28, scope: !13267)
!13271 = !DILocation(line: 5169, column: 33, scope: !13267)
!13272 = !DILocation(line: 5169, column: 41, scope: !13267)
!13273 = !DILocation(line: 5169, column: 45, scope: !13267)
!13274 = !DILocation(line: 5169, column: 50, scope: !13267)
!13275 = !DILocation(line: 5169, column: 57, scope: !13267)
!13276 = !DILocation(line: 5170, column: 9, scope: !13267)
!13277 = !DILocation(line: 5170, column: 14, scope: !13267)
!13278 = !DILocation(line: 5170, column: 24, scope: !13267)
!13279 = !DILocation(line: 5171, column: 8, scope: !13267)
!13280 = !DILocation(line: 5171, column: 13, scope: !13267)
!13281 = !DILocation(line: 5171, column: 23, scope: !13267)
!13282 = !DILocation(line: 5171, column: 47, scope: !13267)
!13283 = !DILocation(line: 5172, column: 9, scope: !13267)
!13284 = !DILocation(line: 5172, column: 14, scope: !13267)
!13285 = !DILocation(line: 5172, column: 25, scope: !13267)
!13286 = !DILocation(line: 5173, column: 8, scope: !13267)
!13287 = !DILocation(line: 5173, column: 13, scope: !13267)
!13288 = !DILocation(line: 5173, column: 24, scope: !13267)
!13289 = !DILocation(line: 5169, column: 7, scope: !13205)
!13290 = !DILocalVariable(name: "__ret_warn_on", scope: !13291, file: !3, line: 5174, type: !240)
!13291 = distinct !DILexicalBlock(scope: !13292, file: !3, line: 5174, column: 4)
!13292 = distinct !DILexicalBlock(scope: !13267, file: !3, line: 5173, column: 51)
!13293 = !DILocation(line: 5174, column: 4, scope: !13291)
!13294 = !DILocation(line: 5174, column: 4, scope: !13295)
!13295 = distinct !DILexicalBlock(scope: !13291, file: !3, line: 5174, column: 4)
!13296 = !DILocation(line: 5174, column: 4, scope: !13297)
!13297 = distinct !DILexicalBlock(scope: !13295, file: !3, line: 5174, column: 4)
!13298 = !DILocation(line: 5174, column: 4, scope: !13299)
!13299 = distinct !DILexicalBlock(scope: !13297, file: !3, line: 5174, column: 4)
!13300 = !DILocation(line: 5174, column: 4, scope: !13301)
!13301 = distinct !DILexicalBlock(scope: !13297, file: !3, line: 5174, column: 4)
!13302 = !DILocation(line: 5174, column: 4, scope: !13303)
!13303 = distinct !DILexicalBlock(scope: !13301, file: !3, line: 5174, column: 4)
!13304 = !DILocation(line: 5174, column: 4, scope: !13305)
!13305 = distinct !DILexicalBlock(scope: !13301, file: !3, line: 5174, column: 4)
!13306 = !{i32 -2141523704, i32 -2141523675, i32 -2141523629, i32 -2141523571, i32 -2141523517, i32 -2141523463, i32 -2141523408, i32 -2141523377}
!13307 = !DILocation(line: 5174, column: 4, scope: !13308)
!13308 = distinct !DILexicalBlock(scope: !13301, file: !3, line: 5174, column: 4)
!13309 = !{i32 -2141522951, i32 -2141522944, i32 -2141522892, i32 -2141522861, i32 -2141522831}
!13310 = !DILocation(line: 5174, column: 4, scope: !13311)
!13311 = distinct !DILexicalBlock(scope: !13301, file: !3, line: 5174, column: 4)
!13312 = !DILocation(line: 5174, column: 4, scope: !13313)
!13313 = distinct !DILexicalBlock(scope: !13297, file: !3, line: 5174, column: 4)
!13314 = !DILocation(line: 5175, column: 4, scope: !13292)
!13315 = !DILocation(line: 5178, column: 8, scope: !13316)
!13316 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5178, column: 7)
!13317 = !DILocation(line: 5178, column: 13, scope: !13316)
!13318 = !DILocation(line: 5178, column: 7, scope: !13205)
!13319 = !DILocation(line: 5179, column: 4, scope: !13316)
!13320 = !DILocation(line: 5179, column: 9, scope: !13316)
!13321 = !DILocation(line: 5179, column: 19, scope: !13316)
!13322 = !DILocation(line: 5180, column: 8, scope: !13323)
!13323 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5180, column: 7)
!13324 = !DILocation(line: 5180, column: 13, scope: !13323)
!13325 = !DILocation(line: 5180, column: 7, scope: !13205)
!13326 = !DILocation(line: 5181, column: 4, scope: !13323)
!13327 = !DILocation(line: 5181, column: 9, scope: !13323)
!13328 = !DILocation(line: 5181, column: 20, scope: !13323)
!13329 = !DILocation(line: 5182, column: 8, scope: !13330)
!13330 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5182, column: 7)
!13331 = !DILocation(line: 5182, column: 13, scope: !13330)
!13332 = !DILocation(line: 5182, column: 7, scope: !13205)
!13333 = !DILocation(line: 5183, column: 4, scope: !13330)
!13334 = !DILocation(line: 5183, column: 9, scope: !13330)
!13335 = !DILocation(line: 5183, column: 23, scope: !13330)
!13336 = !DILocation(line: 5184, column: 8, scope: !13337)
!13337 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5184, column: 7)
!13338 = !DILocation(line: 5184, column: 13, scope: !13337)
!13339 = !DILocation(line: 5184, column: 7, scope: !13205)
!13340 = !DILocation(line: 5185, column: 4, scope: !13337)
!13341 = !DILocation(line: 5185, column: 9, scope: !13337)
!13342 = !DILocation(line: 5185, column: 24, scope: !13337)
!13343 = !DILocation(line: 5186, column: 8, scope: !13344)
!13344 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5186, column: 7)
!13345 = !DILocation(line: 5186, column: 13, scope: !13344)
!13346 = !DILocation(line: 5186, column: 7, scope: !13205)
!13347 = !DILocation(line: 5187, column: 4, scope: !13344)
!13348 = !DILocation(line: 5187, column: 9, scope: !13344)
!13349 = !DILocation(line: 5187, column: 18, scope: !13344)
!13350 = !DILocation(line: 5188, column: 8, scope: !13351)
!13351 = distinct !DILexicalBlock(scope: !13205, file: !3, line: 5188, column: 7)
!13352 = !DILocation(line: 5188, column: 13, scope: !13351)
!13353 = !DILocation(line: 5188, column: 7, scope: !13205)
!13354 = !DILocation(line: 5189, column: 4, scope: !13351)
!13355 = !DILocation(line: 5189, column: 9, scope: !13351)
!13356 = !DILocation(line: 5189, column: 19, scope: !13351)
!13357 = !DILocation(line: 5190, column: 3, scope: !13205)
!13358 = !DILocation(line: 5193, column: 3, scope: !13205)
!13359 = !DILocation(line: 5195, column: 3, scope: !13205)
!13360 = !DILocation(line: 5198, column: 2, scope: !13193)
!13361 = !DILocation(line: 5199, column: 1, scope: !13193)
!13362 = distinct !DISubprogram(name: "nand_set_ecc_soft_ops", scope: !3, file: !3, line: 5201, type: !4222, scopeLine: 5202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13363 = !DILocation(line: 324, column: 45, scope: !5520, inlinedAt: !13364)
!13364 = distinct !DILocation(line: 5289, column: 32, scope: !13365)
!13365 = distinct !DILexicalBlock(scope: !13366, file: !3, line: 5280, column: 66)
!13366 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5279, column: 7)
!13367 = distinct !DILexicalBlock(scope: !13362, file: !3, line: 5210, column: 21)
!13368 = !DILocation(line: 326, column: 6, scope: !5520, inlinedAt: !13364)
!13369 = !DILocalVariable(name: "chip", arg: 1, scope: !13362, file: !3, line: 5201, type: !4166)
!13370 = !DILocation(line: 5201, column: 52, scope: !13362)
!13371 = !DILocalVariable(name: "mtd", scope: !13362, file: !3, line: 5203, type: !2637)
!13372 = !DILocation(line: 5203, column: 19, scope: !13362)
!13373 = !DILocation(line: 5203, column: 37, scope: !13362)
!13374 = !DILocation(line: 5203, column: 25, scope: !13362)
!13375 = !DILocalVariable(name: "nanddev", scope: !13362, file: !3, line: 5204, type: !4056)
!13376 = !DILocation(line: 5204, column: 22, scope: !13362)
!13377 = !DILocation(line: 5204, column: 47, scope: !13362)
!13378 = !DILocation(line: 5204, column: 32, scope: !13362)
!13379 = !DILocalVariable(name: "ecc", scope: !13362, file: !3, line: 5205, type: !9996)
!13380 = !DILocation(line: 5205, column: 24, scope: !13362)
!13381 = !DILocation(line: 5205, column: 31, scope: !13362)
!13382 = !DILocation(line: 5205, column: 37, scope: !13362)
!13383 = !DILocalVariable(name: "__ret_warn_on", scope: !13384, file: !3, line: 5207, type: !240)
!13384 = distinct !DILexicalBlock(scope: !13385, file: !3, line: 5207, column: 6)
!13385 = distinct !DILexicalBlock(scope: !13362, file: !3, line: 5207, column: 6)
!13386 = !DILocation(line: 5207, column: 6, scope: !13384)
!13387 = !DILocation(line: 5207, column: 6, scope: !13388)
!13388 = distinct !DILexicalBlock(scope: !13384, file: !3, line: 5207, column: 6)
!13389 = !DILocation(line: 5207, column: 6, scope: !13390)
!13390 = distinct !DILexicalBlock(scope: !13388, file: !3, line: 5207, column: 6)
!13391 = !DILocation(line: 5207, column: 6, scope: !13392)
!13392 = distinct !DILexicalBlock(scope: !13390, file: !3, line: 5207, column: 6)
!13393 = !DILocation(line: 5207, column: 6, scope: !13394)
!13394 = distinct !DILexicalBlock(scope: !13390, file: !3, line: 5207, column: 6)
!13395 = !{i32 -2141522010, i32 -2141521981, i32 -2141521935, i32 -2141521877, i32 -2141521823, i32 -2141521769, i32 -2141521714, i32 -2141521683}
!13396 = !DILocation(line: 5207, column: 6, scope: !13397)
!13397 = distinct !DILexicalBlock(scope: !13390, file: !3, line: 5207, column: 6)
!13398 = !{i32 -2141521268, i32 -2141521261, i32 -2141521209, i32 -2141521178, i32 -2141521148}
!13399 = !DILocation(line: 5207, column: 6, scope: !13400)
!13400 = distinct !DILexicalBlock(scope: !13390, file: !3, line: 5207, column: 6)
!13401 = !DILocation(line: 5207, column: 6, scope: !13385)
!13402 = !DILocation(line: 5207, column: 6, scope: !13362)
!13403 = !DILocation(line: 5208, column: 3, scope: !13385)
!13404 = !DILocation(line: 5210, column: 10, scope: !13362)
!13405 = !DILocation(line: 5210, column: 15, scope: !13362)
!13406 = !DILocation(line: 5210, column: 2, scope: !13362)
!13407 = !DILocation(line: 5212, column: 3, scope: !13367)
!13408 = !DILocation(line: 5212, column: 8, scope: !13367)
!13409 = !DILocation(line: 5212, column: 18, scope: !13367)
!13410 = !DILocation(line: 5213, column: 3, scope: !13367)
!13411 = !DILocation(line: 5213, column: 8, scope: !13367)
!13412 = !DILocation(line: 5213, column: 16, scope: !13367)
!13413 = !DILocation(line: 5214, column: 3, scope: !13367)
!13414 = !DILocation(line: 5214, column: 8, scope: !13367)
!13415 = !DILocation(line: 5214, column: 18, scope: !13367)
!13416 = !DILocation(line: 5215, column: 3, scope: !13367)
!13417 = !DILocation(line: 5215, column: 8, scope: !13367)
!13418 = !DILocation(line: 5215, column: 21, scope: !13367)
!13419 = !DILocation(line: 5216, column: 3, scope: !13367)
!13420 = !DILocation(line: 5216, column: 8, scope: !13367)
!13421 = !DILocation(line: 5216, column: 19, scope: !13367)
!13422 = !DILocation(line: 5217, column: 8, scope: !13423)
!13423 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5217, column: 7)
!13424 = !DILocation(line: 5217, column: 13, scope: !13423)
!13425 = !DILocation(line: 5217, column: 7, scope: !13367)
!13426 = !DILocation(line: 5218, column: 4, scope: !13423)
!13427 = !DILocation(line: 5218, column: 9, scope: !13423)
!13428 = !DILocation(line: 5218, column: 23, scope: !13423)
!13429 = !DILocation(line: 5219, column: 8, scope: !13430)
!13430 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5219, column: 7)
!13431 = !DILocation(line: 5219, column: 13, scope: !13430)
!13432 = !DILocation(line: 5219, column: 7, scope: !13367)
!13433 = !DILocation(line: 5220, column: 4, scope: !13430)
!13434 = !DILocation(line: 5220, column: 9, scope: !13430)
!13435 = !DILocation(line: 5220, column: 24, scope: !13430)
!13436 = !DILocation(line: 5221, column: 3, scope: !13367)
!13437 = !DILocation(line: 5221, column: 8, scope: !13367)
!13438 = !DILocation(line: 5221, column: 17, scope: !13367)
!13439 = !DILocation(line: 5222, column: 3, scope: !13367)
!13440 = !DILocation(line: 5222, column: 8, scope: !13367)
!13441 = !DILocation(line: 5222, column: 18, scope: !13367)
!13442 = !DILocation(line: 5223, column: 8, scope: !13443)
!13443 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5223, column: 7)
!13444 = !DILocation(line: 5223, column: 13, scope: !13443)
!13445 = !DILocation(line: 5223, column: 7, scope: !13367)
!13446 = !DILocation(line: 5224, column: 4, scope: !13443)
!13447 = !DILocation(line: 5224, column: 9, scope: !13443)
!13448 = !DILocation(line: 5224, column: 14, scope: !13443)
!13449 = !DILocation(line: 5225, column: 3, scope: !13367)
!13450 = !DILocation(line: 5225, column: 8, scope: !13367)
!13451 = !DILocation(line: 5225, column: 14, scope: !13367)
!13452 = !DILocation(line: 5226, column: 3, scope: !13367)
!13453 = !DILocation(line: 5226, column: 8, scope: !13367)
!13454 = !DILocation(line: 5226, column: 17, scope: !13367)
!13455 = !DILocation(line: 5231, column: 3, scope: !13367)
!13456 = !DILocation(line: 5233, column: 8, scope: !13457)
!13457 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5233, column: 7)
!13458 = !DILocation(line: 5233, column: 7, scope: !13367)
!13459 = !DILocalVariable(name: "__ret_warn_on", scope: !13460, file: !3, line: 5234, type: !240)
!13460 = distinct !DILexicalBlock(scope: !13461, file: !3, line: 5234, column: 4)
!13461 = distinct !DILexicalBlock(scope: !13457, file: !3, line: 5233, column: 28)
!13462 = !DILocation(line: 5234, column: 4, scope: !13460)
!13463 = !DILocation(line: 5234, column: 4, scope: !13464)
!13464 = distinct !DILexicalBlock(scope: !13460, file: !3, line: 5234, column: 4)
!13465 = !DILocation(line: 5234, column: 4, scope: !13466)
!13466 = distinct !DILexicalBlock(scope: !13464, file: !3, line: 5234, column: 4)
!13467 = !DILocation(line: 5234, column: 4, scope: !13468)
!13468 = distinct !DILexicalBlock(scope: !13466, file: !3, line: 5234, column: 4)
!13469 = !DILocation(line: 5234, column: 4, scope: !13470)
!13470 = distinct !DILexicalBlock(scope: !13466, file: !3, line: 5234, column: 4)
!13471 = !DILocation(line: 5234, column: 4, scope: !13472)
!13472 = distinct !DILexicalBlock(scope: !13470, file: !3, line: 5234, column: 4)
!13473 = !DILocation(line: 5234, column: 4, scope: !13474)
!13474 = distinct !DILexicalBlock(scope: !13470, file: !3, line: 5234, column: 4)
!13475 = !{i32 -2141519215, i32 -2141519186, i32 -2141519140, i32 -2141519082, i32 -2141519028, i32 -2141518974, i32 -2141518919, i32 -2141518888}
!13476 = !DILocation(line: 5234, column: 4, scope: !13477)
!13477 = distinct !DILexicalBlock(scope: !13470, file: !3, line: 5234, column: 4)
!13478 = !{i32 -2141518462, i32 -2141518455, i32 -2141518403, i32 -2141518372, i32 -2141518342}
!13479 = !DILocation(line: 5234, column: 4, scope: !13480)
!13480 = distinct !DILexicalBlock(scope: !13470, file: !3, line: 5234, column: 4)
!13481 = !DILocation(line: 5234, column: 4, scope: !13482)
!13482 = distinct !DILexicalBlock(scope: !13466, file: !3, line: 5234, column: 4)
!13483 = !DILocation(line: 5235, column: 4, scope: !13461)
!13484 = !DILocation(line: 5237, column: 3, scope: !13367)
!13485 = !DILocation(line: 5237, column: 8, scope: !13367)
!13486 = !DILocation(line: 5237, column: 18, scope: !13367)
!13487 = !DILocation(line: 5238, column: 3, scope: !13367)
!13488 = !DILocation(line: 5238, column: 8, scope: !13367)
!13489 = !DILocation(line: 5238, column: 16, scope: !13367)
!13490 = !DILocation(line: 5239, column: 3, scope: !13367)
!13491 = !DILocation(line: 5239, column: 8, scope: !13367)
!13492 = !DILocation(line: 5239, column: 18, scope: !13367)
!13493 = !DILocation(line: 5240, column: 3, scope: !13367)
!13494 = !DILocation(line: 5240, column: 8, scope: !13367)
!13495 = !DILocation(line: 5240, column: 21, scope: !13367)
!13496 = !DILocation(line: 5241, column: 3, scope: !13367)
!13497 = !DILocation(line: 5241, column: 8, scope: !13367)
!13498 = !DILocation(line: 5241, column: 19, scope: !13367)
!13499 = !DILocation(line: 5242, column: 8, scope: !13500)
!13500 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5242, column: 7)
!13501 = !DILocation(line: 5242, column: 13, scope: !13500)
!13502 = !DILocation(line: 5242, column: 7, scope: !13367)
!13503 = !DILocation(line: 5243, column: 4, scope: !13500)
!13504 = !DILocation(line: 5243, column: 9, scope: !13500)
!13505 = !DILocation(line: 5243, column: 23, scope: !13500)
!13506 = !DILocation(line: 5244, column: 8, scope: !13507)
!13507 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5244, column: 7)
!13508 = !DILocation(line: 5244, column: 13, scope: !13507)
!13509 = !DILocation(line: 5244, column: 7, scope: !13367)
!13510 = !DILocation(line: 5245, column: 4, scope: !13507)
!13511 = !DILocation(line: 5245, column: 9, scope: !13507)
!13512 = !DILocation(line: 5245, column: 24, scope: !13507)
!13513 = !DILocation(line: 5246, column: 3, scope: !13367)
!13514 = !DILocation(line: 5246, column: 8, scope: !13367)
!13515 = !DILocation(line: 5246, column: 17, scope: !13367)
!13516 = !DILocation(line: 5247, column: 3, scope: !13367)
!13517 = !DILocation(line: 5247, column: 8, scope: !13367)
!13518 = !DILocation(line: 5247, column: 18, scope: !13367)
!13519 = !DILocation(line: 5254, column: 8, scope: !13520)
!13520 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5254, column: 7)
!13521 = !DILocation(line: 5254, column: 13, scope: !13520)
!13522 = !DILocation(line: 5254, column: 18, scope: !13520)
!13523 = !DILocation(line: 5254, column: 22, scope: !13520)
!13524 = !DILocation(line: 5254, column: 27, scope: !13520)
!13525 = !DILocation(line: 5254, column: 35, scope: !13520)
!13526 = !DILocation(line: 5254, column: 7, scope: !13367)
!13527 = !DILocation(line: 5255, column: 4, scope: !13528)
!13528 = distinct !DILexicalBlock(scope: !13520, file: !3, line: 5254, column: 43)
!13529 = !DILocation(line: 5255, column: 9, scope: !13528)
!13530 = !DILocation(line: 5255, column: 14, scope: !13528)
!13531 = !DILocation(line: 5256, column: 4, scope: !13528)
!13532 = !DILocation(line: 5256, column: 9, scope: !13528)
!13533 = !DILocation(line: 5256, column: 18, scope: !13528)
!13534 = !DILocation(line: 5257, column: 3, scope: !13528)
!13535 = !DILocation(line: 5263, column: 8, scope: !13536)
!13536 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5263, column: 7)
!13537 = !DILocation(line: 5263, column: 13, scope: !13536)
!13538 = !DILocation(line: 5263, column: 7, scope: !13367)
!13539 = !DILocation(line: 5265, column: 8, scope: !13540)
!13540 = distinct !DILexicalBlock(scope: !13541, file: !3, line: 5265, column: 8)
!13541 = distinct !DILexicalBlock(scope: !13536, file: !3, line: 5263, column: 24)
!13542 = !DILocation(line: 5265, column: 13, scope: !13540)
!13543 = !DILocation(line: 5265, column: 21, scope: !13540)
!13544 = !DILocation(line: 5265, column: 8, scope: !13541)
!13545 = !DILocalVariable(name: "__ret_warn_on", scope: !13546, file: !3, line: 5266, type: !240)
!13546 = distinct !DILexicalBlock(scope: !13547, file: !3, line: 5266, column: 5)
!13547 = distinct !DILexicalBlock(scope: !13540, file: !3, line: 5265, column: 27)
!13548 = !DILocation(line: 5266, column: 5, scope: !13546)
!13549 = !DILocation(line: 5266, column: 5, scope: !13550)
!13550 = distinct !DILexicalBlock(scope: !13546, file: !3, line: 5266, column: 5)
!13551 = !DILocation(line: 5266, column: 5, scope: !13552)
!13552 = distinct !DILexicalBlock(scope: !13550, file: !3, line: 5266, column: 5)
!13553 = !DILocation(line: 5266, column: 5, scope: !13554)
!13554 = distinct !DILexicalBlock(scope: !13552, file: !3, line: 5266, column: 5)
!13555 = !DILocation(line: 5266, column: 5, scope: !13556)
!13556 = distinct !DILexicalBlock(scope: !13552, file: !3, line: 5266, column: 5)
!13557 = !DILocation(line: 5266, column: 5, scope: !13558)
!13558 = distinct !DILexicalBlock(scope: !13556, file: !3, line: 5266, column: 5)
!13559 = !DILocation(line: 5266, column: 5, scope: !13560)
!13560 = distinct !DILexicalBlock(scope: !13556, file: !3, line: 5266, column: 5)
!13561 = !{i32 -2141517424, i32 -2141517395, i32 -2141517349, i32 -2141517291, i32 -2141517237, i32 -2141517183, i32 -2141517128, i32 -2141517097}
!13562 = !DILocation(line: 5266, column: 5, scope: !13563)
!13563 = distinct !DILexicalBlock(scope: !13556, file: !3, line: 5266, column: 5)
!13564 = !{i32 -2141516671, i32 -2141516664, i32 -2141516612, i32 -2141516581, i32 -2141516551}
!13565 = !DILocation(line: 5266, column: 5, scope: !13566)
!13566 = distinct !DILexicalBlock(scope: !13556, file: !3, line: 5266, column: 5)
!13567 = !DILocation(line: 5266, column: 5, scope: !13568)
!13568 = distinct !DILexicalBlock(scope: !13552, file: !3, line: 5266, column: 5)
!13569 = !DILocation(line: 5267, column: 5, scope: !13547)
!13570 = !DILocation(line: 5270, column: 22, scope: !13541)
!13571 = !DILocation(line: 5270, column: 27, scope: !13541)
!13572 = !DILocation(line: 5270, column: 4, scope: !13541)
!13573 = !DILocation(line: 5272, column: 3, scope: !13541)
!13574 = !DILocation(line: 5279, column: 7, scope: !13366)
!13575 = !DILocation(line: 5279, column: 12, scope: !13366)
!13576 = !DILocation(line: 5279, column: 25, scope: !13366)
!13577 = !DILocation(line: 5279, column: 22, scope: !13366)
!13578 = !DILocation(line: 5279, column: 57, scope: !13366)
!13579 = !DILocation(line: 5280, column: 7, scope: !13366)
!13580 = !DILocation(line: 5280, column: 16, scope: !13366)
!13581 = !DILocation(line: 5280, column: 20, scope: !13366)
!13582 = !DILocation(line: 5280, column: 30, scope: !13366)
!13583 = !DILocation(line: 5280, column: 36, scope: !13366)
!13584 = !DILocation(line: 5279, column: 7, scope: !13367)
!13585 = !DILocalVariable(name: "steps", scope: !13365, file: !3, line: 5281, type: !240)
!13586 = !DILocation(line: 5281, column: 8, scope: !13365)
!13587 = !DILocalVariable(name: "bytes", scope: !13365, file: !3, line: 5281, type: !240)
!13588 = !DILocation(line: 5281, column: 15, scope: !13365)
!13589 = !DILocation(line: 5284, column: 4, scope: !13365)
!13590 = !DILocation(line: 5284, column: 9, scope: !13365)
!13591 = !DILocation(line: 5284, column: 14, scope: !13365)
!13592 = !DILocation(line: 5285, column: 12, scope: !13365)
!13593 = !DILocation(line: 5285, column: 17, scope: !13365)
!13594 = !DILocation(line: 5285, column: 29, scope: !13365)
!13595 = !DILocation(line: 5285, column: 34, scope: !13365)
!13596 = !DILocation(line: 5285, column: 27, scope: !13365)
!13597 = !DILocation(line: 5285, column: 10, scope: !13365)
!13598 = !DILocation(line: 5288, column: 13, scope: !13365)
!13599 = !DILocation(line: 5288, column: 18, scope: !13365)
!13600 = !DILocation(line: 5288, column: 26, scope: !13365)
!13601 = !DILocation(line: 5288, column: 33, scope: !13365)
!13602 = !DILocation(line: 5288, column: 31, scope: !13365)
!13603 = !DILocation(line: 5288, column: 10, scope: !13365)
!13604 = !DILocation(line: 5289, column: 20, scope: !13365)
!13605 = !DILocation(line: 5289, column: 26, scope: !13365)
!13606 = !DILocation(line: 5289, column: 40, scope: !13365)
!13607 = !DILocation(line: 5289, column: 45, scope: !13365)
!13608 = !DILocation(line: 5289, column: 38, scope: !13365)
!13609 = !DILocation(line: 340, column: 14, scope: !5520, inlinedAt: !13364)
!13610 = !DILocation(line: 338, column: 2, scope: !5520, inlinedAt: !13364)
!13611 = !DILocation(line: 351, column: 9, scope: !5520, inlinedAt: !13364)
!13612 = !DILocation(line: 351, column: 11, scope: !5520, inlinedAt: !13364)
!13613 = !DILocation(line: 5289, column: 30, scope: !13365)
!13614 = !DILocation(line: 5289, column: 4, scope: !13365)
!13615 = !DILocation(line: 5289, column: 9, scope: !13365)
!13616 = !DILocation(line: 5289, column: 18, scope: !13365)
!13617 = !DILocation(line: 5290, column: 3, scope: !13365)
!13618 = !DILocation(line: 5293, column: 3, scope: !13367)
!13619 = !DILocation(line: 5293, column: 8, scope: !13367)
!13620 = !DILocation(line: 5293, column: 14, scope: !13367)
!13621 = !DILocation(line: 5294, column: 29, scope: !13367)
!13622 = !DILocation(line: 5294, column: 15, scope: !13367)
!13623 = !DILocation(line: 5294, column: 3, scope: !13367)
!13624 = !DILocation(line: 5294, column: 8, scope: !13367)
!13625 = !DILocation(line: 5294, column: 13, scope: !13367)
!13626 = !DILocation(line: 5295, column: 8, scope: !13627)
!13627 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5295, column: 7)
!13628 = !DILocation(line: 5295, column: 13, scope: !13627)
!13629 = !DILocation(line: 5295, column: 7, scope: !13367)
!13630 = !DILocalVariable(name: "__ret_warn_on", scope: !13631, file: !3, line: 5296, type: !240)
!13631 = distinct !DILexicalBlock(scope: !13632, file: !3, line: 5296, column: 4)
!13632 = distinct !DILexicalBlock(scope: !13627, file: !3, line: 5295, column: 19)
!13633 = !DILocation(line: 5296, column: 4, scope: !13631)
!13634 = !DILocation(line: 5296, column: 4, scope: !13635)
!13635 = distinct !DILexicalBlock(scope: !13631, file: !3, line: 5296, column: 4)
!13636 = !DILocation(line: 5296, column: 4, scope: !13637)
!13637 = distinct !DILexicalBlock(scope: !13635, file: !3, line: 5296, column: 4)
!13638 = !DILocation(line: 5296, column: 4, scope: !13639)
!13639 = distinct !DILexicalBlock(scope: !13637, file: !3, line: 5296, column: 4)
!13640 = !DILocation(line: 5296, column: 4, scope: !13641)
!13641 = distinct !DILexicalBlock(scope: !13637, file: !3, line: 5296, column: 4)
!13642 = !DILocation(line: 5296, column: 4, scope: !13643)
!13643 = distinct !DILexicalBlock(scope: !13641, file: !3, line: 5296, column: 4)
!13644 = !DILocation(line: 5296, column: 4, scope: !13645)
!13645 = distinct !DILexicalBlock(scope: !13641, file: !3, line: 5296, column: 4)
!13646 = !{i32 -2141515613, i32 -2141515584, i32 -2141515538, i32 -2141515480, i32 -2141515426, i32 -2141515372, i32 -2141515317, i32 -2141515286}
!13647 = !DILocation(line: 5296, column: 4, scope: !13648)
!13648 = distinct !DILexicalBlock(scope: !13641, file: !3, line: 5296, column: 4)
!13649 = !{i32 -2141514860, i32 -2141514853, i32 -2141514801, i32 -2141514770, i32 -2141514740}
!13650 = !DILocation(line: 5296, column: 4, scope: !13651)
!13651 = distinct !DILexicalBlock(scope: !13641, file: !3, line: 5296, column: 4)
!13652 = !DILocation(line: 5296, column: 4, scope: !13653)
!13653 = distinct !DILexicalBlock(scope: !13637, file: !3, line: 5296, column: 4)
!13654 = !DILocation(line: 5297, column: 4, scope: !13632)
!13655 = !DILocation(line: 5299, column: 3, scope: !13367)
!13656 = !DILocalVariable(name: "__ret_warn_on", scope: !13657, file: !3, line: 5301, type: !240)
!13657 = distinct !DILexicalBlock(scope: !13367, file: !3, line: 5301, column: 3)
!13658 = !DILocation(line: 5301, column: 3, scope: !13657)
!13659 = !DILocation(line: 5301, column: 3, scope: !13660)
!13660 = distinct !DILexicalBlock(scope: !13657, file: !3, line: 5301, column: 3)
!13661 = !DILocation(line: 5301, column: 3, scope: !13662)
!13662 = distinct !DILexicalBlock(scope: !13660, file: !3, line: 5301, column: 3)
!13663 = !DILocation(line: 5301, column: 3, scope: !13664)
!13664 = distinct !DILexicalBlock(scope: !13662, file: !3, line: 5301, column: 3)
!13665 = !DILocation(line: 5301, column: 3, scope: !13666)
!13666 = distinct !DILexicalBlock(scope: !13662, file: !3, line: 5301, column: 3)
!13667 = !DILocation(line: 5301, column: 3, scope: !13668)
!13668 = distinct !DILexicalBlock(scope: !13666, file: !3, line: 5301, column: 3)
!13669 = !DILocation(line: 5301, column: 3, scope: !13670)
!13670 = distinct !DILexicalBlock(scope: !13666, file: !3, line: 5301, column: 3)
!13671 = !{i32 -2141513892, i32 -2141513863, i32 -2141513817, i32 -2141513759, i32 -2141513705, i32 -2141513651, i32 -2141513596, i32 -2141513565}
!13672 = !DILocation(line: 5301, column: 3, scope: !13673)
!13673 = distinct !DILexicalBlock(scope: !13666, file: !3, line: 5301, column: 3)
!13674 = !{i32 -2141513139, i32 -2141513132, i32 -2141513080, i32 -2141513049, i32 -2141513019}
!13675 = !DILocation(line: 5301, column: 3, scope: !13676)
!13676 = distinct !DILexicalBlock(scope: !13666, file: !3, line: 5301, column: 3)
!13677 = !DILocation(line: 5301, column: 3, scope: !13678)
!13678 = distinct !DILexicalBlock(scope: !13662, file: !3, line: 5301, column: 3)
!13679 = !DILocation(line: 5302, column: 3, scope: !13367)
!13680 = !DILocation(line: 5304, column: 1, scope: !13362)
!13681 = distinct !DISubprogram(name: "nand_erase", scope: !3, file: !3, line: 4157, type: !2708, scopeLine: 4158, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13682 = !DILocalVariable(name: "mtd", arg: 1, scope: !13681, file: !3, line: 4157, type: !2637)
!13683 = !DILocation(line: 4157, column: 40, scope: !13681)
!13684 = !DILocalVariable(name: "instr", arg: 2, scope: !13681, file: !3, line: 4157, type: !2710)
!13685 = !DILocation(line: 4157, column: 64, scope: !13681)
!13686 = !DILocation(line: 4159, column: 37, scope: !13681)
!13687 = !DILocation(line: 4159, column: 25, scope: !13681)
!13688 = !DILocation(line: 4159, column: 43, scope: !13681)
!13689 = !DILocation(line: 4159, column: 9, scope: !13681)
!13690 = !DILocation(line: 4159, column: 2, scope: !13681)
!13691 = distinct !DISubprogram(name: "panic_nand_write", scope: !3, file: !3, line: 4088, type: !13692, scopeLine: 4090, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13692 = !DISubroutineType(types: !13693)
!13693 = !{!240, !2637, !508, !303, !2720, !4542}
!13694 = !DILocalVariable(name: "mtd", arg: 1, scope: !13691, file: !3, line: 4088, type: !2637)
!13695 = !DILocation(line: 4088, column: 46, scope: !13691)
!13696 = !DILocalVariable(name: "to", arg: 2, scope: !13691, file: !3, line: 4088, type: !508)
!13697 = !DILocation(line: 4088, column: 58, scope: !13691)
!13698 = !DILocalVariable(name: "len", arg: 3, scope: !13691, file: !3, line: 4088, type: !303)
!13699 = !DILocation(line: 4088, column: 69, scope: !13691)
!13700 = !DILocalVariable(name: "retlen", arg: 4, scope: !13691, file: !3, line: 4089, type: !2720)
!13701 = !DILocation(line: 4089, column: 16, scope: !13691)
!13702 = !DILocalVariable(name: "buf", arg: 5, scope: !13691, file: !3, line: 4089, type: !4542)
!13703 = !DILocation(line: 4089, column: 39, scope: !13691)
!13704 = !DILocalVariable(name: "chip", scope: !13691, file: !3, line: 4091, type: !4166)
!13705 = !DILocation(line: 4091, column: 20, scope: !13691)
!13706 = !DILocation(line: 4091, column: 39, scope: !13691)
!13707 = !DILocation(line: 4091, column: 27, scope: !13691)
!13708 = !DILocalVariable(name: "chipnr", scope: !13691, file: !3, line: 4092, type: !240)
!13709 = !DILocation(line: 4092, column: 6, scope: !13691)
!13710 = !DILocation(line: 4092, column: 21, scope: !13691)
!13711 = !DILocation(line: 4092, column: 27, scope: !13691)
!13712 = !DILocation(line: 4092, column: 33, scope: !13691)
!13713 = !DILocation(line: 4092, column: 24, scope: !13691)
!13714 = !DILocation(line: 4092, column: 15, scope: !13691)
!13715 = !DILocalVariable(name: "ops", scope: !13691, file: !3, line: 4093, type: !2744)
!13716 = !DILocation(line: 4093, column: 21, scope: !13691)
!13717 = !DILocalVariable(name: "ret", scope: !13691, file: !3, line: 4094, type: !240)
!13718 = !DILocation(line: 4094, column: 6, scope: !13691)
!13719 = !DILocation(line: 4096, column: 21, scope: !13691)
!13720 = !DILocation(line: 4096, column: 27, scope: !13691)
!13721 = !DILocation(line: 4096, column: 2, scope: !13691)
!13722 = !DILocation(line: 4099, column: 18, scope: !13691)
!13723 = !DILocation(line: 4099, column: 2, scope: !13691)
!13724 = !DILocation(line: 4101, column: 2, scope: !13691)
!13725 = !DILocation(line: 4102, column: 12, scope: !13691)
!13726 = !DILocation(line: 4102, column: 6, scope: !13691)
!13727 = !DILocation(line: 4102, column: 10, scope: !13691)
!13728 = !DILocation(line: 4103, column: 26, scope: !13691)
!13729 = !DILocation(line: 4103, column: 6, scope: !13691)
!13730 = !DILocation(line: 4103, column: 13, scope: !13691)
!13731 = !DILocation(line: 4104, column: 6, scope: !13691)
!13732 = !DILocation(line: 4104, column: 11, scope: !13691)
!13733 = !DILocation(line: 4106, column: 26, scope: !13691)
!13734 = !DILocation(line: 4106, column: 32, scope: !13691)
!13735 = !DILocation(line: 4106, column: 8, scope: !13691)
!13736 = !DILocation(line: 4106, column: 6, scope: !13691)
!13737 = !DILocation(line: 4108, column: 16, scope: !13691)
!13738 = !DILocation(line: 4108, column: 3, scope: !13691)
!13739 = !DILocation(line: 4108, column: 10, scope: !13691)
!13740 = !DILocation(line: 4109, column: 9, scope: !13691)
!13741 = !DILocation(line: 4109, column: 2, scope: !13691)
!13742 = distinct !DISubprogram(name: "nand_read_oob", scope: !3, file: !3, line: 3524, type: !2741, scopeLine: 3526, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13743 = !DILocalVariable(name: "mtd", arg: 1, scope: !13742, file: !3, line: 3524, type: !2637)
!13744 = !DILocation(line: 3524, column: 43, scope: !13742)
!13745 = !DILocalVariable(name: "from", arg: 2, scope: !13742, file: !3, line: 3524, type: !508)
!13746 = !DILocation(line: 3524, column: 55, scope: !13742)
!13747 = !DILocalVariable(name: "ops", arg: 3, scope: !13742, file: !3, line: 3525, type: !2743)
!13748 = !DILocation(line: 3525, column: 25, scope: !13742)
!13749 = !DILocalVariable(name: "chip", scope: !13742, file: !3, line: 3527, type: !4166)
!13750 = !DILocation(line: 3527, column: 20, scope: !13742)
!13751 = !DILocation(line: 3527, column: 39, scope: !13742)
!13752 = !DILocation(line: 3527, column: 27, scope: !13742)
!13753 = !DILocalVariable(name: "ret", scope: !13742, file: !3, line: 3528, type: !240)
!13754 = !DILocation(line: 3528, column: 6, scope: !13742)
!13755 = !DILocation(line: 3530, column: 2, scope: !13742)
!13756 = !DILocation(line: 3530, column: 7, scope: !13742)
!13757 = !DILocation(line: 3530, column: 14, scope: !13742)
!13758 = !DILocation(line: 3532, column: 6, scope: !13759)
!13759 = distinct !DILexicalBlock(scope: !13742, file: !3, line: 3532, column: 6)
!13760 = !DILocation(line: 3532, column: 11, scope: !13759)
!13761 = !DILocation(line: 3532, column: 16, scope: !13759)
!13762 = !DILocation(line: 3532, column: 37, scope: !13759)
!13763 = !DILocation(line: 3533, column: 6, scope: !13759)
!13764 = !DILocation(line: 3533, column: 11, scope: !13759)
!13765 = !DILocation(line: 3533, column: 16, scope: !13759)
!13766 = !DILocation(line: 3533, column: 36, scope: !13759)
!13767 = !DILocation(line: 3534, column: 6, scope: !13759)
!13768 = !DILocation(line: 3534, column: 11, scope: !13759)
!13769 = !DILocation(line: 3534, column: 16, scope: !13759)
!13770 = !DILocation(line: 3532, column: 6, scope: !13742)
!13771 = !DILocation(line: 3535, column: 3, scope: !13759)
!13772 = !DILocation(line: 3537, column: 24, scope: !13742)
!13773 = !DILocation(line: 3537, column: 8, scope: !13742)
!13774 = !DILocation(line: 3537, column: 6, scope: !13742)
!13775 = !DILocation(line: 3538, column: 6, scope: !13776)
!13776 = distinct !DILexicalBlock(scope: !13742, file: !3, line: 3538, column: 6)
!13777 = !DILocation(line: 3538, column: 6, scope: !13742)
!13778 = !DILocation(line: 3539, column: 10, scope: !13776)
!13779 = !DILocation(line: 3539, column: 3, scope: !13776)
!13780 = !DILocation(line: 3541, column: 7, scope: !13781)
!13781 = distinct !DILexicalBlock(scope: !13742, file: !3, line: 3541, column: 6)
!13782 = !DILocation(line: 3541, column: 12, scope: !13781)
!13783 = !DILocation(line: 3541, column: 6, scope: !13742)
!13784 = !DILocation(line: 3542, column: 26, scope: !13781)
!13785 = !DILocation(line: 3542, column: 32, scope: !13781)
!13786 = !DILocation(line: 3542, column: 38, scope: !13781)
!13787 = !DILocation(line: 3542, column: 9, scope: !13781)
!13788 = !DILocation(line: 3542, column: 7, scope: !13781)
!13789 = !DILocation(line: 3542, column: 3, scope: !13781)
!13790 = !DILocation(line: 3544, column: 26, scope: !13781)
!13791 = !DILocation(line: 3544, column: 32, scope: !13781)
!13792 = !DILocation(line: 3544, column: 38, scope: !13781)
!13793 = !DILocation(line: 3544, column: 9, scope: !13781)
!13794 = !DILocation(line: 3544, column: 7, scope: !13781)
!13795 = !DILocation(line: 3546, column: 22, scope: !13742)
!13796 = !DILocation(line: 3546, column: 2, scope: !13742)
!13797 = !DILocation(line: 3547, column: 9, scope: !13742)
!13798 = !DILocation(line: 3547, column: 2, scope: !13742)
!13799 = !DILocation(line: 3548, column: 1, scope: !13742)
!13800 = distinct !DISubprogram(name: "nand_write_oob", scope: !3, file: !3, line: 4118, type: !2741, scopeLine: 4120, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13801 = !DILocalVariable(name: "mtd", arg: 1, scope: !13800, file: !3, line: 4118, type: !2637)
!13802 = !DILocation(line: 4118, column: 44, scope: !13800)
!13803 = !DILocalVariable(name: "to", arg: 2, scope: !13800, file: !3, line: 4118, type: !508)
!13804 = !DILocation(line: 4118, column: 56, scope: !13800)
!13805 = !DILocalVariable(name: "ops", arg: 3, scope: !13800, file: !3, line: 4119, type: !2743)
!13806 = !DILocation(line: 4119, column: 26, scope: !13800)
!13807 = !DILocalVariable(name: "chip", scope: !13800, file: !3, line: 4121, type: !4166)
!13808 = !DILocation(line: 4121, column: 20, scope: !13800)
!13809 = !DILocation(line: 4121, column: 39, scope: !13800)
!13810 = !DILocation(line: 4121, column: 27, scope: !13800)
!13811 = !DILocalVariable(name: "ret", scope: !13800, file: !3, line: 4122, type: !240)
!13812 = !DILocation(line: 4122, column: 6, scope: !13800)
!13813 = !DILocation(line: 4124, column: 2, scope: !13800)
!13814 = !DILocation(line: 4124, column: 7, scope: !13800)
!13815 = !DILocation(line: 4124, column: 14, scope: !13800)
!13816 = !DILocation(line: 4126, column: 24, scope: !13800)
!13817 = !DILocation(line: 4126, column: 8, scope: !13800)
!13818 = !DILocation(line: 4126, column: 6, scope: !13800)
!13819 = !DILocation(line: 4127, column: 6, scope: !13820)
!13820 = distinct !DILexicalBlock(scope: !13800, file: !3, line: 4127, column: 6)
!13821 = !DILocation(line: 4127, column: 6, scope: !13800)
!13822 = !DILocation(line: 4128, column: 10, scope: !13820)
!13823 = !DILocation(line: 4128, column: 3, scope: !13820)
!13824 = !DILocation(line: 4130, column: 10, scope: !13800)
!13825 = !DILocation(line: 4130, column: 15, scope: !13800)
!13826 = !DILocation(line: 4130, column: 2, scope: !13800)
!13827 = !DILocation(line: 4134, column: 3, scope: !13828)
!13828 = distinct !DILexicalBlock(scope: !13800, file: !3, line: 4130, column: 21)
!13829 = !DILocation(line: 4137, column: 3, scope: !13828)
!13830 = !DILocation(line: 4140, column: 7, scope: !13831)
!13831 = distinct !DILexicalBlock(scope: !13800, file: !3, line: 4140, column: 6)
!13832 = !DILocation(line: 4140, column: 12, scope: !13831)
!13833 = !DILocation(line: 4140, column: 6, scope: !13800)
!13834 = !DILocation(line: 4141, column: 27, scope: !13831)
!13835 = !DILocation(line: 4141, column: 33, scope: !13831)
!13836 = !DILocation(line: 4141, column: 37, scope: !13831)
!13837 = !DILocation(line: 4141, column: 9, scope: !13831)
!13838 = !DILocation(line: 4141, column: 7, scope: !13831)
!13839 = !DILocation(line: 4141, column: 3, scope: !13831)
!13840 = !DILocation(line: 4143, column: 27, scope: !13831)
!13841 = !DILocation(line: 4143, column: 33, scope: !13831)
!13842 = !DILocation(line: 4143, column: 37, scope: !13831)
!13843 = !DILocation(line: 4143, column: 9, scope: !13831)
!13844 = !DILocation(line: 4143, column: 7, scope: !13831)
!13845 = !DILabel(scope: !13800, name: "out", file: !3, line: 4145)
!13846 = !DILocation(line: 4145, column: 1, scope: !13800)
!13847 = !DILocation(line: 4146, column: 22, scope: !13800)
!13848 = !DILocation(line: 4146, column: 2, scope: !13800)
!13849 = !DILocation(line: 4147, column: 9, scope: !13800)
!13850 = !DILocation(line: 4147, column: 2, scope: !13800)
!13851 = !DILocation(line: 4148, column: 1, scope: !13800)
!13852 = distinct !DISubprogram(name: "nand_sync", scope: !3, file: !3, line: 4266, type: !2778, scopeLine: 4267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13853 = !DILocalVariable(name: "mtd", arg: 1, scope: !13852, file: !3, line: 4266, type: !2637)
!13854 = !DILocation(line: 4266, column: 40, scope: !13852)
!13855 = !DILocalVariable(name: "chip", scope: !13852, file: !3, line: 4268, type: !4166)
!13856 = !DILocation(line: 4268, column: 20, scope: !13852)
!13857 = !DILocation(line: 4268, column: 39, scope: !13852)
!13858 = !DILocation(line: 4268, column: 27, scope: !13852)
!13859 = !DILocation(line: 4270, column: 2, scope: !13860)
!13860 = distinct !DILexicalBlock(scope: !13861, file: !3, line: 4270, column: 2)
!13861 = distinct !DILexicalBlock(scope: !13852, file: !3, line: 4270, column: 2)
!13862 = !DILocation(line: 4270, column: 2, scope: !13861)
!13863 = !DILocalVariable(name: "__ret_warn_on", scope: !13864, file: !3, line: 4273, type: !240)
!13864 = distinct !DILexicalBlock(scope: !13852, file: !3, line: 4273, column: 2)
!13865 = !DILocation(line: 4273, column: 2, scope: !13864)
!13866 = !DILocation(line: 4273, column: 2, scope: !13867)
!13867 = distinct !DILexicalBlock(scope: !13864, file: !3, line: 4273, column: 2)
!13868 = !DILocation(line: 4273, column: 2, scope: !13869)
!13869 = distinct !DILexicalBlock(scope: !13867, file: !3, line: 4273, column: 2)
!13870 = !DILocation(line: 4273, column: 2, scope: !13871)
!13871 = distinct !DILexicalBlock(scope: !13869, file: !3, line: 4273, column: 2)
!13872 = !DILocation(line: 4273, column: 2, scope: !13873)
!13873 = distinct !DILexicalBlock(scope: !13869, file: !3, line: 4273, column: 2)
!13874 = !{i32 -2141532601, i32 -2141532572, i32 -2141532526, i32 -2141532468, i32 -2141532414, i32 -2141532360, i32 -2141532305, i32 -2141532274}
!13875 = !DILocation(line: 4273, column: 2, scope: !13876)
!13876 = distinct !DILexicalBlock(scope: !13869, file: !3, line: 4273, column: 2)
!13877 = !{i32 -2141531859, i32 -2141531852, i32 -2141531800, i32 -2141531769, i32 -2141531739}
!13878 = !DILocation(line: 4273, column: 2, scope: !13879)
!13879 = distinct !DILexicalBlock(scope: !13869, file: !3, line: 4273, column: 2)
!13880 = !DILocation(line: 4275, column: 22, scope: !13852)
!13881 = !DILocation(line: 4275, column: 2, scope: !13852)
!13882 = !DILocation(line: 4276, column: 1, scope: !13852)
!13883 = distinct !DISubprogram(name: "nand_lock", scope: !3, file: !3, line: 4381, type: !2782, scopeLine: 4382, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13884 = !DILocalVariable(name: "mtd", arg: 1, scope: !13883, file: !3, line: 4381, type: !2637)
!13885 = !DILocation(line: 4381, column: 39, scope: !13883)
!13886 = !DILocalVariable(name: "ofs", arg: 2, scope: !13883, file: !3, line: 4381, type: !508)
!13887 = !DILocation(line: 4381, column: 51, scope: !13883)
!13888 = !DILocalVariable(name: "len", arg: 3, scope: !13883, file: !3, line: 4381, type: !2645)
!13889 = !DILocation(line: 4381, column: 65, scope: !13883)
!13890 = !DILocalVariable(name: "chip", scope: !13883, file: !3, line: 4383, type: !4166)
!13891 = !DILocation(line: 4383, column: 20, scope: !13883)
!13892 = !DILocation(line: 4383, column: 39, scope: !13883)
!13893 = !DILocation(line: 4383, column: 27, scope: !13883)
!13894 = !DILocation(line: 4385, column: 7, scope: !13895)
!13895 = distinct !DILexicalBlock(scope: !13883, file: !3, line: 4385, column: 6)
!13896 = !DILocation(line: 4385, column: 13, scope: !13895)
!13897 = !DILocation(line: 4385, column: 17, scope: !13895)
!13898 = !DILocation(line: 4385, column: 6, scope: !13883)
!13899 = !DILocation(line: 4386, column: 3, scope: !13895)
!13900 = !DILocation(line: 4388, column: 9, scope: !13883)
!13901 = !DILocation(line: 4388, column: 15, scope: !13883)
!13902 = !DILocation(line: 4388, column: 19, scope: !13883)
!13903 = !DILocation(line: 4388, column: 29, scope: !13883)
!13904 = !DILocation(line: 4388, column: 35, scope: !13883)
!13905 = !DILocation(line: 4388, column: 40, scope: !13883)
!13906 = !DILocation(line: 4388, column: 2, scope: !13883)
!13907 = !DILocation(line: 4389, column: 1, scope: !13883)
!13908 = distinct !DISubprogram(name: "nand_unlock", scope: !3, file: !3, line: 4397, type: !2782, scopeLine: 4398, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13909 = !DILocalVariable(name: "mtd", arg: 1, scope: !13908, file: !3, line: 4397, type: !2637)
!13910 = !DILocation(line: 4397, column: 41, scope: !13908)
!13911 = !DILocalVariable(name: "ofs", arg: 2, scope: !13908, file: !3, line: 4397, type: !508)
!13912 = !DILocation(line: 4397, column: 53, scope: !13908)
!13913 = !DILocalVariable(name: "len", arg: 3, scope: !13908, file: !3, line: 4397, type: !2645)
!13914 = !DILocation(line: 4397, column: 67, scope: !13908)
!13915 = !DILocalVariable(name: "chip", scope: !13908, file: !3, line: 4399, type: !4166)
!13916 = !DILocation(line: 4399, column: 20, scope: !13908)
!13917 = !DILocation(line: 4399, column: 39, scope: !13908)
!13918 = !DILocation(line: 4399, column: 27, scope: !13908)
!13919 = !DILocation(line: 4401, column: 7, scope: !13920)
!13920 = distinct !DILexicalBlock(scope: !13908, file: !3, line: 4401, column: 6)
!13921 = !DILocation(line: 4401, column: 13, scope: !13920)
!13922 = !DILocation(line: 4401, column: 17, scope: !13920)
!13923 = !DILocation(line: 4401, column: 6, scope: !13908)
!13924 = !DILocation(line: 4402, column: 3, scope: !13920)
!13925 = !DILocation(line: 4404, column: 9, scope: !13908)
!13926 = !DILocation(line: 4404, column: 15, scope: !13908)
!13927 = !DILocation(line: 4404, column: 19, scope: !13908)
!13928 = !DILocation(line: 4404, column: 31, scope: !13908)
!13929 = !DILocation(line: 4404, column: 37, scope: !13908)
!13930 = !DILocation(line: 4404, column: 42, scope: !13908)
!13931 = !DILocation(line: 4404, column: 2, scope: !13908)
!13932 = !DILocation(line: 4405, column: 1, scope: !13908)
!13933 = distinct !DISubprogram(name: "nand_suspend", scope: !3, file: !3, line: 4330, type: !2795, scopeLine: 4331, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13934 = !DILocalVariable(name: "mtd", arg: 1, scope: !13933, file: !3, line: 4330, type: !2637)
!13935 = !DILocation(line: 4330, column: 42, scope: !13933)
!13936 = !DILocalVariable(name: "chip", scope: !13933, file: !3, line: 4332, type: !4166)
!13937 = !DILocation(line: 4332, column: 20, scope: !13933)
!13938 = !DILocation(line: 4332, column: 39, scope: !13933)
!13939 = !DILocation(line: 4332, column: 27, scope: !13933)
!13940 = !DILocalVariable(name: "ret", scope: !13933, file: !3, line: 4333, type: !240)
!13941 = !DILocation(line: 4333, column: 6, scope: !13933)
!13942 = !DILocation(line: 4335, column: 14, scope: !13933)
!13943 = !DILocation(line: 4335, column: 20, scope: !13933)
!13944 = !DILocation(line: 4335, column: 2, scope: !13933)
!13945 = !DILocation(line: 4336, column: 6, scope: !13946)
!13946 = distinct !DILexicalBlock(scope: !13933, file: !3, line: 4336, column: 6)
!13947 = !DILocation(line: 4336, column: 12, scope: !13946)
!13948 = !DILocation(line: 4336, column: 16, scope: !13946)
!13949 = !DILocation(line: 4336, column: 6, scope: !13933)
!13950 = !DILocation(line: 4337, column: 9, scope: !13946)
!13951 = !DILocation(line: 4337, column: 15, scope: !13946)
!13952 = !DILocation(line: 4337, column: 19, scope: !13946)
!13953 = !DILocation(line: 4337, column: 27, scope: !13946)
!13954 = !DILocation(line: 4337, column: 7, scope: !13946)
!13955 = !DILocation(line: 4337, column: 3, scope: !13946)
!13956 = !DILocation(line: 4338, column: 7, scope: !13957)
!13957 = distinct !DILexicalBlock(scope: !13933, file: !3, line: 4338, column: 6)
!13958 = !DILocation(line: 4338, column: 6, scope: !13933)
!13959 = !DILocation(line: 4339, column: 3, scope: !13957)
!13960 = !DILocation(line: 4339, column: 9, scope: !13957)
!13961 = !DILocation(line: 4339, column: 19, scope: !13957)
!13962 = !DILocation(line: 4340, column: 16, scope: !13933)
!13963 = !DILocation(line: 4340, column: 22, scope: !13933)
!13964 = !DILocation(line: 4340, column: 2, scope: !13933)
!13965 = !DILocation(line: 4342, column: 9, scope: !13933)
!13966 = !DILocation(line: 4342, column: 2, scope: !13933)
!13967 = distinct !DISubprogram(name: "nand_resume", scope: !3, file: !3, line: 4349, type: !2778, scopeLine: 4350, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!13968 = !DILocalVariable(name: "mtd", arg: 1, scope: !13967, file: !3, line: 4349, type: !2637)
!13969 = !DILocation(line: 4349, column: 42, scope: !13967)
!13970 = !DILocalVariable(name: "chip", scope: !13967, file: !3, line: 4351, type: !4166)
!13971 = !DILocation(line: 4351, column: 20, scope: !13967)
!13972 = !DILocation(line: 4351, column: 39, scope: !13967)
!13973 = !DILocation(line: 4351, column: 27, scope: !13967)
!13974 = !DILocation(line: 4353, column: 14, scope: !13967)
!13975 = !DILocation(line: 4353, column: 20, scope: !13967)
!13976 = !DILocation(line: 4353, column: 2, scope: !13967)
!13977 = !DILocation(line: 4354, column: 6, scope: !13978)
!13978 = distinct !DILexicalBlock(scope: !13967, file: !3, line: 4354, column: 6)
!13979 = !DILocation(line: 4354, column: 12, scope: !13978)
!13980 = !DILocation(line: 4354, column: 6, scope: !13967)
!13981 = !DILocation(line: 4355, column: 7, scope: !13982)
!13982 = distinct !DILexicalBlock(scope: !13983, file: !3, line: 4355, column: 7)
!13983 = distinct !DILexicalBlock(scope: !13978, file: !3, line: 4354, column: 23)
!13984 = !DILocation(line: 4355, column: 13, scope: !13982)
!13985 = !DILocation(line: 4355, column: 17, scope: !13982)
!13986 = !DILocation(line: 4355, column: 7, scope: !13983)
!13987 = !DILocation(line: 4356, column: 4, scope: !13982)
!13988 = !DILocation(line: 4356, column: 10, scope: !13982)
!13989 = !DILocation(line: 4356, column: 14, scope: !13982)
!13990 = !DILocation(line: 4356, column: 21, scope: !13982)
!13991 = !DILocation(line: 4357, column: 3, scope: !13983)
!13992 = !DILocation(line: 4357, column: 9, scope: !13983)
!13993 = !DILocation(line: 4357, column: 19, scope: !13983)
!13994 = !DILocation(line: 4358, column: 2, scope: !13983)
!13995 = !DILocation(line: 4359, column: 3, scope: !13996)
!13996 = distinct !DILexicalBlock(scope: !13978, file: !3, line: 4358, column: 9)
!13997 = !DILocation(line: 4362, column: 16, scope: !13967)
!13998 = !DILocation(line: 4362, column: 22, scope: !13967)
!13999 = !DILocation(line: 4362, column: 2, scope: !13967)
!14000 = !DILocation(line: 4363, column: 1, scope: !13967)
!14001 = distinct !DISubprogram(name: "nand_shutdown", scope: !3, file: !3, line: 4370, type: !2778, scopeLine: 4371, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14002 = !DILocalVariable(name: "mtd", arg: 1, scope: !14001, file: !3, line: 4370, type: !2637)
!14003 = !DILocation(line: 4370, column: 44, scope: !14001)
!14004 = !DILocation(line: 4372, column: 15, scope: !14001)
!14005 = !DILocation(line: 4372, column: 2, scope: !14001)
!14006 = !DILocation(line: 4373, column: 1, scope: !14001)
!14007 = distinct !DISubprogram(name: "nand_block_isreserved", scope: !3, file: !3, line: 562, type: !2788, scopeLine: 563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14008 = !DILocalVariable(name: "mtd", arg: 1, scope: !14007, file: !3, line: 562, type: !2637)
!14009 = !DILocation(line: 562, column: 51, scope: !14007)
!14010 = !DILocalVariable(name: "ofs", arg: 2, scope: !14007, file: !3, line: 562, type: !508)
!14011 = !DILocation(line: 562, column: 63, scope: !14007)
!14012 = !DILocalVariable(name: "chip", scope: !14007, file: !3, line: 564, type: !4166)
!14013 = !DILocation(line: 564, column: 20, scope: !14007)
!14014 = !DILocation(line: 564, column: 39, scope: !14007)
!14015 = !DILocation(line: 564, column: 27, scope: !14007)
!14016 = !DILocation(line: 566, column: 7, scope: !14017)
!14017 = distinct !DILexicalBlock(scope: !14007, file: !3, line: 566, column: 6)
!14018 = !DILocation(line: 566, column: 13, scope: !14017)
!14019 = !DILocation(line: 566, column: 6, scope: !14007)
!14020 = !DILocation(line: 567, column: 3, scope: !14017)
!14021 = !DILocation(line: 569, column: 29, scope: !14007)
!14022 = !DILocation(line: 569, column: 35, scope: !14007)
!14023 = !DILocation(line: 569, column: 9, scope: !14007)
!14024 = !DILocation(line: 569, column: 2, scope: !14007)
!14025 = !DILocation(line: 570, column: 1, scope: !14007)
!14026 = distinct !DISubprogram(name: "nand_block_isbad", scope: !3, file: !3, line: 4283, type: !2788, scopeLine: 4284, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14027 = !DILocalVariable(name: "mtd", arg: 1, scope: !14026, file: !3, line: 4283, type: !2637)
!14028 = !DILocation(line: 4283, column: 46, scope: !14026)
!14029 = !DILocalVariable(name: "offs", arg: 2, scope: !14026, file: !3, line: 4283, type: !508)
!14030 = !DILocation(line: 4283, column: 58, scope: !14026)
!14031 = !DILocalVariable(name: "chip", scope: !14026, file: !3, line: 4285, type: !4166)
!14032 = !DILocation(line: 4285, column: 20, scope: !14026)
!14033 = !DILocation(line: 4285, column: 39, scope: !14026)
!14034 = !DILocation(line: 4285, column: 27, scope: !14026)
!14035 = !DILocalVariable(name: "chipnr", scope: !14026, file: !3, line: 4286, type: !240)
!14036 = !DILocation(line: 4286, column: 6, scope: !14026)
!14037 = !DILocation(line: 4286, column: 21, scope: !14026)
!14038 = !DILocation(line: 4286, column: 29, scope: !14026)
!14039 = !DILocation(line: 4286, column: 35, scope: !14026)
!14040 = !DILocation(line: 4286, column: 26, scope: !14026)
!14041 = !DILocation(line: 4286, column: 15, scope: !14026)
!14042 = !DILocalVariable(name: "ret", scope: !14026, file: !3, line: 4287, type: !240)
!14043 = !DILocation(line: 4287, column: 6, scope: !14026)
!14044 = !DILocation(line: 4290, column: 24, scope: !14026)
!14045 = !DILocation(line: 4290, column: 8, scope: !14026)
!14046 = !DILocation(line: 4290, column: 6, scope: !14026)
!14047 = !DILocation(line: 4291, column: 6, scope: !14048)
!14048 = distinct !DILexicalBlock(scope: !14026, file: !3, line: 4291, column: 6)
!14049 = !DILocation(line: 4291, column: 6, scope: !14026)
!14050 = !DILocation(line: 4292, column: 10, scope: !14048)
!14051 = !DILocation(line: 4292, column: 3, scope: !14048)
!14052 = !DILocation(line: 4294, column: 21, scope: !14026)
!14053 = !DILocation(line: 4294, column: 27, scope: !14026)
!14054 = !DILocation(line: 4294, column: 2, scope: !14026)
!14055 = !DILocation(line: 4296, column: 28, scope: !14026)
!14056 = !DILocation(line: 4296, column: 34, scope: !14026)
!14057 = !DILocation(line: 4296, column: 8, scope: !14026)
!14058 = !DILocation(line: 4296, column: 6, scope: !14026)
!14059 = !DILocation(line: 4298, column: 23, scope: !14026)
!14060 = !DILocation(line: 4298, column: 2, scope: !14026)
!14061 = !DILocation(line: 4299, column: 22, scope: !14026)
!14062 = !DILocation(line: 4299, column: 2, scope: !14026)
!14063 = !DILocation(line: 4301, column: 9, scope: !14026)
!14064 = !DILocation(line: 4301, column: 2, scope: !14026)
!14065 = !DILocation(line: 4302, column: 1, scope: !14026)
!14066 = distinct !DISubprogram(name: "nand_block_markbad", scope: !3, file: !3, line: 4309, type: !2788, scopeLine: 4310, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14067 = !DILocalVariable(name: "mtd", arg: 1, scope: !14066, file: !3, line: 4309, type: !2637)
!14068 = !DILocation(line: 4309, column: 48, scope: !14066)
!14069 = !DILocalVariable(name: "ofs", arg: 2, scope: !14066, file: !3, line: 4309, type: !508)
!14070 = !DILocation(line: 4309, column: 60, scope: !14066)
!14071 = !DILocalVariable(name: "ret", scope: !14066, file: !3, line: 4311, type: !240)
!14072 = !DILocation(line: 4311, column: 6, scope: !14066)
!14073 = !DILocation(line: 4313, column: 25, scope: !14066)
!14074 = !DILocation(line: 4313, column: 30, scope: !14066)
!14075 = !DILocation(line: 4313, column: 8, scope: !14066)
!14076 = !DILocation(line: 4313, column: 6, scope: !14066)
!14077 = !DILocation(line: 4314, column: 6, scope: !14078)
!14078 = distinct !DILexicalBlock(scope: !14066, file: !3, line: 4314, column: 6)
!14079 = !DILocation(line: 4314, column: 6, scope: !14066)
!14080 = !DILocation(line: 4316, column: 7, scope: !14081)
!14081 = distinct !DILexicalBlock(scope: !14082, file: !3, line: 4316, column: 7)
!14082 = distinct !DILexicalBlock(scope: !14078, file: !3, line: 4314, column: 11)
!14083 = !DILocation(line: 4316, column: 11, scope: !14081)
!14084 = !DILocation(line: 4316, column: 7, scope: !14082)
!14085 = !DILocation(line: 4317, column: 4, scope: !14081)
!14086 = !DILocation(line: 4318, column: 10, scope: !14082)
!14087 = !DILocation(line: 4318, column: 3, scope: !14082)
!14088 = !DILocation(line: 4321, column: 49, scope: !14066)
!14089 = !DILocation(line: 4321, column: 37, scope: !14066)
!14090 = !DILocation(line: 4321, column: 55, scope: !14066)
!14091 = !DILocation(line: 4321, column: 9, scope: !14066)
!14092 = !DILocation(line: 4321, column: 2, scope: !14066)
!14093 = !DILocation(line: 4322, column: 1, scope: !14066)
!14094 = distinct !DISubprogram(name: "nand_choose_interface_config", scope: !3, file: !3, line: 927, type: !4222, scopeLine: 928, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14095 = !DILocalVariable(name: "chip", arg: 1, scope: !14094, file: !3, line: 927, type: !4166)
!14096 = !DILocation(line: 927, column: 59, scope: !14094)
!14097 = !DILocalVariable(name: "iface", scope: !14094, file: !3, line: 929, type: !4315)
!14098 = !DILocation(line: 929, column: 32, scope: !14094)
!14099 = !DILocalVariable(name: "ret", scope: !14094, file: !3, line: 930, type: !240)
!14100 = !DILocation(line: 930, column: 6, scope: !14094)
!14101 = !DILocation(line: 932, column: 43, scope: !14102)
!14102 = distinct !DILexicalBlock(scope: !14094, file: !3, line: 932, column: 6)
!14103 = !DILocation(line: 932, column: 7, scope: !14102)
!14104 = !DILocation(line: 932, column: 6, scope: !14094)
!14105 = !DILocation(line: 933, column: 3, scope: !14102)
!14106 = !DILocation(line: 935, column: 10, scope: !14094)
!14107 = !DILocation(line: 935, column: 8, scope: !14094)
!14108 = !DILocation(line: 936, column: 7, scope: !14109)
!14109 = distinct !DILexicalBlock(scope: !14094, file: !3, line: 936, column: 6)
!14110 = !DILocation(line: 936, column: 6, scope: !14094)
!14111 = !DILocation(line: 937, column: 3, scope: !14109)
!14112 = !DILocation(line: 939, column: 6, scope: !14113)
!14113 = distinct !DILexicalBlock(scope: !14094, file: !3, line: 939, column: 6)
!14114 = !DILocation(line: 939, column: 12, scope: !14113)
!14115 = !DILocation(line: 939, column: 16, scope: !14113)
!14116 = !DILocation(line: 939, column: 6, scope: !14094)
!14117 = !DILocation(line: 940, column: 9, scope: !14113)
!14118 = !DILocation(line: 940, column: 15, scope: !14113)
!14119 = !DILocation(line: 940, column: 19, scope: !14113)
!14120 = !DILocation(line: 940, column: 43, scope: !14113)
!14121 = !DILocation(line: 940, column: 49, scope: !14113)
!14122 = !DILocation(line: 940, column: 7, scope: !14113)
!14123 = !DILocation(line: 940, column: 3, scope: !14113)
!14124 = !DILocation(line: 942, column: 38, scope: !14113)
!14125 = !DILocation(line: 942, column: 44, scope: !14113)
!14126 = !DILocation(line: 942, column: 9, scope: !14113)
!14127 = !DILocation(line: 942, column: 7, scope: !14113)
!14128 = !DILocation(line: 944, column: 6, scope: !14129)
!14129 = distinct !DILexicalBlock(scope: !14094, file: !3, line: 944, column: 6)
!14130 = !DILocation(line: 944, column: 6, scope: !14094)
!14131 = !DILocation(line: 945, column: 9, scope: !14129)
!14132 = !DILocation(line: 945, column: 3, scope: !14129)
!14133 = !DILocation(line: 947, column: 9, scope: !14094)
!14134 = !DILocation(line: 947, column: 2, scope: !14094)
!14135 = !DILocation(line: 948, column: 1, scope: !14094)
!14136 = distinct !DISubprogram(name: "get_order", scope: !14137, file: !14137, line: 29, type: !14138, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14137 = !DIFile(filename: "./include/asm-generic/getorder.h", directory: "/home/lizy2001/genbc/linux")
!14138 = !DISubroutineType(types: !14139)
!14139 = !{!240, !306}
!14140 = !DILocalVariable(name: "x", arg: 1, scope: !14141, file: !5521, line: 366, type: !401)
!14141 = distinct !DISubprogram(name: "fls64", scope: !5521, file: !5521, line: 366, type: !14142, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14142 = !DISubroutineType(types: !14143)
!14143 = !{!240, !401}
!14144 = !DILocation(line: 366, column: 40, scope: !14141, inlinedAt: !14145)
!14145 = distinct !DILocation(line: 46, column: 9, scope: !14136)
!14146 = !DILocalVariable(name: "bitpos", scope: !14141, file: !5521, line: 368, type: !240)
!14147 = !DILocation(line: 368, column: 6, scope: !14141, inlinedAt: !14145)
!14148 = !DILocalVariable(name: "size", arg: 1, scope: !14136, file: !14137, line: 29, type: !306)
!14149 = !DILocation(line: 29, column: 63, scope: !14136)
!14150 = !DILocation(line: 31, column: 27, scope: !14151)
!14151 = distinct !DILexicalBlock(scope: !14136, file: !14137, line: 31, column: 6)
!14152 = !DILocation(line: 31, column: 6, scope: !14151)
!14153 = !DILocation(line: 31, column: 6, scope: !14136)
!14154 = !DILocation(line: 32, column: 8, scope: !14155)
!14155 = distinct !DILexicalBlock(scope: !14156, file: !14137, line: 32, column: 7)
!14156 = distinct !DILexicalBlock(scope: !14151, file: !14137, line: 31, column: 34)
!14157 = !DILocation(line: 32, column: 7, scope: !14156)
!14158 = !DILocation(line: 33, column: 4, scope: !14155)
!14159 = !DILocation(line: 35, column: 7, scope: !14160)
!14160 = distinct !DILexicalBlock(scope: !14156, file: !14137, line: 35, column: 7)
!14161 = !DILocation(line: 35, column: 12, scope: !14160)
!14162 = !DILocation(line: 35, column: 7, scope: !14156)
!14163 = !DILocation(line: 36, column: 4, scope: !14160)
!14164 = !DILocation(line: 38, column: 10, scope: !14156)
!14165 = !DILocation(line: 38, column: 28, scope: !14156)
!14166 = !DILocation(line: 38, column: 41, scope: !14156)
!14167 = !DILocation(line: 38, column: 3, scope: !14156)
!14168 = !DILocation(line: 41, column: 6, scope: !14136)
!14169 = !DILocation(line: 42, column: 7, scope: !14136)
!14170 = !DILocation(line: 46, column: 15, scope: !14136)
!14171 = !DILocation(line: 374, column: 2, scope: !14141, inlinedAt: !14145)
!14172 = !DILocation(line: 376, column: 14, scope: !14141, inlinedAt: !14145)
!14173 = !{i32 455530}
!14174 = !DILocation(line: 377, column: 9, scope: !14141, inlinedAt: !14145)
!14175 = !DILocation(line: 377, column: 16, scope: !14141, inlinedAt: !14145)
!14176 = !DILocation(line: 46, column: 2, scope: !14136)
!14177 = !DILocation(line: 48, column: 1, scope: !14136)
!14178 = distinct !DISubprogram(name: "__ilog2_u64", scope: !14179, file: !14179, line: 30, type: !14180, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14179 = !DIFile(filename: "./include/linux/log2.h", directory: "/home/lizy2001/genbc/linux")
!14180 = !DISubroutineType(types: !14181)
!14181 = !{!240, !400}
!14182 = !DILocation(line: 366, column: 40, scope: !14141, inlinedAt: !14183)
!14183 = distinct !DILocation(line: 32, column: 9, scope: !14178)
!14184 = !DILocation(line: 368, column: 6, scope: !14141, inlinedAt: !14183)
!14185 = !DILocalVariable(name: "n", arg: 1, scope: !14178, file: !14179, line: 30, type: !400)
!14186 = !DILocation(line: 30, column: 21, scope: !14178)
!14187 = !DILocation(line: 32, column: 15, scope: !14178)
!14188 = !DILocation(line: 374, column: 2, scope: !14141, inlinedAt: !14183)
!14189 = !DILocation(line: 376, column: 14, scope: !14141, inlinedAt: !14183)
!14190 = !DILocation(line: 377, column: 9, scope: !14141, inlinedAt: !14183)
!14191 = !DILocation(line: 377, column: 16, scope: !14141, inlinedAt: !14183)
!14192 = !DILocation(line: 32, column: 18, scope: !14178)
!14193 = !DILocation(line: 32, column: 2, scope: !14178)
!14194 = distinct !DISubprogram(name: "kasan_kmalloc", scope: !14195, file: !14195, line: 137, type: !14196, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14195 = !DIFile(filename: "./include/linux/kasan.h", directory: "/home/lizy2001/genbc/linux")
!14196 = !DISubroutineType(types: !14197)
!14197 = !{!330, !956, !189, !303, !724}
!14198 = !DILocalVariable(name: "s", arg: 1, scope: !14194, file: !14195, line: 137, type: !956)
!14199 = !DILocation(line: 137, column: 54, scope: !14194)
!14200 = !DILocalVariable(name: "object", arg: 2, scope: !14194, file: !14195, line: 137, type: !189)
!14201 = !DILocation(line: 137, column: 69, scope: !14194)
!14202 = !DILocalVariable(name: "size", arg: 3, scope: !14194, file: !14195, line: 138, type: !303)
!14203 = !DILocation(line: 138, column: 12, scope: !14194)
!14204 = !DILocalVariable(name: "flags", arg: 4, scope: !14194, file: !14195, line: 138, type: !724)
!14205 = !DILocation(line: 138, column: 24, scope: !14194)
!14206 = !DILocation(line: 140, column: 17, scope: !14194)
!14207 = !DILocation(line: 140, column: 2, scope: !14194)
!14208 = distinct !DISubprogram(name: "nand_read_page_hwecc", scope: !3, file: !3, line: 2887, type: !4550, scopeLine: 2889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14209 = !DILocalVariable(name: "chip", arg: 1, scope: !14208, file: !3, line: 2887, type: !4166)
!14210 = !DILocation(line: 2887, column: 51, scope: !14208)
!14211 = !DILocalVariable(name: "buf", arg: 2, scope: !14208, file: !3, line: 2887, type: !2753)
!14212 = !DILocation(line: 2887, column: 66, scope: !14208)
!14213 = !DILocalVariable(name: "oob_required", arg: 3, scope: !14208, file: !3, line: 2888, type: !240)
!14214 = !DILocation(line: 2888, column: 9, scope: !14208)
!14215 = !DILocalVariable(name: "page", arg: 4, scope: !14208, file: !3, line: 2888, type: !240)
!14216 = !DILocation(line: 2888, column: 27, scope: !14208)
!14217 = !DILocalVariable(name: "mtd", scope: !14208, file: !3, line: 2890, type: !2637)
!14218 = !DILocation(line: 2890, column: 19, scope: !14208)
!14219 = !DILocation(line: 2890, column: 37, scope: !14208)
!14220 = !DILocation(line: 2890, column: 25, scope: !14208)
!14221 = !DILocalVariable(name: "i", scope: !14208, file: !3, line: 2891, type: !240)
!14222 = !DILocation(line: 2891, column: 6, scope: !14208)
!14223 = !DILocalVariable(name: "eccsize", scope: !14208, file: !3, line: 2891, type: !240)
!14224 = !DILocation(line: 2891, column: 9, scope: !14208)
!14225 = !DILocation(line: 2891, column: 19, scope: !14208)
!14226 = !DILocation(line: 2891, column: 25, scope: !14208)
!14227 = !DILocation(line: 2891, column: 29, scope: !14208)
!14228 = !DILocalVariable(name: "ret", scope: !14208, file: !3, line: 2891, type: !240)
!14229 = !DILocation(line: 2891, column: 35, scope: !14208)
!14230 = !DILocalVariable(name: "eccbytes", scope: !14208, file: !3, line: 2892, type: !240)
!14231 = !DILocation(line: 2892, column: 6, scope: !14208)
!14232 = !DILocation(line: 2892, column: 17, scope: !14208)
!14233 = !DILocation(line: 2892, column: 23, scope: !14208)
!14234 = !DILocation(line: 2892, column: 27, scope: !14208)
!14235 = !DILocalVariable(name: "eccsteps", scope: !14208, file: !3, line: 2893, type: !240)
!14236 = !DILocation(line: 2893, column: 6, scope: !14208)
!14237 = !DILocation(line: 2893, column: 17, scope: !14208)
!14238 = !DILocation(line: 2893, column: 23, scope: !14208)
!14239 = !DILocation(line: 2893, column: 27, scope: !14208)
!14240 = !DILocalVariable(name: "p", scope: !14208, file: !3, line: 2894, type: !2753)
!14241 = !DILocation(line: 2894, column: 11, scope: !14208)
!14242 = !DILocation(line: 2894, column: 15, scope: !14208)
!14243 = !DILocalVariable(name: "ecc_calc", scope: !14208, file: !3, line: 2895, type: !2753)
!14244 = !DILocation(line: 2895, column: 11, scope: !14208)
!14245 = !DILocation(line: 2895, column: 22, scope: !14208)
!14246 = !DILocation(line: 2895, column: 28, scope: !14208)
!14247 = !DILocation(line: 2895, column: 32, scope: !14208)
!14248 = !DILocalVariable(name: "ecc_code", scope: !14208, file: !3, line: 2896, type: !2753)
!14249 = !DILocation(line: 2896, column: 11, scope: !14208)
!14250 = !DILocation(line: 2896, column: 22, scope: !14208)
!14251 = !DILocation(line: 2896, column: 28, scope: !14208)
!14252 = !DILocation(line: 2896, column: 32, scope: !14208)
!14253 = !DILocalVariable(name: "max_bitflips", scope: !14208, file: !3, line: 2897, type: !7)
!14254 = !DILocation(line: 2897, column: 15, scope: !14208)
!14255 = !DILocation(line: 2899, column: 26, scope: !14208)
!14256 = !DILocation(line: 2899, column: 32, scope: !14208)
!14257 = !DILocation(line: 2899, column: 8, scope: !14208)
!14258 = !DILocation(line: 2899, column: 6, scope: !14208)
!14259 = !DILocation(line: 2900, column: 6, scope: !14260)
!14260 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 2900, column: 6)
!14261 = !DILocation(line: 2900, column: 6, scope: !14208)
!14262 = !DILocation(line: 2901, column: 10, scope: !14260)
!14263 = !DILocation(line: 2901, column: 3, scope: !14260)
!14264 = !DILocation(line: 2903, column: 9, scope: !14265)
!14265 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 2903, column: 2)
!14266 = !DILocation(line: 2903, column: 7, scope: !14265)
!14267 = !DILocation(line: 2903, column: 14, scope: !14268)
!14268 = distinct !DILexicalBlock(scope: !14265, file: !3, line: 2903, column: 2)
!14269 = !DILocation(line: 2903, column: 2, scope: !14265)
!14270 = !DILocation(line: 2904, column: 3, scope: !14271)
!14271 = distinct !DILexicalBlock(scope: !14268, file: !3, line: 2903, column: 65)
!14272 = !DILocation(line: 2904, column: 9, scope: !14271)
!14273 = !DILocation(line: 2904, column: 13, scope: !14271)
!14274 = !DILocation(line: 2904, column: 19, scope: !14271)
!14275 = !DILocation(line: 2906, column: 27, scope: !14271)
!14276 = !DILocation(line: 2906, column: 33, scope: !14271)
!14277 = !DILocation(line: 2906, column: 36, scope: !14271)
!14278 = !DILocation(line: 2906, column: 9, scope: !14271)
!14279 = !DILocation(line: 2906, column: 7, scope: !14271)
!14280 = !DILocation(line: 2907, column: 7, scope: !14281)
!14281 = distinct !DILexicalBlock(scope: !14271, file: !3, line: 2907, column: 7)
!14282 = !DILocation(line: 2907, column: 7, scope: !14271)
!14283 = !DILocation(line: 2908, column: 11, scope: !14281)
!14284 = !DILocation(line: 2908, column: 4, scope: !14281)
!14285 = !DILocation(line: 2910, column: 3, scope: !14271)
!14286 = !DILocation(line: 2910, column: 9, scope: !14271)
!14287 = !DILocation(line: 2910, column: 13, scope: !14271)
!14288 = !DILocation(line: 2910, column: 23, scope: !14271)
!14289 = !DILocation(line: 2910, column: 29, scope: !14271)
!14290 = !DILocation(line: 2910, column: 33, scope: !14271)
!14291 = !DILocation(line: 2910, column: 42, scope: !14271)
!14292 = !DILocation(line: 2911, column: 2, scope: !14271)
!14293 = !DILocation(line: 2903, column: 32, scope: !14268)
!14294 = !DILocation(line: 2903, column: 41, scope: !14268)
!14295 = !DILocation(line: 2903, column: 38, scope: !14268)
!14296 = !DILocation(line: 2903, column: 56, scope: !14268)
!14297 = !DILocation(line: 2903, column: 53, scope: !14268)
!14298 = !DILocation(line: 2903, column: 2, scope: !14268)
!14299 = distinct !{!14299, !14269, !14300}
!14300 = !DILocation(line: 2911, column: 2, scope: !14265)
!14301 = !DILocation(line: 2913, column: 26, scope: !14208)
!14302 = !DILocation(line: 2913, column: 32, scope: !14208)
!14303 = !DILocation(line: 2913, column: 38, scope: !14208)
!14304 = !DILocation(line: 2913, column: 47, scope: !14208)
!14305 = !DILocation(line: 2913, column: 52, scope: !14208)
!14306 = !DILocation(line: 2913, column: 8, scope: !14208)
!14307 = !DILocation(line: 2913, column: 6, scope: !14208)
!14308 = !DILocation(line: 2915, column: 6, scope: !14309)
!14309 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 2915, column: 6)
!14310 = !DILocation(line: 2915, column: 6, scope: !14208)
!14311 = !DILocation(line: 2916, column: 10, scope: !14309)
!14312 = !DILocation(line: 2916, column: 3, scope: !14309)
!14313 = !DILocation(line: 2918, column: 35, scope: !14208)
!14314 = !DILocation(line: 2918, column: 40, scope: !14208)
!14315 = !DILocation(line: 2918, column: 50, scope: !14208)
!14316 = !DILocation(line: 2918, column: 56, scope: !14208)
!14317 = !DILocation(line: 2919, column: 7, scope: !14208)
!14318 = !DILocation(line: 2919, column: 13, scope: !14208)
!14319 = !DILocation(line: 2919, column: 17, scope: !14208)
!14320 = !DILocation(line: 2918, column: 8, scope: !14208)
!14321 = !DILocation(line: 2918, column: 6, scope: !14208)
!14322 = !DILocation(line: 2920, column: 6, scope: !14323)
!14323 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 2920, column: 6)
!14324 = !DILocation(line: 2920, column: 6, scope: !14208)
!14325 = !DILocation(line: 2921, column: 10, scope: !14323)
!14326 = !DILocation(line: 2921, column: 3, scope: !14323)
!14327 = !DILocation(line: 2923, column: 13, scope: !14208)
!14328 = !DILocation(line: 2923, column: 19, scope: !14208)
!14329 = !DILocation(line: 2923, column: 23, scope: !14208)
!14330 = !DILocation(line: 2923, column: 11, scope: !14208)
!14331 = !DILocation(line: 2924, column: 6, scope: !14208)
!14332 = !DILocation(line: 2924, column: 4, scope: !14208)
!14333 = !DILocation(line: 2926, column: 9, scope: !14334)
!14334 = distinct !DILexicalBlock(scope: !14208, file: !3, line: 2926, column: 2)
!14335 = !DILocation(line: 2926, column: 7, scope: !14334)
!14336 = !DILocation(line: 2926, column: 15, scope: !14337)
!14337 = distinct !DILexicalBlock(scope: !14334, file: !3, line: 2926, column: 2)
!14338 = !DILocation(line: 2926, column: 2, scope: !14334)
!14339 = !DILocalVariable(name: "stat", scope: !14340, file: !3, line: 2927, type: !240)
!14340 = distinct !DILexicalBlock(scope: !14337, file: !3, line: 2926, column: 66)
!14341 = !DILocation(line: 2927, column: 7, scope: !14340)
!14342 = !DILocation(line: 2929, column: 10, scope: !14340)
!14343 = !DILocation(line: 2929, column: 16, scope: !14340)
!14344 = !DILocation(line: 2929, column: 20, scope: !14340)
!14345 = !DILocation(line: 2929, column: 28, scope: !14340)
!14346 = !DILocation(line: 2929, column: 34, scope: !14340)
!14347 = !DILocation(line: 2929, column: 38, scope: !14340)
!14348 = !DILocation(line: 2929, column: 47, scope: !14340)
!14349 = !DILocation(line: 2929, column: 52, scope: !14340)
!14350 = !DILocation(line: 2929, column: 61, scope: !14340)
!14351 = !DILocation(line: 2929, column: 8, scope: !14340)
!14352 = !DILocation(line: 2930, column: 7, scope: !14353)
!14353 = distinct !DILexicalBlock(scope: !14340, file: !3, line: 2930, column: 7)
!14354 = !DILocation(line: 2930, column: 12, scope: !14353)
!14355 = !DILocation(line: 2930, column: 24, scope: !14353)
!14356 = !DILocation(line: 2931, column: 8, scope: !14353)
!14357 = !DILocation(line: 2931, column: 14, scope: !14353)
!14358 = !DILocation(line: 2931, column: 18, scope: !14353)
!14359 = !DILocation(line: 2931, column: 26, scope: !14353)
!14360 = !DILocation(line: 2930, column: 7, scope: !14340)
!14361 = !DILocation(line: 2933, column: 39, scope: !14362)
!14362 = distinct !DILexicalBlock(scope: !14353, file: !3, line: 2931, column: 60)
!14363 = !DILocation(line: 2933, column: 42, scope: !14362)
!14364 = !DILocation(line: 2934, column: 8, scope: !14362)
!14365 = !DILocation(line: 2934, column: 17, scope: !14362)
!14366 = !DILocation(line: 2934, column: 21, scope: !14362)
!14367 = !DILocation(line: 2936, column: 7, scope: !14362)
!14368 = !DILocation(line: 2936, column: 13, scope: !14362)
!14369 = !DILocation(line: 2936, column: 17, scope: !14362)
!14370 = !DILocation(line: 2933, column: 11, scope: !14362)
!14371 = !DILocation(line: 2933, column: 9, scope: !14362)
!14372 = !DILocation(line: 2937, column: 3, scope: !14362)
!14373 = !DILocation(line: 2939, column: 7, scope: !14374)
!14374 = distinct !DILexicalBlock(scope: !14340, file: !3, line: 2939, column: 7)
!14375 = !DILocation(line: 2939, column: 12, scope: !14374)
!14376 = !DILocation(line: 2939, column: 7, scope: !14340)
!14377 = !DILocation(line: 2940, column: 4, scope: !14378)
!14378 = distinct !DILexicalBlock(scope: !14374, file: !3, line: 2939, column: 17)
!14379 = !DILocation(line: 2940, column: 9, scope: !14378)
!14380 = !DILocation(line: 2940, column: 19, scope: !14378)
!14381 = !DILocation(line: 2940, column: 25, scope: !14378)
!14382 = !DILocation(line: 2941, column: 3, scope: !14378)
!14383 = !DILocation(line: 2942, column: 32, scope: !14384)
!14384 = distinct !DILexicalBlock(scope: !14374, file: !3, line: 2941, column: 10)
!14385 = !DILocation(line: 2942, column: 4, scope: !14384)
!14386 = !DILocation(line: 2942, column: 9, scope: !14384)
!14387 = !DILocation(line: 2942, column: 19, scope: !14384)
!14388 = !DILocation(line: 2942, column: 29, scope: !14384)
!14389 = !DILocalVariable(name: "__UNIQUE_ID___x258", scope: !14390, file: !3, line: 2943, type: !7)
!14390 = distinct !DILexicalBlock(scope: !14384, file: !3, line: 2943, column: 19)
!14391 = !DILocation(line: 2943, column: 19, scope: !14390)
!14392 = !DILocalVariable(name: "__UNIQUE_ID___y259", scope: !14390, file: !3, line: 2943, type: !7)
!14393 = !DILocation(line: 2943, column: 17, scope: !14384)
!14394 = !DILocation(line: 2945, column: 2, scope: !14340)
!14395 = !DILocation(line: 2926, column: 33, scope: !14337)
!14396 = !DILocation(line: 2926, column: 42, scope: !14337)
!14397 = !DILocation(line: 2926, column: 39, scope: !14337)
!14398 = !DILocation(line: 2926, column: 57, scope: !14337)
!14399 = !DILocation(line: 2926, column: 54, scope: !14337)
!14400 = !DILocation(line: 2926, column: 2, scope: !14337)
!14401 = distinct !{!14401, !14338, !14402}
!14402 = !DILocation(line: 2945, column: 2, scope: !14334)
!14403 = !DILocation(line: 2946, column: 9, scope: !14208)
!14404 = !DILocation(line: 2946, column: 2, scope: !14208)
!14405 = !DILocation(line: 2947, column: 1, scope: !14208)
!14406 = distinct !DISubprogram(name: "nand_write_page_hwecc", scope: !3, file: !3, line: 3731, type: !4554, scopeLine: 3733, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14407 = !DILocalVariable(name: "chip", arg: 1, scope: !14406, file: !3, line: 3731, type: !4166)
!14408 = !DILocation(line: 3731, column: 52, scope: !14406)
!14409 = !DILocalVariable(name: "buf", arg: 2, scope: !14406, file: !3, line: 3731, type: !4542)
!14410 = !DILocation(line: 3731, column: 73, scope: !14406)
!14411 = !DILocalVariable(name: "oob_required", arg: 3, scope: !14406, file: !3, line: 3732, type: !240)
!14412 = !DILocation(line: 3732, column: 10, scope: !14406)
!14413 = !DILocalVariable(name: "page", arg: 4, scope: !14406, file: !3, line: 3732, type: !240)
!14414 = !DILocation(line: 3732, column: 28, scope: !14406)
!14415 = !DILocalVariable(name: "mtd", scope: !14406, file: !3, line: 3734, type: !2637)
!14416 = !DILocation(line: 3734, column: 19, scope: !14406)
!14417 = !DILocation(line: 3734, column: 37, scope: !14406)
!14418 = !DILocation(line: 3734, column: 25, scope: !14406)
!14419 = !DILocalVariable(name: "i", scope: !14406, file: !3, line: 3735, type: !240)
!14420 = !DILocation(line: 3735, column: 6, scope: !14406)
!14421 = !DILocalVariable(name: "eccsize", scope: !14406, file: !3, line: 3735, type: !240)
!14422 = !DILocation(line: 3735, column: 9, scope: !14406)
!14423 = !DILocation(line: 3735, column: 19, scope: !14406)
!14424 = !DILocation(line: 3735, column: 25, scope: !14406)
!14425 = !DILocation(line: 3735, column: 29, scope: !14406)
!14426 = !DILocalVariable(name: "ret", scope: !14406, file: !3, line: 3735, type: !240)
!14427 = !DILocation(line: 3735, column: 35, scope: !14406)
!14428 = !DILocalVariable(name: "eccbytes", scope: !14406, file: !3, line: 3736, type: !240)
!14429 = !DILocation(line: 3736, column: 6, scope: !14406)
!14430 = !DILocation(line: 3736, column: 17, scope: !14406)
!14431 = !DILocation(line: 3736, column: 23, scope: !14406)
!14432 = !DILocation(line: 3736, column: 27, scope: !14406)
!14433 = !DILocalVariable(name: "eccsteps", scope: !14406, file: !3, line: 3737, type: !240)
!14434 = !DILocation(line: 3737, column: 6, scope: !14406)
!14435 = !DILocation(line: 3737, column: 17, scope: !14406)
!14436 = !DILocation(line: 3737, column: 23, scope: !14406)
!14437 = !DILocation(line: 3737, column: 27, scope: !14406)
!14438 = !DILocalVariable(name: "ecc_calc", scope: !14406, file: !3, line: 3738, type: !2753)
!14439 = !DILocation(line: 3738, column: 11, scope: !14406)
!14440 = !DILocation(line: 3738, column: 22, scope: !14406)
!14441 = !DILocation(line: 3738, column: 28, scope: !14406)
!14442 = !DILocation(line: 3738, column: 32, scope: !14406)
!14443 = !DILocalVariable(name: "p", scope: !14406, file: !3, line: 3739, type: !4542)
!14444 = !DILocation(line: 3739, column: 17, scope: !14406)
!14445 = !DILocation(line: 3739, column: 21, scope: !14406)
!14446 = !DILocation(line: 3741, column: 32, scope: !14406)
!14447 = !DILocation(line: 3741, column: 38, scope: !14406)
!14448 = !DILocation(line: 3741, column: 8, scope: !14406)
!14449 = !DILocation(line: 3741, column: 6, scope: !14406)
!14450 = !DILocation(line: 3742, column: 6, scope: !14451)
!14451 = distinct !DILexicalBlock(scope: !14406, file: !3, line: 3742, column: 6)
!14452 = !DILocation(line: 3742, column: 6, scope: !14406)
!14453 = !DILocation(line: 3743, column: 10, scope: !14451)
!14454 = !DILocation(line: 3743, column: 3, scope: !14451)
!14455 = !DILocation(line: 3745, column: 9, scope: !14456)
!14456 = distinct !DILexicalBlock(scope: !14406, file: !3, line: 3745, column: 2)
!14457 = !DILocation(line: 3745, column: 7, scope: !14456)
!14458 = !DILocation(line: 3745, column: 14, scope: !14459)
!14459 = distinct !DILexicalBlock(scope: !14456, file: !3, line: 3745, column: 2)
!14460 = !DILocation(line: 3745, column: 2, scope: !14456)
!14461 = !DILocation(line: 3746, column: 3, scope: !14462)
!14462 = distinct !DILexicalBlock(scope: !14459, file: !3, line: 3745, column: 65)
!14463 = !DILocation(line: 3746, column: 9, scope: !14462)
!14464 = !DILocation(line: 3746, column: 13, scope: !14462)
!14465 = !DILocation(line: 3746, column: 19, scope: !14462)
!14466 = !DILocation(line: 3748, column: 28, scope: !14462)
!14467 = !DILocation(line: 3748, column: 34, scope: !14462)
!14468 = !DILocation(line: 3748, column: 37, scope: !14462)
!14469 = !DILocation(line: 3748, column: 9, scope: !14462)
!14470 = !DILocation(line: 3748, column: 7, scope: !14462)
!14471 = !DILocation(line: 3749, column: 7, scope: !14472)
!14472 = distinct !DILexicalBlock(scope: !14462, file: !3, line: 3749, column: 7)
!14473 = !DILocation(line: 3749, column: 7, scope: !14462)
!14474 = !DILocation(line: 3750, column: 11, scope: !14472)
!14475 = !DILocation(line: 3750, column: 4, scope: !14472)
!14476 = !DILocation(line: 3752, column: 3, scope: !14462)
!14477 = !DILocation(line: 3752, column: 9, scope: !14462)
!14478 = !DILocation(line: 3752, column: 13, scope: !14462)
!14479 = !DILocation(line: 3752, column: 23, scope: !14462)
!14480 = !DILocation(line: 3752, column: 29, scope: !14462)
!14481 = !DILocation(line: 3752, column: 33, scope: !14462)
!14482 = !DILocation(line: 3752, column: 42, scope: !14462)
!14483 = !DILocation(line: 3753, column: 2, scope: !14462)
!14484 = !DILocation(line: 3745, column: 32, scope: !14459)
!14485 = !DILocation(line: 3745, column: 41, scope: !14459)
!14486 = !DILocation(line: 3745, column: 38, scope: !14459)
!14487 = !DILocation(line: 3745, column: 56, scope: !14459)
!14488 = !DILocation(line: 3745, column: 53, scope: !14459)
!14489 = !DILocation(line: 3745, column: 2, scope: !14459)
!14490 = distinct !{!14490, !14460, !14491}
!14491 = !DILocation(line: 3753, column: 2, scope: !14456)
!14492 = !DILocation(line: 3755, column: 35, scope: !14406)
!14493 = !DILocation(line: 3755, column: 40, scope: !14406)
!14494 = !DILocation(line: 3755, column: 50, scope: !14406)
!14495 = !DILocation(line: 3755, column: 56, scope: !14406)
!14496 = !DILocation(line: 3756, column: 7, scope: !14406)
!14497 = !DILocation(line: 3756, column: 13, scope: !14406)
!14498 = !DILocation(line: 3756, column: 17, scope: !14406)
!14499 = !DILocation(line: 3755, column: 8, scope: !14406)
!14500 = !DILocation(line: 3755, column: 6, scope: !14406)
!14501 = !DILocation(line: 3757, column: 6, scope: !14502)
!14502 = distinct !DILexicalBlock(scope: !14406, file: !3, line: 3757, column: 6)
!14503 = !DILocation(line: 3757, column: 6, scope: !14406)
!14504 = !DILocation(line: 3758, column: 10, scope: !14502)
!14505 = !DILocation(line: 3758, column: 3, scope: !14502)
!14506 = !DILocation(line: 3760, column: 27, scope: !14406)
!14507 = !DILocation(line: 3760, column: 33, scope: !14406)
!14508 = !DILocation(line: 3760, column: 39, scope: !14406)
!14509 = !DILocation(line: 3760, column: 48, scope: !14406)
!14510 = !DILocation(line: 3760, column: 53, scope: !14406)
!14511 = !DILocation(line: 3760, column: 8, scope: !14406)
!14512 = !DILocation(line: 3760, column: 6, scope: !14406)
!14513 = !DILocation(line: 3761, column: 6, scope: !14514)
!14514 = distinct !DILexicalBlock(scope: !14406, file: !3, line: 3761, column: 6)
!14515 = !DILocation(line: 3761, column: 6, scope: !14406)
!14516 = !DILocation(line: 3762, column: 10, scope: !14514)
!14517 = !DILocation(line: 3762, column: 3, scope: !14514)
!14518 = !DILocation(line: 3764, column: 31, scope: !14406)
!14519 = !DILocation(line: 3764, column: 9, scope: !14406)
!14520 = !DILocation(line: 3764, column: 2, scope: !14406)
!14521 = !DILocation(line: 3765, column: 1, scope: !14406)
!14522 = distinct !DISubprogram(name: "nand_read_subpage", scope: !3, file: !3, line: 2775, type: !4559, scopeLine: 2777, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14523 = !DILocalVariable(name: "chip", arg: 1, scope: !14522, file: !3, line: 2775, type: !4166)
!14524 = !DILocation(line: 2775, column: 48, scope: !14522)
!14525 = !DILocalVariable(name: "data_offs", arg: 2, scope: !14522, file: !3, line: 2775, type: !536)
!14526 = !DILocation(line: 2775, column: 63, scope: !14522)
!14527 = !DILocalVariable(name: "readlen", arg: 3, scope: !14522, file: !3, line: 2776, type: !536)
!14528 = !DILocation(line: 2776, column: 18, scope: !14522)
!14529 = !DILocalVariable(name: "bufpoi", arg: 4, scope: !14522, file: !3, line: 2776, type: !2753)
!14530 = !DILocation(line: 2776, column: 36, scope: !14522)
!14531 = !DILocalVariable(name: "page", arg: 5, scope: !14522, file: !3, line: 2776, type: !240)
!14532 = !DILocation(line: 2776, column: 48, scope: !14522)
!14533 = !DILocalVariable(name: "mtd", scope: !14522, file: !3, line: 2778, type: !2637)
!14534 = !DILocation(line: 2778, column: 19, scope: !14522)
!14535 = !DILocation(line: 2778, column: 37, scope: !14522)
!14536 = !DILocation(line: 2778, column: 25, scope: !14522)
!14537 = !DILocalVariable(name: "start_step", scope: !14522, file: !3, line: 2779, type: !240)
!14538 = !DILocation(line: 2779, column: 6, scope: !14522)
!14539 = !DILocalVariable(name: "end_step", scope: !14522, file: !3, line: 2779, type: !240)
!14540 = !DILocation(line: 2779, column: 18, scope: !14522)
!14541 = !DILocalVariable(name: "num_steps", scope: !14522, file: !3, line: 2779, type: !240)
!14542 = !DILocation(line: 2779, column: 28, scope: !14522)
!14543 = !DILocalVariable(name: "ret", scope: !14522, file: !3, line: 2779, type: !240)
!14544 = !DILocation(line: 2779, column: 39, scope: !14522)
!14545 = !DILocalVariable(name: "p", scope: !14522, file: !3, line: 2780, type: !2753)
!14546 = !DILocation(line: 2780, column: 11, scope: !14522)
!14547 = !DILocalVariable(name: "data_col_addr", scope: !14522, file: !3, line: 2781, type: !240)
!14548 = !DILocation(line: 2781, column: 6, scope: !14522)
!14549 = !DILocalVariable(name: "i", scope: !14522, file: !3, line: 2781, type: !240)
!14550 = !DILocation(line: 2781, column: 21, scope: !14522)
!14551 = !DILocalVariable(name: "gaps", scope: !14522, file: !3, line: 2781, type: !240)
!14552 = !DILocation(line: 2781, column: 24, scope: !14522)
!14553 = !DILocalVariable(name: "datafrag_len", scope: !14522, file: !3, line: 2782, type: !240)
!14554 = !DILocation(line: 2782, column: 6, scope: !14522)
!14555 = !DILocalVariable(name: "eccfrag_len", scope: !14522, file: !3, line: 2782, type: !240)
!14556 = !DILocation(line: 2782, column: 20, scope: !14522)
!14557 = !DILocalVariable(name: "aligned_len", scope: !14522, file: !3, line: 2782, type: !240)
!14558 = !DILocation(line: 2782, column: 33, scope: !14522)
!14559 = !DILocalVariable(name: "aligned_pos", scope: !14522, file: !3, line: 2782, type: !240)
!14560 = !DILocation(line: 2782, column: 46, scope: !14522)
!14561 = !DILocalVariable(name: "busw", scope: !14522, file: !3, line: 2783, type: !240)
!14562 = !DILocation(line: 2783, column: 6, scope: !14522)
!14563 = !DILocation(line: 2783, column: 14, scope: !14522)
!14564 = !DILocation(line: 2783, column: 20, scope: !14522)
!14565 = !DILocation(line: 2783, column: 28, scope: !14522)
!14566 = !DILocation(line: 2783, column: 13, scope: !14522)
!14567 = !DILocalVariable(name: "index", scope: !14522, file: !3, line: 2784, type: !240)
!14568 = !DILocation(line: 2784, column: 6, scope: !14522)
!14569 = !DILocalVariable(name: "section", scope: !14522, file: !3, line: 2784, type: !240)
!14570 = !DILocation(line: 2784, column: 13, scope: !14522)
!14571 = !DILocalVariable(name: "max_bitflips", scope: !14522, file: !3, line: 2785, type: !7)
!14572 = !DILocation(line: 2785, column: 15, scope: !14522)
!14573 = !DILocalVariable(name: "oobregion", scope: !14522, file: !3, line: 2786, type: !2668)
!14574 = !DILocation(line: 2786, column: 24, scope: !14522)
!14575 = !DILocation(line: 2789, column: 15, scope: !14522)
!14576 = !DILocation(line: 2789, column: 27, scope: !14522)
!14577 = !DILocation(line: 2789, column: 33, scope: !14522)
!14578 = !DILocation(line: 2789, column: 37, scope: !14522)
!14579 = !DILocation(line: 2789, column: 25, scope: !14522)
!14580 = !DILocation(line: 2789, column: 13, scope: !14522)
!14581 = !DILocation(line: 2790, column: 14, scope: !14522)
!14582 = !DILocation(line: 2790, column: 26, scope: !14522)
!14583 = !DILocation(line: 2790, column: 24, scope: !14522)
!14584 = !DILocation(line: 2790, column: 34, scope: !14522)
!14585 = !DILocation(line: 2790, column: 41, scope: !14522)
!14586 = !DILocation(line: 2790, column: 47, scope: !14522)
!14587 = !DILocation(line: 2790, column: 51, scope: !14522)
!14588 = !DILocation(line: 2790, column: 39, scope: !14522)
!14589 = !DILocation(line: 2790, column: 11, scope: !14522)
!14590 = !DILocation(line: 2791, column: 14, scope: !14522)
!14591 = !DILocation(line: 2791, column: 25, scope: !14522)
!14592 = !DILocation(line: 2791, column: 23, scope: !14522)
!14593 = !DILocation(line: 2791, column: 36, scope: !14522)
!14594 = !DILocation(line: 2791, column: 12, scope: !14522)
!14595 = !DILocation(line: 2792, column: 10, scope: !14522)
!14596 = !DILocation(line: 2792, column: 23, scope: !14522)
!14597 = !DILocation(line: 2792, column: 29, scope: !14522)
!14598 = !DILocation(line: 2792, column: 33, scope: !14522)
!14599 = !DILocation(line: 2792, column: 21, scope: !14522)
!14600 = !DILocation(line: 2792, column: 8, scope: !14522)
!14601 = !DILocation(line: 2795, column: 17, scope: !14522)
!14602 = !DILocation(line: 2795, column: 29, scope: !14522)
!14603 = !DILocation(line: 2795, column: 35, scope: !14522)
!14604 = !DILocation(line: 2795, column: 39, scope: !14522)
!14605 = !DILocation(line: 2795, column: 27, scope: !14522)
!14606 = !DILocation(line: 2795, column: 15, scope: !14522)
!14607 = !DILocation(line: 2796, column: 16, scope: !14522)
!14608 = !DILocation(line: 2796, column: 28, scope: !14522)
!14609 = !DILocation(line: 2796, column: 34, scope: !14522)
!14610 = !DILocation(line: 2796, column: 38, scope: !14522)
!14611 = !DILocation(line: 2796, column: 26, scope: !14522)
!14612 = !DILocation(line: 2796, column: 14, scope: !14522)
!14613 = !DILocation(line: 2798, column: 18, scope: !14522)
!14614 = !DILocation(line: 2798, column: 31, scope: !14522)
!14615 = !DILocation(line: 2798, column: 37, scope: !14522)
!14616 = !DILocation(line: 2798, column: 41, scope: !14522)
!14617 = !DILocation(line: 2798, column: 29, scope: !14522)
!14618 = !DILocation(line: 2798, column: 16, scope: !14522)
!14619 = !DILocation(line: 2800, column: 6, scope: !14522)
!14620 = !DILocation(line: 2800, column: 15, scope: !14522)
!14621 = !DILocation(line: 2800, column: 13, scope: !14522)
!14622 = !DILocation(line: 2800, column: 4, scope: !14522)
!14623 = !DILocation(line: 2801, column: 26, scope: !14522)
!14624 = !DILocation(line: 2801, column: 32, scope: !14522)
!14625 = !DILocation(line: 2801, column: 38, scope: !14522)
!14626 = !DILocation(line: 2801, column: 53, scope: !14522)
!14627 = !DILocation(line: 2801, column: 56, scope: !14522)
!14628 = !DILocation(line: 2801, column: 8, scope: !14522)
!14629 = !DILocation(line: 2801, column: 6, scope: !14522)
!14630 = !DILocation(line: 2802, column: 6, scope: !14631)
!14631 = distinct !DILexicalBlock(scope: !14522, file: !3, line: 2802, column: 6)
!14632 = !DILocation(line: 2802, column: 6, scope: !14522)
!14633 = !DILocation(line: 2803, column: 10, scope: !14631)
!14634 = !DILocation(line: 2803, column: 3, scope: !14631)
!14635 = !DILocation(line: 2806, column: 9, scope: !14636)
!14636 = distinct !DILexicalBlock(scope: !14522, file: !3, line: 2806, column: 2)
!14637 = !DILocation(line: 2806, column: 7, scope: !14636)
!14638 = !DILocation(line: 2806, column: 14, scope: !14639)
!14639 = distinct !DILexicalBlock(scope: !14636, file: !3, line: 2806, column: 2)
!14640 = !DILocation(line: 2806, column: 18, scope: !14639)
!14641 = !DILocation(line: 2806, column: 16, scope: !14639)
!14642 = !DILocation(line: 2806, column: 2, scope: !14636)
!14643 = !DILocation(line: 2807, column: 3, scope: !14639)
!14644 = !DILocation(line: 2807, column: 9, scope: !14639)
!14645 = !DILocation(line: 2807, column: 13, scope: !14639)
!14646 = !DILocation(line: 2807, column: 23, scope: !14639)
!14647 = !DILocation(line: 2807, column: 29, scope: !14639)
!14648 = !DILocation(line: 2807, column: 33, scope: !14639)
!14649 = !DILocation(line: 2807, column: 39, scope: !14639)
!14650 = !DILocation(line: 2807, column: 43, scope: !14639)
!14651 = !DILocation(line: 2807, column: 52, scope: !14639)
!14652 = !DILocation(line: 2806, column: 37, scope: !14639)
!14653 = !DILocation(line: 2806, column: 43, scope: !14639)
!14654 = !DILocation(line: 2806, column: 47, scope: !14639)
!14655 = !DILocation(line: 2806, column: 34, scope: !14639)
!14656 = !DILocation(line: 2806, column: 59, scope: !14639)
!14657 = !DILocation(line: 2806, column: 65, scope: !14639)
!14658 = !DILocation(line: 2806, column: 69, scope: !14639)
!14659 = !DILocation(line: 2806, column: 56, scope: !14639)
!14660 = !DILocation(line: 2806, column: 2, scope: !14639)
!14661 = distinct !{!14661, !14642, !14662}
!14662 = !DILocation(line: 2807, column: 54, scope: !14636)
!14663 = !DILocation(line: 2813, column: 37, scope: !14522)
!14664 = !DILocation(line: 2813, column: 42, scope: !14522)
!14665 = !DILocation(line: 2813, column: 8, scope: !14522)
!14666 = !DILocation(line: 2813, column: 6, scope: !14522)
!14667 = !DILocation(line: 2814, column: 6, scope: !14668)
!14668 = distinct !DILexicalBlock(scope: !14522, file: !3, line: 2814, column: 6)
!14669 = !DILocation(line: 2814, column: 6, scope: !14522)
!14670 = !DILocation(line: 2815, column: 10, scope: !14668)
!14671 = !DILocation(line: 2815, column: 3, scope: !14668)
!14672 = !DILocation(line: 2817, column: 16, scope: !14673)
!14673 = distinct !DILexicalBlock(scope: !14522, file: !3, line: 2817, column: 6)
!14674 = !DILocation(line: 2817, column: 25, scope: !14673)
!14675 = !DILocation(line: 2817, column: 23, scope: !14673)
!14676 = !DILocation(line: 2817, column: 6, scope: !14522)
!14677 = !DILocation(line: 2818, column: 8, scope: !14673)
!14678 = !DILocation(line: 2818, column: 3, scope: !14673)
!14679 = !DILocation(line: 2820, column: 6, scope: !14680)
!14680 = distinct !DILexicalBlock(scope: !14522, file: !3, line: 2820, column: 6)
!14681 = !DILocation(line: 2820, column: 6, scope: !14522)
!14682 = !DILocation(line: 2821, column: 36, scope: !14683)
!14683 = distinct !DILexicalBlock(scope: !14680, file: !3, line: 2820, column: 12)
!14684 = !DILocation(line: 2821, column: 42, scope: !14683)
!14685 = !DILocation(line: 2821, column: 47, scope: !14683)
!14686 = !DILocation(line: 2822, column: 8, scope: !14683)
!14687 = !DILocation(line: 2822, column: 14, scope: !14683)
!14688 = !DILocation(line: 2822, column: 23, scope: !14683)
!14689 = !DILocation(line: 2822, column: 28, scope: !14683)
!14690 = !DILocation(line: 2821, column: 9, scope: !14683)
!14691 = !DILocation(line: 2821, column: 7, scope: !14683)
!14692 = !DILocation(line: 2824, column: 7, scope: !14693)
!14693 = distinct !DILexicalBlock(scope: !14683, file: !3, line: 2824, column: 7)
!14694 = !DILocation(line: 2824, column: 7, scope: !14683)
!14695 = !DILocation(line: 2825, column: 11, scope: !14693)
!14696 = !DILocation(line: 2825, column: 4, scope: !14693)
!14697 = !DILocation(line: 2826, column: 2, scope: !14683)
!14698 = !DILocation(line: 2831, column: 27, scope: !14699)
!14699 = distinct !DILexicalBlock(scope: !14680, file: !3, line: 2826, column: 9)
!14700 = !DILocation(line: 2831, column: 38, scope: !14699)
!14701 = !DILocation(line: 2831, column: 43, scope: !14699)
!14702 = !DILocation(line: 2831, column: 36, scope: !14699)
!14703 = !DILocation(line: 2831, column: 34, scope: !14699)
!14704 = !DILocation(line: 2831, column: 15, scope: !14699)
!14705 = !DILocation(line: 2832, column: 17, scope: !14699)
!14706 = !DILocation(line: 2832, column: 15, scope: !14699)
!14707 = !DILocation(line: 2833, column: 17, scope: !14708)
!14708 = distinct !DILexicalBlock(scope: !14699, file: !3, line: 2833, column: 7)
!14709 = !DILocation(line: 2833, column: 27, scope: !14708)
!14710 = !DILocation(line: 2833, column: 32, scope: !14708)
!14711 = !DILocation(line: 2833, column: 24, scope: !14708)
!14712 = !DILocation(line: 2833, column: 7, scope: !14699)
!14713 = !DILocation(line: 2834, column: 15, scope: !14708)
!14714 = !DILocation(line: 2834, column: 4, scope: !14708)
!14715 = !DILocation(line: 2835, column: 18, scope: !14716)
!14716 = distinct !DILexicalBlock(scope: !14699, file: !3, line: 2835, column: 7)
!14717 = !DILocation(line: 2835, column: 28, scope: !14716)
!14718 = !DILocation(line: 2835, column: 40, scope: !14716)
!14719 = !DILocation(line: 2835, column: 46, scope: !14716)
!14720 = !DILocation(line: 2835, column: 50, scope: !14716)
!14721 = !DILocation(line: 2835, column: 38, scope: !14716)
!14722 = !DILocation(line: 2835, column: 25, scope: !14716)
!14723 = !DILocation(line: 2836, column: 8, scope: !14716)
!14724 = !DILocation(line: 2836, column: 13, scope: !14716)
!14725 = !DILocation(line: 2835, column: 58, scope: !14716)
!14726 = !DILocation(line: 2835, column: 7, scope: !14699)
!14727 = !DILocation(line: 2837, column: 15, scope: !14716)
!14728 = !DILocation(line: 2837, column: 4, scope: !14716)
!14729 = !DILocation(line: 2839, column: 36, scope: !14699)
!14730 = !DILocation(line: 2840, column: 8, scope: !14699)
!14731 = !DILocation(line: 2840, column: 13, scope: !14699)
!14732 = !DILocation(line: 2840, column: 25, scope: !14699)
!14733 = !DILocation(line: 2840, column: 23, scope: !14699)
!14734 = !DILocation(line: 2841, column: 9, scope: !14699)
!14735 = !DILocation(line: 2841, column: 15, scope: !14699)
!14736 = !DILocation(line: 2841, column: 23, scope: !14699)
!14737 = !DILocation(line: 2842, column: 8, scope: !14699)
!14738 = !DILocation(line: 2839, column: 9, scope: !14699)
!14739 = !DILocation(line: 2839, column: 7, scope: !14699)
!14740 = !DILocation(line: 2843, column: 7, scope: !14741)
!14741 = distinct !DILexicalBlock(scope: !14699, file: !3, line: 2843, column: 7)
!14742 = !DILocation(line: 2843, column: 7, scope: !14699)
!14743 = !DILocation(line: 2844, column: 11, scope: !14741)
!14744 = !DILocation(line: 2844, column: 4, scope: !14741)
!14745 = !DILocation(line: 2847, column: 35, scope: !14522)
!14746 = !DILocation(line: 2847, column: 40, scope: !14522)
!14747 = !DILocation(line: 2847, column: 46, scope: !14522)
!14748 = !DILocation(line: 2847, column: 50, scope: !14522)
!14749 = !DILocation(line: 2848, column: 7, scope: !14522)
!14750 = !DILocation(line: 2848, column: 13, scope: !14522)
!14751 = !DILocation(line: 2848, column: 22, scope: !14522)
!14752 = !DILocation(line: 2848, column: 29, scope: !14522)
!14753 = !DILocation(line: 2847, column: 8, scope: !14522)
!14754 = !DILocation(line: 2847, column: 6, scope: !14522)
!14755 = !DILocation(line: 2849, column: 6, scope: !14756)
!14756 = distinct !DILexicalBlock(scope: !14522, file: !3, line: 2849, column: 6)
!14757 = !DILocation(line: 2849, column: 6, scope: !14522)
!14758 = !DILocation(line: 2850, column: 10, scope: !14756)
!14759 = !DILocation(line: 2850, column: 3, scope: !14756)
!14760 = !DILocation(line: 2852, column: 6, scope: !14522)
!14761 = !DILocation(line: 2852, column: 15, scope: !14522)
!14762 = !DILocation(line: 2852, column: 13, scope: !14522)
!14763 = !DILocation(line: 2852, column: 4, scope: !14522)
!14764 = !DILocation(line: 2853, column: 9, scope: !14765)
!14765 = distinct !DILexicalBlock(scope: !14522, file: !3, line: 2853, column: 2)
!14766 = !DILocation(line: 2853, column: 7, scope: !14765)
!14767 = !DILocation(line: 2853, column: 14, scope: !14768)
!14768 = distinct !DILexicalBlock(scope: !14765, file: !3, line: 2853, column: 2)
!14769 = !DILocation(line: 2853, column: 18, scope: !14768)
!14770 = !DILocation(line: 2853, column: 16, scope: !14768)
!14771 = !DILocation(line: 2853, column: 2, scope: !14765)
!14772 = !DILocalVariable(name: "stat", scope: !14773, file: !3, line: 2854, type: !240)
!14773 = distinct !DILexicalBlock(scope: !14768, file: !3, line: 2853, column: 75)
!14774 = !DILocation(line: 2854, column: 7, scope: !14773)
!14775 = !DILocation(line: 2856, column: 10, scope: !14773)
!14776 = !DILocation(line: 2856, column: 16, scope: !14773)
!14777 = !DILocation(line: 2856, column: 20, scope: !14773)
!14778 = !DILocation(line: 2856, column: 28, scope: !14773)
!14779 = !DILocation(line: 2856, column: 34, scope: !14773)
!14780 = !DILocation(line: 2856, column: 38, scope: !14773)
!14781 = !DILocation(line: 2856, column: 44, scope: !14773)
!14782 = !DILocation(line: 2856, column: 48, scope: !14773)
!14783 = !DILocation(line: 2856, column: 57, scope: !14773)
!14784 = !DILocation(line: 2857, column: 8, scope: !14773)
!14785 = !DILocation(line: 2857, column: 14, scope: !14773)
!14786 = !DILocation(line: 2857, column: 18, scope: !14773)
!14787 = !DILocation(line: 2857, column: 27, scope: !14773)
!14788 = !DILocation(line: 2856, column: 8, scope: !14773)
!14789 = !DILocation(line: 2858, column: 7, scope: !14790)
!14790 = distinct !DILexicalBlock(scope: !14773, file: !3, line: 2858, column: 7)
!14791 = !DILocation(line: 2858, column: 12, scope: !14790)
!14792 = !DILocation(line: 2858, column: 24, scope: !14790)
!14793 = !DILocation(line: 2859, column: 8, scope: !14790)
!14794 = !DILocation(line: 2859, column: 14, scope: !14790)
!14795 = !DILocation(line: 2859, column: 18, scope: !14790)
!14796 = !DILocation(line: 2859, column: 26, scope: !14790)
!14797 = !DILocation(line: 2858, column: 7, scope: !14773)
!14798 = !DILocation(line: 2861, column: 39, scope: !14799)
!14799 = distinct !DILexicalBlock(scope: !14790, file: !3, line: 2859, column: 60)
!14800 = !DILocation(line: 2861, column: 42, scope: !14799)
!14801 = !DILocation(line: 2861, column: 48, scope: !14799)
!14802 = !DILocation(line: 2861, column: 52, scope: !14799)
!14803 = !DILocation(line: 2862, column: 8, scope: !14799)
!14804 = !DILocation(line: 2862, column: 14, scope: !14799)
!14805 = !DILocation(line: 2862, column: 18, scope: !14799)
!14806 = !DILocation(line: 2862, column: 27, scope: !14799)
!14807 = !DILocation(line: 2863, column: 7, scope: !14799)
!14808 = !DILocation(line: 2863, column: 13, scope: !14799)
!14809 = !DILocation(line: 2863, column: 17, scope: !14799)
!14810 = !DILocation(line: 2865, column: 7, scope: !14799)
!14811 = !DILocation(line: 2865, column: 13, scope: !14799)
!14812 = !DILocation(line: 2865, column: 17, scope: !14799)
!14813 = !DILocation(line: 2861, column: 11, scope: !14799)
!14814 = !DILocation(line: 2861, column: 9, scope: !14799)
!14815 = !DILocation(line: 2866, column: 3, scope: !14799)
!14816 = !DILocation(line: 2868, column: 7, scope: !14817)
!14817 = distinct !DILexicalBlock(scope: !14773, file: !3, line: 2868, column: 7)
!14818 = !DILocation(line: 2868, column: 12, scope: !14817)
!14819 = !DILocation(line: 2868, column: 7, scope: !14773)
!14820 = !DILocation(line: 2869, column: 4, scope: !14821)
!14821 = distinct !DILexicalBlock(scope: !14817, file: !3, line: 2868, column: 17)
!14822 = !DILocation(line: 2869, column: 9, scope: !14821)
!14823 = !DILocation(line: 2869, column: 19, scope: !14821)
!14824 = !DILocation(line: 2869, column: 25, scope: !14821)
!14825 = !DILocation(line: 2870, column: 3, scope: !14821)
!14826 = !DILocation(line: 2871, column: 32, scope: !14827)
!14827 = distinct !DILexicalBlock(scope: !14817, file: !3, line: 2870, column: 10)
!14828 = !DILocation(line: 2871, column: 4, scope: !14827)
!14829 = !DILocation(line: 2871, column: 9, scope: !14827)
!14830 = !DILocation(line: 2871, column: 19, scope: !14827)
!14831 = !DILocation(line: 2871, column: 29, scope: !14827)
!14832 = !DILocalVariable(name: "__UNIQUE_ID___x256", scope: !14833, file: !3, line: 2872, type: !7)
!14833 = distinct !DILexicalBlock(scope: !14827, file: !3, line: 2872, column: 19)
!14834 = !DILocation(line: 2872, column: 19, scope: !14833)
!14835 = !DILocalVariable(name: "__UNIQUE_ID___y257", scope: !14833, file: !3, line: 2872, type: !7)
!14836 = !DILocation(line: 2872, column: 17, scope: !14827)
!14837 = !DILocation(line: 2874, column: 2, scope: !14773)
!14838 = !DILocation(line: 2853, column: 37, scope: !14768)
!14839 = !DILocation(line: 2853, column: 43, scope: !14768)
!14840 = !DILocation(line: 2853, column: 47, scope: !14768)
!14841 = !DILocation(line: 2853, column: 34, scope: !14768)
!14842 = !DILocation(line: 2853, column: 59, scope: !14768)
!14843 = !DILocation(line: 2853, column: 65, scope: !14768)
!14844 = !DILocation(line: 2853, column: 69, scope: !14768)
!14845 = !DILocation(line: 2853, column: 56, scope: !14768)
!14846 = !DILocation(line: 2853, column: 2, scope: !14768)
!14847 = distinct !{!14847, !14771, !14848}
!14848 = !DILocation(line: 2874, column: 2, scope: !14765)
!14849 = !DILocation(line: 2875, column: 9, scope: !14522)
!14850 = !DILocation(line: 2875, column: 2, scope: !14522)
!14851 = !DILocation(line: 2876, column: 1, scope: !14522)
!14852 = distinct !DISubprogram(name: "nand_write_subpage_hwecc", scope: !3, file: !3, line: 3777, type: !4563, scopeLine: 3780, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!14853 = !DILocalVariable(name: "chip", arg: 1, scope: !14852, file: !3, line: 3777, type: !4166)
!14854 = !DILocation(line: 3777, column: 55, scope: !14852)
!14855 = !DILocalVariable(name: "offset", arg: 2, scope: !14852, file: !3, line: 3777, type: !536)
!14856 = !DILocation(line: 3777, column: 70, scope: !14852)
!14857 = !DILocalVariable(name: "data_len", arg: 3, scope: !14852, file: !3, line: 3778, type: !536)
!14858 = !DILocation(line: 3778, column: 18, scope: !14852)
!14859 = !DILocalVariable(name: "buf", arg: 4, scope: !14852, file: !3, line: 3778, type: !4542)
!14860 = !DILocation(line: 3778, column: 43, scope: !14852)
!14861 = !DILocalVariable(name: "oob_required", arg: 5, scope: !14852, file: !3, line: 3779, type: !240)
!14862 = !DILocation(line: 3779, column: 13, scope: !14852)
!14863 = !DILocalVariable(name: "page", arg: 6, scope: !14852, file: !3, line: 3779, type: !240)
!14864 = !DILocation(line: 3779, column: 31, scope: !14852)
!14865 = !DILocalVariable(name: "mtd", scope: !14852, file: !3, line: 3781, type: !2637)
!14866 = !DILocation(line: 3781, column: 19, scope: !14852)
!14867 = !DILocation(line: 3781, column: 37, scope: !14852)
!14868 = !DILocation(line: 3781, column: 25, scope: !14852)
!14869 = !DILocalVariable(name: "oob_buf", scope: !14852, file: !3, line: 3782, type: !2753)
!14870 = !DILocation(line: 3782, column: 11, scope: !14852)
!14871 = !DILocation(line: 3782, column: 22, scope: !14852)
!14872 = !DILocation(line: 3782, column: 28, scope: !14852)
!14873 = !DILocalVariable(name: "ecc_calc", scope: !14852, file: !3, line: 3783, type: !2753)
!14874 = !DILocation(line: 3783, column: 11, scope: !14852)
!14875 = !DILocation(line: 3783, column: 22, scope: !14852)
!14876 = !DILocation(line: 3783, column: 28, scope: !14852)
!14877 = !DILocation(line: 3783, column: 32, scope: !14852)
!14878 = !DILocalVariable(name: "ecc_size", scope: !14852, file: !3, line: 3784, type: !240)
!14879 = !DILocation(line: 3784, column: 6, scope: !14852)
!14880 = !DILocation(line: 3784, column: 22, scope: !14852)
!14881 = !DILocation(line: 3784, column: 28, scope: !14852)
!14882 = !DILocation(line: 3784, column: 32, scope: !14852)
!14883 = !DILocalVariable(name: "ecc_bytes", scope: !14852, file: !3, line: 3785, type: !240)
!14884 = !DILocation(line: 3785, column: 6, scope: !14852)
!14885 = !DILocation(line: 3785, column: 22, scope: !14852)
!14886 = !DILocation(line: 3785, column: 28, scope: !14852)
!14887 = !DILocation(line: 3785, column: 32, scope: !14852)
!14888 = !DILocalVariable(name: "ecc_steps", scope: !14852, file: !3, line: 3786, type: !240)
!14889 = !DILocation(line: 3786, column: 6, scope: !14852)
!14890 = !DILocation(line: 3786, column: 22, scope: !14852)
!14891 = !DILocation(line: 3786, column: 28, scope: !14852)
!14892 = !DILocation(line: 3786, column: 32, scope: !14852)
!14893 = !DILocalVariable(name: "start_step", scope: !14852, file: !3, line: 3787, type: !536)
!14894 = !DILocation(line: 3787, column: 11, scope: !14852)
!14895 = !DILocation(line: 3787, column: 24, scope: !14852)
!14896 = !DILocation(line: 3787, column: 33, scope: !14852)
!14897 = !DILocation(line: 3787, column: 31, scope: !14852)
!14898 = !DILocalVariable(name: "end_step", scope: !14852, file: !3, line: 3788, type: !536)
!14899 = !DILocation(line: 3788, column: 11, scope: !14852)
!14900 = !DILocation(line: 3788, column: 25, scope: !14852)
!14901 = !DILocation(line: 3788, column: 34, scope: !14852)
!14902 = !DILocation(line: 3788, column: 32, scope: !14852)
!14903 = !DILocation(line: 3788, column: 43, scope: !14852)
!14904 = !DILocation(line: 3788, column: 50, scope: !14852)
!14905 = !DILocation(line: 3788, column: 48, scope: !14852)
!14906 = !DILocalVariable(name: "oob_bytes", scope: !14852, file: !3, line: 3789, type: !240)
!14907 = !DILocation(line: 3789, column: 6, scope: !14852)
!14908 = !DILocation(line: 3789, column: 24, scope: !14852)
!14909 = !DILocation(line: 3789, column: 29, scope: !14852)
!14910 = !DILocation(line: 3789, column: 39, scope: !14852)
!14911 = !DILocation(line: 3789, column: 37, scope: !14852)
!14912 = !DILocalVariable(name: "step", scope: !14852, file: !3, line: 3790, type: !240)
!14913 = !DILocation(line: 3790, column: 6, scope: !14852)
!14914 = !DILocalVariable(name: "ret", scope: !14852, file: !3, line: 3790, type: !240)
!14915 = !DILocation(line: 3790, column: 12, scope: !14852)
!14916 = !DILocation(line: 3792, column: 32, scope: !14852)
!14917 = !DILocation(line: 3792, column: 38, scope: !14852)
!14918 = !DILocation(line: 3792, column: 8, scope: !14852)
!14919 = !DILocation(line: 3792, column: 6, scope: !14852)
!14920 = !DILocation(line: 3793, column: 6, scope: !14921)
!14921 = distinct !DILexicalBlock(scope: !14852, file: !3, line: 3793, column: 6)
!14922 = !DILocation(line: 3793, column: 6, scope: !14852)
!14923 = !DILocation(line: 3794, column: 10, scope: !14921)
!14924 = !DILocation(line: 3794, column: 3, scope: !14921)
!14925 = !DILocation(line: 3796, column: 12, scope: !14926)
!14926 = distinct !DILexicalBlock(scope: !14852, file: !3, line: 3796, column: 2)
!14927 = !DILocation(line: 3796, column: 7, scope: !14926)
!14928 = !DILocation(line: 3796, column: 17, scope: !14929)
!14929 = distinct !DILexicalBlock(scope: !14926, file: !3, line: 3796, column: 2)
!14930 = !DILocation(line: 3796, column: 24, scope: !14929)
!14931 = !DILocation(line: 3796, column: 22, scope: !14929)
!14932 = !DILocation(line: 3796, column: 2, scope: !14926)
!14933 = !DILocation(line: 3798, column: 3, scope: !14934)
!14934 = distinct !DILexicalBlock(scope: !14929, file: !3, line: 3796, column: 43)
!14935 = !DILocation(line: 3798, column: 9, scope: !14934)
!14936 = !DILocation(line: 3798, column: 13, scope: !14934)
!14937 = !DILocation(line: 3798, column: 19, scope: !14934)
!14938 = !DILocation(line: 3801, column: 28, scope: !14934)
!14939 = !DILocation(line: 3801, column: 34, scope: !14934)
!14940 = !DILocation(line: 3801, column: 39, scope: !14934)
!14941 = !DILocation(line: 3801, column: 9, scope: !14934)
!14942 = !DILocation(line: 3801, column: 7, scope: !14934)
!14943 = !DILocation(line: 3802, column: 7, scope: !14944)
!14944 = distinct !DILexicalBlock(scope: !14934, file: !3, line: 3802, column: 7)
!14945 = !DILocation(line: 3802, column: 7, scope: !14934)
!14946 = !DILocation(line: 3803, column: 11, scope: !14944)
!14947 = !DILocation(line: 3803, column: 4, scope: !14944)
!14948 = !DILocation(line: 3806, column: 8, scope: !14949)
!14949 = distinct !DILexicalBlock(scope: !14934, file: !3, line: 3806, column: 7)
!14950 = !DILocation(line: 3806, column: 15, scope: !14949)
!14951 = !DILocation(line: 3806, column: 13, scope: !14949)
!14952 = !DILocation(line: 3806, column: 27, scope: !14949)
!14953 = !DILocation(line: 3806, column: 31, scope: !14949)
!14954 = !DILocation(line: 3806, column: 38, scope: !14949)
!14955 = !DILocation(line: 3806, column: 36, scope: !14949)
!14956 = !DILocation(line: 3806, column: 7, scope: !14934)
!14957 = !DILocation(line: 3807, column: 11, scope: !14949)
!14958 = !DILocation(line: 3807, column: 27, scope: !14949)
!14959 = !DILocation(line: 3807, column: 4, scope: !14949)
!14960 = !DILocation(line: 3809, column: 4, scope: !14949)
!14961 = !DILocation(line: 3809, column: 10, scope: !14949)
!14962 = !DILocation(line: 3809, column: 14, scope: !14949)
!14963 = !DILocation(line: 3809, column: 24, scope: !14949)
!14964 = !DILocation(line: 3809, column: 30, scope: !14949)
!14965 = !DILocation(line: 3809, column: 35, scope: !14949)
!14966 = !DILocation(line: 3813, column: 8, scope: !14967)
!14967 = distinct !DILexicalBlock(scope: !14934, file: !3, line: 3813, column: 7)
!14968 = !DILocation(line: 3813, column: 21, scope: !14967)
!14969 = !DILocation(line: 3813, column: 25, scope: !14967)
!14970 = !DILocation(line: 3813, column: 32, scope: !14967)
!14971 = !DILocation(line: 3813, column: 30, scope: !14967)
!14972 = !DILocation(line: 3813, column: 44, scope: !14967)
!14973 = !DILocation(line: 3813, column: 48, scope: !14967)
!14974 = !DILocation(line: 3813, column: 55, scope: !14967)
!14975 = !DILocation(line: 3813, column: 53, scope: !14967)
!14976 = !DILocation(line: 3813, column: 7, scope: !14934)
!14977 = !DILocation(line: 3814, column: 11, scope: !14967)
!14978 = !DILocation(line: 3814, column: 26, scope: !14967)
!14979 = !DILocation(line: 3814, column: 4, scope: !14967)
!14980 = !DILocation(line: 3816, column: 10, scope: !14934)
!14981 = !DILocation(line: 3816, column: 7, scope: !14934)
!14982 = !DILocation(line: 3817, column: 15, scope: !14934)
!14983 = !DILocation(line: 3817, column: 12, scope: !14934)
!14984 = !DILocation(line: 3818, column: 15, scope: !14934)
!14985 = !DILocation(line: 3818, column: 12, scope: !14934)
!14986 = !DILocation(line: 3819, column: 2, scope: !14934)
!14987 = !DILocation(line: 3796, column: 39, scope: !14929)
!14988 = !DILocation(line: 3796, column: 2, scope: !14929)
!14989 = distinct !{!14989, !14932, !14990}
!14990 = !DILocation(line: 3819, column: 2, scope: !14926)
!14991 = !DILocation(line: 3823, column: 13, scope: !14852)
!14992 = !DILocation(line: 3823, column: 19, scope: !14852)
!14993 = !DILocation(line: 3823, column: 23, scope: !14852)
!14994 = !DILocation(line: 3823, column: 11, scope: !14852)
!14995 = !DILocation(line: 3824, column: 35, scope: !14852)
!14996 = !DILocation(line: 3824, column: 40, scope: !14852)
!14997 = !DILocation(line: 3824, column: 50, scope: !14852)
!14998 = !DILocation(line: 3824, column: 56, scope: !14852)
!14999 = !DILocation(line: 3825, column: 7, scope: !14852)
!15000 = !DILocation(line: 3825, column: 13, scope: !14852)
!15001 = !DILocation(line: 3825, column: 17, scope: !14852)
!15002 = !DILocation(line: 3824, column: 8, scope: !14852)
!15003 = !DILocation(line: 3824, column: 6, scope: !14852)
!15004 = !DILocation(line: 3826, column: 6, scope: !15005)
!15005 = distinct !DILexicalBlock(scope: !14852, file: !3, line: 3826, column: 6)
!15006 = !DILocation(line: 3826, column: 6, scope: !14852)
!15007 = !DILocation(line: 3827, column: 10, scope: !15005)
!15008 = !DILocation(line: 3827, column: 3, scope: !15005)
!15009 = !DILocation(line: 3830, column: 27, scope: !14852)
!15010 = !DILocation(line: 3830, column: 33, scope: !14852)
!15011 = !DILocation(line: 3830, column: 39, scope: !14852)
!15012 = !DILocation(line: 3830, column: 48, scope: !14852)
!15013 = !DILocation(line: 3830, column: 53, scope: !14852)
!15014 = !DILocation(line: 3830, column: 8, scope: !14852)
!15015 = !DILocation(line: 3830, column: 6, scope: !14852)
!15016 = !DILocation(line: 3831, column: 6, scope: !15017)
!15017 = distinct !DILexicalBlock(scope: !14852, file: !3, line: 3831, column: 6)
!15018 = !DILocation(line: 3831, column: 6, scope: !14852)
!15019 = !DILocation(line: 3832, column: 10, scope: !15017)
!15020 = !DILocation(line: 3832, column: 3, scope: !15017)
!15021 = !DILocation(line: 3834, column: 31, scope: !14852)
!15022 = !DILocation(line: 3834, column: 9, scope: !14852)
!15023 = !DILocation(line: 3834, column: 2, scope: !14852)
!15024 = !DILocation(line: 3835, column: 1, scope: !14852)
!15025 = distinct !DISubprogram(name: "nand_read_page_syndrome", scope: !3, file: !3, line: 2959, type: !4550, scopeLine: 2961, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!15026 = !DILocalVariable(name: "chip", arg: 1, scope: !15025, file: !3, line: 2959, type: !4166)
!15027 = !DILocation(line: 2959, column: 54, scope: !15025)
!15028 = !DILocalVariable(name: "buf", arg: 2, scope: !15025, file: !3, line: 2959, type: !2753)
!15029 = !DILocation(line: 2959, column: 69, scope: !15025)
!15030 = !DILocalVariable(name: "oob_required", arg: 3, scope: !15025, file: !3, line: 2960, type: !240)
!15031 = !DILocation(line: 2960, column: 12, scope: !15025)
!15032 = !DILocalVariable(name: "page", arg: 4, scope: !15025, file: !3, line: 2960, type: !240)
!15033 = !DILocation(line: 2960, column: 30, scope: !15025)
!15034 = !DILocalVariable(name: "mtd", scope: !15025, file: !3, line: 2962, type: !2637)
!15035 = !DILocation(line: 2962, column: 19, scope: !15025)
!15036 = !DILocation(line: 2962, column: 37, scope: !15025)
!15037 = !DILocation(line: 2962, column: 25, scope: !15025)
!15038 = !DILocalVariable(name: "ret", scope: !15025, file: !3, line: 2963, type: !240)
!15039 = !DILocation(line: 2963, column: 6, scope: !15025)
!15040 = !DILocalVariable(name: "i", scope: !15025, file: !3, line: 2963, type: !240)
!15041 = !DILocation(line: 2963, column: 11, scope: !15025)
!15042 = !DILocalVariable(name: "eccsize", scope: !15025, file: !3, line: 2963, type: !240)
!15043 = !DILocation(line: 2963, column: 14, scope: !15025)
!15044 = !DILocation(line: 2963, column: 24, scope: !15025)
!15045 = !DILocation(line: 2963, column: 30, scope: !15025)
!15046 = !DILocation(line: 2963, column: 34, scope: !15025)
!15047 = !DILocalVariable(name: "eccbytes", scope: !15025, file: !3, line: 2964, type: !240)
!15048 = !DILocation(line: 2964, column: 6, scope: !15025)
!15049 = !DILocation(line: 2964, column: 17, scope: !15025)
!15050 = !DILocation(line: 2964, column: 23, scope: !15025)
!15051 = !DILocation(line: 2964, column: 27, scope: !15025)
!15052 = !DILocalVariable(name: "eccsteps", scope: !15025, file: !3, line: 2965, type: !240)
!15053 = !DILocation(line: 2965, column: 6, scope: !15025)
!15054 = !DILocation(line: 2965, column: 17, scope: !15025)
!15055 = !DILocation(line: 2965, column: 23, scope: !15025)
!15056 = !DILocation(line: 2965, column: 27, scope: !15025)
!15057 = !DILocalVariable(name: "eccpadbytes", scope: !15025, file: !3, line: 2966, type: !240)
!15058 = !DILocation(line: 2966, column: 6, scope: !15025)
!15059 = !DILocation(line: 2966, column: 20, scope: !15025)
!15060 = !DILocation(line: 2966, column: 31, scope: !15025)
!15061 = !DILocation(line: 2966, column: 37, scope: !15025)
!15062 = !DILocation(line: 2966, column: 41, scope: !15025)
!15063 = !DILocation(line: 2966, column: 29, scope: !15025)
!15064 = !DILocation(line: 2966, column: 50, scope: !15025)
!15065 = !DILocation(line: 2966, column: 56, scope: !15025)
!15066 = !DILocation(line: 2966, column: 60, scope: !15025)
!15067 = !DILocation(line: 2966, column: 48, scope: !15025)
!15068 = !DILocalVariable(name: "p", scope: !15025, file: !3, line: 2967, type: !2753)
!15069 = !DILocation(line: 2967, column: 11, scope: !15025)
!15070 = !DILocation(line: 2967, column: 15, scope: !15025)
!15071 = !DILocalVariable(name: "oob", scope: !15025, file: !3, line: 2968, type: !2753)
!15072 = !DILocation(line: 2968, column: 11, scope: !15025)
!15073 = !DILocation(line: 2968, column: 17, scope: !15025)
!15074 = !DILocation(line: 2968, column: 23, scope: !15025)
!15075 = !DILocalVariable(name: "max_bitflips", scope: !15025, file: !3, line: 2969, type: !7)
!15076 = !DILocation(line: 2969, column: 15, scope: !15025)
!15077 = !DILocation(line: 2971, column: 26, scope: !15025)
!15078 = !DILocation(line: 2971, column: 32, scope: !15025)
!15079 = !DILocation(line: 2971, column: 8, scope: !15025)
!15080 = !DILocation(line: 2971, column: 6, scope: !15025)
!15081 = !DILocation(line: 2972, column: 6, scope: !15082)
!15082 = distinct !DILexicalBlock(scope: !15025, file: !3, line: 2972, column: 6)
!15083 = !DILocation(line: 2972, column: 6, scope: !15025)
!15084 = !DILocation(line: 2973, column: 10, scope: !15082)
!15085 = !DILocation(line: 2973, column: 3, scope: !15082)
!15086 = !DILocation(line: 2975, column: 9, scope: !15087)
!15087 = distinct !DILexicalBlock(scope: !15025, file: !3, line: 2975, column: 2)
!15088 = !DILocation(line: 2975, column: 7, scope: !15087)
!15089 = !DILocation(line: 2975, column: 14, scope: !15090)
!15090 = distinct !DILexicalBlock(scope: !15087, file: !3, line: 2975, column: 2)
!15091 = !DILocation(line: 2975, column: 2, scope: !15087)
!15092 = !DILocalVariable(name: "stat", scope: !15093, file: !3, line: 2976, type: !240)
!15093 = distinct !DILexicalBlock(scope: !15090, file: !3, line: 2975, column: 65)
!15094 = !DILocation(line: 2976, column: 7, scope: !15093)
!15095 = !DILocation(line: 2978, column: 3, scope: !15093)
!15096 = !DILocation(line: 2978, column: 9, scope: !15093)
!15097 = !DILocation(line: 2978, column: 13, scope: !15093)
!15098 = !DILocation(line: 2978, column: 19, scope: !15093)
!15099 = !DILocation(line: 2980, column: 27, scope: !15093)
!15100 = !DILocation(line: 2980, column: 33, scope: !15093)
!15101 = !DILocation(line: 2980, column: 36, scope: !15093)
!15102 = !DILocation(line: 2980, column: 9, scope: !15093)
!15103 = !DILocation(line: 2980, column: 7, scope: !15093)
!15104 = !DILocation(line: 2981, column: 7, scope: !15105)
!15105 = distinct !DILexicalBlock(scope: !15093, file: !3, line: 2981, column: 7)
!15106 = !DILocation(line: 2981, column: 7, scope: !15093)
!15107 = !DILocation(line: 2982, column: 11, scope: !15105)
!15108 = !DILocation(line: 2982, column: 4, scope: !15105)
!15109 = !DILocation(line: 2984, column: 7, scope: !15110)
!15110 = distinct !DILexicalBlock(scope: !15093, file: !3, line: 2984, column: 7)
!15111 = !DILocation(line: 2984, column: 13, scope: !15110)
!15112 = !DILocation(line: 2984, column: 17, scope: !15110)
!15113 = !DILocation(line: 2984, column: 7, scope: !15093)
!15114 = !DILocation(line: 2985, column: 28, scope: !15115)
!15115 = distinct !DILexicalBlock(scope: !15110, file: !3, line: 2984, column: 25)
!15116 = !DILocation(line: 2985, column: 34, scope: !15115)
!15117 = !DILocation(line: 2985, column: 39, scope: !15115)
!15118 = !DILocation(line: 2985, column: 45, scope: !15115)
!15119 = !DILocation(line: 2985, column: 49, scope: !15115)
!15120 = !DILocation(line: 2985, column: 10, scope: !15115)
!15121 = !DILocation(line: 2985, column: 8, scope: !15115)
!15122 = !DILocation(line: 2987, column: 8, scope: !15123)
!15123 = distinct !DILexicalBlock(scope: !15115, file: !3, line: 2987, column: 8)
!15124 = !DILocation(line: 2987, column: 8, scope: !15115)
!15125 = !DILocation(line: 2988, column: 12, scope: !15123)
!15126 = !DILocation(line: 2988, column: 5, scope: !15123)
!15127 = !DILocation(line: 2990, column: 11, scope: !15115)
!15128 = !DILocation(line: 2990, column: 17, scope: !15115)
!15129 = !DILocation(line: 2990, column: 21, scope: !15115)
!15130 = !DILocation(line: 2990, column: 8, scope: !15115)
!15131 = !DILocation(line: 2991, column: 3, scope: !15115)
!15132 = !DILocation(line: 2993, column: 3, scope: !15093)
!15133 = !DILocation(line: 2993, column: 9, scope: !15093)
!15134 = !DILocation(line: 2993, column: 13, scope: !15093)
!15135 = !DILocation(line: 2993, column: 19, scope: !15093)
!15136 = !DILocation(line: 2995, column: 27, scope: !15093)
!15137 = !DILocation(line: 2995, column: 33, scope: !15093)
!15138 = !DILocation(line: 2995, column: 38, scope: !15093)
!15139 = !DILocation(line: 2995, column: 9, scope: !15093)
!15140 = !DILocation(line: 2995, column: 7, scope: !15093)
!15141 = !DILocation(line: 2996, column: 7, scope: !15142)
!15142 = distinct !DILexicalBlock(scope: !15093, file: !3, line: 2996, column: 7)
!15143 = !DILocation(line: 2996, column: 7, scope: !15093)
!15144 = !DILocation(line: 2997, column: 11, scope: !15142)
!15145 = !DILocation(line: 2997, column: 4, scope: !15142)
!15146 = !DILocation(line: 2999, column: 10, scope: !15093)
!15147 = !DILocation(line: 2999, column: 16, scope: !15093)
!15148 = !DILocation(line: 2999, column: 20, scope: !15093)
!15149 = !DILocation(line: 2999, column: 28, scope: !15093)
!15150 = !DILocation(line: 2999, column: 34, scope: !15093)
!15151 = !DILocation(line: 2999, column: 37, scope: !15093)
!15152 = !DILocation(line: 2999, column: 8, scope: !15093)
!15153 = !DILocation(line: 3001, column: 10, scope: !15093)
!15154 = !DILocation(line: 3001, column: 7, scope: !15093)
!15155 = !DILocation(line: 3003, column: 7, scope: !15156)
!15156 = distinct !DILexicalBlock(scope: !15093, file: !3, line: 3003, column: 7)
!15157 = !DILocation(line: 3003, column: 13, scope: !15156)
!15158 = !DILocation(line: 3003, column: 17, scope: !15156)
!15159 = !DILocation(line: 3003, column: 7, scope: !15093)
!15160 = !DILocation(line: 3004, column: 28, scope: !15161)
!15161 = distinct !DILexicalBlock(scope: !15156, file: !3, line: 3003, column: 26)
!15162 = !DILocation(line: 3004, column: 34, scope: !15161)
!15163 = !DILocation(line: 3004, column: 39, scope: !15161)
!15164 = !DILocation(line: 3004, column: 45, scope: !15161)
!15165 = !DILocation(line: 3004, column: 49, scope: !15161)
!15166 = !DILocation(line: 3004, column: 10, scope: !15161)
!15167 = !DILocation(line: 3004, column: 8, scope: !15161)
!15168 = !DILocation(line: 3006, column: 8, scope: !15169)
!15169 = distinct !DILexicalBlock(scope: !15161, file: !3, line: 3006, column: 8)
!15170 = !DILocation(line: 3006, column: 8, scope: !15161)
!15171 = !DILocation(line: 3007, column: 12, scope: !15169)
!15172 = !DILocation(line: 3007, column: 5, scope: !15169)
!15173 = !DILocation(line: 3009, column: 11, scope: !15161)
!15174 = !DILocation(line: 3009, column: 17, scope: !15161)
!15175 = !DILocation(line: 3009, column: 21, scope: !15161)
!15176 = !DILocation(line: 3009, column: 8, scope: !15161)
!15177 = !DILocation(line: 3010, column: 3, scope: !15161)
!15178 = !DILocation(line: 3012, column: 7, scope: !15179)
!15179 = distinct !DILexicalBlock(scope: !15093, file: !3, line: 3012, column: 7)
!15180 = !DILocation(line: 3012, column: 12, scope: !15179)
!15181 = !DILocation(line: 3012, column: 24, scope: !15179)
!15182 = !DILocation(line: 3013, column: 8, scope: !15179)
!15183 = !DILocation(line: 3013, column: 14, scope: !15179)
!15184 = !DILocation(line: 3013, column: 18, scope: !15179)
!15185 = !DILocation(line: 3013, column: 26, scope: !15179)
!15186 = !DILocation(line: 3012, column: 7, scope: !15093)
!15187 = !DILocation(line: 3015, column: 39, scope: !15188)
!15188 = distinct !DILexicalBlock(scope: !15179, file: !3, line: 3013, column: 60)
!15189 = !DILocation(line: 3015, column: 42, scope: !15188)
!15190 = !DILocation(line: 3015, column: 48, scope: !15188)
!15191 = !DILocation(line: 3015, column: 52, scope: !15188)
!15192 = !DILocation(line: 3016, column: 11, scope: !15188)
!15193 = !DILocation(line: 3016, column: 17, scope: !15188)
!15194 = !DILocation(line: 3016, column: 15, scope: !15188)
!15195 = !DILocation(line: 3017, column: 11, scope: !15188)
!15196 = !DILocation(line: 3019, column: 11, scope: !15188)
!15197 = !DILocation(line: 3019, column: 17, scope: !15188)
!15198 = !DILocation(line: 3019, column: 21, scope: !15188)
!15199 = !DILocation(line: 3015, column: 11, scope: !15188)
!15200 = !DILocation(line: 3015, column: 9, scope: !15188)
!15201 = !DILocation(line: 3020, column: 3, scope: !15188)
!15202 = !DILocation(line: 3022, column: 7, scope: !15203)
!15203 = distinct !DILexicalBlock(scope: !15093, file: !3, line: 3022, column: 7)
!15204 = !DILocation(line: 3022, column: 12, scope: !15203)
!15205 = !DILocation(line: 3022, column: 7, scope: !15093)
!15206 = !DILocation(line: 3023, column: 4, scope: !15207)
!15207 = distinct !DILexicalBlock(scope: !15203, file: !3, line: 3022, column: 17)
!15208 = !DILocation(line: 3023, column: 9, scope: !15207)
!15209 = !DILocation(line: 3023, column: 19, scope: !15207)
!15210 = !DILocation(line: 3023, column: 25, scope: !15207)
!15211 = !DILocation(line: 3024, column: 3, scope: !15207)
!15212 = !DILocation(line: 3025, column: 32, scope: !15213)
!15213 = distinct !DILexicalBlock(scope: !15203, file: !3, line: 3024, column: 10)
!15214 = !DILocation(line: 3025, column: 4, scope: !15213)
!15215 = !DILocation(line: 3025, column: 9, scope: !15213)
!15216 = !DILocation(line: 3025, column: 19, scope: !15213)
!15217 = !DILocation(line: 3025, column: 29, scope: !15213)
!15218 = !DILocalVariable(name: "__UNIQUE_ID___x260", scope: !15219, file: !3, line: 3026, type: !7)
!15219 = distinct !DILexicalBlock(scope: !15213, file: !3, line: 3026, column: 19)
!15220 = !DILocation(line: 3026, column: 19, scope: !15219)
!15221 = !DILocalVariable(name: "__UNIQUE_ID___y261", scope: !15219, file: !3, line: 3026, type: !7)
!15222 = !DILocation(line: 3026, column: 17, scope: !15213)
!15223 = !DILocation(line: 3028, column: 2, scope: !15093)
!15224 = !DILocation(line: 2975, column: 32, scope: !15090)
!15225 = !DILocation(line: 2975, column: 41, scope: !15090)
!15226 = !DILocation(line: 2975, column: 38, scope: !15090)
!15227 = !DILocation(line: 2975, column: 56, scope: !15090)
!15228 = !DILocation(line: 2975, column: 53, scope: !15090)
!15229 = !DILocation(line: 2975, column: 2, scope: !15090)
!15230 = distinct !{!15230, !15091, !15231}
!15231 = !DILocation(line: 3028, column: 2, scope: !15087)
!15232 = !DILocation(line: 3031, column: 6, scope: !15025)
!15233 = !DILocation(line: 3031, column: 11, scope: !15025)
!15234 = !DILocation(line: 3031, column: 22, scope: !15025)
!15235 = !DILocation(line: 3031, column: 28, scope: !15025)
!15236 = !DILocation(line: 3031, column: 34, scope: !15025)
!15237 = !DILocation(line: 3031, column: 26, scope: !15025)
!15238 = !DILocation(line: 3031, column: 19, scope: !15025)
!15239 = !DILocation(line: 3031, column: 4, scope: !15025)
!15240 = !DILocation(line: 3032, column: 6, scope: !15241)
!15241 = distinct !DILexicalBlock(scope: !15025, file: !3, line: 3032, column: 6)
!15242 = !DILocation(line: 3032, column: 6, scope: !15025)
!15243 = !DILocation(line: 3033, column: 27, scope: !15244)
!15244 = distinct !DILexicalBlock(scope: !15241, file: !3, line: 3032, column: 9)
!15245 = !DILocation(line: 3033, column: 33, scope: !15244)
!15246 = !DILocation(line: 3033, column: 38, scope: !15244)
!15247 = !DILocation(line: 3033, column: 9, scope: !15244)
!15248 = !DILocation(line: 3033, column: 7, scope: !15244)
!15249 = !DILocation(line: 3034, column: 7, scope: !15250)
!15250 = distinct !DILexicalBlock(scope: !15244, file: !3, line: 3034, column: 7)
!15251 = !DILocation(line: 3034, column: 7, scope: !15244)
!15252 = !DILocation(line: 3035, column: 11, scope: !15250)
!15253 = !DILocation(line: 3035, column: 4, scope: !15250)
!15254 = !DILocation(line: 3036, column: 2, scope: !15244)
!15255 = !DILocation(line: 3038, column: 9, scope: !15025)
!15256 = !DILocation(line: 3038, column: 2, scope: !15025)
!15257 = !DILocation(line: 3039, column: 1, scope: !15025)
!15258 = distinct !DISubprogram(name: "nand_write_page_syndrome", scope: !3, file: !3, line: 3848, type: !4554, scopeLine: 3850, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!15259 = !DILocalVariable(name: "chip", arg: 1, scope: !15258, file: !3, line: 3848, type: !4166)
!15260 = !DILocation(line: 3848, column: 55, scope: !15258)
!15261 = !DILocalVariable(name: "buf", arg: 2, scope: !15258, file: !3, line: 3848, type: !4542)
!15262 = !DILocation(line: 3848, column: 76, scope: !15258)
!15263 = !DILocalVariable(name: "oob_required", arg: 3, scope: !15258, file: !3, line: 3849, type: !240)
!15264 = !DILocation(line: 3849, column: 13, scope: !15258)
!15265 = !DILocalVariable(name: "page", arg: 4, scope: !15258, file: !3, line: 3849, type: !240)
!15266 = !DILocation(line: 3849, column: 31, scope: !15258)
!15267 = !DILocalVariable(name: "mtd", scope: !15258, file: !3, line: 3851, type: !2637)
!15268 = !DILocation(line: 3851, column: 19, scope: !15258)
!15269 = !DILocation(line: 3851, column: 37, scope: !15258)
!15270 = !DILocation(line: 3851, column: 25, scope: !15258)
!15271 = !DILocalVariable(name: "i", scope: !15258, file: !3, line: 3852, type: !240)
!15272 = !DILocation(line: 3852, column: 6, scope: !15258)
!15273 = !DILocalVariable(name: "eccsize", scope: !15258, file: !3, line: 3852, type: !240)
!15274 = !DILocation(line: 3852, column: 9, scope: !15258)
!15275 = !DILocation(line: 3852, column: 19, scope: !15258)
!15276 = !DILocation(line: 3852, column: 25, scope: !15258)
!15277 = !DILocation(line: 3852, column: 29, scope: !15258)
!15278 = !DILocalVariable(name: "eccbytes", scope: !15258, file: !3, line: 3853, type: !240)
!15279 = !DILocation(line: 3853, column: 6, scope: !15258)
!15280 = !DILocation(line: 3853, column: 17, scope: !15258)
!15281 = !DILocation(line: 3853, column: 23, scope: !15258)
!15282 = !DILocation(line: 3853, column: 27, scope: !15258)
!15283 = !DILocalVariable(name: "eccsteps", scope: !15258, file: !3, line: 3854, type: !240)
!15284 = !DILocation(line: 3854, column: 6, scope: !15258)
!15285 = !DILocation(line: 3854, column: 17, scope: !15258)
!15286 = !DILocation(line: 3854, column: 23, scope: !15258)
!15287 = !DILocation(line: 3854, column: 27, scope: !15258)
!15288 = !DILocalVariable(name: "p", scope: !15258, file: !3, line: 3855, type: !4542)
!15289 = !DILocation(line: 3855, column: 17, scope: !15258)
!15290 = !DILocation(line: 3855, column: 21, scope: !15258)
!15291 = !DILocalVariable(name: "oob", scope: !15258, file: !3, line: 3856, type: !2753)
!15292 = !DILocation(line: 3856, column: 11, scope: !15258)
!15293 = !DILocation(line: 3856, column: 17, scope: !15258)
!15294 = !DILocation(line: 3856, column: 23, scope: !15258)
!15295 = !DILocalVariable(name: "ret", scope: !15258, file: !3, line: 3857, type: !240)
!15296 = !DILocation(line: 3857, column: 6, scope: !15258)
!15297 = !DILocation(line: 3859, column: 32, scope: !15258)
!15298 = !DILocation(line: 3859, column: 38, scope: !15258)
!15299 = !DILocation(line: 3859, column: 8, scope: !15258)
!15300 = !DILocation(line: 3859, column: 6, scope: !15258)
!15301 = !DILocation(line: 3860, column: 6, scope: !15302)
!15302 = distinct !DILexicalBlock(scope: !15258, file: !3, line: 3860, column: 6)
!15303 = !DILocation(line: 3860, column: 6, scope: !15258)
!15304 = !DILocation(line: 3861, column: 10, scope: !15302)
!15305 = !DILocation(line: 3861, column: 3, scope: !15302)
!15306 = !DILocation(line: 3863, column: 9, scope: !15307)
!15307 = distinct !DILexicalBlock(scope: !15258, file: !3, line: 3863, column: 2)
!15308 = !DILocation(line: 3863, column: 7, scope: !15307)
!15309 = !DILocation(line: 3863, column: 14, scope: !15310)
!15310 = distinct !DILexicalBlock(scope: !15307, file: !3, line: 3863, column: 2)
!15311 = !DILocation(line: 3863, column: 2, scope: !15307)
!15312 = !DILocation(line: 3864, column: 3, scope: !15313)
!15313 = distinct !DILexicalBlock(scope: !15310, file: !3, line: 3863, column: 65)
!15314 = !DILocation(line: 3864, column: 9, scope: !15313)
!15315 = !DILocation(line: 3864, column: 13, scope: !15313)
!15316 = !DILocation(line: 3864, column: 19, scope: !15313)
!15317 = !DILocation(line: 3866, column: 28, scope: !15313)
!15318 = !DILocation(line: 3866, column: 34, scope: !15313)
!15319 = !DILocation(line: 3866, column: 37, scope: !15313)
!15320 = !DILocation(line: 3866, column: 9, scope: !15313)
!15321 = !DILocation(line: 3866, column: 7, scope: !15313)
!15322 = !DILocation(line: 3867, column: 7, scope: !15323)
!15323 = distinct !DILexicalBlock(scope: !15313, file: !3, line: 3867, column: 7)
!15324 = !DILocation(line: 3867, column: 7, scope: !15313)
!15325 = !DILocation(line: 3868, column: 11, scope: !15323)
!15326 = !DILocation(line: 3868, column: 4, scope: !15323)
!15327 = !DILocation(line: 3870, column: 7, scope: !15328)
!15328 = distinct !DILexicalBlock(scope: !15313, file: !3, line: 3870, column: 7)
!15329 = !DILocation(line: 3870, column: 13, scope: !15328)
!15330 = !DILocation(line: 3870, column: 17, scope: !15328)
!15331 = !DILocation(line: 3870, column: 7, scope: !15313)
!15332 = !DILocation(line: 3871, column: 29, scope: !15333)
!15333 = distinct !DILexicalBlock(scope: !15328, file: !3, line: 3870, column: 25)
!15334 = !DILocation(line: 3871, column: 35, scope: !15333)
!15335 = !DILocation(line: 3871, column: 40, scope: !15333)
!15336 = !DILocation(line: 3871, column: 46, scope: !15333)
!15337 = !DILocation(line: 3871, column: 50, scope: !15333)
!15338 = !DILocation(line: 3871, column: 10, scope: !15333)
!15339 = !DILocation(line: 3871, column: 8, scope: !15333)
!15340 = !DILocation(line: 3873, column: 8, scope: !15341)
!15341 = distinct !DILexicalBlock(scope: !15333, file: !3, line: 3873, column: 8)
!15342 = !DILocation(line: 3873, column: 8, scope: !15333)
!15343 = !DILocation(line: 3874, column: 12, scope: !15341)
!15344 = !DILocation(line: 3874, column: 5, scope: !15341)
!15345 = !DILocation(line: 3876, column: 11, scope: !15333)
!15346 = !DILocation(line: 3876, column: 17, scope: !15333)
!15347 = !DILocation(line: 3876, column: 21, scope: !15333)
!15348 = !DILocation(line: 3876, column: 8, scope: !15333)
!15349 = !DILocation(line: 3877, column: 3, scope: !15333)
!15350 = !DILocation(line: 3879, column: 3, scope: !15313)
!15351 = !DILocation(line: 3879, column: 9, scope: !15313)
!15352 = !DILocation(line: 3879, column: 13, scope: !15313)
!15353 = !DILocation(line: 3879, column: 23, scope: !15313)
!15354 = !DILocation(line: 3879, column: 29, scope: !15313)
!15355 = !DILocation(line: 3879, column: 32, scope: !15313)
!15356 = !DILocation(line: 3881, column: 28, scope: !15313)
!15357 = !DILocation(line: 3881, column: 34, scope: !15313)
!15358 = !DILocation(line: 3881, column: 39, scope: !15313)
!15359 = !DILocation(line: 3881, column: 9, scope: !15313)
!15360 = !DILocation(line: 3881, column: 7, scope: !15313)
!15361 = !DILocation(line: 3882, column: 7, scope: !15362)
!15362 = distinct !DILexicalBlock(scope: !15313, file: !3, line: 3882, column: 7)
!15363 = !DILocation(line: 3882, column: 7, scope: !15313)
!15364 = !DILocation(line: 3883, column: 11, scope: !15362)
!15365 = !DILocation(line: 3883, column: 4, scope: !15362)
!15366 = !DILocation(line: 3885, column: 10, scope: !15313)
!15367 = !DILocation(line: 3885, column: 7, scope: !15313)
!15368 = !DILocation(line: 3887, column: 7, scope: !15369)
!15369 = distinct !DILexicalBlock(scope: !15313, file: !3, line: 3887, column: 7)
!15370 = !DILocation(line: 3887, column: 13, scope: !15369)
!15371 = !DILocation(line: 3887, column: 17, scope: !15369)
!15372 = !DILocation(line: 3887, column: 7, scope: !15313)
!15373 = !DILocation(line: 3888, column: 29, scope: !15374)
!15374 = distinct !DILexicalBlock(scope: !15369, file: !3, line: 3887, column: 26)
!15375 = !DILocation(line: 3888, column: 35, scope: !15374)
!15376 = !DILocation(line: 3888, column: 40, scope: !15374)
!15377 = !DILocation(line: 3888, column: 46, scope: !15374)
!15378 = !DILocation(line: 3888, column: 50, scope: !15374)
!15379 = !DILocation(line: 3888, column: 10, scope: !15374)
!15380 = !DILocation(line: 3888, column: 8, scope: !15374)
!15381 = !DILocation(line: 3890, column: 8, scope: !15382)
!15382 = distinct !DILexicalBlock(scope: !15374, file: !3, line: 3890, column: 8)
!15383 = !DILocation(line: 3890, column: 8, scope: !15374)
!15384 = !DILocation(line: 3891, column: 12, scope: !15382)
!15385 = !DILocation(line: 3891, column: 5, scope: !15382)
!15386 = !DILocation(line: 3893, column: 11, scope: !15374)
!15387 = !DILocation(line: 3893, column: 17, scope: !15374)
!15388 = !DILocation(line: 3893, column: 21, scope: !15374)
!15389 = !DILocation(line: 3893, column: 8, scope: !15374)
!15390 = !DILocation(line: 3894, column: 3, scope: !15374)
!15391 = !DILocation(line: 3895, column: 2, scope: !15313)
!15392 = !DILocation(line: 3863, column: 32, scope: !15310)
!15393 = !DILocation(line: 3863, column: 41, scope: !15310)
!15394 = !DILocation(line: 3863, column: 38, scope: !15310)
!15395 = !DILocation(line: 3863, column: 56, scope: !15310)
!15396 = !DILocation(line: 3863, column: 53, scope: !15310)
!15397 = !DILocation(line: 3863, column: 2, scope: !15310)
!15398 = distinct !{!15398, !15311, !15399}
!15399 = !DILocation(line: 3895, column: 2, scope: !15307)
!15400 = !DILocation(line: 3898, column: 6, scope: !15258)
!15401 = !DILocation(line: 3898, column: 11, scope: !15258)
!15402 = !DILocation(line: 3898, column: 22, scope: !15258)
!15403 = !DILocation(line: 3898, column: 28, scope: !15258)
!15404 = !DILocation(line: 3898, column: 34, scope: !15258)
!15405 = !DILocation(line: 3898, column: 26, scope: !15258)
!15406 = !DILocation(line: 3898, column: 19, scope: !15258)
!15407 = !DILocation(line: 3898, column: 4, scope: !15258)
!15408 = !DILocation(line: 3899, column: 6, scope: !15409)
!15409 = distinct !DILexicalBlock(scope: !15258, file: !3, line: 3899, column: 6)
!15410 = !DILocation(line: 3899, column: 6, scope: !15258)
!15411 = !DILocation(line: 3900, column: 28, scope: !15412)
!15412 = distinct !DILexicalBlock(scope: !15409, file: !3, line: 3899, column: 9)
!15413 = !DILocation(line: 3900, column: 34, scope: !15412)
!15414 = !DILocation(line: 3900, column: 39, scope: !15412)
!15415 = !DILocation(line: 3900, column: 9, scope: !15412)
!15416 = !DILocation(line: 3900, column: 7, scope: !15412)
!15417 = !DILocation(line: 3901, column: 7, scope: !15418)
!15418 = distinct !DILexicalBlock(scope: !15412, file: !3, line: 3901, column: 7)
!15419 = !DILocation(line: 3901, column: 7, scope: !15412)
!15420 = !DILocation(line: 3902, column: 11, scope: !15418)
!15421 = !DILocation(line: 3902, column: 4, scope: !15418)
!15422 = !DILocation(line: 3903, column: 2, scope: !15412)
!15423 = !DILocation(line: 3905, column: 31, scope: !15258)
!15424 = !DILocation(line: 3905, column: 9, scope: !15258)
!15425 = !DILocation(line: 3905, column: 2, scope: !15258)
!15426 = !DILocation(line: 3906, column: 1, scope: !15258)
!15427 = distinct !DISubprogram(name: "nand_read_page_raw_syndrome", scope: !3, file: !3, line: 2666, type: !4550, scopeLine: 2668, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!15428 = !DILocalVariable(name: "chip", arg: 1, scope: !15427, file: !3, line: 2666, type: !4166)
!15429 = !DILocation(line: 2666, column: 58, scope: !15427)
!15430 = !DILocalVariable(name: "buf", arg: 2, scope: !15427, file: !3, line: 2666, type: !2753)
!15431 = !DILocation(line: 2666, column: 73, scope: !15427)
!15432 = !DILocalVariable(name: "oob_required", arg: 3, scope: !15427, file: !3, line: 2667, type: !240)
!15433 = !DILocation(line: 2667, column: 16, scope: !15427)
!15434 = !DILocalVariable(name: "page", arg: 4, scope: !15427, file: !3, line: 2667, type: !240)
!15435 = !DILocation(line: 2667, column: 34, scope: !15427)
!15436 = !DILocalVariable(name: "mtd", scope: !15427, file: !3, line: 2669, type: !2637)
!15437 = !DILocation(line: 2669, column: 19, scope: !15427)
!15438 = !DILocation(line: 2669, column: 37, scope: !15427)
!15439 = !DILocation(line: 2669, column: 25, scope: !15427)
!15440 = !DILocalVariable(name: "eccsize", scope: !15427, file: !3, line: 2670, type: !240)
!15441 = !DILocation(line: 2670, column: 6, scope: !15427)
!15442 = !DILocation(line: 2670, column: 16, scope: !15427)
!15443 = !DILocation(line: 2670, column: 22, scope: !15427)
!15444 = !DILocation(line: 2670, column: 26, scope: !15427)
!15445 = !DILocalVariable(name: "eccbytes", scope: !15427, file: !3, line: 2671, type: !240)
!15446 = !DILocation(line: 2671, column: 6, scope: !15427)
!15447 = !DILocation(line: 2671, column: 17, scope: !15427)
!15448 = !DILocation(line: 2671, column: 23, scope: !15427)
!15449 = !DILocation(line: 2671, column: 27, scope: !15427)
!15450 = !DILocalVariable(name: "oob", scope: !15427, file: !3, line: 2672, type: !2753)
!15451 = !DILocation(line: 2672, column: 11, scope: !15427)
!15452 = !DILocation(line: 2672, column: 17, scope: !15427)
!15453 = !DILocation(line: 2672, column: 23, scope: !15427)
!15454 = !DILocalVariable(name: "steps", scope: !15427, file: !3, line: 2673, type: !240)
!15455 = !DILocation(line: 2673, column: 6, scope: !15427)
!15456 = !DILocalVariable(name: "size", scope: !15427, file: !3, line: 2673, type: !240)
!15457 = !DILocation(line: 2673, column: 13, scope: !15427)
!15458 = !DILocalVariable(name: "ret", scope: !15427, file: !3, line: 2673, type: !240)
!15459 = !DILocation(line: 2673, column: 19, scope: !15427)
!15460 = !DILocation(line: 2675, column: 26, scope: !15427)
!15461 = !DILocation(line: 2675, column: 32, scope: !15427)
!15462 = !DILocation(line: 2675, column: 8, scope: !15427)
!15463 = !DILocation(line: 2675, column: 6, scope: !15427)
!15464 = !DILocation(line: 2676, column: 6, scope: !15465)
!15465 = distinct !DILexicalBlock(scope: !15427, file: !3, line: 2676, column: 6)
!15466 = !DILocation(line: 2676, column: 6, scope: !15427)
!15467 = !DILocation(line: 2677, column: 10, scope: !15465)
!15468 = !DILocation(line: 2677, column: 3, scope: !15465)
!15469 = !DILocation(line: 2679, column: 15, scope: !15470)
!15470 = distinct !DILexicalBlock(scope: !15427, file: !3, line: 2679, column: 2)
!15471 = !DILocation(line: 2679, column: 21, scope: !15470)
!15472 = !DILocation(line: 2679, column: 25, scope: !15470)
!15473 = !DILocation(line: 2679, column: 13, scope: !15470)
!15474 = !DILocation(line: 2679, column: 7, scope: !15470)
!15475 = !DILocation(line: 2679, column: 32, scope: !15476)
!15476 = distinct !DILexicalBlock(scope: !15470, file: !3, line: 2679, column: 2)
!15477 = !DILocation(line: 2679, column: 38, scope: !15476)
!15478 = !DILocation(line: 2679, column: 2, scope: !15470)
!15479 = !DILocation(line: 2680, column: 27, scope: !15480)
!15480 = distinct !DILexicalBlock(scope: !15476, file: !3, line: 2679, column: 52)
!15481 = !DILocation(line: 2680, column: 33, scope: !15480)
!15482 = !DILocation(line: 2680, column: 38, scope: !15480)
!15483 = !DILocation(line: 2680, column: 9, scope: !15480)
!15484 = !DILocation(line: 2680, column: 7, scope: !15480)
!15485 = !DILocation(line: 2681, column: 7, scope: !15486)
!15486 = distinct !DILexicalBlock(scope: !15480, file: !3, line: 2681, column: 7)
!15487 = !DILocation(line: 2681, column: 7, scope: !15480)
!15488 = !DILocation(line: 2682, column: 11, scope: !15486)
!15489 = !DILocation(line: 2682, column: 4, scope: !15486)
!15490 = !DILocation(line: 2684, column: 10, scope: !15480)
!15491 = !DILocation(line: 2684, column: 7, scope: !15480)
!15492 = !DILocation(line: 2686, column: 7, scope: !15493)
!15493 = distinct !DILexicalBlock(scope: !15480, file: !3, line: 2686, column: 7)
!15494 = !DILocation(line: 2686, column: 13, scope: !15493)
!15495 = !DILocation(line: 2686, column: 17, scope: !15493)
!15496 = !DILocation(line: 2686, column: 7, scope: !15480)
!15497 = !DILocation(line: 2687, column: 28, scope: !15498)
!15498 = distinct !DILexicalBlock(scope: !15493, file: !3, line: 2686, column: 25)
!15499 = !DILocation(line: 2687, column: 34, scope: !15498)
!15500 = !DILocation(line: 2687, column: 39, scope: !15498)
!15501 = !DILocation(line: 2687, column: 45, scope: !15498)
!15502 = !DILocation(line: 2687, column: 49, scope: !15498)
!15503 = !DILocation(line: 2687, column: 10, scope: !15498)
!15504 = !DILocation(line: 2687, column: 8, scope: !15498)
!15505 = !DILocation(line: 2689, column: 8, scope: !15506)
!15506 = distinct !DILexicalBlock(scope: !15498, file: !3, line: 2689, column: 8)
!15507 = !DILocation(line: 2689, column: 8, scope: !15498)
!15508 = !DILocation(line: 2690, column: 12, scope: !15506)
!15509 = !DILocation(line: 2690, column: 5, scope: !15506)
!15510 = !DILocation(line: 2692, column: 11, scope: !15498)
!15511 = !DILocation(line: 2692, column: 17, scope: !15498)
!15512 = !DILocation(line: 2692, column: 21, scope: !15498)
!15513 = !DILocation(line: 2692, column: 8, scope: !15498)
!15514 = !DILocation(line: 2693, column: 3, scope: !15498)
!15515 = !DILocation(line: 2695, column: 27, scope: !15480)
!15516 = !DILocation(line: 2695, column: 33, scope: !15480)
!15517 = !DILocation(line: 2695, column: 38, scope: !15480)
!15518 = !DILocation(line: 2695, column: 9, scope: !15480)
!15519 = !DILocation(line: 2695, column: 7, scope: !15480)
!15520 = !DILocation(line: 2696, column: 7, scope: !15521)
!15521 = distinct !DILexicalBlock(scope: !15480, file: !3, line: 2696, column: 7)
!15522 = !DILocation(line: 2696, column: 7, scope: !15480)
!15523 = !DILocation(line: 2697, column: 11, scope: !15521)
!15524 = !DILocation(line: 2697, column: 4, scope: !15521)
!15525 = !DILocation(line: 2699, column: 10, scope: !15480)
!15526 = !DILocation(line: 2699, column: 7, scope: !15480)
!15527 = !DILocation(line: 2701, column: 7, scope: !15528)
!15528 = distinct !DILexicalBlock(scope: !15480, file: !3, line: 2701, column: 7)
!15529 = !DILocation(line: 2701, column: 13, scope: !15528)
!15530 = !DILocation(line: 2701, column: 17, scope: !15528)
!15531 = !DILocation(line: 2701, column: 7, scope: !15480)
!15532 = !DILocation(line: 2702, column: 28, scope: !15533)
!15533 = distinct !DILexicalBlock(scope: !15528, file: !3, line: 2701, column: 26)
!15534 = !DILocation(line: 2702, column: 34, scope: !15533)
!15535 = !DILocation(line: 2702, column: 39, scope: !15533)
!15536 = !DILocation(line: 2702, column: 45, scope: !15533)
!15537 = !DILocation(line: 2702, column: 49, scope: !15533)
!15538 = !DILocation(line: 2702, column: 10, scope: !15533)
!15539 = !DILocation(line: 2702, column: 8, scope: !15533)
!15540 = !DILocation(line: 2704, column: 8, scope: !15541)
!15541 = distinct !DILexicalBlock(scope: !15533, file: !3, line: 2704, column: 8)
!15542 = !DILocation(line: 2704, column: 8, scope: !15533)
!15543 = !DILocation(line: 2705, column: 12, scope: !15541)
!15544 = !DILocation(line: 2705, column: 5, scope: !15541)
!15545 = !DILocation(line: 2707, column: 11, scope: !15533)
!15546 = !DILocation(line: 2707, column: 17, scope: !15533)
!15547 = !DILocation(line: 2707, column: 21, scope: !15533)
!15548 = !DILocation(line: 2707, column: 8, scope: !15533)
!15549 = !DILocation(line: 2708, column: 3, scope: !15533)
!15550 = !DILocation(line: 2709, column: 2, scope: !15480)
!15551 = !DILocation(line: 2679, column: 48, scope: !15476)
!15552 = !DILocation(line: 2679, column: 2, scope: !15476)
!15553 = distinct !{!15553, !15478, !15554}
!15554 = !DILocation(line: 2709, column: 2, scope: !15470)
!15555 = !DILocation(line: 2711, column: 9, scope: !15427)
!15556 = !DILocation(line: 2711, column: 14, scope: !15427)
!15557 = !DILocation(line: 2711, column: 25, scope: !15427)
!15558 = !DILocation(line: 2711, column: 31, scope: !15427)
!15559 = !DILocation(line: 2711, column: 37, scope: !15427)
!15560 = !DILocation(line: 2711, column: 29, scope: !15427)
!15561 = !DILocation(line: 2711, column: 22, scope: !15427)
!15562 = !DILocation(line: 2711, column: 7, scope: !15427)
!15563 = !DILocation(line: 2712, column: 6, scope: !15564)
!15564 = distinct !DILexicalBlock(scope: !15427, file: !3, line: 2712, column: 6)
!15565 = !DILocation(line: 2712, column: 6, scope: !15427)
!15566 = !DILocation(line: 2713, column: 27, scope: !15567)
!15567 = distinct !DILexicalBlock(scope: !15564, file: !3, line: 2712, column: 12)
!15568 = !DILocation(line: 2713, column: 33, scope: !15567)
!15569 = !DILocation(line: 2713, column: 38, scope: !15567)
!15570 = !DILocation(line: 2713, column: 9, scope: !15567)
!15571 = !DILocation(line: 2713, column: 7, scope: !15567)
!15572 = !DILocation(line: 2714, column: 7, scope: !15573)
!15573 = distinct !DILexicalBlock(scope: !15567, file: !3, line: 2714, column: 7)
!15574 = !DILocation(line: 2714, column: 7, scope: !15567)
!15575 = !DILocation(line: 2715, column: 11, scope: !15573)
!15576 = !DILocation(line: 2715, column: 4, scope: !15573)
!15577 = !DILocation(line: 2716, column: 2, scope: !15567)
!15578 = !DILocation(line: 2718, column: 2, scope: !15427)
!15579 = !DILocation(line: 2719, column: 1, scope: !15427)
!15580 = distinct !DISubprogram(name: "nand_write_page_raw_syndrome", scope: !3, file: !3, line: 3640, type: !4554, scopeLine: 3643, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!15581 = !DILocalVariable(name: "chip", arg: 1, scope: !15580, file: !3, line: 3640, type: !4166)
!15582 = !DILocation(line: 3640, column: 59, scope: !15580)
!15583 = !DILocalVariable(name: "buf", arg: 2, scope: !15580, file: !3, line: 3641, type: !4542)
!15584 = !DILocation(line: 3641, column: 21, scope: !15580)
!15585 = !DILocalVariable(name: "oob_required", arg: 3, scope: !15580, file: !3, line: 3641, type: !240)
!15586 = !DILocation(line: 3641, column: 30, scope: !15580)
!15587 = !DILocalVariable(name: "page", arg: 4, scope: !15580, file: !3, line: 3642, type: !240)
!15588 = !DILocation(line: 3642, column: 10, scope: !15580)
!15589 = !DILocalVariable(name: "mtd", scope: !15580, file: !3, line: 3644, type: !2637)
!15590 = !DILocation(line: 3644, column: 19, scope: !15580)
!15591 = !DILocation(line: 3644, column: 37, scope: !15580)
!15592 = !DILocation(line: 3644, column: 25, scope: !15580)
!15593 = !DILocalVariable(name: "eccsize", scope: !15580, file: !3, line: 3645, type: !240)
!15594 = !DILocation(line: 3645, column: 6, scope: !15580)
!15595 = !DILocation(line: 3645, column: 16, scope: !15580)
!15596 = !DILocation(line: 3645, column: 22, scope: !15580)
!15597 = !DILocation(line: 3645, column: 26, scope: !15580)
!15598 = !DILocalVariable(name: "eccbytes", scope: !15580, file: !3, line: 3646, type: !240)
!15599 = !DILocation(line: 3646, column: 6, scope: !15580)
!15600 = !DILocation(line: 3646, column: 17, scope: !15580)
!15601 = !DILocation(line: 3646, column: 23, scope: !15580)
!15602 = !DILocation(line: 3646, column: 27, scope: !15580)
!15603 = !DILocalVariable(name: "oob", scope: !15580, file: !3, line: 3647, type: !2753)
!15604 = !DILocation(line: 3647, column: 11, scope: !15580)
!15605 = !DILocation(line: 3647, column: 17, scope: !15580)
!15606 = !DILocation(line: 3647, column: 23, scope: !15580)
!15607 = !DILocalVariable(name: "steps", scope: !15580, file: !3, line: 3648, type: !240)
!15608 = !DILocation(line: 3648, column: 6, scope: !15580)
!15609 = !DILocalVariable(name: "size", scope: !15580, file: !3, line: 3648, type: !240)
!15610 = !DILocation(line: 3648, column: 13, scope: !15580)
!15611 = !DILocalVariable(name: "ret", scope: !15580, file: !3, line: 3648, type: !240)
!15612 = !DILocation(line: 3648, column: 19, scope: !15580)
!15613 = !DILocation(line: 3650, column: 32, scope: !15580)
!15614 = !DILocation(line: 3650, column: 38, scope: !15580)
!15615 = !DILocation(line: 3650, column: 8, scope: !15580)
!15616 = !DILocation(line: 3650, column: 6, scope: !15580)
!15617 = !DILocation(line: 3651, column: 6, scope: !15618)
!15618 = distinct !DILexicalBlock(scope: !15580, file: !3, line: 3651, column: 6)
!15619 = !DILocation(line: 3651, column: 6, scope: !15580)
!15620 = !DILocation(line: 3652, column: 10, scope: !15618)
!15621 = !DILocation(line: 3652, column: 3, scope: !15618)
!15622 = !DILocation(line: 3654, column: 15, scope: !15623)
!15623 = distinct !DILexicalBlock(scope: !15580, file: !3, line: 3654, column: 2)
!15624 = !DILocation(line: 3654, column: 21, scope: !15623)
!15625 = !DILocation(line: 3654, column: 25, scope: !15623)
!15626 = !DILocation(line: 3654, column: 13, scope: !15623)
!15627 = !DILocation(line: 3654, column: 7, scope: !15623)
!15628 = !DILocation(line: 3654, column: 32, scope: !15629)
!15629 = distinct !DILexicalBlock(scope: !15623, file: !3, line: 3654, column: 2)
!15630 = !DILocation(line: 3654, column: 38, scope: !15629)
!15631 = !DILocation(line: 3654, column: 2, scope: !15623)
!15632 = !DILocation(line: 3655, column: 28, scope: !15633)
!15633 = distinct !DILexicalBlock(scope: !15629, file: !3, line: 3654, column: 52)
!15634 = !DILocation(line: 3655, column: 34, scope: !15633)
!15635 = !DILocation(line: 3655, column: 39, scope: !15633)
!15636 = !DILocation(line: 3655, column: 9, scope: !15633)
!15637 = !DILocation(line: 3655, column: 7, scope: !15633)
!15638 = !DILocation(line: 3656, column: 7, scope: !15639)
!15639 = distinct !DILexicalBlock(scope: !15633, file: !3, line: 3656, column: 7)
!15640 = !DILocation(line: 3656, column: 7, scope: !15633)
!15641 = !DILocation(line: 3657, column: 11, scope: !15639)
!15642 = !DILocation(line: 3657, column: 4, scope: !15639)
!15643 = !DILocation(line: 3659, column: 10, scope: !15633)
!15644 = !DILocation(line: 3659, column: 7, scope: !15633)
!15645 = !DILocation(line: 3661, column: 7, scope: !15646)
!15646 = distinct !DILexicalBlock(scope: !15633, file: !3, line: 3661, column: 7)
!15647 = !DILocation(line: 3661, column: 13, scope: !15646)
!15648 = !DILocation(line: 3661, column: 17, scope: !15646)
!15649 = !DILocation(line: 3661, column: 7, scope: !15633)
!15650 = !DILocation(line: 3662, column: 29, scope: !15651)
!15651 = distinct !DILexicalBlock(scope: !15646, file: !3, line: 3661, column: 25)
!15652 = !DILocation(line: 3662, column: 35, scope: !15651)
!15653 = !DILocation(line: 3662, column: 40, scope: !15651)
!15654 = !DILocation(line: 3662, column: 46, scope: !15651)
!15655 = !DILocation(line: 3662, column: 50, scope: !15651)
!15656 = !DILocation(line: 3662, column: 10, scope: !15651)
!15657 = !DILocation(line: 3662, column: 8, scope: !15651)
!15658 = !DILocation(line: 3664, column: 8, scope: !15659)
!15659 = distinct !DILexicalBlock(scope: !15651, file: !3, line: 3664, column: 8)
!15660 = !DILocation(line: 3664, column: 8, scope: !15651)
!15661 = !DILocation(line: 3665, column: 12, scope: !15659)
!15662 = !DILocation(line: 3665, column: 5, scope: !15659)
!15663 = !DILocation(line: 3667, column: 11, scope: !15651)
!15664 = !DILocation(line: 3667, column: 17, scope: !15651)
!15665 = !DILocation(line: 3667, column: 21, scope: !15651)
!15666 = !DILocation(line: 3667, column: 8, scope: !15651)
!15667 = !DILocation(line: 3668, column: 3, scope: !15651)
!15668 = !DILocation(line: 3670, column: 28, scope: !15633)
!15669 = !DILocation(line: 3670, column: 34, scope: !15633)
!15670 = !DILocation(line: 3670, column: 39, scope: !15633)
!15671 = !DILocation(line: 3670, column: 9, scope: !15633)
!15672 = !DILocation(line: 3670, column: 7, scope: !15633)
!15673 = !DILocation(line: 3671, column: 7, scope: !15674)
!15674 = distinct !DILexicalBlock(scope: !15633, file: !3, line: 3671, column: 7)
!15675 = !DILocation(line: 3671, column: 7, scope: !15633)
!15676 = !DILocation(line: 3672, column: 11, scope: !15674)
!15677 = !DILocation(line: 3672, column: 4, scope: !15674)
!15678 = !DILocation(line: 3674, column: 10, scope: !15633)
!15679 = !DILocation(line: 3674, column: 7, scope: !15633)
!15680 = !DILocation(line: 3676, column: 7, scope: !15681)
!15681 = distinct !DILexicalBlock(scope: !15633, file: !3, line: 3676, column: 7)
!15682 = !DILocation(line: 3676, column: 13, scope: !15681)
!15683 = !DILocation(line: 3676, column: 17, scope: !15681)
!15684 = !DILocation(line: 3676, column: 7, scope: !15633)
!15685 = !DILocation(line: 3677, column: 29, scope: !15686)
!15686 = distinct !DILexicalBlock(scope: !15681, file: !3, line: 3676, column: 26)
!15687 = !DILocation(line: 3677, column: 35, scope: !15686)
!15688 = !DILocation(line: 3677, column: 40, scope: !15686)
!15689 = !DILocation(line: 3677, column: 46, scope: !15686)
!15690 = !DILocation(line: 3677, column: 50, scope: !15686)
!15691 = !DILocation(line: 3677, column: 10, scope: !15686)
!15692 = !DILocation(line: 3677, column: 8, scope: !15686)
!15693 = !DILocation(line: 3679, column: 8, scope: !15694)
!15694 = distinct !DILexicalBlock(scope: !15686, file: !3, line: 3679, column: 8)
!15695 = !DILocation(line: 3679, column: 8, scope: !15686)
!15696 = !DILocation(line: 3680, column: 12, scope: !15694)
!15697 = !DILocation(line: 3680, column: 5, scope: !15694)
!15698 = !DILocation(line: 3682, column: 11, scope: !15686)
!15699 = !DILocation(line: 3682, column: 17, scope: !15686)
!15700 = !DILocation(line: 3682, column: 21, scope: !15686)
!15701 = !DILocation(line: 3682, column: 8, scope: !15686)
!15702 = !DILocation(line: 3683, column: 3, scope: !15686)
!15703 = !DILocation(line: 3684, column: 2, scope: !15633)
!15704 = !DILocation(line: 3654, column: 48, scope: !15629)
!15705 = !DILocation(line: 3654, column: 2, scope: !15629)
!15706 = distinct !{!15706, !15631, !15707}
!15707 = !DILocation(line: 3684, column: 2, scope: !15623)
!15708 = !DILocation(line: 3686, column: 9, scope: !15580)
!15709 = !DILocation(line: 3686, column: 14, scope: !15580)
!15710 = !DILocation(line: 3686, column: 25, scope: !15580)
!15711 = !DILocation(line: 3686, column: 31, scope: !15580)
!15712 = !DILocation(line: 3686, column: 37, scope: !15580)
!15713 = !DILocation(line: 3686, column: 29, scope: !15580)
!15714 = !DILocation(line: 3686, column: 22, scope: !15580)
!15715 = !DILocation(line: 3686, column: 7, scope: !15580)
!15716 = !DILocation(line: 3687, column: 6, scope: !15717)
!15717 = distinct !DILexicalBlock(scope: !15580, file: !3, line: 3687, column: 6)
!15718 = !DILocation(line: 3687, column: 6, scope: !15580)
!15719 = !DILocation(line: 3688, column: 28, scope: !15720)
!15720 = distinct !DILexicalBlock(scope: !15717, file: !3, line: 3687, column: 12)
!15721 = !DILocation(line: 3688, column: 34, scope: !15720)
!15722 = !DILocation(line: 3688, column: 39, scope: !15720)
!15723 = !DILocation(line: 3688, column: 9, scope: !15720)
!15724 = !DILocation(line: 3688, column: 7, scope: !15720)
!15725 = !DILocation(line: 3689, column: 7, scope: !15726)
!15726 = distinct !DILexicalBlock(scope: !15720, file: !3, line: 3689, column: 7)
!15727 = !DILocation(line: 3689, column: 7, scope: !15720)
!15728 = !DILocation(line: 3690, column: 11, scope: !15726)
!15729 = !DILocation(line: 3690, column: 4, scope: !15726)
!15730 = !DILocation(line: 3691, column: 2, scope: !15720)
!15731 = !DILocation(line: 3693, column: 31, scope: !15580)
!15732 = !DILocation(line: 3693, column: 9, scope: !15580)
!15733 = !DILocation(line: 3693, column: 2, scope: !15580)
!15734 = !DILocation(line: 3694, column: 1, scope: !15580)
!15735 = distinct !DISubprogram(name: "nand_read_oob_syndrome", scope: !3, file: !3, line: 3303, type: !4309, scopeLine: 3304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!15736 = !DILocalVariable(name: "chip", arg: 1, scope: !15735, file: !3, line: 3303, type: !4166)
!15737 = !DILocation(line: 3303, column: 53, scope: !15735)
!15738 = !DILocalVariable(name: "page", arg: 2, scope: !15735, file: !3, line: 3303, type: !240)
!15739 = !DILocation(line: 3303, column: 63, scope: !15735)
!15740 = !DILocalVariable(name: "mtd", scope: !15735, file: !3, line: 3305, type: !2637)
!15741 = !DILocation(line: 3305, column: 19, scope: !15735)
!15742 = !DILocation(line: 3305, column: 37, scope: !15735)
!15743 = !DILocation(line: 3305, column: 25, scope: !15735)
!15744 = !DILocalVariable(name: "length", scope: !15735, file: !3, line: 3306, type: !240)
!15745 = !DILocation(line: 3306, column: 6, scope: !15735)
!15746 = !DILocation(line: 3306, column: 15, scope: !15735)
!15747 = !DILocation(line: 3306, column: 20, scope: !15735)
!15748 = !DILocalVariable(name: "chunk", scope: !15735, file: !3, line: 3307, type: !240)
!15749 = !DILocation(line: 3307, column: 6, scope: !15735)
!15750 = !DILocation(line: 3307, column: 14, scope: !15735)
!15751 = !DILocation(line: 3307, column: 20, scope: !15735)
!15752 = !DILocation(line: 3307, column: 24, scope: !15735)
!15753 = !DILocation(line: 3307, column: 32, scope: !15735)
!15754 = !DILocation(line: 3307, column: 38, scope: !15735)
!15755 = !DILocation(line: 3307, column: 42, scope: !15735)
!15756 = !DILocation(line: 3307, column: 30, scope: !15735)
!15757 = !DILocation(line: 3307, column: 51, scope: !15735)
!15758 = !DILocation(line: 3307, column: 57, scope: !15735)
!15759 = !DILocation(line: 3307, column: 61, scope: !15735)
!15760 = !DILocation(line: 3307, column: 49, scope: !15735)
!15761 = !DILocalVariable(name: "eccsize", scope: !15735, file: !3, line: 3308, type: !240)
!15762 = !DILocation(line: 3308, column: 6, scope: !15735)
!15763 = !DILocation(line: 3308, column: 16, scope: !15735)
!15764 = !DILocation(line: 3308, column: 22, scope: !15735)
!15765 = !DILocation(line: 3308, column: 26, scope: !15735)
!15766 = !DILocalVariable(name: "bufpoi", scope: !15735, file: !3, line: 3309, type: !2753)
!15767 = !DILocation(line: 3309, column: 11, scope: !15735)
!15768 = !DILocation(line: 3309, column: 20, scope: !15735)
!15769 = !DILocation(line: 3309, column: 26, scope: !15735)
!15770 = !DILocalVariable(name: "i", scope: !15735, file: !3, line: 3310, type: !240)
!15771 = !DILocation(line: 3310, column: 6, scope: !15735)
!15772 = !DILocalVariable(name: "toread", scope: !15735, file: !3, line: 3310, type: !240)
!15773 = !DILocation(line: 3310, column: 9, scope: !15735)
!15774 = !DILocalVariable(name: "sndrnd", scope: !15735, file: !3, line: 3310, type: !240)
!15775 = !DILocation(line: 3310, column: 17, scope: !15735)
!15776 = !DILocalVariable(name: "pos", scope: !15735, file: !3, line: 3310, type: !240)
!15777 = !DILocation(line: 3310, column: 29, scope: !15735)
!15778 = !DILocalVariable(name: "ret", scope: !15735, file: !3, line: 3310, type: !240)
!15779 = !DILocation(line: 3310, column: 34, scope: !15735)
!15780 = !DILocation(line: 3312, column: 26, scope: !15735)
!15781 = !DILocation(line: 3312, column: 32, scope: !15735)
!15782 = !DILocation(line: 3312, column: 38, scope: !15735)
!15783 = !DILocation(line: 3312, column: 44, scope: !15735)
!15784 = !DILocation(line: 3312, column: 48, scope: !15735)
!15785 = !DILocation(line: 3312, column: 8, scope: !15735)
!15786 = !DILocation(line: 3312, column: 6, scope: !15735)
!15787 = !DILocation(line: 3313, column: 6, scope: !15788)
!15788 = distinct !DILexicalBlock(scope: !15735, file: !3, line: 3313, column: 6)
!15789 = !DILocation(line: 3313, column: 6, scope: !15735)
!15790 = !DILocation(line: 3314, column: 10, scope: !15788)
!15791 = !DILocation(line: 3314, column: 3, scope: !15788)
!15792 = !DILocation(line: 3316, column: 9, scope: !15793)
!15793 = distinct !DILexicalBlock(scope: !15735, file: !3, line: 3316, column: 2)
!15794 = !DILocation(line: 3316, column: 7, scope: !15793)
!15795 = !DILocation(line: 3316, column: 14, scope: !15796)
!15796 = distinct !DILexicalBlock(scope: !15793, file: !3, line: 3316, column: 2)
!15797 = !DILocation(line: 3316, column: 18, scope: !15796)
!15798 = !DILocation(line: 3316, column: 24, scope: !15796)
!15799 = !DILocation(line: 3316, column: 28, scope: !15796)
!15800 = !DILocation(line: 3316, column: 16, scope: !15796)
!15801 = !DILocation(line: 3316, column: 2, scope: !15793)
!15802 = !DILocation(line: 3317, column: 7, scope: !15803)
!15803 = distinct !DILexicalBlock(scope: !15804, file: !3, line: 3317, column: 7)
!15804 = distinct !DILexicalBlock(scope: !15796, file: !3, line: 3316, column: 40)
!15805 = !DILocation(line: 3317, column: 7, scope: !15804)
!15806 = !DILocalVariable(name: "ret", scope: !15807, file: !3, line: 3318, type: !240)
!15807 = distinct !DILexicalBlock(scope: !15803, file: !3, line: 3317, column: 15)
!15808 = !DILocation(line: 3318, column: 8, scope: !15807)
!15809 = !DILocation(line: 3320, column: 10, scope: !15807)
!15810 = !DILocation(line: 3320, column: 20, scope: !15807)
!15811 = !DILocation(line: 3320, column: 25, scope: !15807)
!15812 = !DILocation(line: 3320, column: 35, scope: !15807)
!15813 = !DILocation(line: 3320, column: 33, scope: !15807)
!15814 = !DILocation(line: 3320, column: 22, scope: !15807)
!15815 = !DILocation(line: 3320, column: 18, scope: !15807)
!15816 = !DILocation(line: 3320, column: 8, scope: !15807)
!15817 = !DILocation(line: 3321, column: 8, scope: !15818)
!15818 = distinct !DILexicalBlock(scope: !15807, file: !3, line: 3321, column: 8)
!15819 = !DILocation(line: 3321, column: 13, scope: !15818)
!15820 = !DILocation(line: 3321, column: 23, scope: !15818)
!15821 = !DILocation(line: 3321, column: 8, scope: !15807)
!15822 = !DILocation(line: 3322, column: 38, scope: !15818)
!15823 = !DILocation(line: 3322, column: 44, scope: !15818)
!15824 = !DILocation(line: 3322, column: 11, scope: !15818)
!15825 = !DILocation(line: 3322, column: 9, scope: !15818)
!15826 = !DILocation(line: 3322, column: 5, scope: !15818)
!15827 = !DILocation(line: 3326, column: 29, scope: !15818)
!15828 = !DILocation(line: 3326, column: 35, scope: !15818)
!15829 = !DILocation(line: 3326, column: 41, scope: !15818)
!15830 = !DILocation(line: 3326, column: 11, scope: !15818)
!15831 = !DILocation(line: 3326, column: 9, scope: !15818)
!15832 = !DILocation(line: 3329, column: 8, scope: !15833)
!15833 = distinct !DILexicalBlock(scope: !15807, file: !3, line: 3329, column: 8)
!15834 = !DILocation(line: 3329, column: 8, scope: !15807)
!15835 = !DILocation(line: 3330, column: 12, scope: !15833)
!15836 = !DILocation(line: 3330, column: 5, scope: !15833)
!15837 = !DILocation(line: 3331, column: 3, scope: !15807)
!15838 = !DILocation(line: 3332, column: 11, scope: !15803)
!15839 = !DILocalVariable(name: "__UNIQUE_ID___x273", scope: !15840, file: !3, line: 3333, type: !240)
!15840 = distinct !DILexicalBlock(scope: !15804, file: !3, line: 3333, column: 12)
!15841 = !DILocation(line: 3333, column: 12, scope: !15840)
!15842 = !DILocalVariable(name: "__UNIQUE_ID___y274", scope: !15840, file: !3, line: 3333, type: !240)
!15843 = !DILocation(line: 3333, column: 10, scope: !15804)
!15844 = !DILocation(line: 3335, column: 27, scope: !15804)
!15845 = !DILocation(line: 3335, column: 33, scope: !15804)
!15846 = !DILocation(line: 3335, column: 41, scope: !15804)
!15847 = !DILocation(line: 3335, column: 9, scope: !15804)
!15848 = !DILocation(line: 3335, column: 7, scope: !15804)
!15849 = !DILocation(line: 3336, column: 7, scope: !15850)
!15850 = distinct !DILexicalBlock(scope: !15804, file: !3, line: 3336, column: 7)
!15851 = !DILocation(line: 3336, column: 7, scope: !15804)
!15852 = !DILocation(line: 3337, column: 11, scope: !15850)
!15853 = !DILocation(line: 3337, column: 4, scope: !15850)
!15854 = !DILocation(line: 3339, column: 13, scope: !15804)
!15855 = !DILocation(line: 3339, column: 10, scope: !15804)
!15856 = !DILocation(line: 3340, column: 13, scope: !15804)
!15857 = !DILocation(line: 3340, column: 10, scope: !15804)
!15858 = !DILocation(line: 3341, column: 2, scope: !15804)
!15859 = !DILocation(line: 3316, column: 36, scope: !15796)
!15860 = !DILocation(line: 3316, column: 2, scope: !15796)
!15861 = distinct !{!15861, !15801, !15862}
!15862 = !DILocation(line: 3341, column: 2, scope: !15793)
!15863 = !DILocation(line: 3342, column: 6, scope: !15864)
!15864 = distinct !DILexicalBlock(scope: !15735, file: !3, line: 3342, column: 6)
!15865 = !DILocation(line: 3342, column: 13, scope: !15864)
!15866 = !DILocation(line: 3342, column: 6, scope: !15735)
!15867 = !DILocation(line: 3343, column: 27, scope: !15868)
!15868 = distinct !DILexicalBlock(scope: !15864, file: !3, line: 3342, column: 18)
!15869 = !DILocation(line: 3343, column: 33, scope: !15868)
!15870 = !DILocation(line: 3343, column: 41, scope: !15868)
!15871 = !DILocation(line: 3343, column: 9, scope: !15868)
!15872 = !DILocation(line: 3343, column: 7, scope: !15868)
!15873 = !DILocation(line: 3344, column: 7, scope: !15874)
!15874 = distinct !DILexicalBlock(scope: !15868, file: !3, line: 3344, column: 7)
!15875 = !DILocation(line: 3344, column: 7, scope: !15868)
!15876 = !DILocation(line: 3345, column: 11, scope: !15874)
!15877 = !DILocation(line: 3345, column: 4, scope: !15874)
!15878 = !DILocation(line: 3346, column: 2, scope: !15868)
!15879 = !DILocation(line: 3348, column: 2, scope: !15735)
!15880 = !DILocation(line: 3349, column: 1, scope: !15735)
!15881 = distinct !DISubprogram(name: "nand_write_oob_syndrome", scope: !3, file: !3, line: 3371, type: !4309, scopeLine: 3372, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!15882 = !DILocalVariable(name: "chip", arg: 1, scope: !15881, file: !3, line: 3371, type: !4166)
!15883 = !DILocation(line: 3371, column: 54, scope: !15881)
!15884 = !DILocalVariable(name: "page", arg: 2, scope: !15881, file: !3, line: 3371, type: !240)
!15885 = !DILocation(line: 3371, column: 64, scope: !15881)
!15886 = !DILocalVariable(name: "mtd", scope: !15881, file: !3, line: 3373, type: !2637)
!15887 = !DILocation(line: 3373, column: 19, scope: !15881)
!15888 = !DILocation(line: 3373, column: 37, scope: !15881)
!15889 = !DILocation(line: 3373, column: 25, scope: !15881)
!15890 = !DILocalVariable(name: "chunk", scope: !15881, file: !3, line: 3374, type: !240)
!15891 = !DILocation(line: 3374, column: 6, scope: !15881)
!15892 = !DILocation(line: 3374, column: 14, scope: !15881)
!15893 = !DILocation(line: 3374, column: 20, scope: !15881)
!15894 = !DILocation(line: 3374, column: 24, scope: !15881)
!15895 = !DILocation(line: 3374, column: 32, scope: !15881)
!15896 = !DILocation(line: 3374, column: 38, scope: !15881)
!15897 = !DILocation(line: 3374, column: 42, scope: !15881)
!15898 = !DILocation(line: 3374, column: 30, scope: !15881)
!15899 = !DILocation(line: 3374, column: 51, scope: !15881)
!15900 = !DILocation(line: 3374, column: 57, scope: !15881)
!15901 = !DILocation(line: 3374, column: 61, scope: !15881)
!15902 = !DILocation(line: 3374, column: 49, scope: !15881)
!15903 = !DILocalVariable(name: "eccsize", scope: !15881, file: !3, line: 3375, type: !240)
!15904 = !DILocation(line: 3375, column: 6, scope: !15881)
!15905 = !DILocation(line: 3375, column: 16, scope: !15881)
!15906 = !DILocation(line: 3375, column: 22, scope: !15881)
!15907 = !DILocation(line: 3375, column: 26, scope: !15881)
!15908 = !DILocalVariable(name: "length", scope: !15881, file: !3, line: 3375, type: !240)
!15909 = !DILocation(line: 3375, column: 32, scope: !15881)
!15910 = !DILocation(line: 3375, column: 41, scope: !15881)
!15911 = !DILocation(line: 3375, column: 46, scope: !15881)
!15912 = !DILocalVariable(name: "ret", scope: !15881, file: !3, line: 3376, type: !240)
!15913 = !DILocation(line: 3376, column: 6, scope: !15881)
!15914 = !DILocalVariable(name: "i", scope: !15881, file: !3, line: 3376, type: !240)
!15915 = !DILocation(line: 3376, column: 11, scope: !15881)
!15916 = !DILocalVariable(name: "len", scope: !15881, file: !3, line: 3376, type: !240)
!15917 = !DILocation(line: 3376, column: 14, scope: !15881)
!15918 = !DILocalVariable(name: "pos", scope: !15881, file: !3, line: 3376, type: !240)
!15919 = !DILocation(line: 3376, column: 19, scope: !15881)
!15920 = !DILocalVariable(name: "sndcmd", scope: !15881, file: !3, line: 3376, type: !240)
!15921 = !DILocation(line: 3376, column: 24, scope: !15881)
!15922 = !DILocalVariable(name: "steps", scope: !15881, file: !3, line: 3376, type: !240)
!15923 = !DILocation(line: 3376, column: 36, scope: !15881)
!15924 = !DILocation(line: 3376, column: 44, scope: !15881)
!15925 = !DILocation(line: 3376, column: 50, scope: !15881)
!15926 = !DILocation(line: 3376, column: 54, scope: !15881)
!15927 = !DILocalVariable(name: "bufpoi", scope: !15881, file: !3, line: 3377, type: !4542)
!15928 = !DILocation(line: 3377, column: 17, scope: !15881)
!15929 = !DILocation(line: 3377, column: 26, scope: !15881)
!15930 = !DILocation(line: 3377, column: 32, scope: !15881)
!15931 = !DILocation(line: 3384, column: 7, scope: !15932)
!15932 = distinct !DILexicalBlock(scope: !15881, file: !3, line: 3384, column: 6)
!15933 = !DILocation(line: 3384, column: 13, scope: !15932)
!15934 = !DILocation(line: 3384, column: 17, scope: !15932)
!15935 = !DILocation(line: 3384, column: 24, scope: !15932)
!15936 = !DILocation(line: 3384, column: 28, scope: !15932)
!15937 = !DILocation(line: 3384, column: 34, scope: !15932)
!15938 = !DILocation(line: 3384, column: 38, scope: !15932)
!15939 = !DILocation(line: 3384, column: 6, scope: !15881)
!15940 = !DILocation(line: 3385, column: 9, scope: !15941)
!15941 = distinct !DILexicalBlock(scope: !15932, file: !3, line: 3384, column: 47)
!15942 = !DILocation(line: 3385, column: 18, scope: !15941)
!15943 = !DILocation(line: 3385, column: 28, scope: !15941)
!15944 = !DILocation(line: 3385, column: 26, scope: !15941)
!15945 = !DILocation(line: 3385, column: 15, scope: !15941)
!15946 = !DILocation(line: 3385, column: 7, scope: !15941)
!15947 = !DILocation(line: 3386, column: 9, scope: !15941)
!15948 = !DILocation(line: 3387, column: 2, scope: !15941)
!15949 = !DILocation(line: 3388, column: 9, scope: !15932)
!15950 = !DILocation(line: 3388, column: 7, scope: !15932)
!15951 = !DILocation(line: 3390, column: 32, scope: !15881)
!15952 = !DILocation(line: 3390, column: 38, scope: !15881)
!15953 = !DILocation(line: 3390, column: 44, scope: !15881)
!15954 = !DILocation(line: 3390, column: 8, scope: !15881)
!15955 = !DILocation(line: 3390, column: 6, scope: !15881)
!15956 = !DILocation(line: 3391, column: 6, scope: !15957)
!15957 = distinct !DILexicalBlock(scope: !15881, file: !3, line: 3391, column: 6)
!15958 = !DILocation(line: 3391, column: 6, scope: !15881)
!15959 = !DILocation(line: 3392, column: 10, scope: !15957)
!15960 = !DILocation(line: 3392, column: 3, scope: !15957)
!15961 = !DILocation(line: 3394, column: 9, scope: !15962)
!15962 = distinct !DILexicalBlock(scope: !15881, file: !3, line: 3394, column: 2)
!15963 = !DILocation(line: 3394, column: 7, scope: !15962)
!15964 = !DILocation(line: 3394, column: 14, scope: !15965)
!15965 = distinct !DILexicalBlock(scope: !15962, file: !3, line: 3394, column: 2)
!15966 = !DILocation(line: 3394, column: 18, scope: !15965)
!15967 = !DILocation(line: 3394, column: 16, scope: !15965)
!15968 = !DILocation(line: 3394, column: 2, scope: !15962)
!15969 = !DILocation(line: 3395, column: 7, scope: !15970)
!15970 = distinct !DILexicalBlock(scope: !15971, file: !3, line: 3395, column: 7)
!15971 = distinct !DILexicalBlock(scope: !15965, file: !3, line: 3394, column: 30)
!15972 = !DILocation(line: 3395, column: 7, scope: !15971)
!15973 = !DILocation(line: 3396, column: 8, scope: !15974)
!15974 = distinct !DILexicalBlock(scope: !15975, file: !3, line: 3396, column: 8)
!15975 = distinct !DILexicalBlock(scope: !15970, file: !3, line: 3395, column: 15)
!15976 = !DILocation(line: 3396, column: 13, scope: !15974)
!15977 = !DILocation(line: 3396, column: 23, scope: !15974)
!15978 = !DILocation(line: 3396, column: 8, scope: !15975)
!15979 = !DILocalVariable(name: "fill", scope: !15980, file: !3, line: 3397, type: !536)
!15980 = distinct !DILexicalBlock(scope: !15974, file: !3, line: 3396, column: 31)
!15981 = !DILocation(line: 3397, column: 14, scope: !15980)
!15982 = !DILocation(line: 3399, column: 11, scope: !15980)
!15983 = !DILocation(line: 3399, column: 9, scope: !15980)
!15984 = !DILocation(line: 3400, column: 5, scope: !15980)
!15985 = !DILocation(line: 3400, column: 12, scope: !15980)
!15986 = !DILocation(line: 3400, column: 16, scope: !15980)
!15987 = !DILocalVariable(name: "num", scope: !15988, file: !3, line: 3401, type: !240)
!15988 = distinct !DILexicalBlock(scope: !15980, file: !3, line: 3400, column: 21)
!15989 = !DILocation(line: 3401, column: 10, scope: !15988)
!15990 = !DILocalVariable(name: "__UNIQUE_ID___x275", scope: !15991, file: !3, line: 3401, type: !240)
!15991 = distinct !DILexicalBlock(scope: !15988, file: !3, line: 3401, column: 16)
!15992 = !DILocation(line: 3401, column: 16, scope: !15991)
!15993 = !DILocalVariable(name: "__UNIQUE_ID___y276", scope: !15991, file: !3, line: 3401, type: !240)
!15994 = !DILocation(line: 3403, column: 31, scope: !15988)
!15995 = !DILocation(line: 3403, column: 37, scope: !15988)
!15996 = !DILocation(line: 3404, column: 10, scope: !15988)
!15997 = !DILocation(line: 3403, column: 12, scope: !15988)
!15998 = !DILocation(line: 3403, column: 10, scope: !15988)
!15999 = !DILocation(line: 3405, column: 10, scope: !16000)
!16000 = distinct !DILexicalBlock(scope: !15988, file: !3, line: 3405, column: 10)
!16001 = !DILocation(line: 3405, column: 10, scope: !15988)
!16002 = !DILocation(line: 3406, column: 14, scope: !16000)
!16003 = !DILocation(line: 3406, column: 7, scope: !16000)
!16004 = !DILocation(line: 3408, column: 13, scope: !15988)
!16005 = !DILocation(line: 3408, column: 10, scope: !15988)
!16006 = distinct !{!16006, !15984, !16007}
!16007 = !DILocation(line: 3409, column: 5, scope: !15980)
!16008 = !DILocation(line: 3410, column: 4, scope: !15980)
!16009 = !DILocation(line: 3411, column: 11, scope: !16010)
!16010 = distinct !DILexicalBlock(scope: !15974, file: !3, line: 3410, column: 11)
!16011 = !DILocation(line: 3411, column: 21, scope: !16010)
!16012 = !DILocation(line: 3411, column: 26, scope: !16010)
!16013 = !DILocation(line: 3411, column: 36, scope: !16010)
!16014 = !DILocation(line: 3411, column: 34, scope: !16010)
!16015 = !DILocation(line: 3411, column: 23, scope: !16010)
!16016 = !DILocation(line: 3411, column: 19, scope: !16010)
!16017 = !DILocation(line: 3411, column: 9, scope: !16010)
!16018 = !DILocation(line: 3412, column: 39, scope: !16010)
!16019 = !DILocation(line: 3412, column: 45, scope: !16010)
!16020 = !DILocation(line: 3412, column: 11, scope: !16010)
!16021 = !DILocation(line: 3412, column: 9, scope: !16010)
!16022 = !DILocation(line: 3415, column: 9, scope: !16023)
!16023 = distinct !DILexicalBlock(scope: !16010, file: !3, line: 3415, column: 9)
!16024 = !DILocation(line: 3415, column: 9, scope: !16010)
!16025 = !DILocation(line: 3416, column: 13, scope: !16023)
!16026 = !DILocation(line: 3416, column: 6, scope: !16023)
!16027 = !DILocation(line: 3418, column: 3, scope: !15975)
!16028 = !DILocation(line: 3419, column: 11, scope: !15970)
!16029 = !DILocalVariable(name: "__UNIQUE_ID___x277", scope: !16030, file: !3, line: 3420, type: !240)
!16030 = distinct !DILexicalBlock(scope: !15971, file: !3, line: 3420, column: 9)
!16031 = !DILocation(line: 3420, column: 9, scope: !16030)
!16032 = !DILocalVariable(name: "__UNIQUE_ID___y278", scope: !16030, file: !3, line: 3420, type: !240)
!16033 = !DILocation(line: 3420, column: 7, scope: !15971)
!16034 = !DILocation(line: 3422, column: 28, scope: !15971)
!16035 = !DILocation(line: 3422, column: 34, scope: !15971)
!16036 = !DILocation(line: 3422, column: 42, scope: !15971)
!16037 = !DILocation(line: 3422, column: 9, scope: !15971)
!16038 = !DILocation(line: 3422, column: 7, scope: !15971)
!16039 = !DILocation(line: 3423, column: 7, scope: !16040)
!16040 = distinct !DILexicalBlock(scope: !15971, file: !3, line: 3423, column: 7)
!16041 = !DILocation(line: 3423, column: 7, scope: !15971)
!16042 = !DILocation(line: 3424, column: 11, scope: !16040)
!16043 = !DILocation(line: 3424, column: 4, scope: !16040)
!16044 = !DILocation(line: 3426, column: 13, scope: !15971)
!16045 = !DILocation(line: 3426, column: 10, scope: !15971)
!16046 = !DILocation(line: 3427, column: 13, scope: !15971)
!16047 = !DILocation(line: 3427, column: 10, scope: !15971)
!16048 = !DILocation(line: 3428, column: 2, scope: !15971)
!16049 = !DILocation(line: 3394, column: 26, scope: !15965)
!16050 = !DILocation(line: 3394, column: 2, scope: !15965)
!16051 = distinct !{!16051, !15968, !16052}
!16052 = !DILocation(line: 3428, column: 2, scope: !15962)
!16053 = !DILocation(line: 3429, column: 6, scope: !16054)
!16054 = distinct !DILexicalBlock(scope: !15881, file: !3, line: 3429, column: 6)
!16055 = !DILocation(line: 3429, column: 13, scope: !16054)
!16056 = !DILocation(line: 3429, column: 6, scope: !15881)
!16057 = !DILocation(line: 3430, column: 28, scope: !16058)
!16058 = distinct !DILexicalBlock(scope: !16054, file: !3, line: 3429, column: 18)
!16059 = !DILocation(line: 3430, column: 34, scope: !16058)
!16060 = !DILocation(line: 3430, column: 42, scope: !16058)
!16061 = !DILocation(line: 3430, column: 9, scope: !16058)
!16062 = !DILocation(line: 3430, column: 7, scope: !16058)
!16063 = !DILocation(line: 3431, column: 7, scope: !16064)
!16064 = distinct !DILexicalBlock(scope: !16058, file: !3, line: 3431, column: 7)
!16065 = !DILocation(line: 3431, column: 7, scope: !16058)
!16066 = !DILocation(line: 3432, column: 11, scope: !16064)
!16067 = !DILocation(line: 3432, column: 4, scope: !16064)
!16068 = !DILocation(line: 3433, column: 2, scope: !16058)
!16069 = !DILocation(line: 3435, column: 31, scope: !15881)
!16070 = !DILocation(line: 3435, column: 9, scope: !15881)
!16071 = !DILocation(line: 3435, column: 2, scope: !15881)
!16072 = !DILocation(line: 3436, column: 1, scope: !15881)
!16073 = distinct !DISubprogram(name: "nand_read_page_swecc", scope: !3, file: !3, line: 2728, type: !4550, scopeLine: 2730, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16074 = !DILocalVariable(name: "chip", arg: 1, scope: !16073, file: !3, line: 2728, type: !4166)
!16075 = !DILocation(line: 2728, column: 51, scope: !16073)
!16076 = !DILocalVariable(name: "buf", arg: 2, scope: !16073, file: !3, line: 2728, type: !2753)
!16077 = !DILocation(line: 2728, column: 66, scope: !16073)
!16078 = !DILocalVariable(name: "oob_required", arg: 3, scope: !16073, file: !3, line: 2729, type: !240)
!16079 = !DILocation(line: 2729, column: 9, scope: !16073)
!16080 = !DILocalVariable(name: "page", arg: 4, scope: !16073, file: !3, line: 2729, type: !240)
!16081 = !DILocation(line: 2729, column: 27, scope: !16073)
!16082 = !DILocalVariable(name: "mtd", scope: !16073, file: !3, line: 2731, type: !2637)
!16083 = !DILocation(line: 2731, column: 19, scope: !16073)
!16084 = !DILocation(line: 2731, column: 37, scope: !16073)
!16085 = !DILocation(line: 2731, column: 25, scope: !16073)
!16086 = !DILocalVariable(name: "i", scope: !16073, file: !3, line: 2732, type: !240)
!16087 = !DILocation(line: 2732, column: 6, scope: !16073)
!16088 = !DILocalVariable(name: "eccsize", scope: !16073, file: !3, line: 2732, type: !240)
!16089 = !DILocation(line: 2732, column: 9, scope: !16073)
!16090 = !DILocation(line: 2732, column: 19, scope: !16073)
!16091 = !DILocation(line: 2732, column: 25, scope: !16073)
!16092 = !DILocation(line: 2732, column: 29, scope: !16073)
!16093 = !DILocalVariable(name: "ret", scope: !16073, file: !3, line: 2732, type: !240)
!16094 = !DILocation(line: 2732, column: 35, scope: !16073)
!16095 = !DILocalVariable(name: "eccbytes", scope: !16073, file: !3, line: 2733, type: !240)
!16096 = !DILocation(line: 2733, column: 6, scope: !16073)
!16097 = !DILocation(line: 2733, column: 17, scope: !16073)
!16098 = !DILocation(line: 2733, column: 23, scope: !16073)
!16099 = !DILocation(line: 2733, column: 27, scope: !16073)
!16100 = !DILocalVariable(name: "eccsteps", scope: !16073, file: !3, line: 2734, type: !240)
!16101 = !DILocation(line: 2734, column: 6, scope: !16073)
!16102 = !DILocation(line: 2734, column: 17, scope: !16073)
!16103 = !DILocation(line: 2734, column: 23, scope: !16073)
!16104 = !DILocation(line: 2734, column: 27, scope: !16073)
!16105 = !DILocalVariable(name: "p", scope: !16073, file: !3, line: 2735, type: !2753)
!16106 = !DILocation(line: 2735, column: 11, scope: !16073)
!16107 = !DILocation(line: 2735, column: 15, scope: !16073)
!16108 = !DILocalVariable(name: "ecc_calc", scope: !16073, file: !3, line: 2736, type: !2753)
!16109 = !DILocation(line: 2736, column: 11, scope: !16073)
!16110 = !DILocation(line: 2736, column: 22, scope: !16073)
!16111 = !DILocation(line: 2736, column: 28, scope: !16073)
!16112 = !DILocation(line: 2736, column: 32, scope: !16073)
!16113 = !DILocalVariable(name: "ecc_code", scope: !16073, file: !3, line: 2737, type: !2753)
!16114 = !DILocation(line: 2737, column: 11, scope: !16073)
!16115 = !DILocation(line: 2737, column: 22, scope: !16073)
!16116 = !DILocation(line: 2737, column: 28, scope: !16073)
!16117 = !DILocation(line: 2737, column: 32, scope: !16073)
!16118 = !DILocalVariable(name: "max_bitflips", scope: !16073, file: !3, line: 2738, type: !7)
!16119 = !DILocation(line: 2738, column: 15, scope: !16073)
!16120 = !DILocation(line: 2740, column: 2, scope: !16073)
!16121 = !DILocation(line: 2740, column: 8, scope: !16073)
!16122 = !DILocation(line: 2740, column: 12, scope: !16073)
!16123 = !DILocation(line: 2740, column: 26, scope: !16073)
!16124 = !DILocation(line: 2740, column: 32, scope: !16073)
!16125 = !DILocation(line: 2740, column: 40, scope: !16073)
!16126 = !DILocation(line: 2742, column: 9, scope: !16127)
!16127 = distinct !DILexicalBlock(scope: !16073, file: !3, line: 2742, column: 2)
!16128 = !DILocation(line: 2742, column: 7, scope: !16127)
!16129 = !DILocation(line: 2742, column: 14, scope: !16130)
!16130 = distinct !DILexicalBlock(scope: !16127, file: !3, line: 2742, column: 2)
!16131 = !DILocation(line: 2742, column: 2, scope: !16127)
!16132 = !DILocation(line: 2743, column: 3, scope: !16130)
!16133 = !DILocation(line: 2743, column: 9, scope: !16130)
!16134 = !DILocation(line: 2743, column: 13, scope: !16130)
!16135 = !DILocation(line: 2743, column: 23, scope: !16130)
!16136 = !DILocation(line: 2743, column: 29, scope: !16130)
!16137 = !DILocation(line: 2743, column: 33, scope: !16130)
!16138 = !DILocation(line: 2743, column: 42, scope: !16130)
!16139 = !DILocation(line: 2742, column: 32, scope: !16130)
!16140 = !DILocation(line: 2742, column: 41, scope: !16130)
!16141 = !DILocation(line: 2742, column: 38, scope: !16130)
!16142 = !DILocation(line: 2742, column: 56, scope: !16130)
!16143 = !DILocation(line: 2742, column: 53, scope: !16130)
!16144 = !DILocation(line: 2742, column: 2, scope: !16130)
!16145 = distinct !{!16145, !16131, !16146}
!16146 = !DILocation(line: 2743, column: 44, scope: !16127)
!16147 = !DILocation(line: 2745, column: 35, scope: !16073)
!16148 = !DILocation(line: 2745, column: 40, scope: !16073)
!16149 = !DILocation(line: 2745, column: 50, scope: !16073)
!16150 = !DILocation(line: 2745, column: 56, scope: !16073)
!16151 = !DILocation(line: 2746, column: 7, scope: !16073)
!16152 = !DILocation(line: 2746, column: 13, scope: !16073)
!16153 = !DILocation(line: 2746, column: 17, scope: !16073)
!16154 = !DILocation(line: 2745, column: 8, scope: !16073)
!16155 = !DILocation(line: 2745, column: 6, scope: !16073)
!16156 = !DILocation(line: 2747, column: 6, scope: !16157)
!16157 = distinct !DILexicalBlock(scope: !16073, file: !3, line: 2747, column: 6)
!16158 = !DILocation(line: 2747, column: 6, scope: !16073)
!16159 = !DILocation(line: 2748, column: 10, scope: !16157)
!16160 = !DILocation(line: 2748, column: 3, scope: !16157)
!16161 = !DILocation(line: 2750, column: 13, scope: !16073)
!16162 = !DILocation(line: 2750, column: 19, scope: !16073)
!16163 = !DILocation(line: 2750, column: 23, scope: !16073)
!16164 = !DILocation(line: 2750, column: 11, scope: !16073)
!16165 = !DILocation(line: 2751, column: 6, scope: !16073)
!16166 = !DILocation(line: 2751, column: 4, scope: !16073)
!16167 = !DILocation(line: 2753, column: 9, scope: !16168)
!16168 = distinct !DILexicalBlock(scope: !16073, file: !3, line: 2753, column: 2)
!16169 = !DILocation(line: 2753, column: 7, scope: !16168)
!16170 = !DILocation(line: 2753, column: 15, scope: !16171)
!16171 = distinct !DILexicalBlock(scope: !16168, file: !3, line: 2753, column: 2)
!16172 = !DILocation(line: 2753, column: 2, scope: !16168)
!16173 = !DILocalVariable(name: "stat", scope: !16174, file: !3, line: 2754, type: !240)
!16174 = distinct !DILexicalBlock(scope: !16171, file: !3, line: 2753, column: 66)
!16175 = !DILocation(line: 2754, column: 7, scope: !16174)
!16176 = !DILocation(line: 2756, column: 10, scope: !16174)
!16177 = !DILocation(line: 2756, column: 16, scope: !16174)
!16178 = !DILocation(line: 2756, column: 20, scope: !16174)
!16179 = !DILocation(line: 2756, column: 28, scope: !16174)
!16180 = !DILocation(line: 2756, column: 34, scope: !16174)
!16181 = !DILocation(line: 2756, column: 38, scope: !16174)
!16182 = !DILocation(line: 2756, column: 47, scope: !16174)
!16183 = !DILocation(line: 2756, column: 52, scope: !16174)
!16184 = !DILocation(line: 2756, column: 61, scope: !16174)
!16185 = !DILocation(line: 2756, column: 8, scope: !16174)
!16186 = !DILocation(line: 2757, column: 7, scope: !16187)
!16187 = distinct !DILexicalBlock(scope: !16174, file: !3, line: 2757, column: 7)
!16188 = !DILocation(line: 2757, column: 12, scope: !16187)
!16189 = !DILocation(line: 2757, column: 7, scope: !16174)
!16190 = !DILocation(line: 2758, column: 4, scope: !16191)
!16191 = distinct !DILexicalBlock(scope: !16187, file: !3, line: 2757, column: 17)
!16192 = !DILocation(line: 2758, column: 9, scope: !16191)
!16193 = !DILocation(line: 2758, column: 19, scope: !16191)
!16194 = !DILocation(line: 2758, column: 25, scope: !16191)
!16195 = !DILocation(line: 2759, column: 3, scope: !16191)
!16196 = !DILocation(line: 2760, column: 32, scope: !16197)
!16197 = distinct !DILexicalBlock(scope: !16187, file: !3, line: 2759, column: 10)
!16198 = !DILocation(line: 2760, column: 4, scope: !16197)
!16199 = !DILocation(line: 2760, column: 9, scope: !16197)
!16200 = !DILocation(line: 2760, column: 19, scope: !16197)
!16201 = !DILocation(line: 2760, column: 29, scope: !16197)
!16202 = !DILocalVariable(name: "__UNIQUE_ID___x254", scope: !16203, file: !3, line: 2761, type: !7)
!16203 = distinct !DILexicalBlock(scope: !16197, file: !3, line: 2761, column: 19)
!16204 = !DILocation(line: 2761, column: 19, scope: !16203)
!16205 = !DILocalVariable(name: "__UNIQUE_ID___y255", scope: !16203, file: !3, line: 2761, type: !7)
!16206 = !DILocation(line: 2761, column: 17, scope: !16197)
!16207 = !DILocation(line: 2763, column: 2, scope: !16174)
!16208 = !DILocation(line: 2753, column: 33, scope: !16171)
!16209 = !DILocation(line: 2753, column: 42, scope: !16171)
!16210 = !DILocation(line: 2753, column: 39, scope: !16171)
!16211 = !DILocation(line: 2753, column: 57, scope: !16171)
!16212 = !DILocation(line: 2753, column: 54, scope: !16171)
!16213 = !DILocation(line: 2753, column: 2, scope: !16171)
!16214 = distinct !{!16214, !16172, !16215}
!16215 = !DILocation(line: 2763, column: 2, scope: !16168)
!16216 = !DILocation(line: 2764, column: 9, scope: !16073)
!16217 = !DILocation(line: 2764, column: 2, scope: !16073)
!16218 = !DILocation(line: 2765, column: 1, scope: !16073)
!16219 = distinct !DISubprogram(name: "nand_write_page_swecc", scope: !3, file: !3, line: 3702, type: !4554, scopeLine: 3704, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16220 = !DILocalVariable(name: "chip", arg: 1, scope: !16219, file: !3, line: 3702, type: !4166)
!16221 = !DILocation(line: 3702, column: 52, scope: !16219)
!16222 = !DILocalVariable(name: "buf", arg: 2, scope: !16219, file: !3, line: 3702, type: !4542)
!16223 = !DILocation(line: 3702, column: 73, scope: !16219)
!16224 = !DILocalVariable(name: "oob_required", arg: 3, scope: !16219, file: !3, line: 3703, type: !240)
!16225 = !DILocation(line: 3703, column: 10, scope: !16219)
!16226 = !DILocalVariable(name: "page", arg: 4, scope: !16219, file: !3, line: 3703, type: !240)
!16227 = !DILocation(line: 3703, column: 28, scope: !16219)
!16228 = !DILocalVariable(name: "mtd", scope: !16219, file: !3, line: 3705, type: !2637)
!16229 = !DILocation(line: 3705, column: 19, scope: !16219)
!16230 = !DILocation(line: 3705, column: 37, scope: !16219)
!16231 = !DILocation(line: 3705, column: 25, scope: !16219)
!16232 = !DILocalVariable(name: "i", scope: !16219, file: !3, line: 3706, type: !240)
!16233 = !DILocation(line: 3706, column: 6, scope: !16219)
!16234 = !DILocalVariable(name: "eccsize", scope: !16219, file: !3, line: 3706, type: !240)
!16235 = !DILocation(line: 3706, column: 9, scope: !16219)
!16236 = !DILocation(line: 3706, column: 19, scope: !16219)
!16237 = !DILocation(line: 3706, column: 25, scope: !16219)
!16238 = !DILocation(line: 3706, column: 29, scope: !16219)
!16239 = !DILocalVariable(name: "ret", scope: !16219, file: !3, line: 3706, type: !240)
!16240 = !DILocation(line: 3706, column: 35, scope: !16219)
!16241 = !DILocalVariable(name: "eccbytes", scope: !16219, file: !3, line: 3707, type: !240)
!16242 = !DILocation(line: 3707, column: 6, scope: !16219)
!16243 = !DILocation(line: 3707, column: 17, scope: !16219)
!16244 = !DILocation(line: 3707, column: 23, scope: !16219)
!16245 = !DILocation(line: 3707, column: 27, scope: !16219)
!16246 = !DILocalVariable(name: "eccsteps", scope: !16219, file: !3, line: 3708, type: !240)
!16247 = !DILocation(line: 3708, column: 6, scope: !16219)
!16248 = !DILocation(line: 3708, column: 17, scope: !16219)
!16249 = !DILocation(line: 3708, column: 23, scope: !16219)
!16250 = !DILocation(line: 3708, column: 27, scope: !16219)
!16251 = !DILocalVariable(name: "ecc_calc", scope: !16219, file: !3, line: 3709, type: !2753)
!16252 = !DILocation(line: 3709, column: 11, scope: !16219)
!16253 = !DILocation(line: 3709, column: 22, scope: !16219)
!16254 = !DILocation(line: 3709, column: 28, scope: !16219)
!16255 = !DILocation(line: 3709, column: 32, scope: !16219)
!16256 = !DILocalVariable(name: "p", scope: !16219, file: !3, line: 3710, type: !4542)
!16257 = !DILocation(line: 3710, column: 17, scope: !16219)
!16258 = !DILocation(line: 3710, column: 21, scope: !16219)
!16259 = !DILocation(line: 3713, column: 9, scope: !16260)
!16260 = distinct !DILexicalBlock(scope: !16219, file: !3, line: 3713, column: 2)
!16261 = !DILocation(line: 3713, column: 7, scope: !16260)
!16262 = !DILocation(line: 3713, column: 14, scope: !16263)
!16263 = distinct !DILexicalBlock(scope: !16260, file: !3, line: 3713, column: 2)
!16264 = !DILocation(line: 3713, column: 2, scope: !16260)
!16265 = !DILocation(line: 3714, column: 3, scope: !16263)
!16266 = !DILocation(line: 3714, column: 9, scope: !16263)
!16267 = !DILocation(line: 3714, column: 13, scope: !16263)
!16268 = !DILocation(line: 3714, column: 23, scope: !16263)
!16269 = !DILocation(line: 3714, column: 29, scope: !16263)
!16270 = !DILocation(line: 3714, column: 33, scope: !16263)
!16271 = !DILocation(line: 3714, column: 42, scope: !16263)
!16272 = !DILocation(line: 3713, column: 32, scope: !16263)
!16273 = !DILocation(line: 3713, column: 41, scope: !16263)
!16274 = !DILocation(line: 3713, column: 38, scope: !16263)
!16275 = !DILocation(line: 3713, column: 56, scope: !16263)
!16276 = !DILocation(line: 3713, column: 53, scope: !16263)
!16277 = !DILocation(line: 3713, column: 2, scope: !16263)
!16278 = distinct !{!16278, !16264, !16279}
!16279 = !DILocation(line: 3714, column: 44, scope: !16260)
!16280 = !DILocation(line: 3716, column: 35, scope: !16219)
!16281 = !DILocation(line: 3716, column: 40, scope: !16219)
!16282 = !DILocation(line: 3716, column: 50, scope: !16219)
!16283 = !DILocation(line: 3716, column: 56, scope: !16219)
!16284 = !DILocation(line: 3717, column: 7, scope: !16219)
!16285 = !DILocation(line: 3717, column: 13, scope: !16219)
!16286 = !DILocation(line: 3717, column: 17, scope: !16219)
!16287 = !DILocation(line: 3716, column: 8, scope: !16219)
!16288 = !DILocation(line: 3716, column: 6, scope: !16219)
!16289 = !DILocation(line: 3718, column: 6, scope: !16290)
!16290 = distinct !DILexicalBlock(scope: !16219, file: !3, line: 3718, column: 6)
!16291 = !DILocation(line: 3718, column: 6, scope: !16219)
!16292 = !DILocation(line: 3719, column: 10, scope: !16290)
!16293 = !DILocation(line: 3719, column: 3, scope: !16290)
!16294 = !DILocation(line: 3721, column: 9, scope: !16219)
!16295 = !DILocation(line: 3721, column: 15, scope: !16219)
!16296 = !DILocation(line: 3721, column: 19, scope: !16219)
!16297 = !DILocation(line: 3721, column: 34, scope: !16219)
!16298 = !DILocation(line: 3721, column: 40, scope: !16219)
!16299 = !DILocation(line: 3721, column: 48, scope: !16219)
!16300 = !DILocation(line: 3721, column: 2, scope: !16219)
!16301 = !DILocation(line: 3722, column: 1, scope: !16219)
!16302 = distinct !DISubprogram(name: "mtd_nand_has_bch", scope: !4054, file: !4054, line: 41, type: !16303, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16303 = !DISubroutineType(types: !16304)
!16304 = !{!240}
!16305 = !DILocation(line: 41, column: 44, scope: !16302)
!16306 = distinct !DISubprogram(name: "nand_bch_calculate_ecc", scope: !4054, file: !4054, line: 44, type: !16307, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16307 = !DISubroutineType(types: !16308)
!16308 = !{!240, !4166, !2736, !2731}
!16309 = !DILocalVariable(name: "chip", arg: 1, scope: !16306, file: !4054, line: 44, type: !4166)
!16310 = !DILocation(line: 44, column: 42, scope: !16306)
!16311 = !DILocalVariable(name: "dat", arg: 2, scope: !16306, file: !4054, line: 44, type: !2736)
!16312 = !DILocation(line: 44, column: 62, scope: !16306)
!16313 = !DILocalVariable(name: "ecc_code", arg: 3, scope: !16306, file: !4054, line: 45, type: !2731)
!16314 = !DILocation(line: 45, column: 18, scope: !16306)
!16315 = !DILocation(line: 47, column: 2, scope: !16306)
!16316 = distinct !DISubprogram(name: "nand_bch_correct_data", scope: !4054, file: !4054, line: 51, type: !16317, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16317 = !DISubroutineType(types: !16318)
!16318 = !{!240, !4166, !16319, !16319, !16319}
!16319 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !406, size: 64)
!16320 = !DILocalVariable(name: "chip", arg: 1, scope: !16316, file: !4054, line: 51, type: !4166)
!16321 = !DILocation(line: 51, column: 41, scope: !16316)
!16322 = !DILocalVariable(name: "buf", arg: 2, scope: !16316, file: !4054, line: 51, type: !16319)
!16323 = !DILocation(line: 51, column: 62, scope: !16316)
!16324 = !DILocalVariable(name: "read_ecc", arg: 3, scope: !16316, file: !4054, line: 52, type: !16319)
!16325 = !DILocation(line: 52, column: 24, scope: !16316)
!16326 = !DILocalVariable(name: "calc_ecc", arg: 4, scope: !16316, file: !4054, line: 52, type: !16319)
!16327 = !DILocation(line: 52, column: 49, scope: !16316)
!16328 = !DILocation(line: 54, column: 2, scope: !16316)
!16329 = distinct !DISubprogram(name: "nand_bch_init", scope: !4054, file: !4054, line: 57, type: !16330, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16330 = !DISubroutineType(types: !16331)
!16331 = !{!4052, !2637}
!16332 = !DILocalVariable(name: "mtd", arg: 1, scope: !16329, file: !4054, line: 57, type: !2637)
!16333 = !DILocation(line: 57, column: 71, scope: !16329)
!16334 = !DILocation(line: 59, column: 2, scope: !16329)
!16335 = distinct !DISubprogram(name: "rawnand_erase", scope: !3, file: !3, line: 5554, type: !4157, scopeLine: 5555, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16336 = !DILocalVariable(name: "nand", arg: 1, scope: !16335, file: !3, line: 5554, type: !4056)
!16337 = !DILocation(line: 5554, column: 46, scope: !16335)
!16338 = !DILocalVariable(name: "pos", arg: 2, scope: !16335, file: !3, line: 5554, type: !4159)
!16339 = !DILocation(line: 5554, column: 75, scope: !16335)
!16340 = !DILocalVariable(name: "chip", scope: !16335, file: !3, line: 5556, type: !4166)
!16341 = !DILocation(line: 5556, column: 20, scope: !16335)
!16342 = !DILocalVariable(name: "__mptr", scope: !16343, file: !3, line: 5556, type: !330)
!16343 = distinct !DILexicalBlock(scope: !16335, file: !3, line: 5556, column: 27)
!16344 = !DILocation(line: 5556, column: 27, scope: !16343)
!16345 = !DILocation(line: 5556, column: 27, scope: !16346)
!16346 = distinct !DILexicalBlock(scope: !16343, file: !3, line: 5556, column: 27)
!16347 = !DILocalVariable(name: "eb", scope: !16335, file: !3, line: 5558, type: !7)
!16348 = !DILocation(line: 5558, column: 15, scope: !16335)
!16349 = !DILocation(line: 5558, column: 39, scope: !16335)
!16350 = !DILocation(line: 5558, column: 45, scope: !16335)
!16351 = !DILocation(line: 5558, column: 20, scope: !16335)
!16352 = !DILocalVariable(name: "ret", scope: !16335, file: !3, line: 5559, type: !240)
!16353 = !DILocation(line: 5559, column: 6, scope: !16335)
!16354 = !DILocation(line: 5561, column: 9, scope: !16335)
!16355 = !DILocation(line: 5561, column: 15, scope: !16335)
!16356 = !DILocation(line: 5561, column: 23, scope: !16335)
!16357 = !DILocation(line: 5561, column: 5, scope: !16335)
!16358 = !DILocation(line: 5563, column: 21, scope: !16335)
!16359 = !DILocation(line: 5563, column: 27, scope: !16335)
!16360 = !DILocation(line: 5563, column: 32, scope: !16335)
!16361 = !DILocation(line: 5563, column: 2, scope: !16335)
!16362 = !DILocation(line: 5564, column: 22, scope: !16335)
!16363 = !DILocation(line: 5564, column: 28, scope: !16335)
!16364 = !DILocation(line: 5564, column: 8, scope: !16335)
!16365 = !DILocation(line: 5564, column: 6, scope: !16335)
!16366 = !DILocation(line: 5565, column: 23, scope: !16335)
!16367 = !DILocation(line: 5565, column: 2, scope: !16335)
!16368 = !DILocation(line: 5567, column: 9, scope: !16335)
!16369 = !DILocation(line: 5567, column: 2, scope: !16335)
!16370 = distinct !DISubprogram(name: "rawnand_markbad", scope: !3, file: !3, line: 5570, type: !4157, scopeLine: 5572, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16371 = !DILocalVariable(name: "nand", arg: 1, scope: !16370, file: !3, line: 5570, type: !4056)
!16372 = !DILocation(line: 5570, column: 48, scope: !16370)
!16373 = !DILocalVariable(name: "pos", arg: 2, scope: !16370, file: !3, line: 5571, type: !4159)
!16374 = !DILocation(line: 5571, column: 30, scope: !16370)
!16375 = !DILocalVariable(name: "chip", scope: !16370, file: !3, line: 5573, type: !4166)
!16376 = !DILocation(line: 5573, column: 20, scope: !16370)
!16377 = !DILocalVariable(name: "__mptr", scope: !16378, file: !3, line: 5573, type: !330)
!16378 = distinct !DILexicalBlock(scope: !16370, file: !3, line: 5573, column: 27)
!16379 = !DILocation(line: 5573, column: 27, scope: !16378)
!16380 = !DILocation(line: 5573, column: 27, scope: !16381)
!16381 = distinct !DILexicalBlock(scope: !16378, file: !3, line: 5573, column: 27)
!16382 = !DILocation(line: 5576, column: 26, scope: !16370)
!16383 = !DILocation(line: 5576, column: 52, scope: !16370)
!16384 = !DILocation(line: 5576, column: 58, scope: !16370)
!16385 = !DILocation(line: 5576, column: 32, scope: !16370)
!16386 = !DILocation(line: 5576, column: 9, scope: !16370)
!16387 = !DILocation(line: 5576, column: 2, scope: !16370)
!16388 = distinct !DISubprogram(name: "rawnand_isbad", scope: !3, file: !3, line: 5579, type: !4164, scopeLine: 5580, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16389 = !DILocalVariable(name: "nand", arg: 1, scope: !16388, file: !3, line: 5579, type: !4056)
!16390 = !DILocation(line: 5579, column: 47, scope: !16388)
!16391 = !DILocalVariable(name: "pos", arg: 2, scope: !16388, file: !3, line: 5579, type: !4159)
!16392 = !DILocation(line: 5579, column: 76, scope: !16388)
!16393 = !DILocalVariable(name: "chip", scope: !16388, file: !3, line: 5581, type: !4166)
!16394 = !DILocation(line: 5581, column: 20, scope: !16388)
!16395 = !DILocalVariable(name: "__mptr", scope: !16396, file: !3, line: 5581, type: !330)
!16396 = distinct !DILexicalBlock(scope: !16388, file: !3, line: 5581, column: 27)
!16397 = !DILocation(line: 5581, column: 27, scope: !16396)
!16398 = !DILocation(line: 5581, column: 27, scope: !16399)
!16399 = distinct !DILexicalBlock(scope: !16396, file: !3, line: 5581, column: 27)
!16400 = !DILocalVariable(name: "ret", scope: !16388, file: !3, line: 5583, type: !240)
!16401 = !DILocation(line: 5583, column: 6, scope: !16388)
!16402 = !DILocation(line: 5585, column: 21, scope: !16388)
!16403 = !DILocation(line: 5585, column: 27, scope: !16388)
!16404 = !DILocation(line: 5585, column: 32, scope: !16388)
!16405 = !DILocation(line: 5585, column: 2, scope: !16388)
!16406 = !DILocation(line: 5586, column: 23, scope: !16388)
!16407 = !DILocation(line: 5586, column: 49, scope: !16388)
!16408 = !DILocation(line: 5586, column: 55, scope: !16388)
!16409 = !DILocation(line: 5586, column: 29, scope: !16388)
!16410 = !DILocation(line: 5586, column: 8, scope: !16388)
!16411 = !DILocation(line: 5586, column: 6, scope: !16388)
!16412 = !DILocation(line: 5587, column: 23, scope: !16388)
!16413 = !DILocation(line: 5587, column: 2, scope: !16388)
!16414 = !DILocation(line: 5589, column: 9, scope: !16388)
!16415 = !DILocation(line: 5589, column: 2, scope: !16388)
!16416 = distinct !DISubprogram(name: "nanddev_pos_to_row", scope: !94, file: !94, line: 708, type: !16417, scopeLine: 710, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16417 = !DISubroutineType(types: !16418)
!16418 = !{!7, !4056, !4159}
!16419 = !DILocalVariable(name: "nand", arg: 1, scope: !16416, file: !94, line: 708, type: !4056)
!16420 = !DILocation(line: 708, column: 67, scope: !16416)
!16421 = !DILocalVariable(name: "pos", arg: 2, scope: !16416, file: !94, line: 709, type: !4159)
!16422 = !DILocation(line: 709, column: 35, scope: !16416)
!16423 = !DILocation(line: 711, column: 10, scope: !16416)
!16424 = !DILocation(line: 711, column: 15, scope: !16416)
!16425 = !DILocation(line: 711, column: 22, scope: !16416)
!16426 = !DILocation(line: 711, column: 28, scope: !16416)
!16427 = !DILocation(line: 711, column: 36, scope: !16416)
!16428 = !DILocation(line: 711, column: 19, scope: !16416)
!16429 = !DILocation(line: 712, column: 10, scope: !16416)
!16430 = !DILocation(line: 712, column: 15, scope: !16416)
!16431 = !DILocation(line: 712, column: 29, scope: !16416)
!16432 = !DILocation(line: 712, column: 35, scope: !16416)
!16433 = !DILocation(line: 712, column: 43, scope: !16416)
!16434 = !DILocation(line: 712, column: 26, scope: !16416)
!16435 = !DILocation(line: 711, column: 52, scope: !16416)
!16436 = !DILocation(line: 713, column: 9, scope: !16416)
!16437 = !DILocation(line: 713, column: 14, scope: !16416)
!16438 = !DILocation(line: 712, column: 66, scope: !16416)
!16439 = !DILocation(line: 711, column: 2, scope: !16416)
!16440 = distinct !DISubprogram(name: "nanddev_pos_to_offs", scope: !94, file: !94, line: 683, type: !16441, scopeLine: 685, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16441 = !DISubroutineType(types: !16442)
!16442 = !{!508, !4056, !4159}
!16443 = !DILocalVariable(name: "nand", arg: 1, scope: !16440, file: !94, line: 683, type: !4056)
!16444 = !DILocation(line: 683, column: 62, scope: !16440)
!16445 = !DILocalVariable(name: "pos", arg: 2, scope: !16440, file: !94, line: 684, type: !4159)
!16446 = !DILocation(line: 684, column: 30, scope: !16440)
!16447 = !DILocalVariable(name: "npages", scope: !16440, file: !94, line: 686, type: !7)
!16448 = !DILocation(line: 686, column: 15, scope: !16440)
!16449 = !DILocation(line: 688, column: 11, scope: !16440)
!16450 = !DILocation(line: 688, column: 16, scope: !16440)
!16451 = !DILocation(line: 689, column: 6, scope: !16440)
!16452 = !DILocation(line: 689, column: 11, scope: !16440)
!16453 = !DILocation(line: 690, column: 7, scope: !16440)
!16454 = !DILocation(line: 690, column: 12, scope: !16440)
!16455 = !DILocation(line: 691, column: 8, scope: !16440)
!16456 = !DILocation(line: 691, column: 13, scope: !16440)
!16457 = !DILocation(line: 691, column: 22, scope: !16440)
!16458 = !DILocation(line: 691, column: 28, scope: !16440)
!16459 = !DILocation(line: 691, column: 35, scope: !16440)
!16460 = !DILocation(line: 691, column: 20, scope: !16440)
!16461 = !DILocation(line: 690, column: 16, scope: !16440)
!16462 = !DILocation(line: 692, column: 6, scope: !16440)
!16463 = !DILocation(line: 692, column: 12, scope: !16440)
!16464 = !DILocation(line: 692, column: 19, scope: !16440)
!16465 = !DILocation(line: 691, column: 53, scope: !16440)
!16466 = !DILocation(line: 689, column: 22, scope: !16440)
!16467 = !DILocation(line: 693, column: 5, scope: !16440)
!16468 = !DILocation(line: 693, column: 11, scope: !16440)
!16469 = !DILocation(line: 693, column: 18, scope: !16440)
!16470 = !DILocation(line: 692, column: 40, scope: !16440)
!16471 = !DILocation(line: 688, column: 21, scope: !16440)
!16472 = !DILocation(line: 688, column: 9, scope: !16440)
!16473 = !DILocation(line: 695, column: 17, scope: !16440)
!16474 = !DILocation(line: 695, column: 9, scope: !16440)
!16475 = !DILocation(line: 695, column: 26, scope: !16440)
!16476 = !DILocation(line: 695, column: 32, scope: !16440)
!16477 = !DILocation(line: 695, column: 39, scope: !16440)
!16478 = !DILocation(line: 695, column: 24, scope: !16440)
!16479 = !DILocation(line: 695, column: 2, scope: !16440)
!16480 = distinct !DISubprogram(name: "mtd_to_nand", scope: !117, file: !117, line: 1147, type: !16481, scopeLine: 1148, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16481 = !DISubroutineType(types: !16482)
!16482 = !{!4166, !2637}
!16483 = !DILocalVariable(name: "mtd", arg: 1, scope: !16480, file: !117, line: 1147, type: !2637)
!16484 = !DILocation(line: 1147, column: 62, scope: !16480)
!16485 = !DILocalVariable(name: "__mptr", scope: !16486, file: !117, line: 1149, type: !330)
!16486 = distinct !DILexicalBlock(scope: !16480, file: !117, line: 1149, column: 9)
!16487 = !DILocation(line: 1149, column: 9, scope: !16486)
!16488 = !DILocation(line: 1149, column: 9, scope: !16489)
!16489 = distinct !DILexicalBlock(scope: !16486, file: !117, line: 1149, column: 9)
!16490 = !DILocation(line: 1149, column: 2, scope: !16480)
!16491 = distinct !DISubprogram(name: "nand_do_write_ops", scope: !3, file: !3, line: 3956, type: !11325, scopeLine: 3958, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16492 = !DILocalVariable(name: "chip", arg: 1, scope: !16491, file: !3, line: 3956, type: !4166)
!16493 = !DILocation(line: 3956, column: 48, scope: !16491)
!16494 = !DILocalVariable(name: "to", arg: 2, scope: !16491, file: !3, line: 3956, type: !508)
!16495 = !DILocation(line: 3956, column: 61, scope: !16491)
!16496 = !DILocalVariable(name: "ops", arg: 3, scope: !16491, file: !3, line: 3957, type: !2743)
!16497 = !DILocation(line: 3957, column: 29, scope: !16491)
!16498 = !DILocalVariable(name: "mtd", scope: !16491, file: !3, line: 3959, type: !2637)
!16499 = !DILocation(line: 3959, column: 19, scope: !16491)
!16500 = !DILocation(line: 3959, column: 37, scope: !16491)
!16501 = !DILocation(line: 3959, column: 25, scope: !16491)
!16502 = !DILocalVariable(name: "chipnr", scope: !16491, file: !3, line: 3960, type: !240)
!16503 = !DILocation(line: 3960, column: 6, scope: !16491)
!16504 = !DILocalVariable(name: "realpage", scope: !16491, file: !3, line: 3960, type: !240)
!16505 = !DILocation(line: 3960, column: 14, scope: !16491)
!16506 = !DILocalVariable(name: "page", scope: !16491, file: !3, line: 3960, type: !240)
!16507 = !DILocation(line: 3960, column: 24, scope: !16491)
!16508 = !DILocalVariable(name: "column", scope: !16491, file: !3, line: 3960, type: !240)
!16509 = !DILocation(line: 3960, column: 30, scope: !16491)
!16510 = !DILocalVariable(name: "writelen", scope: !16491, file: !3, line: 3961, type: !536)
!16511 = !DILocation(line: 3961, column: 11, scope: !16491)
!16512 = !DILocation(line: 3961, column: 22, scope: !16491)
!16513 = !DILocation(line: 3961, column: 27, scope: !16491)
!16514 = !DILocalVariable(name: "oobwritelen", scope: !16491, file: !3, line: 3963, type: !536)
!16515 = !DILocation(line: 3963, column: 11, scope: !16491)
!16516 = !DILocation(line: 3963, column: 25, scope: !16491)
!16517 = !DILocation(line: 3963, column: 30, scope: !16491)
!16518 = !DILocalVariable(name: "oobmaxlen", scope: !16491, file: !3, line: 3964, type: !536)
!16519 = !DILocation(line: 3964, column: 11, scope: !16491)
!16520 = !DILocation(line: 3964, column: 36, scope: !16491)
!16521 = !DILocation(line: 3964, column: 41, scope: !16491)
!16522 = !DILocation(line: 3964, column: 23, scope: !16491)
!16523 = !DILocalVariable(name: "oob", scope: !16491, file: !3, line: 3966, type: !2753)
!16524 = !DILocation(line: 3966, column: 11, scope: !16491)
!16525 = !DILocation(line: 3966, column: 17, scope: !16491)
!16526 = !DILocation(line: 3966, column: 22, scope: !16491)
!16527 = !DILocalVariable(name: "buf", scope: !16491, file: !3, line: 3967, type: !2753)
!16528 = !DILocation(line: 3967, column: 11, scope: !16491)
!16529 = !DILocation(line: 3967, column: 17, scope: !16491)
!16530 = !DILocation(line: 3967, column: 22, scope: !16491)
!16531 = !DILocalVariable(name: "ret", scope: !16491, file: !3, line: 3968, type: !240)
!16532 = !DILocation(line: 3968, column: 6, scope: !16491)
!16533 = !DILocalVariable(name: "oob_required", scope: !16491, file: !3, line: 3969, type: !240)
!16534 = !DILocation(line: 3969, column: 6, scope: !16491)
!16535 = !DILocation(line: 3969, column: 21, scope: !16491)
!16536 = !DILocation(line: 3971, column: 2, scope: !16491)
!16537 = !DILocation(line: 3971, column: 7, scope: !16491)
!16538 = !DILocation(line: 3971, column: 14, scope: !16491)
!16539 = !DILocation(line: 3972, column: 7, scope: !16540)
!16540 = distinct !DILexicalBlock(scope: !16491, file: !3, line: 3972, column: 6)
!16541 = !DILocation(line: 3972, column: 6, scope: !16491)
!16542 = !DILocation(line: 3973, column: 3, scope: !16540)
!16543 = !DILocation(line: 3976, column: 6, scope: !16544)
!16544 = distinct !DILexicalBlock(scope: !16491, file: !3, line: 3976, column: 6)
!16545 = !DILocation(line: 3976, column: 21, scope: !16544)
!16546 = !DILocation(line: 3976, column: 24, scope: !16544)
!16547 = !DILocation(line: 3976, column: 6, scope: !16491)
!16548 = !DILocation(line: 3977, column: 3, scope: !16549)
!16549 = distinct !DILexicalBlock(scope: !16544, file: !3, line: 3976, column: 46)
!16550 = !DILocation(line: 3979, column: 3, scope: !16549)
!16551 = !DILocation(line: 3982, column: 11, scope: !16491)
!16552 = !DILocation(line: 3982, column: 17, scope: !16491)
!16553 = !DILocation(line: 3982, column: 22, scope: !16491)
!16554 = !DILocation(line: 3982, column: 32, scope: !16491)
!16555 = !DILocation(line: 3982, column: 16, scope: !16491)
!16556 = !DILocation(line: 3982, column: 14, scope: !16491)
!16557 = !DILocation(line: 3982, column: 9, scope: !16491)
!16558 = !DILocation(line: 3984, column: 17, scope: !16491)
!16559 = !DILocation(line: 3984, column: 23, scope: !16491)
!16560 = !DILocation(line: 3984, column: 29, scope: !16491)
!16561 = !DILocation(line: 3984, column: 20, scope: !16491)
!16562 = !DILocation(line: 3984, column: 11, scope: !16491)
!16563 = !DILocation(line: 3984, column: 9, scope: !16491)
!16564 = !DILocation(line: 3985, column: 21, scope: !16491)
!16565 = !DILocation(line: 3985, column: 27, scope: !16491)
!16566 = !DILocation(line: 3985, column: 2, scope: !16491)
!16567 = !DILocation(line: 3988, column: 20, scope: !16568)
!16568 = distinct !DILexicalBlock(scope: !16491, file: !3, line: 3988, column: 6)
!16569 = !DILocation(line: 3988, column: 6, scope: !16568)
!16570 = !DILocation(line: 3988, column: 6, scope: !16491)
!16571 = !DILocation(line: 3989, column: 7, scope: !16572)
!16572 = distinct !DILexicalBlock(scope: !16568, file: !3, line: 3988, column: 27)
!16573 = !DILocation(line: 3990, column: 3, scope: !16572)
!16574 = !DILocation(line: 3993, column: 19, scope: !16491)
!16575 = !DILocation(line: 3993, column: 25, scope: !16491)
!16576 = !DILocation(line: 3993, column: 31, scope: !16491)
!16577 = !DILocation(line: 3993, column: 22, scope: !16491)
!16578 = !DILocation(line: 3993, column: 13, scope: !16491)
!16579 = !DILocation(line: 3993, column: 11, scope: !16491)
!16580 = !DILocation(line: 3994, column: 9, scope: !16491)
!16581 = !DILocation(line: 3994, column: 20, scope: !16491)
!16582 = !DILocation(line: 3994, column: 26, scope: !16491)
!16583 = !DILocation(line: 3994, column: 18, scope: !16491)
!16584 = !DILocation(line: 3994, column: 7, scope: !16491)
!16585 = !DILocation(line: 3997, column: 6, scope: !16586)
!16586 = distinct !DILexicalBlock(scope: !16491, file: !3, line: 3997, column: 6)
!16587 = !DILocation(line: 3997, column: 21, scope: !16586)
!16588 = !DILocation(line: 3997, column: 27, scope: !16586)
!16589 = !DILocation(line: 3997, column: 37, scope: !16586)
!16590 = !DILocation(line: 3997, column: 13, scope: !16586)
!16591 = !DILocation(line: 3997, column: 45, scope: !16586)
!16592 = !DILocation(line: 3997, column: 51, scope: !16586)
!16593 = !DILocation(line: 3997, column: 42, scope: !16586)
!16594 = !DILocation(line: 3997, column: 9, scope: !16586)
!16595 = !DILocation(line: 3997, column: 63, scope: !16586)
!16596 = !DILocation(line: 3998, column: 15, scope: !16586)
!16597 = !DILocation(line: 3998, column: 21, scope: !16586)
!16598 = !DILocation(line: 3998, column: 31, scope: !16586)
!16599 = !DILocation(line: 3998, column: 7, scope: !16586)
!16600 = !DILocation(line: 3998, column: 39, scope: !16586)
!16601 = !DILocation(line: 3998, column: 45, scope: !16586)
!16602 = !DILocation(line: 3998, column: 36, scope: !16586)
!16603 = !DILocation(line: 3998, column: 60, scope: !16586)
!16604 = !DILocation(line: 3998, column: 65, scope: !16586)
!16605 = !DILocation(line: 3998, column: 70, scope: !16586)
!16606 = !DILocation(line: 3998, column: 63, scope: !16586)
!16607 = !DILocation(line: 3998, column: 57, scope: !16586)
!16608 = !DILocation(line: 3997, column: 6, scope: !16491)
!16609 = !DILocation(line: 3999, column: 3, scope: !16586)
!16610 = !DILocation(line: 3999, column: 9, scope: !16586)
!16611 = !DILocation(line: 3999, column: 19, scope: !16586)
!16612 = !DILocation(line: 3999, column: 24, scope: !16586)
!16613 = !DILocation(line: 4002, column: 6, scope: !16614)
!16614 = distinct !DILexicalBlock(scope: !16491, file: !3, line: 4002, column: 6)
!16615 = !DILocation(line: 4002, column: 10, scope: !16614)
!16616 = !DILocation(line: 4002, column: 13, scope: !16614)
!16617 = !DILocation(line: 4002, column: 18, scope: !16614)
!16618 = !DILocation(line: 4002, column: 26, scope: !16614)
!16619 = !DILocation(line: 4002, column: 30, scope: !16614)
!16620 = !DILocation(line: 4002, column: 35, scope: !16614)
!16621 = !DILocation(line: 4002, column: 45, scope: !16614)
!16622 = !DILocation(line: 4002, column: 50, scope: !16614)
!16623 = !DILocation(line: 4002, column: 43, scope: !16614)
!16624 = !DILocation(line: 4002, column: 59, scope: !16614)
!16625 = !DILocation(line: 4002, column: 57, scope: !16614)
!16626 = !DILocation(line: 4002, column: 6, scope: !16491)
!16627 = !DILocation(line: 4003, column: 7, scope: !16628)
!16628 = distinct !DILexicalBlock(scope: !16614, file: !3, line: 4002, column: 71)
!16629 = !DILocation(line: 4004, column: 3, scope: !16628)
!16630 = !DILocation(line: 4007, column: 2, scope: !16491)
!16631 = !DILocalVariable(name: "bytes", scope: !16632, file: !3, line: 4008, type: !240)
!16632 = distinct !DILexicalBlock(scope: !16491, file: !3, line: 4007, column: 12)
!16633 = !DILocation(line: 4008, column: 7, scope: !16632)
!16634 = !DILocation(line: 4008, column: 15, scope: !16632)
!16635 = !DILocation(line: 4008, column: 20, scope: !16632)
!16636 = !DILocalVariable(name: "wbuf", scope: !16632, file: !3, line: 4009, type: !2753)
!16637 = !DILocation(line: 4009, column: 12, scope: !16632)
!16638 = !DILocation(line: 4009, column: 19, scope: !16632)
!16639 = !DILocalVariable(name: "use_bounce_buf", scope: !16632, file: !3, line: 4010, type: !240)
!16640 = !DILocation(line: 4010, column: 7, scope: !16632)
!16641 = !DILocalVariable(name: "part_pagewr", scope: !16632, file: !3, line: 4011, type: !240)
!16642 = !DILocation(line: 4011, column: 7, scope: !16632)
!16643 = !DILocation(line: 4011, column: 22, scope: !16632)
!16644 = !DILocation(line: 4011, column: 29, scope: !16632)
!16645 = !DILocation(line: 4011, column: 32, scope: !16632)
!16646 = !DILocation(line: 4011, column: 43, scope: !16632)
!16647 = !DILocation(line: 4011, column: 48, scope: !16632)
!16648 = !DILocation(line: 4011, column: 41, scope: !16632)
!16649 = !DILocation(line: 4013, column: 7, scope: !16650)
!16650 = distinct !DILexicalBlock(scope: !16632, file: !3, line: 4013, column: 7)
!16651 = !DILocation(line: 4013, column: 7, scope: !16632)
!16652 = !DILocation(line: 4014, column: 19, scope: !16650)
!16653 = !DILocation(line: 4014, column: 4, scope: !16650)
!16654 = !DILocation(line: 4015, column: 12, scope: !16655)
!16655 = distinct !DILexicalBlock(scope: !16650, file: !3, line: 4015, column: 12)
!16656 = !DILocation(line: 4015, column: 18, scope: !16655)
!16657 = !DILocation(line: 4015, column: 26, scope: !16655)
!16658 = !DILocation(line: 4015, column: 12, scope: !16650)
!16659 = !DILocation(line: 4016, column: 22, scope: !16655)
!16660 = !DILocation(line: 4016, column: 43, scope: !16655)
!16661 = !DILocation(line: 4017, column: 8, scope: !16655)
!16662 = !DILocation(line: 4017, column: 7, scope: !16655)
!16663 = !DILocation(line: 4016, column: 19, scope: !16655)
!16664 = !DILocation(line: 4016, column: 4, scope: !16655)
!16665 = !DILocation(line: 4020, column: 19, scope: !16655)
!16666 = !DILocation(line: 4026, column: 7, scope: !16667)
!16667 = distinct !DILexicalBlock(scope: !16632, file: !3, line: 4026, column: 7)
!16668 = !DILocation(line: 4026, column: 7, scope: !16632)
!16669 = !DILocation(line: 4027, column: 4, scope: !16670)
!16670 = distinct !DILexicalBlock(scope: !16671, file: !3, line: 4027, column: 4)
!16671 = distinct !DILexicalBlock(scope: !16672, file: !3, line: 4027, column: 4)
!16672 = distinct !DILexicalBlock(scope: !16667, file: !3, line: 4026, column: 23)
!16673 = !DILocation(line: 4027, column: 4, scope: !16671)
!16674 = !DILocation(line: 4029, column: 8, scope: !16675)
!16675 = distinct !DILexicalBlock(scope: !16672, file: !3, line: 4029, column: 8)
!16676 = !DILocation(line: 4029, column: 8, scope: !16672)
!16677 = !DILocalVariable(name: "__UNIQUE_ID___x283", scope: !16678, file: !3, line: 4030, type: !240)
!16678 = distinct !DILexicalBlock(scope: !16675, file: !3, line: 4030, column: 13)
!16679 = !DILocation(line: 4030, column: 13, scope: !16678)
!16680 = !DILocalVariable(name: "__UNIQUE_ID___y284", scope: !16678, file: !3, line: 4030, type: !240)
!16681 = !DILocation(line: 4030, column: 11, scope: !16675)
!16682 = !DILocation(line: 4030, column: 5, scope: !16675)
!16683 = !DILocation(line: 4031, column: 29, scope: !16672)
!16684 = !DILocation(line: 4031, column: 11, scope: !16672)
!16685 = !DILocation(line: 4031, column: 9, scope: !16672)
!16686 = !DILocation(line: 4032, column: 11, scope: !16672)
!16687 = !DILocation(line: 4032, column: 23, scope: !16672)
!16688 = !DILocation(line: 4032, column: 28, scope: !16672)
!16689 = !DILocation(line: 4032, column: 4, scope: !16672)
!16690 = !DILocation(line: 4033, column: 12, scope: !16672)
!16691 = !DILocation(line: 4033, column: 17, scope: !16672)
!16692 = !DILocation(line: 4033, column: 26, scope: !16672)
!16693 = !DILocation(line: 4033, column: 31, scope: !16672)
!16694 = !DILocation(line: 4033, column: 4, scope: !16672)
!16695 = !DILocation(line: 4034, column: 3, scope: !16672)
!16696 = !DILocation(line: 4036, column: 7, scope: !16697)
!16697 = distinct !DILexicalBlock(scope: !16632, file: !3, line: 4036, column: 7)
!16698 = !DILocation(line: 4036, column: 7, scope: !16632)
!16699 = !DILocalVariable(name: "len", scope: !16700, file: !3, line: 4037, type: !303)
!16700 = distinct !DILexicalBlock(scope: !16697, file: !3, line: 4036, column: 22)
!16701 = !DILocation(line: 4037, column: 11, scope: !16700)
!16702 = !DILocalVariable(name: "__UNIQUE_ID___x285", scope: !16703, file: !3, line: 4037, type: !536)
!16703 = distinct !DILexicalBlock(scope: !16700, file: !3, line: 4037, column: 17)
!16704 = !DILocation(line: 4037, column: 17, scope: !16703)
!16705 = !DILocalVariable(name: "__UNIQUE_ID___y286", scope: !16703, file: !3, line: 4037, type: !536)
!16706 = !DILocation(line: 4037, column: 17, scope: !16700)
!16707 = !DILocation(line: 4038, column: 24, scope: !16700)
!16708 = !DILocation(line: 4038, column: 30, scope: !16700)
!16709 = !DILocation(line: 4038, column: 35, scope: !16700)
!16710 = !DILocation(line: 4038, column: 40, scope: !16700)
!16711 = !DILocation(line: 4038, column: 10, scope: !16700)
!16712 = !DILocation(line: 4038, column: 8, scope: !16700)
!16713 = !DILocation(line: 4039, column: 19, scope: !16700)
!16714 = !DILocation(line: 4039, column: 16, scope: !16700)
!16715 = !DILocation(line: 4040, column: 3, scope: !16700)
!16716 = !DILocation(line: 4042, column: 11, scope: !16717)
!16717 = distinct !DILexicalBlock(scope: !16697, file: !3, line: 4040, column: 10)
!16718 = !DILocation(line: 4042, column: 17, scope: !16717)
!16719 = !DILocation(line: 4042, column: 32, scope: !16717)
!16720 = !DILocation(line: 4042, column: 37, scope: !16717)
!16721 = !DILocation(line: 4042, column: 4, scope: !16717)
!16722 = !DILocation(line: 4045, column: 25, scope: !16632)
!16723 = !DILocation(line: 4045, column: 31, scope: !16632)
!16724 = !DILocation(line: 4045, column: 39, scope: !16632)
!16725 = !DILocation(line: 4045, column: 46, scope: !16632)
!16726 = !DILocation(line: 4046, column: 11, scope: !16632)
!16727 = !DILocation(line: 4046, column: 25, scope: !16632)
!16728 = !DILocation(line: 4047, column: 12, scope: !16632)
!16729 = !DILocation(line: 4047, column: 17, scope: !16632)
!16730 = !DILocation(line: 4047, column: 22, scope: !16632)
!16731 = !DILocation(line: 4045, column: 9, scope: !16632)
!16732 = !DILocation(line: 4045, column: 7, scope: !16632)
!16733 = !DILocation(line: 4048, column: 7, scope: !16734)
!16734 = distinct !DILexicalBlock(scope: !16632, file: !3, line: 4048, column: 7)
!16735 = !DILocation(line: 4048, column: 7, scope: !16632)
!16736 = !DILocation(line: 4049, column: 4, scope: !16734)
!16737 = !DILocation(line: 4051, column: 15, scope: !16632)
!16738 = !DILocation(line: 4051, column: 12, scope: !16632)
!16739 = !DILocation(line: 4052, column: 8, scope: !16740)
!16740 = distinct !DILexicalBlock(scope: !16632, file: !3, line: 4052, column: 7)
!16741 = !DILocation(line: 4052, column: 7, scope: !16632)
!16742 = !DILocation(line: 4053, column: 4, scope: !16740)
!16743 = !DILocation(line: 4055, column: 10, scope: !16632)
!16744 = !DILocation(line: 4056, column: 10, scope: !16632)
!16745 = !DILocation(line: 4056, column: 7, scope: !16632)
!16746 = !DILocation(line: 4057, column: 11, scope: !16632)
!16747 = !DILocation(line: 4059, column: 10, scope: !16632)
!16748 = !DILocation(line: 4059, column: 21, scope: !16632)
!16749 = !DILocation(line: 4059, column: 27, scope: !16632)
!16750 = !DILocation(line: 4059, column: 19, scope: !16632)
!16751 = !DILocation(line: 4059, column: 8, scope: !16632)
!16752 = !DILocation(line: 4061, column: 8, scope: !16753)
!16753 = distinct !DILexicalBlock(scope: !16632, file: !3, line: 4061, column: 7)
!16754 = !DILocation(line: 4061, column: 7, scope: !16632)
!16755 = !DILocation(line: 4062, column: 10, scope: !16756)
!16756 = distinct !DILexicalBlock(scope: !16753, file: !3, line: 4061, column: 14)
!16757 = !DILocation(line: 4063, column: 25, scope: !16756)
!16758 = !DILocation(line: 4063, column: 4, scope: !16756)
!16759 = !DILocation(line: 4064, column: 23, scope: !16756)
!16760 = !DILocation(line: 4064, column: 29, scope: !16756)
!16761 = !DILocation(line: 4064, column: 4, scope: !16756)
!16762 = !DILocation(line: 4065, column: 3, scope: !16756)
!16763 = distinct !{!16763, !16630, !16764}
!16764 = !DILocation(line: 4066, column: 2, scope: !16491)
!16765 = !DILocation(line: 4068, column: 16, scope: !16491)
!16766 = !DILocation(line: 4068, column: 21, scope: !16491)
!16767 = !DILocation(line: 4068, column: 27, scope: !16491)
!16768 = !DILocation(line: 4068, column: 25, scope: !16491)
!16769 = !DILocation(line: 4068, column: 2, scope: !16491)
!16770 = !DILocation(line: 4068, column: 7, scope: !16491)
!16771 = !DILocation(line: 4068, column: 14, scope: !16491)
!16772 = !DILocation(line: 4069, column: 6, scope: !16773)
!16773 = distinct !DILexicalBlock(scope: !16491, file: !3, line: 4069, column: 6)
!16774 = !DILocation(line: 4069, column: 6, scope: !16491)
!16775 = !DILocation(line: 4070, column: 20, scope: !16773)
!16776 = !DILocation(line: 4070, column: 25, scope: !16773)
!16777 = !DILocation(line: 4070, column: 3, scope: !16773)
!16778 = !DILocation(line: 4070, column: 8, scope: !16773)
!16779 = !DILocation(line: 4070, column: 18, scope: !16773)
!16780 = !DILabel(scope: !16491, name: "err_out", file: !3, line: 4072)
!16781 = !DILocation(line: 4072, column: 1, scope: !16491)
!16782 = !DILocation(line: 4073, column: 23, scope: !16491)
!16783 = !DILocation(line: 4073, column: 2, scope: !16491)
!16784 = !DILocation(line: 4074, column: 9, scope: !16491)
!16785 = !DILocation(line: 4074, column: 2, scope: !16491)
!16786 = !DILocation(line: 4075, column: 1, scope: !16491)
!16787 = distinct !DISubprogram(name: "nand_write_page", scope: !3, file: !3, line: 3918, type: !16788, scopeLine: 3921, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16788 = !DISubroutineType(types: !16789)
!16789 = !{!240, !4166, !536, !240, !4542, !240, !240, !240}
!16790 = !DILocalVariable(name: "chip", arg: 1, scope: !16787, file: !3, line: 3918, type: !4166)
!16791 = !DILocation(line: 3918, column: 46, scope: !16787)
!16792 = !DILocalVariable(name: "offset", arg: 2, scope: !16787, file: !3, line: 3918, type: !536)
!16793 = !DILocation(line: 3918, column: 61, scope: !16787)
!16794 = !DILocalVariable(name: "data_len", arg: 3, scope: !16787, file: !3, line: 3919, type: !240)
!16795 = !DILocation(line: 3919, column: 11, scope: !16787)
!16796 = !DILocalVariable(name: "buf", arg: 4, scope: !16787, file: !3, line: 3919, type: !4542)
!16797 = !DILocation(line: 3919, column: 36, scope: !16787)
!16798 = !DILocalVariable(name: "oob_required", arg: 5, scope: !16787, file: !3, line: 3919, type: !240)
!16799 = !DILocation(line: 3919, column: 45, scope: !16787)
!16800 = !DILocalVariable(name: "page", arg: 6, scope: !16787, file: !3, line: 3920, type: !240)
!16801 = !DILocation(line: 3920, column: 11, scope: !16787)
!16802 = !DILocalVariable(name: "raw", arg: 7, scope: !16787, file: !3, line: 3920, type: !240)
!16803 = !DILocation(line: 3920, column: 21, scope: !16787)
!16804 = !DILocalVariable(name: "mtd", scope: !16787, file: !3, line: 3922, type: !2637)
!16805 = !DILocation(line: 3922, column: 19, scope: !16787)
!16806 = !DILocation(line: 3922, column: 37, scope: !16787)
!16807 = !DILocation(line: 3922, column: 25, scope: !16787)
!16808 = !DILocalVariable(name: "status", scope: !16787, file: !3, line: 3923, type: !240)
!16809 = !DILocation(line: 3923, column: 6, scope: !16787)
!16810 = !DILocalVariable(name: "subpage", scope: !16787, file: !3, line: 3923, type: !240)
!16811 = !DILocation(line: 3923, column: 14, scope: !16787)
!16812 = !DILocation(line: 3925, column: 8, scope: !16813)
!16813 = distinct !DILexicalBlock(scope: !16787, file: !3, line: 3925, column: 6)
!16814 = !DILocation(line: 3925, column: 14, scope: !16813)
!16815 = !DILocation(line: 3925, column: 22, scope: !16813)
!16816 = !DILocation(line: 3925, column: 47, scope: !16813)
!16817 = !DILocation(line: 3926, column: 3, scope: !16813)
!16818 = !DILocation(line: 3926, column: 9, scope: !16813)
!16819 = !DILocation(line: 3926, column: 13, scope: !16813)
!16820 = !DILocation(line: 3925, column: 6, scope: !16787)
!16821 = !DILocation(line: 3927, column: 13, scope: !16813)
!16822 = !DILocation(line: 3927, column: 20, scope: !16813)
!16823 = !DILocation(line: 3927, column: 24, scope: !16813)
!16824 = !DILocation(line: 3927, column: 35, scope: !16813)
!16825 = !DILocation(line: 3927, column: 40, scope: !16813)
!16826 = !DILocation(line: 3927, column: 33, scope: !16813)
!16827 = !DILocation(line: 3927, column: 11, scope: !16813)
!16828 = !DILocation(line: 3927, column: 3, scope: !16813)
!16829 = !DILocation(line: 3929, column: 11, scope: !16813)
!16830 = !DILocation(line: 3931, column: 6, scope: !16831)
!16831 = distinct !DILexicalBlock(scope: !16787, file: !3, line: 3931, column: 6)
!16832 = !DILocation(line: 3931, column: 6, scope: !16787)
!16833 = !DILocation(line: 3932, column: 12, scope: !16831)
!16834 = !DILocation(line: 3932, column: 18, scope: !16831)
!16835 = !DILocation(line: 3932, column: 22, scope: !16831)
!16836 = !DILocation(line: 3932, column: 37, scope: !16831)
!16837 = !DILocation(line: 3932, column: 43, scope: !16831)
!16838 = !DILocation(line: 3932, column: 48, scope: !16831)
!16839 = !DILocation(line: 3933, column: 9, scope: !16831)
!16840 = !DILocation(line: 3932, column: 10, scope: !16831)
!16841 = !DILocation(line: 3932, column: 3, scope: !16831)
!16842 = !DILocation(line: 3934, column: 11, scope: !16843)
!16843 = distinct !DILexicalBlock(scope: !16831, file: !3, line: 3934, column: 11)
!16844 = !DILocation(line: 3934, column: 11, scope: !16831)
!16845 = !DILocation(line: 3935, column: 12, scope: !16843)
!16846 = !DILocation(line: 3935, column: 18, scope: !16843)
!16847 = !DILocation(line: 3935, column: 22, scope: !16843)
!16848 = !DILocation(line: 3935, column: 36, scope: !16843)
!16849 = !DILocation(line: 3935, column: 42, scope: !16843)
!16850 = !DILocation(line: 3935, column: 50, scope: !16843)
!16851 = !DILocation(line: 3935, column: 60, scope: !16843)
!16852 = !DILocation(line: 3936, column: 8, scope: !16843)
!16853 = !DILocation(line: 3936, column: 22, scope: !16843)
!16854 = !DILocation(line: 3935, column: 10, scope: !16843)
!16855 = !DILocation(line: 3935, column: 3, scope: !16843)
!16856 = !DILocation(line: 3938, column: 12, scope: !16843)
!16857 = !DILocation(line: 3938, column: 18, scope: !16843)
!16858 = !DILocation(line: 3938, column: 22, scope: !16843)
!16859 = !DILocation(line: 3938, column: 33, scope: !16843)
!16860 = !DILocation(line: 3938, column: 39, scope: !16843)
!16861 = !DILocation(line: 3938, column: 44, scope: !16843)
!16862 = !DILocation(line: 3938, column: 58, scope: !16843)
!16863 = !DILocation(line: 3938, column: 10, scope: !16843)
!16864 = !DILocation(line: 3940, column: 6, scope: !16865)
!16865 = distinct !DILexicalBlock(scope: !16787, file: !3, line: 3940, column: 6)
!16866 = !DILocation(line: 3940, column: 13, scope: !16865)
!16867 = !DILocation(line: 3940, column: 6, scope: !16787)
!16868 = !DILocation(line: 3941, column: 10, scope: !16865)
!16869 = !DILocation(line: 3941, column: 3, scope: !16865)
!16870 = !DILocation(line: 3943, column: 2, scope: !16787)
!16871 = !DILocation(line: 3944, column: 1, scope: !16787)
!16872 = distinct !DISubprogram(name: "nand_do_read_oob", scope: !3, file: !3, line: 3446, type: !11325, scopeLine: 3448, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!16873 = !DILocalVariable(name: "chip", arg: 1, scope: !16872, file: !3, line: 3446, type: !4166)
!16874 = !DILocation(line: 3446, column: 47, scope: !16872)
!16875 = !DILocalVariable(name: "from", arg: 2, scope: !16872, file: !3, line: 3446, type: !508)
!16876 = !DILocation(line: 3446, column: 60, scope: !16872)
!16877 = !DILocalVariable(name: "ops", arg: 3, scope: !16872, file: !3, line: 3447, type: !2743)
!16878 = !DILocation(line: 3447, column: 28, scope: !16872)
!16879 = !DILocalVariable(name: "mtd", scope: !16872, file: !3, line: 3449, type: !2637)
!16880 = !DILocation(line: 3449, column: 19, scope: !16872)
!16881 = !DILocation(line: 3449, column: 37, scope: !16872)
!16882 = !DILocation(line: 3449, column: 25, scope: !16872)
!16883 = !DILocalVariable(name: "max_bitflips", scope: !16872, file: !3, line: 3450, type: !7)
!16884 = !DILocation(line: 3450, column: 15, scope: !16872)
!16885 = !DILocalVariable(name: "page", scope: !16872, file: !3, line: 3451, type: !240)
!16886 = !DILocation(line: 3451, column: 6, scope: !16872)
!16887 = !DILocalVariable(name: "realpage", scope: !16872, file: !3, line: 3451, type: !240)
!16888 = !DILocation(line: 3451, column: 12, scope: !16872)
!16889 = !DILocalVariable(name: "chipnr", scope: !16872, file: !3, line: 3451, type: !240)
!16890 = !DILocation(line: 3451, column: 22, scope: !16872)
!16891 = !DILocalVariable(name: "stats", scope: !16872, file: !3, line: 3452, type: !2815)
!16892 = !DILocation(line: 3452, column: 23, scope: !16872)
!16893 = !DILocalVariable(name: "readlen", scope: !16872, file: !3, line: 3453, type: !240)
!16894 = !DILocation(line: 3453, column: 6, scope: !16872)
!16895 = !DILocation(line: 3453, column: 16, scope: !16872)
!16896 = !DILocation(line: 3453, column: 21, scope: !16872)
!16897 = !DILocalVariable(name: "len", scope: !16872, file: !3, line: 3454, type: !240)
!16898 = !DILocation(line: 3454, column: 6, scope: !16872)
!16899 = !DILocalVariable(name: "buf", scope: !16872, file: !3, line: 3455, type: !2753)
!16900 = !DILocation(line: 3455, column: 11, scope: !16872)
!16901 = !DILocation(line: 3455, column: 17, scope: !16872)
!16902 = !DILocation(line: 3455, column: 22, scope: !16872)
!16903 = !DILocalVariable(name: "ret", scope: !16872, file: !3, line: 3456, type: !240)
!16904 = !DILocation(line: 3456, column: 6, scope: !16872)
!16905 = !DILocation(line: 3458, column: 2, scope: !16906)
!16906 = distinct !DILexicalBlock(scope: !16907, file: !3, line: 3458, column: 2)
!16907 = distinct !DILexicalBlock(scope: !16872, file: !3, line: 3458, column: 2)
!16908 = !DILocation(line: 3458, column: 2, scope: !16907)
!16909 = !DILocation(line: 3461, column: 10, scope: !16872)
!16910 = !DILocation(line: 3461, column: 15, scope: !16872)
!16911 = !DILocation(line: 3463, column: 21, scope: !16872)
!16912 = !DILocation(line: 3463, column: 26, scope: !16872)
!16913 = !DILocation(line: 3463, column: 8, scope: !16872)
!16914 = !DILocation(line: 3463, column: 6, scope: !16872)
!16915 = !DILocation(line: 3465, column: 17, scope: !16872)
!16916 = !DILocation(line: 3465, column: 25, scope: !16872)
!16917 = !DILocation(line: 3465, column: 31, scope: !16872)
!16918 = !DILocation(line: 3465, column: 22, scope: !16872)
!16919 = !DILocation(line: 3465, column: 11, scope: !16872)
!16920 = !DILocation(line: 3465, column: 9, scope: !16872)
!16921 = !DILocation(line: 3466, column: 21, scope: !16872)
!16922 = !DILocation(line: 3466, column: 27, scope: !16872)
!16923 = !DILocation(line: 3466, column: 2, scope: !16872)
!16924 = !DILocation(line: 3469, column: 19, scope: !16872)
!16925 = !DILocation(line: 3469, column: 27, scope: !16872)
!16926 = !DILocation(line: 3469, column: 33, scope: !16872)
!16927 = !DILocation(line: 3469, column: 24, scope: !16872)
!16928 = !DILocation(line: 3469, column: 13, scope: !16872)
!16929 = !DILocation(line: 3469, column: 11, scope: !16872)
!16930 = !DILocation(line: 3470, column: 9, scope: !16872)
!16931 = !DILocation(line: 3470, column: 20, scope: !16872)
!16932 = !DILocation(line: 3470, column: 26, scope: !16872)
!16933 = !DILocation(line: 3470, column: 18, scope: !16872)
!16934 = !DILocation(line: 3470, column: 7, scope: !16872)
!16935 = !DILocation(line: 3472, column: 2, scope: !16872)
!16936 = !DILocation(line: 3473, column: 7, scope: !16937)
!16937 = distinct !DILexicalBlock(scope: !16938, file: !3, line: 3473, column: 7)
!16938 = distinct !DILexicalBlock(scope: !16872, file: !3, line: 3472, column: 12)
!16939 = !DILocation(line: 3473, column: 12, scope: !16937)
!16940 = !DILocation(line: 3473, column: 17, scope: !16937)
!16941 = !DILocation(line: 3473, column: 7, scope: !16938)
!16942 = !DILocation(line: 3474, column: 10, scope: !16937)
!16943 = !DILocation(line: 3474, column: 16, scope: !16937)
!16944 = !DILocation(line: 3474, column: 20, scope: !16937)
!16945 = !DILocation(line: 3474, column: 33, scope: !16937)
!16946 = !DILocation(line: 3474, column: 39, scope: !16937)
!16947 = !DILocation(line: 3474, column: 8, scope: !16937)
!16948 = !DILocation(line: 3474, column: 4, scope: !16937)
!16949 = !DILocation(line: 3476, column: 10, scope: !16937)
!16950 = !DILocation(line: 3476, column: 16, scope: !16937)
!16951 = !DILocation(line: 3476, column: 20, scope: !16937)
!16952 = !DILocation(line: 3476, column: 29, scope: !16937)
!16953 = !DILocation(line: 3476, column: 35, scope: !16937)
!16954 = !DILocation(line: 3476, column: 8, scope: !16937)
!16955 = !DILocation(line: 3478, column: 7, scope: !16956)
!16956 = distinct !DILexicalBlock(scope: !16938, file: !3, line: 3478, column: 7)
!16957 = !DILocation(line: 3478, column: 11, scope: !16956)
!16958 = !DILocation(line: 3478, column: 7, scope: !16938)
!16959 = !DILocation(line: 3479, column: 4, scope: !16956)
!16960 = !DILocalVariable(name: "__UNIQUE_ID___x279", scope: !16961, file: !3, line: 3481, type: !240)
!16961 = distinct !DILexicalBlock(scope: !16938, file: !3, line: 3481, column: 9)
!16962 = !DILocation(line: 3481, column: 9, scope: !16961)
!16963 = !DILocalVariable(name: "__UNIQUE_ID___y280", scope: !16961, file: !3, line: 3481, type: !240)
!16964 = !DILocation(line: 3481, column: 7, scope: !16938)
!16965 = !DILocation(line: 3482, column: 27, scope: !16938)
!16966 = !DILocation(line: 3482, column: 33, scope: !16938)
!16967 = !DILocation(line: 3482, column: 38, scope: !16938)
!16968 = !DILocation(line: 3482, column: 43, scope: !16938)
!16969 = !DILocation(line: 3482, column: 9, scope: !16938)
!16970 = !DILocation(line: 3482, column: 7, scope: !16938)
!16971 = !DILocation(line: 3484, column: 21, scope: !16938)
!16972 = !DILocation(line: 3484, column: 3, scope: !16938)
!16973 = !DILocalVariable(name: "__UNIQUE_ID___x281", scope: !16974, file: !3, line: 3486, type: !7)
!16974 = distinct !DILexicalBlock(scope: !16938, file: !3, line: 3486, column: 18)
!16975 = !DILocation(line: 3486, column: 18, scope: !16974)
!16976 = !DILocalVariable(name: "__UNIQUE_ID___y282", scope: !16974, file: !3, line: 3486, type: !7)
!16977 = !DILocation(line: 3486, column: 16, scope: !16938)
!16978 = !DILocation(line: 3488, column: 14, scope: !16938)
!16979 = !DILocation(line: 3488, column: 11, scope: !16938)
!16980 = !DILocation(line: 3489, column: 8, scope: !16981)
!16981 = distinct !DILexicalBlock(scope: !16938, file: !3, line: 3489, column: 7)
!16982 = !DILocation(line: 3489, column: 7, scope: !16938)
!16983 = !DILocation(line: 3490, column: 4, scope: !16981)
!16984 = !DILocation(line: 3493, column: 11, scope: !16938)
!16985 = !DILocation(line: 3495, column: 10, scope: !16938)
!16986 = !DILocation(line: 3495, column: 21, scope: !16938)
!16987 = !DILocation(line: 3495, column: 27, scope: !16938)
!16988 = !DILocation(line: 3495, column: 19, scope: !16938)
!16989 = !DILocation(line: 3495, column: 8, scope: !16938)
!16990 = !DILocation(line: 3497, column: 8, scope: !16991)
!16991 = distinct !DILexicalBlock(scope: !16938, file: !3, line: 3497, column: 7)
!16992 = !DILocation(line: 3497, column: 7, scope: !16938)
!16993 = !DILocation(line: 3498, column: 10, scope: !16994)
!16994 = distinct !DILexicalBlock(scope: !16991, file: !3, line: 3497, column: 14)
!16995 = !DILocation(line: 3499, column: 25, scope: !16994)
!16996 = !DILocation(line: 3499, column: 4, scope: !16994)
!16997 = !DILocation(line: 3500, column: 23, scope: !16994)
!16998 = !DILocation(line: 3500, column: 29, scope: !16994)
!16999 = !DILocation(line: 3500, column: 4, scope: !16994)
!17000 = !DILocation(line: 3501, column: 3, scope: !16994)
!17001 = distinct !{!17001, !16935, !17002}
!17002 = !DILocation(line: 3502, column: 2, scope: !16872)
!17003 = !DILocation(line: 3503, column: 23, scope: !16872)
!17004 = !DILocation(line: 3503, column: 2, scope: !16872)
!17005 = !DILocation(line: 3505, column: 19, scope: !16872)
!17006 = !DILocation(line: 3505, column: 24, scope: !16872)
!17007 = !DILocation(line: 3505, column: 33, scope: !16872)
!17008 = !DILocation(line: 3505, column: 31, scope: !16872)
!17009 = !DILocation(line: 3505, column: 2, scope: !16872)
!17010 = !DILocation(line: 3505, column: 7, scope: !16872)
!17011 = !DILocation(line: 3505, column: 17, scope: !16872)
!17012 = !DILocation(line: 3507, column: 6, scope: !17013)
!17013 = distinct !DILexicalBlock(scope: !16872, file: !3, line: 3507, column: 6)
!17014 = !DILocation(line: 3507, column: 10, scope: !17013)
!17015 = !DILocation(line: 3507, column: 6, scope: !16872)
!17016 = !DILocation(line: 3508, column: 10, scope: !17013)
!17017 = !DILocation(line: 3508, column: 3, scope: !17013)
!17018 = !DILocation(line: 3510, column: 6, scope: !17019)
!17019 = distinct !DILexicalBlock(scope: !16872, file: !3, line: 3510, column: 6)
!17020 = !DILocation(line: 3510, column: 11, scope: !17019)
!17021 = !DILocation(line: 3510, column: 21, scope: !17019)
!17022 = !DILocation(line: 3510, column: 36, scope: !17019)
!17023 = !DILocation(line: 3510, column: 28, scope: !17019)
!17024 = !DILocation(line: 3510, column: 6, scope: !16872)
!17025 = !DILocation(line: 3511, column: 3, scope: !17019)
!17026 = !DILocation(line: 3513, column: 9, scope: !16872)
!17027 = !DILocation(line: 3513, column: 2, scope: !16872)
!17028 = !DILocation(line: 3514, column: 1, scope: !16872)
!17029 = distinct !DISubprogram(name: "nand_do_read_ops", scope: !3, file: !3, line: 3114, type: !11325, scopeLine: 3116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!17030 = !DILocalVariable(name: "chip", arg: 1, scope: !17029, file: !3, line: 3114, type: !4166)
!17031 = !DILocation(line: 3114, column: 47, scope: !17029)
!17032 = !DILocalVariable(name: "from", arg: 2, scope: !17029, file: !3, line: 3114, type: !508)
!17033 = !DILocation(line: 3114, column: 60, scope: !17029)
!17034 = !DILocalVariable(name: "ops", arg: 3, scope: !17029, file: !3, line: 3115, type: !2743)
!17035 = !DILocation(line: 3115, column: 28, scope: !17029)
!17036 = !DILocalVariable(name: "chipnr", scope: !17029, file: !3, line: 3117, type: !240)
!17037 = !DILocation(line: 3117, column: 6, scope: !17029)
!17038 = !DILocalVariable(name: "page", scope: !17029, file: !3, line: 3117, type: !240)
!17039 = !DILocation(line: 3117, column: 14, scope: !17029)
!17040 = !DILocalVariable(name: "realpage", scope: !17029, file: !3, line: 3117, type: !240)
!17041 = !DILocation(line: 3117, column: 20, scope: !17029)
!17042 = !DILocalVariable(name: "col", scope: !17029, file: !3, line: 3117, type: !240)
!17043 = !DILocation(line: 3117, column: 30, scope: !17029)
!17044 = !DILocalVariable(name: "bytes", scope: !17029, file: !3, line: 3117, type: !240)
!17045 = !DILocation(line: 3117, column: 35, scope: !17029)
!17046 = !DILocalVariable(name: "aligned", scope: !17029, file: !3, line: 3117, type: !240)
!17047 = !DILocation(line: 3117, column: 42, scope: !17029)
!17048 = !DILocalVariable(name: "oob_required", scope: !17029, file: !3, line: 3117, type: !240)
!17049 = !DILocation(line: 3117, column: 51, scope: !17029)
!17050 = !DILocalVariable(name: "mtd", scope: !17029, file: !3, line: 3118, type: !2637)
!17051 = !DILocation(line: 3118, column: 19, scope: !17029)
!17052 = !DILocation(line: 3118, column: 37, scope: !17029)
!17053 = !DILocation(line: 3118, column: 25, scope: !17029)
!17054 = !DILocalVariable(name: "ret", scope: !17029, file: !3, line: 3119, type: !240)
!17055 = !DILocation(line: 3119, column: 6, scope: !17029)
!17056 = !DILocalVariable(name: "readlen", scope: !17029, file: !3, line: 3120, type: !536)
!17057 = !DILocation(line: 3120, column: 11, scope: !17029)
!17058 = !DILocation(line: 3120, column: 21, scope: !17029)
!17059 = !DILocation(line: 3120, column: 26, scope: !17029)
!17060 = !DILocalVariable(name: "oobreadlen", scope: !17029, file: !3, line: 3121, type: !536)
!17061 = !DILocation(line: 3121, column: 11, scope: !17029)
!17062 = !DILocation(line: 3121, column: 24, scope: !17029)
!17063 = !DILocation(line: 3121, column: 29, scope: !17029)
!17064 = !DILocalVariable(name: "max_oobsize", scope: !17029, file: !3, line: 3122, type: !536)
!17065 = !DILocation(line: 3122, column: 11, scope: !17029)
!17066 = !DILocation(line: 3122, column: 38, scope: !17029)
!17067 = !DILocation(line: 3122, column: 43, scope: !17029)
!17068 = !DILocation(line: 3122, column: 25, scope: !17029)
!17069 = !DILocalVariable(name: "bufpoi", scope: !17029, file: !3, line: 3124, type: !2753)
!17070 = !DILocation(line: 3124, column: 11, scope: !17029)
!17071 = !DILocalVariable(name: "oob", scope: !17029, file: !3, line: 3124, type: !2753)
!17072 = !DILocation(line: 3124, column: 20, scope: !17029)
!17073 = !DILocalVariable(name: "buf", scope: !17029, file: !3, line: 3124, type: !2753)
!17074 = !DILocation(line: 3124, column: 26, scope: !17029)
!17075 = !DILocalVariable(name: "use_bounce_buf", scope: !17029, file: !3, line: 3125, type: !240)
!17076 = !DILocation(line: 3125, column: 6, scope: !17029)
!17077 = !DILocalVariable(name: "max_bitflips", scope: !17029, file: !3, line: 3126, type: !7)
!17078 = !DILocation(line: 3126, column: 15, scope: !17029)
!17079 = !DILocalVariable(name: "retry_mode", scope: !17029, file: !3, line: 3127, type: !240)
!17080 = !DILocation(line: 3127, column: 6, scope: !17029)
!17081 = !DILocalVariable(name: "ecc_fail", scope: !17029, file: !3, line: 3128, type: !180)
!17082 = !DILocation(line: 3128, column: 7, scope: !17029)
!17083 = !DILocation(line: 3130, column: 17, scope: !17029)
!17084 = !DILocation(line: 3130, column: 25, scope: !17029)
!17085 = !DILocation(line: 3130, column: 31, scope: !17029)
!17086 = !DILocation(line: 3130, column: 22, scope: !17029)
!17087 = !DILocation(line: 3130, column: 11, scope: !17029)
!17088 = !DILocation(line: 3130, column: 9, scope: !17029)
!17089 = !DILocation(line: 3131, column: 21, scope: !17029)
!17090 = !DILocation(line: 3131, column: 27, scope: !17029)
!17091 = !DILocation(line: 3131, column: 2, scope: !17029)
!17092 = !DILocation(line: 3133, column: 19, scope: !17029)
!17093 = !DILocation(line: 3133, column: 27, scope: !17029)
!17094 = !DILocation(line: 3133, column: 33, scope: !17029)
!17095 = !DILocation(line: 3133, column: 24, scope: !17029)
!17096 = !DILocation(line: 3133, column: 13, scope: !17029)
!17097 = !DILocation(line: 3133, column: 11, scope: !17029)
!17098 = !DILocation(line: 3134, column: 9, scope: !17029)
!17099 = !DILocation(line: 3134, column: 20, scope: !17029)
!17100 = !DILocation(line: 3134, column: 26, scope: !17029)
!17101 = !DILocation(line: 3134, column: 18, scope: !17029)
!17102 = !DILocation(line: 3134, column: 7, scope: !17029)
!17103 = !DILocation(line: 3136, column: 14, scope: !17029)
!17104 = !DILocation(line: 3136, column: 22, scope: !17029)
!17105 = !DILocation(line: 3136, column: 27, scope: !17029)
!17106 = !DILocation(line: 3136, column: 37, scope: !17029)
!17107 = !DILocation(line: 3136, column: 21, scope: !17029)
!17108 = !DILocation(line: 3136, column: 19, scope: !17029)
!17109 = !DILocation(line: 3136, column: 8, scope: !17029)
!17110 = !DILocation(line: 3136, column: 6, scope: !17029)
!17111 = !DILocation(line: 3138, column: 8, scope: !17029)
!17112 = !DILocation(line: 3138, column: 13, scope: !17029)
!17113 = !DILocation(line: 3138, column: 6, scope: !17029)
!17114 = !DILocation(line: 3139, column: 8, scope: !17029)
!17115 = !DILocation(line: 3139, column: 13, scope: !17029)
!17116 = !DILocation(line: 3139, column: 6, scope: !17029)
!17117 = !DILocation(line: 3140, column: 17, scope: !17029)
!17118 = !DILocation(line: 3140, column: 15, scope: !17029)
!17119 = !DILocation(line: 3142, column: 2, scope: !17029)
!17120 = !DILocalVariable(name: "ecc_stats", scope: !17121, file: !3, line: 3143, type: !2815)
!17121 = distinct !DILexicalBlock(scope: !17029, file: !3, line: 3142, column: 12)
!17122 = !DILocation(line: 3143, column: 24, scope: !17121)
!17123 = !DILocation(line: 3143, column: 36, scope: !17121)
!17124 = !DILocation(line: 3143, column: 41, scope: !17121)
!17125 = !DILocalVariable(name: "__UNIQUE_ID___x265", scope: !17126, file: !3, line: 3145, type: !7)
!17126 = distinct !DILexicalBlock(scope: !17121, file: !3, line: 3145, column: 11)
!17127 = !DILocation(line: 3145, column: 11, scope: !17126)
!17128 = !DILocalVariable(name: "__UNIQUE_ID___y266", scope: !17126, file: !3, line: 3145, type: !536)
!17129 = !DILocation(line: 3145, column: 9, scope: !17121)
!17130 = !DILocation(line: 3146, column: 14, scope: !17121)
!17131 = !DILocation(line: 3146, column: 23, scope: !17121)
!17132 = !DILocation(line: 3146, column: 28, scope: !17121)
!17133 = !DILocation(line: 3146, column: 20, scope: !17121)
!17134 = !DILocation(line: 3146, column: 11, scope: !17121)
!17135 = !DILocation(line: 3148, column: 8, scope: !17136)
!17136 = distinct !DILexicalBlock(scope: !17121, file: !3, line: 3148, column: 7)
!17137 = !DILocation(line: 3148, column: 7, scope: !17121)
!17138 = !DILocation(line: 3149, column: 19, scope: !17136)
!17139 = !DILocation(line: 3149, column: 4, scope: !17136)
!17140 = !DILocation(line: 3150, column: 12, scope: !17141)
!17141 = distinct !DILexicalBlock(scope: !17136, file: !3, line: 3150, column: 12)
!17142 = !DILocation(line: 3150, column: 18, scope: !17141)
!17143 = !DILocation(line: 3150, column: 26, scope: !17141)
!17144 = !DILocation(line: 3150, column: 12, scope: !17136)
!17145 = !DILocation(line: 3151, column: 22, scope: !17141)
!17146 = !DILocation(line: 3151, column: 43, scope: !17141)
!17147 = !DILocation(line: 3152, column: 8, scope: !17141)
!17148 = !DILocation(line: 3152, column: 7, scope: !17141)
!17149 = !DILocation(line: 3151, column: 19, scope: !17141)
!17150 = !DILocation(line: 3151, column: 4, scope: !17141)
!17151 = !DILocation(line: 3155, column: 19, scope: !17141)
!17152 = !DILocation(line: 3158, column: 7, scope: !17153)
!17153 = distinct !DILexicalBlock(scope: !17121, file: !3, line: 3158, column: 7)
!17154 = !DILocation(line: 3158, column: 19, scope: !17153)
!17155 = !DILocation(line: 3158, column: 25, scope: !17153)
!17156 = !DILocation(line: 3158, column: 35, scope: !17153)
!17157 = !DILocation(line: 3158, column: 16, scope: !17153)
!17158 = !DILocation(line: 3158, column: 40, scope: !17153)
!17159 = !DILocation(line: 3158, column: 43, scope: !17153)
!17160 = !DILocation(line: 3158, column: 7, scope: !17121)
!17161 = !DILocation(line: 3159, column: 13, scope: !17162)
!17162 = distinct !DILexicalBlock(scope: !17153, file: !3, line: 3158, column: 48)
!17163 = !DILocation(line: 3159, column: 30, scope: !17162)
!17164 = !DILocation(line: 3159, column: 36, scope: !17162)
!17165 = !DILocation(line: 3159, column: 47, scope: !17162)
!17166 = !DILocation(line: 3159, column: 11, scope: !17162)
!17167 = !DILocation(line: 3161, column: 8, scope: !17168)
!17168 = distinct !DILexicalBlock(scope: !17162, file: !3, line: 3161, column: 8)
!17169 = !DILocation(line: 3161, column: 23, scope: !17168)
!17170 = !DILocation(line: 3161, column: 26, scope: !17168)
!17171 = !DILocation(line: 3161, column: 8, scope: !17162)
!17172 = !DILocation(line: 3162, column: 5, scope: !17173)
!17173 = distinct !DILexicalBlock(scope: !17174, file: !3, line: 3162, column: 5)
!17174 = distinct !DILexicalBlock(scope: !17168, file: !3, line: 3162, column: 5)
!17175 = !DILocation(line: 3162, column: 5, scope: !17174)
!17176 = !DILocation(line: 3162, column: 5, scope: !17168)
!17177 = !DILabel(scope: !17162, name: "read_retry", file: !3, line: 3165)
!17178 = !DILocation(line: 3165, column: 1, scope: !17162)
!17179 = !DILocation(line: 3170, column: 8, scope: !17180)
!17180 = distinct !DILexicalBlock(scope: !17162, file: !3, line: 3170, column: 8)
!17181 = !DILocation(line: 3170, column: 8, scope: !17162)
!17182 = !DILocation(line: 3171, column: 11, scope: !17180)
!17183 = !DILocation(line: 3171, column: 17, scope: !17180)
!17184 = !DILocation(line: 3171, column: 21, scope: !17180)
!17185 = !DILocation(line: 3171, column: 35, scope: !17180)
!17186 = !DILocation(line: 3171, column: 41, scope: !17180)
!17187 = !DILocation(line: 3172, column: 14, scope: !17180)
!17188 = !DILocation(line: 3173, column: 14, scope: !17180)
!17189 = !DILocation(line: 3171, column: 9, scope: !17180)
!17190 = !DILocation(line: 3171, column: 5, scope: !17180)
!17191 = !DILocation(line: 3174, column: 14, scope: !17192)
!17192 = distinct !DILexicalBlock(scope: !17180, file: !3, line: 3174, column: 13)
!17193 = !DILocation(line: 3174, column: 22, scope: !17192)
!17194 = !DILocation(line: 3174, column: 25, scope: !17192)
!17195 = !DILocation(line: 3174, column: 53, scope: !17192)
!17196 = !DILocation(line: 3175, column: 7, scope: !17192)
!17197 = !DILocation(line: 3174, column: 13, scope: !17180)
!17198 = !DILocation(line: 3176, column: 11, scope: !17192)
!17199 = !DILocation(line: 3176, column: 17, scope: !17192)
!17200 = !DILocation(line: 3176, column: 21, scope: !17192)
!17201 = !DILocation(line: 3176, column: 34, scope: !17192)
!17202 = !DILocation(line: 3176, column: 40, scope: !17192)
!17203 = !DILocation(line: 3176, column: 45, scope: !17192)
!17204 = !DILocation(line: 3177, column: 13, scope: !17192)
!17205 = !DILocation(line: 3177, column: 21, scope: !17192)
!17206 = !DILocation(line: 3176, column: 9, scope: !17192)
!17207 = !DILocation(line: 3176, column: 5, scope: !17192)
!17208 = !DILocation(line: 3179, column: 11, scope: !17192)
!17209 = !DILocation(line: 3179, column: 17, scope: !17192)
!17210 = !DILocation(line: 3179, column: 21, scope: !17192)
!17211 = !DILocation(line: 3179, column: 31, scope: !17192)
!17212 = !DILocation(line: 3179, column: 37, scope: !17192)
!17213 = !DILocation(line: 3180, column: 10, scope: !17192)
!17214 = !DILocation(line: 3180, column: 24, scope: !17192)
!17215 = !DILocation(line: 3179, column: 9, scope: !17192)
!17216 = !DILocation(line: 3181, column: 8, scope: !17217)
!17217 = distinct !DILexicalBlock(scope: !17162, file: !3, line: 3181, column: 8)
!17218 = !DILocation(line: 3181, column: 12, scope: !17217)
!17219 = !DILocation(line: 3181, column: 8, scope: !17162)
!17220 = !DILocation(line: 3182, column: 9, scope: !17221)
!17221 = distinct !DILexicalBlock(scope: !17222, file: !3, line: 3182, column: 9)
!17222 = distinct !DILexicalBlock(scope: !17217, file: !3, line: 3181, column: 17)
!17223 = !DILocation(line: 3182, column: 9, scope: !17222)
!17224 = !DILocation(line: 3184, column: 6, scope: !17221)
!17225 = !DILocation(line: 3184, column: 12, scope: !17221)
!17226 = !DILocation(line: 3184, column: 22, scope: !17221)
!17227 = !DILocation(line: 3184, column: 27, scope: !17221)
!17228 = !DILocation(line: 3185, column: 5, scope: !17222)
!17229 = !DILocation(line: 3192, column: 8, scope: !17230)
!17230 = distinct !DILexicalBlock(scope: !17162, file: !3, line: 3192, column: 8)
!17231 = !DILocation(line: 3192, column: 8, scope: !17162)
!17232 = !DILocation(line: 3193, column: 10, scope: !17233)
!17233 = distinct !DILexicalBlock(scope: !17234, file: !3, line: 3193, column: 9)
!17234 = distinct !DILexicalBlock(scope: !17230, file: !3, line: 3192, column: 24)
!17235 = !DILocation(line: 3193, column: 38, scope: !17233)
!17236 = !DILocation(line: 3193, column: 42, scope: !17233)
!17237 = !DILocation(line: 3193, column: 46, scope: !17233)
!17238 = !DILocation(line: 3194, column: 11, scope: !17233)
!17239 = !DILocation(line: 3194, column: 16, scope: !17233)
!17240 = !DILocation(line: 3194, column: 26, scope: !17233)
!17241 = !DILocation(line: 3194, column: 45, scope: !17233)
!17242 = !DILocation(line: 3194, column: 33, scope: !17233)
!17243 = !DILocation(line: 3194, column: 53, scope: !17233)
!17244 = !DILocation(line: 3195, column: 10, scope: !17233)
!17245 = !DILocation(line: 3195, column: 15, scope: !17233)
!17246 = !DILocation(line: 3195, column: 20, scope: !17233)
!17247 = !DILocation(line: 3193, column: 9, scope: !17234)
!17248 = !DILocation(line: 3196, column: 29, scope: !17249)
!17249 = distinct !DILexicalBlock(scope: !17233, file: !3, line: 3195, column: 37)
!17250 = !DILocation(line: 3196, column: 6, scope: !17249)
!17251 = !DILocation(line: 3196, column: 12, scope: !17249)
!17252 = !DILocation(line: 3196, column: 22, scope: !17249)
!17253 = !DILocation(line: 3196, column: 27, scope: !17249)
!17254 = !DILocation(line: 3197, column: 33, scope: !17249)
!17255 = !DILocation(line: 3197, column: 6, scope: !17249)
!17256 = !DILocation(line: 3197, column: 12, scope: !17249)
!17257 = !DILocation(line: 3197, column: 22, scope: !17249)
!17258 = !DILocation(line: 3197, column: 31, scope: !17249)
!17259 = !DILocation(line: 3198, column: 5, scope: !17249)
!17260 = !DILocation(line: 3200, column: 6, scope: !17261)
!17261 = distinct !DILexicalBlock(scope: !17233, file: !3, line: 3198, column: 12)
!17262 = !DILocation(line: 3200, column: 12, scope: !17261)
!17263 = !DILocation(line: 3200, column: 22, scope: !17261)
!17264 = !DILocation(line: 3200, column: 27, scope: !17261)
!17265 = !DILocation(line: 3202, column: 12, scope: !17234)
!17266 = !DILocation(line: 3202, column: 17, scope: !17234)
!17267 = !DILocation(line: 3202, column: 26, scope: !17234)
!17268 = !DILocation(line: 3202, column: 24, scope: !17234)
!17269 = !DILocation(line: 3202, column: 31, scope: !17234)
!17270 = !DILocation(line: 3202, column: 5, scope: !17234)
!17271 = !DILocation(line: 3203, column: 4, scope: !17234)
!17272 = !DILocation(line: 3205, column: 8, scope: !17273)
!17273 = distinct !DILexicalBlock(scope: !17162, file: !3, line: 3205, column: 8)
!17274 = !DILocation(line: 3205, column: 8, scope: !17162)
!17275 = !DILocalVariable(name: "toread", scope: !17276, file: !3, line: 3206, type: !240)
!17276 = distinct !DILexicalBlock(scope: !17273, file: !3, line: 3205, column: 23)
!17277 = !DILocation(line: 3206, column: 9, scope: !17276)
!17278 = !DILocalVariable(name: "__UNIQUE_ID___x267", scope: !17279, file: !3, line: 3206, type: !536)
!17279 = distinct !DILexicalBlock(scope: !17276, file: !3, line: 3206, column: 18)
!17280 = !DILocation(line: 3206, column: 18, scope: !17279)
!17281 = !DILocalVariable(name: "__UNIQUE_ID___y268", scope: !17279, file: !3, line: 3206, type: !536)
!17282 = !DILocation(line: 3208, column: 9, scope: !17283)
!17283 = distinct !DILexicalBlock(scope: !17276, file: !3, line: 3208, column: 9)
!17284 = !DILocation(line: 3208, column: 9, scope: !17276)
!17285 = !DILocation(line: 3209, column: 30, scope: !17286)
!17286 = distinct !DILexicalBlock(scope: !17283, file: !3, line: 3208, column: 17)
!17287 = !DILocation(line: 3209, column: 36, scope: !17286)
!17288 = !DILocation(line: 3209, column: 41, scope: !17286)
!17289 = !DILocation(line: 3210, column: 9, scope: !17286)
!17290 = !DILocation(line: 3209, column: 12, scope: !17286)
!17291 = !DILocation(line: 3209, column: 10, scope: !17286)
!17292 = !DILocation(line: 3211, column: 20, scope: !17286)
!17293 = !DILocation(line: 3211, column: 17, scope: !17286)
!17294 = !DILocation(line: 3212, column: 5, scope: !17286)
!17295 = !DILocation(line: 3213, column: 4, scope: !17276)
!17296 = !DILocation(line: 3215, column: 22, scope: !17162)
!17297 = !DILocation(line: 3215, column: 4, scope: !17162)
!17298 = !DILocation(line: 3217, column: 8, scope: !17299)
!17299 = distinct !DILexicalBlock(scope: !17162, file: !3, line: 3217, column: 8)
!17300 = !DILocation(line: 3217, column: 13, scope: !17299)
!17301 = !DILocation(line: 3217, column: 23, scope: !17299)
!17302 = !DILocation(line: 3217, column: 42, scope: !17299)
!17303 = !DILocation(line: 3217, column: 30, scope: !17299)
!17304 = !DILocation(line: 3217, column: 8, scope: !17162)
!17305 = !DILocation(line: 3218, column: 9, scope: !17306)
!17306 = distinct !DILexicalBlock(scope: !17307, file: !3, line: 3218, column: 9)
!17307 = distinct !DILexicalBlock(scope: !17299, file: !3, line: 3217, column: 50)
!17308 = !DILocation(line: 3218, column: 20, scope: !17306)
!17309 = !DILocation(line: 3218, column: 26, scope: !17306)
!17310 = !DILocation(line: 3218, column: 32, scope: !17306)
!17311 = !DILocation(line: 3218, column: 24, scope: !17306)
!17312 = !DILocation(line: 3218, column: 9, scope: !17307)
!17313 = !DILocation(line: 3219, column: 16, scope: !17314)
!17314 = distinct !DILexicalBlock(scope: !17306, file: !3, line: 3218, column: 46)
!17315 = !DILocation(line: 3220, column: 34, scope: !17314)
!17316 = !DILocation(line: 3221, column: 8, scope: !17314)
!17317 = !DILocation(line: 3220, column: 12, scope: !17314)
!17318 = !DILocation(line: 3220, column: 10, scope: !17314)
!17319 = !DILocation(line: 3222, column: 10, scope: !17320)
!17320 = distinct !DILexicalBlock(scope: !17314, file: !3, line: 3222, column: 10)
!17321 = !DILocation(line: 3222, column: 14, scope: !17320)
!17322 = !DILocation(line: 3222, column: 10, scope: !17314)
!17323 = !DILocation(line: 3223, column: 7, scope: !17320)
!17324 = !DILocation(line: 3226, column: 6, scope: !17314)
!17325 = !DILocation(line: 3226, column: 11, scope: !17314)
!17326 = !DILocation(line: 3226, column: 23, scope: !17314)
!17327 = !DILocation(line: 3227, column: 6, scope: !17314)
!17328 = !DILocation(line: 3230, column: 15, scope: !17329)
!17329 = distinct !DILexicalBlock(scope: !17306, file: !3, line: 3228, column: 12)
!17330 = !DILocation(line: 3232, column: 4, scope: !17307)
!17331 = !DILocation(line: 3234, column: 11, scope: !17162)
!17332 = !DILocation(line: 3234, column: 8, scope: !17162)
!17333 = !DILocalVariable(name: "__UNIQUE_ID___x269", scope: !17334, file: !3, line: 3235, type: !7)
!17334 = distinct !DILexicalBlock(scope: !17162, file: !3, line: 3235, column: 19)
!17335 = !DILocation(line: 3235, column: 19, scope: !17334)
!17336 = !DILocalVariable(name: "__UNIQUE_ID___y270", scope: !17334, file: !3, line: 3235, type: !7)
!17337 = !DILocation(line: 3235, column: 17, scope: !17162)
!17338 = !DILocation(line: 3236, column: 3, scope: !17162)
!17339 = !DILocation(line: 3237, column: 11, scope: !17340)
!17340 = distinct !DILexicalBlock(scope: !17153, file: !3, line: 3236, column: 10)
!17341 = !DILocation(line: 3237, column: 16, scope: !17340)
!17342 = !DILocation(line: 3237, column: 22, scope: !17340)
!17343 = !DILocation(line: 3237, column: 33, scope: !17340)
!17344 = !DILocation(line: 3237, column: 31, scope: !17340)
!17345 = !DILocation(line: 3237, column: 38, scope: !17340)
!17346 = !DILocation(line: 3237, column: 4, scope: !17340)
!17347 = !DILocation(line: 3238, column: 11, scope: !17340)
!17348 = !DILocation(line: 3238, column: 8, scope: !17340)
!17349 = !DILocalVariable(name: "__UNIQUE_ID___x271", scope: !17350, file: !3, line: 3239, type: !7)
!17350 = distinct !DILexicalBlock(scope: !17340, file: !3, line: 3239, column: 19)
!17351 = !DILocation(line: 3239, column: 19, scope: !17350)
!17352 = !DILocalVariable(name: "__UNIQUE_ID___y272", scope: !17350, file: !3, line: 3239, type: !7)
!17353 = !DILocation(line: 3239, column: 17, scope: !17340)
!17354 = !DILocation(line: 3243, column: 14, scope: !17121)
!17355 = !DILocation(line: 3243, column: 11, scope: !17121)
!17356 = !DILocation(line: 3246, column: 7, scope: !17357)
!17357 = distinct !DILexicalBlock(scope: !17121, file: !3, line: 3246, column: 7)
!17358 = !DILocation(line: 3246, column: 7, scope: !17121)
!17359 = !DILocation(line: 3247, column: 32, scope: !17360)
!17360 = distinct !DILexicalBlock(scope: !17357, file: !3, line: 3246, column: 19)
!17361 = !DILocation(line: 3247, column: 10, scope: !17360)
!17362 = !DILocation(line: 3247, column: 8, scope: !17360)
!17363 = !DILocation(line: 3248, column: 8, scope: !17364)
!17364 = distinct !DILexicalBlock(scope: !17360, file: !3, line: 3248, column: 8)
!17365 = !DILocation(line: 3248, column: 12, scope: !17364)
!17366 = !DILocation(line: 3248, column: 8, scope: !17360)
!17367 = !DILocation(line: 3249, column: 5, scope: !17364)
!17368 = !DILocation(line: 3250, column: 15, scope: !17360)
!17369 = !DILocation(line: 3251, column: 3, scope: !17360)
!17370 = !DILocation(line: 3253, column: 8, scope: !17371)
!17371 = distinct !DILexicalBlock(scope: !17121, file: !3, line: 3253, column: 7)
!17372 = !DILocation(line: 3253, column: 7, scope: !17121)
!17373 = !DILocation(line: 3254, column: 4, scope: !17371)
!17374 = !DILocation(line: 3257, column: 7, scope: !17121)
!17375 = !DILocation(line: 3259, column: 11, scope: !17121)
!17376 = !DILocation(line: 3261, column: 10, scope: !17121)
!17377 = !DILocation(line: 3261, column: 21, scope: !17121)
!17378 = !DILocation(line: 3261, column: 27, scope: !17121)
!17379 = !DILocation(line: 3261, column: 19, scope: !17121)
!17380 = !DILocation(line: 3261, column: 8, scope: !17121)
!17381 = !DILocation(line: 3263, column: 8, scope: !17382)
!17382 = distinct !DILexicalBlock(scope: !17121, file: !3, line: 3263, column: 7)
!17383 = !DILocation(line: 3263, column: 7, scope: !17121)
!17384 = !DILocation(line: 3264, column: 10, scope: !17385)
!17385 = distinct !DILexicalBlock(scope: !17382, file: !3, line: 3263, column: 14)
!17386 = !DILocation(line: 3265, column: 25, scope: !17385)
!17387 = !DILocation(line: 3265, column: 4, scope: !17385)
!17388 = !DILocation(line: 3266, column: 23, scope: !17385)
!17389 = !DILocation(line: 3266, column: 29, scope: !17385)
!17390 = !DILocation(line: 3266, column: 4, scope: !17385)
!17391 = !DILocation(line: 3267, column: 3, scope: !17385)
!17392 = distinct !{!17392, !17119, !17393}
!17393 = !DILocation(line: 3268, column: 2, scope: !17029)
!17394 = !DILocation(line: 3269, column: 23, scope: !17029)
!17395 = !DILocation(line: 3269, column: 2, scope: !17029)
!17396 = !DILocation(line: 3271, column: 16, scope: !17029)
!17397 = !DILocation(line: 3271, column: 21, scope: !17029)
!17398 = !DILocation(line: 3271, column: 36, scope: !17029)
!17399 = !DILocation(line: 3271, column: 27, scope: !17029)
!17400 = !DILocation(line: 3271, column: 25, scope: !17029)
!17401 = !DILocation(line: 3271, column: 2, scope: !17029)
!17402 = !DILocation(line: 3271, column: 7, scope: !17029)
!17403 = !DILocation(line: 3271, column: 14, scope: !17029)
!17404 = !DILocation(line: 3272, column: 6, scope: !17405)
!17405 = distinct !DILexicalBlock(scope: !17029, file: !3, line: 3272, column: 6)
!17406 = !DILocation(line: 3272, column: 6, scope: !17029)
!17407 = !DILocation(line: 3273, column: 20, scope: !17405)
!17408 = !DILocation(line: 3273, column: 25, scope: !17405)
!17409 = !DILocation(line: 3273, column: 34, scope: !17405)
!17410 = !DILocation(line: 3273, column: 32, scope: !17405)
!17411 = !DILocation(line: 3273, column: 3, scope: !17405)
!17412 = !DILocation(line: 3273, column: 8, scope: !17405)
!17413 = !DILocation(line: 3273, column: 18, scope: !17405)
!17414 = !DILocation(line: 3275, column: 6, scope: !17415)
!17415 = distinct !DILexicalBlock(scope: !17029, file: !3, line: 3275, column: 6)
!17416 = !DILocation(line: 3275, column: 10, scope: !17415)
!17417 = !DILocation(line: 3275, column: 6, scope: !17029)
!17418 = !DILocation(line: 3276, column: 10, scope: !17415)
!17419 = !DILocation(line: 3276, column: 3, scope: !17415)
!17420 = !DILocation(line: 3278, column: 6, scope: !17421)
!17421 = distinct !DILexicalBlock(scope: !17029, file: !3, line: 3278, column: 6)
!17422 = !DILocation(line: 3278, column: 6, scope: !17029)
!17423 = !DILocation(line: 3279, column: 3, scope: !17421)
!17424 = !DILocation(line: 3281, column: 9, scope: !17029)
!17425 = !DILocation(line: 3281, column: 2, scope: !17029)
!17426 = !DILocation(line: 3282, column: 1, scope: !17029)
!17427 = distinct !DISubprogram(name: "nand_transfer_oob", scope: !3, file: !3, line: 3048, type: !17428, scopeLine: 3050, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!17428 = !DISubroutineType(types: !17429)
!17429 = !{!2753, !4166, !2753, !2743, !303}
!17430 = !DILocalVariable(name: "chip", arg: 1, scope: !17427, file: !3, line: 3048, type: !4166)
!17431 = !DILocation(line: 3048, column: 53, scope: !17427)
!17432 = !DILocalVariable(name: "oob", arg: 2, scope: !17427, file: !3, line: 3048, type: !2753)
!17433 = !DILocation(line: 3048, column: 68, scope: !17427)
!17434 = !DILocalVariable(name: "ops", arg: 3, scope: !17427, file: !3, line: 3049, type: !2743)
!17435 = !DILocation(line: 3049, column: 27, scope: !17427)
!17436 = !DILocalVariable(name: "len", arg: 4, scope: !17427, file: !3, line: 3049, type: !303)
!17437 = !DILocation(line: 3049, column: 39, scope: !17427)
!17438 = !DILocalVariable(name: "mtd", scope: !17427, file: !3, line: 3051, type: !2637)
!17439 = !DILocation(line: 3051, column: 19, scope: !17427)
!17440 = !DILocation(line: 3051, column: 37, scope: !17427)
!17441 = !DILocation(line: 3051, column: 25, scope: !17427)
!17442 = !DILocalVariable(name: "ret", scope: !17427, file: !3, line: 3052, type: !240)
!17443 = !DILocation(line: 3052, column: 6, scope: !17427)
!17444 = !DILocation(line: 3054, column: 10, scope: !17427)
!17445 = !DILocation(line: 3054, column: 15, scope: !17427)
!17446 = !DILocation(line: 3054, column: 2, scope: !17427)
!17447 = !DILocation(line: 3058, column: 10, scope: !17448)
!17448 = distinct !DILexicalBlock(scope: !17427, file: !3, line: 3054, column: 21)
!17449 = !DILocation(line: 3058, column: 15, scope: !17448)
!17450 = !DILocation(line: 3058, column: 21, scope: !17448)
!17451 = !DILocation(line: 3058, column: 31, scope: !17448)
!17452 = !DILocation(line: 3058, column: 36, scope: !17448)
!17453 = !DILocation(line: 3058, column: 29, scope: !17448)
!17454 = !DILocation(line: 3058, column: 45, scope: !17448)
!17455 = !DILocation(line: 3058, column: 3, scope: !17448)
!17456 = !DILocation(line: 3059, column: 10, scope: !17448)
!17457 = !DILocation(line: 3059, column: 16, scope: !17448)
!17458 = !DILocation(line: 3059, column: 14, scope: !17448)
!17459 = !DILocation(line: 3059, column: 3, scope: !17448)
!17460 = !DILocation(line: 3062, column: 37, scope: !17448)
!17461 = !DILocation(line: 3062, column: 42, scope: !17448)
!17462 = !DILocation(line: 3062, column: 47, scope: !17448)
!17463 = !DILocation(line: 3062, column: 53, scope: !17448)
!17464 = !DILocation(line: 3063, column: 9, scope: !17448)
!17465 = !DILocation(line: 3063, column: 14, scope: !17448)
!17466 = !DILocation(line: 3063, column: 23, scope: !17448)
!17467 = !DILocation(line: 3062, column: 9, scope: !17448)
!17468 = !DILocation(line: 3062, column: 7, scope: !17448)
!17469 = !DILocation(line: 3064, column: 3, scope: !17448)
!17470 = !DILocation(line: 3064, column: 3, scope: !17471)
!17471 = distinct !DILexicalBlock(scope: !17472, file: !3, line: 3064, column: 3)
!17472 = distinct !DILexicalBlock(scope: !17448, file: !3, line: 3064, column: 3)
!17473 = !DILocation(line: 3064, column: 3, scope: !17472)
!17474 = !DILocation(line: 3064, column: 3, scope: !17475)
!17475 = distinct !DILexicalBlock(scope: !17471, file: !3, line: 3064, column: 3)
!17476 = !DILocation(line: 3064, column: 3, scope: !17477)
!17477 = distinct !DILexicalBlock(scope: !17475, file: !3, line: 3064, column: 3)
!17478 = !DILocation(line: 3064, column: 3, scope: !17479)
!17479 = distinct !DILexicalBlock(scope: !17475, file: !3, line: 3064, column: 3)
!17480 = !{i32 -2141560902, i32 -2141560873, i32 -2141560827, i32 -2141560769, i32 -2141560715, i32 -2141560661, i32 -2141560606, i32 -2141560575}
!17481 = !DILocation(line: 3064, column: 3, scope: !17482)
!17482 = distinct !DILexicalBlock(scope: !17483, file: !3, line: 3064, column: 3)
!17483 = distinct !DILexicalBlock(scope: !17475, file: !3, line: 3064, column: 3)
!17484 = !{i32 -2141560119, i32 -2141560112, i32 -2141560058, i32 -2141560027, i32 -2141559997}
!17485 = !DILocation(line: 3064, column: 3, scope: !17483)
!17486 = !DILocation(line: 3065, column: 10, scope: !17448)
!17487 = !DILocation(line: 3065, column: 16, scope: !17448)
!17488 = !DILocation(line: 3065, column: 14, scope: !17448)
!17489 = !DILocation(line: 3065, column: 3, scope: !17448)
!17490 = !DILocation(line: 3068, column: 3, scope: !17448)
!17491 = !DILocation(line: 3068, column: 3, scope: !17492)
!17492 = distinct !DILexicalBlock(scope: !17448, file: !3, line: 3068, column: 3)
!17493 = !DILocation(line: 3068, column: 3, scope: !17494)
!17494 = distinct !DILexicalBlock(scope: !17492, file: !3, line: 3068, column: 3)
!17495 = !DILocation(line: 3068, column: 3, scope: !17496)
!17496 = distinct !DILexicalBlock(scope: !17492, file: !3, line: 3068, column: 3)
!17497 = !{i32 -2141559792, i32 -2141559763, i32 -2141559717, i32 -2141559659, i32 -2141559605, i32 -2141559551, i32 -2141559496, i32 -2141559465}
!17498 = !DILocation(line: 3068, column: 3, scope: !17499)
!17499 = distinct !DILexicalBlock(scope: !17500, file: !3, line: 3068, column: 3)
!17500 = distinct !DILexicalBlock(scope: !17492, file: !3, line: 3068, column: 3)
!17501 = !{i32 -2141559009, i32 -2141559002, i32 -2141558948, i32 -2141558917, i32 -2141558887}
!17502 = !DILocation(line: 3068, column: 3, scope: !17500)
!17503 = !DILocation(line: 3069, column: 2, scope: !17448)
!17504 = !DILocation(line: 3070, column: 2, scope: !17427)
!17505 = !DILocation(line: 3071, column: 1, scope: !17427)
!17506 = distinct !DISubprogram(name: "nand_wait_readrdy", scope: !3, file: !3, line: 3095, type: !4218, scopeLine: 3096, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!17507 = !DILocalVariable(name: "chip", arg: 1, scope: !17506, file: !3, line: 3095, type: !4166)
!17508 = !DILocation(line: 3095, column: 49, scope: !17506)
!17509 = !DILocalVariable(name: "sdr", scope: !17506, file: !3, line: 3097, type: !5097)
!17510 = !DILocation(line: 3097, column: 33, scope: !17506)
!17511 = !DILocation(line: 3099, column: 8, scope: !17512)
!17512 = distinct !DILexicalBlock(scope: !17506, file: !3, line: 3099, column: 6)
!17513 = !DILocation(line: 3099, column: 14, scope: !17512)
!17514 = !DILocation(line: 3099, column: 22, scope: !17512)
!17515 = !DILocation(line: 3099, column: 6, scope: !17506)
!17516 = !DILocation(line: 3100, column: 3, scope: !17512)
!17517 = !DILocation(line: 3102, column: 55, scope: !17506)
!17518 = !DILocation(line: 3102, column: 29, scope: !17506)
!17519 = !DILocation(line: 3102, column: 8, scope: !17506)
!17520 = !DILocation(line: 3102, column: 6, scope: !17506)
!17521 = !DILocalVariable(name: "__ret_warn_on", scope: !17522, file: !3, line: 3103, type: !240)
!17522 = distinct !DILexicalBlock(scope: !17506, file: !3, line: 3103, column: 2)
!17523 = !DILocation(line: 3103, column: 2, scope: !17522)
!17524 = !DILocation(line: 3103, column: 2, scope: !17525)
!17525 = distinct !DILexicalBlock(scope: !17522, file: !3, line: 3103, column: 2)
!17526 = !DILocation(line: 3103, column: 2, scope: !17527)
!17527 = distinct !DILexicalBlock(scope: !17522, file: !3, line: 3103, column: 2)
!17528 = !DILocation(line: 3103, column: 2, scope: !17529)
!17529 = distinct !DILexicalBlock(scope: !17527, file: !3, line: 3103, column: 2)
!17530 = !DILocation(line: 3103, column: 2, scope: !17531)
!17531 = distinct !DILexicalBlock(scope: !17529, file: !3, line: 3103, column: 2)
!17532 = !DILocation(line: 3103, column: 2, scope: !17533)
!17533 = distinct !DILexicalBlock(scope: !17529, file: !3, line: 3103, column: 2)
!17534 = !{i32 -2141556694, i32 -2141556665, i32 -2141556619, i32 -2141556561, i32 -2141556507, i32 -2141556453, i32 -2141556398, i32 -2141556367}
!17535 = !DILocation(line: 3103, column: 2, scope: !17536)
!17536 = distinct !DILexicalBlock(scope: !17529, file: !3, line: 3103, column: 2)
!17537 = !{i32 -2141555952, i32 -2141555945, i32 -2141555893, i32 -2141555862, i32 -2141555832}
!17538 = !DILocation(line: 3103, column: 2, scope: !17539)
!17539 = distinct !DILexicalBlock(scope: !17529, file: !3, line: 3103, column: 2)
!17540 = !DILocation(line: 3104, column: 1, scope: !17506)
!17541 = distinct !DISubprogram(name: "nand_wait_rdy_op", scope: !3, file: !3, line: 1800, type: !17542, scopeLine: 1802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!17542 = !DISubroutineType(types: !17543)
!17543 = !{!240, !4166, !7, !7}
!17544 = !DILocalVariable(name: "chip", arg: 1, scope: !17541, file: !3, line: 1800, type: !4166)
!17545 = !DILocation(line: 1800, column: 47, scope: !17541)
!17546 = !DILocalVariable(name: "timeout_ms", arg: 2, scope: !17541, file: !3, line: 1800, type: !7)
!17547 = !DILocation(line: 1800, column: 66, scope: !17541)
!17548 = !DILocalVariable(name: "delay_ns", arg: 3, scope: !17541, file: !3, line: 1801, type: !7)
!17549 = !DILocation(line: 1801, column: 21, scope: !17541)
!17550 = !DILocation(line: 1803, column: 23, scope: !17551)
!17551 = distinct !DILexicalBlock(scope: !17541, file: !3, line: 1803, column: 6)
!17552 = !DILocation(line: 1803, column: 6, scope: !17551)
!17553 = !DILocation(line: 1803, column: 6, scope: !17541)
!17554 = !DILocalVariable(name: "instrs", scope: !17555, file: !3, line: 1804, type: !5308)
!17555 = distinct !DILexicalBlock(scope: !17551, file: !3, line: 1803, column: 30)
!17556 = !DILocation(line: 1804, column: 24, scope: !17555)
!17557 = !DILocation(line: 1804, column: 35, scope: !17555)
!17558 = !DILocation(line: 1805, column: 4, scope: !17555)
!17559 = !DILocation(line: 1805, column: 4, scope: !17560)
!17560 = distinct !DILexicalBlock(scope: !17555, file: !3, line: 1805, column: 4)
!17561 = !DILocation(line: 1805, column: 4, scope: !17562)
!17562 = distinct !DILexicalBlock(scope: !17555, file: !3, line: 1805, column: 4)
!17563 = !DILocalVariable(name: "op", scope: !17555, file: !3, line: 1808, type: !4432)
!17564 = !DILocation(line: 1808, column: 25, scope: !17555)
!17565 = !DILocation(line: 1808, column: 30, scope: !17555)
!17566 = !DILocation(line: 1810, column: 23, scope: !17555)
!17567 = !DILocation(line: 1810, column: 10, scope: !17555)
!17568 = !DILocation(line: 1810, column: 3, scope: !17555)
!17569 = !DILocation(line: 1814, column: 7, scope: !17570)
!17570 = distinct !DILexicalBlock(scope: !17541, file: !3, line: 1814, column: 6)
!17571 = !DILocation(line: 1814, column: 13, scope: !17570)
!17572 = !DILocation(line: 1814, column: 20, scope: !17570)
!17573 = !DILocation(line: 1814, column: 6, scope: !17541)
!17574 = !DILocation(line: 1815, column: 3, scope: !17575)
!17575 = distinct !DILexicalBlock(scope: !17576, file: !3, line: 1815, column: 3)
!17576 = distinct !DILexicalBlock(scope: !17570, file: !3, line: 1815, column: 3)
!17577 = !DILocation(line: 1815, column: 3, scope: !17576)
!17578 = !DILocation(line: 1815, column: 3, scope: !17579)
!17579 = distinct !DILexicalBlock(scope: !17580, file: !3, line: 1815, column: 3)
!17580 = distinct !DILexicalBlock(scope: !17575, file: !3, line: 1815, column: 3)
!17581 = !DILocation(line: 1815, column: 3, scope: !17580)
!17582 = !DILocation(line: 1815, column: 3, scope: !17583)
!17583 = distinct !DILexicalBlock(scope: !17575, file: !3, line: 1815, column: 3)
!17584 = !DILocation(line: 1815, column: 3, scope: !17570)
!17585 = !DILocation(line: 1817, column: 19, scope: !17570)
!17586 = !DILocation(line: 1817, column: 3, scope: !17570)
!17587 = !DILocation(line: 1819, column: 2, scope: !17541)
!17588 = !DILocation(line: 1820, column: 1, scope: !17541)
!17589 = distinct !DISubprogram(name: "nand_setup_read_retry", scope: !3, file: !3, line: 3082, type: !4309, scopeLine: 3083, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!17590 = !DILocalVariable(name: "chip", arg: 1, scope: !17589, file: !3, line: 3082, type: !4166)
!17591 = !DILocation(line: 3082, column: 52, scope: !17589)
!17592 = !DILocalVariable(name: "retry_mode", arg: 2, scope: !17589, file: !3, line: 3082, type: !240)
!17593 = !DILocation(line: 3082, column: 62, scope: !17589)
!17594 = !DILocation(line: 3084, column: 2, scope: !17595)
!17595 = distinct !DILexicalBlock(scope: !17596, file: !3, line: 3084, column: 2)
!17596 = distinct !DILexicalBlock(scope: !17589, file: !3, line: 3084, column: 2)
!17597 = !DILocation(line: 3084, column: 2, scope: !17596)
!17598 = !DILocation(line: 3086, column: 6, scope: !17599)
!17599 = distinct !DILexicalBlock(scope: !17589, file: !3, line: 3086, column: 6)
!17600 = !DILocation(line: 3086, column: 20, scope: !17599)
!17601 = !DILocation(line: 3086, column: 26, scope: !17599)
!17602 = !DILocation(line: 3086, column: 17, scope: !17599)
!17603 = !DILocation(line: 3086, column: 6, scope: !17589)
!17604 = !DILocation(line: 3087, column: 3, scope: !17599)
!17605 = !DILocation(line: 3089, column: 7, scope: !17606)
!17606 = distinct !DILexicalBlock(scope: !17589, file: !3, line: 3089, column: 6)
!17607 = !DILocation(line: 3089, column: 13, scope: !17606)
!17608 = !DILocation(line: 3089, column: 17, scope: !17606)
!17609 = !DILocation(line: 3089, column: 6, scope: !17589)
!17610 = !DILocation(line: 3090, column: 3, scope: !17606)
!17611 = !DILocation(line: 3092, column: 9, scope: !17589)
!17612 = !DILocation(line: 3092, column: 15, scope: !17589)
!17613 = !DILocation(line: 3092, column: 19, scope: !17589)
!17614 = !DILocation(line: 3092, column: 36, scope: !17589)
!17615 = !DILocation(line: 3092, column: 42, scope: !17589)
!17616 = !DILocation(line: 3092, column: 2, scope: !17589)
!17617 = !DILocation(line: 3093, column: 1, scope: !17589)
!17618 = distinct !DISubprogram(name: "nand_block_markbad_lowlevel", scope: !3, file: !3, line: 519, type: !4406, scopeLine: 520, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!17619 = !DILocalVariable(name: "chip", arg: 1, scope: !17618, file: !3, line: 519, type: !4166)
!17620 = !DILocation(line: 519, column: 58, scope: !17618)
!17621 = !DILocalVariable(name: "ofs", arg: 2, scope: !17618, file: !3, line: 519, type: !508)
!17622 = !DILocation(line: 519, column: 71, scope: !17618)
!17623 = !DILocalVariable(name: "mtd", scope: !17618, file: !3, line: 521, type: !2637)
!17624 = !DILocation(line: 521, column: 19, scope: !17618)
!17625 = !DILocation(line: 521, column: 37, scope: !17618)
!17626 = !DILocation(line: 521, column: 25, scope: !17618)
!17627 = !DILocalVariable(name: "res", scope: !17618, file: !3, line: 522, type: !240)
!17628 = !DILocation(line: 522, column: 6, scope: !17618)
!17629 = !DILocalVariable(name: "ret", scope: !17618, file: !3, line: 522, type: !240)
!17630 = !DILocation(line: 522, column: 11, scope: !17618)
!17631 = !DILocation(line: 524, column: 8, scope: !17632)
!17632 = distinct !DILexicalBlock(scope: !17618, file: !3, line: 524, column: 6)
!17633 = !DILocation(line: 524, column: 14, scope: !17632)
!17634 = !DILocation(line: 524, column: 26, scope: !17632)
!17635 = !DILocation(line: 524, column: 6, scope: !17618)
!17636 = !DILocalVariable(name: "einfo", scope: !17637, file: !3, line: 525, type: !2711)
!17637 = distinct !DILexicalBlock(scope: !17632, file: !3, line: 524, column: 50)
!17638 = !DILocation(line: 525, column: 21, scope: !17637)
!17639 = !DILocation(line: 528, column: 3, scope: !17637)
!17640 = !DILocation(line: 529, column: 16, scope: !17637)
!17641 = !DILocation(line: 529, column: 9, scope: !17637)
!17642 = !DILocation(line: 529, column: 14, scope: !17637)
!17643 = !DILocation(line: 530, column: 23, scope: !17637)
!17644 = !DILocation(line: 530, column: 29, scope: !17637)
!17645 = !DILocation(line: 530, column: 20, scope: !17637)
!17646 = !DILocation(line: 530, column: 9, scope: !17637)
!17647 = !DILocation(line: 530, column: 13, scope: !17637)
!17648 = !DILocation(line: 531, column: 19, scope: !17637)
!17649 = !DILocation(line: 531, column: 3, scope: !17637)
!17650 = !DILocation(line: 534, column: 25, scope: !17637)
!17651 = !DILocation(line: 534, column: 9, scope: !17637)
!17652 = !DILocation(line: 534, column: 7, scope: !17637)
!17653 = !DILocation(line: 535, column: 7, scope: !17654)
!17654 = distinct !DILexicalBlock(scope: !17637, file: !3, line: 535, column: 7)
!17655 = !DILocation(line: 535, column: 7, scope: !17637)
!17656 = !DILocation(line: 536, column: 11, scope: !17654)
!17657 = !DILocation(line: 536, column: 4, scope: !17654)
!17658 = !DILocation(line: 538, column: 26, scope: !17637)
!17659 = !DILocation(line: 538, column: 32, scope: !17637)
!17660 = !DILocation(line: 538, column: 9, scope: !17637)
!17661 = !DILocation(line: 538, column: 7, scope: !17637)
!17662 = !DILocation(line: 539, column: 23, scope: !17637)
!17663 = !DILocation(line: 539, column: 3, scope: !17637)
!17664 = !DILocation(line: 540, column: 2, scope: !17637)
!17665 = !DILocation(line: 543, column: 6, scope: !17666)
!17666 = distinct !DILexicalBlock(scope: !17618, file: !3, line: 543, column: 6)
!17667 = !DILocation(line: 543, column: 12, scope: !17666)
!17668 = !DILocation(line: 543, column: 6, scope: !17618)
!17669 = !DILocation(line: 544, column: 26, scope: !17670)
!17670 = distinct !DILexicalBlock(scope: !17666, file: !3, line: 543, column: 17)
!17671 = !DILocation(line: 544, column: 32, scope: !17670)
!17672 = !DILocation(line: 544, column: 9, scope: !17670)
!17673 = !DILocation(line: 544, column: 7, scope: !17670)
!17674 = !DILocation(line: 545, column: 8, scope: !17675)
!17675 = distinct !DILexicalBlock(scope: !17670, file: !3, line: 545, column: 7)
!17676 = !DILocation(line: 545, column: 7, scope: !17670)
!17677 = !DILocation(line: 546, column: 10, scope: !17675)
!17678 = !DILocation(line: 546, column: 8, scope: !17675)
!17679 = !DILocation(line: 546, column: 4, scope: !17675)
!17680 = !DILocation(line: 547, column: 2, scope: !17670)
!17681 = !DILocation(line: 549, column: 7, scope: !17682)
!17682 = distinct !DILexicalBlock(scope: !17618, file: !3, line: 549, column: 6)
!17683 = !DILocation(line: 549, column: 6, scope: !17618)
!17684 = !DILocation(line: 550, column: 3, scope: !17682)
!17685 = !DILocation(line: 550, column: 8, scope: !17682)
!17686 = !DILocation(line: 550, column: 18, scope: !17682)
!17687 = !DILocation(line: 550, column: 27, scope: !17682)
!17688 = !DILocation(line: 552, column: 9, scope: !17618)
!17689 = !DILocation(line: 552, column: 2, scope: !17618)
!17690 = !DILocation(line: 553, column: 1, scope: !17618)
!17691 = distinct !DISubprogram(name: "kzalloc", scope: !4044, file: !4044, line: 662, type: !9899, scopeLine: 663, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !228)
!17692 = !DILocation(line: 445, column: 72, scope: !9891, inlinedAt: !17693)
!17693 = distinct !DILocation(line: 552, column: 10, scope: !9896, inlinedAt: !17694)
!17694 = distinct !DILocation(line: 664, column: 9, scope: !17691)
!17695 = !DILocation(line: 446, column: 9, scope: !9891, inlinedAt: !17693)
!17696 = !DILocation(line: 446, column: 23, scope: !9891, inlinedAt: !17693)
!17697 = !DILocation(line: 448, column: 8, scope: !9891, inlinedAt: !17693)
!17698 = !DILocation(line: 318, column: 67, scope: !9911, inlinedAt: !17699)
!17699 = distinct !DILocation(line: 553, column: 20, scope: !9896, inlinedAt: !17694)
!17700 = !DILocation(line: 346, column: 58, scope: !9917, inlinedAt: !17701)
!17701 = distinct !DILocation(line: 547, column: 11, scope: !9896, inlinedAt: !17694)
!17702 = !DILocation(line: 472, column: 28, scope: !9923, inlinedAt: !17703)
!17703 = distinct !DILocation(line: 481, column: 9, scope: !9928, inlinedAt: !17704)
!17704 = distinct !DILocation(line: 545, column: 11, scope: !9930, inlinedAt: !17694)
!17705 = !DILocation(line: 472, column: 40, scope: !9923, inlinedAt: !17703)
!17706 = !DILocation(line: 472, column: 60, scope: !9923, inlinedAt: !17703)
!17707 = !DILocation(line: 478, column: 51, scope: !9928, inlinedAt: !17704)
!17708 = !DILocation(line: 478, column: 63, scope: !9928, inlinedAt: !17704)
!17709 = !DILocation(line: 480, column: 15, scope: !9928, inlinedAt: !17704)
!17710 = !DILocation(line: 538, column: 45, scope: !9898, inlinedAt: !17694)
!17711 = !DILocation(line: 538, column: 57, scope: !9898, inlinedAt: !17694)
!17712 = !DILocation(line: 542, column: 16, scope: !9896, inlinedAt: !17694)
!17713 = !DILocalVariable(name: "size", arg: 1, scope: !17691, file: !4044, line: 662, type: !303)
!17714 = !DILocation(line: 662, column: 36, scope: !17691)
!17715 = !DILocalVariable(name: "flags", arg: 2, scope: !17691, file: !4044, line: 662, type: !724)
!17716 = !DILocation(line: 662, column: 48, scope: !17691)
!17717 = !DILocation(line: 664, column: 17, scope: !17691)
!17718 = !DILocation(line: 664, column: 23, scope: !17691)
!17719 = !DILocation(line: 664, column: 29, scope: !17691)
!17720 = !DILocation(line: 540, column: 27, scope: !9897, inlinedAt: !17694)
!17721 = !DILocation(line: 540, column: 6, scope: !9897, inlinedAt: !17694)
!17722 = !DILocation(line: 540, column: 6, scope: !9898, inlinedAt: !17694)
!17723 = !DILocation(line: 544, column: 7, scope: !9930, inlinedAt: !17694)
!17724 = !DILocation(line: 544, column: 12, scope: !9930, inlinedAt: !17694)
!17725 = !DILocation(line: 544, column: 7, scope: !9896, inlinedAt: !17694)
!17726 = !DILocation(line: 545, column: 25, scope: !9930, inlinedAt: !17694)
!17727 = !DILocation(line: 545, column: 31, scope: !9930, inlinedAt: !17694)
!17728 = !DILocation(line: 480, column: 33, scope: !9928, inlinedAt: !17704)
!17729 = !DILocation(line: 480, column: 23, scope: !9928, inlinedAt: !17704)
!17730 = !DILocation(line: 481, column: 29, scope: !9928, inlinedAt: !17704)
!17731 = !DILocation(line: 481, column: 35, scope: !9928, inlinedAt: !17704)
!17732 = !DILocation(line: 481, column: 42, scope: !9928, inlinedAt: !17704)
!17733 = !DILocation(line: 474, column: 23, scope: !9923, inlinedAt: !17703)
!17734 = !DILocation(line: 474, column: 29, scope: !9923, inlinedAt: !17703)
!17735 = !DILocation(line: 474, column: 36, scope: !9923, inlinedAt: !17703)
!17736 = !DILocation(line: 474, column: 9, scope: !9923, inlinedAt: !17703)
!17737 = !DILocation(line: 545, column: 4, scope: !9930, inlinedAt: !17694)
!17738 = !DILocation(line: 547, column: 25, scope: !9896, inlinedAt: !17694)
!17739 = !DILocation(line: 348, column: 7, scope: !10052, inlinedAt: !17701)
!17740 = !DILocation(line: 348, column: 6, scope: !9917, inlinedAt: !17701)
!17741 = !DILocation(line: 349, column: 3, scope: !10052, inlinedAt: !17701)
!17742 = !DILocation(line: 351, column: 6, scope: !10056, inlinedAt: !17701)
!17743 = !DILocation(line: 351, column: 11, scope: !10056, inlinedAt: !17701)
!17744 = !DILocation(line: 351, column: 6, scope: !9917, inlinedAt: !17701)
!17745 = !DILocation(line: 352, column: 3, scope: !10056, inlinedAt: !17701)
!17746 = !DILocation(line: 354, column: 32, scope: !10061, inlinedAt: !17701)
!17747 = !DILocation(line: 354, column: 37, scope: !10061, inlinedAt: !17701)
!17748 = !DILocation(line: 354, column: 42, scope: !10061, inlinedAt: !17701)
!17749 = !DILocation(line: 354, column: 45, scope: !10061, inlinedAt: !17701)
!17750 = !DILocation(line: 354, column: 50, scope: !10061, inlinedAt: !17701)
!17751 = !DILocation(line: 354, column: 6, scope: !9917, inlinedAt: !17701)
!17752 = !DILocation(line: 355, column: 3, scope: !10061, inlinedAt: !17701)
!17753 = !DILocation(line: 356, column: 32, scope: !10069, inlinedAt: !17701)
!17754 = !DILocation(line: 356, column: 37, scope: !10069, inlinedAt: !17701)
!17755 = !DILocation(line: 356, column: 43, scope: !10069, inlinedAt: !17701)
!17756 = !DILocation(line: 356, column: 46, scope: !10069, inlinedAt: !17701)
!17757 = !DILocation(line: 356, column: 51, scope: !10069, inlinedAt: !17701)
!17758 = !DILocation(line: 356, column: 6, scope: !9917, inlinedAt: !17701)
!17759 = !DILocation(line: 357, column: 3, scope: !10069, inlinedAt: !17701)
!17760 = !DILocation(line: 358, column: 6, scope: !10077, inlinedAt: !17701)
!17761 = !DILocation(line: 358, column: 11, scope: !10077, inlinedAt: !17701)
!17762 = !DILocation(line: 358, column: 6, scope: !9917, inlinedAt: !17701)
!17763 = !DILocation(line: 358, column: 26, scope: !10077, inlinedAt: !17701)
!17764 = !DILocation(line: 359, column: 6, scope: !10082, inlinedAt: !17701)
!17765 = !DILocation(line: 359, column: 11, scope: !10082, inlinedAt: !17701)
!17766 = !DILocation(line: 359, column: 6, scope: !9917, inlinedAt: !17701)
!17767 = !DILocation(line: 359, column: 26, scope: !10082, inlinedAt: !17701)
!17768 = !DILocation(line: 360, column: 6, scope: !10087, inlinedAt: !17701)
!17769 = !DILocation(line: 360, column: 11, scope: !10087, inlinedAt: !17701)
!17770 = !DILocation(line: 360, column: 6, scope: !9917, inlinedAt: !17701)
!17771 = !DILocation(line: 360, column: 26, scope: !10087, inlinedAt: !17701)
!17772 = !DILocation(line: 361, column: 6, scope: !10092, inlinedAt: !17701)
!17773 = !DILocation(line: 361, column: 11, scope: !10092, inlinedAt: !17701)
!17774 = !DILocation(line: 361, column: 6, scope: !9917, inlinedAt: !17701)
!17775 = !DILocation(line: 361, column: 26, scope: !10092, inlinedAt: !17701)
!17776 = !DILocation(line: 362, column: 6, scope: !10097, inlinedAt: !17701)
!17777 = !DILocation(line: 362, column: 11, scope: !10097, inlinedAt: !17701)
!17778 = !DILocation(line: 362, column: 6, scope: !9917, inlinedAt: !17701)
!17779 = !DILocation(line: 362, column: 26, scope: !10097, inlinedAt: !17701)
!17780 = !DILocation(line: 363, column: 6, scope: !10102, inlinedAt: !17701)
!17781 = !DILocation(line: 363, column: 11, scope: !10102, inlinedAt: !17701)
!17782 = !DILocation(line: 363, column: 6, scope: !9917, inlinedAt: !17701)
!17783 = !DILocation(line: 363, column: 26, scope: !10102, inlinedAt: !17701)
!17784 = !DILocation(line: 364, column: 6, scope: !10107, inlinedAt: !17701)
!17785 = !DILocation(line: 364, column: 11, scope: !10107, inlinedAt: !17701)
!17786 = !DILocation(line: 364, column: 6, scope: !9917, inlinedAt: !17701)
!17787 = !DILocation(line: 364, column: 26, scope: !10107, inlinedAt: !17701)
!17788 = !DILocation(line: 365, column: 6, scope: !10112, inlinedAt: !17701)
!17789 = !DILocation(line: 365, column: 11, scope: !10112, inlinedAt: !17701)
!17790 = !DILocation(line: 365, column: 6, scope: !9917, inlinedAt: !17701)
!17791 = !DILocation(line: 365, column: 26, scope: !10112, inlinedAt: !17701)
!17792 = !DILocation(line: 366, column: 6, scope: !10117, inlinedAt: !17701)
!17793 = !DILocation(line: 366, column: 11, scope: !10117, inlinedAt: !17701)
!17794 = !DILocation(line: 366, column: 6, scope: !9917, inlinedAt: !17701)
!17795 = !DILocation(line: 366, column: 26, scope: !10117, inlinedAt: !17701)
!17796 = !DILocation(line: 367, column: 6, scope: !10122, inlinedAt: !17701)
!17797 = !DILocation(line: 367, column: 11, scope: !10122, inlinedAt: !17701)
!17798 = !DILocation(line: 367, column: 6, scope: !9917, inlinedAt: !17701)
!17799 = !DILocation(line: 367, column: 26, scope: !10122, inlinedAt: !17701)
!17800 = !DILocation(line: 368, column: 6, scope: !10127, inlinedAt: !17701)
!17801 = !DILocation(line: 368, column: 11, scope: !10127, inlinedAt: !17701)
!17802 = !DILocation(line: 368, column: 6, scope: !9917, inlinedAt: !17701)
!17803 = !DILocation(line: 368, column: 26, scope: !10127, inlinedAt: !17701)
!17804 = !DILocation(line: 369, column: 6, scope: !10132, inlinedAt: !17701)
!17805 = !DILocation(line: 369, column: 11, scope: !10132, inlinedAt: !17701)
!17806 = !DILocation(line: 369, column: 6, scope: !9917, inlinedAt: !17701)
!17807 = !DILocation(line: 369, column: 26, scope: !10132, inlinedAt: !17701)
!17808 = !DILocation(line: 370, column: 6, scope: !10137, inlinedAt: !17701)
!17809 = !DILocation(line: 370, column: 11, scope: !10137, inlinedAt: !17701)
!17810 = !DILocation(line: 370, column: 6, scope: !9917, inlinedAt: !17701)
!17811 = !DILocation(line: 370, column: 26, scope: !10137, inlinedAt: !17701)
!17812 = !DILocation(line: 371, column: 6, scope: !10142, inlinedAt: !17701)
!17813 = !DILocation(line: 371, column: 11, scope: !10142, inlinedAt: !17701)
!17814 = !DILocation(line: 371, column: 6, scope: !9917, inlinedAt: !17701)
!17815 = !DILocation(line: 371, column: 26, scope: !10142, inlinedAt: !17701)
!17816 = !DILocation(line: 372, column: 6, scope: !10147, inlinedAt: !17701)
!17817 = !DILocation(line: 372, column: 11, scope: !10147, inlinedAt: !17701)
!17818 = !DILocation(line: 372, column: 6, scope: !9917, inlinedAt: !17701)
!17819 = !DILocation(line: 372, column: 26, scope: !10147, inlinedAt: !17701)
!17820 = !DILocation(line: 373, column: 6, scope: !10152, inlinedAt: !17701)
!17821 = !DILocation(line: 373, column: 11, scope: !10152, inlinedAt: !17701)
!17822 = !DILocation(line: 373, column: 6, scope: !9917, inlinedAt: !17701)
!17823 = !DILocation(line: 373, column: 26, scope: !10152, inlinedAt: !17701)
!17824 = !DILocation(line: 374, column: 6, scope: !10157, inlinedAt: !17701)
!17825 = !DILocation(line: 374, column: 11, scope: !10157, inlinedAt: !17701)
!17826 = !DILocation(line: 374, column: 6, scope: !9917, inlinedAt: !17701)
!17827 = !DILocation(line: 374, column: 26, scope: !10157, inlinedAt: !17701)
!17828 = !DILocation(line: 375, column: 6, scope: !10162, inlinedAt: !17701)
!17829 = !DILocation(line: 375, column: 11, scope: !10162, inlinedAt: !17701)
!17830 = !DILocation(line: 375, column: 6, scope: !9917, inlinedAt: !17701)
!17831 = !DILocation(line: 375, column: 27, scope: !10162, inlinedAt: !17701)
!17832 = !DILocation(line: 376, column: 6, scope: !10167, inlinedAt: !17701)
!17833 = !DILocation(line: 376, column: 11, scope: !10167, inlinedAt: !17701)
!17834 = !DILocation(line: 376, column: 6, scope: !9917, inlinedAt: !17701)
!17835 = !DILocation(line: 376, column: 32, scope: !10167, inlinedAt: !17701)
!17836 = !DILocation(line: 377, column: 6, scope: !10172, inlinedAt: !17701)
!17837 = !DILocation(line: 377, column: 11, scope: !10172, inlinedAt: !17701)
!17838 = !DILocation(line: 377, column: 6, scope: !9917, inlinedAt: !17701)
!17839 = !DILocation(line: 377, column: 32, scope: !10172, inlinedAt: !17701)
!17840 = !DILocation(line: 378, column: 6, scope: !10177, inlinedAt: !17701)
!17841 = !DILocation(line: 378, column: 11, scope: !10177, inlinedAt: !17701)
!17842 = !DILocation(line: 378, column: 6, scope: !9917, inlinedAt: !17701)
!17843 = !DILocation(line: 378, column: 32, scope: !10177, inlinedAt: !17701)
!17844 = !DILocation(line: 379, column: 6, scope: !10182, inlinedAt: !17701)
!17845 = !DILocation(line: 379, column: 11, scope: !10182, inlinedAt: !17701)
!17846 = !DILocation(line: 379, column: 6, scope: !9917, inlinedAt: !17701)
!17847 = !DILocation(line: 379, column: 33, scope: !10182, inlinedAt: !17701)
!17848 = !DILocation(line: 380, column: 6, scope: !10187, inlinedAt: !17701)
!17849 = !DILocation(line: 380, column: 11, scope: !10187, inlinedAt: !17701)
!17850 = !DILocation(line: 380, column: 6, scope: !9917, inlinedAt: !17701)
!17851 = !DILocation(line: 380, column: 33, scope: !10187, inlinedAt: !17701)
!17852 = !DILocation(line: 381, column: 6, scope: !10192, inlinedAt: !17701)
!17853 = !DILocation(line: 381, column: 11, scope: !10192, inlinedAt: !17701)
!17854 = !DILocation(line: 381, column: 6, scope: !9917, inlinedAt: !17701)
!17855 = !DILocation(line: 381, column: 33, scope: !10192, inlinedAt: !17701)
!17856 = !DILocation(line: 382, column: 2, scope: !10197, inlinedAt: !17701)
!17857 = !DILocation(line: 382, column: 2, scope: !10201, inlinedAt: !17701)
!17858 = !DILocation(line: 382, column: 2, scope: !10202, inlinedAt: !17701)
!17859 = !DILocation(line: 386, column: 1, scope: !9917, inlinedAt: !17701)
!17860 = !DILocation(line: 547, column: 9, scope: !9896, inlinedAt: !17694)
!17861 = !DILocation(line: 549, column: 8, scope: !10208, inlinedAt: !17694)
!17862 = !DILocation(line: 549, column: 7, scope: !9896, inlinedAt: !17694)
!17863 = !DILocation(line: 550, column: 4, scope: !10208, inlinedAt: !17694)
!17864 = !DILocation(line: 553, column: 33, scope: !9896, inlinedAt: !17694)
!17865 = !DILocation(line: 325, column: 6, scope: !10213, inlinedAt: !17699)
!17866 = !DILocation(line: 325, column: 6, scope: !9911, inlinedAt: !17699)
!17867 = !DILocation(line: 326, column: 3, scope: !10213, inlinedAt: !17699)
!17868 = !DILocation(line: 332, column: 9, scope: !9911, inlinedAt: !17699)
!17869 = !DILocation(line: 332, column: 15, scope: !9911, inlinedAt: !17699)
!17870 = !DILocation(line: 332, column: 2, scope: !9911, inlinedAt: !17699)
!17871 = !DILocation(line: 336, column: 1, scope: !9911, inlinedAt: !17699)
!17872 = !DILocation(line: 553, column: 5, scope: !9896, inlinedAt: !17694)
!17873 = !DILocation(line: 553, column: 41, scope: !9896, inlinedAt: !17694)
!17874 = !DILocation(line: 554, column: 5, scope: !9896, inlinedAt: !17694)
!17875 = !DILocation(line: 554, column: 12, scope: !9896, inlinedAt: !17694)
!17876 = !DILocation(line: 448, column: 31, scope: !9891, inlinedAt: !17693)
!17877 = !DILocation(line: 448, column: 34, scope: !9891, inlinedAt: !17693)
!17878 = !DILocation(line: 448, column: 14, scope: !9891, inlinedAt: !17693)
!17879 = !DILocation(line: 450, column: 22, scope: !9891, inlinedAt: !17693)
!17880 = !DILocation(line: 450, column: 25, scope: !9891, inlinedAt: !17693)
!17881 = !DILocation(line: 450, column: 30, scope: !9891, inlinedAt: !17693)
!17882 = !DILocation(line: 450, column: 36, scope: !9891, inlinedAt: !17693)
!17883 = !DILocation(line: 450, column: 8, scope: !9891, inlinedAt: !17693)
!17884 = !DILocation(line: 450, column: 6, scope: !9891, inlinedAt: !17693)
!17885 = !DILocation(line: 451, column: 9, scope: !9891, inlinedAt: !17693)
!17886 = !DILocation(line: 552, column: 3, scope: !9896, inlinedAt: !17694)
!17887 = !DILocation(line: 557, column: 19, scope: !9898, inlinedAt: !17694)
!17888 = !DILocation(line: 557, column: 25, scope: !9898, inlinedAt: !17694)
!17889 = !DILocation(line: 557, column: 9, scope: !9898, inlinedAt: !17694)
!17890 = !DILocation(line: 557, column: 2, scope: !9898, inlinedAt: !17694)
!17891 = !DILocation(line: 558, column: 1, scope: !9898, inlinedAt: !17694)
!17892 = !DILocation(line: 664, column: 2, scope: !17691)
