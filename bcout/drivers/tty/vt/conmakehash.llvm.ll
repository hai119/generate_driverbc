; ModuleID = '../bcout/drivers/tty/vt/conmakehash.llvm.bc'
source_filename = "drivers/tty/vt/conmakehash.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque

@.str = private unnamed_addr constant [2 x i8] c"-\00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [6 x i8] c"stdin\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@unicount = common dso_local global [256 x i32] zeroinitializer, align 16, !dbg !0
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.3 = private unnamed_addr constant [28 x i8] c"%s: Warning: line too long\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Bad input line: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [49 x i8] c"%s: Glyph number (0x%x) larger than font length\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"%s: Bad end of range (0x%x)\0A\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"idem\00", align 1
@.str.8 = private unnamed_addr constant [81 x i8] c"%s: Corresponding to a range of font positions, there should be a Unicode range\0A\00", align 1
@.str.9 = private unnamed_addr constant [70 x i8] c"%s: Bad Unicode range corresponding to font position range 0x%x-0x%x\0A\00", align 1
@.str.10 = private unnamed_addr constant [85 x i8] c"%s: Unicode range U+%x-U+%x not of the same length as font position range 0x%x-0x%x\0A\00", align 1
@.str.11 = private unnamed_addr constant [32 x i8] c"%s: trailing junk (%s) ignored\0A\00", align 1
@.str.12 = private unnamed_addr constant [161 x i8] c"/*\0A * Do not edit this file; it was automatically generated by\0A *\0A * conmakehash %s > [this file]\0A *\0A */\0A\0A#include <linux/types.h>\0A\0Au8 dfont_unicount[%d] = \0A{\0A\09\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"%3d\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"\0A};\0A\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c",\0A\09\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c", \00", align 1
@.str.17 = private unnamed_addr constant [31 x i8] c"\0Au16 dfont_unitable[%d] = \0A{\0A\09\00", align 1
@.str.18 = private unnamed_addr constant [7 x i8] c"0x%04x\00", align 1
@unitable = common dso_local global [256 x [255 x i16]] zeroinitializer, align 16, !dbg !26
@.str.19 = private unnamed_addr constant [67 x i8] c"Usage: \0A        %s chartable [hashsize] [hashstep] [maxhashlevel]\0A\00", align 1
@.str.20 = private unnamed_addr constant [43 x i8] c"ERROR: Only 255 unicodes/glyph permitted!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 !dbg !39 {
entry:
  %retval = alloca i32, align 4
  %argc.addr = alloca i32, align 4
  %argv.addr = alloca i8**, align 8
  %ctbl = alloca %struct._IO_FILE*, align 8
  %tblname = alloca i8*, align 8
  %buffer = alloca [65536 x i8], align 16
  %fontlen = alloca i32, align 4
  %i = alloca i32, align 4
  %nuni = alloca i32, align 4
  %nent = alloca i32, align 4
  %fp0 = alloca i32, align 4
  %fp1 = alloca i32, align 4
  %un0 = alloca i32, align 4
  %un1 = alloca i32, align 4
  %p = alloca i8*, align 8
  %p1 = alloca i8*, align 8
  store i32 0, i32* %retval, align 4
  store i32 %argc, i32* %argc.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %argc.addr, metadata !46, metadata !DIExpression()), !dbg !47
  store i8** %argv, i8*** %argv.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %argv.addr, metadata !48, metadata !DIExpression()), !dbg !49
  call void @llvm.dbg.declare(metadata %struct._IO_FILE** %ctbl, metadata !50, metadata !DIExpression()), !dbg !109
  call void @llvm.dbg.declare(metadata i8** %tblname, metadata !110, metadata !DIExpression()), !dbg !111
  call void @llvm.dbg.declare(metadata [65536 x i8]* %buffer, metadata !112, metadata !DIExpression()), !dbg !116
  call void @llvm.dbg.declare(metadata i32* %fontlen, metadata !117, metadata !DIExpression()), !dbg !118
  call void @llvm.dbg.declare(metadata i32* %i, metadata !119, metadata !DIExpression()), !dbg !120
  call void @llvm.dbg.declare(metadata i32* %nuni, metadata !121, metadata !DIExpression()), !dbg !122
  call void @llvm.dbg.declare(metadata i32* %nent, metadata !123, metadata !DIExpression()), !dbg !124
  call void @llvm.dbg.declare(metadata i32* %fp0, metadata !125, metadata !DIExpression()), !dbg !126
  call void @llvm.dbg.declare(metadata i32* %fp1, metadata !127, metadata !DIExpression()), !dbg !128
  call void @llvm.dbg.declare(metadata i32* %un0, metadata !129, metadata !DIExpression()), !dbg !130
  call void @llvm.dbg.declare(metadata i32* %un1, metadata !131, metadata !DIExpression()), !dbg !132
  call void @llvm.dbg.declare(metadata i8** %p, metadata !133, metadata !DIExpression()), !dbg !134
  call void @llvm.dbg.declare(metadata i8** %p1, metadata !135, metadata !DIExpression()), !dbg !136
  %0 = load i32, i32* %argc.addr, align 4, !dbg !137
  %cmp = icmp slt i32 %0, 2, !dbg !139
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !140

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* %argc.addr, align 4, !dbg !141
  %cmp1 = icmp sgt i32 %1, 5, !dbg !142
  br i1 %cmp1, label %if.then, label %if.end, !dbg !143

if.then:                                          ; preds = %lor.lhs.false, %entry
  %2 = load i8**, i8*** %argv.addr, align 8, !dbg !144
  %arrayidx = getelementptr inbounds i8*, i8** %2, i64 0, !dbg !144
  %3 = load i8*, i8** %arrayidx, align 8, !dbg !144
  call void @usage(i8* %3), !dbg !145
  br label %if.end, !dbg !145

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %4 = load i8**, i8*** %argv.addr, align 8, !dbg !146
  %arrayidx2 = getelementptr inbounds i8*, i8** %4, i64 1, !dbg !146
  %5 = load i8*, i8** %arrayidx2, align 8, !dbg !146
  %call = call i32 @strcmp(i8* %5, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #7, !dbg !148
  %tobool = icmp ne i32 %call, 0, !dbg !148
  br i1 %tobool, label %if.else, label %if.then3, !dbg !149

if.then3:                                         ; preds = %if.end
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8, !dbg !150
  store %struct._IO_FILE* %6, %struct._IO_FILE** %ctbl, align 8, !dbg !152
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i8** %tblname, align 8, !dbg !153
  br label %if.end9, !dbg !154

if.else:                                          ; preds = %if.end
  %7 = load i8**, i8*** %argv.addr, align 8, !dbg !155
  %arrayidx4 = getelementptr inbounds i8*, i8** %7, i64 1, !dbg !155
  %8 = load i8*, i8** %arrayidx4, align 8, !dbg !155
  store i8* %8, i8** %tblname, align 8, !dbg !157
  %call5 = call %struct._IO_FILE* @fopen(i8* %8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0)), !dbg !158
  store %struct._IO_FILE* %call5, %struct._IO_FILE** %ctbl, align 8, !dbg !159
  %9 = load %struct._IO_FILE*, %struct._IO_FILE** %ctbl, align 8, !dbg !160
  %tobool6 = icmp ne %struct._IO_FILE* %9, null, !dbg !160
  br i1 %tobool6, label %if.end8, label %if.then7, !dbg !162

if.then7:                                         ; preds = %if.else
  %10 = load i8*, i8** %tblname, align 8, !dbg !163
  call void @perror(i8* %10), !dbg !165
  call void @exit(i32 66) #8, !dbg !166
  unreachable, !dbg !166

if.end8:                                          ; preds = %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then3
  store i32 256, i32* %fontlen, align 4, !dbg !167
  store i32 0, i32* %i, align 4, !dbg !168
  br label %for.cond, !dbg !170

for.cond:                                         ; preds = %for.inc, %if.end9
  %11 = load i32, i32* %i, align 4, !dbg !171
  %12 = load i32, i32* %fontlen, align 4, !dbg !173
  %cmp10 = icmp slt i32 %11, %12, !dbg !174
  br i1 %cmp10, label %for.body, label %for.end, !dbg !175

for.body:                                         ; preds = %for.cond
  %13 = load i32, i32* %i, align 4, !dbg !176
  %idxprom = sext i32 %13 to i64, !dbg !177
  %arrayidx11 = getelementptr inbounds [256 x i32], [256 x i32]* @unicount, i64 0, i64 %idxprom, !dbg !177
  store i32 0, i32* %arrayidx11, align 4, !dbg !178
  br label %for.inc, !dbg !177

for.inc:                                          ; preds = %for.body
  %14 = load i32, i32* %i, align 4, !dbg !179
  %inc = add nsw i32 %14, 1, !dbg !179
  store i32 %inc, i32* %i, align 4, !dbg !179
  br label %for.cond, !dbg !180, !llvm.loop !181

for.end:                                          ; preds = %for.cond
  br label %while.cond, !dbg !183

while.cond:                                       ; preds = %if.end185, %if.then34, %for.end
  %arraydecay = getelementptr inbounds [65536 x i8], [65536 x i8]* %buffer, i64 0, i64 0, !dbg !184
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** %ctbl, align 8, !dbg !185
  %call12 = call i8* @fgets(i8* %arraydecay, i32 65536, %struct._IO_FILE* %15), !dbg !186
  %cmp13 = icmp ne i8* %call12, null, !dbg !187
  br i1 %cmp13, label %while.body, label %while.end186, !dbg !183

while.body:                                       ; preds = %while.cond
  %arraydecay14 = getelementptr inbounds [65536 x i8], [65536 x i8]* %buffer, i64 0, i64 0, !dbg !188
  %call15 = call i8* @strchr(i8* %arraydecay14, i32 10) #7, !dbg !191
  store i8* %call15, i8** %p, align 8, !dbg !192
  %cmp16 = icmp ne i8* %call15, null, !dbg !193
  br i1 %cmp16, label %if.then17, label %if.else18, !dbg !194

if.then17:                                        ; preds = %while.body
  %16 = load i8*, i8** %p, align 8, !dbg !195
  store i8 0, i8* %16, align 1, !dbg !196
  br label %if.end20, !dbg !197

if.else18:                                        ; preds = %while.body
  %17 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !198
  %18 = load i8*, i8** %tblname, align 8, !dbg !199
  %call19 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %17, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i8* %18), !dbg !200
  br label %if.end20

if.end20:                                         ; preds = %if.else18, %if.then17
  %arraydecay21 = getelementptr inbounds [65536 x i8], [65536 x i8]* %buffer, i64 0, i64 0, !dbg !201
  store i8* %arraydecay21, i8** %p, align 8, !dbg !202
  br label %while.cond22, !dbg !203

while.cond22:                                     ; preds = %while.body28, %if.end20
  %19 = load i8*, i8** %p, align 8, !dbg !204
  %20 = load i8, i8* %19, align 1, !dbg !205
  %conv = sext i8 %20 to i32, !dbg !205
  %cmp23 = icmp eq i32 %conv, 32, !dbg !206
  br i1 %cmp23, label %lor.end, label %lor.rhs, !dbg !207

lor.rhs:                                          ; preds = %while.cond22
  %21 = load i8*, i8** %p, align 8, !dbg !208
  %22 = load i8, i8* %21, align 1, !dbg !209
  %conv25 = sext i8 %22 to i32, !dbg !209
  %cmp26 = icmp eq i32 %conv25, 9, !dbg !210
  br label %lor.end, !dbg !207

lor.end:                                          ; preds = %lor.rhs, %while.cond22
  %23 = phi i1 [ true, %while.cond22 ], [ %cmp26, %lor.rhs ]
  br i1 %23, label %while.body28, label %while.end, !dbg !203

while.body28:                                     ; preds = %lor.end
  %24 = load i8*, i8** %p, align 8, !dbg !211
  %incdec.ptr = getelementptr inbounds i8, i8* %24, i32 1, !dbg !211
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !211
  br label %while.cond22, !dbg !203, !llvm.loop !212

while.end:                                        ; preds = %lor.end
  %25 = load i8*, i8** %p, align 8, !dbg !213
  %26 = load i8, i8* %25, align 1, !dbg !215
  %tobool29 = icmp ne i8 %26, 0, !dbg !215
  br i1 %tobool29, label %lor.lhs.false30, label %if.then34, !dbg !216

lor.lhs.false30:                                  ; preds = %while.end
  %27 = load i8*, i8** %p, align 8, !dbg !217
  %28 = load i8, i8* %27, align 1, !dbg !218
  %conv31 = sext i8 %28 to i32, !dbg !218
  %cmp32 = icmp eq i32 %conv31, 35, !dbg !219
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !220

if.then34:                                        ; preds = %lor.lhs.false30, %while.end
  br label %while.cond, !dbg !221, !llvm.loop !222

if.end35:                                         ; preds = %lor.lhs.false30
  %29 = load i8*, i8** %p, align 8, !dbg !224
  %call36 = call i64 @strtol(i8* %29, i8** %p1, i32 0) #9, !dbg !225
  %conv37 = trunc i64 %call36 to i32, !dbg !225
  store i32 %conv37, i32* %fp0, align 4, !dbg !226
  %30 = load i8*, i8** %p1, align 8, !dbg !227
  %31 = load i8*, i8** %p, align 8, !dbg !229
  %cmp38 = icmp eq i8* %30, %31, !dbg !230
  br i1 %cmp38, label %if.then40, label %if.end43, !dbg !231

if.then40:                                        ; preds = %if.end35
  %32 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !232
  %arraydecay41 = getelementptr inbounds [65536 x i8], [65536 x i8]* %buffer, i64 0, i64 0, !dbg !234
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %32, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i8* %arraydecay41), !dbg !235
  call void @exit(i32 65) #8, !dbg !236
  unreachable, !dbg !236

if.end43:                                         ; preds = %if.end35
  %33 = load i8*, i8** %p1, align 8, !dbg !237
  store i8* %33, i8** %p, align 8, !dbg !238
  br label %while.cond44, !dbg !239

while.cond44:                                     ; preds = %while.body53, %if.end43
  %34 = load i8*, i8** %p, align 8, !dbg !240
  %35 = load i8, i8* %34, align 1, !dbg !241
  %conv45 = sext i8 %35 to i32, !dbg !241
  %cmp46 = icmp eq i32 %conv45, 32, !dbg !242
  br i1 %cmp46, label %lor.end52, label %lor.rhs48, !dbg !243

lor.rhs48:                                        ; preds = %while.cond44
  %36 = load i8*, i8** %p, align 8, !dbg !244
  %37 = load i8, i8* %36, align 1, !dbg !245
  %conv49 = sext i8 %37 to i32, !dbg !245
  %cmp50 = icmp eq i32 %conv49, 9, !dbg !246
  br label %lor.end52, !dbg !243

lor.end52:                                        ; preds = %lor.rhs48, %while.cond44
  %38 = phi i1 [ true, %while.cond44 ], [ %cmp50, %lor.rhs48 ]
  br i1 %38, label %while.body53, label %while.end55, !dbg !239

while.body53:                                     ; preds = %lor.end52
  %39 = load i8*, i8** %p, align 8, !dbg !247
  %incdec.ptr54 = getelementptr inbounds i8, i8* %39, i32 1, !dbg !247
  store i8* %incdec.ptr54, i8** %p, align 8, !dbg !247
  br label %while.cond44, !dbg !239, !llvm.loop !248

while.end55:                                      ; preds = %lor.end52
  %40 = load i8*, i8** %p, align 8, !dbg !249
  %41 = load i8, i8* %40, align 1, !dbg !251
  %conv56 = sext i8 %41 to i32, !dbg !251
  %cmp57 = icmp eq i32 %conv56, 45, !dbg !252
  br i1 %cmp57, label %if.then59, label %if.else69, !dbg !253

if.then59:                                        ; preds = %while.end55
  %42 = load i8*, i8** %p, align 8, !dbg !254
  %incdec.ptr60 = getelementptr inbounds i8, i8* %42, i32 1, !dbg !254
  store i8* %incdec.ptr60, i8** %p, align 8, !dbg !254
  %43 = load i8*, i8** %p, align 8, !dbg !256
  %call61 = call i64 @strtol(i8* %43, i8** %p1, i32 0) #9, !dbg !257
  %conv62 = trunc i64 %call61 to i32, !dbg !257
  store i32 %conv62, i32* %fp1, align 4, !dbg !258
  %44 = load i8*, i8** %p1, align 8, !dbg !259
  %45 = load i8*, i8** %p, align 8, !dbg !261
  %cmp63 = icmp eq i8* %44, %45, !dbg !262
  br i1 %cmp63, label %if.then65, label %if.end68, !dbg !263

if.then65:                                        ; preds = %if.then59
  %46 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !264
  %arraydecay66 = getelementptr inbounds [65536 x i8], [65536 x i8]* %buffer, i64 0, i64 0, !dbg !266
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %46, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0), i8* %arraydecay66), !dbg !267
  call void @exit(i32 65) #8, !dbg !268
  unreachable, !dbg !268

if.end68:                                         ; preds = %if.then59
  %47 = load i8*, i8** %p1, align 8, !dbg !269
  store i8* %47, i8** %p, align 8, !dbg !270
  br label %if.end70, !dbg !271

if.else69:                                        ; preds = %while.end55
  store i32 0, i32* %fp1, align 4, !dbg !272
  br label %if.end70

if.end70:                                         ; preds = %if.else69, %if.end68
  %48 = load i32, i32* %fp0, align 4, !dbg !273
  %cmp71 = icmp slt i32 %48, 0, !dbg !275
  br i1 %cmp71, label %if.then76, label %lor.lhs.false73, !dbg !276

lor.lhs.false73:                                  ; preds = %if.end70
  %49 = load i32, i32* %fp0, align 4, !dbg !277
  %50 = load i32, i32* %fontlen, align 4, !dbg !278
  %cmp74 = icmp sge i32 %49, %50, !dbg !279
  br i1 %cmp74, label %if.then76, label %if.end78, !dbg !280

if.then76:                                        ; preds = %lor.lhs.false73, %if.end70
  %51 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !281
  %52 = load i8*, i8** %tblname, align 8, !dbg !283
  %53 = load i32, i32* %fp0, align 4, !dbg !284
  %call77 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %51, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5, i64 0, i64 0), i8* %52, i32 %53), !dbg !285
  call void @exit(i32 65) #8, !dbg !286
  unreachable, !dbg !286

if.end78:                                         ; preds = %lor.lhs.false73
  %54 = load i32, i32* %fp1, align 4, !dbg !287
  %tobool79 = icmp ne i32 %54, 0, !dbg !287
  br i1 %tobool79, label %land.lhs.true, label %if.end87, !dbg !289

land.lhs.true:                                    ; preds = %if.end78
  %55 = load i32, i32* %fp1, align 4, !dbg !290
  %56 = load i32, i32* %fp0, align 4, !dbg !291
  %cmp80 = icmp slt i32 %55, %56, !dbg !292
  br i1 %cmp80, label %if.then85, label %lor.lhs.false82, !dbg !293

lor.lhs.false82:                                  ; preds = %land.lhs.true
  %57 = load i32, i32* %fp1, align 4, !dbg !294
  %58 = load i32, i32* %fontlen, align 4, !dbg !295
  %cmp83 = icmp sge i32 %57, %58, !dbg !296
  br i1 %cmp83, label %if.then85, label %if.end87, !dbg !297

if.then85:                                        ; preds = %lor.lhs.false82, %land.lhs.true
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !298
  %60 = load i8*, i8** %tblname, align 8, !dbg !300
  %61 = load i32, i32* %fp1, align 4, !dbg !301
  %call86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i8* %60, i32 %61), !dbg !302
  call void @exit(i32 65) #8, !dbg !303
  unreachable, !dbg !303

if.end87:                                         ; preds = %lor.lhs.false82, %if.end78
  %62 = load i32, i32* %fp1, align 4, !dbg !304
  %tobool88 = icmp ne i32 %62, 0, !dbg !304
  br i1 %tobool88, label %if.then89, label %if.else157, !dbg !306

if.then89:                                        ; preds = %if.end87
  br label %while.cond90, !dbg !307

while.cond90:                                     ; preds = %while.body99, %if.then89
  %63 = load i8*, i8** %p, align 8, !dbg !309
  %64 = load i8, i8* %63, align 1, !dbg !310
  %conv91 = sext i8 %64 to i32, !dbg !310
  %cmp92 = icmp eq i32 %conv91, 32, !dbg !311
  br i1 %cmp92, label %lor.end98, label %lor.rhs94, !dbg !312

lor.rhs94:                                        ; preds = %while.cond90
  %65 = load i8*, i8** %p, align 8, !dbg !313
  %66 = load i8, i8* %65, align 1, !dbg !314
  %conv95 = sext i8 %66 to i32, !dbg !314
  %cmp96 = icmp eq i32 %conv95, 9, !dbg !315
  br label %lor.end98, !dbg !312

lor.end98:                                        ; preds = %lor.rhs94, %while.cond90
  %67 = phi i1 [ true, %while.cond90 ], [ %cmp96, %lor.rhs94 ]
  br i1 %67, label %while.body99, label %while.end101, !dbg !307

while.body99:                                     ; preds = %lor.end98
  %68 = load i8*, i8** %p, align 8, !dbg !316
  %incdec.ptr100 = getelementptr inbounds i8, i8* %68, i32 1, !dbg !316
  store i8* %incdec.ptr100, i8** %p, align 8, !dbg !316
  br label %while.cond90, !dbg !307, !llvm.loop !317

while.end101:                                     ; preds = %lor.end98
  %69 = load i8*, i8** %p, align 8, !dbg !318
  %call102 = call i32 @strncmp(i8* %69, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i64 4) #7, !dbg !320
  %tobool103 = icmp ne i32 %call102, 0, !dbg !320
  br i1 %tobool103, label %if.else112, label %if.then104, !dbg !321

if.then104:                                       ; preds = %while.end101
  %70 = load i32, i32* %fp0, align 4, !dbg !322
  store i32 %70, i32* %i, align 4, !dbg !325
  br label %for.cond105, !dbg !326

for.cond105:                                      ; preds = %for.inc109, %if.then104
  %71 = load i32, i32* %i, align 4, !dbg !327
  %72 = load i32, i32* %fp1, align 4, !dbg !329
  %cmp106 = icmp sle i32 %71, %72, !dbg !330
  br i1 %cmp106, label %for.body108, label %for.end111, !dbg !331

for.body108:                                      ; preds = %for.cond105
  %73 = load i32, i32* %i, align 4, !dbg !332
  %74 = load i32, i32* %i, align 4, !dbg !333
  call void @addpair(i32 %73, i32 %74), !dbg !334
  br label %for.inc109, !dbg !334

for.inc109:                                       ; preds = %for.body108
  %75 = load i32, i32* %i, align 4, !dbg !335
  %inc110 = add nsw i32 %75, 1, !dbg !335
  store i32 %inc110, i32* %i, align 4, !dbg !335
  br label %for.cond105, !dbg !336, !llvm.loop !337

for.end111:                                       ; preds = %for.cond105
  %76 = load i8*, i8** %p, align 8, !dbg !339
  %add.ptr = getelementptr inbounds i8, i8* %76, i64 4, !dbg !339
  store i8* %add.ptr, i8** %p, align 8, !dbg !339
  br label %if.end156, !dbg !340

if.else112:                                       ; preds = %while.end101
  %call113 = call i32 @getunicode(i8** %p), !dbg !341
  store i32 %call113, i32* %un0, align 4, !dbg !343
  br label %while.cond114, !dbg !344

while.cond114:                                    ; preds = %while.body123, %if.else112
  %77 = load i8*, i8** %p, align 8, !dbg !345
  %78 = load i8, i8* %77, align 1, !dbg !346
  %conv115 = sext i8 %78 to i32, !dbg !346
  %cmp116 = icmp eq i32 %conv115, 32, !dbg !347
  br i1 %cmp116, label %lor.end122, label %lor.rhs118, !dbg !348

lor.rhs118:                                       ; preds = %while.cond114
  %79 = load i8*, i8** %p, align 8, !dbg !349
  %80 = load i8, i8* %79, align 1, !dbg !350
  %conv119 = sext i8 %80 to i32, !dbg !350
  %cmp120 = icmp eq i32 %conv119, 9, !dbg !351
  br label %lor.end122, !dbg !348

lor.end122:                                       ; preds = %lor.rhs118, %while.cond114
  %81 = phi i1 [ true, %while.cond114 ], [ %cmp120, %lor.rhs118 ]
  br i1 %81, label %while.body123, label %while.end125, !dbg !344

while.body123:                                    ; preds = %lor.end122
  %82 = load i8*, i8** %p, align 8, !dbg !352
  %incdec.ptr124 = getelementptr inbounds i8, i8* %82, i32 1, !dbg !352
  store i8* %incdec.ptr124, i8** %p, align 8, !dbg !352
  br label %while.cond114, !dbg !344, !llvm.loop !353

while.end125:                                     ; preds = %lor.end122
  %83 = load i8*, i8** %p, align 8, !dbg !354
  %84 = load i8, i8* %83, align 1, !dbg !356
  %conv126 = sext i8 %84 to i32, !dbg !356
  %cmp127 = icmp ne i32 %conv126, 45, !dbg !357
  br i1 %cmp127, label %if.then129, label %if.end131, !dbg !358

if.then129:                                       ; preds = %while.end125
  %85 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !359
  %86 = load i8*, i8** %tblname, align 8, !dbg !361
  %call130 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %85, i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.8, i64 0, i64 0), i8* %86), !dbg !362
  call void @exit(i32 65) #8, !dbg !363
  unreachable, !dbg !363

if.end131:                                        ; preds = %while.end125
  %87 = load i8*, i8** %p, align 8, !dbg !364
  %incdec.ptr132 = getelementptr inbounds i8, i8* %87, i32 1, !dbg !364
  store i8* %incdec.ptr132, i8** %p, align 8, !dbg !364
  %call133 = call i32 @getunicode(i8** %p), !dbg !365
  store i32 %call133, i32* %un1, align 4, !dbg !366
  %88 = load i32, i32* %un0, align 4, !dbg !367
  %cmp134 = icmp slt i32 %88, 0, !dbg !369
  br i1 %cmp134, label %if.then139, label %lor.lhs.false136, !dbg !370

lor.lhs.false136:                                 ; preds = %if.end131
  %89 = load i32, i32* %un1, align 4, !dbg !371
  %cmp137 = icmp slt i32 %89, 0, !dbg !372
  br i1 %cmp137, label %if.then139, label %if.end141, !dbg !373

if.then139:                                       ; preds = %lor.lhs.false136, %if.end131
  %90 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !374
  %91 = load i8*, i8** %tblname, align 8, !dbg !376
  %92 = load i32, i32* %fp0, align 4, !dbg !377
  %93 = load i32, i32* %fp1, align 4, !dbg !378
  %call140 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %90, i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.9, i64 0, i64 0), i8* %91, i32 %92, i32 %93), !dbg !379
  call void @exit(i32 65) #8, !dbg !380
  unreachable, !dbg !380

if.end141:                                        ; preds = %lor.lhs.false136
  %94 = load i32, i32* %un1, align 4, !dbg !381
  %95 = load i32, i32* %un0, align 4, !dbg !383
  %sub = sub nsw i32 %94, %95, !dbg !384
  %96 = load i32, i32* %fp1, align 4, !dbg !385
  %97 = load i32, i32* %fp0, align 4, !dbg !386
  %sub142 = sub nsw i32 %96, %97, !dbg !387
  %cmp143 = icmp ne i32 %sub, %sub142, !dbg !388
  br i1 %cmp143, label %if.then145, label %if.end147, !dbg !389

if.then145:                                       ; preds = %if.end141
  %98 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !390
  %99 = load i8*, i8** %tblname, align 8, !dbg !392
  %100 = load i32, i32* %un0, align 4, !dbg !393
  %101 = load i32, i32* %un1, align 4, !dbg !394
  %102 = load i32, i32* %fp0, align 4, !dbg !395
  %103 = load i32, i32* %fp1, align 4, !dbg !396
  %call146 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %98, i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.10, i64 0, i64 0), i8* %99, i32 %100, i32 %101, i32 %102, i32 %103), !dbg !397
  call void @exit(i32 65) #8, !dbg !398
  unreachable, !dbg !398

if.end147:                                        ; preds = %if.end141
  %104 = load i32, i32* %fp0, align 4, !dbg !399
  store i32 %104, i32* %i, align 4, !dbg !401
  br label %for.cond148, !dbg !402

for.cond148:                                      ; preds = %for.inc153, %if.end147
  %105 = load i32, i32* %i, align 4, !dbg !403
  %106 = load i32, i32* %fp1, align 4, !dbg !405
  %cmp149 = icmp sle i32 %105, %106, !dbg !406
  br i1 %cmp149, label %for.body151, label %for.end155, !dbg !407

for.body151:                                      ; preds = %for.cond148
  %107 = load i32, i32* %i, align 4, !dbg !408
  %108 = load i32, i32* %un0, align 4, !dbg !409
  %109 = load i32, i32* %fp0, align 4, !dbg !410
  %sub152 = sub nsw i32 %108, %109, !dbg !411
  %110 = load i32, i32* %i, align 4, !dbg !412
  %add = add nsw i32 %sub152, %110, !dbg !413
  call void @addpair(i32 %107, i32 %add), !dbg !414
  br label %for.inc153, !dbg !414

for.inc153:                                       ; preds = %for.body151
  %111 = load i32, i32* %i, align 4, !dbg !415
  %inc154 = add nsw i32 %111, 1, !dbg !415
  store i32 %inc154, i32* %i, align 4, !dbg !415
  br label %for.cond148, !dbg !416, !llvm.loop !417

for.end155:                                       ; preds = %for.cond148
  br label %if.end156

if.end156:                                        ; preds = %for.end155, %for.end111
  br label %if.end164, !dbg !419

if.else157:                                       ; preds = %if.end87
  br label %while.cond158, !dbg !420

while.cond158:                                    ; preds = %while.body162, %if.else157
  %call159 = call i32 @getunicode(i8** %p), !dbg !422
  store i32 %call159, i32* %un0, align 4, !dbg !423
  %cmp160 = icmp sge i32 %call159, 0, !dbg !424
  br i1 %cmp160, label %while.body162, label %while.end163, !dbg !420

while.body162:                                    ; preds = %while.cond158
  %112 = load i32, i32* %fp0, align 4, !dbg !425
  %113 = load i32, i32* %un0, align 4, !dbg !426
  call void @addpair(i32 %112, i32 %113), !dbg !427
  br label %while.cond158, !dbg !420, !llvm.loop !428

while.end163:                                     ; preds = %while.cond158
  br label %if.end164

if.end164:                                        ; preds = %while.end163, %if.end156
  br label %while.cond165, !dbg !430

while.cond165:                                    ; preds = %while.body174, %if.end164
  %114 = load i8*, i8** %p, align 8, !dbg !431
  %115 = load i8, i8* %114, align 1, !dbg !432
  %conv166 = sext i8 %115 to i32, !dbg !432
  %cmp167 = icmp eq i32 %conv166, 32, !dbg !433
  br i1 %cmp167, label %lor.end173, label %lor.rhs169, !dbg !434

lor.rhs169:                                       ; preds = %while.cond165
  %116 = load i8*, i8** %p, align 8, !dbg !435
  %117 = load i8, i8* %116, align 1, !dbg !436
  %conv170 = sext i8 %117 to i32, !dbg !436
  %cmp171 = icmp eq i32 %conv170, 9, !dbg !437
  br label %lor.end173, !dbg !434

lor.end173:                                       ; preds = %lor.rhs169, %while.cond165
  %118 = phi i1 [ true, %while.cond165 ], [ %cmp171, %lor.rhs169 ]
  br i1 %118, label %while.body174, label %while.end176, !dbg !430

while.body174:                                    ; preds = %lor.end173
  %119 = load i8*, i8** %p, align 8, !dbg !438
  %incdec.ptr175 = getelementptr inbounds i8, i8* %119, i32 1, !dbg !438
  store i8* %incdec.ptr175, i8** %p, align 8, !dbg !438
  br label %while.cond165, !dbg !430, !llvm.loop !439

while.end176:                                     ; preds = %lor.end173
  %120 = load i8*, i8** %p, align 8, !dbg !440
  %121 = load i8, i8* %120, align 1, !dbg !442
  %conv177 = sext i8 %121 to i32, !dbg !442
  %tobool178 = icmp ne i32 %conv177, 0, !dbg !442
  br i1 %tobool178, label %land.lhs.true179, label %if.end185, !dbg !443

land.lhs.true179:                                 ; preds = %while.end176
  %122 = load i8*, i8** %p, align 8, !dbg !444
  %123 = load i8, i8* %122, align 1, !dbg !445
  %conv180 = sext i8 %123 to i32, !dbg !445
  %cmp181 = icmp ne i32 %conv180, 35, !dbg !446
  br i1 %cmp181, label %if.then183, label %if.end185, !dbg !447

if.then183:                                       ; preds = %land.lhs.true179
  %124 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !448
  %125 = load i8*, i8** %tblname, align 8, !dbg !449
  %126 = load i8*, i8** %p, align 8, !dbg !450
  %call184 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %124, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.11, i64 0, i64 0), i8* %125, i8* %126), !dbg !451
  br label %if.end185, !dbg !451

if.end185:                                        ; preds = %if.then183, %land.lhs.true179, %while.end176
  br label %while.cond, !dbg !183, !llvm.loop !222

while.end186:                                     ; preds = %while.cond
  %127 = load %struct._IO_FILE*, %struct._IO_FILE** %ctbl, align 8, !dbg !452
  %call187 = call i32 @fclose(%struct._IO_FILE* %127), !dbg !453
  store i32 0, i32* %nuni, align 4, !dbg !454
  store i32 0, i32* %i, align 4, !dbg !455
  br label %for.cond188, !dbg !457

for.cond188:                                      ; preds = %for.inc195, %while.end186
  %128 = load i32, i32* %i, align 4, !dbg !458
  %129 = load i32, i32* %fontlen, align 4, !dbg !460
  %cmp189 = icmp slt i32 %128, %129, !dbg !461
  br i1 %cmp189, label %for.body191, label %for.end197, !dbg !462

for.body191:                                      ; preds = %for.cond188
  %130 = load i32, i32* %i, align 4, !dbg !463
  %idxprom192 = sext i32 %130 to i64, !dbg !464
  %arrayidx193 = getelementptr inbounds [256 x i32], [256 x i32]* @unicount, i64 0, i64 %idxprom192, !dbg !464
  %131 = load i32, i32* %arrayidx193, align 4, !dbg !464
  %132 = load i32, i32* %nuni, align 4, !dbg !465
  %add194 = add nsw i32 %132, %131, !dbg !465
  store i32 %add194, i32* %nuni, align 4, !dbg !465
  br label %for.inc195, !dbg !466

for.inc195:                                       ; preds = %for.body191
  %133 = load i32, i32* %i, align 4, !dbg !467
  %inc196 = add nsw i32 %133, 1, !dbg !467
  store i32 %inc196, i32* %i, align 4, !dbg !467
  br label %for.cond188, !dbg !468, !llvm.loop !469

for.end197:                                       ; preds = %for.cond188
  %134 = load i8**, i8*** %argv.addr, align 8, !dbg !471
  %arrayidx198 = getelementptr inbounds i8*, i8** %134, i64 1, !dbg !471
  %135 = load i8*, i8** %arrayidx198, align 8, !dbg !471
  %136 = load i32, i32* %fontlen, align 4, !dbg !472
  %call199 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([161 x i8], [161 x i8]* @.str.12, i64 0, i64 0), i8* %135, i32 %136), !dbg !473
  store i32 0, i32* %i, align 4, !dbg !474
  br label %for.cond200, !dbg !476

for.cond200:                                      ; preds = %for.inc221, %for.end197
  %137 = load i32, i32* %i, align 4, !dbg !477
  %138 = load i32, i32* %fontlen, align 4, !dbg !479
  %cmp201 = icmp slt i32 %137, %138, !dbg !480
  br i1 %cmp201, label %for.body203, label %for.end223, !dbg !481

for.body203:                                      ; preds = %for.cond200
  %139 = load i32, i32* %i, align 4, !dbg !482
  %idxprom204 = sext i32 %139 to i64, !dbg !484
  %arrayidx205 = getelementptr inbounds [256 x i32], [256 x i32]* @unicount, i64 0, i64 %idxprom204, !dbg !484
  %140 = load i32, i32* %arrayidx205, align 4, !dbg !484
  %call206 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i32 %140), !dbg !485
  %141 = load i32, i32* %i, align 4, !dbg !486
  %142 = load i32, i32* %fontlen, align 4, !dbg !488
  %sub207 = sub nsw i32 %142, 1, !dbg !489
  %cmp208 = icmp eq i32 %141, %sub207, !dbg !490
  br i1 %cmp208, label %if.then210, label %if.else212, !dbg !491

if.then210:                                       ; preds = %for.body203
  %call211 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)), !dbg !492
  br label %if.end220, !dbg !492

if.else212:                                       ; preds = %for.body203
  %143 = load i32, i32* %i, align 4, !dbg !493
  %rem = srem i32 %143, 8, !dbg !495
  %cmp213 = icmp eq i32 %rem, 7, !dbg !496
  br i1 %cmp213, label %if.then215, label %if.else217, !dbg !497

if.then215:                                       ; preds = %if.else212
  %call216 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0)), !dbg !498
  br label %if.end219, !dbg !498

if.else217:                                       ; preds = %if.else212
  %call218 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0)), !dbg !499
  br label %if.end219

if.end219:                                        ; preds = %if.else217, %if.then215
  br label %if.end220

if.end220:                                        ; preds = %if.end219, %if.then210
  br label %for.inc221, !dbg !500

for.inc221:                                       ; preds = %if.end220
  %144 = load i32, i32* %i, align 4, !dbg !501
  %inc222 = add nsw i32 %144, 1, !dbg !501
  store i32 %inc222, i32* %i, align 4, !dbg !501
  br label %for.cond200, !dbg !502, !llvm.loop !503

for.end223:                                       ; preds = %for.cond200
  %145 = load i32, i32* %nuni, align 4, !dbg !505
  %call224 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.17, i64 0, i64 0), i32 %145), !dbg !506
  store i32 0, i32* %fp0, align 4, !dbg !507
  store i32 0, i32* %nent, align 4, !dbg !508
  store i32 0, i32* %i, align 4, !dbg !509
  br label %for.cond225, !dbg !511

for.cond225:                                      ; preds = %for.inc259, %for.end223
  %146 = load i32, i32* %i, align 4, !dbg !512
  %147 = load i32, i32* %nuni, align 4, !dbg !514
  %cmp226 = icmp slt i32 %146, %147, !dbg !515
  br i1 %cmp226, label %for.body228, label %for.end261, !dbg !516

for.body228:                                      ; preds = %for.cond225
  br label %while.cond229, !dbg !517

while.cond229:                                    ; preds = %while.body234, %for.body228
  %148 = load i32, i32* %nent, align 4, !dbg !519
  %149 = load i32, i32* %fp0, align 4, !dbg !520
  %idxprom230 = sext i32 %149 to i64, !dbg !521
  %arrayidx231 = getelementptr inbounds [256 x i32], [256 x i32]* @unicount, i64 0, i64 %idxprom230, !dbg !521
  %150 = load i32, i32* %arrayidx231, align 4, !dbg !521
  %cmp232 = icmp sge i32 %148, %150, !dbg !522
  br i1 %cmp232, label %while.body234, label %while.end236, !dbg !517

while.body234:                                    ; preds = %while.cond229
  %151 = load i32, i32* %fp0, align 4, !dbg !523
  %inc235 = add nsw i32 %151, 1, !dbg !523
  store i32 %inc235, i32* %fp0, align 4, !dbg !523
  store i32 0, i32* %nent, align 4, !dbg !525
  br label %while.cond229, !dbg !517, !llvm.loop !526

while.end236:                                     ; preds = %while.cond229
  %152 = load i32, i32* %fp0, align 4, !dbg !528
  %idxprom237 = sext i32 %152 to i64, !dbg !529
  %arrayidx238 = getelementptr inbounds [256 x [255 x i16]], [256 x [255 x i16]]* @unitable, i64 0, i64 %idxprom237, !dbg !529
  %153 = load i32, i32* %nent, align 4, !dbg !530
  %inc239 = add nsw i32 %153, 1, !dbg !530
  store i32 %inc239, i32* %nent, align 4, !dbg !530
  %idxprom240 = sext i32 %153 to i64, !dbg !529
  %arrayidx241 = getelementptr inbounds [255 x i16], [255 x i16]* %arrayidx238, i64 0, i64 %idxprom240, !dbg !529
  %154 = load i16, i16* %arrayidx241, align 2, !dbg !529
  %conv242 = zext i16 %154 to i32, !dbg !529
  %call243 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.18, i64 0, i64 0), i32 %conv242), !dbg !531
  %155 = load i32, i32* %i, align 4, !dbg !532
  %156 = load i32, i32* %nuni, align 4, !dbg !534
  %sub244 = sub nsw i32 %156, 1, !dbg !535
  %cmp245 = icmp eq i32 %155, %sub244, !dbg !536
  br i1 %cmp245, label %if.then247, label %if.else249, !dbg !537

if.then247:                                       ; preds = %while.end236
  %call248 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0)), !dbg !538
  br label %if.end258, !dbg !538

if.else249:                                       ; preds = %while.end236
  %157 = load i32, i32* %i, align 4, !dbg !539
  %rem250 = srem i32 %157, 8, !dbg !541
  %cmp251 = icmp eq i32 %rem250, 7, !dbg !542
  br i1 %cmp251, label %if.then253, label %if.else255, !dbg !543

if.then253:                                       ; preds = %if.else249
  %call254 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0)), !dbg !544
  br label %if.end257, !dbg !544

if.else255:                                       ; preds = %if.else249
  %call256 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0)), !dbg !545
  br label %if.end257

if.end257:                                        ; preds = %if.else255, %if.then253
  br label %if.end258

if.end258:                                        ; preds = %if.end257, %if.then247
  br label %for.inc259, !dbg !546

for.inc259:                                       ; preds = %if.end258
  %158 = load i32, i32* %i, align 4, !dbg !547
  %inc260 = add nsw i32 %158, 1, !dbg !547
  store i32 %inc260, i32* %i, align 4, !dbg !547
  br label %for.cond225, !dbg !548, !llvm.loop !549

for.end261:                                       ; preds = %for.cond225
  call void @exit(i32 0) #8, !dbg !551
  unreachable, !dbg !551
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind optnone uwtable
define internal void @usage(i8* %argv0) #0 !dbg !552 {
entry:
  %argv0.addr = alloca i8*, align 8
  store i8* %argv0, i8** %argv0.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %argv0.addr, metadata !555, metadata !DIExpression()), !dbg !556
  %0 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !557
  %1 = load i8*, i8** %argv0.addr, align 8, !dbg !558
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %0, i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.19, i64 0, i64 0), i8* %1), !dbg !559
  call void @exit(i32 64) #8, !dbg !560
  unreachable, !dbg !560
}

; Function Attrs: nounwind readonly
declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local %struct._IO_FILE* @fopen(i8*, i8*) #3

declare dso_local void @perror(i8*) #3

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #4

declare dso_local i8* @fgets(i8*, i32, %struct._IO_FILE*) #3

; Function Attrs: nounwind readonly
declare dso_local i8* @strchr(i8*, i32) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #3

; Function Attrs: nounwind
declare dso_local i64 @strtol(i8*, i8**, i32) #5

; Function Attrs: nounwind readonly
declare dso_local i32 @strncmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind optnone uwtable
define internal void @addpair(i32 %fp, i32 %un) #0 !dbg !561 {
entry:
  %fp.addr = alloca i32, align 4
  %un.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %fp, i32* %fp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fp.addr, metadata !564, metadata !DIExpression()), !dbg !565
  store i32 %un, i32* %un.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %un.addr, metadata !566, metadata !DIExpression()), !dbg !567
  call void @llvm.dbg.declare(metadata i32* %i, metadata !568, metadata !DIExpression()), !dbg !569
  %0 = load i32, i32* %un.addr, align 4, !dbg !570
  %cmp = icmp sle i32 %0, 65534, !dbg !572
  br i1 %cmp, label %if.then, label %if.end25, !dbg !573

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !574
  br label %for.cond, !dbg !577

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4, !dbg !578
  %2 = load i32, i32* %fp.addr, align 4, !dbg !580
  %idxprom = sext i32 %2 to i64, !dbg !581
  %arrayidx = getelementptr inbounds [256 x i32], [256 x i32]* @unicount, i64 0, i64 %idxprom, !dbg !581
  %3 = load i32, i32* %arrayidx, align 4, !dbg !581
  %cmp1 = icmp slt i32 %1, %3, !dbg !582
  br i1 %cmp1, label %for.body, label %for.end, !dbg !583

for.body:                                         ; preds = %for.cond
  %4 = load i32, i32* %fp.addr, align 4, !dbg !584
  %idxprom2 = sext i32 %4 to i64, !dbg !586
  %arrayidx3 = getelementptr inbounds [256 x [255 x i16]], [256 x [255 x i16]]* @unitable, i64 0, i64 %idxprom2, !dbg !586
  %5 = load i32, i32* %i, align 4, !dbg !587
  %idxprom4 = sext i32 %5 to i64, !dbg !586
  %arrayidx5 = getelementptr inbounds [255 x i16], [255 x i16]* %arrayidx3, i64 0, i64 %idxprom4, !dbg !586
  %6 = load i16, i16* %arrayidx5, align 2, !dbg !586
  %conv = zext i16 %6 to i32, !dbg !586
  %7 = load i32, i32* %un.addr, align 4, !dbg !588
  %cmp6 = icmp eq i32 %conv, %7, !dbg !589
  br i1 %cmp6, label %if.then8, label %if.end, !dbg !590

if.then8:                                         ; preds = %for.body
  br label %if.end25, !dbg !591

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !588

for.inc:                                          ; preds = %if.end
  %8 = load i32, i32* %i, align 4, !dbg !592
  %inc = add nsw i32 %8, 1, !dbg !592
  store i32 %inc, i32* %i, align 4, !dbg !592
  br label %for.cond, !dbg !593, !llvm.loop !594

for.end:                                          ; preds = %for.cond
  %9 = load i32, i32* %fp.addr, align 4, !dbg !596
  %idxprom9 = sext i32 %9 to i64, !dbg !598
  %arrayidx10 = getelementptr inbounds [256 x i32], [256 x i32]* @unicount, i64 0, i64 %idxprom9, !dbg !598
  %10 = load i32, i32* %arrayidx10, align 4, !dbg !598
  %cmp11 = icmp sgt i32 %10, 254, !dbg !599
  br i1 %cmp11, label %if.then13, label %if.end14, !dbg !600

if.then13:                                        ; preds = %for.end
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8, !dbg !601
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.20, i64 0, i64 0)), !dbg !603
  call void @exit(i32 65) #8, !dbg !604
  unreachable, !dbg !604

if.end14:                                         ; preds = %for.end
  %12 = load i32, i32* %un.addr, align 4, !dbg !605
  %conv15 = trunc i32 %12 to i16, !dbg !605
  %13 = load i32, i32* %fp.addr, align 4, !dbg !606
  %idxprom16 = sext i32 %13 to i64, !dbg !607
  %arrayidx17 = getelementptr inbounds [256 x [255 x i16]], [256 x [255 x i16]]* @unitable, i64 0, i64 %idxprom16, !dbg !607
  %14 = load i32, i32* %fp.addr, align 4, !dbg !608
  %idxprom18 = sext i32 %14 to i64, !dbg !609
  %arrayidx19 = getelementptr inbounds [256 x i32], [256 x i32]* @unicount, i64 0, i64 %idxprom18, !dbg !609
  %15 = load i32, i32* %arrayidx19, align 4, !dbg !609
  %idxprom20 = sext i32 %15 to i64, !dbg !607
  %arrayidx21 = getelementptr inbounds [255 x i16], [255 x i16]* %arrayidx17, i64 0, i64 %idxprom20, !dbg !607
  store i16 %conv15, i16* %arrayidx21, align 2, !dbg !610
  %16 = load i32, i32* %fp.addr, align 4, !dbg !611
  %idxprom22 = sext i32 %16 to i64, !dbg !612
  %arrayidx23 = getelementptr inbounds [256 x i32], [256 x i32]* @unicount, i64 0, i64 %idxprom22, !dbg !612
  %17 = load i32, i32* %arrayidx23, align 4, !dbg !613
  %inc24 = add nsw i32 %17, 1, !dbg !613
  store i32 %inc24, i32* %arrayidx23, align 4, !dbg !613
  br label %if.end25, !dbg !614

if.end25:                                         ; preds = %if.then8, %if.end14, %entry
  ret void, !dbg !615
}

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @getunicode(i8** %p0) #0 !dbg !616 {
entry:
  %retval = alloca i32, align 4
  %p0.addr = alloca i8**, align 8
  %p = alloca i8*, align 8
  store i8** %p0, i8*** %p0.addr, align 8
  call void @llvm.dbg.declare(metadata i8*** %p0.addr, metadata !619, metadata !DIExpression()), !dbg !620
  call void @llvm.dbg.declare(metadata i8** %p, metadata !621, metadata !DIExpression()), !dbg !622
  %0 = load i8**, i8*** %p0.addr, align 8, !dbg !623
  %1 = load i8*, i8** %0, align 8, !dbg !624
  store i8* %1, i8** %p, align 8, !dbg !622
  br label %while.cond, !dbg !625

while.cond:                                       ; preds = %while.body, %entry
  %2 = load i8*, i8** %p, align 8, !dbg !626
  %3 = load i8, i8* %2, align 1, !dbg !627
  %conv = sext i8 %3 to i32, !dbg !627
  %cmp = icmp eq i32 %conv, 32, !dbg !628
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !629

lor.rhs:                                          ; preds = %while.cond
  %4 = load i8*, i8** %p, align 8, !dbg !630
  %5 = load i8, i8* %4, align 1, !dbg !631
  %conv2 = sext i8 %5 to i32, !dbg !631
  %cmp3 = icmp eq i32 %conv2, 9, !dbg !632
  br label %lor.end, !dbg !629

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %6 = phi i1 [ true, %while.cond ], [ %cmp3, %lor.rhs ]
  br i1 %6, label %while.body, label %while.end, !dbg !625

while.body:                                       ; preds = %lor.end
  %7 = load i8*, i8** %p, align 8, !dbg !633
  %incdec.ptr = getelementptr inbounds i8, i8* %7, i32 1, !dbg !633
  store i8* %incdec.ptr, i8** %p, align 8, !dbg !633
  br label %while.cond, !dbg !625, !llvm.loop !634

while.end:                                        ; preds = %lor.end
  %8 = load i8*, i8** %p, align 8, !dbg !635
  %9 = load i8, i8* %8, align 1, !dbg !637
  %conv5 = sext i8 %9 to i32, !dbg !637
  %cmp6 = icmp ne i32 %conv5, 85, !dbg !638
  br i1 %cmp6, label %if.then, label %lor.lhs.false, !dbg !639

lor.lhs.false:                                    ; preds = %while.end
  %10 = load i8*, i8** %p, align 8, !dbg !640
  %arrayidx = getelementptr inbounds i8, i8* %10, i64 1, !dbg !640
  %11 = load i8, i8* %arrayidx, align 1, !dbg !640
  %conv8 = sext i8 %11 to i32, !dbg !640
  %cmp9 = icmp ne i32 %conv8, 43, !dbg !641
  br i1 %cmp9, label %if.then, label %lor.lhs.false11, !dbg !642

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %call = call i16** @__ctype_b_loc() #10, !dbg !643
  %12 = load i16*, i16** %call, align 8, !dbg !643
  %13 = load i8*, i8** %p, align 8, !dbg !643
  %arrayidx12 = getelementptr inbounds i8, i8* %13, i64 2, !dbg !643
  %14 = load i8, i8* %arrayidx12, align 1, !dbg !643
  %conv13 = sext i8 %14 to i32, !dbg !643
  %idxprom = sext i32 %conv13 to i64, !dbg !643
  %arrayidx14 = getelementptr inbounds i16, i16* %12, i64 %idxprom, !dbg !643
  %15 = load i16, i16* %arrayidx14, align 2, !dbg !643
  %conv15 = zext i16 %15 to i32, !dbg !643
  %and = and i32 %conv15, 4096, !dbg !643
  %tobool = icmp ne i32 %and, 0, !dbg !643
  br i1 %tobool, label %lor.lhs.false16, label %if.then, !dbg !644

lor.lhs.false16:                                  ; preds = %lor.lhs.false11
  %call17 = call i16** @__ctype_b_loc() #10, !dbg !645
  %16 = load i16*, i16** %call17, align 8, !dbg !645
  %17 = load i8*, i8** %p, align 8, !dbg !645
  %arrayidx18 = getelementptr inbounds i8, i8* %17, i64 3, !dbg !645
  %18 = load i8, i8* %arrayidx18, align 1, !dbg !645
  %conv19 = sext i8 %18 to i32, !dbg !645
  %idxprom20 = sext i32 %conv19 to i64, !dbg !645
  %arrayidx21 = getelementptr inbounds i16, i16* %16, i64 %idxprom20, !dbg !645
  %19 = load i16, i16* %arrayidx21, align 2, !dbg !645
  %conv22 = zext i16 %19 to i32, !dbg !645
  %and23 = and i32 %conv22, 4096, !dbg !645
  %tobool24 = icmp ne i32 %and23, 0, !dbg !645
  br i1 %tobool24, label %lor.lhs.false25, label %if.then, !dbg !646

lor.lhs.false25:                                  ; preds = %lor.lhs.false16
  %call26 = call i16** @__ctype_b_loc() #10, !dbg !647
  %20 = load i16*, i16** %call26, align 8, !dbg !647
  %21 = load i8*, i8** %p, align 8, !dbg !647
  %arrayidx27 = getelementptr inbounds i8, i8* %21, i64 4, !dbg !647
  %22 = load i8, i8* %arrayidx27, align 1, !dbg !647
  %conv28 = sext i8 %22 to i32, !dbg !647
  %idxprom29 = sext i32 %conv28 to i64, !dbg !647
  %arrayidx30 = getelementptr inbounds i16, i16* %20, i64 %idxprom29, !dbg !647
  %23 = load i16, i16* %arrayidx30, align 2, !dbg !647
  %conv31 = zext i16 %23 to i32, !dbg !647
  %and32 = and i32 %conv31, 4096, !dbg !647
  %tobool33 = icmp ne i32 %and32, 0, !dbg !647
  br i1 %tobool33, label %lor.lhs.false34, label %if.then, !dbg !648

lor.lhs.false34:                                  ; preds = %lor.lhs.false25
  %call35 = call i16** @__ctype_b_loc() #10, !dbg !649
  %24 = load i16*, i16** %call35, align 8, !dbg !649
  %25 = load i8*, i8** %p, align 8, !dbg !649
  %arrayidx36 = getelementptr inbounds i8, i8* %25, i64 5, !dbg !649
  %26 = load i8, i8* %arrayidx36, align 1, !dbg !649
  %conv37 = sext i8 %26 to i32, !dbg !649
  %idxprom38 = sext i32 %conv37 to i64, !dbg !649
  %arrayidx39 = getelementptr inbounds i16, i16* %24, i64 %idxprom38, !dbg !649
  %27 = load i16, i16* %arrayidx39, align 2, !dbg !649
  %conv40 = zext i16 %27 to i32, !dbg !649
  %and41 = and i32 %conv40, 4096, !dbg !649
  %tobool42 = icmp ne i32 %and41, 0, !dbg !649
  br i1 %tobool42, label %lor.lhs.false43, label %if.then, !dbg !650

lor.lhs.false43:                                  ; preds = %lor.lhs.false34
  %call44 = call i16** @__ctype_b_loc() #10, !dbg !651
  %28 = load i16*, i16** %call44, align 8, !dbg !651
  %29 = load i8*, i8** %p, align 8, !dbg !651
  %arrayidx45 = getelementptr inbounds i8, i8* %29, i64 6, !dbg !651
  %30 = load i8, i8* %arrayidx45, align 1, !dbg !651
  %conv46 = sext i8 %30 to i32, !dbg !651
  %idxprom47 = sext i32 %conv46 to i64, !dbg !651
  %arrayidx48 = getelementptr inbounds i16, i16* %28, i64 %idxprom47, !dbg !651
  %31 = load i16, i16* %arrayidx48, align 2, !dbg !651
  %conv49 = zext i16 %31 to i32, !dbg !651
  %and50 = and i32 %conv49, 4096, !dbg !651
  %tobool51 = icmp ne i32 %and50, 0, !dbg !651
  br i1 %tobool51, label %if.then, label %if.end, !dbg !652

if.then:                                          ; preds = %lor.lhs.false43, %lor.lhs.false34, %lor.lhs.false25, %lor.lhs.false16, %lor.lhs.false11, %lor.lhs.false, %while.end
  store i32 -1, i32* %retval, align 4, !dbg !653
  br label %return, !dbg !653

if.end:                                           ; preds = %lor.lhs.false43
  %32 = load i8*, i8** %p, align 8, !dbg !654
  %add.ptr = getelementptr inbounds i8, i8* %32, i64 6, !dbg !655
  %33 = load i8**, i8*** %p0.addr, align 8, !dbg !656
  store i8* %add.ptr, i8** %33, align 8, !dbg !657
  %34 = load i8*, i8** %p, align 8, !dbg !658
  %add.ptr52 = getelementptr inbounds i8, i8* %34, i64 2, !dbg !659
  %call53 = call i64 @strtol(i8* %add.ptr52, i8** null, i32 16) #9, !dbg !660
  %conv54 = trunc i64 %call53 to i32, !dbg !660
  store i32 %conv54, i32* %retval, align 4, !dbg !661
  br label %return, !dbg !661

return:                                           ; preds = %if.end, %if.then
  %35 = load i32, i32* %retval, align 4, !dbg !662
  ret i32 %35, !dbg !662
}

declare dso_local i32 @fclose(%struct._IO_FILE*) #3

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: nounwind readnone
declare dso_local i16** @__ctype_b_loc() #6

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly }
attributes #8 = { noreturn nounwind }
attributes #9 = { nounwind }
attributes #10 = { nounwind readnone }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!35, !36, !37}
!llvm.ident = !{!38}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "unicount", scope: !2, file: !3, line: 47, type: !33, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C89, file: !3, producer: "clang version 10.0.1 (https://github.com/llvm/llvm-project.git ef32c611aa214dea855364efd7ba451ec5ec3f74)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !21, globals: !25, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "drivers/tty/vt/conmakehash.c", directory: "/home/lizy2001/genbc/linux")
!4 = !{!5}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 46, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "/usr/include/ctype.h", directory: "")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20}
!9 = !DIEnumerator(name: "_ISupper", value: 256, isUnsigned: true)
!10 = !DIEnumerator(name: "_ISlower", value: 512, isUnsigned: true)
!11 = !DIEnumerator(name: "_ISalpha", value: 1024, isUnsigned: true)
!12 = !DIEnumerator(name: "_ISdigit", value: 2048, isUnsigned: true)
!13 = !DIEnumerator(name: "_ISxdigit", value: 4096, isUnsigned: true)
!14 = !DIEnumerator(name: "_ISspace", value: 8192, isUnsigned: true)
!15 = !DIEnumerator(name: "_ISprint", value: 16384, isUnsigned: true)
!16 = !DIEnumerator(name: "_ISgraph", value: 32768, isUnsigned: true)
!17 = !DIEnumerator(name: "_ISblank", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "_IScntrl", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "_ISpunct", value: 4, isUnsigned: true)
!20 = !DIEnumerator(name: "_ISalnum", value: 8, isUnsigned: true)
!21 = !{!22, !23, !24}
!22 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!23 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!24 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!25 = !{!26, !0}
!26 = !DIGlobalVariableExpression(var: !27, expr: !DIExpression())
!27 = distinct !DIGlobalVariable(name: "unitable", scope: !2, file: !3, line: 45, type: !28, isLocal: false, isDefinition: true)
!28 = !DICompositeType(tag: DW_TAG_array_type, baseType: !29, size: 1044480, elements: !30)
!29 = !DIDerivedType(tag: DW_TAG_typedef, name: "unicode", file: !3, line: 22, baseType: !24)
!30 = !{!31, !32}
!31 = !DISubrange(count: 256)
!32 = !DISubrange(count: 255)
!33 = !DICompositeType(tag: DW_TAG_array_type, baseType: !23, size: 8192, elements: !34)
!34 = !{!31}
!35 = !{i32 7, !"Dwarf Version", i32 4}
!36 = !{i32 2, !"Debug Info Version", i32 3}
!37 = !{i32 1, !"wchar_size", i32 4}
!38 = !{!"clang version 10.0.1 (https://github.com/llvm/llvm-project.git ef32c611aa214dea855364efd7ba451ec5ec3f74)"}
!39 = distinct !DISubprogram(name: "main", scope: !3, file: !3, line: 76, type: !40, scopeLine: 77, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !45)
!40 = !DISubroutineType(types: !41)
!41 = !{!23, !23, !42}
!42 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !43, size: 64)
!43 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !44, size: 64)
!44 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!45 = !{}
!46 = !DILocalVariable(name: "argc", arg: 1, scope: !39, file: !3, line: 76, type: !23)
!47 = !DILocation(line: 76, column: 14, scope: !39)
!48 = !DILocalVariable(name: "argv", arg: 2, scope: !39, file: !3, line: 76, type: !42)
!49 = !DILocation(line: 76, column: 26, scope: !39)
!50 = !DILocalVariable(name: "ctbl", scope: !39, file: !3, line: 78, type: !51)
!51 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !52, size: 64)
!52 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !53, line: 7, baseType: !54)
!53 = !DIFile(filename: "/usr/include/bits/types/FILE.h", directory: "")
!54 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !55, line: 49, size: 1728, elements: !56)
!55 = !DIFile(filename: "/usr/include/bits/types/struct_FILE.h", directory: "")
!56 = !{!57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !72, !74, !75, !76, !80, !81, !83, !87, !90, !92, !95, !98, !99, !100, !104, !105}
!57 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !54, file: !55, line: 51, baseType: !23, size: 32)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !54, file: !55, line: 54, baseType: !43, size: 64, offset: 64)
!59 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !54, file: !55, line: 55, baseType: !43, size: 64, offset: 128)
!60 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !54, file: !55, line: 56, baseType: !43, size: 64, offset: 192)
!61 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !54, file: !55, line: 57, baseType: !43, size: 64, offset: 256)
!62 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !54, file: !55, line: 58, baseType: !43, size: 64, offset: 320)
!63 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !54, file: !55, line: 59, baseType: !43, size: 64, offset: 384)
!64 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !54, file: !55, line: 60, baseType: !43, size: 64, offset: 448)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !54, file: !55, line: 61, baseType: !43, size: 64, offset: 512)
!66 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !54, file: !55, line: 64, baseType: !43, size: 64, offset: 576)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !54, file: !55, line: 65, baseType: !43, size: 64, offset: 640)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !54, file: !55, line: 66, baseType: !43, size: 64, offset: 704)
!69 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !54, file: !55, line: 68, baseType: !70, size: 64, offset: 768)
!70 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !71, size: 64)
!71 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !55, line: 36, flags: DIFlagFwdDecl)
!72 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !54, file: !55, line: 70, baseType: !73, size: 64, offset: 832)
!73 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !54, size: 64)
!74 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !54, file: !55, line: 72, baseType: !23, size: 32, offset: 896)
!75 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !54, file: !55, line: 73, baseType: !23, size: 32, offset: 928)
!76 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !54, file: !55, line: 74, baseType: !77, size: 64, offset: 960)
!77 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !78, line: 152, baseType: !79)
!78 = !DIFile(filename: "/usr/include/bits/types.h", directory: "")
!79 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!80 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !54, file: !55, line: 77, baseType: !24, size: 16, offset: 1024)
!81 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !54, file: !55, line: 78, baseType: !82, size: 8, offset: 1040)
!82 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!83 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !54, file: !55, line: 79, baseType: !84, size: 8, offset: 1048)
!84 = !DICompositeType(tag: DW_TAG_array_type, baseType: !44, size: 8, elements: !85)
!85 = !{!86}
!86 = !DISubrange(count: 1)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !54, file: !55, line: 81, baseType: !88, size: 64, offset: 1088)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !55, line: 43, baseType: null)
!90 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !54, file: !55, line: 89, baseType: !91, size: 64, offset: 1152)
!91 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !78, line: 153, baseType: !79)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !54, file: !55, line: 91, baseType: !93, size: 64, offset: 1216)
!93 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !94, size: 64)
!94 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !55, line: 37, flags: DIFlagFwdDecl)
!95 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !54, file: !55, line: 92, baseType: !96, size: 64, offset: 1280)
!96 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !97, size: 64)
!97 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !55, line: 38, flags: DIFlagFwdDecl)
!98 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !54, file: !55, line: 93, baseType: !73, size: 64, offset: 1344)
!99 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !54, file: !55, line: 94, baseType: !22, size: 64, offset: 1408)
!100 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !54, file: !55, line: 95, baseType: !101, size: 64, offset: 1472)
!101 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !102, line: 46, baseType: !103)
!102 = !DIFile(filename: "llvm-project/build_10/lib/clang/10.0.1/include/stddef.h", directory: "/home/lizy2001")
!103 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!104 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !54, file: !55, line: 96, baseType: !23, size: 32, offset: 1536)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !54, file: !55, line: 98, baseType: !106, size: 160, offset: 1568)
!106 = !DICompositeType(tag: DW_TAG_array_type, baseType: !44, size: 160, elements: !107)
!107 = !{!108}
!108 = !DISubrange(count: 20)
!109 = !DILocation(line: 78, column: 9, scope: !39)
!110 = !DILocalVariable(name: "tblname", scope: !39, file: !3, line: 79, type: !43)
!111 = !DILocation(line: 79, column: 9, scope: !39)
!112 = !DILocalVariable(name: "buffer", scope: !39, file: !3, line: 80, type: !113)
!113 = !DICompositeType(tag: DW_TAG_array_type, baseType: !44, size: 524288, elements: !114)
!114 = !{!115}
!115 = !DISubrange(count: 65536)
!116 = !DILocation(line: 80, column: 8, scope: !39)
!117 = !DILocalVariable(name: "fontlen", scope: !39, file: !3, line: 81, type: !23)
!118 = !DILocation(line: 81, column: 7, scope: !39)
!119 = !DILocalVariable(name: "i", scope: !39, file: !3, line: 82, type: !23)
!120 = !DILocation(line: 82, column: 7, scope: !39)
!121 = !DILocalVariable(name: "nuni", scope: !39, file: !3, line: 82, type: !23)
!122 = !DILocation(line: 82, column: 10, scope: !39)
!123 = !DILocalVariable(name: "nent", scope: !39, file: !3, line: 82, type: !23)
!124 = !DILocation(line: 82, column: 16, scope: !39)
!125 = !DILocalVariable(name: "fp0", scope: !39, file: !3, line: 83, type: !23)
!126 = !DILocation(line: 83, column: 7, scope: !39)
!127 = !DILocalVariable(name: "fp1", scope: !39, file: !3, line: 83, type: !23)
!128 = !DILocation(line: 83, column: 12, scope: !39)
!129 = !DILocalVariable(name: "un0", scope: !39, file: !3, line: 83, type: !23)
!130 = !DILocation(line: 83, column: 17, scope: !39)
!131 = !DILocalVariable(name: "un1", scope: !39, file: !3, line: 83, type: !23)
!132 = !DILocation(line: 83, column: 22, scope: !39)
!133 = !DILocalVariable(name: "p", scope: !39, file: !3, line: 84, type: !43)
!134 = !DILocation(line: 84, column: 9, scope: !39)
!135 = !DILocalVariable(name: "p1", scope: !39, file: !3, line: 84, type: !43)
!136 = !DILocation(line: 84, column: 13, scope: !39)
!137 = !DILocation(line: 86, column: 8, scope: !138)
!138 = distinct !DILexicalBlock(scope: !39, file: !3, line: 86, column: 8)
!139 = !DILocation(line: 86, column: 13, scope: !138)
!140 = !DILocation(line: 86, column: 17, scope: !138)
!141 = !DILocation(line: 86, column: 20, scope: !138)
!142 = !DILocation(line: 86, column: 25, scope: !138)
!143 = !DILocation(line: 86, column: 8, scope: !39)
!144 = !DILocation(line: 87, column: 11, scope: !138)
!145 = !DILocation(line: 87, column: 5, scope: !138)
!146 = !DILocation(line: 89, column: 16, scope: !147)
!147 = distinct !DILexicalBlock(scope: !39, file: !3, line: 89, column: 8)
!148 = !DILocation(line: 89, column: 9, scope: !147)
!149 = !DILocation(line: 89, column: 8, scope: !39)
!150 = !DILocation(line: 91, column: 14, scope: !151)
!151 = distinct !DILexicalBlock(scope: !147, file: !3, line: 90, column: 5)
!152 = !DILocation(line: 91, column: 12, scope: !151)
!153 = !DILocation(line: 92, column: 15, scope: !151)
!154 = !DILocation(line: 93, column: 5, scope: !151)
!155 = !DILocation(line: 96, column: 30, scope: !156)
!156 = distinct !DILexicalBlock(scope: !147, file: !3, line: 95, column: 5)
!157 = !DILocation(line: 96, column: 28, scope: !156)
!158 = !DILocation(line: 96, column: 14, scope: !156)
!159 = !DILocation(line: 96, column: 12, scope: !156)
!160 = !DILocation(line: 97, column: 13, scope: !161)
!161 = distinct !DILexicalBlock(scope: !156, file: !3, line: 97, column: 12)
!162 = !DILocation(line: 97, column: 12, scope: !156)
!163 = !DILocation(line: 99, column: 11, scope: !164)
!164 = distinct !DILexicalBlock(scope: !161, file: !3, line: 98, column: 2)
!165 = !DILocation(line: 99, column: 4, scope: !164)
!166 = !DILocation(line: 100, column: 4, scope: !164)
!167 = !DILocation(line: 105, column: 11, scope: !39)
!168 = !DILocation(line: 109, column: 11, scope: !169)
!169 = distinct !DILexicalBlock(scope: !39, file: !3, line: 109, column: 3)
!170 = !DILocation(line: 109, column: 9, scope: !169)
!171 = !DILocation(line: 109, column: 17, scope: !172)
!172 = distinct !DILexicalBlock(scope: !169, file: !3, line: 109, column: 3)
!173 = !DILocation(line: 109, column: 21, scope: !172)
!174 = !DILocation(line: 109, column: 19, scope: !172)
!175 = !DILocation(line: 109, column: 3, scope: !169)
!176 = !DILocation(line: 110, column: 14, scope: !172)
!177 = !DILocation(line: 110, column: 5, scope: !172)
!178 = !DILocation(line: 110, column: 17, scope: !172)
!179 = !DILocation(line: 109, column: 32, scope: !172)
!180 = !DILocation(line: 109, column: 3, scope: !172)
!181 = distinct !{!181, !175, !182}
!182 = !DILocation(line: 110, column: 19, scope: !169)
!183 = !DILocation(line: 114, column: 3, scope: !39)
!184 = !DILocation(line: 114, column: 17, scope: !39)
!185 = !DILocation(line: 114, column: 41, scope: !39)
!186 = !DILocation(line: 114, column: 11, scope: !39)
!187 = !DILocation(line: 114, column: 47, scope: !39)
!188 = !DILocation(line: 116, column: 24, scope: !189)
!189 = distinct !DILexicalBlock(scope: !190, file: !3, line: 116, column: 12)
!190 = distinct !DILexicalBlock(scope: !39, file: !3, line: 115, column: 5)
!191 = !DILocation(line: 116, column: 17, scope: !189)
!192 = !DILocation(line: 116, column: 15, scope: !189)
!193 = !DILocation(line: 116, column: 39, scope: !189)
!194 = !DILocation(line: 116, column: 12, scope: !190)
!195 = !DILocation(line: 117, column: 3, scope: !189)
!196 = !DILocation(line: 117, column: 5, scope: !189)
!197 = !DILocation(line: 117, column: 2, scope: !189)
!198 = !DILocation(line: 119, column: 10, scope: !189)
!199 = !DILocation(line: 119, column: 50, scope: !189)
!200 = !DILocation(line: 119, column: 2, scope: !189)
!201 = !DILocation(line: 121, column: 11, scope: !190)
!202 = !DILocation(line: 121, column: 9, scope: !190)
!203 = !DILocation(line: 134, column: 7, scope: !190)
!204 = !DILocation(line: 134, column: 15, scope: !190)
!205 = !DILocation(line: 134, column: 14, scope: !190)
!206 = !DILocation(line: 134, column: 17, scope: !190)
!207 = !DILocation(line: 134, column: 24, scope: !190)
!208 = !DILocation(line: 134, column: 28, scope: !190)
!209 = !DILocation(line: 134, column: 27, scope: !190)
!210 = !DILocation(line: 134, column: 30, scope: !190)
!211 = !DILocation(line: 135, column: 3, scope: !190)
!212 = distinct !{!212, !203, !211}
!213 = !DILocation(line: 136, column: 13, scope: !214)
!214 = distinct !DILexicalBlock(scope: !190, file: !3, line: 136, column: 11)
!215 = !DILocation(line: 136, column: 12, scope: !214)
!216 = !DILocation(line: 136, column: 15, scope: !214)
!217 = !DILocation(line: 136, column: 19, scope: !214)
!218 = !DILocation(line: 136, column: 18, scope: !214)
!219 = !DILocation(line: 136, column: 21, scope: !214)
!220 = !DILocation(line: 136, column: 11, scope: !190)
!221 = !DILocation(line: 137, column: 2, scope: !214)
!222 = distinct !{!222, !183, !223}
!223 = !DILocation(line: 233, column: 5, scope: !39)
!224 = !DILocation(line: 139, column: 20, scope: !190)
!225 = !DILocation(line: 139, column: 13, scope: !190)
!226 = !DILocation(line: 139, column: 11, scope: !190)
!227 = !DILocation(line: 140, column: 11, scope: !228)
!228 = distinct !DILexicalBlock(scope: !190, file: !3, line: 140, column: 11)
!229 = !DILocation(line: 140, column: 17, scope: !228)
!230 = !DILocation(line: 140, column: 14, scope: !228)
!231 = !DILocation(line: 140, column: 11, scope: !190)
!232 = !DILocation(line: 142, column: 12, scope: !233)
!233 = distinct !DILexicalBlock(scope: !228, file: !3, line: 141, column: 2)
!234 = !DILocation(line: 142, column: 44, scope: !233)
!235 = !DILocation(line: 142, column: 4, scope: !233)
!236 = !DILocation(line: 143, column: 4, scope: !233)
!237 = !DILocation(line: 145, column: 11, scope: !190)
!238 = !DILocation(line: 145, column: 9, scope: !190)
!239 = !DILocation(line: 147, column: 7, scope: !190)
!240 = !DILocation(line: 147, column: 15, scope: !190)
!241 = !DILocation(line: 147, column: 14, scope: !190)
!242 = !DILocation(line: 147, column: 17, scope: !190)
!243 = !DILocation(line: 147, column: 24, scope: !190)
!244 = !DILocation(line: 147, column: 28, scope: !190)
!245 = !DILocation(line: 147, column: 27, scope: !190)
!246 = !DILocation(line: 147, column: 30, scope: !190)
!247 = !DILocation(line: 148, column: 3, scope: !190)
!248 = distinct !{!248, !239, !247}
!249 = !DILocation(line: 149, column: 12, scope: !250)
!250 = distinct !DILexicalBlock(scope: !190, file: !3, line: 149, column: 11)
!251 = !DILocation(line: 149, column: 11, scope: !250)
!252 = !DILocation(line: 149, column: 14, scope: !250)
!253 = !DILocation(line: 149, column: 11, scope: !190)
!254 = !DILocation(line: 151, column: 5, scope: !255)
!255 = distinct !DILexicalBlock(scope: !250, file: !3, line: 150, column: 2)
!256 = !DILocation(line: 152, column: 17, scope: !255)
!257 = !DILocation(line: 152, column: 10, scope: !255)
!258 = !DILocation(line: 152, column: 8, scope: !255)
!259 = !DILocation(line: 153, column: 8, scope: !260)
!260 = distinct !DILexicalBlock(scope: !255, file: !3, line: 153, column: 8)
!261 = !DILocation(line: 153, column: 14, scope: !260)
!262 = !DILocation(line: 153, column: 11, scope: !260)
!263 = !DILocation(line: 153, column: 8, scope: !255)
!264 = !DILocation(line: 155, column: 16, scope: !265)
!265 = distinct !DILexicalBlock(scope: !260, file: !3, line: 154, column: 6)
!266 = !DILocation(line: 155, column: 48, scope: !265)
!267 = !DILocation(line: 155, column: 8, scope: !265)
!268 = !DILocation(line: 156, column: 8, scope: !265)
!269 = !DILocation(line: 158, column: 8, scope: !255)
!270 = !DILocation(line: 158, column: 6, scope: !255)
!271 = !DILocation(line: 159, column: 9, scope: !255)
!272 = !DILocation(line: 161, column: 6, scope: !250)
!273 = !DILocation(line: 163, column: 12, scope: !274)
!274 = distinct !DILexicalBlock(scope: !190, file: !3, line: 163, column: 12)
!275 = !DILocation(line: 163, column: 16, scope: !274)
!276 = !DILocation(line: 163, column: 20, scope: !274)
!277 = !DILocation(line: 163, column: 23, scope: !274)
!278 = !DILocation(line: 163, column: 30, scope: !274)
!279 = !DILocation(line: 163, column: 27, scope: !274)
!280 = !DILocation(line: 163, column: 12, scope: !190)
!281 = !DILocation(line: 165, column: 14, scope: !282)
!282 = distinct !DILexicalBlock(scope: !274, file: !3, line: 164, column: 2)
!283 = !DILocation(line: 167, column: 7, scope: !282)
!284 = !DILocation(line: 167, column: 16, scope: !282)
!285 = !DILocation(line: 165, column: 6, scope: !282)
!286 = !DILocation(line: 168, column: 6, scope: !282)
!287 = !DILocation(line: 170, column: 12, scope: !288)
!288 = distinct !DILexicalBlock(scope: !190, file: !3, line: 170, column: 12)
!289 = !DILocation(line: 170, column: 16, scope: !288)
!290 = !DILocation(line: 170, column: 20, scope: !288)
!291 = !DILocation(line: 170, column: 26, scope: !288)
!292 = !DILocation(line: 170, column: 24, scope: !288)
!293 = !DILocation(line: 170, column: 30, scope: !288)
!294 = !DILocation(line: 170, column: 33, scope: !288)
!295 = !DILocation(line: 170, column: 40, scope: !288)
!296 = !DILocation(line: 170, column: 37, scope: !288)
!297 = !DILocation(line: 170, column: 12, scope: !190)
!298 = !DILocation(line: 172, column: 14, scope: !299)
!299 = distinct !DILexicalBlock(scope: !288, file: !3, line: 171, column: 2)
!300 = !DILocation(line: 174, column: 7, scope: !299)
!301 = !DILocation(line: 174, column: 16, scope: !299)
!302 = !DILocation(line: 172, column: 6, scope: !299)
!303 = !DILocation(line: 175, column: 6, scope: !299)
!304 = !DILocation(line: 178, column: 11, scope: !305)
!305 = distinct !DILexicalBlock(scope: !190, file: !3, line: 178, column: 11)
!306 = !DILocation(line: 178, column: 11, scope: !190)
!307 = !DILocation(line: 182, column: 4, scope: !308)
!308 = distinct !DILexicalBlock(scope: !305, file: !3, line: 179, column: 2)
!309 = !DILocation(line: 182, column: 12, scope: !308)
!310 = !DILocation(line: 182, column: 11, scope: !308)
!311 = !DILocation(line: 182, column: 14, scope: !308)
!312 = !DILocation(line: 182, column: 21, scope: !308)
!313 = !DILocation(line: 182, column: 25, scope: !308)
!314 = !DILocation(line: 182, column: 24, scope: !308)
!315 = !DILocation(line: 182, column: 27, scope: !308)
!316 = !DILocation(line: 183, column: 7, scope: !308)
!317 = distinct !{!317, !307, !316}
!318 = !DILocation(line: 184, column: 17, scope: !319)
!319 = distinct !DILexicalBlock(scope: !308, file: !3, line: 184, column: 8)
!320 = !DILocation(line: 184, column: 9, scope: !319)
!321 = !DILocation(line: 184, column: 8, scope: !308)
!322 = !DILocation(line: 186, column: 15, scope: !323)
!323 = distinct !DILexicalBlock(scope: !324, file: !3, line: 186, column: 8)
!324 = distinct !DILexicalBlock(scope: !319, file: !3, line: 185, column: 6)
!325 = !DILocation(line: 186, column: 14, scope: !323)
!326 = !DILocation(line: 186, column: 13, scope: !323)
!327 = !DILocation(line: 186, column: 20, scope: !328)
!328 = distinct !DILexicalBlock(scope: !323, file: !3, line: 186, column: 8)
!329 = !DILocation(line: 186, column: 23, scope: !328)
!330 = !DILocation(line: 186, column: 21, scope: !328)
!331 = !DILocation(line: 186, column: 8, scope: !323)
!332 = !DILocation(line: 187, column: 11, scope: !328)
!333 = !DILocation(line: 187, column: 13, scope: !328)
!334 = !DILocation(line: 187, column: 3, scope: !328)
!335 = !DILocation(line: 186, column: 29, scope: !328)
!336 = !DILocation(line: 186, column: 8, scope: !328)
!337 = distinct !{!337, !331, !338}
!338 = !DILocation(line: 187, column: 14, scope: !323)
!339 = !DILocation(line: 188, column: 10, scope: !324)
!340 = !DILocation(line: 189, column: 6, scope: !324)
!341 = !DILocation(line: 192, column: 14, scope: !342)
!342 = distinct !DILexicalBlock(scope: !319, file: !3, line: 191, column: 6)
!343 = !DILocation(line: 192, column: 12, scope: !342)
!344 = !DILocation(line: 193, column: 8, scope: !342)
!345 = !DILocation(line: 193, column: 16, scope: !342)
!346 = !DILocation(line: 193, column: 15, scope: !342)
!347 = !DILocation(line: 193, column: 18, scope: !342)
!348 = !DILocation(line: 193, column: 25, scope: !342)
!349 = !DILocation(line: 193, column: 29, scope: !342)
!350 = !DILocation(line: 193, column: 28, scope: !342)
!351 = !DILocation(line: 193, column: 31, scope: !342)
!352 = !DILocation(line: 194, column: 4, scope: !342)
!353 = distinct !{!353, !344, !352}
!354 = !DILocation(line: 195, column: 13, scope: !355)
!355 = distinct !DILexicalBlock(scope: !342, file: !3, line: 195, column: 12)
!356 = !DILocation(line: 195, column: 12, scope: !355)
!357 = !DILocation(line: 195, column: 15, scope: !355)
!358 = !DILocation(line: 195, column: 12, scope: !342)
!359 = !DILocation(line: 197, column: 13, scope: !360)
!360 = distinct !DILexicalBlock(scope: !355, file: !3, line: 196, column: 3)
!361 = !DILocation(line: 199, column: 6, scope: !360)
!362 = !DILocation(line: 197, column: 5, scope: !360)
!363 = !DILocation(line: 200, column: 5, scope: !360)
!364 = !DILocation(line: 202, column: 9, scope: !342)
!365 = !DILocation(line: 203, column: 14, scope: !342)
!366 = !DILocation(line: 203, column: 12, scope: !342)
!367 = !DILocation(line: 204, column: 12, scope: !368)
!368 = distinct !DILexicalBlock(scope: !342, file: !3, line: 204, column: 12)
!369 = !DILocation(line: 204, column: 16, scope: !368)
!370 = !DILocation(line: 204, column: 20, scope: !368)
!371 = !DILocation(line: 204, column: 23, scope: !368)
!372 = !DILocation(line: 204, column: 27, scope: !368)
!373 = !DILocation(line: 204, column: 12, scope: !342)
!374 = !DILocation(line: 206, column: 13, scope: !375)
!375 = distinct !DILexicalBlock(scope: !368, file: !3, line: 205, column: 3)
!376 = !DILocation(line: 208, column: 6, scope: !375)
!377 = !DILocation(line: 208, column: 15, scope: !375)
!378 = !DILocation(line: 208, column: 20, scope: !375)
!379 = !DILocation(line: 206, column: 5, scope: !375)
!380 = !DILocation(line: 209, column: 5, scope: !375)
!381 = !DILocation(line: 211, column: 12, scope: !382)
!382 = distinct !DILexicalBlock(scope: !342, file: !3, line: 211, column: 12)
!383 = !DILocation(line: 211, column: 18, scope: !382)
!384 = !DILocation(line: 211, column: 16, scope: !382)
!385 = !DILocation(line: 211, column: 25, scope: !382)
!386 = !DILocation(line: 211, column: 31, scope: !382)
!387 = !DILocation(line: 211, column: 29, scope: !382)
!388 = !DILocation(line: 211, column: 22, scope: !382)
!389 = !DILocation(line: 211, column: 12, scope: !342)
!390 = !DILocation(line: 213, column: 13, scope: !391)
!391 = distinct !DILexicalBlock(scope: !382, file: !3, line: 212, column: 3)
!392 = !DILocation(line: 215, column: 6, scope: !391)
!393 = !DILocation(line: 215, column: 15, scope: !391)
!394 = !DILocation(line: 215, column: 20, scope: !391)
!395 = !DILocation(line: 215, column: 25, scope: !391)
!396 = !DILocation(line: 215, column: 30, scope: !391)
!397 = !DILocation(line: 213, column: 5, scope: !391)
!398 = !DILocation(line: 216, column: 5, scope: !391)
!399 = !DILocation(line: 218, column: 14, scope: !400)
!400 = distinct !DILexicalBlock(scope: !342, file: !3, line: 218, column: 8)
!401 = !DILocation(line: 218, column: 13, scope: !400)
!402 = !DILocation(line: 218, column: 12, scope: !400)
!403 = !DILocation(line: 218, column: 19, scope: !404)
!404 = distinct !DILexicalBlock(scope: !400, file: !3, line: 218, column: 8)
!405 = !DILocation(line: 218, column: 22, scope: !404)
!406 = !DILocation(line: 218, column: 20, scope: !404)
!407 = !DILocation(line: 218, column: 8, scope: !400)
!408 = !DILocation(line: 219, column: 11, scope: !404)
!409 = !DILocation(line: 219, column: 13, scope: !404)
!410 = !DILocation(line: 219, column: 17, scope: !404)
!411 = !DILocation(line: 219, column: 16, scope: !404)
!412 = !DILocation(line: 219, column: 21, scope: !404)
!413 = !DILocation(line: 219, column: 20, scope: !404)
!414 = !DILocation(line: 219, column: 3, scope: !404)
!415 = !DILocation(line: 218, column: 28, scope: !404)
!416 = !DILocation(line: 218, column: 8, scope: !404)
!417 = distinct !{!417, !407, !418}
!418 = !DILocation(line: 219, column: 22, scope: !400)
!419 = !DILocation(line: 221, column: 9, scope: !308)
!420 = !DILocation(line: 226, column: 6, scope: !421)
!421 = distinct !DILexicalBlock(scope: !305, file: !3, line: 223, column: 2)
!422 = !DILocation(line: 226, column: 21, scope: !421)
!423 = !DILocation(line: 226, column: 19, scope: !421)
!424 = !DILocation(line: 226, column: 37, scope: !421)
!425 = !DILocation(line: 227, column: 16, scope: !421)
!426 = !DILocation(line: 227, column: 21, scope: !421)
!427 = !DILocation(line: 227, column: 8, scope: !421)
!428 = distinct !{!428, !420, !429}
!429 = !DILocation(line: 227, column: 24, scope: !421)
!430 = !DILocation(line: 229, column: 7, scope: !190)
!431 = !DILocation(line: 229, column: 15, scope: !190)
!432 = !DILocation(line: 229, column: 14, scope: !190)
!433 = !DILocation(line: 229, column: 17, scope: !190)
!434 = !DILocation(line: 229, column: 24, scope: !190)
!435 = !DILocation(line: 229, column: 28, scope: !190)
!436 = !DILocation(line: 229, column: 27, scope: !190)
!437 = !DILocation(line: 229, column: 30, scope: !190)
!438 = !DILocation(line: 230, column: 3, scope: !190)
!439 = distinct !{!439, !430, !438}
!440 = !DILocation(line: 231, column: 12, scope: !441)
!441 = distinct !DILexicalBlock(scope: !190, file: !3, line: 231, column: 11)
!442 = !DILocation(line: 231, column: 11, scope: !441)
!443 = !DILocation(line: 231, column: 14, scope: !441)
!444 = !DILocation(line: 231, column: 18, scope: !441)
!445 = !DILocation(line: 231, column: 17, scope: !441)
!446 = !DILocation(line: 231, column: 20, scope: !441)
!447 = !DILocation(line: 231, column: 11, scope: !190)
!448 = !DILocation(line: 232, column: 10, scope: !441)
!449 = !DILocation(line: 232, column: 54, scope: !441)
!450 = !DILocation(line: 232, column: 63, scope: !441)
!451 = !DILocation(line: 232, column: 2, scope: !441)
!452 = !DILocation(line: 237, column: 10, scope: !39)
!453 = !DILocation(line: 237, column: 3, scope: !39)
!454 = !DILocation(line: 241, column: 8, scope: !39)
!455 = !DILocation(line: 242, column: 11, scope: !456)
!456 = distinct !DILexicalBlock(scope: !39, file: !3, line: 242, column: 3)
!457 = !DILocation(line: 242, column: 9, scope: !456)
!458 = !DILocation(line: 242, column: 17, scope: !459)
!459 = distinct !DILexicalBlock(scope: !456, file: !3, line: 242, column: 3)
!460 = !DILocation(line: 242, column: 21, scope: !459)
!461 = !DILocation(line: 242, column: 19, scope: !459)
!462 = !DILocation(line: 242, column: 3, scope: !456)
!463 = !DILocation(line: 243, column: 22, scope: !459)
!464 = !DILocation(line: 243, column: 13, scope: !459)
!465 = !DILocation(line: 243, column: 10, scope: !459)
!466 = !DILocation(line: 243, column: 5, scope: !459)
!467 = !DILocation(line: 242, column: 32, scope: !459)
!468 = !DILocation(line: 242, column: 3, scope: !459)
!469 = distinct !{!469, !462, !470}
!470 = !DILocation(line: 243, column: 23, scope: !456)
!471 = !DILocation(line: 256, column: 9, scope: !39)
!472 = !DILocation(line: 256, column: 18, scope: !39)
!473 = !DILocation(line: 245, column: 3, scope: !39)
!474 = !DILocation(line: 258, column: 11, scope: !475)
!475 = distinct !DILexicalBlock(scope: !39, file: !3, line: 258, column: 3)
!476 = !DILocation(line: 258, column: 9, scope: !475)
!477 = !DILocation(line: 258, column: 17, scope: !478)
!478 = distinct !DILexicalBlock(scope: !475, file: !3, line: 258, column: 3)
!479 = !DILocation(line: 258, column: 21, scope: !478)
!480 = !DILocation(line: 258, column: 19, scope: !478)
!481 = !DILocation(line: 258, column: 3, scope: !475)
!482 = !DILocation(line: 260, column: 30, scope: !483)
!483 = distinct !DILexicalBlock(scope: !478, file: !3, line: 259, column: 5)
!484 = !DILocation(line: 260, column: 21, scope: !483)
!485 = !DILocation(line: 260, column: 7, scope: !483)
!486 = !DILocation(line: 261, column: 12, scope: !487)
!487 = distinct !DILexicalBlock(scope: !483, file: !3, line: 261, column: 12)
!488 = !DILocation(line: 261, column: 17, scope: !487)
!489 = !DILocation(line: 261, column: 24, scope: !487)
!490 = !DILocation(line: 261, column: 14, scope: !487)
!491 = !DILocation(line: 261, column: 12, scope: !483)
!492 = !DILocation(line: 262, column: 9, scope: !487)
!493 = !DILocation(line: 263, column: 17, scope: !494)
!494 = distinct !DILexicalBlock(scope: !487, file: !3, line: 263, column: 17)
!495 = !DILocation(line: 263, column: 19, scope: !494)
!496 = !DILocation(line: 263, column: 23, scope: !494)
!497 = !DILocation(line: 263, column: 17, scope: !487)
!498 = !DILocation(line: 264, column: 9, scope: !494)
!499 = !DILocation(line: 266, column: 9, scope: !494)
!500 = !DILocation(line: 267, column: 5, scope: !483)
!501 = !DILocation(line: 258, column: 32, scope: !478)
!502 = !DILocation(line: 258, column: 3, scope: !478)
!503 = distinct !{!503, !481, !504}
!504 = !DILocation(line: 267, column: 5, scope: !475)
!505 = !DILocation(line: 269, column: 48, scope: !39)
!506 = !DILocation(line: 269, column: 3, scope: !39)
!507 = !DILocation(line: 271, column: 7, scope: !39)
!508 = !DILocation(line: 272, column: 8, scope: !39)
!509 = !DILocation(line: 273, column: 11, scope: !510)
!510 = distinct !DILexicalBlock(scope: !39, file: !3, line: 273, column: 3)
!511 = !DILocation(line: 273, column: 9, scope: !510)
!512 = !DILocation(line: 273, column: 17, scope: !513)
!513 = distinct !DILexicalBlock(scope: !510, file: !3, line: 273, column: 3)
!514 = !DILocation(line: 273, column: 21, scope: !513)
!515 = !DILocation(line: 273, column: 19, scope: !513)
!516 = !DILocation(line: 273, column: 3, scope: !510)
!517 = !DILocation(line: 275, column: 7, scope: !518)
!518 = distinct !DILexicalBlock(scope: !513, file: !3, line: 274, column: 5)
!519 = !DILocation(line: 275, column: 15, scope: !518)
!520 = !DILocation(line: 275, column: 32, scope: !518)
!521 = !DILocation(line: 275, column: 23, scope: !518)
!522 = !DILocation(line: 275, column: 20, scope: !518)
!523 = !DILocation(line: 277, column: 7, scope: !524)
!524 = distinct !DILexicalBlock(scope: !518, file: !3, line: 276, column: 2)
!525 = !DILocation(line: 278, column: 9, scope: !524)
!526 = distinct !{!526, !517, !527}
!527 = !DILocation(line: 279, column: 2, scope: !518)
!528 = !DILocation(line: 280, column: 33, scope: !518)
!529 = !DILocation(line: 280, column: 24, scope: !518)
!530 = !DILocation(line: 280, column: 42, scope: !518)
!531 = !DILocation(line: 280, column: 7, scope: !518)
!532 = !DILocation(line: 281, column: 12, scope: !533)
!533 = distinct !DILexicalBlock(scope: !518, file: !3, line: 281, column: 12)
!534 = !DILocation(line: 281, column: 17, scope: !533)
!535 = !DILocation(line: 281, column: 21, scope: !533)
!536 = !DILocation(line: 281, column: 14, scope: !533)
!537 = !DILocation(line: 281, column: 12, scope: !518)
!538 = !DILocation(line: 282, column: 10, scope: !533)
!539 = !DILocation(line: 283, column: 18, scope: !540)
!540 = distinct !DILexicalBlock(scope: !533, file: !3, line: 283, column: 18)
!541 = !DILocation(line: 283, column: 20, scope: !540)
!542 = !DILocation(line: 283, column: 24, scope: !540)
!543 = !DILocation(line: 283, column: 18, scope: !533)
!544 = !DILocation(line: 284, column: 10, scope: !540)
!545 = !DILocation(line: 286, column: 10, scope: !540)
!546 = !DILocation(line: 287, column: 5, scope: !518)
!547 = !DILocation(line: 273, column: 29, scope: !513)
!548 = !DILocation(line: 273, column: 3, scope: !513)
!549 = distinct !{!549, !516, !550}
!550 = !DILocation(line: 287, column: 5, scope: !510)
!551 = !DILocation(line: 289, column: 3, scope: !39)
!552 = distinct !DISubprogram(name: "usage", scope: !3, file: !3, line: 24, type: !553, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !45)
!553 = !DISubroutineType(types: !554)
!554 = !{null, !43}
!555 = !DILocalVariable(name: "argv0", arg: 1, scope: !552, file: !3, line: 24, type: !43)
!556 = !DILocation(line: 24, column: 25, scope: !552)
!557 = !DILocation(line: 26, column: 11, scope: !552)
!558 = !DILocation(line: 27, column: 73, scope: !552)
!559 = !DILocation(line: 26, column: 3, scope: !552)
!560 = !DILocation(line: 28, column: 3, scope: !552)
!561 = distinct !DISubprogram(name: "addpair", scope: !3, file: !3, line: 49, type: !562, scopeLine: 50, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !45)
!562 = !DISubroutineType(types: !563)
!563 = !{null, !23, !23}
!564 = !DILocalVariable(name: "fp", arg: 1, scope: !561, file: !3, line: 49, type: !23)
!565 = !DILocation(line: 49, column: 25, scope: !561)
!566 = !DILocalVariable(name: "un", arg: 2, scope: !561, file: !3, line: 49, type: !23)
!567 = !DILocation(line: 49, column: 33, scope: !561)
!568 = !DILocalVariable(name: "i", scope: !561, file: !3, line: 51, type: !23)
!569 = !DILocation(line: 51, column: 7, scope: !561)
!570 = !DILocation(line: 53, column: 8, scope: !571)
!571 = distinct !DILexicalBlock(scope: !561, file: !3, line: 53, column: 8)
!572 = !DILocation(line: 53, column: 11, scope: !571)
!573 = !DILocation(line: 53, column: 8, scope: !561)
!574 = !DILocation(line: 57, column: 15, scope: !575)
!575 = distinct !DILexicalBlock(scope: !576, file: !3, line: 57, column: 7)
!576 = distinct !DILexicalBlock(scope: !571, file: !3, line: 54, column: 5)
!577 = !DILocation(line: 57, column: 13, scope: !575)
!578 = !DILocation(line: 57, column: 21, scope: !579)
!579 = distinct !DILexicalBlock(scope: !575, file: !3, line: 57, column: 7)
!580 = !DILocation(line: 57, column: 34, scope: !579)
!581 = !DILocation(line: 57, column: 25, scope: !579)
!582 = !DILocation(line: 57, column: 23, scope: !579)
!583 = !DILocation(line: 57, column: 7, scope: !575)
!584 = !DILocation(line: 58, column: 16, scope: !585)
!585 = distinct !DILexicalBlock(scope: !579, file: !3, line: 58, column: 7)
!586 = !DILocation(line: 58, column: 7, scope: !585)
!587 = !DILocation(line: 58, column: 20, scope: !585)
!588 = !DILocation(line: 58, column: 26, scope: !585)
!589 = !DILocation(line: 58, column: 23, scope: !585)
!590 = !DILocation(line: 58, column: 7, scope: !579)
!591 = !DILocation(line: 59, column: 4, scope: !585)
!592 = !DILocation(line: 57, column: 41, scope: !579)
!593 = !DILocation(line: 57, column: 7, scope: !579)
!594 = distinct !{!594, !583, !595}
!595 = !DILocation(line: 59, column: 4, scope: !575)
!596 = !DILocation(line: 63, column: 21, scope: !597)
!597 = distinct !DILexicalBlock(scope: !576, file: !3, line: 63, column: 12)
!598 = !DILocation(line: 63, column: 12, scope: !597)
!599 = !DILocation(line: 63, column: 25, scope: !597)
!600 = !DILocation(line: 63, column: 12, scope: !576)
!601 = !DILocation(line: 65, column: 12, scope: !602)
!602 = distinct !DILexicalBlock(scope: !597, file: !3, line: 64, column: 2)
!603 = !DILocation(line: 65, column: 4, scope: !602)
!604 = !DILocation(line: 66, column: 4, scope: !602)
!605 = !DILocation(line: 69, column: 36, scope: !576)
!606 = !DILocation(line: 69, column: 16, scope: !576)
!607 = !DILocation(line: 69, column: 7, scope: !576)
!608 = !DILocation(line: 69, column: 29, scope: !576)
!609 = !DILocation(line: 69, column: 20, scope: !576)
!610 = !DILocation(line: 69, column: 34, scope: !576)
!611 = !DILocation(line: 70, column: 16, scope: !576)
!612 = !DILocation(line: 70, column: 7, scope: !576)
!613 = !DILocation(line: 70, column: 19, scope: !576)
!614 = !DILocation(line: 71, column: 5, scope: !576)
!615 = !DILocation(line: 74, column: 1, scope: !561)
!616 = distinct !DISubprogram(name: "getunicode", scope: !3, file: !3, line: 31, type: !617, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !45)
!617 = !DISubroutineType(types: !618)
!618 = !{!23, !42}
!619 = !DILocalVariable(name: "p0", arg: 1, scope: !616, file: !3, line: 31, type: !42)
!620 = !DILocation(line: 31, column: 30, scope: !616)
!621 = !DILocalVariable(name: "p", scope: !616, file: !3, line: 33, type: !43)
!622 = !DILocation(line: 33, column: 9, scope: !616)
!623 = !DILocation(line: 33, column: 14, scope: !616)
!624 = !DILocation(line: 33, column: 13, scope: !616)
!625 = !DILocation(line: 35, column: 3, scope: !616)
!626 = !DILocation(line: 35, column: 11, scope: !616)
!627 = !DILocation(line: 35, column: 10, scope: !616)
!628 = !DILocation(line: 35, column: 13, scope: !616)
!629 = !DILocation(line: 35, column: 20, scope: !616)
!630 = !DILocation(line: 35, column: 24, scope: !616)
!631 = !DILocation(line: 35, column: 23, scope: !616)
!632 = !DILocation(line: 35, column: 26, scope: !616)
!633 = !DILocation(line: 36, column: 6, scope: !616)
!634 = distinct !{!634, !625, !633}
!635 = !DILocation(line: 37, column: 8, scope: !636)
!636 = distinct !DILexicalBlock(scope: !616, file: !3, line: 37, column: 7)
!637 = !DILocation(line: 37, column: 7, scope: !636)
!638 = !DILocation(line: 37, column: 10, scope: !636)
!639 = !DILocation(line: 37, column: 17, scope: !636)
!640 = !DILocation(line: 37, column: 20, scope: !636)
!641 = !DILocation(line: 37, column: 25, scope: !636)
!642 = !DILocation(line: 37, column: 32, scope: !636)
!643 = !DILocation(line: 38, column: 8, scope: !636)
!644 = !DILocation(line: 38, column: 23, scope: !636)
!645 = !DILocation(line: 38, column: 27, scope: !636)
!646 = !DILocation(line: 38, column: 42, scope: !636)
!647 = !DILocation(line: 38, column: 46, scope: !636)
!648 = !DILocation(line: 38, column: 61, scope: !636)
!649 = !DILocation(line: 39, column: 8, scope: !636)
!650 = !DILocation(line: 39, column: 23, scope: !636)
!651 = !DILocation(line: 39, column: 26, scope: !636)
!652 = !DILocation(line: 37, column: 7, scope: !616)
!653 = !DILocation(line: 40, column: 5, scope: !636)
!654 = !DILocation(line: 41, column: 9, scope: !616)
!655 = !DILocation(line: 41, column: 10, scope: !616)
!656 = !DILocation(line: 41, column: 4, scope: !616)
!657 = !DILocation(line: 41, column: 7, scope: !616)
!658 = !DILocation(line: 42, column: 17, scope: !616)
!659 = !DILocation(line: 42, column: 18, scope: !616)
!660 = !DILocation(line: 42, column: 10, scope: !616)
!661 = !DILocation(line: 42, column: 3, scope: !616)
!662 = !DILocation(line: 43, column: 1, scope: !616)
