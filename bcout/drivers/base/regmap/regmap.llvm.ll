; ModuleID = '../bcout/drivers/base/regmap/regmap.llvm.bc'
source_filename = "drivers/base/regmap/regmap.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64"

module asm ".section\09\22.initcall2.init\22, \22a\22\09"
module asm "__initcall_regmap_initcall2:\09\09\09"
module asm ".long\09regmap_initcall - .\09\09\09"
module asm ".previous\09\09\09\09\09"

%struct.lock_class_key = type {}
%struct.kmem_cache = type opaque
%struct.paravirt_patch_template = type { %struct.pv_init_ops, %struct.pv_time_ops, %struct.pv_cpu_ops, %struct.pv_irq_ops, %struct.pv_mmu_ops, %struct.pv_lock_ops }
%struct.pv_init_ops = type { i32 (i8, i8*, i64, i32)* }
%struct.pv_time_ops = type { i64 ()*, i64 (i32)* }
%struct.pv_cpu_ops = type { void ()*, i64 (i32)*, void (i32, i64)*, i64 ()*, void (i64)*, void (i64)*, void ()*, void (%struct.desc_ptr*)*, void (%struct.desc_ptr*)*, void (i8*, i32)*, i64 ()*, void (%struct.thread_struct*, i32)*, void (i32)*, void (%struct.desc_struct*, i32, i8*)*, void (%struct.desc_struct*, i32, i8*, i32)*, void (%struct.gate_struct*, i32, %struct.gate_struct*)*, void (%struct.desc_struct*, i32)*, void (%struct.desc_struct*, i32)*, void (i64)*, void ()*, void ()*, void ()*, void (i32*, i32*, i32*, i32*)*, i64 (i32)*, void (i32, i32, i32)*, i64 (i32, i32*)*, i32 (i32, i32, i32)*, i64 (i32)*, void ()*, void ()*, void ()*, void (%struct.task_struct*)*, void (%struct.task_struct*)* }
%struct.desc_ptr = type <{ i16, i64 }>
%struct.thread_struct = type { [3 x %struct.desc_struct], i64, i16, i16, i16, i16, i64, i64, [4 x %struct.perf_event*], i64, i64, i64, i64, i64, %struct.io_bitmap*, i64, i8, [47 x i8], %struct.fpu }
%struct.desc_struct = type { i16, i16, i32 }
%struct.perf_event = type opaque
%struct.io_bitmap = type opaque
%struct.fpu = type { i32, i64, [48 x i8], %union.fpregs_state }
%union.fpregs_state = type { %struct.xregs_state, [3520 x i8] }
%struct.xregs_state = type { %struct.fxregs_state, %struct.xstate_header, [0 x i8] }
%struct.fxregs_state = type { i16, i16, i16, i16, %union.anon.48, i32, i32, [32 x i32], [64 x i32], [12 x i32], %union.anon.51 }
%union.anon.48 = type { %struct.anon.49 }
%struct.anon.49 = type { i64, i64 }
%union.anon.51 = type { [12 x i32] }
%struct.xstate_header = type { i64, i64, [6 x i64] }
%struct.gate_struct = type { i16, i16, %struct.idt_bits, i16, i32, i32 }
%struct.idt_bits = type { i16 }
%struct.task_struct = type { %struct.thread_info, i64, i8*, %struct.refcount_struct, i32, i32, i32, i32, i32, i32, i32, %struct.sched_class*, %struct.sched_entity, %struct.sched_rt_entity, %struct.sched_dl_entity, i32, i32, %struct.cpumask*, %struct.cpumask, %struct.sched_info, %struct.list_head, %struct.mm_struct*, %struct.mm_struct*, %struct.vmacache, i32, i32, i32, i32, i64, i32, i8, [3 x i8], i8, i64, %struct.restart_block, i32, i32, i64, %struct.task_struct*, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.task_struct*, %struct.list_head, %struct.list_head, %struct.pid*, [4 x %struct.hlist_node], %struct.list_head, %struct.list_head, %struct.completion*, i32*, i32*, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, %struct.posix_cputimers, %struct.posix_cputimers_work, %struct.cred*, %struct.cred*, %struct.cred*, %struct.key*, [16 x i8], %struct.nameidata*, %struct.fs_struct*, %struct.files_struct*, %struct.io_uring_task*, %struct.nsproxy*, %struct.signal_struct*, %struct.sighand_struct*, %struct.sigset_t, %struct.sigset_t, %struct.sigset_t, %struct.sigpending, i64, i64, i32, %struct.callback_head*, %struct.seccomp, i64, i64, %struct.spinlock, %struct.raw_spinlock, %struct.wake_q_node, %struct.rb_root_cached, %struct.task_struct*, %struct.rt_mutex_waiter*, i8*, %struct.bio_list*, %struct.blk_plug*, %struct.reclaim_state*, %struct.backing_dev_info*, %struct.io_context*, %struct.capture_control*, i64, %struct.kernel_siginfo*, %struct.task_io_accounting, %struct.robust_list_head*, %struct.list_head, %struct.futex_pi_state*, %struct.mutex, i32, [2 x %struct.perf_event_context*], %struct.mutex, %struct.list_head, %struct.rseq*, i32, i64, %struct.tlbflush_unmap_batch, %union.anon.47, %struct.pipe_inode_info*, %struct.page_frag, i32, i32, i64, i64, i64, i32, %struct.task_struct*, %struct.vm_struct*, %struct.refcount_struct, i8*, i64, i64, i64, %struct.callback_head, [24 x i8], %struct.thread_struct }
%struct.thread_info = type { i64, i32 }
%struct.sched_class = type opaque
%struct.sched_entity = type { %struct.load_weight, %struct.rb_node, %struct.list_head, i32, i64, i64, i64, i64, i64, %struct.sched_statistics }
%struct.load_weight = type { i64, i32 }
%struct.rb_node = type { i64, %struct.rb_node*, %struct.rb_node* }
%struct.sched_statistics = type {}
%struct.sched_rt_entity = type { %struct.list_head, i64, i64, i32, i16, i16, %struct.sched_rt_entity* }
%struct.sched_dl_entity = type { %struct.rb_node, i64, i64, i64, i64, i64, i64, i64, i32, i8, %struct.hrtimer, %struct.hrtimer, %struct.sched_dl_entity* }
%struct.hrtimer = type { %struct.timerqueue_node, i64, i32 (%struct.hrtimer*)*, %struct.hrtimer_clock_base*, i8, i8, i8, i8 }
%struct.timerqueue_node = type { %struct.rb_node, i64 }
%struct.hrtimer_clock_base = type { %struct.hrtimer_cpu_base*, i32, i32, %struct.seqcount_raw_spinlock, %struct.hrtimer*, %struct.timerqueue_head, i64 ()*, i64 }
%struct.hrtimer_cpu_base = type { %struct.raw_spinlock, i32, i32, i32, i8, i64, %struct.hrtimer*, i64, %struct.hrtimer*, [16 x i8], [8 x %struct.hrtimer_clock_base] }
%struct.seqcount_raw_spinlock = type { %struct.seqcount }
%struct.seqcount = type { i32 }
%struct.timerqueue_head = type { %struct.rb_root_cached }
%struct.cpumask = type { [1 x i64] }
%struct.sched_info = type {}
%struct.mm_struct = type { %struct.anon.17, [0 x i64] }
%struct.anon.17 = type { %struct.vm_area_struct*, %struct.rb_root, i64, i64 (%struct.file*, i64, i64, i64, i64)*, i64, i64, i64, i64, %struct.pgd_t*, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i32, %struct.spinlock, %struct.rw_semaphore, %struct.list_head, i64, i64, i64, i64, %struct.atomic64_t, i64, i64, i64, i64, %struct.spinlock, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, [44 x i64], %struct.mm_rss_stat, %struct.linux_binfmt*, %struct.mm_context_t, i64, %struct.core_state*, %struct.spinlock, %struct.kioctx_table*, %struct.user_namespace*, %struct.file*, %struct.mmu_notifier_subscriptions*, %struct.atomic_t, i8, %struct.uprobes_state, %struct.work_struct, i32 }
%struct.vm_area_struct = type { i64, i64, %struct.vm_area_struct*, %struct.vm_area_struct*, %struct.rb_node, i64, %struct.mm_struct*, %struct.pgprot, i64, %struct.anon.18, %struct.list_head, %struct.anon_vma*, %struct.vm_operations_struct*, i64, %struct.file*, i8*, %struct.atomic64_t, %struct.vm_userfaultfd_ctx }
%struct.pgprot = type { i64 }
%struct.anon.18 = type { %struct.rb_node, i64 }
%struct.anon_vma = type opaque
%struct.vm_operations_struct = type opaque
%struct.vm_userfaultfd_ctx = type {}
%struct.rb_root = type { %struct.rb_node* }
%struct.pgd_t = type { i64 }
%struct.rw_semaphore = type { %struct.atomic64_t, %struct.atomic64_t, %struct.raw_spinlock, %struct.list_head }
%struct.atomic64_t = type { i64 }
%struct.mm_rss_stat = type { [4 x %struct.atomic64_t] }
%struct.linux_binfmt = type opaque
%struct.mm_context_t = type { i64, %struct.atomic64_t, %struct.rw_semaphore, %struct.ldt_struct*, i16, %struct.mutex, i8*, %struct.vdso_image*, %struct.atomic_t, i16, i16 }
%struct.ldt_struct = type opaque
%struct.vdso_image = type opaque
%struct.core_state = type { %struct.atomic_t, %struct.core_thread, %struct.completion }
%struct.core_thread = type { %struct.task_struct*, %struct.core_thread* }
%struct.completion = type { i32, %struct.swait_queue_head }
%struct.swait_queue_head = type { %struct.raw_spinlock, %struct.list_head }
%struct.kioctx_table = type opaque
%struct.user_namespace = type opaque
%struct.file = type { %union.anon.1, %struct.path, %struct.inode*, %struct.file_operations*, %struct.spinlock, i32, %struct.atomic64_t, i32, i32, %struct.mutex, i64, %struct.fown_struct, %struct.cred*, %struct.file_ra_state, i64, i8*, %struct.list_head, %struct.list_head, %struct.address_space*, i32, i32 }
%union.anon.1 = type { %struct.callback_head }
%struct.path = type { %struct.vfsmount*, %struct.dentry* }
%struct.vfsmount = type opaque
%struct.dentry = type { i32, %struct.seqcount_spinlock, %struct.hlist_bl_node, %struct.dentry*, %struct.qstr, %struct.inode*, [32 x i8], %struct.lockref, %struct.dentry_operations*, %struct.super_block*, i64, i8*, %union.anon.63, %struct.list_head, %struct.list_head, %union.anon.64 }
%struct.seqcount_spinlock = type { %struct.seqcount }
%struct.hlist_bl_node = type { %struct.hlist_bl_node*, %struct.hlist_bl_node** }
%struct.qstr = type { %union.anon.2, i8* }
%union.anon.2 = type { i64 }
%struct.lockref = type { %union.anon.61 }
%union.anon.61 = type { %struct.anon.62 }
%struct.anon.62 = type { %struct.spinlock, i32 }
%struct.dentry_operations = type { i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.qstr*)*, i32 (%struct.dentry*, i32, i8*, %struct.qstr*)*, i32 (%struct.dentry*)*, i32 (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*)*, void (%struct.dentry*, %struct.inode*)*, i8* (%struct.dentry*, i8*, i32)*, %struct.vfsmount* (%struct.path*)*, i32 (%struct.path*, i1)*, %struct.dentry* (%struct.dentry*, %struct.inode*)*, [24 x i8] }
%struct.super_block = type { %struct.list_head, i32, i8, i64, i64, %struct.file_system_type*, %struct.super_operations*, %struct.dquot_operations*, %struct.quotactl_ops*, %struct.export_operations*, i64, i64, i64, %struct.dentry*, %struct.rw_semaphore, i32, %struct.atomic_t, %struct.xattr_handler**, %struct.hlist_bl_head, %struct.list_head, %struct.block_device*, %struct.backing_dev_info*, %struct.mtd_info*, %struct.hlist_node, i32, %struct.quota_info, %struct.sb_writers, i8*, i32, i64, i64, i32, %struct.fsnotify_mark_connector*, [32 x i8], %struct.uuid_t, i32, i32, %struct.mutex, i8*, %struct.dentry_operations*, i32, %struct.shrinker, %struct.atomic64_t, %struct.atomic64_t, i32, i32, %struct.workqueue_struct*, %struct.hlist_head, %struct.user_namespace*, %struct.list_lru, %struct.list_lru, %struct.callback_head, %struct.work_struct, %struct.mutex, i32, %struct.spinlock, %struct.list_head, %struct.spinlock, %struct.list_head }
%struct.file_system_type = type { i8*, i32, i32 (%struct.fs_context*)*, %struct.fs_parameter_spec*, %struct.dentry* (%struct.file_system_type*, i32, i8*, i8*)*, void (%struct.super_block*)*, %struct.module*, %struct.file_system_type*, %struct.hlist_head, %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key, [3 x %struct.lock_class_key], %struct.lock_class_key, %struct.lock_class_key, %struct.lock_class_key }
%struct.fs_context = type opaque
%struct.fs_parameter_spec = type opaque
%struct.module = type opaque
%struct.super_operations = type { %struct.inode* (%struct.super_block*)*, void (%struct.inode*)*, void (%struct.inode*)*, void (%struct.inode*, i32)*, i32 (%struct.inode*, %struct.writeback_control*)*, i32 (%struct.inode*)*, void (%struct.inode*)*, void (%struct.super_block*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.super_block*)*, i32 (%struct.dentry*, %struct.kstatfs*)*, i32 (%struct.super_block*, i32*, i8*)*, void (%struct.super_block*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.seq_file*, %struct.dentry*)*, i32 (%struct.super_block*, %struct.page*, i32)*, i64 (%struct.super_block*, %struct.shrink_control*)*, i64 (%struct.super_block*, %struct.shrink_control*)* }
%struct.writeback_control = type opaque
%struct.kstatfs = type opaque
%struct.seq_file = type opaque
%struct.page = type { i64, %union.anon.4, %union.anon.53, %struct.atomic_t, [8 x i8] }
%union.anon.4 = type { %struct.anon.5 }
%struct.anon.5 = type { %struct.list_head, %struct.address_space*, i64, i64 }
%union.anon.53 = type { %struct.atomic_t }
%struct.shrink_control = type { i32, i32, i64, i64, %struct.mem_cgroup* }
%struct.mem_cgroup = type opaque
%struct.dquot_operations = type { i32 (%struct.dquot*)*, %struct.dquot* (%struct.super_block*, i32)*, void (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, i32)*, i64* (%struct.inode*)*, i32 (%struct.inode*, %struct.kprojid_t*)*, i32 (%struct.inode*, i64*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.dquot = type { %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.mutex, %struct.spinlock, %struct.atomic_t, %struct.super_block*, %struct.kqid, i64, i64, %struct.mem_dqblk }
%struct.kqid = type { %union.anon.54, i32 }
%union.anon.54 = type { %struct.kuid_t }
%struct.kuid_t = type { i32 }
%struct.mem_dqblk = type { i64, i64, i64, i64, i64, i64, i64, i64, i64 }
%struct.kprojid_t = type { i32 }
%struct.quotactl_ops = type { i32 (%struct.super_block*, i32, i32, %struct.path*)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32, %struct.qc_info*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.kqid*, %struct.qc_dqblk*)*, i32 (%struct.super_block*, i64, %struct.qc_dqblk*)*, i32 (%struct.super_block*, %struct.qc_state*)*, i32 (%struct.super_block*, i32)* }
%struct.qc_info = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.qc_dqblk = type { i32, i64, i64, i64, i64, i64, i64, i64, i64, i32, i32, i64, i64, i64, i64, i32 }
%struct.qc_state = type { i32, [3 x %struct.qc_type_state] }
%struct.qc_type_state = type { i32, i32, i32, i32, i32, i32, i32, i64, i64, i64 }
%struct.export_operations = type opaque
%struct.xattr_handler = type opaque
%struct.hlist_bl_head = type { %struct.hlist_bl_node* }
%struct.block_device = type opaque
%struct.mtd_info = type opaque
%struct.hlist_node = type { %struct.hlist_node*, %struct.hlist_node** }
%struct.quota_info = type { i32, %struct.rw_semaphore, [3 x %struct.inode*], [3 x %struct.mem_dqinfo], [3 x %struct.quota_format_ops*] }
%struct.mem_dqinfo = type { %struct.quota_format_type*, i32, %struct.list_head, i64, i32, i32, i64, i64, i8* }
%struct.quota_format_type = type { i32, %struct.quota_format_ops*, %struct.module*, %struct.quota_format_type* }
%struct.quota_format_ops = type { i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.super_block*, i32)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.dquot*)*, i32 (%struct.super_block*, %struct.kqid*)* }
%struct.sb_writers = type { i32, %struct.wait_queue_head, [3 x %struct.percpu_rw_semaphore] }
%struct.wait_queue_head = type { %struct.spinlock, %struct.list_head }
%struct.percpu_rw_semaphore = type { %struct.rcu_sync, i32*, %struct.rcuwait, %struct.wait_queue_head, %struct.atomic_t }
%struct.rcu_sync = type { i32, i32, %struct.wait_queue_head, %struct.callback_head }
%struct.rcuwait = type { %struct.task_struct* }
%struct.fsnotify_mark_connector = type opaque
%struct.uuid_t = type { [16 x i8] }
%struct.shrinker = type { i64 (%struct.shrinker*, %struct.shrink_control*)*, i64 (%struct.shrinker*, %struct.shrink_control*)*, i64, i32, i32, %struct.list_head, %struct.atomic64_t* }
%struct.workqueue_struct = type opaque
%struct.hlist_head = type { %struct.hlist_node* }
%struct.list_lru = type { %struct.list_lru_node* }
%struct.list_lru_node = type { %struct.spinlock, %struct.list_lru_one, i64 }
%struct.list_lru_one = type { %struct.list_head, i64 }
%union.anon.63 = type { %struct.list_head }
%union.anon.64 = type { %struct.hlist_node }
%struct.inode = type { i16, i16, %struct.kuid_t, %struct.kgid_t, i32, %struct.inode_operations*, %struct.super_block*, %struct.address_space*, i64, %union.anon.55, i32, i64, %struct.timespec64, %struct.timespec64, %struct.timespec64, %struct.spinlock, i16, i8, i8, i64, i64, %struct.rw_semaphore, i64, i64, %struct.hlist_node, %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, %union.anon.56, %struct.atomic64_t, %struct.atomic64_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %struct.atomic_t, %union.anon.57, %struct.file_lock_context*, %struct.address_space, %struct.list_head, %union.anon.60, i32, i32, %struct.fsnotify_mark_connector*, i8* }
%struct.kgid_t = type { i32 }
%struct.inode_operations = type { %struct.dentry* (%struct.inode*, %struct.dentry*, i32)*, i8* (%struct.dentry*, %struct.inode*, %struct.delayed_call*)*, i32 (%struct.inode*, i32)*, %struct.posix_acl* (%struct.inode*, i32)*, i32 (%struct.dentry*, i8*, i32)*, i32 (%struct.inode*, %struct.dentry*, i16, i1)*, i32 (%struct.dentry*, %struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i8*)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.dentry*)*, i32 (%struct.inode*, %struct.dentry*, i16, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.inode*, %struct.dentry*, i32)*, i32 (%struct.dentry*, %struct.iattr*)*, i32 (%struct.path*, %struct.kstat*, i32, i32)*, i64 (%struct.dentry*, i8*, i64)*, i32 (%struct.inode*, %struct.fiemap_extent_info*, i64, i64)*, i32 (%struct.inode*, %struct.timespec64*, i32)*, i32 (%struct.inode*, %struct.dentry*, %struct.file*, i32, i16)*, i32 (%struct.inode*, %struct.dentry*, i16)*, i32 (%struct.inode*, %struct.posix_acl*, i32)*, [24 x i8] }
%struct.delayed_call = type { void (i8*)*, i8* }
%struct.posix_acl = type opaque
%struct.iattr = type { i32, i16, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec64, %struct.timespec64, %struct.timespec64, %struct.file* }
%struct.kstat = type { i32, i16, i32, i32, i64, i64, i64, i32, i32, %struct.kuid_t, %struct.kgid_t, i64, %struct.timespec64, %struct.timespec64, %struct.timespec64, %struct.timespec64, i64, i64 }
%struct.fiemap_extent_info = type opaque
%union.anon.55 = type { i32 }
%struct.timespec64 = type { i64, i64 }
%union.anon.56 = type { %struct.callback_head }
%union.anon.57 = type { %struct.file_operations* }
%struct.file_lock_context = type { %struct.spinlock, %struct.list_head, %struct.list_head, %struct.list_head }
%struct.address_space = type { %struct.inode*, %struct.xarray, i32, %struct.atomic_t, %struct.rb_root_cached, %struct.rw_semaphore, i64, i64, i64, %struct.address_space_operations*, i64, i32, %struct.spinlock, %struct.list_head, i8* }
%struct.xarray = type { %struct.spinlock, i32, i8* }
%struct.address_space_operations = type { i32 (%struct.page*, %struct.writeback_control*)*, i32 (%struct.file*, %struct.page*)*, i32 (%struct.address_space*, %struct.writeback_control*)*, i32 (%struct.page*)*, i32 (%struct.file*, %struct.address_space*, %struct.list_head*, i32)*, void (%struct.readahead_control*)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page**, i8**)*, i32 (%struct.file*, %struct.address_space*, i64, i32, i32, %struct.page*, i8*)*, i64 (%struct.address_space*, i64)*, void (%struct.page*, i32, i32)*, i32 (%struct.page*, i32)*, void (%struct.page*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.address_space*, %struct.page*, %struct.page*, i32)*, i1 (%struct.page*, i32)*, void (%struct.page*)*, i32 (%struct.page*)*, i32 (%struct.page*, i64, i64)*, void (%struct.page*, i8*, i8*)*, i32 (%struct.address_space*, %struct.page*)*, i32 (%struct.swap_info_struct*, %struct.file*, i64*)*, void (%struct.file*)* }
%struct.readahead_control = type opaque
%struct.kiocb = type { %struct.file*, i64, void (%struct.kiocb*, i64, i64)*, i8*, i32, i16, i16, %union.anon.6 }
%union.anon.6 = type { %struct.wait_page_queue* }
%struct.wait_page_queue = type opaque
%struct.iov_iter = type opaque
%struct.swap_info_struct = type opaque
%union.anon.60 = type { %struct.pipe_inode_info* }
%struct.file_operations = type { %struct.module*, i64 (%struct.file*, i64, i32)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.file*, i8*, i64, i64*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i64 (%struct.kiocb*, %struct.iov_iter*)*, i32 (%struct.kiocb*, i1)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.dir_context*)*, i32 (%struct.file*, %struct.poll_table_struct*)*, i64 (%struct.file*, i32, i64)*, i64 (%struct.file*, i32, i64)*, i32 (%struct.file*, %struct.vm_area_struct*)*, i64, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i8*)*, i32 (%struct.inode*, %struct.file*)*, i32 (%struct.file*, i64, i64, i32)*, i32 (i32, %struct.file*, i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.file*, %struct.page*, i32, i64, i64*, i32)*, i64 (%struct.file*, i64, i64, i64, i64)*, i32 (i32)*, i32 (%struct.file*, i32, %struct.file_lock*)*, i64 (%struct.pipe_inode_info*, %struct.file*, i64*, i64, i32)*, i64 (%struct.file*, i64*, %struct.pipe_inode_info*, i64, i32)*, i32 (%struct.file*, i64, %struct.file_lock**, i8**)*, i64 (%struct.file*, i32, i64, i64)*, void (%struct.seq_file*, %struct.file*)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i64 (%struct.file*, i64, %struct.file*, i64, i64, i32)*, i32 (%struct.file*, i64, i64, i32)* }
%struct.dir_context = type { i32 (%struct.dir_context*, i8*, i32, i64, i64, i32)*, i64 }
%struct.poll_table_struct = type opaque
%struct.file_lock = type { %struct.file_lock*, %struct.list_head, %struct.hlist_node, %struct.list_head, %struct.list_head, i8*, i32, i8, i32, i32, %struct.wait_queue_head, %struct.file*, i64, i64, %struct.fasync_struct*, i64, i64, %struct.file_lock_operations*, %struct.lock_manager_operations*, %union.anon.58 }
%struct.fasync_struct = type { %struct.rwlock_t, i32, i32, %struct.fasync_struct*, %struct.file*, %struct.callback_head }
%struct.rwlock_t = type { %struct.arch_rwlock_t }
%struct.arch_rwlock_t = type {}
%struct.file_lock_operations = type { void (%struct.file_lock*, %struct.file_lock*)*, void (%struct.file_lock*)* }
%struct.lock_manager_operations = type { i8* (i8*)*, void (i8*)*, void (%struct.file_lock*)*, i32 (%struct.file_lock*, i32)*, i1 (%struct.file_lock*)*, i32 (%struct.file_lock*, i32, %struct.list_head*)*, void (%struct.file_lock*, i8**)*, i1 (%struct.file_lock*)* }
%union.anon.58 = type { %struct.nfs_lock_info }
%struct.nfs_lock_info = type { i32, %struct.nlm_lockowner*, %struct.list_head }
%struct.nlm_lockowner = type opaque
%struct.fown_struct = type { %struct.rwlock_t, %struct.pid*, i32, %struct.kuid_t, %struct.kuid_t, i32 }
%struct.file_ra_state = type { i64, i32, i32, i32, i32, i64 }
%struct.mmu_notifier_subscriptions = type opaque
%struct.atomic_t = type { i32 }
%struct.uprobes_state = type {}
%struct.work_struct = type { %struct.atomic64_t, %struct.list_head, void (%struct.work_struct*)* }
%struct.vmacache = type { i64, [4 x %struct.vm_area_struct*] }
%struct.restart_block = type { i64 (%struct.restart_block*)*, %union.anon.19 }
%union.anon.19 = type { %struct.anon.20 }
%struct.anon.20 = type { i32*, i32, i32, i32, i64, i32* }
%struct.pid = type { %struct.refcount_struct, i32, %struct.spinlock, [4 x %struct.hlist_head], %struct.hlist_head, %struct.wait_queue_head, %struct.callback_head, [1 x %struct.upid] }
%struct.upid = type { i32, %struct.pid_namespace* }
%struct.pid_namespace = type opaque
%struct.prev_cputime = type { i64, i64, %struct.raw_spinlock }
%struct.posix_cputimers = type { [3 x %struct.posix_cputimer_base], i32, i32 }
%struct.posix_cputimer_base = type { i64, %struct.timerqueue_head }
%struct.posix_cputimers_work = type { %struct.callback_head, i32 }
%struct.cred = type { %struct.atomic_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, %struct.kuid_t, %struct.kgid_t, i32, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, %struct.kernel_cap_struct, i8, %struct.key*, %struct.key*, %struct.key*, %struct.key*, %struct.user_struct*, %struct.user_namespace*, %struct.group_info*, %union.anon.32 }
%struct.kernel_cap_struct = type { [2 x i32] }
%struct.user_struct = type { %struct.refcount_struct, %struct.atomic_t, %struct.atomic_t, %struct.atomic64_t, i64, i64, %struct.atomic64_t, %struct.hlist_node, %struct.kuid_t, %struct.atomic64_t, %struct.ratelimit_state }
%struct.ratelimit_state = type { %struct.raw_spinlock, i32, i32, i32, i32, i64, i64 }
%struct.group_info = type { %struct.atomic_t, i32, [0 x %struct.kgid_t] }
%union.anon.32 = type { %struct.callback_head }
%struct.key = type { %struct.refcount_struct, i32, %union.anon.24, %struct.rw_semaphore, %struct.key_user*, i8*, %union.anon.25, i64, %struct.kuid_t, %struct.kgid_t, i32, i16, i16, i16, i64, %union.anon.26, %union.anon.30, %struct.key_restriction* }
%union.anon.24 = type { %struct.rb_node }
%struct.key_user = type opaque
%union.anon.25 = type { i64 }
%union.anon.26 = type { %struct.keyring_index_key }
%struct.keyring_index_key = type { i64, %union.anon.27, %struct.key_type*, %struct.key_tag*, i8* }
%union.anon.27 = type { i64 }
%struct.key_type = type opaque
%struct.key_tag = type { %struct.callback_head, %struct.refcount_struct, i8 }
%union.anon.30 = type { %union.key_payload }
%union.key_payload = type { [4 x i8*] }
%struct.key_restriction = type { i32 (%struct.key*, %struct.key_type*, %union.key_payload*, %struct.key*)*, %struct.key*, %struct.key_type* }
%struct.nameidata = type opaque
%struct.fs_struct = type opaque
%struct.files_struct = type opaque
%struct.io_uring_task = type opaque
%struct.nsproxy = type opaque
%struct.signal_struct = type { %struct.refcount_struct, %struct.atomic_t, i32, %struct.list_head, %struct.wait_queue_head, %struct.task_struct*, %struct.sigpending, %struct.hlist_head, i32, i32, %struct.task_struct*, i32, i32, i8, i32, %struct.list_head, %struct.hrtimer, i64, [2 x %struct.cpu_itimer], %struct.thread_group_cputimer, %struct.posix_cputimers, [4 x %struct.pid*], %struct.pid*, i32, %struct.tty_struct*, %struct.seqlock_t, i64, i64, i64, i64, i64, i64, %struct.prev_cputime, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.task_io_accounting, i64, [16 x %struct.rlimit], i8, i16, i16, %struct.mm_struct*, %struct.mutex, %struct.mutex }
%struct.cpu_itimer = type { i64, i64 }
%struct.thread_group_cputimer = type { %struct.task_cputime_atomic }
%struct.task_cputime_atomic = type { %struct.atomic64_t, %struct.atomic64_t, %struct.atomic64_t }
%struct.tty_struct = type opaque
%struct.seqlock_t = type { %struct.seqcount_spinlock, %struct.spinlock }
%struct.rlimit = type { i64, i64 }
%struct.sighand_struct = type { %struct.spinlock, %struct.refcount_struct, %struct.wait_queue_head, [64 x %struct.k_sigaction] }
%struct.k_sigaction = type { %struct.sigaction }
%struct.sigaction = type { void (i32)*, i64, void ()*, %struct.sigset_t }
%struct.sigset_t = type { [1 x i64] }
%struct.sigpending = type { %struct.list_head, %struct.sigset_t }
%struct.seccomp = type { i32, %struct.atomic_t, %struct.seccomp_filter* }
%struct.seccomp_filter = type opaque
%struct.spinlock = type { %union.anon.0 }
%union.anon.0 = type { %struct.raw_spinlock }
%struct.raw_spinlock = type { %struct.arch_spinlock_t }
%struct.arch_spinlock_t = type {}
%struct.wake_q_node = type { %struct.wake_q_node* }
%struct.rb_root_cached = type { %struct.rb_root, %struct.rb_node* }
%struct.rt_mutex_waiter = type opaque
%struct.bio_list = type opaque
%struct.blk_plug = type opaque
%struct.reclaim_state = type opaque
%struct.backing_dev_info = type opaque
%struct.io_context = type { %struct.atomic64_t, %struct.atomic_t, %struct.atomic_t, %struct.spinlock, i16, %struct.xarray, %struct.io_cq*, %struct.hlist_head, %struct.work_struct }
%struct.io_cq = type { %struct.request_queue*, %struct.io_context*, %union.anon.33, %union.anon.34, i32 }
%struct.request_queue = type opaque
%union.anon.33 = type { %struct.list_head }
%union.anon.34 = type { %struct.hlist_node }
%struct.capture_control = type opaque
%struct.kernel_siginfo = type { %struct.anon.35 }
%struct.anon.35 = type { i32, i32, i32, %union.__sifields }
%union.__sifields = type { %struct.anon.39 }
%struct.anon.39 = type { i32, i32, i32, i64, i64 }
%struct.task_io_accounting = type {}
%struct.robust_list_head = type opaque
%struct.futex_pi_state = type opaque
%struct.perf_event_context = type opaque
%struct.mutex = type { %struct.atomic64_t, %struct.spinlock, %struct.list_head }
%struct.list_head = type { %struct.list_head*, %struct.list_head* }
%struct.rseq = type { i32, i32, %union.anon.46, i32, [12 x i8] }
%union.anon.46 = type { i64 }
%struct.tlbflush_unmap_batch = type { %struct.arch_tlbflush_unmap_batch, i8, i8 }
%struct.arch_tlbflush_unmap_batch = type { %struct.cpumask }
%union.anon.47 = type { %struct.callback_head }
%struct.pipe_inode_info = type opaque
%struct.page_frag = type { %struct.page*, i32, i32 }
%struct.vm_struct = type { %struct.vm_struct*, i8*, i64, i64, %struct.page**, i32, i64, i8* }
%struct.refcount_struct = type { %struct.atomic_t }
%struct.callback_head = type { %struct.callback_head*, void (%struct.callback_head*)* }
%struct.pv_irq_ops = type { %struct.paravirt_callee_save, %struct.paravirt_callee_save, %struct.paravirt_callee_save, %struct.paravirt_callee_save, void ()*, void ()* }
%struct.paravirt_callee_save = type { i8* }
%struct.pv_mmu_ops = type { void ()*, void ()*, void (i64)*, void (%struct.cpumask*, %struct.flush_tlb_info*)*, void (%struct.mmu_gather*, i8*)*, void (%struct.mm_struct*)*, %struct.paravirt_callee_save, void (i64)*, i64 ()*, void (i64)*, void (%struct.mm_struct*, %struct.mm_struct*)*, void (%struct.mm_struct*, %struct.mm_struct*)*, i32 (%struct.mm_struct*)*, void (%struct.mm_struct*, %struct.pgd_t*)*, void (%struct.mm_struct*, i64)*, void (%struct.mm_struct*, i64)*, void (%struct.mm_struct*, i64)*, void (%struct.mm_struct*, i64)*, void (i64)*, void (i64)*, void (i64)*, void (i64)*, void (%struct.pte_t*, i64)*, void (%struct.pmd_t*, i64)*, i64 (%struct.vm_area_struct*, i64, %struct.pte_t*)*, void (%struct.vm_area_struct*, i64, %struct.pte_t*, i64)*, %struct.paravirt_callee_save, %struct.paravirt_callee_save, %struct.paravirt_callee_save, %struct.paravirt_callee_save, void (%struct.pud_t*, i64)*, %struct.paravirt_callee_save, %struct.paravirt_callee_save, %struct.paravirt_callee_save, %struct.paravirt_callee_save, void (%struct.p4d_t*, i64)*, %struct.paravirt_callee_save, %struct.paravirt_callee_save, void (%struct.pgd_t*, i64)*, %struct.pv_lazy_ops, void (i32, i64, i64)* }
%struct.flush_tlb_info = type opaque
%struct.mmu_gather = type opaque
%struct.pte_t = type { i64 }
%struct.pmd_t = type { i64 }
%struct.pud_t = type { i64 }
%struct.p4d_t = type { i64 }
%struct.pv_lazy_ops = type { void ()*, void ()*, void ()* }
%struct.pv_lock_ops = type { void (%struct.qspinlock*, i32)*, %struct.paravirt_callee_save, void (i8*, i8)*, void (i32)*, %struct.paravirt_callee_save }
%struct.qspinlock = type opaque
%struct.regmap_range = type { i32, i32 }
%struct.regmap = type { %union.anon, void (i8*)*, void (i8*)*, i8*, i32, %struct.device*, i8*, %struct.regmap_format, %struct.regmap_bus*, i8*, i8*, i8, %struct.spinlock, %struct.wait_queue_head, %struct.list_head, %struct.list_head, i32, i32, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, %struct.regmap_access_table*, %struct.regmap_access_table*, %struct.regmap_access_table*, %struct.regmap_access_table*, %struct.regmap_access_table*, %struct.regmap_access_table*, i32 (i8*, i32, i32*)*, i32 (i8*, i32, i32)*, i32 (i8*, i32, i32, i32)*, i8, i64, i64, i32, i32, i32, %struct.regcache_ops*, i32, i32, i32, i32, i32, i8, i8, i8, %struct.reg_default*, i8*, i8*, i8, i8, %struct.reg_sequence*, i32, i8, i8, i8, i64, i64, %struct.rb_root, i8*, %struct.hwspinlock*, i8 }
%union.anon = type { %struct.mutex }
%struct.device = type { %struct.kobject, %struct.device*, %struct.device_private*, i8*, %struct.device_type*, %struct.bus_type*, %struct.device_driver*, i8*, i8*, %struct.mutex, %struct.dev_links_info, %struct.dev_pm_info, %struct.dev_pm_domain*, %struct.irq_domain*, %struct.list_head, %struct.dma_map_ops*, i64*, i64, i64, %struct.bus_dma_region*, %struct.device_dma_parameters*, %struct.list_head, %struct.dev_archdata, %struct.device_node*, %struct.fwnode_handle*, i32, i32, %struct.spinlock, %struct.list_head, %struct.class*, %struct.attribute_group**, void (%struct.device*)*, %struct.iommu_group*, %struct.dev_iommu*, i8 }
%struct.kobject = type { i8*, %struct.list_head, %struct.kobject*, %struct.kset*, %struct.kobj_type*, %struct.kernfs_node*, %struct.kref, i8 }
%struct.kset = type { %struct.list_head, %struct.spinlock, %struct.kobject, %struct.kset_uevent_ops* }
%struct.kset_uevent_ops = type { i32 (%struct.kset*, %struct.kobject*)*, i8* (%struct.kset*, %struct.kobject*)*, i32 (%struct.kset*, %struct.kobject*, %struct.kobj_uevent_env*)* }
%struct.kobj_uevent_env = type { [3 x i8*], [64 x i8*], i32, [2048 x i8], i32 }
%struct.kobj_type = type { void (%struct.kobject*)*, %struct.sysfs_ops*, %struct.attribute**, %struct.attribute_group**, %struct.kobj_ns_type_operations* (%struct.kobject*)*, i8* (%struct.kobject*)*, void (%struct.kobject*, %struct.kuid_t*, %struct.kgid_t*)* }
%struct.sysfs_ops = type { i64 (%struct.kobject*, %struct.attribute*, i8*)*, i64 (%struct.kobject*, %struct.attribute*, i8*, i64)* }
%struct.attribute = type { i8*, i16 }
%struct.kobj_ns_type_operations = type { i32, i1 ()*, i8* ()*, i8* (%struct.sock*)*, i8* ()*, void (i8*)* }
%struct.sock = type opaque
%struct.kernfs_node = type { %struct.atomic_t, %struct.atomic_t, %struct.kernfs_node*, i8*, %struct.rb_node, i8*, i32, %union.anon.65, i8*, i64, i16, i16, %struct.kernfs_iattrs* }
%union.anon.65 = type { %struct.kernfs_elem_attr }
%struct.kernfs_elem_attr = type { %struct.kernfs_ops*, %struct.kernfs_open_node*, i64, %struct.kernfs_node* }
%struct.kernfs_ops = type { i32 (%struct.kernfs_open_file*)*, void (%struct.kernfs_open_file*)*, i32 (%struct.seq_file*, i8*)*, i8* (%struct.seq_file*, i64*)*, i8* (%struct.seq_file*, i8*, i64*)*, void (%struct.seq_file*, i8*)*, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i64, i8, i64 (%struct.kernfs_open_file*, i8*, i64, i64)*, i32 (%struct.kernfs_open_file*, %struct.poll_table_struct*)*, i32 (%struct.kernfs_open_file*, %struct.vm_area_struct*)* }
%struct.kernfs_open_file = type { %struct.kernfs_node*, %struct.file*, %struct.seq_file*, i8*, %struct.mutex, %struct.mutex, i32, %struct.list_head, i8*, i64, i8, %struct.vm_operations_struct* }
%struct.kernfs_open_node = type opaque
%struct.kernfs_iattrs = type opaque
%struct.kref = type { %struct.refcount_struct }
%struct.device_private = type opaque
%struct.device_type = type { i8*, %struct.attribute_group**, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*, %struct.kuid_t*, %struct.kgid_t*)*, void (%struct.device*)*, %struct.dev_pm_ops* }
%struct.dev_pm_ops = type { i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)* }
%struct.bus_type = type { i8*, i8*, %struct.device*, %struct.attribute_group**, %struct.attribute_group**, %struct.attribute_group**, i32 (%struct.device*, %struct.device_driver*)*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, i32 (%struct.device*)*, i32 (%struct.device*)*, %struct.dev_pm_ops*, %struct.iommu_ops*, %struct.subsys_private*, %struct.lock_class_key, i8 }
%struct.iommu_ops = type opaque
%struct.subsys_private = type opaque
%struct.device_driver = type { i8*, %struct.bus_type*, %struct.module*, i8*, i8, i32, %struct.of_device_id*, %struct.acpi_device_id*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*)*, void (%struct.device*)*, i32 (%struct.device*, i32)*, i32 (%struct.device*)*, %struct.attribute_group**, %struct.attribute_group**, %struct.dev_pm_ops*, void (%struct.device*)*, %struct.driver_private* }
%struct.of_device_id = type opaque
%struct.acpi_device_id = type opaque
%struct.driver_private = type opaque
%struct.dev_links_info = type { %struct.list_head, %struct.list_head, %struct.list_head, %struct.list_head, i8, i32 }
%struct.dev_pm_info = type { %struct.pm_message, i16, i32, %struct.spinlock, %struct.list_head, %struct.completion, %struct.wakeup_source*, i8, %struct.hrtimer, i64, %struct.work_struct, %struct.wait_queue_head, %struct.wake_irq*, %struct.atomic_t, %struct.atomic_t, i16, i32, i32, i32, i32, i32, i64, i64, i64, i64, %struct.pm_subsys_data*, void (%struct.device*, i32)*, %struct.dev_pm_qos* }
%struct.pm_message = type { i32 }
%struct.wakeup_source = type { i8*, i32, %struct.list_head, %struct.spinlock, %struct.wake_irq*, %struct.timer_list, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, i64, %struct.device*, i8 }
%struct.timer_list = type { %struct.hlist_node, i64, void (%struct.timer_list*)*, i32 }
%struct.wake_irq = type opaque
%struct.pm_subsys_data = type { %struct.spinlock, i32, %struct.list_head, %struct.pm_domain_data* }
%struct.pm_domain_data = type opaque
%struct.dev_pm_qos = type opaque
%struct.dev_pm_domain = type { %struct.dev_pm_ops, i32 (%struct.device*)*, void (%struct.device*, i1)*, i32 (%struct.device*)*, void (%struct.device*)*, void (%struct.device*)* }
%struct.irq_domain = type opaque
%struct.dma_map_ops = type opaque
%struct.bus_dma_region = type opaque
%struct.device_dma_parameters = type { i32, i64 }
%struct.dev_archdata = type {}
%struct.device_node = type opaque
%struct.fwnode_handle = type { %struct.fwnode_handle*, %struct.fwnode_operations*, %struct.device* }
%struct.fwnode_operations = type { %struct.fwnode_handle* (%struct.fwnode_handle*)*, void (%struct.fwnode_handle*)*, i1 (%struct.fwnode_handle*)*, i8* (%struct.fwnode_handle*, %struct.device*)*, i1 (%struct.fwnode_handle*, i8*)*, i32 (%struct.fwnode_handle*, i8*, i32, i8*, i64)*, i32 (%struct.fwnode_handle*, i8*, i8**, i64)*, i8* (%struct.fwnode_handle*)*, i8* (%struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*, %struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*, i8*)*, i32 (%struct.fwnode_handle*, i8*, i8*, i32, i32, %struct.fwnode_reference_args*)*, %struct.fwnode_handle* (%struct.fwnode_handle*, %struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*)*, %struct.fwnode_handle* (%struct.fwnode_handle*)*, i32 (%struct.fwnode_handle*, %struct.fwnode_endpoint*)*, i32 (%struct.fwnode_handle*, %struct.device*)* }
%struct.fwnode_reference_args = type { %struct.fwnode_handle*, i32, [8 x i64] }
%struct.fwnode_endpoint = type { i32, i32, %struct.fwnode_handle* }
%struct.class = type { i8*, %struct.module*, %struct.attribute_group**, %struct.attribute_group**, %struct.kobject*, i32 (%struct.device*, %struct.kobj_uevent_env*)*, i8* (%struct.device*, i16*)*, void (%struct.class*)*, void (%struct.device*)*, i32 (%struct.device*)*, %struct.kobj_ns_type_operations*, i8* (%struct.device*)*, void (%struct.device*, %struct.kuid_t*, %struct.kgid_t*)*, %struct.dev_pm_ops*, %struct.subsys_private* }
%struct.attribute_group = type { i8*, i16 (%struct.kobject*, %struct.attribute*, i32)*, i16 (%struct.kobject*, %struct.bin_attribute*, i32)*, %struct.attribute**, %struct.bin_attribute** }
%struct.bin_attribute = type { %struct.attribute, i64, i8*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i64 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, i8*, i64, i64)*, i32 (%struct.file*, %struct.kobject*, %struct.bin_attribute*, %struct.vm_area_struct*)* }
%struct.iommu_group = type opaque
%struct.dev_iommu = type opaque
%struct.regmap_format = type { i64, i64, i64, i64, void (%struct.regmap*, i32, i32)*, void (i8*, i32, i32)*, void (i8*, i32, i32)*, i32 (i8*)*, void (i8*)* }
%struct.regmap_bus = type { i8, i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)*, i32 (i8*, i32, i32)*, i32 (i8*, i32, i32, i32)*, i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i32, i32*)*, void (i8*)*, %struct.regmap_async* ()*, i8, i32, i32, i64, i64 }
%struct.regmap_async = type { %struct.list_head, %struct.regmap*, i8* }
%struct.regcache_ops = type { i8*, i32, i32 (%struct.regmap*)*, i32 (%struct.regmap*)*, i32 (%struct.regmap*, i32, i32*)*, i32 (%struct.regmap*, i32, i32)*, i32 (%struct.regmap*, i32, i32)*, i32 (%struct.regmap*, i32, i32)* }
%struct.reg_default = type { i32, i32 }
%struct.reg_sequence = type { i32, i32, i32 }
%struct.hwspinlock = type opaque
%struct.regmap_access_table = type { %struct.regmap_range*, i32, %struct.regmap_range*, i32 }
%struct.regmap_config = type { i8*, i32, i32, i32, i32, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)*, i8, void (i8*)*, void (i8*)*, i8*, i32 (i8*, i32, i32*)*, i32 (i8*, i32, i32)*, i8, i32, %struct.regmap_access_table*, %struct.regmap_access_table*, %struct.regmap_access_table*, %struct.regmap_access_table*, %struct.regmap_access_table*, %struct.regmap_access_table*, %struct.reg_default*, i32, i32, i8*, i32, i64, i64, i8, i8, i8, i8, i32, i32, %struct.regmap_range_cfg*, i32, i8, i32, i32, i8 }
%struct.regmap_range_cfg = type { i8*, i32, i32, i32, i32, i32, i32, i32 }
%struct.regmap_range_node = type { %struct.rb_node, i8*, %struct.regmap*, i32, i32, i32, i32, i32, i32, i32 }
%struct.anon = type { %struct.spinlock, i64 }
%struct.regmap_field = type { %struct.regmap*, i32, i32, i32, i32, i32 }
%struct.reg_field = type { i32, i32, i32, i32, i32 }
%struct.wait_queue_entry = type { i32, i8*, i32 (%struct.wait_queue_entry*, i32, i32, i8*)*, %struct.list_head }

@.str = private unnamed_addr constant [11 x i8] c"big-endian\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"little-endian\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"native-endian\00", align 1
@__regmap_init.__key = internal global %struct.lock_class_key zeroinitializer, align 1, !dbg !0
@.str.3 = private unnamed_addr constant [12 x i8] c"&map->mutex\00", align 1
@__regmap_init.__key.4 = internal global %struct.lock_class_key zeroinitializer, align 1, !dbg !3859
@.str.5 = private unnamed_addr constant [18 x i8] c"&map->async_waitq\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"Invalid range %d: %d < %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"Invalid range %d: %d > %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"Invalid range %d: selector out of map\0A\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c"Invalid range %d: window_len 0\0A\00", align 1
@.str.10 = private unnamed_addr constant [37 x i8] c"Range %d: selector for %d in window\0A\00", align 1
@.str.11 = private unnamed_addr constant [35 x i8] c"Range %d: window for %d in window\0A\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"Failed to add range %d\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"%x <= %x\0A\00", align 1
@regmap_register_patch.__warned = internal global i8 0, section ".data.once", align 1, !dbg !3861
@.str.14 = private unnamed_addr constant [31 x i8] c"invalid registers number (%d)\0A\00", align 1
@.str.15 = private unnamed_addr constant [29 x i8] c"drivers/base/regmap/regmap.c\00", align 1
@__UNIQUE_ID___addressable_regmap_initcall214 = internal global i8* bitcast (i32 ()* @regmap_initcall to i8*), section ".discard.addressable", align 8, !dbg !3868
@kmalloc_caches = external dso_local global [3 x [14 x %struct.kmem_cache*]], align 16
@.str.16 = private unnamed_addr constant [21 x i8] c"include/linux/slab.h\00", align 1
@.str.17 = private unnamed_addr constant [42 x i8] c"Error in caching of register: %x ret: %d\0A\00", align 1
@.str.18 = private unnamed_addr constant [30 x i8] c"Failed to schedule write: %d\0A\00", align 1
@.str.19 = private unnamed_addr constant [10 x i8] c"%x => %x\0A\00", align 1
@pv_ops = external dso_local global %struct.paravirt_patch_template, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (i8** @__UNIQUE_ID___addressable_regmap_initcall214 to i8*)], section "llvm.metadata"

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_reg_in_ranges(i32 %reg, %struct.regmap_range* %ranges, i32 %nranges) #0 !dbg !3876 {
entry:
  %retval = alloca i1, align 1
  %reg.addr = alloca i32, align 4
  %ranges.addr = alloca %struct.regmap_range*, align 8
  %nranges.addr = alloca i32, align 4
  %r = alloca %struct.regmap_range*, align 8
  %i = alloca i32, align 4
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !3879, metadata !DIExpression()), !dbg !3880
  store %struct.regmap_range* %ranges, %struct.regmap_range** %ranges.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_range** %ranges.addr, metadata !3881, metadata !DIExpression()), !dbg !3882
  store i32 %nranges, i32* %nranges.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nranges.addr, metadata !3883, metadata !DIExpression()), !dbg !3884
  call void @llvm.dbg.declare(metadata %struct.regmap_range** %r, metadata !3885, metadata !DIExpression()), !dbg !3886
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3887, metadata !DIExpression()), !dbg !3888
  store i32 0, i32* %i, align 4, !dbg !3889
  %0 = load %struct.regmap_range*, %struct.regmap_range** %ranges.addr, align 8, !dbg !3891
  store %struct.regmap_range* %0, %struct.regmap_range** %r, align 8, !dbg !3892
  br label %for.cond, !dbg !3893

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !3894
  %2 = load i32, i32* %nranges.addr, align 4, !dbg !3896
  %cmp = icmp ult i32 %1, %2, !dbg !3897
  br i1 %cmp, label %for.body, label %for.end, !dbg !3898

for.body:                                         ; preds = %for.cond
  %3 = load i32, i32* %reg.addr, align 4, !dbg !3899
  %4 = load %struct.regmap_range*, %struct.regmap_range** %r, align 8, !dbg !3901
  %call = call zeroext i1 @regmap_reg_in_range(i32 %3, %struct.regmap_range* %4) #11, !dbg !3902
  br i1 %call, label %if.then, label %if.end, !dbg !3903

if.then:                                          ; preds = %for.body
  store i1 true, i1* %retval, align 1, !dbg !3904
  br label %return, !dbg !3904

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !3905

for.inc:                                          ; preds = %if.end
  %5 = load i32, i32* %i, align 4, !dbg !3906
  %inc = add i32 %5, 1, !dbg !3906
  store i32 %inc, i32* %i, align 4, !dbg !3906
  %6 = load %struct.regmap_range*, %struct.regmap_range** %r, align 8, !dbg !3907
  %incdec.ptr = getelementptr %struct.regmap_range, %struct.regmap_range* %6, i32 1, !dbg !3907
  store %struct.regmap_range* %incdec.ptr, %struct.regmap_range** %r, align 8, !dbg !3907
  br label %for.cond, !dbg !3908, !llvm.loop !3909

for.end:                                          ; preds = %for.cond
  store i1 false, i1* %retval, align 1, !dbg !3911
  br label %return, !dbg !3911

return:                                           ; preds = %for.end, %if.then
  %7 = load i1, i1* %retval, align 1, !dbg !3912
  ret i1 %7, !dbg !3912
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @regmap_reg_in_range(i32 %reg, %struct.regmap_range* %range) #0 !dbg !3913 {
entry:
  %reg.addr = alloca i32, align 4
  %range.addr = alloca %struct.regmap_range*, align 8
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !3916, metadata !DIExpression()), !dbg !3917
  store %struct.regmap_range* %range, %struct.regmap_range** %range.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_range** %range.addr, metadata !3918, metadata !DIExpression()), !dbg !3919
  %0 = load i32, i32* %reg.addr, align 4, !dbg !3920
  %1 = load %struct.regmap_range*, %struct.regmap_range** %range.addr, align 8, !dbg !3921
  %range_min = getelementptr inbounds %struct.regmap_range, %struct.regmap_range* %1, i32 0, i32 0, !dbg !3922
  %2 = load i32, i32* %range_min, align 4, !dbg !3922
  %cmp = icmp uge i32 %0, %2, !dbg !3923
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3924

land.rhs:                                         ; preds = %entry
  %3 = load i32, i32* %reg.addr, align 4, !dbg !3925
  %4 = load %struct.regmap_range*, %struct.regmap_range** %range.addr, align 8, !dbg !3926
  %range_max = getelementptr inbounds %struct.regmap_range, %struct.regmap_range* %4, i32 0, i32 1, !dbg !3927
  %5 = load i32, i32* %range_max, align 4, !dbg !3927
  %cmp1 = icmp ule i32 %3, %5, !dbg !3928
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ], !dbg !3929
  ret i1 %6, !dbg !3930
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_check_range_table(%struct.regmap* %map, i32 %reg, %struct.regmap_access_table* %table) #0 !dbg !3931 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %table.addr = alloca %struct.regmap_access_table*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !3934, metadata !DIExpression()), !dbg !3935
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !3936, metadata !DIExpression()), !dbg !3937
  store %struct.regmap_access_table* %table, %struct.regmap_access_table** %table.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_access_table** %table.addr, metadata !3938, metadata !DIExpression()), !dbg !3939
  %0 = load i32, i32* %reg.addr, align 4, !dbg !3940
  %1 = load %struct.regmap_access_table*, %struct.regmap_access_table** %table.addr, align 8, !dbg !3942
  %no_ranges = getelementptr inbounds %struct.regmap_access_table, %struct.regmap_access_table* %1, i32 0, i32 2, !dbg !3943
  %2 = load %struct.regmap_range*, %struct.regmap_range** %no_ranges, align 8, !dbg !3943
  %3 = load %struct.regmap_access_table*, %struct.regmap_access_table** %table.addr, align 8, !dbg !3944
  %n_no_ranges = getelementptr inbounds %struct.regmap_access_table, %struct.regmap_access_table* %3, i32 0, i32 3, !dbg !3945
  %4 = load i32, i32* %n_no_ranges, align 8, !dbg !3945
  %call = call zeroext i1 @regmap_reg_in_ranges(i32 %0, %struct.regmap_range* %2, i32 %4) #11, !dbg !3946
  br i1 %call, label %if.then, label %if.end, !dbg !3947

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !3948
  br label %return, !dbg !3948

if.end:                                           ; preds = %entry
  %5 = load %struct.regmap_access_table*, %struct.regmap_access_table** %table.addr, align 8, !dbg !3949
  %n_yes_ranges = getelementptr inbounds %struct.regmap_access_table, %struct.regmap_access_table* %5, i32 0, i32 1, !dbg !3951
  %6 = load i32, i32* %n_yes_ranges, align 8, !dbg !3951
  %tobool = icmp ne i32 %6, 0, !dbg !3949
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !3952

if.then1:                                         ; preds = %if.end
  store i1 true, i1* %retval, align 1, !dbg !3953
  br label %return, !dbg !3953

if.end2:                                          ; preds = %if.end
  %7 = load i32, i32* %reg.addr, align 4, !dbg !3954
  %8 = load %struct.regmap_access_table*, %struct.regmap_access_table** %table.addr, align 8, !dbg !3955
  %yes_ranges = getelementptr inbounds %struct.regmap_access_table, %struct.regmap_access_table* %8, i32 0, i32 0, !dbg !3956
  %9 = load %struct.regmap_range*, %struct.regmap_range** %yes_ranges, align 8, !dbg !3956
  %10 = load %struct.regmap_access_table*, %struct.regmap_access_table** %table.addr, align 8, !dbg !3957
  %n_yes_ranges3 = getelementptr inbounds %struct.regmap_access_table, %struct.regmap_access_table* %10, i32 0, i32 1, !dbg !3958
  %11 = load i32, i32* %n_yes_ranges3, align 8, !dbg !3958
  %call4 = call zeroext i1 @regmap_reg_in_ranges(i32 %7, %struct.regmap_range* %9, i32 %11) #11, !dbg !3959
  store i1 %call4, i1* %retval, align 1, !dbg !3960
  br label %return, !dbg !3960

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %12 = load i1, i1* %retval, align 1, !dbg !3961
  ret i1 %12, !dbg !3961
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_writeable(%struct.regmap* %map, i32 %reg) #0 !dbg !3962 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !3965, metadata !DIExpression()), !dbg !3966
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !3967, metadata !DIExpression()), !dbg !3968
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !3969
  %max_register = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 17, !dbg !3971
  %1 = load i32, i32* %max_register, align 4, !dbg !3971
  %tobool = icmp ne i32 %1, 0, !dbg !3969
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !3972

land.lhs.true:                                    ; preds = %entry
  %2 = load i32, i32* %reg.addr, align 4, !dbg !3973
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !3974
  %max_register1 = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 17, !dbg !3975
  %4 = load i32, i32* %max_register1, align 4, !dbg !3975
  %cmp = icmp ugt i32 %2, %4, !dbg !3976
  br i1 %cmp, label %if.then, label %if.end, !dbg !3977

if.then:                                          ; preds = %land.lhs.true
  store i1 false, i1* %retval, align 1, !dbg !3978
  br label %return, !dbg !3978

if.end:                                           ; preds = %land.lhs.true, %entry
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !3979
  %writeable_reg = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 18, !dbg !3981
  %6 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_reg, align 8, !dbg !3981
  %tobool2 = icmp ne i1 (%struct.device*, i32)* %6, null, !dbg !3979
  br i1 %tobool2, label %if.then3, label %if.end5, !dbg !3982

if.then3:                                         ; preds = %if.end
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !3983
  %writeable_reg4 = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 18, !dbg !3984
  %8 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_reg4, align 8, !dbg !3984
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !3985
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 5, !dbg !3986
  %10 = load %struct.device*, %struct.device** %dev, align 8, !dbg !3986
  %11 = load i32, i32* %reg.addr, align 4, !dbg !3987
  %call = call zeroext i1 %8(%struct.device* %10, i32 %11) #11, !dbg !3983
  store i1 %call, i1* %retval, align 1, !dbg !3988
  br label %return, !dbg !3988

if.end5:                                          ; preds = %if.end
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !3989
  %wr_table = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 24, !dbg !3991
  %13 = load %struct.regmap_access_table*, %struct.regmap_access_table** %wr_table, align 8, !dbg !3991
  %tobool6 = icmp ne %struct.regmap_access_table* %13, null, !dbg !3989
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !3992

if.then7:                                         ; preds = %if.end5
  %14 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !3993
  %15 = load i32, i32* %reg.addr, align 4, !dbg !3994
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !3995
  %wr_table8 = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 24, !dbg !3996
  %17 = load %struct.regmap_access_table*, %struct.regmap_access_table** %wr_table8, align 8, !dbg !3996
  %call9 = call zeroext i1 @regmap_check_range_table(%struct.regmap* %14, i32 %15, %struct.regmap_access_table* %17) #11, !dbg !3997
  store i1 %call9, i1* %retval, align 1, !dbg !3998
  br label %return, !dbg !3998

if.end10:                                         ; preds = %if.end5
  store i1 true, i1* %retval, align 1, !dbg !3999
  br label %return, !dbg !3999

return:                                           ; preds = %if.end10, %if.then7, %if.then3, %if.then
  %18 = load i1, i1* %retval, align 1, !dbg !4000
  ret i1 %18, !dbg !4000
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_cached(%struct.regmap* %map, i32 %reg) #0 !dbg !4001 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %val = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4002, metadata !DIExpression()), !dbg !4003
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !4004, metadata !DIExpression()), !dbg !4005
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4006, metadata !DIExpression()), !dbg !4007
  call void @llvm.dbg.declare(metadata i32* %val, metadata !4008, metadata !DIExpression()), !dbg !4009
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4010
  %cache_type = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 40, !dbg !4012
  %1 = load i32, i32* %cache_type, align 8, !dbg !4012
  %cmp = icmp eq i32 %1, 0, !dbg !4013
  br i1 %cmp, label %if.then, label %if.end, !dbg !4014

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !4015
  br label %return, !dbg !4015

if.end:                                           ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4016
  %cache_ops = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 39, !dbg !4018
  %3 = load %struct.regcache_ops*, %struct.regcache_ops** %cache_ops, align 8, !dbg !4018
  %tobool = icmp ne %struct.regcache_ops* %3, null, !dbg !4016
  br i1 %tobool, label %if.end2, label %if.then1, !dbg !4019

if.then1:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1, !dbg !4020
  br label %return, !dbg !4020

if.end2:                                          ; preds = %if.end
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4021
  %max_register = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 17, !dbg !4023
  %5 = load i32, i32* %max_register, align 4, !dbg !4023
  %tobool3 = icmp ne i32 %5, 0, !dbg !4021
  br i1 %tobool3, label %land.lhs.true, label %if.end7, !dbg !4024

land.lhs.true:                                    ; preds = %if.end2
  %6 = load i32, i32* %reg.addr, align 4, !dbg !4025
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4026
  %max_register4 = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 17, !dbg !4027
  %8 = load i32, i32* %max_register4, align 4, !dbg !4027
  %cmp5 = icmp ugt i32 %6, %8, !dbg !4028
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !4029

if.then6:                                         ; preds = %land.lhs.true
  store i1 false, i1* %retval, align 1, !dbg !4030
  br label %return, !dbg !4030

if.end7:                                          ; preds = %land.lhs.true, %if.end2
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4031
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 1, !dbg !4032
  %10 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !4032
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4033
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 3, !dbg !4034
  %12 = load i8*, i8** %lock_arg, align 8, !dbg !4034
  call void %10(i8* %12) #11, !dbg !4031
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4035
  %14 = load i32, i32* %reg.addr, align 4, !dbg !4036
  %call = call i32 @regcache_read(%struct.regmap* %13, i32 %14, i32* %val) #11, !dbg !4037
  store i32 %call, i32* %ret, align 4, !dbg !4038
  %15 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4039
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %15, i32 0, i32 2, !dbg !4040
  %16 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !4040
  %17 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4041
  %lock_arg8 = getelementptr inbounds %struct.regmap, %struct.regmap* %17, i32 0, i32 3, !dbg !4042
  %18 = load i8*, i8** %lock_arg8, align 8, !dbg !4042
  call void %16(i8* %18) #11, !dbg !4039
  %19 = load i32, i32* %ret, align 4, !dbg !4043
  %tobool9 = icmp ne i32 %19, 0, !dbg !4043
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !4045

if.then10:                                        ; preds = %if.end7
  store i1 false, i1* %retval, align 1, !dbg !4046
  br label %return, !dbg !4046

if.end11:                                         ; preds = %if.end7
  store i1 true, i1* %retval, align 1, !dbg !4047
  br label %return, !dbg !4047

return:                                           ; preds = %if.end11, %if.then10, %if.then6, %if.then1, %if.then
  %20 = load i1, i1* %retval, align 1, !dbg !4048
  ret i1 %20, !dbg !4048
}

; Function Attrs: noredzone
declare dso_local i32 @regcache_read(%struct.regmap*, i32, i32*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_readable(%struct.regmap* %map, i32 %reg) #0 !dbg !4049 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4050, metadata !DIExpression()), !dbg !4051
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !4052, metadata !DIExpression()), !dbg !4053
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4054
  %reg_read = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 30, !dbg !4056
  %1 = load i32 (i8*, i32, i32*)*, i32 (i8*, i32, i32*)** %reg_read, align 8, !dbg !4056
  %tobool = icmp ne i32 (i8*, i32, i32*)* %1, null, !dbg !4054
  br i1 %tobool, label %if.end, label %if.then, !dbg !4057

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !4058
  br label %return, !dbg !4058

if.end:                                           ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4059
  %max_register = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 17, !dbg !4061
  %3 = load i32, i32* %max_register, align 4, !dbg !4061
  %tobool1 = icmp ne i32 %3, 0, !dbg !4059
  br i1 %tobool1, label %land.lhs.true, label %if.end4, !dbg !4062

land.lhs.true:                                    ; preds = %if.end
  %4 = load i32, i32* %reg.addr, align 4, !dbg !4063
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4064
  %max_register2 = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 17, !dbg !4065
  %6 = load i32, i32* %max_register2, align 4, !dbg !4065
  %cmp = icmp ugt i32 %4, %6, !dbg !4066
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !4067

if.then3:                                         ; preds = %land.lhs.true
  store i1 false, i1* %retval, align 1, !dbg !4068
  br label %return, !dbg !4068

if.end4:                                          ; preds = %land.lhs.true, %if.end
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4069
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 7, !dbg !4071
  %format_write = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 4, !dbg !4072
  %8 = load void (%struct.regmap*, i32, i32)*, void (%struct.regmap*, i32, i32)** %format_write, align 8, !dbg !4072
  %tobool5 = icmp ne void (%struct.regmap*, i32, i32)* %8, null, !dbg !4069
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !4073

if.then6:                                         ; preds = %if.end4
  store i1 false, i1* %retval, align 1, !dbg !4074
  br label %return, !dbg !4074

if.end7:                                          ; preds = %if.end4
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4075
  %readable_reg = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 19, !dbg !4077
  %10 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %readable_reg, align 8, !dbg !4077
  %tobool8 = icmp ne i1 (%struct.device*, i32)* %10, null, !dbg !4075
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !4078

if.then9:                                         ; preds = %if.end7
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4079
  %readable_reg10 = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 19, !dbg !4080
  %12 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %readable_reg10, align 8, !dbg !4080
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4081
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %13, i32 0, i32 5, !dbg !4082
  %14 = load %struct.device*, %struct.device** %dev, align 8, !dbg !4082
  %15 = load i32, i32* %reg.addr, align 4, !dbg !4083
  %call = call zeroext i1 %12(%struct.device* %14, i32 %15) #11, !dbg !4079
  store i1 %call, i1* %retval, align 1, !dbg !4084
  br label %return, !dbg !4084

if.end11:                                         ; preds = %if.end7
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4085
  %rd_table = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 25, !dbg !4087
  %17 = load %struct.regmap_access_table*, %struct.regmap_access_table** %rd_table, align 8, !dbg !4087
  %tobool12 = icmp ne %struct.regmap_access_table* %17, null, !dbg !4085
  br i1 %tobool12, label %if.then13, label %if.end16, !dbg !4088

if.then13:                                        ; preds = %if.end11
  %18 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4089
  %19 = load i32, i32* %reg.addr, align 4, !dbg !4090
  %20 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4091
  %rd_table14 = getelementptr inbounds %struct.regmap, %struct.regmap* %20, i32 0, i32 25, !dbg !4092
  %21 = load %struct.regmap_access_table*, %struct.regmap_access_table** %rd_table14, align 8, !dbg !4092
  %call15 = call zeroext i1 @regmap_check_range_table(%struct.regmap* %18, i32 %19, %struct.regmap_access_table* %21) #11, !dbg !4093
  store i1 %call15, i1* %retval, align 1, !dbg !4094
  br label %return, !dbg !4094

if.end16:                                         ; preds = %if.end11
  store i1 true, i1* %retval, align 1, !dbg !4095
  br label %return, !dbg !4095

return:                                           ; preds = %if.end16, %if.then13, %if.then9, %if.then6, %if.then3, %if.then
  %22 = load i1, i1* %retval, align 1, !dbg !4096
  ret i1 %22, !dbg !4096
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_volatile(%struct.regmap* %map, i32 %reg) #0 !dbg !4097 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4098, metadata !DIExpression()), !dbg !4099
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !4100, metadata !DIExpression()), !dbg !4101
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4102
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 7, !dbg !4104
  %format_write = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 4, !dbg !4105
  %1 = load void (%struct.regmap*, i32, i32)*, void (%struct.regmap*, i32, i32)** %format_write, align 8, !dbg !4105
  %tobool = icmp ne void (%struct.regmap*, i32, i32)* %1, null, !dbg !4102
  br i1 %tobool, label %if.end, label %land.lhs.true, !dbg !4106

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4107
  %3 = load i32, i32* %reg.addr, align 4, !dbg !4108
  %call = call zeroext i1 @regmap_readable(%struct.regmap* %2, i32 %3) #11, !dbg !4109
  br i1 %call, label %if.end, label %if.then, !dbg !4110

if.then:                                          ; preds = %land.lhs.true
  store i1 false, i1* %retval, align 1, !dbg !4111
  br label %return, !dbg !4111

if.end:                                           ; preds = %land.lhs.true, %entry
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4112
  %volatile_reg = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 20, !dbg !4114
  %5 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %volatile_reg, align 8, !dbg !4114
  %tobool1 = icmp ne i1 (%struct.device*, i32)* %5, null, !dbg !4112
  br i1 %tobool1, label %if.then2, label %if.end5, !dbg !4115

if.then2:                                         ; preds = %if.end
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4116
  %volatile_reg3 = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 20, !dbg !4117
  %7 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %volatile_reg3, align 8, !dbg !4117
  %8 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4118
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %8, i32 0, i32 5, !dbg !4119
  %9 = load %struct.device*, %struct.device** %dev, align 8, !dbg !4119
  %10 = load i32, i32* %reg.addr, align 4, !dbg !4120
  %call4 = call zeroext i1 %7(%struct.device* %9, i32 %10) #11, !dbg !4116
  store i1 %call4, i1* %retval, align 1, !dbg !4121
  br label %return, !dbg !4121

if.end5:                                          ; preds = %if.end
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4122
  %volatile_table = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 26, !dbg !4124
  %12 = load %struct.regmap_access_table*, %struct.regmap_access_table** %volatile_table, align 8, !dbg !4124
  %tobool6 = icmp ne %struct.regmap_access_table* %12, null, !dbg !4122
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !4125

if.then7:                                         ; preds = %if.end5
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4126
  %14 = load i32, i32* %reg.addr, align 4, !dbg !4127
  %15 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4128
  %volatile_table8 = getelementptr inbounds %struct.regmap, %struct.regmap* %15, i32 0, i32 26, !dbg !4129
  %16 = load %struct.regmap_access_table*, %struct.regmap_access_table** %volatile_table8, align 8, !dbg !4129
  %call9 = call zeroext i1 @regmap_check_range_table(%struct.regmap* %13, i32 %14, %struct.regmap_access_table* %16) #11, !dbg !4130
  store i1 %call9, i1* %retval, align 1, !dbg !4131
  br label %return, !dbg !4131

if.end10:                                         ; preds = %if.end5
  %17 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4132
  %cache_ops = getelementptr inbounds %struct.regmap, %struct.regmap* %17, i32 0, i32 39, !dbg !4134
  %18 = load %struct.regcache_ops*, %struct.regcache_ops** %cache_ops, align 8, !dbg !4134
  %tobool11 = icmp ne %struct.regcache_ops* %18, null, !dbg !4132
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !4135

if.then12:                                        ; preds = %if.end10
  store i1 false, i1* %retval, align 1, !dbg !4136
  br label %return, !dbg !4136

if.else:                                          ; preds = %if.end10
  store i1 true, i1* %retval, align 1, !dbg !4137
  br label %return, !dbg !4137

return:                                           ; preds = %if.else, %if.then12, %if.then7, %if.then2, %if.then
  %19 = load i1, i1* %retval, align 1, !dbg !4138
  ret i1 %19, !dbg !4138
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_precious(%struct.regmap* %map, i32 %reg) #0 !dbg !4139 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4140, metadata !DIExpression()), !dbg !4141
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !4142, metadata !DIExpression()), !dbg !4143
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4144
  %1 = load i32, i32* %reg.addr, align 4, !dbg !4146
  %call = call zeroext i1 @regmap_readable(%struct.regmap* %0, i32 %1) #11, !dbg !4147
  br i1 %call, label %if.end, label %if.then, !dbg !4148

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1, !dbg !4149
  br label %return, !dbg !4149

if.end:                                           ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4150
  %precious_reg = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 21, !dbg !4152
  %3 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %precious_reg, align 8, !dbg !4152
  %tobool = icmp ne i1 (%struct.device*, i32)* %3, null, !dbg !4150
  br i1 %tobool, label %if.then1, label %if.end4, !dbg !4153

if.then1:                                         ; preds = %if.end
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4154
  %precious_reg2 = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 21, !dbg !4155
  %5 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %precious_reg2, align 8, !dbg !4155
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4156
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 5, !dbg !4157
  %7 = load %struct.device*, %struct.device** %dev, align 8, !dbg !4157
  %8 = load i32, i32* %reg.addr, align 4, !dbg !4158
  %call3 = call zeroext i1 %5(%struct.device* %7, i32 %8) #11, !dbg !4154
  store i1 %call3, i1* %retval, align 1, !dbg !4159
  br label %return, !dbg !4159

if.end4:                                          ; preds = %if.end
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4160
  %precious_table = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 27, !dbg !4162
  %10 = load %struct.regmap_access_table*, %struct.regmap_access_table** %precious_table, align 8, !dbg !4162
  %tobool5 = icmp ne %struct.regmap_access_table* %10, null, !dbg !4160
  br i1 %tobool5, label %if.then6, label %if.end9, !dbg !4163

if.then6:                                         ; preds = %if.end4
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4164
  %12 = load i32, i32* %reg.addr, align 4, !dbg !4165
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4166
  %precious_table7 = getelementptr inbounds %struct.regmap, %struct.regmap* %13, i32 0, i32 27, !dbg !4167
  %14 = load %struct.regmap_access_table*, %struct.regmap_access_table** %precious_table7, align 8, !dbg !4167
  %call8 = call zeroext i1 @regmap_check_range_table(%struct.regmap* %11, i32 %12, %struct.regmap_access_table* %14) #11, !dbg !4168
  store i1 %call8, i1* %retval, align 1, !dbg !4169
  br label %return, !dbg !4169

if.end9:                                          ; preds = %if.end4
  store i1 false, i1* %retval, align 1, !dbg !4170
  br label %return, !dbg !4170

return:                                           ; preds = %if.end9, %if.then6, %if.then1, %if.then
  %15 = load i1, i1* %retval, align 1, !dbg !4171
  ret i1 %15, !dbg !4171
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_writeable_noinc(%struct.regmap* %map, i32 %reg) #0 !dbg !4172 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4173, metadata !DIExpression()), !dbg !4174
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !4175, metadata !DIExpression()), !dbg !4176
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4177
  %writeable_noinc_reg = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 22, !dbg !4179
  %1 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_noinc_reg, align 8, !dbg !4179
  %tobool = icmp ne i1 (%struct.device*, i32)* %1, null, !dbg !4177
  br i1 %tobool, label %if.then, label %if.end, !dbg !4180

if.then:                                          ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4181
  %writeable_noinc_reg1 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 22, !dbg !4182
  %3 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_noinc_reg1, align 8, !dbg !4182
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4183
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 5, !dbg !4184
  %5 = load %struct.device*, %struct.device** %dev, align 8, !dbg !4184
  %6 = load i32, i32* %reg.addr, align 4, !dbg !4185
  %call = call zeroext i1 %3(%struct.device* %5, i32 %6) #11, !dbg !4181
  store i1 %call, i1* %retval, align 1, !dbg !4186
  br label %return, !dbg !4186

if.end:                                           ; preds = %entry
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4187
  %wr_noinc_table = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 28, !dbg !4189
  %8 = load %struct.regmap_access_table*, %struct.regmap_access_table** %wr_noinc_table, align 8, !dbg !4189
  %tobool2 = icmp ne %struct.regmap_access_table* %8, null, !dbg !4187
  br i1 %tobool2, label %if.then3, label %if.end6, !dbg !4190

if.then3:                                         ; preds = %if.end
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4191
  %10 = load i32, i32* %reg.addr, align 4, !dbg !4192
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4193
  %wr_noinc_table4 = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 28, !dbg !4194
  %12 = load %struct.regmap_access_table*, %struct.regmap_access_table** %wr_noinc_table4, align 8, !dbg !4194
  %call5 = call zeroext i1 @regmap_check_range_table(%struct.regmap* %9, i32 %10, %struct.regmap_access_table* %12) #11, !dbg !4195
  store i1 %call5, i1* %retval, align 1, !dbg !4196
  br label %return, !dbg !4196

if.end6:                                          ; preds = %if.end
  store i1 true, i1* %retval, align 1, !dbg !4197
  br label %return, !dbg !4197

return:                                           ; preds = %if.end6, %if.then3, %if.then
  %13 = load i1, i1* %retval, align 1, !dbg !4198
  ret i1 %13, !dbg !4198
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_readable_noinc(%struct.regmap* %map, i32 %reg) #0 !dbg !4199 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4200, metadata !DIExpression()), !dbg !4201
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !4202, metadata !DIExpression()), !dbg !4203
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4204
  %readable_noinc_reg = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 23, !dbg !4206
  %1 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %readable_noinc_reg, align 8, !dbg !4206
  %tobool = icmp ne i1 (%struct.device*, i32)* %1, null, !dbg !4204
  br i1 %tobool, label %if.then, label %if.end, !dbg !4207

if.then:                                          ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4208
  %readable_noinc_reg1 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 23, !dbg !4209
  %3 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %readable_noinc_reg1, align 8, !dbg !4209
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4210
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 5, !dbg !4211
  %5 = load %struct.device*, %struct.device** %dev, align 8, !dbg !4211
  %6 = load i32, i32* %reg.addr, align 4, !dbg !4212
  %call = call zeroext i1 %3(%struct.device* %5, i32 %6) #11, !dbg !4208
  store i1 %call, i1* %retval, align 1, !dbg !4213
  br label %return, !dbg !4213

if.end:                                           ; preds = %entry
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4214
  %rd_noinc_table = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 29, !dbg !4216
  %8 = load %struct.regmap_access_table*, %struct.regmap_access_table** %rd_noinc_table, align 8, !dbg !4216
  %tobool2 = icmp ne %struct.regmap_access_table* %8, null, !dbg !4214
  br i1 %tobool2, label %if.then3, label %if.end6, !dbg !4217

if.then3:                                         ; preds = %if.end
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4218
  %10 = load i32, i32* %reg.addr, align 4, !dbg !4219
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4220
  %rd_noinc_table4 = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 29, !dbg !4221
  %12 = load %struct.regmap_access_table*, %struct.regmap_access_table** %rd_noinc_table4, align 8, !dbg !4221
  %call5 = call zeroext i1 @regmap_check_range_table(%struct.regmap* %9, i32 %10, %struct.regmap_access_table* %12) #11, !dbg !4222
  store i1 %call5, i1* %retval, align 1, !dbg !4223
  br label %return, !dbg !4223

if.end6:                                          ; preds = %if.end
  store i1 true, i1* %retval, align 1, !dbg !4224
  br label %return, !dbg !4224

return:                                           ; preds = %if.end6, %if.then3, %if.then
  %13 = load i1, i1* %retval, align 1, !dbg !4225
  ret i1 %13, !dbg !4225
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_attach_dev(%struct.device* %dev, %struct.regmap* %map, %struct.regmap_config* %config) #0 !dbg !4226 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.device*, align 8
  %map.addr = alloca %struct.regmap*, align 8
  %config.addr = alloca %struct.regmap_config*, align 8
  %m = alloca %struct.regmap**, align 8
  %ret = alloca i32, align 4
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !4229, metadata !DIExpression()), !dbg !4230
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4231, metadata !DIExpression()), !dbg !4232
  store %struct.regmap_config* %config, %struct.regmap_config** %config.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_config** %config.addr, metadata !4233, metadata !DIExpression()), !dbg !4234
  call void @llvm.dbg.declare(metadata %struct.regmap*** %m, metadata !4235, metadata !DIExpression()), !dbg !4236
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4237, metadata !DIExpression()), !dbg !4238
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !4239
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4240
  %dev1 = getelementptr inbounds %struct.regmap, %struct.regmap* %1, i32 0, i32 5, !dbg !4241
  store %struct.device* %0, %struct.device** %dev1, align 8, !dbg !4242
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4243
  %3 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4244
  %call = call i32 @regmap_set_name(%struct.regmap* %2, %struct.regmap_config* %3) #11, !dbg !4245
  store i32 %call, i32* %ret, align 4, !dbg !4246
  %4 = load i32, i32* %ret, align 4, !dbg !4247
  %tobool = icmp ne i32 %4, 0, !dbg !4247
  br i1 %tobool, label %if.then, label %if.end, !dbg !4249

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %ret, align 4, !dbg !4250
  store i32 %5, i32* %retval, align 4, !dbg !4251
  br label %return, !dbg !4251

if.end:                                           ; preds = %entry
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4252
  call void @regmap_debugfs_init(%struct.regmap* %6) #11, !dbg !4253
  %call2 = call i8* @devres_alloc(void (%struct.device*, i8*)* @dev_get_regmap_release, i64 8, i32 3264) #11, !dbg !4254
  %7 = bitcast i8* %call2 to %struct.regmap**, !dbg !4254
  store %struct.regmap** %7, %struct.regmap*** %m, align 8, !dbg !4255
  %8 = load %struct.regmap**, %struct.regmap*** %m, align 8, !dbg !4256
  %tobool3 = icmp ne %struct.regmap** %8, null, !dbg !4256
  br i1 %tobool3, label %if.end5, label %if.then4, !dbg !4258

if.then4:                                         ; preds = %if.end
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4259
  call void @regmap_debugfs_exit(%struct.regmap* %9) #11, !dbg !4261
  store i32 -12, i32* %retval, align 4, !dbg !4262
  br label %return, !dbg !4262

if.end5:                                          ; preds = %if.end
  %10 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4263
  %11 = load %struct.regmap**, %struct.regmap*** %m, align 8, !dbg !4264
  store %struct.regmap* %10, %struct.regmap** %11, align 8, !dbg !4265
  %12 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !4266
  %13 = load %struct.regmap**, %struct.regmap*** %m, align 8, !dbg !4267
  %14 = bitcast %struct.regmap** %13 to i8*, !dbg !4267
  call void @devres_add(%struct.device* %12, i8* %14) #11, !dbg !4268
  store i32 0, i32* %retval, align 4, !dbg !4269
  br label %return, !dbg !4269

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !4270
  ret i32 %15, !dbg !4270
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_set_name(%struct.regmap* %map, %struct.regmap_config* %config) #0 !dbg !4271 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %config.addr = alloca %struct.regmap_config*, align 8
  %name1 = alloca i8*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4274, metadata !DIExpression()), !dbg !4275
  store %struct.regmap_config* %config, %struct.regmap_config** %config.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_config** %config.addr, metadata !4276, metadata !DIExpression()), !dbg !4277
  %0 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4278
  %name = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %0, i32 0, i32 0, !dbg !4280
  %1 = load i8*, i8** %name, align 8, !dbg !4280
  %tobool = icmp ne i8* %1, null, !dbg !4278
  br i1 %tobool, label %if.then, label %if.end7, !dbg !4281

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8** %name1, metadata !4282, metadata !DIExpression()), !dbg !4284
  %2 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4285
  %name2 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %2, i32 0, i32 0, !dbg !4286
  %3 = load i8*, i8** %name2, align 8, !dbg !4286
  %call = call i8* @kstrdup_const(i8* %3, i32 3264) #11, !dbg !4287
  store i8* %call, i8** %name1, align 8, !dbg !4284
  %4 = load i8*, i8** %name1, align 8, !dbg !4288
  %tobool3 = icmp ne i8* %4, null, !dbg !4288
  br i1 %tobool3, label %if.end, label %if.then4, !dbg !4290

if.then4:                                         ; preds = %if.then
  store i32 -12, i32* %retval, align 4, !dbg !4291
  br label %return, !dbg !4291

if.end:                                           ; preds = %if.then
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4292
  %name5 = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 10, !dbg !4293
  %6 = load i8*, i8** %name5, align 8, !dbg !4293
  call void @kfree_const(i8* %6) #11, !dbg !4294
  %7 = load i8*, i8** %name1, align 8, !dbg !4295
  %8 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !4296
  %name6 = getelementptr inbounds %struct.regmap, %struct.regmap* %8, i32 0, i32 10, !dbg !4297
  store i8* %7, i8** %name6, align 8, !dbg !4298
  br label %if.end7, !dbg !4299

if.end7:                                          ; preds = %if.end, %entry
  store i32 0, i32* %retval, align 4, !dbg !4300
  br label %return, !dbg !4300

return:                                           ; preds = %if.end7, %if.then4
  %9 = load i32, i32* %retval, align 4, !dbg !4301
  ret i32 %9, !dbg !4301
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_debugfs_init(%struct.regmap* %map) #0 !dbg !4302 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4305, metadata !DIExpression()), !dbg !4306
  ret void, !dbg !4307
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @devres_alloc(void (%struct.device*, i8*)* %release, i64 %size, i32 %gfp) #0 !dbg !4308 {
entry:
  %release.addr = alloca void (%struct.device*, i8*)*, align 8
  %size.addr = alloca i64, align 8
  %gfp.addr = alloca i32, align 4
  store void (%struct.device*, i8*)* %release, void (%struct.device*, i8*)** %release.addr, align 8
  call void @llvm.dbg.declare(metadata void (%struct.device*, i8*)** %release.addr, metadata !4315, metadata !DIExpression()), !dbg !4316
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !4317, metadata !DIExpression()), !dbg !4318
  store i32 %gfp, i32* %gfp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %gfp.addr, metadata !4319, metadata !DIExpression()), !dbg !4320
  %0 = load void (%struct.device*, i8*)*, void (%struct.device*, i8*)** %release.addr, align 8, !dbg !4321
  %1 = load i64, i64* %size.addr, align 8, !dbg !4322
  %2 = load i32, i32* %gfp.addr, align 4, !dbg !4323
  %call = call noalias i8* @devres_alloc_node(void (%struct.device*, i8*)* %0, i64 %1, i32 %2, i32 -1) #11, !dbg !4324
  ret i8* %call, !dbg !4325
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @dev_get_regmap_release(%struct.device* %dev, i8* %res) #0 !dbg !4326 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %res.addr = alloca i8*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !4327, metadata !DIExpression()), !dbg !4328
  store i8* %res, i8** %res.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %res.addr, metadata !4329, metadata !DIExpression()), !dbg !4330
  ret void, !dbg !4331
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_debugfs_exit(%struct.regmap* %map) #0 !dbg !4332 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !4333, metadata !DIExpression()), !dbg !4334
  ret void, !dbg !4335
}

; Function Attrs: noredzone
declare dso_local void @devres_add(%struct.device*, i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_get_val_endian(%struct.device* %dev, %struct.regmap_bus* %bus, %struct.regmap_config* %config) #0 !dbg !4336 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.device*, align 8
  %bus.addr = alloca %struct.regmap_bus*, align 8
  %config.addr = alloca %struct.regmap_config*, align 8
  %fwnode = alloca %struct.fwnode_handle*, align 8
  %endian = alloca i32, align 4
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !4339, metadata !DIExpression()), !dbg !4340
  store %struct.regmap_bus* %bus, %struct.regmap_bus** %bus.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_bus** %bus.addr, metadata !4341, metadata !DIExpression()), !dbg !4342
  store %struct.regmap_config* %config, %struct.regmap_config** %config.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_config** %config.addr, metadata !4343, metadata !DIExpression()), !dbg !4344
  call void @llvm.dbg.declare(metadata %struct.fwnode_handle** %fwnode, metadata !4345, metadata !DIExpression()), !dbg !4346
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !4347
  %tobool = icmp ne %struct.device* %0, null, !dbg !4347
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4347

cond.true:                                        ; preds = %entry
  %1 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !4348
  %call = call %struct.fwnode_handle* @dev_fwnode(%struct.device* %1) #11, !dbg !4349
  br label %cond.end, !dbg !4347

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4347

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.fwnode_handle* [ %call, %cond.true ], [ null, %cond.false ], !dbg !4347
  store %struct.fwnode_handle* %cond, %struct.fwnode_handle** %fwnode, align 8, !dbg !4346
  call void @llvm.dbg.declare(metadata i32* %endian, metadata !4350, metadata !DIExpression()), !dbg !4351
  %2 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4352
  %val_format_endian = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %2, i32 0, i32 37, !dbg !4353
  %3 = load i32, i32* %val_format_endian, align 8, !dbg !4353
  store i32 %3, i32* %endian, align 4, !dbg !4354
  %4 = load i32, i32* %endian, align 4, !dbg !4355
  %cmp = icmp ne i32 %4, 0, !dbg !4357
  br i1 %cmp, label %if.then, label %if.end, !dbg !4358

if.then:                                          ; preds = %cond.end
  %5 = load i32, i32* %endian, align 4, !dbg !4359
  store i32 %5, i32* %retval, align 4, !dbg !4360
  br label %return, !dbg !4360

if.end:                                           ; preds = %cond.end
  %6 = load %struct.fwnode_handle*, %struct.fwnode_handle** %fwnode, align 8, !dbg !4361
  %call1 = call zeroext i1 @fwnode_property_read_bool(%struct.fwnode_handle* %6, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0)) #11, !dbg !4363
  br i1 %call1, label %if.then2, label %if.else, !dbg !4364

if.then2:                                         ; preds = %if.end
  store i32 1, i32* %endian, align 4, !dbg !4365
  br label %if.end10, !dbg !4366

if.else:                                          ; preds = %if.end
  %7 = load %struct.fwnode_handle*, %struct.fwnode_handle** %fwnode, align 8, !dbg !4367
  %call3 = call zeroext i1 @fwnode_property_read_bool(%struct.fwnode_handle* %7, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0)) #11, !dbg !4369
  br i1 %call3, label %if.then4, label %if.else5, !dbg !4370

if.then4:                                         ; preds = %if.else
  store i32 2, i32* %endian, align 4, !dbg !4371
  br label %if.end9, !dbg !4372

if.else5:                                         ; preds = %if.else
  %8 = load %struct.fwnode_handle*, %struct.fwnode_handle** %fwnode, align 8, !dbg !4373
  %call6 = call zeroext i1 @fwnode_property_read_bool(%struct.fwnode_handle* %8, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0)) #11, !dbg !4375
  br i1 %call6, label %if.then7, label %if.end8, !dbg !4376

if.then7:                                         ; preds = %if.else5
  store i32 3, i32* %endian, align 4, !dbg !4377
  br label %if.end8, !dbg !4378

if.end8:                                          ; preds = %if.then7, %if.else5
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.then4
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then2
  %9 = load i32, i32* %endian, align 4, !dbg !4379
  %cmp11 = icmp ne i32 %9, 0, !dbg !4381
  br i1 %cmp11, label %if.then12, label %if.end13, !dbg !4382

if.then12:                                        ; preds = %if.end10
  %10 = load i32, i32* %endian, align 4, !dbg !4383
  store i32 %10, i32* %retval, align 4, !dbg !4384
  br label %return, !dbg !4384

if.end13:                                         ; preds = %if.end10
  %11 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4385
  %tobool14 = icmp ne %struct.regmap_bus* %11, null, !dbg !4385
  br i1 %tobool14, label %land.lhs.true, label %if.end18, !dbg !4387

land.lhs.true:                                    ; preds = %if.end13
  %12 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4388
  %val_format_endian_default = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %12, i32 0, i32 12, !dbg !4389
  %13 = load i32, i32* %val_format_endian_default, align 8, !dbg !4389
  %tobool15 = icmp ne i32 %13, 0, !dbg !4388
  br i1 %tobool15, label %if.then16, label %if.end18, !dbg !4390

if.then16:                                        ; preds = %land.lhs.true
  %14 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4391
  %val_format_endian_default17 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %14, i32 0, i32 12, !dbg !4392
  %15 = load i32, i32* %val_format_endian_default17, align 8, !dbg !4392
  store i32 %15, i32* %endian, align 4, !dbg !4393
  br label %if.end18, !dbg !4394

if.end18:                                         ; preds = %if.then16, %land.lhs.true, %if.end13
  %16 = load i32, i32* %endian, align 4, !dbg !4395
  %cmp19 = icmp ne i32 %16, 0, !dbg !4397
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !4398

if.then20:                                        ; preds = %if.end18
  %17 = load i32, i32* %endian, align 4, !dbg !4399
  store i32 %17, i32* %retval, align 4, !dbg !4400
  br label %return, !dbg !4400

if.end21:                                         ; preds = %if.end18
  store i32 1, i32* %retval, align 4, !dbg !4401
  br label %return, !dbg !4401

return:                                           ; preds = %if.end21, %if.then20, %if.then12, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !4402
  ret i32 %18, !dbg !4402
}

; Function Attrs: noredzone
declare dso_local %struct.fwnode_handle* @dev_fwnode(%struct.device*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @fwnode_property_read_bool(%struct.fwnode_handle* %fwnode, i8* %propname) #0 !dbg !4403 {
entry:
  %fwnode.addr = alloca %struct.fwnode_handle*, align 8
  %propname.addr = alloca i8*, align 8
  store %struct.fwnode_handle* %fwnode, %struct.fwnode_handle** %fwnode.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.fwnode_handle** %fwnode.addr, metadata !4405, metadata !DIExpression()), !dbg !4406
  store i8* %propname, i8** %propname.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %propname.addr, metadata !4407, metadata !DIExpression()), !dbg !4408
  %0 = load %struct.fwnode_handle*, %struct.fwnode_handle** %fwnode.addr, align 8, !dbg !4409
  %1 = load i8*, i8** %propname.addr, align 8, !dbg !4410
  %call = call zeroext i1 @fwnode_property_present(%struct.fwnode_handle* %0, i8* %1) #11, !dbg !4411
  ret i1 %call, !dbg !4412
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local %struct.regmap* @__regmap_init(%struct.device* %dev, %struct.regmap_bus* %bus, i8* %bus_context, %struct.regmap_config* %config, %struct.lock_class_key* %lock_key, i8* %lock_name) #0 !dbg !2 {
entry:
  %lock.addr.i1070 = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i1070, metadata !4413, metadata !DIExpression()), !dbg !4420
  %lock.addr.i = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i, metadata !4413, metadata !DIExpression()), !dbg !4423
  %retval = alloca %struct.regmap*, align 8
  %dev.addr = alloca %struct.device*, align 8
  %bus.addr = alloca %struct.regmap_bus*, align 8
  %bus_context.addr = alloca i8*, align 8
  %config.addr = alloca %struct.regmap_config*, align 8
  %lock_key.addr = alloca %struct.lock_class_key*, align 8
  %lock_name.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  %ret = alloca i32, align 4
  %reg_endian = alloca i32, align 4
  %val_endian = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %.compoundliteral = alloca %struct.spinlock, align 1
  %.compoundliteral668 = alloca %struct.spinlock, align 1
  %.compoundliteral935 = alloca %struct.rb_root, align 8
  %range_cfg = alloca %struct.regmap_range_cfg*, align 8
  %new = alloca %struct.regmap_range_node*, align 8
  %sel_reg = alloca i32, align 4
  %win_min = alloca i32, align 4
  %win_max = alloca i32, align 4
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !4432, metadata !DIExpression()), !dbg !4433
  store %struct.regmap_bus* %bus, %struct.regmap_bus** %bus.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_bus** %bus.addr, metadata !4434, metadata !DIExpression()), !dbg !4435
  store i8* %bus_context, i8** %bus_context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %bus_context.addr, metadata !4436, metadata !DIExpression()), !dbg !4437
  store %struct.regmap_config* %config, %struct.regmap_config** %config.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_config** %config.addr, metadata !4438, metadata !DIExpression()), !dbg !4439
  store %struct.lock_class_key* %lock_key, %struct.lock_class_key** %lock_key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lock_class_key** %lock_key.addr, metadata !4440, metadata !DIExpression()), !dbg !4441
  store i8* %lock_name, i8** %lock_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lock_name.addr, metadata !4442, metadata !DIExpression()), !dbg !4443
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !4444, metadata !DIExpression()), !dbg !4445
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !4446, metadata !DIExpression()), !dbg !4447
  store i32 -22, i32* %ret, align 4, !dbg !4447
  call void @llvm.dbg.declare(metadata i32* %reg_endian, metadata !4448, metadata !DIExpression()), !dbg !4449
  call void @llvm.dbg.declare(metadata i32* %val_endian, metadata !4450, metadata !DIExpression()), !dbg !4451
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4452, metadata !DIExpression()), !dbg !4453
  call void @llvm.dbg.declare(metadata i32* %j, metadata !4454, metadata !DIExpression()), !dbg !4455
  %0 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4456
  %tobool = icmp ne %struct.regmap_config* %0, null, !dbg !4456
  br i1 %tobool, label %if.end, label %if.then, !dbg !4458

if.then:                                          ; preds = %entry
  br label %err, !dbg !4459

if.end:                                           ; preds = %entry
  %call = call i8* @kzalloc(i64 520, i32 3264) #11, !dbg !4460
  %1 = bitcast i8* %call to %struct.regmap*, !dbg !4460
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !4461
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4462
  %cmp = icmp eq %struct.regmap* %2, null, !dbg !4464
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !4465

if.then1:                                         ; preds = %if.end
  store i32 -12, i32* %ret, align 4, !dbg !4466
  br label %err, !dbg !4468

if.end2:                                          ; preds = %if.end
  %3 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4469
  %4 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4470
  %call3 = call i32 @regmap_set_name(%struct.regmap* %3, %struct.regmap_config* %4) #11, !dbg !4471
  store i32 %call3, i32* %ret, align 4, !dbg !4472
  %5 = load i32, i32* %ret, align 4, !dbg !4473
  %tobool4 = icmp ne i32 %5, 0, !dbg !4473
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !4475

if.then5:                                         ; preds = %if.end2
  br label %err_map, !dbg !4476

if.end6:                                          ; preds = %if.end2
  store i32 -22, i32* %ret, align 4, !dbg !4477
  %6 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4478
  %disable_locking = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %6, i32 0, i32 11, !dbg !4479
  %7 = load i8, i8* %disable_locking, align 8, !dbg !4479
  %tobool7 = trunc i8 %7 to i1, !dbg !4479
  br i1 %tobool7, label %if.then8, label %if.else, !dbg !4480

if.then8:                                         ; preds = %if.end6
  %8 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4481
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %8, i32 0, i32 2, !dbg !4483
  store void (i8*)* @regmap_lock_unlock_none, void (i8*)** %unlock, align 8, !dbg !4484
  %9 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4485
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 1, !dbg !4486
  store void (i8*)* @regmap_lock_unlock_none, void (i8*)** %lock, align 8, !dbg !4487
  %10 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4488
  %can_sleep = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %10, i32 0, i32 43, !dbg !4489
  %11 = load i8, i8* %can_sleep, align 8, !dbg !4489
  %tobool9 = trunc i8 %11 to i1, !dbg !4489
  %12 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4490
  %can_sleep10 = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 63, !dbg !4491
  %frombool = zext i1 %tobool9 to i8, !dbg !4492
  store i8 %frombool, i8* %can_sleep10, align 8, !dbg !4492
  %13 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4493
  call void @regmap_debugfs_disable(%struct.regmap* %13) #11, !dbg !4494
  br label %if.end66, !dbg !4495

if.else:                                          ; preds = %if.end6
  %14 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4496
  %lock11 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %14, i32 0, i32 12, !dbg !4497
  %15 = load void (i8*)*, void (i8*)** %lock11, align 8, !dbg !4497
  %tobool12 = icmp ne void (i8*)* %15, null, !dbg !4496
  br i1 %tobool12, label %land.lhs.true, label %if.else25, !dbg !4498

land.lhs.true:                                    ; preds = %if.else
  %16 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4499
  %unlock13 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %16, i32 0, i32 13, !dbg !4500
  %17 = load void (i8*)*, void (i8*)** %unlock13, align 8, !dbg !4500
  %tobool14 = icmp ne void (i8*)* %17, null, !dbg !4499
  br i1 %tobool14, label %if.then15, label %if.else25, !dbg !4501

if.then15:                                        ; preds = %land.lhs.true
  %18 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4502
  %lock16 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %18, i32 0, i32 12, !dbg !4504
  %19 = load void (i8*)*, void (i8*)** %lock16, align 8, !dbg !4504
  %20 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4505
  %lock17 = getelementptr inbounds %struct.regmap, %struct.regmap* %20, i32 0, i32 1, !dbg !4506
  store void (i8*)* %19, void (i8*)** %lock17, align 8, !dbg !4507
  %21 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4508
  %unlock18 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %21, i32 0, i32 13, !dbg !4509
  %22 = load void (i8*)*, void (i8*)** %unlock18, align 8, !dbg !4509
  %23 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4510
  %unlock19 = getelementptr inbounds %struct.regmap, %struct.regmap* %23, i32 0, i32 2, !dbg !4511
  store void (i8*)* %22, void (i8*)** %unlock19, align 8, !dbg !4512
  %24 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4513
  %lock_arg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %24, i32 0, i32 14, !dbg !4514
  %25 = load i8*, i8** %lock_arg, align 8, !dbg !4514
  %26 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4515
  %lock_arg20 = getelementptr inbounds %struct.regmap, %struct.regmap* %26, i32 0, i32 3, !dbg !4516
  store i8* %25, i8** %lock_arg20, align 8, !dbg !4517
  %27 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4518
  %can_sleep21 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %27, i32 0, i32 43, !dbg !4519
  %28 = load i8, i8* %can_sleep21, align 8, !dbg !4519
  %tobool22 = trunc i8 %28 to i1, !dbg !4519
  %29 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4520
  %can_sleep23 = getelementptr inbounds %struct.regmap, %struct.regmap* %29, i32 0, i32 63, !dbg !4521
  %frombool24 = zext i1 %tobool22 to i8, !dbg !4522
  store i8 %frombool24, i8* %can_sleep23, align 8, !dbg !4522
  br label %if.end65, !dbg !4523

if.else25:                                        ; preds = %land.lhs.true, %if.else
  %30 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4524
  %use_hwlock = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %30, i32 0, i32 40, !dbg !4525
  %31 = load i8, i8* %use_hwlock, align 4, !dbg !4525
  %tobool26 = trunc i8 %31 to i1, !dbg !4525
  br i1 %tobool26, label %if.then27, label %if.else41, !dbg !4526

if.then27:                                        ; preds = %if.else25
  %32 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4527
  %hwlock_id = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %32, i32 0, i32 41, !dbg !4529
  %33 = load i32, i32* %hwlock_id, align 8, !dbg !4529
  %call28 = call %struct.hwspinlock* @hwspin_lock_request_specific(i32 %33) #11, !dbg !4530
  %34 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4531
  %hwlock = getelementptr inbounds %struct.regmap, %struct.regmap* %34, i32 0, i32 62, !dbg !4532
  store %struct.hwspinlock* %call28, %struct.hwspinlock** %hwlock, align 8, !dbg !4533
  %35 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4534
  %hwlock29 = getelementptr inbounds %struct.regmap, %struct.regmap* %35, i32 0, i32 62, !dbg !4536
  %36 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock29, align 8, !dbg !4536
  %tobool30 = icmp ne %struct.hwspinlock* %36, null, !dbg !4534
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !4537

if.then31:                                        ; preds = %if.then27
  store i32 -6, i32* %ret, align 4, !dbg !4538
  br label %err_name, !dbg !4540

if.end32:                                         ; preds = %if.then27
  %37 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4541
  %hwlock_mode = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %37, i32 0, i32 42, !dbg !4542
  %38 = load i32, i32* %hwlock_mode, align 4, !dbg !4542
  switch i32 %38, label %sw.default [
    i32 1, label %sw.bb
    i32 2, label %sw.bb35
  ], !dbg !4543

sw.bb:                                            ; preds = %if.end32
  %39 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4544
  %lock33 = getelementptr inbounds %struct.regmap, %struct.regmap* %39, i32 0, i32 1, !dbg !4546
  store void (i8*)* @regmap_lock_hwlock_irqsave, void (i8*)** %lock33, align 8, !dbg !4547
  %40 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4548
  %unlock34 = getelementptr inbounds %struct.regmap, %struct.regmap* %40, i32 0, i32 2, !dbg !4549
  store void (i8*)* @regmap_unlock_hwlock_irqrestore, void (i8*)** %unlock34, align 8, !dbg !4550
  br label %sw.epilog, !dbg !4551

sw.bb35:                                          ; preds = %if.end32
  %41 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4552
  %lock36 = getelementptr inbounds %struct.regmap, %struct.regmap* %41, i32 0, i32 1, !dbg !4553
  store void (i8*)* @regmap_lock_hwlock_irq, void (i8*)** %lock36, align 8, !dbg !4554
  %42 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4555
  %unlock37 = getelementptr inbounds %struct.regmap, %struct.regmap* %42, i32 0, i32 2, !dbg !4556
  store void (i8*)* @regmap_unlock_hwlock_irq, void (i8*)** %unlock37, align 8, !dbg !4557
  br label %sw.epilog, !dbg !4558

sw.default:                                       ; preds = %if.end32
  %43 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4559
  %lock38 = getelementptr inbounds %struct.regmap, %struct.regmap* %43, i32 0, i32 1, !dbg !4560
  store void (i8*)* @regmap_lock_hwlock, void (i8*)** %lock38, align 8, !dbg !4561
  %44 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4562
  %unlock39 = getelementptr inbounds %struct.regmap, %struct.regmap* %44, i32 0, i32 2, !dbg !4563
  store void (i8*)* @regmap_unlock_hwlock, void (i8*)** %unlock39, align 8, !dbg !4564
  br label %sw.epilog, !dbg !4565

sw.epilog:                                        ; preds = %sw.default, %sw.bb35, %sw.bb
  %45 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4566
  %46 = bitcast %struct.regmap* %45 to i8*, !dbg !4566
  %47 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4567
  %lock_arg40 = getelementptr inbounds %struct.regmap, %struct.regmap* %47, i32 0, i32 3, !dbg !4568
  store i8* %46, i8** %lock_arg40, align 8, !dbg !4569
  br label %if.end64, !dbg !4570

if.else41:                                        ; preds = %if.else25
  %48 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4571
  %tobool42 = icmp ne %struct.regmap_bus* %48, null, !dbg !4571
  br i1 %tobool42, label %land.lhs.true43, label %lor.lhs.false, !dbg !4572

land.lhs.true43:                                  ; preds = %if.else41
  %49 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4573
  %fast_io = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %49, i32 0, i32 0, !dbg !4574
  %50 = load i8, i8* %fast_io, align 8, !dbg !4574
  %tobool44 = trunc i8 %50 to i1, !dbg !4574
  br i1 %tobool44, label %if.then47, label %lor.lhs.false, !dbg !4575

lor.lhs.false:                                    ; preds = %land.lhs.true43, %if.else41
  %51 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4576
  %fast_io45 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %51, i32 0, i32 17, !dbg !4577
  %52 = load i8, i8* %fast_io45, align 8, !dbg !4577
  %tobool46 = trunc i8 %52 to i1, !dbg !4577
  br i1 %tobool46, label %if.then47, label %if.else54, !dbg !4578

if.then47:                                        ; preds = %lor.lhs.false, %land.lhs.true43
  br label %do.body, !dbg !4579

do.body:                                          ; preds = %if.then47
  %53 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4580
  %54 = getelementptr inbounds %struct.regmap, %struct.regmap* %53, i32 0, i32 0, !dbg !4580
  %55 = bitcast %union.anon* %54 to %struct.anon*, !dbg !4580
  %spinlock = getelementptr inbounds %struct.anon, %struct.anon* %55, i32 0, i32 0, !dbg !4580
  store %struct.spinlock* %spinlock, %struct.spinlock** %lock.addr.i, align 8
  %56 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8, !dbg !4581
  %57 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %56, i32 0, i32 0, !dbg !4582
  %rlock.i = bitcast %union.anon.0* %57 to %struct.raw_spinlock*, !dbg !4582
  %58 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4580
  %59 = getelementptr inbounds %struct.regmap, %struct.regmap* %58, i32 0, i32 0, !dbg !4580
  %60 = bitcast %union.anon* %59 to %struct.anon*, !dbg !4580
  %spinlock49 = getelementptr inbounds %struct.anon, %struct.anon* %60, i32 0, i32 0, !dbg !4580
  %61 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %.compoundliteral, i32 0, i32 0, !dbg !4580
  %rlock = bitcast %union.anon.0* %61 to %struct.raw_spinlock*, !dbg !4580
  %62 = bitcast %struct.spinlock* %spinlock49 to i8*, !dbg !4580
  %63 = bitcast %struct.spinlock* %.compoundliteral to i8*, !dbg !4580
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %62, i8* align 1 %63, i64 0, i1 false), !dbg !4580
  br label %do.end, !dbg !4580

do.end:                                           ; preds = %do.body
  %64 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4583
  %lock50 = getelementptr inbounds %struct.regmap, %struct.regmap* %64, i32 0, i32 1, !dbg !4584
  store void (i8*)* @regmap_lock_spinlock, void (i8*)** %lock50, align 8, !dbg !4585
  %65 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4586
  %unlock51 = getelementptr inbounds %struct.regmap, %struct.regmap* %65, i32 0, i32 2, !dbg !4587
  store void (i8*)* @regmap_unlock_spinlock, void (i8*)** %unlock51, align 8, !dbg !4588
  br label %do.body52, !dbg !4589

do.body52:                                        ; preds = %do.end
  %66 = load %struct.lock_class_key*, %struct.lock_class_key** %lock_key.addr, align 8, !dbg !4590
  %67 = load i8*, i8** %lock_name.addr, align 8, !dbg !4590
  br label %do.end53, !dbg !4590

do.end53:                                         ; preds = %do.body52
  br label %if.end62, !dbg !4592

if.else54:                                        ; preds = %lor.lhs.false
  br label %do.body55, !dbg !4593

do.body55:                                        ; preds = %if.else54
  %68 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4595
  %69 = getelementptr inbounds %struct.regmap, %struct.regmap* %68, i32 0, i32 0, !dbg !4595
  %mutex = bitcast %union.anon* %69 to %struct.mutex*, !dbg !4595
  call void @__mutex_init(%struct.mutex* %mutex, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), %struct.lock_class_key* @__regmap_init.__key) #11, !dbg !4595
  br label %do.end56, !dbg !4595

do.end56:                                         ; preds = %do.body55
  %70 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4597
  %lock57 = getelementptr inbounds %struct.regmap, %struct.regmap* %70, i32 0, i32 1, !dbg !4598
  store void (i8*)* @regmap_lock_mutex, void (i8*)** %lock57, align 8, !dbg !4599
  %71 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4600
  %unlock58 = getelementptr inbounds %struct.regmap, %struct.regmap* %71, i32 0, i32 2, !dbg !4601
  store void (i8*)* @regmap_unlock_mutex, void (i8*)** %unlock58, align 8, !dbg !4602
  %72 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4603
  %can_sleep59 = getelementptr inbounds %struct.regmap, %struct.regmap* %72, i32 0, i32 63, !dbg !4604
  store i8 1, i8* %can_sleep59, align 8, !dbg !4605
  br label %do.body60, !dbg !4606

do.body60:                                        ; preds = %do.end56
  %73 = load %struct.lock_class_key*, %struct.lock_class_key** %lock_key.addr, align 8, !dbg !4607
  %74 = load i8*, i8** %lock_name.addr, align 8, !dbg !4607
  br label %do.end61, !dbg !4607

do.end61:                                         ; preds = %do.body60
  br label %if.end62

if.end62:                                         ; preds = %do.end61, %do.end53
  %75 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4609
  %76 = bitcast %struct.regmap* %75 to i8*, !dbg !4609
  %77 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4610
  %lock_arg63 = getelementptr inbounds %struct.regmap, %struct.regmap* %77, i32 0, i32 3, !dbg !4611
  store i8* %76, i8** %lock_arg63, align 8, !dbg !4612
  br label %if.end64

if.end64:                                         ; preds = %if.end62, %sw.epilog
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then15
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then8
  %78 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4613
  %tobool67 = icmp ne %struct.regmap_bus* %78, null, !dbg !4613
  br i1 %tobool67, label %land.lhs.true68, label %lor.lhs.false71, !dbg !4615

land.lhs.true68:                                  ; preds = %if.end66
  %79 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4616
  %fast_io69 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %79, i32 0, i32 0, !dbg !4617
  %80 = load i8, i8* %fast_io69, align 8, !dbg !4617
  %tobool70 = trunc i8 %80 to i1, !dbg !4617
  br i1 %tobool70, label %if.then74, label %lor.lhs.false71, !dbg !4618

lor.lhs.false71:                                  ; preds = %land.lhs.true68, %if.end66
  %81 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4619
  %fast_io72 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %81, i32 0, i32 17, !dbg !4620
  %82 = load i8, i8* %fast_io72, align 8, !dbg !4620
  %tobool73 = trunc i8 %82 to i1, !dbg !4620
  br i1 %tobool73, label %if.then74, label %if.else75, !dbg !4621

if.then74:                                        ; preds = %lor.lhs.false71, %land.lhs.true68
  %83 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4622
  %alloc_flags = getelementptr inbounds %struct.regmap, %struct.regmap* %83, i32 0, i32 4, !dbg !4623
  store i32 2592, i32* %alloc_flags, align 8, !dbg !4624
  br label %if.end77, !dbg !4622

if.else75:                                        ; preds = %lor.lhs.false71
  %84 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4625
  %alloc_flags76 = getelementptr inbounds %struct.regmap, %struct.regmap* %84, i32 0, i32 4, !dbg !4626
  store i32 3264, i32* %alloc_flags76, align 8, !dbg !4627
  br label %if.end77

if.end77:                                         ; preds = %if.else75, %if.then74
  %85 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4628
  %reg_bits = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %85, i32 0, i32 1, !dbg !4628
  %86 = load i32, i32* %reg_bits, align 8, !dbg !4628
  %add = add i32 %86, 8, !dbg !4628
  %sub = sub i32 %add, 1, !dbg !4628
  %div = sdiv i32 %sub, 8, !dbg !4628
  %conv = sext i32 %div to i64, !dbg !4628
  %87 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4629
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %87, i32 0, i32 7, !dbg !4630
  %reg_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 1, !dbg !4631
  store i64 %conv, i64* %reg_bytes, align 8, !dbg !4632
  %88 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4633
  %pad_bits = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %88, i32 0, i32 3, !dbg !4634
  %89 = load i32, i32* %pad_bits, align 8, !dbg !4634
  %div78 = sdiv i32 %89, 8, !dbg !4635
  %conv79 = sext i32 %div78 to i64, !dbg !4633
  %90 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4636
  %format80 = getelementptr inbounds %struct.regmap, %struct.regmap* %90, i32 0, i32 7, !dbg !4637
  %pad_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format80, i32 0, i32 2, !dbg !4638
  store i64 %conv79, i64* %pad_bytes, align 8, !dbg !4639
  %91 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4640
  %val_bits = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %91, i32 0, i32 4, !dbg !4640
  %92 = load i32, i32* %val_bits, align 4, !dbg !4640
  %add81 = add i32 %92, 8, !dbg !4640
  %sub82 = sub i32 %add81, 1, !dbg !4640
  %div83 = sdiv i32 %sub82, 8, !dbg !4640
  %conv84 = sext i32 %div83 to i64, !dbg !4640
  %93 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4641
  %format85 = getelementptr inbounds %struct.regmap, %struct.regmap* %93, i32 0, i32 7, !dbg !4642
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format85, i32 0, i32 3, !dbg !4643
  store i64 %conv84, i64* %val_bytes, align 8, !dbg !4644
  %94 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4645
  %reg_bits86 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %94, i32 0, i32 1, !dbg !4645
  %95 = load i32, i32* %reg_bits86, align 8, !dbg !4645
  %96 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4645
  %val_bits87 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %96, i32 0, i32 4, !dbg !4645
  %97 = load i32, i32* %val_bits87, align 4, !dbg !4645
  %add88 = add i32 %95, %97, !dbg !4645
  %98 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4645
  %pad_bits89 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %98, i32 0, i32 3, !dbg !4645
  %99 = load i32, i32* %pad_bits89, align 8, !dbg !4645
  %add90 = add i32 %add88, %99, !dbg !4645
  %add91 = add i32 %add90, 8, !dbg !4645
  %sub92 = sub i32 %add91, 1, !dbg !4645
  %div93 = sdiv i32 %sub92, 8, !dbg !4645
  %conv94 = sext i32 %div93 to i64, !dbg !4645
  %100 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4646
  %format95 = getelementptr inbounds %struct.regmap, %struct.regmap* %100, i32 0, i32 7, !dbg !4647
  %buf_size = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format95, i32 0, i32 0, !dbg !4648
  store i64 %conv94, i64* %buf_size, align 8, !dbg !4649
  %101 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4650
  %pad_bits96 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %101, i32 0, i32 3, !dbg !4651
  %102 = load i32, i32* %pad_bits96, align 8, !dbg !4651
  %rem = srem i32 %102, 8, !dbg !4652
  %103 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4653
  %reg_shift = getelementptr inbounds %struct.regmap, %struct.regmap* %103, i32 0, i32 36, !dbg !4654
  store i32 %rem, i32* %reg_shift, align 8, !dbg !4655
  %104 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4656
  %reg_stride = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %104, i32 0, i32 2, !dbg !4658
  %105 = load i32, i32* %reg_stride, align 4, !dbg !4658
  %tobool97 = icmp ne i32 %105, 0, !dbg !4656
  br i1 %tobool97, label %if.then98, label %if.else101, !dbg !4659

if.then98:                                        ; preds = %if.end77
  %106 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4660
  %reg_stride99 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %106, i32 0, i32 2, !dbg !4661
  %107 = load i32, i32* %reg_stride99, align 4, !dbg !4661
  %108 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4662
  %reg_stride100 = getelementptr inbounds %struct.regmap, %struct.regmap* %108, i32 0, i32 37, !dbg !4663
  store i32 %107, i32* %reg_stride100, align 4, !dbg !4664
  br label %if.end103, !dbg !4662

if.else101:                                       ; preds = %if.end77
  %109 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4665
  %reg_stride102 = getelementptr inbounds %struct.regmap, %struct.regmap* %109, i32 0, i32 37, !dbg !4666
  store i32 1, i32* %reg_stride102, align 4, !dbg !4667
  br label %if.end103

if.end103:                                        ; preds = %if.else101, %if.then98
  %110 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4668
  %reg_stride104 = getelementptr inbounds %struct.regmap, %struct.regmap* %110, i32 0, i32 37, !dbg !4670
  %111 = load i32, i32* %reg_stride104, align 4, !dbg !4670
  %conv105 = sext i32 %111 to i64, !dbg !4668
  %call106 = call zeroext i1 @is_power_of_2(i64 %conv105) #12, !dbg !4671
  br i1 %call106, label %if.then107, label %if.else615, !dbg !4672

if.then107:                                       ; preds = %if.end103
  %112 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride108 = getelementptr inbounds %struct.regmap, %struct.regmap* %112, i32 0, i32 37, !dbg !4673
  %113 = load i32, i32* %reg_stride108, align 4, !dbg !4673
  %114 = call i1 @llvm.is.constant.i32(i32 %113), !dbg !4673
  br i1 %114, label %cond.true, label %cond.false610, !dbg !4673

cond.true:                                        ; preds = %if.then107
  %115 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride109 = getelementptr inbounds %struct.regmap, %struct.regmap* %115, i32 0, i32 37, !dbg !4673
  %116 = load i32, i32* %reg_stride109, align 4, !dbg !4673
  %117 = call i1 @llvm.is.constant.i32(i32 %116), !dbg !4673
  br i1 %117, label %cond.true110, label %cond.false607, !dbg !4673

cond.true110:                                     ; preds = %cond.true
  %118 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride111 = getelementptr inbounds %struct.regmap, %struct.regmap* %118, i32 0, i32 37, !dbg !4673
  %119 = load i32, i32* %reg_stride111, align 4, !dbg !4673
  %cmp112 = icmp slt i32 %119, 2, !dbg !4673
  br i1 %cmp112, label %cond.true114, label %cond.false, !dbg !4673

cond.true114:                                     ; preds = %cond.true110
  br label %cond.end605, !dbg !4673

cond.false:                                       ; preds = %cond.true110
  %120 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride115 = getelementptr inbounds %struct.regmap, %struct.regmap* %120, i32 0, i32 37, !dbg !4673
  %121 = load i32, i32* %reg_stride115, align 4, !dbg !4673
  %conv116 = sext i32 %121 to i64, !dbg !4673
  %and = and i64 %conv116, -9223372036854775808, !dbg !4673
  %tobool117 = icmp ne i64 %and, 0, !dbg !4673
  br i1 %tobool117, label %cond.true118, label %cond.false119, !dbg !4673

cond.true118:                                     ; preds = %cond.false
  br label %cond.end603, !dbg !4673

cond.false119:                                    ; preds = %cond.false
  %122 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride120 = getelementptr inbounds %struct.regmap, %struct.regmap* %122, i32 0, i32 37, !dbg !4673
  %123 = load i32, i32* %reg_stride120, align 4, !dbg !4673
  %conv121 = sext i32 %123 to i64, !dbg !4673
  %and122 = and i64 %conv121, 4611686018427387904, !dbg !4673
  %tobool123 = icmp ne i64 %and122, 0, !dbg !4673
  br i1 %tobool123, label %cond.true124, label %cond.false125, !dbg !4673

cond.true124:                                     ; preds = %cond.false119
  br label %cond.end601, !dbg !4673

cond.false125:                                    ; preds = %cond.false119
  %124 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride126 = getelementptr inbounds %struct.regmap, %struct.regmap* %124, i32 0, i32 37, !dbg !4673
  %125 = load i32, i32* %reg_stride126, align 4, !dbg !4673
  %conv127 = sext i32 %125 to i64, !dbg !4673
  %and128 = and i64 %conv127, 2305843009213693952, !dbg !4673
  %tobool129 = icmp ne i64 %and128, 0, !dbg !4673
  br i1 %tobool129, label %cond.true130, label %cond.false131, !dbg !4673

cond.true130:                                     ; preds = %cond.false125
  br label %cond.end599, !dbg !4673

cond.false131:                                    ; preds = %cond.false125
  %126 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride132 = getelementptr inbounds %struct.regmap, %struct.regmap* %126, i32 0, i32 37, !dbg !4673
  %127 = load i32, i32* %reg_stride132, align 4, !dbg !4673
  %conv133 = sext i32 %127 to i64, !dbg !4673
  %and134 = and i64 %conv133, 1152921504606846976, !dbg !4673
  %tobool135 = icmp ne i64 %and134, 0, !dbg !4673
  br i1 %tobool135, label %cond.true136, label %cond.false137, !dbg !4673

cond.true136:                                     ; preds = %cond.false131
  br label %cond.end597, !dbg !4673

cond.false137:                                    ; preds = %cond.false131
  %128 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride138 = getelementptr inbounds %struct.regmap, %struct.regmap* %128, i32 0, i32 37, !dbg !4673
  %129 = load i32, i32* %reg_stride138, align 4, !dbg !4673
  %conv139 = sext i32 %129 to i64, !dbg !4673
  %and140 = and i64 %conv139, 576460752303423488, !dbg !4673
  %tobool141 = icmp ne i64 %and140, 0, !dbg !4673
  br i1 %tobool141, label %cond.true142, label %cond.false143, !dbg !4673

cond.true142:                                     ; preds = %cond.false137
  br label %cond.end595, !dbg !4673

cond.false143:                                    ; preds = %cond.false137
  %130 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride144 = getelementptr inbounds %struct.regmap, %struct.regmap* %130, i32 0, i32 37, !dbg !4673
  %131 = load i32, i32* %reg_stride144, align 4, !dbg !4673
  %conv145 = sext i32 %131 to i64, !dbg !4673
  %and146 = and i64 %conv145, 288230376151711744, !dbg !4673
  %tobool147 = icmp ne i64 %and146, 0, !dbg !4673
  br i1 %tobool147, label %cond.true148, label %cond.false149, !dbg !4673

cond.true148:                                     ; preds = %cond.false143
  br label %cond.end593, !dbg !4673

cond.false149:                                    ; preds = %cond.false143
  %132 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride150 = getelementptr inbounds %struct.regmap, %struct.regmap* %132, i32 0, i32 37, !dbg !4673
  %133 = load i32, i32* %reg_stride150, align 4, !dbg !4673
  %conv151 = sext i32 %133 to i64, !dbg !4673
  %and152 = and i64 %conv151, 144115188075855872, !dbg !4673
  %tobool153 = icmp ne i64 %and152, 0, !dbg !4673
  br i1 %tobool153, label %cond.true154, label %cond.false155, !dbg !4673

cond.true154:                                     ; preds = %cond.false149
  br label %cond.end591, !dbg !4673

cond.false155:                                    ; preds = %cond.false149
  %134 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride156 = getelementptr inbounds %struct.regmap, %struct.regmap* %134, i32 0, i32 37, !dbg !4673
  %135 = load i32, i32* %reg_stride156, align 4, !dbg !4673
  %conv157 = sext i32 %135 to i64, !dbg !4673
  %and158 = and i64 %conv157, 72057594037927936, !dbg !4673
  %tobool159 = icmp ne i64 %and158, 0, !dbg !4673
  br i1 %tobool159, label %cond.true160, label %cond.false161, !dbg !4673

cond.true160:                                     ; preds = %cond.false155
  br label %cond.end589, !dbg !4673

cond.false161:                                    ; preds = %cond.false155
  %136 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride162 = getelementptr inbounds %struct.regmap, %struct.regmap* %136, i32 0, i32 37, !dbg !4673
  %137 = load i32, i32* %reg_stride162, align 4, !dbg !4673
  %conv163 = sext i32 %137 to i64, !dbg !4673
  %and164 = and i64 %conv163, 36028797018963968, !dbg !4673
  %tobool165 = icmp ne i64 %and164, 0, !dbg !4673
  br i1 %tobool165, label %cond.true166, label %cond.false167, !dbg !4673

cond.true166:                                     ; preds = %cond.false161
  br label %cond.end587, !dbg !4673

cond.false167:                                    ; preds = %cond.false161
  %138 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride168 = getelementptr inbounds %struct.regmap, %struct.regmap* %138, i32 0, i32 37, !dbg !4673
  %139 = load i32, i32* %reg_stride168, align 4, !dbg !4673
  %conv169 = sext i32 %139 to i64, !dbg !4673
  %and170 = and i64 %conv169, 18014398509481984, !dbg !4673
  %tobool171 = icmp ne i64 %and170, 0, !dbg !4673
  br i1 %tobool171, label %cond.true172, label %cond.false173, !dbg !4673

cond.true172:                                     ; preds = %cond.false167
  br label %cond.end585, !dbg !4673

cond.false173:                                    ; preds = %cond.false167
  %140 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride174 = getelementptr inbounds %struct.regmap, %struct.regmap* %140, i32 0, i32 37, !dbg !4673
  %141 = load i32, i32* %reg_stride174, align 4, !dbg !4673
  %conv175 = sext i32 %141 to i64, !dbg !4673
  %and176 = and i64 %conv175, 9007199254740992, !dbg !4673
  %tobool177 = icmp ne i64 %and176, 0, !dbg !4673
  br i1 %tobool177, label %cond.true178, label %cond.false179, !dbg !4673

cond.true178:                                     ; preds = %cond.false173
  br label %cond.end583, !dbg !4673

cond.false179:                                    ; preds = %cond.false173
  %142 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride180 = getelementptr inbounds %struct.regmap, %struct.regmap* %142, i32 0, i32 37, !dbg !4673
  %143 = load i32, i32* %reg_stride180, align 4, !dbg !4673
  %conv181 = sext i32 %143 to i64, !dbg !4673
  %and182 = and i64 %conv181, 4503599627370496, !dbg !4673
  %tobool183 = icmp ne i64 %and182, 0, !dbg !4673
  br i1 %tobool183, label %cond.true184, label %cond.false185, !dbg !4673

cond.true184:                                     ; preds = %cond.false179
  br label %cond.end581, !dbg !4673

cond.false185:                                    ; preds = %cond.false179
  %144 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride186 = getelementptr inbounds %struct.regmap, %struct.regmap* %144, i32 0, i32 37, !dbg !4673
  %145 = load i32, i32* %reg_stride186, align 4, !dbg !4673
  %conv187 = sext i32 %145 to i64, !dbg !4673
  %and188 = and i64 %conv187, 2251799813685248, !dbg !4673
  %tobool189 = icmp ne i64 %and188, 0, !dbg !4673
  br i1 %tobool189, label %cond.true190, label %cond.false191, !dbg !4673

cond.true190:                                     ; preds = %cond.false185
  br label %cond.end579, !dbg !4673

cond.false191:                                    ; preds = %cond.false185
  %146 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride192 = getelementptr inbounds %struct.regmap, %struct.regmap* %146, i32 0, i32 37, !dbg !4673
  %147 = load i32, i32* %reg_stride192, align 4, !dbg !4673
  %conv193 = sext i32 %147 to i64, !dbg !4673
  %and194 = and i64 %conv193, 1125899906842624, !dbg !4673
  %tobool195 = icmp ne i64 %and194, 0, !dbg !4673
  br i1 %tobool195, label %cond.true196, label %cond.false197, !dbg !4673

cond.true196:                                     ; preds = %cond.false191
  br label %cond.end577, !dbg !4673

cond.false197:                                    ; preds = %cond.false191
  %148 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride198 = getelementptr inbounds %struct.regmap, %struct.regmap* %148, i32 0, i32 37, !dbg !4673
  %149 = load i32, i32* %reg_stride198, align 4, !dbg !4673
  %conv199 = sext i32 %149 to i64, !dbg !4673
  %and200 = and i64 %conv199, 562949953421312, !dbg !4673
  %tobool201 = icmp ne i64 %and200, 0, !dbg !4673
  br i1 %tobool201, label %cond.true202, label %cond.false203, !dbg !4673

cond.true202:                                     ; preds = %cond.false197
  br label %cond.end575, !dbg !4673

cond.false203:                                    ; preds = %cond.false197
  %150 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride204 = getelementptr inbounds %struct.regmap, %struct.regmap* %150, i32 0, i32 37, !dbg !4673
  %151 = load i32, i32* %reg_stride204, align 4, !dbg !4673
  %conv205 = sext i32 %151 to i64, !dbg !4673
  %and206 = and i64 %conv205, 281474976710656, !dbg !4673
  %tobool207 = icmp ne i64 %and206, 0, !dbg !4673
  br i1 %tobool207, label %cond.true208, label %cond.false209, !dbg !4673

cond.true208:                                     ; preds = %cond.false203
  br label %cond.end573, !dbg !4673

cond.false209:                                    ; preds = %cond.false203
  %152 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride210 = getelementptr inbounds %struct.regmap, %struct.regmap* %152, i32 0, i32 37, !dbg !4673
  %153 = load i32, i32* %reg_stride210, align 4, !dbg !4673
  %conv211 = sext i32 %153 to i64, !dbg !4673
  %and212 = and i64 %conv211, 140737488355328, !dbg !4673
  %tobool213 = icmp ne i64 %and212, 0, !dbg !4673
  br i1 %tobool213, label %cond.true214, label %cond.false215, !dbg !4673

cond.true214:                                     ; preds = %cond.false209
  br label %cond.end571, !dbg !4673

cond.false215:                                    ; preds = %cond.false209
  %154 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride216 = getelementptr inbounds %struct.regmap, %struct.regmap* %154, i32 0, i32 37, !dbg !4673
  %155 = load i32, i32* %reg_stride216, align 4, !dbg !4673
  %conv217 = sext i32 %155 to i64, !dbg !4673
  %and218 = and i64 %conv217, 70368744177664, !dbg !4673
  %tobool219 = icmp ne i64 %and218, 0, !dbg !4673
  br i1 %tobool219, label %cond.true220, label %cond.false221, !dbg !4673

cond.true220:                                     ; preds = %cond.false215
  br label %cond.end569, !dbg !4673

cond.false221:                                    ; preds = %cond.false215
  %156 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride222 = getelementptr inbounds %struct.regmap, %struct.regmap* %156, i32 0, i32 37, !dbg !4673
  %157 = load i32, i32* %reg_stride222, align 4, !dbg !4673
  %conv223 = sext i32 %157 to i64, !dbg !4673
  %and224 = and i64 %conv223, 35184372088832, !dbg !4673
  %tobool225 = icmp ne i64 %and224, 0, !dbg !4673
  br i1 %tobool225, label %cond.true226, label %cond.false227, !dbg !4673

cond.true226:                                     ; preds = %cond.false221
  br label %cond.end567, !dbg !4673

cond.false227:                                    ; preds = %cond.false221
  %158 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride228 = getelementptr inbounds %struct.regmap, %struct.regmap* %158, i32 0, i32 37, !dbg !4673
  %159 = load i32, i32* %reg_stride228, align 4, !dbg !4673
  %conv229 = sext i32 %159 to i64, !dbg !4673
  %and230 = and i64 %conv229, 17592186044416, !dbg !4673
  %tobool231 = icmp ne i64 %and230, 0, !dbg !4673
  br i1 %tobool231, label %cond.true232, label %cond.false233, !dbg !4673

cond.true232:                                     ; preds = %cond.false227
  br label %cond.end565, !dbg !4673

cond.false233:                                    ; preds = %cond.false227
  %160 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride234 = getelementptr inbounds %struct.regmap, %struct.regmap* %160, i32 0, i32 37, !dbg !4673
  %161 = load i32, i32* %reg_stride234, align 4, !dbg !4673
  %conv235 = sext i32 %161 to i64, !dbg !4673
  %and236 = and i64 %conv235, 8796093022208, !dbg !4673
  %tobool237 = icmp ne i64 %and236, 0, !dbg !4673
  br i1 %tobool237, label %cond.true238, label %cond.false239, !dbg !4673

cond.true238:                                     ; preds = %cond.false233
  br label %cond.end563, !dbg !4673

cond.false239:                                    ; preds = %cond.false233
  %162 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride240 = getelementptr inbounds %struct.regmap, %struct.regmap* %162, i32 0, i32 37, !dbg !4673
  %163 = load i32, i32* %reg_stride240, align 4, !dbg !4673
  %conv241 = sext i32 %163 to i64, !dbg !4673
  %and242 = and i64 %conv241, 4398046511104, !dbg !4673
  %tobool243 = icmp ne i64 %and242, 0, !dbg !4673
  br i1 %tobool243, label %cond.true244, label %cond.false245, !dbg !4673

cond.true244:                                     ; preds = %cond.false239
  br label %cond.end561, !dbg !4673

cond.false245:                                    ; preds = %cond.false239
  %164 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride246 = getelementptr inbounds %struct.regmap, %struct.regmap* %164, i32 0, i32 37, !dbg !4673
  %165 = load i32, i32* %reg_stride246, align 4, !dbg !4673
  %conv247 = sext i32 %165 to i64, !dbg !4673
  %and248 = and i64 %conv247, 2199023255552, !dbg !4673
  %tobool249 = icmp ne i64 %and248, 0, !dbg !4673
  br i1 %tobool249, label %cond.true250, label %cond.false251, !dbg !4673

cond.true250:                                     ; preds = %cond.false245
  br label %cond.end559, !dbg !4673

cond.false251:                                    ; preds = %cond.false245
  %166 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride252 = getelementptr inbounds %struct.regmap, %struct.regmap* %166, i32 0, i32 37, !dbg !4673
  %167 = load i32, i32* %reg_stride252, align 4, !dbg !4673
  %conv253 = sext i32 %167 to i64, !dbg !4673
  %and254 = and i64 %conv253, 1099511627776, !dbg !4673
  %tobool255 = icmp ne i64 %and254, 0, !dbg !4673
  br i1 %tobool255, label %cond.true256, label %cond.false257, !dbg !4673

cond.true256:                                     ; preds = %cond.false251
  br label %cond.end557, !dbg !4673

cond.false257:                                    ; preds = %cond.false251
  %168 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride258 = getelementptr inbounds %struct.regmap, %struct.regmap* %168, i32 0, i32 37, !dbg !4673
  %169 = load i32, i32* %reg_stride258, align 4, !dbg !4673
  %conv259 = sext i32 %169 to i64, !dbg !4673
  %and260 = and i64 %conv259, 549755813888, !dbg !4673
  %tobool261 = icmp ne i64 %and260, 0, !dbg !4673
  br i1 %tobool261, label %cond.true262, label %cond.false263, !dbg !4673

cond.true262:                                     ; preds = %cond.false257
  br label %cond.end555, !dbg !4673

cond.false263:                                    ; preds = %cond.false257
  %170 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride264 = getelementptr inbounds %struct.regmap, %struct.regmap* %170, i32 0, i32 37, !dbg !4673
  %171 = load i32, i32* %reg_stride264, align 4, !dbg !4673
  %conv265 = sext i32 %171 to i64, !dbg !4673
  %and266 = and i64 %conv265, 274877906944, !dbg !4673
  %tobool267 = icmp ne i64 %and266, 0, !dbg !4673
  br i1 %tobool267, label %cond.true268, label %cond.false269, !dbg !4673

cond.true268:                                     ; preds = %cond.false263
  br label %cond.end553, !dbg !4673

cond.false269:                                    ; preds = %cond.false263
  %172 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride270 = getelementptr inbounds %struct.regmap, %struct.regmap* %172, i32 0, i32 37, !dbg !4673
  %173 = load i32, i32* %reg_stride270, align 4, !dbg !4673
  %conv271 = sext i32 %173 to i64, !dbg !4673
  %and272 = and i64 %conv271, 137438953472, !dbg !4673
  %tobool273 = icmp ne i64 %and272, 0, !dbg !4673
  br i1 %tobool273, label %cond.true274, label %cond.false275, !dbg !4673

cond.true274:                                     ; preds = %cond.false269
  br label %cond.end551, !dbg !4673

cond.false275:                                    ; preds = %cond.false269
  %174 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride276 = getelementptr inbounds %struct.regmap, %struct.regmap* %174, i32 0, i32 37, !dbg !4673
  %175 = load i32, i32* %reg_stride276, align 4, !dbg !4673
  %conv277 = sext i32 %175 to i64, !dbg !4673
  %and278 = and i64 %conv277, 68719476736, !dbg !4673
  %tobool279 = icmp ne i64 %and278, 0, !dbg !4673
  br i1 %tobool279, label %cond.true280, label %cond.false281, !dbg !4673

cond.true280:                                     ; preds = %cond.false275
  br label %cond.end549, !dbg !4673

cond.false281:                                    ; preds = %cond.false275
  %176 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride282 = getelementptr inbounds %struct.regmap, %struct.regmap* %176, i32 0, i32 37, !dbg !4673
  %177 = load i32, i32* %reg_stride282, align 4, !dbg !4673
  %conv283 = sext i32 %177 to i64, !dbg !4673
  %and284 = and i64 %conv283, 34359738368, !dbg !4673
  %tobool285 = icmp ne i64 %and284, 0, !dbg !4673
  br i1 %tobool285, label %cond.true286, label %cond.false287, !dbg !4673

cond.true286:                                     ; preds = %cond.false281
  br label %cond.end547, !dbg !4673

cond.false287:                                    ; preds = %cond.false281
  %178 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride288 = getelementptr inbounds %struct.regmap, %struct.regmap* %178, i32 0, i32 37, !dbg !4673
  %179 = load i32, i32* %reg_stride288, align 4, !dbg !4673
  %conv289 = sext i32 %179 to i64, !dbg !4673
  %and290 = and i64 %conv289, 17179869184, !dbg !4673
  %tobool291 = icmp ne i64 %and290, 0, !dbg !4673
  br i1 %tobool291, label %cond.true292, label %cond.false293, !dbg !4673

cond.true292:                                     ; preds = %cond.false287
  br label %cond.end545, !dbg !4673

cond.false293:                                    ; preds = %cond.false287
  %180 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride294 = getelementptr inbounds %struct.regmap, %struct.regmap* %180, i32 0, i32 37, !dbg !4673
  %181 = load i32, i32* %reg_stride294, align 4, !dbg !4673
  %conv295 = sext i32 %181 to i64, !dbg !4673
  %and296 = and i64 %conv295, 8589934592, !dbg !4673
  %tobool297 = icmp ne i64 %and296, 0, !dbg !4673
  br i1 %tobool297, label %cond.true298, label %cond.false299, !dbg !4673

cond.true298:                                     ; preds = %cond.false293
  br label %cond.end543, !dbg !4673

cond.false299:                                    ; preds = %cond.false293
  %182 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride300 = getelementptr inbounds %struct.regmap, %struct.regmap* %182, i32 0, i32 37, !dbg !4673
  %183 = load i32, i32* %reg_stride300, align 4, !dbg !4673
  %conv301 = sext i32 %183 to i64, !dbg !4673
  %and302 = and i64 %conv301, 4294967296, !dbg !4673
  %tobool303 = icmp ne i64 %and302, 0, !dbg !4673
  br i1 %tobool303, label %cond.true304, label %cond.false305, !dbg !4673

cond.true304:                                     ; preds = %cond.false299
  br label %cond.end541, !dbg !4673

cond.false305:                                    ; preds = %cond.false299
  %184 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride306 = getelementptr inbounds %struct.regmap, %struct.regmap* %184, i32 0, i32 37, !dbg !4673
  %185 = load i32, i32* %reg_stride306, align 4, !dbg !4673
  %conv307 = sext i32 %185 to i64, !dbg !4673
  %and308 = and i64 %conv307, 2147483648, !dbg !4673
  %tobool309 = icmp ne i64 %and308, 0, !dbg !4673
  br i1 %tobool309, label %cond.true310, label %cond.false311, !dbg !4673

cond.true310:                                     ; preds = %cond.false305
  br label %cond.end539, !dbg !4673

cond.false311:                                    ; preds = %cond.false305
  %186 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride312 = getelementptr inbounds %struct.regmap, %struct.regmap* %186, i32 0, i32 37, !dbg !4673
  %187 = load i32, i32* %reg_stride312, align 4, !dbg !4673
  %conv313 = sext i32 %187 to i64, !dbg !4673
  %and314 = and i64 %conv313, 1073741824, !dbg !4673
  %tobool315 = icmp ne i64 %and314, 0, !dbg !4673
  br i1 %tobool315, label %cond.true316, label %cond.false317, !dbg !4673

cond.true316:                                     ; preds = %cond.false311
  br label %cond.end537, !dbg !4673

cond.false317:                                    ; preds = %cond.false311
  %188 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride318 = getelementptr inbounds %struct.regmap, %struct.regmap* %188, i32 0, i32 37, !dbg !4673
  %189 = load i32, i32* %reg_stride318, align 4, !dbg !4673
  %conv319 = sext i32 %189 to i64, !dbg !4673
  %and320 = and i64 %conv319, 536870912, !dbg !4673
  %tobool321 = icmp ne i64 %and320, 0, !dbg !4673
  br i1 %tobool321, label %cond.true322, label %cond.false323, !dbg !4673

cond.true322:                                     ; preds = %cond.false317
  br label %cond.end535, !dbg !4673

cond.false323:                                    ; preds = %cond.false317
  %190 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride324 = getelementptr inbounds %struct.regmap, %struct.regmap* %190, i32 0, i32 37, !dbg !4673
  %191 = load i32, i32* %reg_stride324, align 4, !dbg !4673
  %conv325 = sext i32 %191 to i64, !dbg !4673
  %and326 = and i64 %conv325, 268435456, !dbg !4673
  %tobool327 = icmp ne i64 %and326, 0, !dbg !4673
  br i1 %tobool327, label %cond.true328, label %cond.false329, !dbg !4673

cond.true328:                                     ; preds = %cond.false323
  br label %cond.end533, !dbg !4673

cond.false329:                                    ; preds = %cond.false323
  %192 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride330 = getelementptr inbounds %struct.regmap, %struct.regmap* %192, i32 0, i32 37, !dbg !4673
  %193 = load i32, i32* %reg_stride330, align 4, !dbg !4673
  %conv331 = sext i32 %193 to i64, !dbg !4673
  %and332 = and i64 %conv331, 134217728, !dbg !4673
  %tobool333 = icmp ne i64 %and332, 0, !dbg !4673
  br i1 %tobool333, label %cond.true334, label %cond.false335, !dbg !4673

cond.true334:                                     ; preds = %cond.false329
  br label %cond.end531, !dbg !4673

cond.false335:                                    ; preds = %cond.false329
  %194 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride336 = getelementptr inbounds %struct.regmap, %struct.regmap* %194, i32 0, i32 37, !dbg !4673
  %195 = load i32, i32* %reg_stride336, align 4, !dbg !4673
  %conv337 = sext i32 %195 to i64, !dbg !4673
  %and338 = and i64 %conv337, 67108864, !dbg !4673
  %tobool339 = icmp ne i64 %and338, 0, !dbg !4673
  br i1 %tobool339, label %cond.true340, label %cond.false341, !dbg !4673

cond.true340:                                     ; preds = %cond.false335
  br label %cond.end529, !dbg !4673

cond.false341:                                    ; preds = %cond.false335
  %196 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride342 = getelementptr inbounds %struct.regmap, %struct.regmap* %196, i32 0, i32 37, !dbg !4673
  %197 = load i32, i32* %reg_stride342, align 4, !dbg !4673
  %conv343 = sext i32 %197 to i64, !dbg !4673
  %and344 = and i64 %conv343, 33554432, !dbg !4673
  %tobool345 = icmp ne i64 %and344, 0, !dbg !4673
  br i1 %tobool345, label %cond.true346, label %cond.false347, !dbg !4673

cond.true346:                                     ; preds = %cond.false341
  br label %cond.end527, !dbg !4673

cond.false347:                                    ; preds = %cond.false341
  %198 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride348 = getelementptr inbounds %struct.regmap, %struct.regmap* %198, i32 0, i32 37, !dbg !4673
  %199 = load i32, i32* %reg_stride348, align 4, !dbg !4673
  %conv349 = sext i32 %199 to i64, !dbg !4673
  %and350 = and i64 %conv349, 16777216, !dbg !4673
  %tobool351 = icmp ne i64 %and350, 0, !dbg !4673
  br i1 %tobool351, label %cond.true352, label %cond.false353, !dbg !4673

cond.true352:                                     ; preds = %cond.false347
  br label %cond.end525, !dbg !4673

cond.false353:                                    ; preds = %cond.false347
  %200 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride354 = getelementptr inbounds %struct.regmap, %struct.regmap* %200, i32 0, i32 37, !dbg !4673
  %201 = load i32, i32* %reg_stride354, align 4, !dbg !4673
  %conv355 = sext i32 %201 to i64, !dbg !4673
  %and356 = and i64 %conv355, 8388608, !dbg !4673
  %tobool357 = icmp ne i64 %and356, 0, !dbg !4673
  br i1 %tobool357, label %cond.true358, label %cond.false359, !dbg !4673

cond.true358:                                     ; preds = %cond.false353
  br label %cond.end523, !dbg !4673

cond.false359:                                    ; preds = %cond.false353
  %202 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride360 = getelementptr inbounds %struct.regmap, %struct.regmap* %202, i32 0, i32 37, !dbg !4673
  %203 = load i32, i32* %reg_stride360, align 4, !dbg !4673
  %conv361 = sext i32 %203 to i64, !dbg !4673
  %and362 = and i64 %conv361, 4194304, !dbg !4673
  %tobool363 = icmp ne i64 %and362, 0, !dbg !4673
  br i1 %tobool363, label %cond.true364, label %cond.false365, !dbg !4673

cond.true364:                                     ; preds = %cond.false359
  br label %cond.end521, !dbg !4673

cond.false365:                                    ; preds = %cond.false359
  %204 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride366 = getelementptr inbounds %struct.regmap, %struct.regmap* %204, i32 0, i32 37, !dbg !4673
  %205 = load i32, i32* %reg_stride366, align 4, !dbg !4673
  %conv367 = sext i32 %205 to i64, !dbg !4673
  %and368 = and i64 %conv367, 2097152, !dbg !4673
  %tobool369 = icmp ne i64 %and368, 0, !dbg !4673
  br i1 %tobool369, label %cond.true370, label %cond.false371, !dbg !4673

cond.true370:                                     ; preds = %cond.false365
  br label %cond.end519, !dbg !4673

cond.false371:                                    ; preds = %cond.false365
  %206 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride372 = getelementptr inbounds %struct.regmap, %struct.regmap* %206, i32 0, i32 37, !dbg !4673
  %207 = load i32, i32* %reg_stride372, align 4, !dbg !4673
  %conv373 = sext i32 %207 to i64, !dbg !4673
  %and374 = and i64 %conv373, 1048576, !dbg !4673
  %tobool375 = icmp ne i64 %and374, 0, !dbg !4673
  br i1 %tobool375, label %cond.true376, label %cond.false377, !dbg !4673

cond.true376:                                     ; preds = %cond.false371
  br label %cond.end517, !dbg !4673

cond.false377:                                    ; preds = %cond.false371
  %208 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride378 = getelementptr inbounds %struct.regmap, %struct.regmap* %208, i32 0, i32 37, !dbg !4673
  %209 = load i32, i32* %reg_stride378, align 4, !dbg !4673
  %conv379 = sext i32 %209 to i64, !dbg !4673
  %and380 = and i64 %conv379, 524288, !dbg !4673
  %tobool381 = icmp ne i64 %and380, 0, !dbg !4673
  br i1 %tobool381, label %cond.true382, label %cond.false383, !dbg !4673

cond.true382:                                     ; preds = %cond.false377
  br label %cond.end515, !dbg !4673

cond.false383:                                    ; preds = %cond.false377
  %210 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride384 = getelementptr inbounds %struct.regmap, %struct.regmap* %210, i32 0, i32 37, !dbg !4673
  %211 = load i32, i32* %reg_stride384, align 4, !dbg !4673
  %conv385 = sext i32 %211 to i64, !dbg !4673
  %and386 = and i64 %conv385, 262144, !dbg !4673
  %tobool387 = icmp ne i64 %and386, 0, !dbg !4673
  br i1 %tobool387, label %cond.true388, label %cond.false389, !dbg !4673

cond.true388:                                     ; preds = %cond.false383
  br label %cond.end513, !dbg !4673

cond.false389:                                    ; preds = %cond.false383
  %212 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride390 = getelementptr inbounds %struct.regmap, %struct.regmap* %212, i32 0, i32 37, !dbg !4673
  %213 = load i32, i32* %reg_stride390, align 4, !dbg !4673
  %conv391 = sext i32 %213 to i64, !dbg !4673
  %and392 = and i64 %conv391, 131072, !dbg !4673
  %tobool393 = icmp ne i64 %and392, 0, !dbg !4673
  br i1 %tobool393, label %cond.true394, label %cond.false395, !dbg !4673

cond.true394:                                     ; preds = %cond.false389
  br label %cond.end511, !dbg !4673

cond.false395:                                    ; preds = %cond.false389
  %214 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride396 = getelementptr inbounds %struct.regmap, %struct.regmap* %214, i32 0, i32 37, !dbg !4673
  %215 = load i32, i32* %reg_stride396, align 4, !dbg !4673
  %conv397 = sext i32 %215 to i64, !dbg !4673
  %and398 = and i64 %conv397, 65536, !dbg !4673
  %tobool399 = icmp ne i64 %and398, 0, !dbg !4673
  br i1 %tobool399, label %cond.true400, label %cond.false401, !dbg !4673

cond.true400:                                     ; preds = %cond.false395
  br label %cond.end509, !dbg !4673

cond.false401:                                    ; preds = %cond.false395
  %216 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride402 = getelementptr inbounds %struct.regmap, %struct.regmap* %216, i32 0, i32 37, !dbg !4673
  %217 = load i32, i32* %reg_stride402, align 4, !dbg !4673
  %conv403 = sext i32 %217 to i64, !dbg !4673
  %and404 = and i64 %conv403, 32768, !dbg !4673
  %tobool405 = icmp ne i64 %and404, 0, !dbg !4673
  br i1 %tobool405, label %cond.true406, label %cond.false407, !dbg !4673

cond.true406:                                     ; preds = %cond.false401
  br label %cond.end507, !dbg !4673

cond.false407:                                    ; preds = %cond.false401
  %218 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride408 = getelementptr inbounds %struct.regmap, %struct.regmap* %218, i32 0, i32 37, !dbg !4673
  %219 = load i32, i32* %reg_stride408, align 4, !dbg !4673
  %conv409 = sext i32 %219 to i64, !dbg !4673
  %and410 = and i64 %conv409, 16384, !dbg !4673
  %tobool411 = icmp ne i64 %and410, 0, !dbg !4673
  br i1 %tobool411, label %cond.true412, label %cond.false413, !dbg !4673

cond.true412:                                     ; preds = %cond.false407
  br label %cond.end505, !dbg !4673

cond.false413:                                    ; preds = %cond.false407
  %220 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride414 = getelementptr inbounds %struct.regmap, %struct.regmap* %220, i32 0, i32 37, !dbg !4673
  %221 = load i32, i32* %reg_stride414, align 4, !dbg !4673
  %conv415 = sext i32 %221 to i64, !dbg !4673
  %and416 = and i64 %conv415, 8192, !dbg !4673
  %tobool417 = icmp ne i64 %and416, 0, !dbg !4673
  br i1 %tobool417, label %cond.true418, label %cond.false419, !dbg !4673

cond.true418:                                     ; preds = %cond.false413
  br label %cond.end503, !dbg !4673

cond.false419:                                    ; preds = %cond.false413
  %222 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride420 = getelementptr inbounds %struct.regmap, %struct.regmap* %222, i32 0, i32 37, !dbg !4673
  %223 = load i32, i32* %reg_stride420, align 4, !dbg !4673
  %conv421 = sext i32 %223 to i64, !dbg !4673
  %and422 = and i64 %conv421, 4096, !dbg !4673
  %tobool423 = icmp ne i64 %and422, 0, !dbg !4673
  br i1 %tobool423, label %cond.true424, label %cond.false425, !dbg !4673

cond.true424:                                     ; preds = %cond.false419
  br label %cond.end501, !dbg !4673

cond.false425:                                    ; preds = %cond.false419
  %224 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride426 = getelementptr inbounds %struct.regmap, %struct.regmap* %224, i32 0, i32 37, !dbg !4673
  %225 = load i32, i32* %reg_stride426, align 4, !dbg !4673
  %conv427 = sext i32 %225 to i64, !dbg !4673
  %and428 = and i64 %conv427, 2048, !dbg !4673
  %tobool429 = icmp ne i64 %and428, 0, !dbg !4673
  br i1 %tobool429, label %cond.true430, label %cond.false431, !dbg !4673

cond.true430:                                     ; preds = %cond.false425
  br label %cond.end499, !dbg !4673

cond.false431:                                    ; preds = %cond.false425
  %226 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride432 = getelementptr inbounds %struct.regmap, %struct.regmap* %226, i32 0, i32 37, !dbg !4673
  %227 = load i32, i32* %reg_stride432, align 4, !dbg !4673
  %conv433 = sext i32 %227 to i64, !dbg !4673
  %and434 = and i64 %conv433, 1024, !dbg !4673
  %tobool435 = icmp ne i64 %and434, 0, !dbg !4673
  br i1 %tobool435, label %cond.true436, label %cond.false437, !dbg !4673

cond.true436:                                     ; preds = %cond.false431
  br label %cond.end497, !dbg !4673

cond.false437:                                    ; preds = %cond.false431
  %228 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride438 = getelementptr inbounds %struct.regmap, %struct.regmap* %228, i32 0, i32 37, !dbg !4673
  %229 = load i32, i32* %reg_stride438, align 4, !dbg !4673
  %conv439 = sext i32 %229 to i64, !dbg !4673
  %and440 = and i64 %conv439, 512, !dbg !4673
  %tobool441 = icmp ne i64 %and440, 0, !dbg !4673
  br i1 %tobool441, label %cond.true442, label %cond.false443, !dbg !4673

cond.true442:                                     ; preds = %cond.false437
  br label %cond.end495, !dbg !4673

cond.false443:                                    ; preds = %cond.false437
  %230 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride444 = getelementptr inbounds %struct.regmap, %struct.regmap* %230, i32 0, i32 37, !dbg !4673
  %231 = load i32, i32* %reg_stride444, align 4, !dbg !4673
  %conv445 = sext i32 %231 to i64, !dbg !4673
  %and446 = and i64 %conv445, 256, !dbg !4673
  %tobool447 = icmp ne i64 %and446, 0, !dbg !4673
  br i1 %tobool447, label %cond.true448, label %cond.false449, !dbg !4673

cond.true448:                                     ; preds = %cond.false443
  br label %cond.end493, !dbg !4673

cond.false449:                                    ; preds = %cond.false443
  %232 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride450 = getelementptr inbounds %struct.regmap, %struct.regmap* %232, i32 0, i32 37, !dbg !4673
  %233 = load i32, i32* %reg_stride450, align 4, !dbg !4673
  %conv451 = sext i32 %233 to i64, !dbg !4673
  %and452 = and i64 %conv451, 128, !dbg !4673
  %tobool453 = icmp ne i64 %and452, 0, !dbg !4673
  br i1 %tobool453, label %cond.true454, label %cond.false455, !dbg !4673

cond.true454:                                     ; preds = %cond.false449
  br label %cond.end491, !dbg !4673

cond.false455:                                    ; preds = %cond.false449
  %234 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride456 = getelementptr inbounds %struct.regmap, %struct.regmap* %234, i32 0, i32 37, !dbg !4673
  %235 = load i32, i32* %reg_stride456, align 4, !dbg !4673
  %conv457 = sext i32 %235 to i64, !dbg !4673
  %and458 = and i64 %conv457, 64, !dbg !4673
  %tobool459 = icmp ne i64 %and458, 0, !dbg !4673
  br i1 %tobool459, label %cond.true460, label %cond.false461, !dbg !4673

cond.true460:                                     ; preds = %cond.false455
  br label %cond.end489, !dbg !4673

cond.false461:                                    ; preds = %cond.false455
  %236 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride462 = getelementptr inbounds %struct.regmap, %struct.regmap* %236, i32 0, i32 37, !dbg !4673
  %237 = load i32, i32* %reg_stride462, align 4, !dbg !4673
  %conv463 = sext i32 %237 to i64, !dbg !4673
  %and464 = and i64 %conv463, 32, !dbg !4673
  %tobool465 = icmp ne i64 %and464, 0, !dbg !4673
  br i1 %tobool465, label %cond.true466, label %cond.false467, !dbg !4673

cond.true466:                                     ; preds = %cond.false461
  br label %cond.end487, !dbg !4673

cond.false467:                                    ; preds = %cond.false461
  %238 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride468 = getelementptr inbounds %struct.regmap, %struct.regmap* %238, i32 0, i32 37, !dbg !4673
  %239 = load i32, i32* %reg_stride468, align 4, !dbg !4673
  %conv469 = sext i32 %239 to i64, !dbg !4673
  %and470 = and i64 %conv469, 16, !dbg !4673
  %tobool471 = icmp ne i64 %and470, 0, !dbg !4673
  br i1 %tobool471, label %cond.true472, label %cond.false473, !dbg !4673

cond.true472:                                     ; preds = %cond.false467
  br label %cond.end485, !dbg !4673

cond.false473:                                    ; preds = %cond.false467
  %240 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride474 = getelementptr inbounds %struct.regmap, %struct.regmap* %240, i32 0, i32 37, !dbg !4673
  %241 = load i32, i32* %reg_stride474, align 4, !dbg !4673
  %conv475 = sext i32 %241 to i64, !dbg !4673
  %and476 = and i64 %conv475, 8, !dbg !4673
  %tobool477 = icmp ne i64 %and476, 0, !dbg !4673
  br i1 %tobool477, label %cond.true478, label %cond.false479, !dbg !4673

cond.true478:                                     ; preds = %cond.false473
  br label %cond.end, !dbg !4673

cond.false479:                                    ; preds = %cond.false473
  %242 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride480 = getelementptr inbounds %struct.regmap, %struct.regmap* %242, i32 0, i32 37, !dbg !4673
  %243 = load i32, i32* %reg_stride480, align 4, !dbg !4673
  %conv481 = sext i32 %243 to i64, !dbg !4673
  %and482 = and i64 %conv481, 4, !dbg !4673
  %tobool483 = icmp ne i64 %and482, 0, !dbg !4673
  %244 = zext i1 %tobool483 to i64, !dbg !4673
  %cond = select i1 %tobool483, i32 2, i32 1, !dbg !4673
  br label %cond.end, !dbg !4673

cond.end:                                         ; preds = %cond.false479, %cond.true478
  %cond484 = phi i32 [ 3, %cond.true478 ], [ %cond, %cond.false479 ], !dbg !4673
  br label %cond.end485, !dbg !4673

cond.end485:                                      ; preds = %cond.end, %cond.true472
  %cond486 = phi i32 [ 4, %cond.true472 ], [ %cond484, %cond.end ], !dbg !4673
  br label %cond.end487, !dbg !4673

cond.end487:                                      ; preds = %cond.end485, %cond.true466
  %cond488 = phi i32 [ 5, %cond.true466 ], [ %cond486, %cond.end485 ], !dbg !4673
  br label %cond.end489, !dbg !4673

cond.end489:                                      ; preds = %cond.end487, %cond.true460
  %cond490 = phi i32 [ 6, %cond.true460 ], [ %cond488, %cond.end487 ], !dbg !4673
  br label %cond.end491, !dbg !4673

cond.end491:                                      ; preds = %cond.end489, %cond.true454
  %cond492 = phi i32 [ 7, %cond.true454 ], [ %cond490, %cond.end489 ], !dbg !4673
  br label %cond.end493, !dbg !4673

cond.end493:                                      ; preds = %cond.end491, %cond.true448
  %cond494 = phi i32 [ 8, %cond.true448 ], [ %cond492, %cond.end491 ], !dbg !4673
  br label %cond.end495, !dbg !4673

cond.end495:                                      ; preds = %cond.end493, %cond.true442
  %cond496 = phi i32 [ 9, %cond.true442 ], [ %cond494, %cond.end493 ], !dbg !4673
  br label %cond.end497, !dbg !4673

cond.end497:                                      ; preds = %cond.end495, %cond.true436
  %cond498 = phi i32 [ 10, %cond.true436 ], [ %cond496, %cond.end495 ], !dbg !4673
  br label %cond.end499, !dbg !4673

cond.end499:                                      ; preds = %cond.end497, %cond.true430
  %cond500 = phi i32 [ 11, %cond.true430 ], [ %cond498, %cond.end497 ], !dbg !4673
  br label %cond.end501, !dbg !4673

cond.end501:                                      ; preds = %cond.end499, %cond.true424
  %cond502 = phi i32 [ 12, %cond.true424 ], [ %cond500, %cond.end499 ], !dbg !4673
  br label %cond.end503, !dbg !4673

cond.end503:                                      ; preds = %cond.end501, %cond.true418
  %cond504 = phi i32 [ 13, %cond.true418 ], [ %cond502, %cond.end501 ], !dbg !4673
  br label %cond.end505, !dbg !4673

cond.end505:                                      ; preds = %cond.end503, %cond.true412
  %cond506 = phi i32 [ 14, %cond.true412 ], [ %cond504, %cond.end503 ], !dbg !4673
  br label %cond.end507, !dbg !4673

cond.end507:                                      ; preds = %cond.end505, %cond.true406
  %cond508 = phi i32 [ 15, %cond.true406 ], [ %cond506, %cond.end505 ], !dbg !4673
  br label %cond.end509, !dbg !4673

cond.end509:                                      ; preds = %cond.end507, %cond.true400
  %cond510 = phi i32 [ 16, %cond.true400 ], [ %cond508, %cond.end507 ], !dbg !4673
  br label %cond.end511, !dbg !4673

cond.end511:                                      ; preds = %cond.end509, %cond.true394
  %cond512 = phi i32 [ 17, %cond.true394 ], [ %cond510, %cond.end509 ], !dbg !4673
  br label %cond.end513, !dbg !4673

cond.end513:                                      ; preds = %cond.end511, %cond.true388
  %cond514 = phi i32 [ 18, %cond.true388 ], [ %cond512, %cond.end511 ], !dbg !4673
  br label %cond.end515, !dbg !4673

cond.end515:                                      ; preds = %cond.end513, %cond.true382
  %cond516 = phi i32 [ 19, %cond.true382 ], [ %cond514, %cond.end513 ], !dbg !4673
  br label %cond.end517, !dbg !4673

cond.end517:                                      ; preds = %cond.end515, %cond.true376
  %cond518 = phi i32 [ 20, %cond.true376 ], [ %cond516, %cond.end515 ], !dbg !4673
  br label %cond.end519, !dbg !4673

cond.end519:                                      ; preds = %cond.end517, %cond.true370
  %cond520 = phi i32 [ 21, %cond.true370 ], [ %cond518, %cond.end517 ], !dbg !4673
  br label %cond.end521, !dbg !4673

cond.end521:                                      ; preds = %cond.end519, %cond.true364
  %cond522 = phi i32 [ 22, %cond.true364 ], [ %cond520, %cond.end519 ], !dbg !4673
  br label %cond.end523, !dbg !4673

cond.end523:                                      ; preds = %cond.end521, %cond.true358
  %cond524 = phi i32 [ 23, %cond.true358 ], [ %cond522, %cond.end521 ], !dbg !4673
  br label %cond.end525, !dbg !4673

cond.end525:                                      ; preds = %cond.end523, %cond.true352
  %cond526 = phi i32 [ 24, %cond.true352 ], [ %cond524, %cond.end523 ], !dbg !4673
  br label %cond.end527, !dbg !4673

cond.end527:                                      ; preds = %cond.end525, %cond.true346
  %cond528 = phi i32 [ 25, %cond.true346 ], [ %cond526, %cond.end525 ], !dbg !4673
  br label %cond.end529, !dbg !4673

cond.end529:                                      ; preds = %cond.end527, %cond.true340
  %cond530 = phi i32 [ 26, %cond.true340 ], [ %cond528, %cond.end527 ], !dbg !4673
  br label %cond.end531, !dbg !4673

cond.end531:                                      ; preds = %cond.end529, %cond.true334
  %cond532 = phi i32 [ 27, %cond.true334 ], [ %cond530, %cond.end529 ], !dbg !4673
  br label %cond.end533, !dbg !4673

cond.end533:                                      ; preds = %cond.end531, %cond.true328
  %cond534 = phi i32 [ 28, %cond.true328 ], [ %cond532, %cond.end531 ], !dbg !4673
  br label %cond.end535, !dbg !4673

cond.end535:                                      ; preds = %cond.end533, %cond.true322
  %cond536 = phi i32 [ 29, %cond.true322 ], [ %cond534, %cond.end533 ], !dbg !4673
  br label %cond.end537, !dbg !4673

cond.end537:                                      ; preds = %cond.end535, %cond.true316
  %cond538 = phi i32 [ 30, %cond.true316 ], [ %cond536, %cond.end535 ], !dbg !4673
  br label %cond.end539, !dbg !4673

cond.end539:                                      ; preds = %cond.end537, %cond.true310
  %cond540 = phi i32 [ 31, %cond.true310 ], [ %cond538, %cond.end537 ], !dbg !4673
  br label %cond.end541, !dbg !4673

cond.end541:                                      ; preds = %cond.end539, %cond.true304
  %cond542 = phi i32 [ 32, %cond.true304 ], [ %cond540, %cond.end539 ], !dbg !4673
  br label %cond.end543, !dbg !4673

cond.end543:                                      ; preds = %cond.end541, %cond.true298
  %cond544 = phi i32 [ 33, %cond.true298 ], [ %cond542, %cond.end541 ], !dbg !4673
  br label %cond.end545, !dbg !4673

cond.end545:                                      ; preds = %cond.end543, %cond.true292
  %cond546 = phi i32 [ 34, %cond.true292 ], [ %cond544, %cond.end543 ], !dbg !4673
  br label %cond.end547, !dbg !4673

cond.end547:                                      ; preds = %cond.end545, %cond.true286
  %cond548 = phi i32 [ 35, %cond.true286 ], [ %cond546, %cond.end545 ], !dbg !4673
  br label %cond.end549, !dbg !4673

cond.end549:                                      ; preds = %cond.end547, %cond.true280
  %cond550 = phi i32 [ 36, %cond.true280 ], [ %cond548, %cond.end547 ], !dbg !4673
  br label %cond.end551, !dbg !4673

cond.end551:                                      ; preds = %cond.end549, %cond.true274
  %cond552 = phi i32 [ 37, %cond.true274 ], [ %cond550, %cond.end549 ], !dbg !4673
  br label %cond.end553, !dbg !4673

cond.end553:                                      ; preds = %cond.end551, %cond.true268
  %cond554 = phi i32 [ 38, %cond.true268 ], [ %cond552, %cond.end551 ], !dbg !4673
  br label %cond.end555, !dbg !4673

cond.end555:                                      ; preds = %cond.end553, %cond.true262
  %cond556 = phi i32 [ 39, %cond.true262 ], [ %cond554, %cond.end553 ], !dbg !4673
  br label %cond.end557, !dbg !4673

cond.end557:                                      ; preds = %cond.end555, %cond.true256
  %cond558 = phi i32 [ 40, %cond.true256 ], [ %cond556, %cond.end555 ], !dbg !4673
  br label %cond.end559, !dbg !4673

cond.end559:                                      ; preds = %cond.end557, %cond.true250
  %cond560 = phi i32 [ 41, %cond.true250 ], [ %cond558, %cond.end557 ], !dbg !4673
  br label %cond.end561, !dbg !4673

cond.end561:                                      ; preds = %cond.end559, %cond.true244
  %cond562 = phi i32 [ 42, %cond.true244 ], [ %cond560, %cond.end559 ], !dbg !4673
  br label %cond.end563, !dbg !4673

cond.end563:                                      ; preds = %cond.end561, %cond.true238
  %cond564 = phi i32 [ 43, %cond.true238 ], [ %cond562, %cond.end561 ], !dbg !4673
  br label %cond.end565, !dbg !4673

cond.end565:                                      ; preds = %cond.end563, %cond.true232
  %cond566 = phi i32 [ 44, %cond.true232 ], [ %cond564, %cond.end563 ], !dbg !4673
  br label %cond.end567, !dbg !4673

cond.end567:                                      ; preds = %cond.end565, %cond.true226
  %cond568 = phi i32 [ 45, %cond.true226 ], [ %cond566, %cond.end565 ], !dbg !4673
  br label %cond.end569, !dbg !4673

cond.end569:                                      ; preds = %cond.end567, %cond.true220
  %cond570 = phi i32 [ 46, %cond.true220 ], [ %cond568, %cond.end567 ], !dbg !4673
  br label %cond.end571, !dbg !4673

cond.end571:                                      ; preds = %cond.end569, %cond.true214
  %cond572 = phi i32 [ 47, %cond.true214 ], [ %cond570, %cond.end569 ], !dbg !4673
  br label %cond.end573, !dbg !4673

cond.end573:                                      ; preds = %cond.end571, %cond.true208
  %cond574 = phi i32 [ 48, %cond.true208 ], [ %cond572, %cond.end571 ], !dbg !4673
  br label %cond.end575, !dbg !4673

cond.end575:                                      ; preds = %cond.end573, %cond.true202
  %cond576 = phi i32 [ 49, %cond.true202 ], [ %cond574, %cond.end573 ], !dbg !4673
  br label %cond.end577, !dbg !4673

cond.end577:                                      ; preds = %cond.end575, %cond.true196
  %cond578 = phi i32 [ 50, %cond.true196 ], [ %cond576, %cond.end575 ], !dbg !4673
  br label %cond.end579, !dbg !4673

cond.end579:                                      ; preds = %cond.end577, %cond.true190
  %cond580 = phi i32 [ 51, %cond.true190 ], [ %cond578, %cond.end577 ], !dbg !4673
  br label %cond.end581, !dbg !4673

cond.end581:                                      ; preds = %cond.end579, %cond.true184
  %cond582 = phi i32 [ 52, %cond.true184 ], [ %cond580, %cond.end579 ], !dbg !4673
  br label %cond.end583, !dbg !4673

cond.end583:                                      ; preds = %cond.end581, %cond.true178
  %cond584 = phi i32 [ 53, %cond.true178 ], [ %cond582, %cond.end581 ], !dbg !4673
  br label %cond.end585, !dbg !4673

cond.end585:                                      ; preds = %cond.end583, %cond.true172
  %cond586 = phi i32 [ 54, %cond.true172 ], [ %cond584, %cond.end583 ], !dbg !4673
  br label %cond.end587, !dbg !4673

cond.end587:                                      ; preds = %cond.end585, %cond.true166
  %cond588 = phi i32 [ 55, %cond.true166 ], [ %cond586, %cond.end585 ], !dbg !4673
  br label %cond.end589, !dbg !4673

cond.end589:                                      ; preds = %cond.end587, %cond.true160
  %cond590 = phi i32 [ 56, %cond.true160 ], [ %cond588, %cond.end587 ], !dbg !4673
  br label %cond.end591, !dbg !4673

cond.end591:                                      ; preds = %cond.end589, %cond.true154
  %cond592 = phi i32 [ 57, %cond.true154 ], [ %cond590, %cond.end589 ], !dbg !4673
  br label %cond.end593, !dbg !4673

cond.end593:                                      ; preds = %cond.end591, %cond.true148
  %cond594 = phi i32 [ 58, %cond.true148 ], [ %cond592, %cond.end591 ], !dbg !4673
  br label %cond.end595, !dbg !4673

cond.end595:                                      ; preds = %cond.end593, %cond.true142
  %cond596 = phi i32 [ 59, %cond.true142 ], [ %cond594, %cond.end593 ], !dbg !4673
  br label %cond.end597, !dbg !4673

cond.end597:                                      ; preds = %cond.end595, %cond.true136
  %cond598 = phi i32 [ 60, %cond.true136 ], [ %cond596, %cond.end595 ], !dbg !4673
  br label %cond.end599, !dbg !4673

cond.end599:                                      ; preds = %cond.end597, %cond.true130
  %cond600 = phi i32 [ 61, %cond.true130 ], [ %cond598, %cond.end597 ], !dbg !4673
  br label %cond.end601, !dbg !4673

cond.end601:                                      ; preds = %cond.end599, %cond.true124
  %cond602 = phi i32 [ 62, %cond.true124 ], [ %cond600, %cond.end599 ], !dbg !4673
  br label %cond.end603, !dbg !4673

cond.end603:                                      ; preds = %cond.end601, %cond.true118
  %cond604 = phi i32 [ 63, %cond.true118 ], [ %cond602, %cond.end601 ], !dbg !4673
  br label %cond.end605, !dbg !4673

cond.end605:                                      ; preds = %cond.end603, %cond.true114
  %cond606 = phi i32 [ 0, %cond.true114 ], [ %cond604, %cond.end603 ], !dbg !4673
  br label %cond.end608, !dbg !4673

cond.false607:                                    ; preds = %cond.true
  br label %cond.end608, !dbg !4673

cond.end608:                                      ; preds = %cond.false607, %cond.end605
  %cond609 = phi i32 [ %cond606, %cond.end605 ], [ -1, %cond.false607 ], !dbg !4673
  br label %cond.end613, !dbg !4673

cond.false610:                                    ; preds = %if.then107
  %245 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4673
  %reg_stride611 = getelementptr inbounds %struct.regmap, %struct.regmap* %245, i32 0, i32 37, !dbg !4673
  %246 = load i32, i32* %reg_stride611, align 4, !dbg !4673
  %call612 = call i32 @__ilog2_u32(i32 %246) #12, !dbg !4673
  br label %cond.end613, !dbg !4673

cond.end613:                                      ; preds = %cond.false610, %cond.end608
  %cond614 = phi i32 [ %cond609, %cond.end608 ], [ %call612, %cond.false610 ], !dbg !4673
  %247 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4674
  %reg_stride_order = getelementptr inbounds %struct.regmap, %struct.regmap* %247, i32 0, i32 38, !dbg !4675
  store i32 %cond614, i32* %reg_stride_order, align 8, !dbg !4676
  br label %if.end617, !dbg !4674

if.else615:                                       ; preds = %if.end103
  %248 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4677
  %reg_stride_order616 = getelementptr inbounds %struct.regmap, %struct.regmap* %248, i32 0, i32 38, !dbg !4678
  store i32 -1, i32* %reg_stride_order616, align 8, !dbg !4679
  br label %if.end617

if.end617:                                        ; preds = %if.else615, %cond.end613
  %249 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4680
  %use_single_read = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %249, i32 0, i32 33, !dbg !4681
  %250 = load i8, i8* %use_single_read, align 1, !dbg !4681
  %tobool618 = trunc i8 %250 to i1, !dbg !4681
  br i1 %tobool618, label %lor.end, label %lor.lhs.false620, !dbg !4682

lor.lhs.false620:                                 ; preds = %if.end617
  %251 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4683
  %tobool621 = icmp ne %struct.regmap_bus* %251, null, !dbg !4683
  br i1 %tobool621, label %lor.rhs, label %lor.end, !dbg !4684

lor.rhs:                                          ; preds = %lor.lhs.false620
  %252 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4685
  %read = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %252, i32 0, i32 6, !dbg !4686
  %253 = load i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64)** %read, align 8, !dbg !4686
  %tobool622 = icmp ne i32 (i8*, i8*, i64, i8*, i64)* %253, null, !dbg !4687
  %lnot = xor i1 %tobool622, true, !dbg !4687
  br label %lor.end, !dbg !4684

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false620, %if.end617
  %254 = phi i1 [ true, %lor.lhs.false620 ], [ true, %if.end617 ], [ %lnot, %lor.rhs ]
  %255 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4688
  %use_single_read623 = getelementptr inbounds %struct.regmap, %struct.regmap* %255, i32 0, i32 55, !dbg !4689
  %frombool624 = zext i1 %254 to i8, !dbg !4690
  store i8 %frombool624, i8* %use_single_read623, align 4, !dbg !4690
  %256 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4691
  %use_single_write = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %256, i32 0, i32 34, !dbg !4692
  %257 = load i8, i8* %use_single_write, align 2, !dbg !4692
  %tobool625 = trunc i8 %257 to i1, !dbg !4692
  br i1 %tobool625, label %lor.end632, label %lor.lhs.false627, !dbg !4693

lor.lhs.false627:                                 ; preds = %lor.end
  %258 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4694
  %tobool628 = icmp ne %struct.regmap_bus* %258, null, !dbg !4694
  br i1 %tobool628, label %lor.rhs629, label %lor.end632, !dbg !4695

lor.rhs629:                                       ; preds = %lor.lhs.false627
  %259 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4696
  %write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %259, i32 0, i32 1, !dbg !4697
  %260 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %write, align 8, !dbg !4697
  %tobool630 = icmp ne i32 (i8*, i8*, i64)* %260, null, !dbg !4698
  %lnot631 = xor i1 %tobool630, true, !dbg !4698
  br label %lor.end632, !dbg !4695

lor.end632:                                       ; preds = %lor.rhs629, %lor.lhs.false627, %lor.end
  %261 = phi i1 [ true, %lor.lhs.false627 ], [ true, %lor.end ], [ %lnot631, %lor.rhs629 ]
  %262 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4699
  %use_single_write633 = getelementptr inbounds %struct.regmap, %struct.regmap* %262, i32 0, i32 56, !dbg !4700
  %frombool634 = zext i1 %261 to i8, !dbg !4701
  store i8 %frombool634, i8* %use_single_write633, align 1, !dbg !4701
  %263 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4702
  %can_multi_write = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %263, i32 0, i32 35, !dbg !4703
  %264 = load i8, i8* %can_multi_write, align 1, !dbg !4703
  %tobool635 = trunc i8 %264 to i1, !dbg !4703
  br i1 %tobool635, label %land.lhs.true637, label %land.end, !dbg !4704

land.lhs.true637:                                 ; preds = %lor.end632
  %265 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4705
  %tobool638 = icmp ne %struct.regmap_bus* %265, null, !dbg !4705
  br i1 %tobool638, label %land.rhs, label %land.end, !dbg !4706

land.rhs:                                         ; preds = %land.lhs.true637
  %266 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4707
  %write639 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %266, i32 0, i32 1, !dbg !4708
  %267 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %write639, align 8, !dbg !4708
  %tobool640 = icmp ne i32 (i8*, i8*, i64)* %267, null, !dbg !4706
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true637, %lor.end632
  %268 = phi i1 [ false, %land.lhs.true637 ], [ false, %lor.end632 ], [ %tobool640, %land.rhs ], !dbg !4709
  %269 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4710
  %can_multi_write641 = getelementptr inbounds %struct.regmap, %struct.regmap* %269, i32 0, i32 57, !dbg !4711
  %frombool642 = zext i1 %268 to i8, !dbg !4712
  store i8 %frombool642, i8* %can_multi_write641, align 2, !dbg !4712
  %270 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4713
  %tobool643 = icmp ne %struct.regmap_bus* %270, null, !dbg !4713
  br i1 %tobool643, label %if.then644, label %if.end647, !dbg !4715

if.then644:                                       ; preds = %land.end
  %271 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4716
  %max_raw_read = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %271, i32 0, i32 13, !dbg !4718
  %272 = load i64, i64* %max_raw_read, align 8, !dbg !4718
  %273 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4719
  %max_raw_read645 = getelementptr inbounds %struct.regmap, %struct.regmap* %273, i32 0, i32 58, !dbg !4720
  store i64 %272, i64* %max_raw_read645, align 8, !dbg !4721
  %274 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4722
  %max_raw_write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %274, i32 0, i32 14, !dbg !4723
  %275 = load i64, i64* %max_raw_write, align 8, !dbg !4723
  %276 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4724
  %max_raw_write646 = getelementptr inbounds %struct.regmap, %struct.regmap* %276, i32 0, i32 59, !dbg !4725
  store i64 %275, i64* %max_raw_write646, align 8, !dbg !4726
  br label %if.end647, !dbg !4727

if.end647:                                        ; preds = %if.then644, %land.end
  %277 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !4728
  %278 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4729
  %dev648 = getelementptr inbounds %struct.regmap, %struct.regmap* %278, i32 0, i32 5, !dbg !4730
  store %struct.device* %277, %struct.device** %dev648, align 8, !dbg !4731
  %279 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4732
  %280 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4733
  %bus649 = getelementptr inbounds %struct.regmap, %struct.regmap* %280, i32 0, i32 8, !dbg !4734
  store %struct.regmap_bus* %279, %struct.regmap_bus** %bus649, align 8, !dbg !4735
  %281 = load i8*, i8** %bus_context.addr, align 8, !dbg !4736
  %282 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4737
  %bus_context650 = getelementptr inbounds %struct.regmap, %struct.regmap* %282, i32 0, i32 9, !dbg !4738
  store i8* %281, i8** %bus_context650, align 8, !dbg !4739
  %283 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4740
  %max_register = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %283, i32 0, i32 18, !dbg !4741
  %284 = load i32, i32* %max_register, align 4, !dbg !4741
  %285 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4742
  %max_register651 = getelementptr inbounds %struct.regmap, %struct.regmap* %285, i32 0, i32 17, !dbg !4743
  store i32 %284, i32* %max_register651, align 4, !dbg !4744
  %286 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4745
  %wr_table = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %286, i32 0, i32 19, !dbg !4746
  %287 = load %struct.regmap_access_table*, %struct.regmap_access_table** %wr_table, align 8, !dbg !4746
  %288 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4747
  %wr_table652 = getelementptr inbounds %struct.regmap, %struct.regmap* %288, i32 0, i32 24, !dbg !4748
  store %struct.regmap_access_table* %287, %struct.regmap_access_table** %wr_table652, align 8, !dbg !4749
  %289 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4750
  %rd_table = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %289, i32 0, i32 20, !dbg !4751
  %290 = load %struct.regmap_access_table*, %struct.regmap_access_table** %rd_table, align 8, !dbg !4751
  %291 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4752
  %rd_table653 = getelementptr inbounds %struct.regmap, %struct.regmap* %291, i32 0, i32 25, !dbg !4753
  store %struct.regmap_access_table* %290, %struct.regmap_access_table** %rd_table653, align 8, !dbg !4754
  %292 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4755
  %volatile_table = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %292, i32 0, i32 21, !dbg !4756
  %293 = load %struct.regmap_access_table*, %struct.regmap_access_table** %volatile_table, align 8, !dbg !4756
  %294 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4757
  %volatile_table654 = getelementptr inbounds %struct.regmap, %struct.regmap* %294, i32 0, i32 26, !dbg !4758
  store %struct.regmap_access_table* %293, %struct.regmap_access_table** %volatile_table654, align 8, !dbg !4759
  %295 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4760
  %precious_table = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %295, i32 0, i32 22, !dbg !4761
  %296 = load %struct.regmap_access_table*, %struct.regmap_access_table** %precious_table, align 8, !dbg !4761
  %297 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4762
  %precious_table655 = getelementptr inbounds %struct.regmap, %struct.regmap* %297, i32 0, i32 27, !dbg !4763
  store %struct.regmap_access_table* %296, %struct.regmap_access_table** %precious_table655, align 8, !dbg !4764
  %298 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4765
  %wr_noinc_table = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %298, i32 0, i32 23, !dbg !4766
  %299 = load %struct.regmap_access_table*, %struct.regmap_access_table** %wr_noinc_table, align 8, !dbg !4766
  %300 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4767
  %wr_noinc_table656 = getelementptr inbounds %struct.regmap, %struct.regmap* %300, i32 0, i32 28, !dbg !4768
  store %struct.regmap_access_table* %299, %struct.regmap_access_table** %wr_noinc_table656, align 8, !dbg !4769
  %301 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4770
  %rd_noinc_table = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %301, i32 0, i32 24, !dbg !4771
  %302 = load %struct.regmap_access_table*, %struct.regmap_access_table** %rd_noinc_table, align 8, !dbg !4771
  %303 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4772
  %rd_noinc_table657 = getelementptr inbounds %struct.regmap, %struct.regmap* %303, i32 0, i32 29, !dbg !4773
  store %struct.regmap_access_table* %302, %struct.regmap_access_table** %rd_noinc_table657, align 8, !dbg !4774
  %304 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4775
  %writeable_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %304, i32 0, i32 5, !dbg !4776
  %305 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_reg, align 8, !dbg !4776
  %306 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4777
  %writeable_reg658 = getelementptr inbounds %struct.regmap, %struct.regmap* %306, i32 0, i32 18, !dbg !4778
  store i1 (%struct.device*, i32)* %305, i1 (%struct.device*, i32)** %writeable_reg658, align 8, !dbg !4779
  %307 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4780
  %readable_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %307, i32 0, i32 6, !dbg !4781
  %308 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %readable_reg, align 8, !dbg !4781
  %309 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4782
  %readable_reg659 = getelementptr inbounds %struct.regmap, %struct.regmap* %309, i32 0, i32 19, !dbg !4783
  store i1 (%struct.device*, i32)* %308, i1 (%struct.device*, i32)** %readable_reg659, align 8, !dbg !4784
  %310 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4785
  %volatile_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %310, i32 0, i32 7, !dbg !4786
  %311 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %volatile_reg, align 8, !dbg !4786
  %312 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4787
  %volatile_reg660 = getelementptr inbounds %struct.regmap, %struct.regmap* %312, i32 0, i32 20, !dbg !4788
  store i1 (%struct.device*, i32)* %311, i1 (%struct.device*, i32)** %volatile_reg660, align 8, !dbg !4789
  %313 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4790
  %precious_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %313, i32 0, i32 8, !dbg !4791
  %314 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %precious_reg, align 8, !dbg !4791
  %315 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4792
  %precious_reg661 = getelementptr inbounds %struct.regmap, %struct.regmap* %315, i32 0, i32 21, !dbg !4793
  store i1 (%struct.device*, i32)* %314, i1 (%struct.device*, i32)** %precious_reg661, align 8, !dbg !4794
  %316 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4795
  %writeable_noinc_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %316, i32 0, i32 9, !dbg !4796
  %317 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_noinc_reg, align 8, !dbg !4796
  %318 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4797
  %writeable_noinc_reg662 = getelementptr inbounds %struct.regmap, %struct.regmap* %318, i32 0, i32 22, !dbg !4798
  store i1 (%struct.device*, i32)* %317, i1 (%struct.device*, i32)** %writeable_noinc_reg662, align 8, !dbg !4799
  %319 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4800
  %readable_noinc_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %319, i32 0, i32 10, !dbg !4801
  %320 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %readable_noinc_reg, align 8, !dbg !4801
  %321 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4802
  %readable_noinc_reg663 = getelementptr inbounds %struct.regmap, %struct.regmap* %321, i32 0, i32 23, !dbg !4803
  store i1 (%struct.device*, i32)* %320, i1 (%struct.device*, i32)** %readable_noinc_reg663, align 8, !dbg !4804
  %322 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4805
  %cache_type = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %322, i32 0, i32 27, !dbg !4806
  %323 = load i32, i32* %cache_type, align 4, !dbg !4806
  %324 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4807
  %cache_type664 = getelementptr inbounds %struct.regmap, %struct.regmap* %324, i32 0, i32 40, !dbg !4808
  store i32 %323, i32* %cache_type664, align 8, !dbg !4809
  br label %do.body665, !dbg !4810

do.body665:                                       ; preds = %if.end647
  %325 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4811
  %async_lock = getelementptr inbounds %struct.regmap, %struct.regmap* %325, i32 0, i32 12, !dbg !4811
  store %struct.spinlock* %async_lock, %struct.spinlock** %lock.addr.i1070, align 8
  %326 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i1070, align 8, !dbg !4812
  %327 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %326, i32 0, i32 0, !dbg !4813
  %rlock.i1071 = bitcast %union.anon.0* %327 to %struct.raw_spinlock*, !dbg !4813
  %328 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4811
  %async_lock667 = getelementptr inbounds %struct.regmap, %struct.regmap* %328, i32 0, i32 12, !dbg !4811
  %329 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %.compoundliteral668, i32 0, i32 0, !dbg !4811
  %rlock669 = bitcast %union.anon.0* %329 to %struct.raw_spinlock*, !dbg !4811
  %330 = bitcast %struct.spinlock* %async_lock667 to i8*, !dbg !4811
  %331 = bitcast %struct.spinlock* %.compoundliteral668 to i8*, !dbg !4811
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %330, i8* align 1 %331, i64 0, i1 false), !dbg !4811
  br label %do.end670, !dbg !4811

do.end670:                                        ; preds = %do.body665
  %332 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4814
  %async_list = getelementptr inbounds %struct.regmap, %struct.regmap* %332, i32 0, i32 14, !dbg !4815
  call void @INIT_LIST_HEAD(%struct.list_head* %async_list) #11, !dbg !4816
  %333 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4817
  %async_free = getelementptr inbounds %struct.regmap, %struct.regmap* %333, i32 0, i32 15, !dbg !4818
  call void @INIT_LIST_HEAD(%struct.list_head* %async_free) #11, !dbg !4819
  br label %do.body671, !dbg !4820

do.body671:                                       ; preds = %do.end670
  %334 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4821
  %async_waitq = getelementptr inbounds %struct.regmap, %struct.regmap* %334, i32 0, i32 13, !dbg !4821
  call void @__init_waitqueue_head(%struct.wait_queue_head* %async_waitq, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), %struct.lock_class_key* @__regmap_init.__key.4) #11, !dbg !4821
  br label %do.end672, !dbg !4821

do.end672:                                        ; preds = %do.body671
  %335 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4823
  %read_flag_mask = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %335, i32 0, i32 30, !dbg !4825
  %336 = load i64, i64* %read_flag_mask, align 8, !dbg !4825
  %tobool673 = icmp ne i64 %336, 0, !dbg !4823
  br i1 %tobool673, label %if.then679, label %lor.lhs.false674, !dbg !4826

lor.lhs.false674:                                 ; preds = %do.end672
  %337 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4827
  %write_flag_mask = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %337, i32 0, i32 31, !dbg !4828
  %338 = load i64, i64* %write_flag_mask, align 8, !dbg !4828
  %tobool675 = icmp ne i64 %338, 0, !dbg !4827
  br i1 %tobool675, label %if.then679, label %lor.lhs.false676, !dbg !4829

lor.lhs.false676:                                 ; preds = %lor.lhs.false674
  %339 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4830
  %zero_flag_mask = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %339, i32 0, i32 32, !dbg !4831
  %340 = load i8, i8* %zero_flag_mask, align 8, !dbg !4831
  %tobool677 = trunc i8 %340 to i1, !dbg !4831
  br i1 %tobool677, label %if.then679, label %if.else684, !dbg !4832

if.then679:                                       ; preds = %lor.lhs.false676, %lor.lhs.false674, %do.end672
  %341 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4833
  %read_flag_mask680 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %341, i32 0, i32 30, !dbg !4835
  %342 = load i64, i64* %read_flag_mask680, align 8, !dbg !4835
  %343 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4836
  %read_flag_mask681 = getelementptr inbounds %struct.regmap, %struct.regmap* %343, i32 0, i32 34, !dbg !4837
  store i64 %342, i64* %read_flag_mask681, align 8, !dbg !4838
  %344 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4839
  %write_flag_mask682 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %344, i32 0, i32 31, !dbg !4840
  %345 = load i64, i64* %write_flag_mask682, align 8, !dbg !4840
  %346 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4841
  %write_flag_mask683 = getelementptr inbounds %struct.regmap, %struct.regmap* %346, i32 0, i32 35, !dbg !4842
  store i64 %345, i64* %write_flag_mask683, align 8, !dbg !4843
  br label %if.end691, !dbg !4844

if.else684:                                       ; preds = %lor.lhs.false676
  %347 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4845
  %tobool685 = icmp ne %struct.regmap_bus* %347, null, !dbg !4845
  br i1 %tobool685, label %if.then686, label %if.end690, !dbg !4847

if.then686:                                       ; preds = %if.else684
  %348 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4848
  %read_flag_mask687 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %348, i32 0, i32 10, !dbg !4850
  %349 = load i8, i8* %read_flag_mask687, align 8, !dbg !4850
  %conv688 = zext i8 %349 to i64, !dbg !4848
  %350 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4851
  %read_flag_mask689 = getelementptr inbounds %struct.regmap, %struct.regmap* %350, i32 0, i32 34, !dbg !4852
  store i64 %conv688, i64* %read_flag_mask689, align 8, !dbg !4853
  br label %if.end690, !dbg !4854

if.end690:                                        ; preds = %if.then686, %if.else684
  br label %if.end691

if.end691:                                        ; preds = %if.end690, %if.then679
  %351 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4855
  %tobool692 = icmp ne %struct.regmap_bus* %351, null, !dbg !4855
  br i1 %tobool692, label %if.else696, label %if.then693, !dbg !4857

if.then693:                                       ; preds = %if.end691
  %352 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4858
  %reg_read = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %352, i32 0, i32 15, !dbg !4860
  %353 = load i32 (i8*, i32, i32*)*, i32 (i8*, i32, i32*)** %reg_read, align 8, !dbg !4860
  %354 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4861
  %reg_read694 = getelementptr inbounds %struct.regmap, %struct.regmap* %354, i32 0, i32 30, !dbg !4862
  store i32 (i8*, i32, i32*)* %353, i32 (i8*, i32, i32*)** %reg_read694, align 8, !dbg !4863
  %355 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4864
  %reg_write = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %355, i32 0, i32 16, !dbg !4865
  %356 = load i32 (i8*, i32, i32)*, i32 (i8*, i32, i32)** %reg_write, align 8, !dbg !4865
  %357 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4866
  %reg_write695 = getelementptr inbounds %struct.regmap, %struct.regmap* %357, i32 0, i32 31, !dbg !4867
  store i32 (i8*, i32, i32)* %356, i32 (i8*, i32, i32)** %reg_write695, align 8, !dbg !4868
  %358 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4869
  %defer_caching = getelementptr inbounds %struct.regmap, %struct.regmap* %358, i32 0, i32 33, !dbg !4870
  store i8 0, i8* %defer_caching, align 8, !dbg !4871
  br label %skip_format_initialization, !dbg !4872

if.else696:                                       ; preds = %if.end691
  %359 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4873
  %read697 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %359, i32 0, i32 6, !dbg !4875
  %360 = load i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64)** %read697, align 8, !dbg !4875
  %tobool698 = icmp ne i32 (i8*, i8*, i64, i8*, i64)* %360, null, !dbg !4873
  br i1 %tobool698, label %lor.lhs.false699, label %if.then702, !dbg !4876

lor.lhs.false699:                                 ; preds = %if.else696
  %361 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4877
  %write700 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %361, i32 0, i32 1, !dbg !4878
  %362 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %write700, align 8, !dbg !4878
  %tobool701 = icmp ne i32 (i8*, i8*, i64)* %362, null, !dbg !4877
  br i1 %tobool701, label %if.else707, label %if.then702, !dbg !4879

if.then702:                                       ; preds = %lor.lhs.false699, %if.else696
  %363 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4880
  %reg_read703 = getelementptr inbounds %struct.regmap, %struct.regmap* %363, i32 0, i32 30, !dbg !4882
  store i32 (i8*, i32, i32*)* @_regmap_bus_reg_read, i32 (i8*, i32, i32*)** %reg_read703, align 8, !dbg !4883
  %364 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4884
  %reg_write704 = getelementptr inbounds %struct.regmap, %struct.regmap* %364, i32 0, i32 31, !dbg !4885
  store i32 (i8*, i32, i32)* @_regmap_bus_reg_write, i32 (i8*, i32, i32)** %reg_write704, align 8, !dbg !4886
  %365 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4887
  %reg_update_bits = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %365, i32 0, i32 5, !dbg !4888
  %366 = load i32 (i8*, i32, i32, i32)*, i32 (i8*, i32, i32, i32)** %reg_update_bits, align 8, !dbg !4888
  %367 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4889
  %reg_update_bits705 = getelementptr inbounds %struct.regmap, %struct.regmap* %367, i32 0, i32 32, !dbg !4890
  store i32 (i8*, i32, i32, i32)* %366, i32 (i8*, i32, i32, i32)** %reg_update_bits705, align 8, !dbg !4891
  %368 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4892
  %defer_caching706 = getelementptr inbounds %struct.regmap, %struct.regmap* %368, i32 0, i32 33, !dbg !4893
  store i8 0, i8* %defer_caching706, align 8, !dbg !4894
  br label %skip_format_initialization, !dbg !4895

if.else707:                                       ; preds = %lor.lhs.false699
  %369 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4896
  %reg_read708 = getelementptr inbounds %struct.regmap, %struct.regmap* %369, i32 0, i32 30, !dbg !4898
  store i32 (i8*, i32, i32*)* @_regmap_bus_read, i32 (i8*, i32, i32*)** %reg_read708, align 8, !dbg !4899
  %370 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4900
  %reg_update_bits709 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %370, i32 0, i32 5, !dbg !4901
  %371 = load i32 (i8*, i32, i32, i32)*, i32 (i8*, i32, i32, i32)** %reg_update_bits709, align 8, !dbg !4901
  %372 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4902
  %reg_update_bits710 = getelementptr inbounds %struct.regmap, %struct.regmap* %372, i32 0, i32 32, !dbg !4903
  store i32 (i8*, i32, i32, i32)* %371, i32 (i8*, i32, i32, i32)** %reg_update_bits710, align 8, !dbg !4904
  br label %if.end711

if.end711:                                        ; preds = %if.else707
  br label %if.end712

if.end712:                                        ; preds = %if.end711
  %373 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4905
  %374 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4906
  %call713 = call i32 @regmap_get_reg_endian(%struct.regmap_bus* %373, %struct.regmap_config* %374) #11, !dbg !4907
  store i32 %call713, i32* %reg_endian, align 4, !dbg !4908
  %375 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !4909
  %376 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !4910
  %377 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4911
  %call714 = call i32 @regmap_get_val_endian(%struct.device* %375, %struct.regmap_bus* %376, %struct.regmap_config* %377) #11, !dbg !4912
  store i32 %call714, i32* %val_endian, align 4, !dbg !4913
  %378 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4914
  %reg_bits715 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %378, i32 0, i32 1, !dbg !4915
  %379 = load i32, i32* %reg_bits715, align 8, !dbg !4915
  %380 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4916
  %reg_shift716 = getelementptr inbounds %struct.regmap, %struct.regmap* %380, i32 0, i32 36, !dbg !4917
  %381 = load i32, i32* %reg_shift716, align 8, !dbg !4917
  %add717 = add i32 %379, %381, !dbg !4918
  switch i32 %add717, label %sw.default797 [
    i32 2, label %sw.bb718
    i32 4, label %sw.bb724
    i32 7, label %sw.bb731
    i32 10, label %sw.bb738
    i32 12, label %sw.bb745
    i32 8, label %sw.bb752
    i32 16, label %sw.bb754
    i32 24, label %sw.bb766
    i32 32, label %sw.bb773
    i32 64, label %sw.bb785
  ], !dbg !4919

sw.bb718:                                         ; preds = %if.end712
  %382 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4920
  %val_bits719 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %382, i32 0, i32 4, !dbg !4922
  %383 = load i32, i32* %val_bits719, align 4, !dbg !4922
  switch i32 %383, label %sw.default722 [
    i32 6, label %sw.bb720
  ], !dbg !4923

sw.bb720:                                         ; preds = %sw.bb718
  %384 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4924
  %format721 = getelementptr inbounds %struct.regmap, %struct.regmap* %384, i32 0, i32 7, !dbg !4926
  %format_write = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format721, i32 0, i32 4, !dbg !4927
  store void (%struct.regmap*, i32, i32)* @regmap_format_2_6_write, void (%struct.regmap*, i32, i32)** %format_write, align 8, !dbg !4928
  br label %sw.epilog723, !dbg !4929

sw.default722:                                    ; preds = %sw.bb718
  br label %err_hwlock, !dbg !4930

sw.epilog723:                                     ; preds = %sw.bb720
  br label %sw.epilog798, !dbg !4931

sw.bb724:                                         ; preds = %if.end712
  %385 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4932
  %val_bits725 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %385, i32 0, i32 4, !dbg !4933
  %386 = load i32, i32* %val_bits725, align 4, !dbg !4933
  switch i32 %386, label %sw.default729 [
    i32 12, label %sw.bb726
  ], !dbg !4934

sw.bb726:                                         ; preds = %sw.bb724
  %387 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4935
  %format727 = getelementptr inbounds %struct.regmap, %struct.regmap* %387, i32 0, i32 7, !dbg !4937
  %format_write728 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format727, i32 0, i32 4, !dbg !4938
  store void (%struct.regmap*, i32, i32)* @regmap_format_4_12_write, void (%struct.regmap*, i32, i32)** %format_write728, align 8, !dbg !4939
  br label %sw.epilog730, !dbg !4940

sw.default729:                                    ; preds = %sw.bb724
  br label %err_hwlock, !dbg !4941

sw.epilog730:                                     ; preds = %sw.bb726
  br label %sw.epilog798, !dbg !4942

sw.bb731:                                         ; preds = %if.end712
  %388 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4943
  %val_bits732 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %388, i32 0, i32 4, !dbg !4944
  %389 = load i32, i32* %val_bits732, align 4, !dbg !4944
  switch i32 %389, label %sw.default736 [
    i32 9, label %sw.bb733
  ], !dbg !4945

sw.bb733:                                         ; preds = %sw.bb731
  %390 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4946
  %format734 = getelementptr inbounds %struct.regmap, %struct.regmap* %390, i32 0, i32 7, !dbg !4948
  %format_write735 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format734, i32 0, i32 4, !dbg !4949
  store void (%struct.regmap*, i32, i32)* @regmap_format_7_9_write, void (%struct.regmap*, i32, i32)** %format_write735, align 8, !dbg !4950
  br label %sw.epilog737, !dbg !4951

sw.default736:                                    ; preds = %sw.bb731
  br label %err_hwlock, !dbg !4952

sw.epilog737:                                     ; preds = %sw.bb733
  br label %sw.epilog798, !dbg !4953

sw.bb738:                                         ; preds = %if.end712
  %391 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4954
  %val_bits739 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %391, i32 0, i32 4, !dbg !4955
  %392 = load i32, i32* %val_bits739, align 4, !dbg !4955
  switch i32 %392, label %sw.default743 [
    i32 14, label %sw.bb740
  ], !dbg !4956

sw.bb740:                                         ; preds = %sw.bb738
  %393 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4957
  %format741 = getelementptr inbounds %struct.regmap, %struct.regmap* %393, i32 0, i32 7, !dbg !4959
  %format_write742 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format741, i32 0, i32 4, !dbg !4960
  store void (%struct.regmap*, i32, i32)* @regmap_format_10_14_write, void (%struct.regmap*, i32, i32)** %format_write742, align 8, !dbg !4961
  br label %sw.epilog744, !dbg !4962

sw.default743:                                    ; preds = %sw.bb738
  br label %err_hwlock, !dbg !4963

sw.epilog744:                                     ; preds = %sw.bb740
  br label %sw.epilog798, !dbg !4964

sw.bb745:                                         ; preds = %if.end712
  %394 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !4965
  %val_bits746 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %394, i32 0, i32 4, !dbg !4966
  %395 = load i32, i32* %val_bits746, align 4, !dbg !4966
  switch i32 %395, label %sw.default750 [
    i32 20, label %sw.bb747
  ], !dbg !4967

sw.bb747:                                         ; preds = %sw.bb745
  %396 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4968
  %format748 = getelementptr inbounds %struct.regmap, %struct.regmap* %396, i32 0, i32 7, !dbg !4970
  %format_write749 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format748, i32 0, i32 4, !dbg !4971
  store void (%struct.regmap*, i32, i32)* @regmap_format_12_20_write, void (%struct.regmap*, i32, i32)** %format_write749, align 8, !dbg !4972
  br label %sw.epilog751, !dbg !4973

sw.default750:                                    ; preds = %sw.bb745
  br label %err_hwlock, !dbg !4974

sw.epilog751:                                     ; preds = %sw.bb747
  br label %sw.epilog798, !dbg !4975

sw.bb752:                                         ; preds = %if.end712
  %397 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4976
  %format753 = getelementptr inbounds %struct.regmap, %struct.regmap* %397, i32 0, i32 7, !dbg !4977
  %format_reg = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format753, i32 0, i32 5, !dbg !4978
  store void (i8*, i32, i32)* @regmap_format_8, void (i8*, i32, i32)** %format_reg, align 8, !dbg !4979
  br label %sw.epilog798, !dbg !4980

sw.bb754:                                         ; preds = %if.end712
  %398 = load i32, i32* %reg_endian, align 4, !dbg !4981
  switch i32 %398, label %sw.default764 [
    i32 1, label %sw.bb755
    i32 2, label %sw.bb758
    i32 3, label %sw.bb761
  ], !dbg !4982

sw.bb755:                                         ; preds = %sw.bb754
  %399 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4983
  %format756 = getelementptr inbounds %struct.regmap, %struct.regmap* %399, i32 0, i32 7, !dbg !4985
  %format_reg757 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format756, i32 0, i32 5, !dbg !4986
  store void (i8*, i32, i32)* @regmap_format_16_be, void (i8*, i32, i32)** %format_reg757, align 8, !dbg !4987
  br label %sw.epilog765, !dbg !4988

sw.bb758:                                         ; preds = %sw.bb754
  %400 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4989
  %format759 = getelementptr inbounds %struct.regmap, %struct.regmap* %400, i32 0, i32 7, !dbg !4990
  %format_reg760 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format759, i32 0, i32 5, !dbg !4991
  store void (i8*, i32, i32)* @regmap_format_16_le, void (i8*, i32, i32)** %format_reg760, align 8, !dbg !4992
  br label %sw.epilog765, !dbg !4993

sw.bb761:                                         ; preds = %sw.bb754
  %401 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !4994
  %format762 = getelementptr inbounds %struct.regmap, %struct.regmap* %401, i32 0, i32 7, !dbg !4995
  %format_reg763 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format762, i32 0, i32 5, !dbg !4996
  store void (i8*, i32, i32)* @regmap_format_16_native, void (i8*, i32, i32)** %format_reg763, align 8, !dbg !4997
  br label %sw.epilog765, !dbg !4998

sw.default764:                                    ; preds = %sw.bb754
  br label %err_hwlock, !dbg !4999

sw.epilog765:                                     ; preds = %sw.bb761, %sw.bb758, %sw.bb755
  br label %sw.epilog798, !dbg !5000

sw.bb766:                                         ; preds = %if.end712
  %402 = load i32, i32* %reg_endian, align 4, !dbg !5001
  %cmp767 = icmp ne i32 %402, 1, !dbg !5003
  br i1 %cmp767, label %if.then769, label %if.end770, !dbg !5004

if.then769:                                       ; preds = %sw.bb766
  br label %err_hwlock, !dbg !5005

if.end770:                                        ; preds = %sw.bb766
  %403 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5006
  %format771 = getelementptr inbounds %struct.regmap, %struct.regmap* %403, i32 0, i32 7, !dbg !5007
  %format_reg772 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format771, i32 0, i32 5, !dbg !5008
  store void (i8*, i32, i32)* @regmap_format_24, void (i8*, i32, i32)** %format_reg772, align 8, !dbg !5009
  br label %sw.epilog798, !dbg !5010

sw.bb773:                                         ; preds = %if.end712
  %404 = load i32, i32* %reg_endian, align 4, !dbg !5011
  switch i32 %404, label %sw.default783 [
    i32 1, label %sw.bb774
    i32 2, label %sw.bb777
    i32 3, label %sw.bb780
  ], !dbg !5012

sw.bb774:                                         ; preds = %sw.bb773
  %405 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5013
  %format775 = getelementptr inbounds %struct.regmap, %struct.regmap* %405, i32 0, i32 7, !dbg !5015
  %format_reg776 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format775, i32 0, i32 5, !dbg !5016
  store void (i8*, i32, i32)* @regmap_format_32_be, void (i8*, i32, i32)** %format_reg776, align 8, !dbg !5017
  br label %sw.epilog784, !dbg !5018

sw.bb777:                                         ; preds = %sw.bb773
  %406 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5019
  %format778 = getelementptr inbounds %struct.regmap, %struct.regmap* %406, i32 0, i32 7, !dbg !5020
  %format_reg779 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format778, i32 0, i32 5, !dbg !5021
  store void (i8*, i32, i32)* @regmap_format_32_le, void (i8*, i32, i32)** %format_reg779, align 8, !dbg !5022
  br label %sw.epilog784, !dbg !5023

sw.bb780:                                         ; preds = %sw.bb773
  %407 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5024
  %format781 = getelementptr inbounds %struct.regmap, %struct.regmap* %407, i32 0, i32 7, !dbg !5025
  %format_reg782 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format781, i32 0, i32 5, !dbg !5026
  store void (i8*, i32, i32)* @regmap_format_32_native, void (i8*, i32, i32)** %format_reg782, align 8, !dbg !5027
  br label %sw.epilog784, !dbg !5028

sw.default783:                                    ; preds = %sw.bb773
  br label %err_hwlock, !dbg !5029

sw.epilog784:                                     ; preds = %sw.bb780, %sw.bb777, %sw.bb774
  br label %sw.epilog798, !dbg !5030

sw.bb785:                                         ; preds = %if.end712
  %408 = load i32, i32* %reg_endian, align 4, !dbg !5031
  switch i32 %408, label %sw.default795 [
    i32 1, label %sw.bb786
    i32 2, label %sw.bb789
    i32 3, label %sw.bb792
  ], !dbg !5032

sw.bb786:                                         ; preds = %sw.bb785
  %409 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5033
  %format787 = getelementptr inbounds %struct.regmap, %struct.regmap* %409, i32 0, i32 7, !dbg !5035
  %format_reg788 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format787, i32 0, i32 5, !dbg !5036
  store void (i8*, i32, i32)* @regmap_format_64_be, void (i8*, i32, i32)** %format_reg788, align 8, !dbg !5037
  br label %sw.epilog796, !dbg !5038

sw.bb789:                                         ; preds = %sw.bb785
  %410 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5039
  %format790 = getelementptr inbounds %struct.regmap, %struct.regmap* %410, i32 0, i32 7, !dbg !5040
  %format_reg791 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format790, i32 0, i32 5, !dbg !5041
  store void (i8*, i32, i32)* @regmap_format_64_le, void (i8*, i32, i32)** %format_reg791, align 8, !dbg !5042
  br label %sw.epilog796, !dbg !5043

sw.bb792:                                         ; preds = %sw.bb785
  %411 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5044
  %format793 = getelementptr inbounds %struct.regmap, %struct.regmap* %411, i32 0, i32 7, !dbg !5045
  %format_reg794 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format793, i32 0, i32 5, !dbg !5046
  store void (i8*, i32, i32)* @regmap_format_64_native, void (i8*, i32, i32)** %format_reg794, align 8, !dbg !5047
  br label %sw.epilog796, !dbg !5048

sw.default795:                                    ; preds = %sw.bb785
  br label %err_hwlock, !dbg !5049

sw.epilog796:                                     ; preds = %sw.bb792, %sw.bb789, %sw.bb786
  br label %sw.epilog798, !dbg !5050

sw.default797:                                    ; preds = %if.end712
  br label %err_hwlock, !dbg !5051

sw.epilog798:                                     ; preds = %sw.epilog796, %sw.epilog784, %if.end770, %sw.epilog765, %sw.bb752, %sw.epilog751, %sw.epilog744, %sw.epilog737, %sw.epilog730, %sw.epilog723
  %412 = load i32, i32* %val_endian, align 4, !dbg !5052
  %cmp799 = icmp eq i32 %412, 3, !dbg !5054
  br i1 %cmp799, label %if.then801, label %if.end803, !dbg !5055

if.then801:                                       ; preds = %sw.epilog798
  %413 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5056
  %format802 = getelementptr inbounds %struct.regmap, %struct.regmap* %413, i32 0, i32 7, !dbg !5057
  %parse_inplace = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format802, i32 0, i32 8, !dbg !5058
  store void (i8*)* @regmap_parse_inplace_noop, void (i8*)** %parse_inplace, align 8, !dbg !5059
  br label %if.end803, !dbg !5056

if.end803:                                        ; preds = %if.then801, %sw.epilog798
  %414 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !5060
  %val_bits804 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %414, i32 0, i32 4, !dbg !5061
  %415 = load i32, i32* %val_bits804, align 4, !dbg !5061
  switch i32 %415, label %sw.epilog885 [
    i32 8, label %sw.bb805
    i32 16, label %sw.bb810
    i32 24, label %sw.bb832
    i32 32, label %sw.bb841
    i32 64, label %sw.bb863
  ], !dbg !5062

sw.bb805:                                         ; preds = %if.end803
  %416 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5063
  %format806 = getelementptr inbounds %struct.regmap, %struct.regmap* %416, i32 0, i32 7, !dbg !5065
  %format_val = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format806, i32 0, i32 6, !dbg !5066
  store void (i8*, i32, i32)* @regmap_format_8, void (i8*, i32, i32)** %format_val, align 8, !dbg !5067
  %417 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5068
  %format807 = getelementptr inbounds %struct.regmap, %struct.regmap* %417, i32 0, i32 7, !dbg !5069
  %parse_val = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format807, i32 0, i32 7, !dbg !5070
  store i32 (i8*)* @regmap_parse_8, i32 (i8*)** %parse_val, align 8, !dbg !5071
  %418 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5072
  %format808 = getelementptr inbounds %struct.regmap, %struct.regmap* %418, i32 0, i32 7, !dbg !5073
  %parse_inplace809 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format808, i32 0, i32 8, !dbg !5074
  store void (i8*)* @regmap_parse_inplace_noop, void (i8*)** %parse_inplace809, align 8, !dbg !5075
  br label %sw.epilog885, !dbg !5076

sw.bb810:                                         ; preds = %if.end803
  %419 = load i32, i32* %val_endian, align 4, !dbg !5077
  switch i32 %419, label %sw.default830 [
    i32 1, label %sw.bb811
    i32 2, label %sw.bb818
    i32 3, label %sw.bb825
  ], !dbg !5078

sw.bb811:                                         ; preds = %sw.bb810
  %420 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5079
  %format812 = getelementptr inbounds %struct.regmap, %struct.regmap* %420, i32 0, i32 7, !dbg !5081
  %format_val813 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format812, i32 0, i32 6, !dbg !5082
  store void (i8*, i32, i32)* @regmap_format_16_be, void (i8*, i32, i32)** %format_val813, align 8, !dbg !5083
  %421 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5084
  %format814 = getelementptr inbounds %struct.regmap, %struct.regmap* %421, i32 0, i32 7, !dbg !5085
  %parse_val815 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format814, i32 0, i32 7, !dbg !5086
  store i32 (i8*)* @regmap_parse_16_be, i32 (i8*)** %parse_val815, align 8, !dbg !5087
  %422 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5088
  %format816 = getelementptr inbounds %struct.regmap, %struct.regmap* %422, i32 0, i32 7, !dbg !5089
  %parse_inplace817 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format816, i32 0, i32 8, !dbg !5090
  store void (i8*)* @regmap_parse_16_be_inplace, void (i8*)** %parse_inplace817, align 8, !dbg !5091
  br label %sw.epilog831, !dbg !5092

sw.bb818:                                         ; preds = %sw.bb810
  %423 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5093
  %format819 = getelementptr inbounds %struct.regmap, %struct.regmap* %423, i32 0, i32 7, !dbg !5094
  %format_val820 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format819, i32 0, i32 6, !dbg !5095
  store void (i8*, i32, i32)* @regmap_format_16_le, void (i8*, i32, i32)** %format_val820, align 8, !dbg !5096
  %424 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5097
  %format821 = getelementptr inbounds %struct.regmap, %struct.regmap* %424, i32 0, i32 7, !dbg !5098
  %parse_val822 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format821, i32 0, i32 7, !dbg !5099
  store i32 (i8*)* @regmap_parse_16_le, i32 (i8*)** %parse_val822, align 8, !dbg !5100
  %425 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5101
  %format823 = getelementptr inbounds %struct.regmap, %struct.regmap* %425, i32 0, i32 7, !dbg !5102
  %parse_inplace824 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format823, i32 0, i32 8, !dbg !5103
  store void (i8*)* @regmap_parse_16_le_inplace, void (i8*)** %parse_inplace824, align 8, !dbg !5104
  br label %sw.epilog831, !dbg !5105

sw.bb825:                                         ; preds = %sw.bb810
  %426 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5106
  %format826 = getelementptr inbounds %struct.regmap, %struct.regmap* %426, i32 0, i32 7, !dbg !5107
  %format_val827 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format826, i32 0, i32 6, !dbg !5108
  store void (i8*, i32, i32)* @regmap_format_16_native, void (i8*, i32, i32)** %format_val827, align 8, !dbg !5109
  %427 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5110
  %format828 = getelementptr inbounds %struct.regmap, %struct.regmap* %427, i32 0, i32 7, !dbg !5111
  %parse_val829 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format828, i32 0, i32 7, !dbg !5112
  store i32 (i8*)* @regmap_parse_16_native, i32 (i8*)** %parse_val829, align 8, !dbg !5113
  br label %sw.epilog831, !dbg !5114

sw.default830:                                    ; preds = %sw.bb810
  br label %err_hwlock, !dbg !5115

sw.epilog831:                                     ; preds = %sw.bb825, %sw.bb818, %sw.bb811
  br label %sw.epilog885, !dbg !5116

sw.bb832:                                         ; preds = %if.end803
  %428 = load i32, i32* %val_endian, align 4, !dbg !5117
  %cmp833 = icmp ne i32 %428, 1, !dbg !5119
  br i1 %cmp833, label %if.then835, label %if.end836, !dbg !5120

if.then835:                                       ; preds = %sw.bb832
  br label %err_hwlock, !dbg !5121

if.end836:                                        ; preds = %sw.bb832
  %429 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5122
  %format837 = getelementptr inbounds %struct.regmap, %struct.regmap* %429, i32 0, i32 7, !dbg !5123
  %format_val838 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format837, i32 0, i32 6, !dbg !5124
  store void (i8*, i32, i32)* @regmap_format_24, void (i8*, i32, i32)** %format_val838, align 8, !dbg !5125
  %430 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5126
  %format839 = getelementptr inbounds %struct.regmap, %struct.regmap* %430, i32 0, i32 7, !dbg !5127
  %parse_val840 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format839, i32 0, i32 7, !dbg !5128
  store i32 (i8*)* @regmap_parse_24, i32 (i8*)** %parse_val840, align 8, !dbg !5129
  br label %sw.epilog885, !dbg !5130

sw.bb841:                                         ; preds = %if.end803
  %431 = load i32, i32* %val_endian, align 4, !dbg !5131
  switch i32 %431, label %sw.default861 [
    i32 1, label %sw.bb842
    i32 2, label %sw.bb849
    i32 3, label %sw.bb856
  ], !dbg !5132

sw.bb842:                                         ; preds = %sw.bb841
  %432 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5133
  %format843 = getelementptr inbounds %struct.regmap, %struct.regmap* %432, i32 0, i32 7, !dbg !5135
  %format_val844 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format843, i32 0, i32 6, !dbg !5136
  store void (i8*, i32, i32)* @regmap_format_32_be, void (i8*, i32, i32)** %format_val844, align 8, !dbg !5137
  %433 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5138
  %format845 = getelementptr inbounds %struct.regmap, %struct.regmap* %433, i32 0, i32 7, !dbg !5139
  %parse_val846 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format845, i32 0, i32 7, !dbg !5140
  store i32 (i8*)* @regmap_parse_32_be, i32 (i8*)** %parse_val846, align 8, !dbg !5141
  %434 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5142
  %format847 = getelementptr inbounds %struct.regmap, %struct.regmap* %434, i32 0, i32 7, !dbg !5143
  %parse_inplace848 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format847, i32 0, i32 8, !dbg !5144
  store void (i8*)* @regmap_parse_32_be_inplace, void (i8*)** %parse_inplace848, align 8, !dbg !5145
  br label %sw.epilog862, !dbg !5146

sw.bb849:                                         ; preds = %sw.bb841
  %435 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5147
  %format850 = getelementptr inbounds %struct.regmap, %struct.regmap* %435, i32 0, i32 7, !dbg !5148
  %format_val851 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format850, i32 0, i32 6, !dbg !5149
  store void (i8*, i32, i32)* @regmap_format_32_le, void (i8*, i32, i32)** %format_val851, align 8, !dbg !5150
  %436 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5151
  %format852 = getelementptr inbounds %struct.regmap, %struct.regmap* %436, i32 0, i32 7, !dbg !5152
  %parse_val853 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format852, i32 0, i32 7, !dbg !5153
  store i32 (i8*)* @regmap_parse_32_le, i32 (i8*)** %parse_val853, align 8, !dbg !5154
  %437 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5155
  %format854 = getelementptr inbounds %struct.regmap, %struct.regmap* %437, i32 0, i32 7, !dbg !5156
  %parse_inplace855 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format854, i32 0, i32 8, !dbg !5157
  store void (i8*)* @regmap_parse_32_le_inplace, void (i8*)** %parse_inplace855, align 8, !dbg !5158
  br label %sw.epilog862, !dbg !5159

sw.bb856:                                         ; preds = %sw.bb841
  %438 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5160
  %format857 = getelementptr inbounds %struct.regmap, %struct.regmap* %438, i32 0, i32 7, !dbg !5161
  %format_val858 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format857, i32 0, i32 6, !dbg !5162
  store void (i8*, i32, i32)* @regmap_format_32_native, void (i8*, i32, i32)** %format_val858, align 8, !dbg !5163
  %439 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5164
  %format859 = getelementptr inbounds %struct.regmap, %struct.regmap* %439, i32 0, i32 7, !dbg !5165
  %parse_val860 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format859, i32 0, i32 7, !dbg !5166
  store i32 (i8*)* @regmap_parse_32_native, i32 (i8*)** %parse_val860, align 8, !dbg !5167
  br label %sw.epilog862, !dbg !5168

sw.default861:                                    ; preds = %sw.bb841
  br label %err_hwlock, !dbg !5169

sw.epilog862:                                     ; preds = %sw.bb856, %sw.bb849, %sw.bb842
  br label %sw.epilog885, !dbg !5170

sw.bb863:                                         ; preds = %if.end803
  %440 = load i32, i32* %val_endian, align 4, !dbg !5171
  switch i32 %440, label %sw.default883 [
    i32 1, label %sw.bb864
    i32 2, label %sw.bb871
    i32 3, label %sw.bb878
  ], !dbg !5172

sw.bb864:                                         ; preds = %sw.bb863
  %441 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5173
  %format865 = getelementptr inbounds %struct.regmap, %struct.regmap* %441, i32 0, i32 7, !dbg !5175
  %format_val866 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format865, i32 0, i32 6, !dbg !5176
  store void (i8*, i32, i32)* @regmap_format_64_be, void (i8*, i32, i32)** %format_val866, align 8, !dbg !5177
  %442 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5178
  %format867 = getelementptr inbounds %struct.regmap, %struct.regmap* %442, i32 0, i32 7, !dbg !5179
  %parse_val868 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format867, i32 0, i32 7, !dbg !5180
  store i32 (i8*)* @regmap_parse_64_be, i32 (i8*)** %parse_val868, align 8, !dbg !5181
  %443 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5182
  %format869 = getelementptr inbounds %struct.regmap, %struct.regmap* %443, i32 0, i32 7, !dbg !5183
  %parse_inplace870 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format869, i32 0, i32 8, !dbg !5184
  store void (i8*)* @regmap_parse_64_be_inplace, void (i8*)** %parse_inplace870, align 8, !dbg !5185
  br label %sw.epilog884, !dbg !5186

sw.bb871:                                         ; preds = %sw.bb863
  %444 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5187
  %format872 = getelementptr inbounds %struct.regmap, %struct.regmap* %444, i32 0, i32 7, !dbg !5188
  %format_val873 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format872, i32 0, i32 6, !dbg !5189
  store void (i8*, i32, i32)* @regmap_format_64_le, void (i8*, i32, i32)** %format_val873, align 8, !dbg !5190
  %445 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5191
  %format874 = getelementptr inbounds %struct.regmap, %struct.regmap* %445, i32 0, i32 7, !dbg !5192
  %parse_val875 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format874, i32 0, i32 7, !dbg !5193
  store i32 (i8*)* @regmap_parse_64_le, i32 (i8*)** %parse_val875, align 8, !dbg !5194
  %446 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5195
  %format876 = getelementptr inbounds %struct.regmap, %struct.regmap* %446, i32 0, i32 7, !dbg !5196
  %parse_inplace877 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format876, i32 0, i32 8, !dbg !5197
  store void (i8*)* @regmap_parse_64_le_inplace, void (i8*)** %parse_inplace877, align 8, !dbg !5198
  br label %sw.epilog884, !dbg !5199

sw.bb878:                                         ; preds = %sw.bb863
  %447 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5200
  %format879 = getelementptr inbounds %struct.regmap, %struct.regmap* %447, i32 0, i32 7, !dbg !5201
  %format_val880 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format879, i32 0, i32 6, !dbg !5202
  store void (i8*, i32, i32)* @regmap_format_64_native, void (i8*, i32, i32)** %format_val880, align 8, !dbg !5203
  %448 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5204
  %format881 = getelementptr inbounds %struct.regmap, %struct.regmap* %448, i32 0, i32 7, !dbg !5205
  %parse_val882 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format881, i32 0, i32 7, !dbg !5206
  store i32 (i8*)* @regmap_parse_64_native, i32 (i8*)** %parse_val882, align 8, !dbg !5207
  br label %sw.epilog884, !dbg !5208

sw.default883:                                    ; preds = %sw.bb863
  br label %err_hwlock, !dbg !5209

sw.epilog884:                                     ; preds = %sw.bb878, %sw.bb871, %sw.bb864
  br label %sw.epilog885, !dbg !5210

sw.epilog885:                                     ; preds = %if.end803, %sw.epilog884, %sw.epilog862, %if.end836, %sw.epilog831, %sw.bb805
  %449 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5211
  %format886 = getelementptr inbounds %struct.regmap, %struct.regmap* %449, i32 0, i32 7, !dbg !5213
  %format_write887 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format886, i32 0, i32 4, !dbg !5214
  %450 = load void (%struct.regmap*, i32, i32)*, void (%struct.regmap*, i32, i32)** %format_write887, align 8, !dbg !5214
  %tobool888 = icmp ne void (%struct.regmap*, i32, i32)* %450, null, !dbg !5211
  br i1 %tobool888, label %if.then889, label %if.end898, !dbg !5215

if.then889:                                       ; preds = %sw.epilog885
  %451 = load i32, i32* %reg_endian, align 4, !dbg !5216
  %cmp890 = icmp ne i32 %451, 1, !dbg !5219
  br i1 %cmp890, label %if.then895, label %lor.lhs.false892, !dbg !5220

lor.lhs.false892:                                 ; preds = %if.then889
  %452 = load i32, i32* %val_endian, align 4, !dbg !5221
  %cmp893 = icmp ne i32 %452, 1, !dbg !5222
  br i1 %cmp893, label %if.then895, label %if.end896, !dbg !5223

if.then895:                                       ; preds = %lor.lhs.false892, %if.then889
  br label %err_hwlock, !dbg !5224

if.end896:                                        ; preds = %lor.lhs.false892
  %453 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5225
  %use_single_write897 = getelementptr inbounds %struct.regmap, %struct.regmap* %453, i32 0, i32 56, !dbg !5226
  store i8 1, i8* %use_single_write897, align 1, !dbg !5227
  br label %if.end898, !dbg !5228

if.end898:                                        ; preds = %if.end896, %sw.epilog885
  %454 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5229
  %format899 = getelementptr inbounds %struct.regmap, %struct.regmap* %454, i32 0, i32 7, !dbg !5231
  %format_write900 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format899, i32 0, i32 4, !dbg !5232
  %455 = load void (%struct.regmap*, i32, i32)*, void (%struct.regmap*, i32, i32)** %format_write900, align 8, !dbg !5232
  %tobool901 = icmp ne void (%struct.regmap*, i32, i32)* %455, null, !dbg !5229
  br i1 %tobool901, label %if.end911, label %land.lhs.true902, !dbg !5233

land.lhs.true902:                                 ; preds = %if.end898
  %456 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5234
  %format903 = getelementptr inbounds %struct.regmap, %struct.regmap* %456, i32 0, i32 7, !dbg !5235
  %format_reg904 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format903, i32 0, i32 5, !dbg !5236
  %457 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_reg904, align 8, !dbg !5236
  %tobool905 = icmp ne void (i8*, i32, i32)* %457, null, !dbg !5234
  br i1 %tobool905, label %land.lhs.true906, label %if.then910, !dbg !5237

land.lhs.true906:                                 ; preds = %land.lhs.true902
  %458 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5238
  %format907 = getelementptr inbounds %struct.regmap, %struct.regmap* %458, i32 0, i32 7, !dbg !5239
  %format_val908 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format907, i32 0, i32 6, !dbg !5240
  %459 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_val908, align 8, !dbg !5240
  %tobool909 = icmp ne void (i8*, i32, i32)* %459, null, !dbg !5238
  br i1 %tobool909, label %if.end911, label %if.then910, !dbg !5241

if.then910:                                       ; preds = %land.lhs.true906, %land.lhs.true902
  br label %err_hwlock, !dbg !5242

if.end911:                                        ; preds = %land.lhs.true906, %if.end898
  %460 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5243
  %format912 = getelementptr inbounds %struct.regmap, %struct.regmap* %460, i32 0, i32 7, !dbg !5244
  %buf_size913 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format912, i32 0, i32 0, !dbg !5245
  %461 = load i64, i64* %buf_size913, align 8, !dbg !5245
  %call914 = call i8* @kzalloc(i64 %461, i32 3264) #11, !dbg !5246
  %462 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5247
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %462, i32 0, i32 6, !dbg !5248
  store i8* %call914, i8** %work_buf, align 8, !dbg !5249
  %463 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5250
  %work_buf915 = getelementptr inbounds %struct.regmap, %struct.regmap* %463, i32 0, i32 6, !dbg !5252
  %464 = load i8*, i8** %work_buf915, align 8, !dbg !5252
  %cmp916 = icmp eq i8* %464, null, !dbg !5253
  br i1 %cmp916, label %if.then918, label %if.end919, !dbg !5254

if.then918:                                       ; preds = %if.end911
  store i32 -12, i32* %ret, align 4, !dbg !5255
  br label %err_hwlock, !dbg !5257

if.end919:                                        ; preds = %if.end911
  %465 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5258
  %format920 = getelementptr inbounds %struct.regmap, %struct.regmap* %465, i32 0, i32 7, !dbg !5260
  %format_write921 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format920, i32 0, i32 4, !dbg !5261
  %466 = load void (%struct.regmap*, i32, i32)*, void (%struct.regmap*, i32, i32)** %format_write921, align 8, !dbg !5261
  %tobool922 = icmp ne void (%struct.regmap*, i32, i32)* %466, null, !dbg !5258
  br i1 %tobool922, label %if.then923, label %if.else926, !dbg !5262

if.then923:                                       ; preds = %if.end919
  %467 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5263
  %defer_caching924 = getelementptr inbounds %struct.regmap, %struct.regmap* %467, i32 0, i32 33, !dbg !5265
  store i8 0, i8* %defer_caching924, align 8, !dbg !5266
  %468 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5267
  %reg_write925 = getelementptr inbounds %struct.regmap, %struct.regmap* %468, i32 0, i32 31, !dbg !5268
  store i32 (i8*, i32, i32)* @_regmap_bus_formatted_write, i32 (i8*, i32, i32)** %reg_write925, align 8, !dbg !5269
  br label %if.end934, !dbg !5270

if.else926:                                       ; preds = %if.end919
  %469 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5271
  %format927 = getelementptr inbounds %struct.regmap, %struct.regmap* %469, i32 0, i32 7, !dbg !5273
  %format_val928 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format927, i32 0, i32 6, !dbg !5274
  %470 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_val928, align 8, !dbg !5274
  %tobool929 = icmp ne void (i8*, i32, i32)* %470, null, !dbg !5271
  br i1 %tobool929, label %if.then930, label %if.end933, !dbg !5275

if.then930:                                       ; preds = %if.else926
  %471 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5276
  %defer_caching931 = getelementptr inbounds %struct.regmap, %struct.regmap* %471, i32 0, i32 33, !dbg !5278
  store i8 1, i8* %defer_caching931, align 8, !dbg !5279
  %472 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5280
  %reg_write932 = getelementptr inbounds %struct.regmap, %struct.regmap* %472, i32 0, i32 31, !dbg !5281
  store i32 (i8*, i32, i32)* @_regmap_bus_raw_write, i32 (i8*, i32, i32)** %reg_write932, align 8, !dbg !5282
  br label %if.end933, !dbg !5283

if.end933:                                        ; preds = %if.then930, %if.else926
  br label %if.end934

if.end934:                                        ; preds = %if.end933, %if.then923
  br label %skip_format_initialization, !dbg !5261

skip_format_initialization:                       ; preds = %if.end934, %if.then702, %if.then693
  call void @llvm.dbg.label(metadata !5284), !dbg !5285
  %473 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5286
  %range_tree = getelementptr inbounds %struct.regmap, %struct.regmap* %473, i32 0, i32 60, !dbg !5287
  %rb_node = getelementptr inbounds %struct.rb_root, %struct.rb_root* %.compoundliteral935, i32 0, i32 0, !dbg !5288
  store %struct.rb_node* null, %struct.rb_node** %rb_node, align 8, !dbg !5288
  %474 = bitcast %struct.rb_root* %range_tree to i8*, !dbg !5288
  %475 = bitcast %struct.rb_root* %.compoundliteral935 to i8*, !dbg !5288
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %474, i8* align 8 %475, i64 8, i1 false), !dbg !5288
  store i32 0, i32* %i, align 4, !dbg !5289
  br label %for.cond, !dbg !5291

for.cond:                                         ; preds = %for.inc1043, %skip_format_initialization
  %476 = load i32, i32* %i, align 4, !dbg !5292
  %477 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !5294
  %num_ranges = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %477, i32 0, i32 39, !dbg !5295
  %478 = load i32, i32* %num_ranges, align 8, !dbg !5295
  %cmp936 = icmp ult i32 %476, %478, !dbg !5296
  br i1 %cmp936, label %for.body, label %for.end1045, !dbg !5297

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.regmap_range_cfg** %range_cfg, metadata !5298, metadata !DIExpression()), !dbg !5300
  %479 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !5301
  %ranges = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %479, i32 0, i32 38, !dbg !5302
  %480 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %ranges, align 8, !dbg !5302
  %481 = load i32, i32* %i, align 4, !dbg !5303
  %idxprom = sext i32 %481 to i64, !dbg !5301
  %arrayidx = getelementptr %struct.regmap_range_cfg, %struct.regmap_range_cfg* %480, i64 %idxprom, !dbg !5301
  store %struct.regmap_range_cfg* %arrayidx, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5300
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %new, metadata !5304, metadata !DIExpression()), !dbg !5305
  %482 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5306
  %range_max = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %482, i32 0, i32 2, !dbg !5308
  %483 = load i32, i32* %range_max, align 4, !dbg !5308
  %484 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5309
  %range_min = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %484, i32 0, i32 1, !dbg !5310
  %485 = load i32, i32* %range_min, align 8, !dbg !5310
  %cmp938 = icmp ult i32 %483, %485, !dbg !5311
  br i1 %cmp938, label %if.then940, label %if.end944, !dbg !5312

if.then940:                                       ; preds = %for.body
  %486 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5313
  %dev941 = getelementptr inbounds %struct.regmap, %struct.regmap* %486, i32 0, i32 5, !dbg !5313
  %487 = load %struct.device*, %struct.device** %dev941, align 8, !dbg !5313
  %488 = load i32, i32* %i, align 4, !dbg !5313
  %489 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5313
  %range_max942 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %489, i32 0, i32 2, !dbg !5313
  %490 = load i32, i32* %range_max942, align 4, !dbg !5313
  %491 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5313
  %range_min943 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %491, i32 0, i32 1, !dbg !5313
  %492 = load i32, i32* %range_min943, align 8, !dbg !5313
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %487, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i32 %488, i32 %490, i32 %492) #13, !dbg !5313
  br label %err_range, !dbg !5315

if.end944:                                        ; preds = %for.body
  %493 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5316
  %range_max945 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %493, i32 0, i32 2, !dbg !5318
  %494 = load i32, i32* %range_max945, align 4, !dbg !5318
  %495 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5319
  %max_register946 = getelementptr inbounds %struct.regmap, %struct.regmap* %495, i32 0, i32 17, !dbg !5320
  %496 = load i32, i32* %max_register946, align 4, !dbg !5320
  %cmp947 = icmp ugt i32 %494, %496, !dbg !5321
  br i1 %cmp947, label %if.then949, label %if.end953, !dbg !5322

if.then949:                                       ; preds = %if.end944
  %497 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5323
  %dev950 = getelementptr inbounds %struct.regmap, %struct.regmap* %497, i32 0, i32 5, !dbg !5323
  %498 = load %struct.device*, %struct.device** %dev950, align 8, !dbg !5323
  %499 = load i32, i32* %i, align 4, !dbg !5323
  %500 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5323
  %range_max951 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %500, i32 0, i32 2, !dbg !5323
  %501 = load i32, i32* %range_max951, align 4, !dbg !5323
  %502 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5323
  %max_register952 = getelementptr inbounds %struct.regmap, %struct.regmap* %502, i32 0, i32 17, !dbg !5323
  %503 = load i32, i32* %max_register952, align 4, !dbg !5323
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %498, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0), i32 %499, i32 %501, i32 %503) #13, !dbg !5323
  br label %err_range, !dbg !5325

if.end953:                                        ; preds = %if.end944
  %504 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5326
  %selector_reg = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %504, i32 0, i32 3, !dbg !5328
  %505 = load i32, i32* %selector_reg, align 8, !dbg !5328
  %506 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5329
  %max_register954 = getelementptr inbounds %struct.regmap, %struct.regmap* %506, i32 0, i32 17, !dbg !5330
  %507 = load i32, i32* %max_register954, align 4, !dbg !5330
  %cmp955 = icmp ugt i32 %505, %507, !dbg !5331
  br i1 %cmp955, label %if.then957, label %if.end959, !dbg !5332

if.then957:                                       ; preds = %if.end953
  %508 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5333
  %dev958 = getelementptr inbounds %struct.regmap, %struct.regmap* %508, i32 0, i32 5, !dbg !5333
  %509 = load %struct.device*, %struct.device** %dev958, align 8, !dbg !5333
  %510 = load i32, i32* %i, align 4, !dbg !5333
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %509, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i32 %510) #13, !dbg !5333
  br label %err_range, !dbg !5335

if.end959:                                        ; preds = %if.end953
  %511 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5336
  %window_len = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %511, i32 0, i32 7, !dbg !5338
  %512 = load i32, i32* %window_len, align 8, !dbg !5338
  %cmp960 = icmp eq i32 %512, 0, !dbg !5339
  br i1 %cmp960, label %if.then962, label %if.end964, !dbg !5340

if.then962:                                       ; preds = %if.end959
  %513 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5341
  %dev963 = getelementptr inbounds %struct.regmap, %struct.regmap* %513, i32 0, i32 5, !dbg !5341
  %514 = load %struct.device*, %struct.device** %dev963, align 8, !dbg !5341
  %515 = load i32, i32* %i, align 4, !dbg !5341
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %514, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i64 0, i64 0), i32 %515) #13, !dbg !5341
  br label %err_range, !dbg !5343

if.end964:                                        ; preds = %if.end959
  store i32 0, i32* %j, align 4, !dbg !5344
  br label %for.cond965, !dbg !5346

for.cond965:                                      ; preds = %for.inc, %if.end964
  %516 = load i32, i32* %j, align 4, !dbg !5347
  %517 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !5349
  %num_ranges966 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %517, i32 0, i32 39, !dbg !5350
  %518 = load i32, i32* %num_ranges966, align 8, !dbg !5350
  %cmp967 = icmp ult i32 %516, %518, !dbg !5351
  br i1 %cmp967, label %for.body969, label %for.end, !dbg !5352

for.body969:                                      ; preds = %for.cond965
  call void @llvm.dbg.declare(metadata i32* %sel_reg, metadata !5353, metadata !DIExpression()), !dbg !5355
  %519 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !5356
  %ranges970 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %519, i32 0, i32 38, !dbg !5357
  %520 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %ranges970, align 8, !dbg !5357
  %521 = load i32, i32* %j, align 4, !dbg !5358
  %idxprom971 = sext i32 %521 to i64, !dbg !5356
  %arrayidx972 = getelementptr %struct.regmap_range_cfg, %struct.regmap_range_cfg* %520, i64 %idxprom971, !dbg !5356
  %selector_reg973 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %arrayidx972, i32 0, i32 3, !dbg !5359
  %522 = load i32, i32* %selector_reg973, align 8, !dbg !5359
  store i32 %522, i32* %sel_reg, align 4, !dbg !5355
  call void @llvm.dbg.declare(metadata i32* %win_min, metadata !5360, metadata !DIExpression()), !dbg !5361
  %523 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !5362
  %ranges974 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %523, i32 0, i32 38, !dbg !5363
  %524 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %ranges974, align 8, !dbg !5363
  %525 = load i32, i32* %j, align 4, !dbg !5364
  %idxprom975 = sext i32 %525 to i64, !dbg !5362
  %arrayidx976 = getelementptr %struct.regmap_range_cfg, %struct.regmap_range_cfg* %524, i64 %idxprom975, !dbg !5362
  %window_start = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %arrayidx976, i32 0, i32 6, !dbg !5365
  %526 = load i32, i32* %window_start, align 4, !dbg !5365
  store i32 %526, i32* %win_min, align 4, !dbg !5361
  call void @llvm.dbg.declare(metadata i32* %win_max, metadata !5366, metadata !DIExpression()), !dbg !5367
  %527 = load i32, i32* %win_min, align 4, !dbg !5368
  %528 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !5369
  %ranges977 = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %528, i32 0, i32 38, !dbg !5370
  %529 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %ranges977, align 8, !dbg !5370
  %530 = load i32, i32* %j, align 4, !dbg !5371
  %idxprom978 = sext i32 %530 to i64, !dbg !5369
  %arrayidx979 = getelementptr %struct.regmap_range_cfg, %struct.regmap_range_cfg* %529, i64 %idxprom978, !dbg !5369
  %window_len980 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %arrayidx979, i32 0, i32 7, !dbg !5372
  %531 = load i32, i32* %window_len980, align 8, !dbg !5372
  %add981 = add i32 %527, %531, !dbg !5373
  %sub982 = sub i32 %add981, 1, !dbg !5374
  store i32 %sub982, i32* %win_max, align 4, !dbg !5367
  %532 = load i32, i32* %j, align 4, !dbg !5375
  %533 = load i32, i32* %i, align 4, !dbg !5377
  %cmp983 = icmp eq i32 %532, %533, !dbg !5378
  br i1 %cmp983, label %if.then985, label %if.end986, !dbg !5379

if.then985:                                       ; preds = %for.body969
  br label %for.inc, !dbg !5380

if.end986:                                        ; preds = %for.body969
  %534 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5381
  %range_min987 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %534, i32 0, i32 1, !dbg !5383
  %535 = load i32, i32* %range_min987, align 8, !dbg !5383
  %536 = load i32, i32* %sel_reg, align 4, !dbg !5384
  %cmp988 = icmp ule i32 %535, %536, !dbg !5385
  br i1 %cmp988, label %land.lhs.true990, label %if.end996, !dbg !5386

land.lhs.true990:                                 ; preds = %if.end986
  %537 = load i32, i32* %sel_reg, align 4, !dbg !5387
  %538 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5388
  %range_max991 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %538, i32 0, i32 2, !dbg !5389
  %539 = load i32, i32* %range_max991, align 4, !dbg !5389
  %cmp992 = icmp ule i32 %537, %539, !dbg !5390
  br i1 %cmp992, label %if.then994, label %if.end996, !dbg !5391

if.then994:                                       ; preds = %land.lhs.true990
  %540 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5392
  %dev995 = getelementptr inbounds %struct.regmap, %struct.regmap* %540, i32 0, i32 5, !dbg !5392
  %541 = load %struct.device*, %struct.device** %dev995, align 8, !dbg !5392
  %542 = load i32, i32* %i, align 4, !dbg !5392
  %543 = load i32, i32* %j, align 4, !dbg !5392
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %541, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.10, i64 0, i64 0), i32 %542, i32 %543) #13, !dbg !5392
  br label %err_range, !dbg !5394

if.end996:                                        ; preds = %land.lhs.true990, %if.end986
  %544 = load i32, i32* %win_max, align 4, !dbg !5395
  %545 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5397
  %range_min997 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %545, i32 0, i32 1, !dbg !5398
  %546 = load i32, i32* %range_min997, align 8, !dbg !5398
  %cmp998 = icmp ult i32 %544, %546, !dbg !5399
  br i1 %cmp998, label %if.end1006, label %lor.lhs.false1000, !dbg !5400

lor.lhs.false1000:                                ; preds = %if.end996
  %547 = load i32, i32* %win_min, align 4, !dbg !5401
  %548 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5402
  %range_max1001 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %548, i32 0, i32 2, !dbg !5403
  %549 = load i32, i32* %range_max1001, align 4, !dbg !5403
  %cmp1002 = icmp ugt i32 %547, %549, !dbg !5404
  br i1 %cmp1002, label %if.end1006, label %if.then1004, !dbg !5405

if.then1004:                                      ; preds = %lor.lhs.false1000
  %550 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5406
  %dev1005 = getelementptr inbounds %struct.regmap, %struct.regmap* %550, i32 0, i32 5, !dbg !5406
  %551 = load %struct.device*, %struct.device** %dev1005, align 8, !dbg !5406
  %552 = load i32, i32* %i, align 4, !dbg !5406
  %553 = load i32, i32* %j, align 4, !dbg !5406
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %551, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.11, i64 0, i64 0), i32 %552, i32 %553) #13, !dbg !5406
  br label %err_range, !dbg !5408

if.end1006:                                       ; preds = %lor.lhs.false1000, %if.end996
  br label %for.inc, !dbg !5409

for.inc:                                          ; preds = %if.end1006, %if.then985
  %554 = load i32, i32* %j, align 4, !dbg !5410
  %inc = add i32 %554, 1, !dbg !5410
  store i32 %inc, i32* %j, align 4, !dbg !5410
  br label %for.cond965, !dbg !5411, !llvm.loop !5412

for.end:                                          ; preds = %for.cond965
  %call1007 = call i8* @kzalloc(i64 72, i32 3264) #11, !dbg !5414
  %555 = bitcast i8* %call1007 to %struct.regmap_range_node*, !dbg !5414
  store %struct.regmap_range_node* %555, %struct.regmap_range_node** %new, align 8, !dbg !5415
  %556 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5416
  %cmp1008 = icmp eq %struct.regmap_range_node* %556, null, !dbg !5418
  br i1 %cmp1008, label %if.then1010, label %if.end1011, !dbg !5419

if.then1010:                                      ; preds = %for.end
  store i32 -12, i32* %ret, align 4, !dbg !5420
  br label %err_range, !dbg !5422

if.end1011:                                       ; preds = %for.end
  %557 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5423
  %558 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5424
  %map1012 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %558, i32 0, i32 2, !dbg !5425
  store %struct.regmap* %557, %struct.regmap** %map1012, align 8, !dbg !5426
  %559 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5427
  %name = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %559, i32 0, i32 0, !dbg !5428
  %560 = load i8*, i8** %name, align 8, !dbg !5428
  %561 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5429
  %name1013 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %561, i32 0, i32 1, !dbg !5430
  store i8* %560, i8** %name1013, align 8, !dbg !5431
  %562 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5432
  %range_min1014 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %562, i32 0, i32 1, !dbg !5433
  %563 = load i32, i32* %range_min1014, align 8, !dbg !5433
  %564 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5434
  %range_min1015 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %564, i32 0, i32 3, !dbg !5435
  store i32 %563, i32* %range_min1015, align 8, !dbg !5436
  %565 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5437
  %range_max1016 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %565, i32 0, i32 2, !dbg !5438
  %566 = load i32, i32* %range_max1016, align 4, !dbg !5438
  %567 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5439
  %range_max1017 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %567, i32 0, i32 4, !dbg !5440
  store i32 %566, i32* %range_max1017, align 4, !dbg !5441
  %568 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5442
  %selector_reg1018 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %568, i32 0, i32 3, !dbg !5443
  %569 = load i32, i32* %selector_reg1018, align 8, !dbg !5443
  %570 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5444
  %selector_reg1019 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %570, i32 0, i32 5, !dbg !5445
  store i32 %569, i32* %selector_reg1019, align 8, !dbg !5446
  %571 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5447
  %selector_mask = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %571, i32 0, i32 4, !dbg !5448
  %572 = load i32, i32* %selector_mask, align 4, !dbg !5448
  %573 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5449
  %selector_mask1020 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %573, i32 0, i32 6, !dbg !5450
  store i32 %572, i32* %selector_mask1020, align 4, !dbg !5451
  %574 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5452
  %selector_shift = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %574, i32 0, i32 5, !dbg !5453
  %575 = load i32, i32* %selector_shift, align 8, !dbg !5453
  %576 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5454
  %selector_shift1021 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %576, i32 0, i32 7, !dbg !5455
  store i32 %575, i32* %selector_shift1021, align 8, !dbg !5456
  %577 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5457
  %window_start1022 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %577, i32 0, i32 6, !dbg !5458
  %578 = load i32, i32* %window_start1022, align 4, !dbg !5458
  %579 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5459
  %window_start1023 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %579, i32 0, i32 8, !dbg !5460
  store i32 %578, i32* %window_start1023, align 4, !dbg !5461
  %580 = load %struct.regmap_range_cfg*, %struct.regmap_range_cfg** %range_cfg, align 8, !dbg !5462
  %window_len1024 = getelementptr inbounds %struct.regmap_range_cfg, %struct.regmap_range_cfg* %580, i32 0, i32 7, !dbg !5463
  %581 = load i32, i32* %window_len1024, align 8, !dbg !5463
  %582 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5464
  %window_len1025 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %582, i32 0, i32 9, !dbg !5465
  store i32 %581, i32* %window_len1025, align 8, !dbg !5466
  %583 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5467
  %584 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5469
  %call1026 = call zeroext i1 @_regmap_range_add(%struct.regmap* %583, %struct.regmap_range_node* %584) #11, !dbg !5470
  br i1 %call1026, label %if.end1029, label %if.then1027, !dbg !5471

if.then1027:                                      ; preds = %if.end1011
  %585 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5472
  %dev1028 = getelementptr inbounds %struct.regmap, %struct.regmap* %585, i32 0, i32 5, !dbg !5472
  %586 = load %struct.device*, %struct.device** %dev1028, align 8, !dbg !5472
  %587 = load i32, i32* %i, align 4, !dbg !5472
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %586, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i32 %587) #13, !dbg !5472
  %588 = load %struct.regmap_range_node*, %struct.regmap_range_node** %new, align 8, !dbg !5474
  %589 = bitcast %struct.regmap_range_node* %588 to i8*, !dbg !5474
  call void @kfree(i8* %589) #11, !dbg !5475
  br label %err_range, !dbg !5476

if.end1029:                                       ; preds = %if.end1011
  %590 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5477
  %selector_work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %590, i32 0, i32 61, !dbg !5479
  %591 = load i8*, i8** %selector_work_buf, align 8, !dbg !5479
  %cmp1030 = icmp eq i8* %591, null, !dbg !5480
  br i1 %cmp1030, label %if.then1032, label %if.end1042, !dbg !5481

if.then1032:                                      ; preds = %if.end1029
  %592 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5482
  %format1033 = getelementptr inbounds %struct.regmap, %struct.regmap* %592, i32 0, i32 7, !dbg !5484
  %buf_size1034 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format1033, i32 0, i32 0, !dbg !5485
  %593 = load i64, i64* %buf_size1034, align 8, !dbg !5485
  %call1035 = call i8* @kzalloc(i64 %593, i32 3264) #11, !dbg !5486
  %594 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5487
  %selector_work_buf1036 = getelementptr inbounds %struct.regmap, %struct.regmap* %594, i32 0, i32 61, !dbg !5488
  store i8* %call1035, i8** %selector_work_buf1036, align 8, !dbg !5489
  %595 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5490
  %selector_work_buf1037 = getelementptr inbounds %struct.regmap, %struct.regmap* %595, i32 0, i32 61, !dbg !5492
  %596 = load i8*, i8** %selector_work_buf1037, align 8, !dbg !5492
  %cmp1038 = icmp eq i8* %596, null, !dbg !5493
  br i1 %cmp1038, label %if.then1040, label %if.end1041, !dbg !5494

if.then1040:                                      ; preds = %if.then1032
  store i32 -12, i32* %ret, align 4, !dbg !5495
  br label %err_range, !dbg !5497

if.end1041:                                       ; preds = %if.then1032
  br label %if.end1042, !dbg !5498

if.end1042:                                       ; preds = %if.end1041, %if.end1029
  br label %for.inc1043, !dbg !5499

for.inc1043:                                      ; preds = %if.end1042
  %597 = load i32, i32* %i, align 4, !dbg !5500
  %inc1044 = add i32 %597, 1, !dbg !5500
  store i32 %inc1044, i32* %i, align 4, !dbg !5500
  br label %for.cond, !dbg !5501, !llvm.loop !5502

for.end1045:                                      ; preds = %for.cond
  %598 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5504
  %599 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !5505
  %call1046 = call i32 @regcache_init(%struct.regmap* %598, %struct.regmap_config* %599) #11, !dbg !5506
  store i32 %call1046, i32* %ret, align 4, !dbg !5507
  %600 = load i32, i32* %ret, align 4, !dbg !5508
  %cmp1047 = icmp ne i32 %600, 0, !dbg !5510
  br i1 %cmp1047, label %if.then1049, label %if.end1050, !dbg !5511

if.then1049:                                      ; preds = %for.end1045
  br label %err_range, !dbg !5512

if.end1050:                                       ; preds = %for.end1045
  %601 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !5513
  %tobool1051 = icmp ne %struct.device* %601, null, !dbg !5513
  br i1 %tobool1051, label %if.then1052, label %if.else1058, !dbg !5515

if.then1052:                                      ; preds = %if.end1050
  %602 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !5516
  %603 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5518
  %604 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !5519
  %call1053 = call i32 @regmap_attach_dev(%struct.device* %602, %struct.regmap* %603, %struct.regmap_config* %604) #11, !dbg !5520
  store i32 %call1053, i32* %ret, align 4, !dbg !5521
  %605 = load i32, i32* %ret, align 4, !dbg !5522
  %cmp1054 = icmp ne i32 %605, 0, !dbg !5524
  br i1 %cmp1054, label %if.then1056, label %if.end1057, !dbg !5525

if.then1056:                                      ; preds = %if.then1052
  br label %err_regcache, !dbg !5526

if.end1057:                                       ; preds = %if.then1052
  br label %if.end1059, !dbg !5527

if.else1058:                                      ; preds = %if.end1050
  %606 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5528
  call void @regmap_debugfs_init(%struct.regmap* %606) #11, !dbg !5530
  br label %if.end1059

if.end1059:                                       ; preds = %if.else1058, %if.end1057
  %607 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5531
  store %struct.regmap* %607, %struct.regmap** %retval, align 8, !dbg !5532
  br label %return, !dbg !5532

err_regcache:                                     ; preds = %if.then1056
  call void @llvm.dbg.label(metadata !5533), !dbg !5534
  %608 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5535
  call void @regcache_exit(%struct.regmap* %608) #11, !dbg !5536
  br label %err_range, !dbg !5536

err_range:                                        ; preds = %err_regcache, %if.then1049, %if.then1040, %if.then1027, %if.then1010, %if.then1004, %if.then994, %if.then962, %if.then957, %if.then949, %if.then940
  call void @llvm.dbg.label(metadata !5537), !dbg !5538
  %609 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5539
  call void @regmap_range_exit(%struct.regmap* %609) #11, !dbg !5540
  %610 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5541
  %work_buf1060 = getelementptr inbounds %struct.regmap, %struct.regmap* %610, i32 0, i32 6, !dbg !5542
  %611 = load i8*, i8** %work_buf1060, align 8, !dbg !5542
  call void @kfree(i8* %611) #11, !dbg !5543
  br label %err_hwlock, !dbg !5543

err_hwlock:                                       ; preds = %err_range, %if.then918, %if.then910, %if.then895, %sw.default883, %sw.default861, %if.then835, %sw.default830, %sw.default797, %sw.default795, %sw.default783, %if.then769, %sw.default764, %sw.default750, %sw.default743, %sw.default736, %sw.default729, %sw.default722
  call void @llvm.dbg.label(metadata !5544), !dbg !5545
  %612 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5546
  %hwlock1061 = getelementptr inbounds %struct.regmap, %struct.regmap* %612, i32 0, i32 62, !dbg !5548
  %613 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock1061, align 8, !dbg !5548
  %tobool1062 = icmp ne %struct.hwspinlock* %613, null, !dbg !5546
  br i1 %tobool1062, label %if.then1063, label %if.end1066, !dbg !5549

if.then1063:                                      ; preds = %err_hwlock
  %614 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5550
  %hwlock1064 = getelementptr inbounds %struct.regmap, %struct.regmap* %614, i32 0, i32 62, !dbg !5551
  %615 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock1064, align 8, !dbg !5551
  %call1065 = call i32 @hwspin_lock_free(%struct.hwspinlock* %615) #11, !dbg !5552
  br label %if.end1066, !dbg !5552

if.end1066:                                       ; preds = %if.then1063, %err_hwlock
  br label %err_name, !dbg !5548

err_name:                                         ; preds = %if.end1066, %if.then31
  call void @llvm.dbg.label(metadata !5553), !dbg !5554
  %616 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5555
  %name1067 = getelementptr inbounds %struct.regmap, %struct.regmap* %616, i32 0, i32 10, !dbg !5556
  %617 = load i8*, i8** %name1067, align 8, !dbg !5556
  call void @kfree_const(i8* %617) #11, !dbg !5557
  br label %err_map, !dbg !5557

err_map:                                          ; preds = %err_name, %if.then5
  call void @llvm.dbg.label(metadata !5558), !dbg !5559
  %618 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5560
  %619 = bitcast %struct.regmap* %618 to i8*, !dbg !5560
  call void @kfree(i8* %619) #11, !dbg !5561
  br label %err, !dbg !5561

err:                                              ; preds = %err_map, %if.then1, %if.then
  call void @llvm.dbg.label(metadata !5562), !dbg !5563
  %620 = load i32, i32* %ret, align 4, !dbg !5564
  %conv1068 = sext i32 %620 to i64, !dbg !5564
  %call1069 = call i8* @ERR_PTR(i64 %conv1068) #11, !dbg !5565
  %621 = bitcast i8* %call1069 to %struct.regmap*, !dbg !5565
  store %struct.regmap* %621, %struct.regmap** %retval, align 8, !dbg !5566
  br label %return, !dbg !5566

return:                                           ; preds = %err, %if.end1059
  %622 = load %struct.regmap*, %struct.regmap** %retval, align 8, !dbg !5567
  ret %struct.regmap* %622, !dbg !5567
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @kzalloc(i64 %size, i32 %flags) #0 !dbg !5568 {
entry:
  %s.addr.i.i = alloca %struct.kmem_cache*, align 8
  call void @llvm.dbg.declare(metadata %struct.kmem_cache** %s.addr.i.i, metadata !5571, metadata !DIExpression()), !dbg !5575
  %flags.addr.i17.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i17.i, metadata !5581, metadata !DIExpression()), !dbg !5582
  %size.addr.i18.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i18.i, metadata !5583, metadata !DIExpression()), !dbg !5584
  %ret.i.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %ret.i.i, metadata !5585, metadata !DIExpression()), !dbg !5586
  %retval.i12.i = alloca i32, align 4
  %flags.addr.i13.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i13.i, metadata !5587, metadata !DIExpression()), !dbg !5591
  %retval.i.i = alloca i32, align 4
  %size.addr.i11.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i11.i, metadata !5593, metadata !DIExpression()), !dbg !5597
  %size.addr.i.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i.i, metadata !5599, metadata !DIExpression()), !dbg !5603
  %flags.addr.i.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i.i, metadata !5608, metadata !DIExpression()), !dbg !5609
  %order.addr.i.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.addr.i.i.i, metadata !5610, metadata !DIExpression()), !dbg !5611
  %size.addr.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i, metadata !5612, metadata !DIExpression()), !dbg !5613
  %flags.addr.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i, metadata !5614, metadata !DIExpression()), !dbg !5615
  %order.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.i.i, metadata !5616, metadata !DIExpression()), !dbg !5617
  %retval.i = alloca i8*, align 8
  %size.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i, metadata !5618, metadata !DIExpression()), !dbg !5619
  %flags.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i, metadata !5620, metadata !DIExpression()), !dbg !5621
  %index.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %index.i, metadata !5622, metadata !DIExpression()), !dbg !5623
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !5624, metadata !DIExpression()), !dbg !5625
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5626, metadata !DIExpression()), !dbg !5627
  %0 = load i64, i64* %size.addr, align 8, !dbg !5628
  %1 = load i32, i32* %flags.addr, align 4, !dbg !5629
  %or = or i32 %1, 256, !dbg !5630
  store i64 %0, i64* %size.addr.i, align 8
  store i32 %or, i32* %flags.addr.i, align 4
  %2 = load i64, i64* %size.addr.i, align 8, !dbg !5631
  %3 = call i1 @llvm.is.constant.i64(i64 %2) #10, !dbg !5632
  br i1 %3, label %if.then.i, label %if.end9.i, !dbg !5633

if.then.i:                                        ; preds = %entry
  %4 = load i64, i64* %size.addr.i, align 8, !dbg !5634
  %cmp.i = icmp ugt i64 %4, 8192, !dbg !5635
  br i1 %cmp.i, label %if.then1.i, label %if.end.i, !dbg !5636

if.then1.i:                                       ; preds = %if.then.i
  %5 = load i64, i64* %size.addr.i, align 8, !dbg !5637
  %6 = load i32, i32* %flags.addr.i, align 4, !dbg !5638
  store i64 %5, i64* %size.addr.i.i, align 8
  store i32 %6, i32* %flags.addr.i.i, align 4
  %7 = load i64, i64* %size.addr.i.i, align 8, !dbg !5639
  %call.i.i = call i32 @get_order(i64 %7) #12, !dbg !5640
  store i32 %call.i.i, i32* %order.i.i, align 4, !dbg !5617
  %8 = load i64, i64* %size.addr.i.i, align 8, !dbg !5641
  %9 = load i32, i32* %flags.addr.i.i, align 4, !dbg !5642
  %10 = load i32, i32* %order.i.i, align 4, !dbg !5643
  store i64 %8, i64* %size.addr.i.i.i, align 8
  store i32 %9, i32* %flags.addr.i.i.i, align 4
  store i32 %10, i32* %order.addr.i.i.i, align 4
  %11 = load i64, i64* %size.addr.i.i.i, align 8, !dbg !5644
  %12 = load i32, i32* %flags.addr.i.i.i, align 4, !dbg !5645
  %13 = load i32, i32* %order.addr.i.i.i, align 4, !dbg !5646
  %call.i.i.i = call noalias i8* @kmalloc_order(i64 %11, i32 %12, i32 %13) #14, !dbg !5647
  %ptrint.i.i.i = ptrtoint i8* %call.i.i.i to i64, !dbg !5647
  %maskedptr.i.i.i = and i64 %ptrint.i.i.i, 4095, !dbg !5647
  %maskcond.i.i.i = icmp eq i64 %maskedptr.i.i.i, 0, !dbg !5647
  call void @llvm.assume(i1 %maskcond.i.i.i) #10, !dbg !5647
  store i8* %call.i.i.i, i8** %retval.i, align 8, !dbg !5648
  br label %kmalloc.exit, !dbg !5648

if.end.i:                                         ; preds = %if.then.i
  %14 = load i64, i64* %size.addr.i, align 8, !dbg !5649
  store i64 %14, i64* %size.addr.i11.i, align 8
  %15 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5650
  %tobool.i.i = icmp ne i64 %15, 0, !dbg !5650
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i, !dbg !5652

if.then.i.i:                                      ; preds = %if.end.i
  store i32 0, i32* %retval.i.i, align 4, !dbg !5653
  br label %kmalloc_index.exit.i, !dbg !5653

if.end.i.i:                                       ; preds = %if.end.i
  %16 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5654
  %cmp.i.i = icmp ule i64 %16, 8, !dbg !5656
  br i1 %cmp.i.i, label %if.then1.i.i, label %if.end2.i.i, !dbg !5657

if.then1.i.i:                                     ; preds = %if.end.i.i
  store i32 3, i32* %retval.i.i, align 4, !dbg !5658
  br label %kmalloc_index.exit.i, !dbg !5658

if.end2.i.i:                                      ; preds = %if.end.i.i
  %17 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5659
  %cmp3.i.i = icmp ugt i64 %17, 64, !dbg !5661
  br i1 %cmp3.i.i, label %land.lhs.true.i.i, label %if.end6.i.i, !dbg !5662

land.lhs.true.i.i:                                ; preds = %if.end2.i.i
  %18 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5663
  %cmp4.i.i = icmp ule i64 %18, 96, !dbg !5664
  br i1 %cmp4.i.i, label %if.then5.i.i, label %if.end6.i.i, !dbg !5665

if.then5.i.i:                                     ; preds = %land.lhs.true.i.i
  store i32 1, i32* %retval.i.i, align 4, !dbg !5666
  br label %kmalloc_index.exit.i, !dbg !5666

if.end6.i.i:                                      ; preds = %land.lhs.true.i.i, %if.end2.i.i
  %19 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5667
  %cmp7.i.i = icmp ugt i64 %19, 128, !dbg !5669
  br i1 %cmp7.i.i, label %land.lhs.true8.i.i, label %if.end11.i.i, !dbg !5670

land.lhs.true8.i.i:                               ; preds = %if.end6.i.i
  %20 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5671
  %cmp9.i.i = icmp ule i64 %20, 192, !dbg !5672
  br i1 %cmp9.i.i, label %if.then10.i.i, label %if.end11.i.i, !dbg !5673

if.then10.i.i:                                    ; preds = %land.lhs.true8.i.i
  store i32 2, i32* %retval.i.i, align 4, !dbg !5674
  br label %kmalloc_index.exit.i, !dbg !5674

if.end11.i.i:                                     ; preds = %land.lhs.true8.i.i, %if.end6.i.i
  %21 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5675
  %cmp12.i.i = icmp ule i64 %21, 8, !dbg !5677
  br i1 %cmp12.i.i, label %if.then13.i.i, label %if.end14.i.i, !dbg !5678

if.then13.i.i:                                    ; preds = %if.end11.i.i
  store i32 3, i32* %retval.i.i, align 4, !dbg !5679
  br label %kmalloc_index.exit.i, !dbg !5679

if.end14.i.i:                                     ; preds = %if.end11.i.i
  %22 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5680
  %cmp15.i.i = icmp ule i64 %22, 16, !dbg !5682
  br i1 %cmp15.i.i, label %if.then16.i.i, label %if.end17.i.i, !dbg !5683

if.then16.i.i:                                    ; preds = %if.end14.i.i
  store i32 4, i32* %retval.i.i, align 4, !dbg !5684
  br label %kmalloc_index.exit.i, !dbg !5684

if.end17.i.i:                                     ; preds = %if.end14.i.i
  %23 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5685
  %cmp18.i.i = icmp ule i64 %23, 32, !dbg !5687
  br i1 %cmp18.i.i, label %if.then19.i.i, label %if.end20.i.i, !dbg !5688

if.then19.i.i:                                    ; preds = %if.end17.i.i
  store i32 5, i32* %retval.i.i, align 4, !dbg !5689
  br label %kmalloc_index.exit.i, !dbg !5689

if.end20.i.i:                                     ; preds = %if.end17.i.i
  %24 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5690
  %cmp21.i.i = icmp ule i64 %24, 64, !dbg !5692
  br i1 %cmp21.i.i, label %if.then22.i.i, label %if.end23.i.i, !dbg !5693

if.then22.i.i:                                    ; preds = %if.end20.i.i
  store i32 6, i32* %retval.i.i, align 4, !dbg !5694
  br label %kmalloc_index.exit.i, !dbg !5694

if.end23.i.i:                                     ; preds = %if.end20.i.i
  %25 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5695
  %cmp24.i.i = icmp ule i64 %25, 128, !dbg !5697
  br i1 %cmp24.i.i, label %if.then25.i.i, label %if.end26.i.i, !dbg !5698

if.then25.i.i:                                    ; preds = %if.end23.i.i
  store i32 7, i32* %retval.i.i, align 4, !dbg !5699
  br label %kmalloc_index.exit.i, !dbg !5699

if.end26.i.i:                                     ; preds = %if.end23.i.i
  %26 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5700
  %cmp27.i.i = icmp ule i64 %26, 256, !dbg !5702
  br i1 %cmp27.i.i, label %if.then28.i.i, label %if.end29.i.i, !dbg !5703

if.then28.i.i:                                    ; preds = %if.end26.i.i
  store i32 8, i32* %retval.i.i, align 4, !dbg !5704
  br label %kmalloc_index.exit.i, !dbg !5704

if.end29.i.i:                                     ; preds = %if.end26.i.i
  %27 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5705
  %cmp30.i.i = icmp ule i64 %27, 512, !dbg !5707
  br i1 %cmp30.i.i, label %if.then31.i.i, label %if.end32.i.i, !dbg !5708

if.then31.i.i:                                    ; preds = %if.end29.i.i
  store i32 9, i32* %retval.i.i, align 4, !dbg !5709
  br label %kmalloc_index.exit.i, !dbg !5709

if.end32.i.i:                                     ; preds = %if.end29.i.i
  %28 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5710
  %cmp33.i.i = icmp ule i64 %28, 1024, !dbg !5712
  br i1 %cmp33.i.i, label %if.then34.i.i, label %if.end35.i.i, !dbg !5713

if.then34.i.i:                                    ; preds = %if.end32.i.i
  store i32 10, i32* %retval.i.i, align 4, !dbg !5714
  br label %kmalloc_index.exit.i, !dbg !5714

if.end35.i.i:                                     ; preds = %if.end32.i.i
  %29 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5715
  %cmp36.i.i = icmp ule i64 %29, 2048, !dbg !5717
  br i1 %cmp36.i.i, label %if.then37.i.i, label %if.end38.i.i, !dbg !5718

if.then37.i.i:                                    ; preds = %if.end35.i.i
  store i32 11, i32* %retval.i.i, align 4, !dbg !5719
  br label %kmalloc_index.exit.i, !dbg !5719

if.end38.i.i:                                     ; preds = %if.end35.i.i
  %30 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5720
  %cmp39.i.i = icmp ule i64 %30, 4096, !dbg !5722
  br i1 %cmp39.i.i, label %if.then40.i.i, label %if.end41.i.i, !dbg !5723

if.then40.i.i:                                    ; preds = %if.end38.i.i
  store i32 12, i32* %retval.i.i, align 4, !dbg !5724
  br label %kmalloc_index.exit.i, !dbg !5724

if.end41.i.i:                                     ; preds = %if.end38.i.i
  %31 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5725
  %cmp42.i.i = icmp ule i64 %31, 8192, !dbg !5727
  br i1 %cmp42.i.i, label %if.then43.i.i, label %if.end44.i.i, !dbg !5728

if.then43.i.i:                                    ; preds = %if.end41.i.i
  store i32 13, i32* %retval.i.i, align 4, !dbg !5729
  br label %kmalloc_index.exit.i, !dbg !5729

if.end44.i.i:                                     ; preds = %if.end41.i.i
  %32 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5730
  %cmp45.i.i = icmp ule i64 %32, 16384, !dbg !5732
  br i1 %cmp45.i.i, label %if.then46.i.i, label %if.end47.i.i, !dbg !5733

if.then46.i.i:                                    ; preds = %if.end44.i.i
  store i32 14, i32* %retval.i.i, align 4, !dbg !5734
  br label %kmalloc_index.exit.i, !dbg !5734

if.end47.i.i:                                     ; preds = %if.end44.i.i
  %33 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5735
  %cmp48.i.i = icmp ule i64 %33, 32768, !dbg !5737
  br i1 %cmp48.i.i, label %if.then49.i.i, label %if.end50.i.i, !dbg !5738

if.then49.i.i:                                    ; preds = %if.end47.i.i
  store i32 15, i32* %retval.i.i, align 4, !dbg !5739
  br label %kmalloc_index.exit.i, !dbg !5739

if.end50.i.i:                                     ; preds = %if.end47.i.i
  %34 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5740
  %cmp51.i.i = icmp ule i64 %34, 65536, !dbg !5742
  br i1 %cmp51.i.i, label %if.then52.i.i, label %if.end53.i.i, !dbg !5743

if.then52.i.i:                                    ; preds = %if.end50.i.i
  store i32 16, i32* %retval.i.i, align 4, !dbg !5744
  br label %kmalloc_index.exit.i, !dbg !5744

if.end53.i.i:                                     ; preds = %if.end50.i.i
  %35 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5745
  %cmp54.i.i = icmp ule i64 %35, 131072, !dbg !5747
  br i1 %cmp54.i.i, label %if.then55.i.i, label %if.end56.i.i, !dbg !5748

if.then55.i.i:                                    ; preds = %if.end53.i.i
  store i32 17, i32* %retval.i.i, align 4, !dbg !5749
  br label %kmalloc_index.exit.i, !dbg !5749

if.end56.i.i:                                     ; preds = %if.end53.i.i
  %36 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5750
  %cmp57.i.i = icmp ule i64 %36, 262144, !dbg !5752
  br i1 %cmp57.i.i, label %if.then58.i.i, label %if.end59.i.i, !dbg !5753

if.then58.i.i:                                    ; preds = %if.end56.i.i
  store i32 18, i32* %retval.i.i, align 4, !dbg !5754
  br label %kmalloc_index.exit.i, !dbg !5754

if.end59.i.i:                                     ; preds = %if.end56.i.i
  %37 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5755
  %cmp60.i.i = icmp ule i64 %37, 524288, !dbg !5757
  br i1 %cmp60.i.i, label %if.then61.i.i, label %if.end62.i.i, !dbg !5758

if.then61.i.i:                                    ; preds = %if.end59.i.i
  store i32 19, i32* %retval.i.i, align 4, !dbg !5759
  br label %kmalloc_index.exit.i, !dbg !5759

if.end62.i.i:                                     ; preds = %if.end59.i.i
  %38 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5760
  %cmp63.i.i = icmp ule i64 %38, 1048576, !dbg !5762
  br i1 %cmp63.i.i, label %if.then64.i.i, label %if.end65.i.i, !dbg !5763

if.then64.i.i:                                    ; preds = %if.end62.i.i
  store i32 20, i32* %retval.i.i, align 4, !dbg !5764
  br label %kmalloc_index.exit.i, !dbg !5764

if.end65.i.i:                                     ; preds = %if.end62.i.i
  %39 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5765
  %cmp66.i.i = icmp ule i64 %39, 2097152, !dbg !5767
  br i1 %cmp66.i.i, label %if.then67.i.i, label %if.end68.i.i, !dbg !5768

if.then67.i.i:                                    ; preds = %if.end65.i.i
  store i32 21, i32* %retval.i.i, align 4, !dbg !5769
  br label %kmalloc_index.exit.i, !dbg !5769

if.end68.i.i:                                     ; preds = %if.end65.i.i
  %40 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5770
  %cmp69.i.i = icmp ule i64 %40, 4194304, !dbg !5772
  br i1 %cmp69.i.i, label %if.then70.i.i, label %if.end71.i.i, !dbg !5773

if.then70.i.i:                                    ; preds = %if.end68.i.i
  store i32 22, i32* %retval.i.i, align 4, !dbg !5774
  br label %kmalloc_index.exit.i, !dbg !5774

if.end71.i.i:                                     ; preds = %if.end68.i.i
  %41 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5775
  %cmp72.i.i = icmp ule i64 %41, 8388608, !dbg !5777
  br i1 %cmp72.i.i, label %if.then73.i.i, label %if.end74.i.i, !dbg !5778

if.then73.i.i:                                    ; preds = %if.end71.i.i
  store i32 23, i32* %retval.i.i, align 4, !dbg !5779
  br label %kmalloc_index.exit.i, !dbg !5779

if.end74.i.i:                                     ; preds = %if.end71.i.i
  %42 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5780
  %cmp75.i.i = icmp ule i64 %42, 16777216, !dbg !5782
  br i1 %cmp75.i.i, label %if.then76.i.i, label %if.end77.i.i, !dbg !5783

if.then76.i.i:                                    ; preds = %if.end74.i.i
  store i32 24, i32* %retval.i.i, align 4, !dbg !5784
  br label %kmalloc_index.exit.i, !dbg !5784

if.end77.i.i:                                     ; preds = %if.end74.i.i
  %43 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5785
  %cmp78.i.i = icmp ule i64 %43, 33554432, !dbg !5787
  br i1 %cmp78.i.i, label %if.then79.i.i, label %if.end80.i.i, !dbg !5788

if.then79.i.i:                                    ; preds = %if.end77.i.i
  store i32 25, i32* %retval.i.i, align 4, !dbg !5789
  br label %kmalloc_index.exit.i, !dbg !5789

if.end80.i.i:                                     ; preds = %if.end77.i.i
  %44 = load i64, i64* %size.addr.i11.i, align 8, !dbg !5790
  %cmp81.i.i = icmp ule i64 %44, 67108864, !dbg !5792
  br i1 %cmp81.i.i, label %if.then82.i.i, label %if.end83.i.i, !dbg !5793

if.then82.i.i:                                    ; preds = %if.end80.i.i
  store i32 26, i32* %retval.i.i, align 4, !dbg !5794
  br label %kmalloc_index.exit.i, !dbg !5794

if.end83.i.i:                                     ; preds = %if.end80.i.i
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i64 0, i64 0), i32 382, i32 0, i64 12) #10, !dbg !5795, !srcloc !5798
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 156) #10, !dbg !5799, !srcloc !5802
  unreachable, !dbg !5803

kmalloc_index.exit.i:                             ; preds = %if.then82.i.i, %if.then79.i.i, %if.then76.i.i, %if.then73.i.i, %if.then70.i.i, %if.then67.i.i, %if.then64.i.i, %if.then61.i.i, %if.then58.i.i, %if.then55.i.i, %if.then52.i.i, %if.then49.i.i, %if.then46.i.i, %if.then43.i.i, %if.then40.i.i, %if.then37.i.i, %if.then34.i.i, %if.then31.i.i, %if.then28.i.i, %if.then25.i.i, %if.then22.i.i, %if.then19.i.i, %if.then16.i.i, %if.then13.i.i, %if.then10.i.i, %if.then5.i.i, %if.then1.i.i, %if.then.i.i
  %45 = load i32, i32* %retval.i.i, align 4, !dbg !5804
  store i32 %45, i32* %index.i, align 4, !dbg !5805
  %46 = load i32, i32* %index.i, align 4, !dbg !5806
  %tobool.i = icmp ne i32 %46, 0, !dbg !5806
  br i1 %tobool.i, label %if.end4.i, label %if.then3.i, !dbg !5808

if.then3.i:                                       ; preds = %kmalloc_index.exit.i
  store i8* inttoptr (i64 16 to i8*), i8** %retval.i, align 8, !dbg !5809
  br label %kmalloc.exit, !dbg !5809

if.end4.i:                                        ; preds = %kmalloc_index.exit.i
  %47 = load i32, i32* %flags.addr.i, align 4, !dbg !5810
  store i32 %47, i32* %flags.addr.i13.i, align 4
  %48 = load i32, i32* %flags.addr.i13.i, align 4, !dbg !5811
  %and.i.i = and i32 %48, 17, !dbg !5811
  %cmp.i14.i = icmp eq i32 %and.i.i, 0, !dbg !5811
  %lnot.i.i = xor i1 %cmp.i14.i, true, !dbg !5811
  %lnot.ext.i.i = zext i1 %cmp.i14.i to i32, !dbg !5811
  %conv.i.i = sext i32 %lnot.ext.i.i to i64, !dbg !5811
  br i1 %cmp.i14.i, label %if.then.i15.i, label %if.end.i16.i, !dbg !5813

if.then.i15.i:                                    ; preds = %if.end4.i
  store i32 0, i32* %retval.i12.i, align 4, !dbg !5814
  br label %kmalloc_type.exit.i, !dbg !5814

if.end.i16.i:                                     ; preds = %if.end4.i
  %49 = load i32, i32* %flags.addr.i13.i, align 4, !dbg !5815
  %and2.i.i = and i32 %49, 1, !dbg !5816
  %tobool3.i.i = icmp ne i32 %and2.i.i, 0, !dbg !5815
  %50 = zext i1 %tobool3.i.i to i64, !dbg !5815
  %cond.i.i = select i1 %tobool3.i.i, i32 2, i32 1, !dbg !5815
  store i32 %cond.i.i, i32* %retval.i12.i, align 4, !dbg !5817
  br label %kmalloc_type.exit.i, !dbg !5817

kmalloc_type.exit.i:                              ; preds = %if.end.i16.i, %if.then.i15.i
  %51 = load i32, i32* %retval.i12.i, align 4, !dbg !5818
  %idxprom.i = zext i32 %51 to i64, !dbg !5819
  %arrayidx.i = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %idxprom.i, !dbg !5819
  %52 = load i32, i32* %index.i, align 4, !dbg !5820
  %idxprom6.i = zext i32 %52 to i64, !dbg !5819
  %arrayidx7.i = getelementptr [14 x %struct.kmem_cache*], [14 x %struct.kmem_cache*]* %arrayidx.i, i64 0, i64 %idxprom6.i, !dbg !5819
  %53 = load %struct.kmem_cache*, %struct.kmem_cache** %arrayidx7.i, align 8, !dbg !5819
  %54 = load i32, i32* %flags.addr.i, align 4, !dbg !5821
  %55 = load i64, i64* %size.addr.i, align 8, !dbg !5822
  store %struct.kmem_cache* %53, %struct.kmem_cache** %s.addr.i.i, align 8
  store i32 %54, i32* %flags.addr.i17.i, align 4
  store i64 %55, i64* %size.addr.i18.i, align 8
  %56 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i, align 8, !dbg !5823
  %57 = load i32, i32* %flags.addr.i17.i, align 4, !dbg !5824
  %call.i19.i = call noalias i8* @kmem_cache_alloc(%struct.kmem_cache* %56, i32 %57) #14, !dbg !5825
  %ptrint.i.i = ptrtoint i8* %call.i19.i to i64, !dbg !5825
  %maskedptr.i.i = and i64 %ptrint.i.i, 7, !dbg !5825
  %maskcond.i.i = icmp eq i64 %maskedptr.i.i, 0, !dbg !5825
  call void @llvm.assume(i1 %maskcond.i.i) #10, !dbg !5825
  store i8* %call.i19.i, i8** %ret.i.i, align 8, !dbg !5586
  %58 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i, align 8, !dbg !5826
  %59 = load i8*, i8** %ret.i.i, align 8, !dbg !5827
  %60 = load i64, i64* %size.addr.i18.i, align 8, !dbg !5828
  %61 = load i32, i32* %flags.addr.i17.i, align 4, !dbg !5829
  %call1.i.i = call i8* @kasan_kmalloc(%struct.kmem_cache* %58, i8* %59, i64 %60, i32 %61) #14, !dbg !5830
  store i8* %call1.i.i, i8** %ret.i.i, align 8, !dbg !5831
  %62 = load i8*, i8** %ret.i.i, align 8, !dbg !5832
  store i8* %62, i8** %retval.i, align 8, !dbg !5833
  br label %kmalloc.exit, !dbg !5833

if.end9.i:                                        ; preds = %entry
  %63 = load i64, i64* %size.addr.i, align 8, !dbg !5834
  %64 = load i32, i32* %flags.addr.i, align 4, !dbg !5835
  %call10.i = call noalias i8* @__kmalloc(i64 %63, i32 %64) #14, !dbg !5836
  %ptrint.i = ptrtoint i8* %call10.i to i64, !dbg !5836
  %maskedptr.i = and i64 %ptrint.i, 7, !dbg !5836
  %maskcond.i = icmp eq i64 %maskedptr.i, 0, !dbg !5836
  call void @llvm.assume(i1 %maskcond.i) #10, !dbg !5836
  store i8* %call10.i, i8** %retval.i, align 8, !dbg !5837
  br label %kmalloc.exit, !dbg !5837

kmalloc.exit:                                     ; preds = %if.then1.i, %if.then3.i, %kmalloc_type.exit.i, %if.end9.i
  %65 = load i8*, i8** %retval.i, align 8, !dbg !5838
  ret i8* %65, !dbg !5839
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_lock_unlock_none(i8* %__map) #0 !dbg !5840 {
entry:
  %__map.addr = alloca i8*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5841, metadata !DIExpression()), !dbg !5842
  ret void, !dbg !5843
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_debugfs_disable(%struct.regmap* %map) #0 !dbg !5844 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !5845, metadata !DIExpression()), !dbg !5846
  ret void, !dbg !5847
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.hwspinlock* @hwspin_lock_request_specific(i32 %id) #0 !dbg !5848 {
entry:
  %id.addr = alloca i32, align 4
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !5851, metadata !DIExpression()), !dbg !5852
  %call = call i8* @ERR_PTR(i64 -19) #11, !dbg !5853
  %0 = bitcast i8* %call to %struct.hwspinlock*, !dbg !5853
  ret %struct.hwspinlock* %0, !dbg !5854
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_lock_hwlock_irqsave(i8* %__map) #0 !dbg !5855 {
entry:
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5856, metadata !DIExpression()), !dbg !5857
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !5858, metadata !DIExpression()), !dbg !5859
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !5860
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !5860
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !5859
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5861
  %hwlock = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 62, !dbg !5862
  %3 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock, align 8, !dbg !5862
  %4 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5863
  %5 = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 0, !dbg !5864
  %6 = bitcast %union.anon* %5 to %struct.anon*, !dbg !5864
  %spinlock_flags = getelementptr inbounds %struct.anon, %struct.anon* %6, i32 0, i32 1, !dbg !5864
  %call = call i32 @hwspin_lock_timeout_irqsave(%struct.hwspinlock* %3, i32 -1, i64* %spinlock_flags) #11, !dbg !5865
  ret void, !dbg !5866
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_unlock_hwlock_irqrestore(i8* %__map) #0 !dbg !5867 {
entry:
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5868, metadata !DIExpression()), !dbg !5869
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !5870, metadata !DIExpression()), !dbg !5871
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !5872
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !5872
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !5871
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5873
  %hwlock = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 62, !dbg !5874
  %3 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock, align 8, !dbg !5874
  %4 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5875
  %5 = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 0, !dbg !5876
  %6 = bitcast %union.anon* %5 to %struct.anon*, !dbg !5876
  %spinlock_flags = getelementptr inbounds %struct.anon, %struct.anon* %6, i32 0, i32 1, !dbg !5876
  call void @hwspin_unlock_irqrestore(%struct.hwspinlock* %3, i64* %spinlock_flags) #11, !dbg !5877
  ret void, !dbg !5878
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_lock_hwlock_irq(i8* %__map) #0 !dbg !5879 {
entry:
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5880, metadata !DIExpression()), !dbg !5881
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !5882, metadata !DIExpression()), !dbg !5883
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !5884
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !5884
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !5883
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5885
  %hwlock = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 62, !dbg !5886
  %3 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock, align 8, !dbg !5886
  %call = call i32 @hwspin_lock_timeout_irq(%struct.hwspinlock* %3, i32 -1) #11, !dbg !5887
  ret void, !dbg !5888
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_unlock_hwlock_irq(i8* %__map) #0 !dbg !5889 {
entry:
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5890, metadata !DIExpression()), !dbg !5891
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !5892, metadata !DIExpression()), !dbg !5893
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !5894
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !5894
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !5893
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5895
  %hwlock = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 62, !dbg !5896
  %3 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock, align 8, !dbg !5896
  call void @hwspin_unlock_irq(%struct.hwspinlock* %3) #11, !dbg !5897
  ret void, !dbg !5898
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_lock_hwlock(i8* %__map) #0 !dbg !5899 {
entry:
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5900, metadata !DIExpression()), !dbg !5901
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !5902, metadata !DIExpression()), !dbg !5903
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !5904
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !5904
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !5903
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5905
  %hwlock = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 62, !dbg !5906
  %3 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock, align 8, !dbg !5906
  %call = call i32 @hwspin_lock_timeout(%struct.hwspinlock* %3, i32 -1) #11, !dbg !5907
  ret void, !dbg !5908
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_unlock_hwlock(i8* %__map) #0 !dbg !5909 {
entry:
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5910, metadata !DIExpression()), !dbg !5911
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !5912, metadata !DIExpression()), !dbg !5913
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !5914
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !5914
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !5913
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5915
  %hwlock = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 62, !dbg !5916
  %3 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock, align 8, !dbg !5916
  call void @hwspin_unlock(%struct.hwspinlock* %3) #11, !dbg !5917
  ret void, !dbg !5918
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_lock_spinlock(i8* %__map) #0 !dbg !5919 {
entry:
  %lock.addr.i = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i, metadata !4413, metadata !DIExpression()), !dbg !5920
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  %flags = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__dummy5 = alloca i64, align 8
  %__dummy26 = alloca i64, align 8
  %tmp9 = alloca i32, align 4
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5927, metadata !DIExpression()), !dbg !5928
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !5929, metadata !DIExpression()), !dbg !5930
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !5931
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !5931
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !5930
  call void @llvm.dbg.declare(metadata i64* %flags, metadata !5932, metadata !DIExpression()), !dbg !5933
  br label %do.body, !dbg !5934

do.body:                                          ; preds = %entry
  br label %do.body1, !dbg !5935

do.body1:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__dummy, metadata !5936, metadata !DIExpression()), !dbg !5938
  call void @llvm.dbg.declare(metadata i64* %__dummy2, metadata !5939, metadata !DIExpression()), !dbg !5938
  %cmp = icmp eq i64* %__dummy, %__dummy2, !dbg !5938
  %conv = zext i1 %cmp to i32, !dbg !5938
  store i32 1, i32* %tmp, align 4, !dbg !5938
  %2 = load i32, i32* %tmp, align 4, !dbg !5938
  br label %do.body2, !dbg !5940

do.body2:                                         ; preds = %do.body1
  br label %do.body3, !dbg !5941

do.body3:                                         ; preds = %do.body2
  br label %do.body4, !dbg !5942

do.body4:                                         ; preds = %do.body3
  call void @llvm.dbg.declare(metadata i64* %__dummy5, metadata !5944, metadata !DIExpression()), !dbg !5947
  call void @llvm.dbg.declare(metadata i64* %__dummy26, metadata !5948, metadata !DIExpression()), !dbg !5947
  %cmp7 = icmp eq i64* %__dummy5, %__dummy26, !dbg !5947
  %conv8 = zext i1 %cmp7 to i32, !dbg !5947
  store i32 1, i32* %tmp9, align 4, !dbg !5947
  %3 = load i32, i32* %tmp9, align 4, !dbg !5947
  %call = call i64 @arch_local_irq_save() #11, !dbg !5949
  store i64 %call, i64* %flags, align 8, !dbg !5949
  br label %do.end, !dbg !5949

do.end:                                           ; preds = %do.body4
  br label %do.end10, !dbg !5942

do.end10:                                         ; preds = %do.end
  br label %do.body11, !dbg !5941

do.body11:                                        ; preds = %do.end10
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !5950, !srcloc !5951
  br label %do.body12, !dbg !5950

do.body12:                                        ; preds = %do.body11
  %4 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5952
  %5 = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 0, !dbg !5952
  %6 = bitcast %union.anon* %5 to %struct.anon*, !dbg !5952
  %spinlock = getelementptr inbounds %struct.anon, %struct.anon* %6, i32 0, i32 0, !dbg !5952
  store %struct.spinlock* %spinlock, %struct.spinlock** %lock.addr.i, align 8
  %7 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8, !dbg !5953
  %8 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %7, i32 0, i32 0, !dbg !5954
  %rlock.i = bitcast %union.anon.0* %8 to %struct.raw_spinlock*, !dbg !5954
  br label %do.end14, !dbg !5952

do.end14:                                         ; preds = %do.body12
  br label %do.end15, !dbg !5950

do.end15:                                         ; preds = %do.end14
  br label %do.end16, !dbg !5941

do.end16:                                         ; preds = %do.end15
  br label %do.end17, !dbg !5940

do.end17:                                         ; preds = %do.end16
  br label %do.end18, !dbg !5935

do.end18:                                         ; preds = %do.end17
  %9 = load i64, i64* %flags, align 8, !dbg !5955
  %10 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5956
  %11 = getelementptr inbounds %struct.regmap, %struct.regmap* %10, i32 0, i32 0, !dbg !5957
  %12 = bitcast %union.anon* %11 to %struct.anon*, !dbg !5957
  %spinlock_flags = getelementptr inbounds %struct.anon, %struct.anon* %12, i32 0, i32 1, !dbg !5957
  store i64 %9, i64* %spinlock_flags, align 8, !dbg !5958
  ret void, !dbg !5959
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_unlock_spinlock(i8* %__map) #0 !dbg !5960 {
entry:
  %lock.addr.i = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i, metadata !5961, metadata !DIExpression()), !dbg !5965
  %flags.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %flags.addr.i, metadata !5967, metadata !DIExpression()), !dbg !5968
  %tmp.i = alloca i32, align 4
  %tmp8.i = alloca i32, align 4
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5969, metadata !DIExpression()), !dbg !5970
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !5971, metadata !DIExpression()), !dbg !5972
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !5973
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !5973
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !5972
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5974
  %3 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 0, !dbg !5975
  %4 = bitcast %union.anon* %3 to %struct.anon*, !dbg !5975
  %spinlock = getelementptr inbounds %struct.anon, %struct.anon* %4, i32 0, i32 0, !dbg !5975
  %5 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !5976
  %6 = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 0, !dbg !5977
  %7 = bitcast %union.anon* %6 to %struct.anon*, !dbg !5977
  %spinlock_flags = getelementptr inbounds %struct.anon, %struct.anon* %7, i32 0, i32 1, !dbg !5977
  %8 = load i64, i64* %spinlock_flags, align 8, !dbg !5977
  store %struct.spinlock* %spinlock, %struct.spinlock** %lock.addr.i, align 8
  store i64 %8, i64* %flags.addr.i, align 8
  call void @llvm.dbg.declare(metadata !45, metadata !5978, metadata !DIExpression()) #10, !dbg !5981
  call void @llvm.dbg.declare(metadata !45, metadata !5982, metadata !DIExpression()) #10, !dbg !5981
  store i32 1, i32* %tmp.i, align 4, !dbg !5981
  %9 = load i32, i32* %tmp.i, align 4, !dbg !5981
  call void @llvm.dbg.declare(metadata !45, metadata !5983, metadata !DIExpression()) #10, !dbg !5988
  call void @llvm.dbg.declare(metadata !45, metadata !5989, metadata !DIExpression()) #10, !dbg !5988
  store i32 1, i32* %tmp8.i, align 4, !dbg !5988
  %10 = load i32, i32* %tmp8.i, align 4, !dbg !5988
  %11 = load i64, i64* %flags.addr.i, align 8, !dbg !5990
  call void @arch_local_irq_restore(i64 %11) #14, !dbg !5990
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !5991, !srcloc !5993
  %12 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8, !dbg !5994
  %13 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %12, i32 0, i32 0, !dbg !5994
  %rlock.i = bitcast %union.anon.0* %13 to %struct.raw_spinlock*, !dbg !5994
  ret void, !dbg !5996
}

; Function Attrs: noredzone
declare dso_local void @__mutex_init(%struct.mutex*, i8*, %struct.lock_class_key*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_lock_mutex(i8* %__map) #0 !dbg !5997 {
entry:
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !5998, metadata !DIExpression()), !dbg !5999
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !6000, metadata !DIExpression()), !dbg !6001
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !6002
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !6002
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !6001
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6003
  %3 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 0, !dbg !6004
  %mutex = bitcast %union.anon* %3 to %struct.mutex*, !dbg !6004
  call void @mutex_lock(%struct.mutex* %mutex) #11, !dbg !6005
  ret void, !dbg !6006
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_unlock_mutex(i8* %__map) #0 !dbg !6007 {
entry:
  %__map.addr = alloca i8*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %__map, i8** %__map.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %__map.addr, metadata !6008, metadata !DIExpression()), !dbg !6009
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !6010, metadata !DIExpression()), !dbg !6011
  %0 = load i8*, i8** %__map.addr, align 8, !dbg !6012
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !6012
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !6011
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6013
  %3 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 0, !dbg !6014
  %mutex = bitcast %union.anon* %3 to %struct.mutex*, !dbg !6014
  call void @mutex_unlock(%struct.mutex* %mutex) #11, !dbg !6015
  ret void, !dbg !6016
}

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal zeroext i1 @is_power_of_2(i64 %n) #4 !dbg !6017 {
entry:
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !6021, metadata !DIExpression()), !dbg !6022
  %0 = load i64, i64* %n.addr, align 8, !dbg !6023
  %cmp = icmp ne i64 %0, 0, !dbg !6024
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6025

land.rhs:                                         ; preds = %entry
  %1 = load i64, i64* %n.addr, align 8, !dbg !6026
  %2 = load i64, i64* %n.addr, align 8, !dbg !6027
  %sub = sub i64 %2, 1, !dbg !6028
  %and = and i64 %1, %sub, !dbg !6029
  %cmp1 = icmp eq i64 %and, 0, !dbg !6030
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %cmp1, %land.rhs ], !dbg !6031
  ret i1 %3, !dbg !6032
}

; Function Attrs: nounwind readnone willreturn
declare i1 @llvm.is.constant.i32(i32) #5

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal i32 @__ilog2_u32(i32 %n) #4 !dbg !6033 {
entry:
  %x.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %x.addr.i, metadata !6036, metadata !DIExpression()), !dbg !6041
  %r.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %r.i, metadata !6043, metadata !DIExpression()), !dbg !6044
  %n.addr = alloca i32, align 4
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !6045, metadata !DIExpression()), !dbg !6046
  %0 = load i32, i32* %n.addr, align 4, !dbg !6047
  store i32 %0, i32* %x.addr.i, align 4
  %1 = load i32, i32* %x.addr.i, align 4, !dbg !6048
  %2 = call i32 asm "bsrl $1,$0", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i32 %1, i32 -1) #9, !dbg !6049, !srcloc !6050
  store i32 %2, i32* %r.i, align 4, !dbg !6049
  %3 = load i32, i32* %r.i, align 4, !dbg !6051
  %add.i = add i32 %3, 1, !dbg !6052
  %sub = sub i32 %add.i, 1, !dbg !6053
  ret i32 %sub, !dbg !6054
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @INIT_LIST_HEAD(%struct.list_head* %list) #0 !dbg !6055 {
entry:
  %list.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %list.addr, metadata !6059, metadata !DIExpression()), !dbg !6060
  br label %do.body, !dbg !6061

do.body:                                          ; preds = %entry
  br label %do.body1, !dbg !6062

do.body1:                                         ; preds = %do.body
  br label %do.end, !dbg !6064

do.end:                                           ; preds = %do.body1
  br label %do.body2, !dbg !6062

do.body2:                                         ; preds = %do.end
  %0 = load %struct.list_head*, %struct.list_head** %list.addr, align 8, !dbg !6066
  %1 = load %struct.list_head*, %struct.list_head** %list.addr, align 8, !dbg !6066
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !6066
  store volatile %struct.list_head* %0, %struct.list_head** %next, align 8, !dbg !6066
  br label %do.end3, !dbg !6066

do.end3:                                          ; preds = %do.body2
  br label %do.end4, !dbg !6062

do.end4:                                          ; preds = %do.end3
  %2 = load %struct.list_head*, %struct.list_head** %list.addr, align 8, !dbg !6068
  %3 = load %struct.list_head*, %struct.list_head** %list.addr, align 8, !dbg !6069
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %3, i32 0, i32 1, !dbg !6070
  store %struct.list_head* %2, %struct.list_head** %prev, align 8, !dbg !6071
  ret void, !dbg !6072
}

; Function Attrs: noredzone
declare dso_local void @__init_waitqueue_head(%struct.wait_queue_head*, i8*, %struct.lock_class_key*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_bus_reg_read(i8* %context, i32 %reg, i32* %val) #0 !dbg !6073 {
entry:
  %context.addr = alloca i8*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32*, align 8
  %map = alloca %struct.regmap*, align 8
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !6074, metadata !DIExpression()), !dbg !6075
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6076, metadata !DIExpression()), !dbg !6077
  store i32* %val, i32** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %val.addr, metadata !6078, metadata !DIExpression()), !dbg !6079
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !6080, metadata !DIExpression()), !dbg !6081
  %0 = load i8*, i8** %context.addr, align 8, !dbg !6082
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !6082
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !6081
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6083
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 8, !dbg !6084
  %3 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !6084
  %reg_read = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %3, i32 0, i32 7, !dbg !6085
  %4 = load i32 (i8*, i32, i32*)*, i32 (i8*, i32, i32*)** %reg_read, align 8, !dbg !6085
  %5 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6086
  %bus_context = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 9, !dbg !6087
  %6 = load i8*, i8** %bus_context, align 8, !dbg !6087
  %7 = load i32, i32* %reg.addr, align 4, !dbg !6088
  %8 = load i32*, i32** %val.addr, align 8, !dbg !6089
  %call = call i32 %4(i8* %6, i32 %7, i32* %8) #11, !dbg !6083
  ret i32 %call, !dbg !6090
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_bus_reg_write(i8* %context, i32 %reg, i32 %val) #0 !dbg !6091 {
entry:
  %context.addr = alloca i8*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %map = alloca %struct.regmap*, align 8
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !6092, metadata !DIExpression()), !dbg !6093
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6094, metadata !DIExpression()), !dbg !6095
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6096, metadata !DIExpression()), !dbg !6097
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !6098, metadata !DIExpression()), !dbg !6099
  %0 = load i8*, i8** %context.addr, align 8, !dbg !6100
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !6100
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !6099
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6101
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 8, !dbg !6102
  %3 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !6102
  %reg_write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %3, i32 0, i32 4, !dbg !6103
  %4 = load i32 (i8*, i32, i32)*, i32 (i8*, i32, i32)** %reg_write, align 8, !dbg !6103
  %5 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6104
  %bus_context = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 9, !dbg !6105
  %6 = load i8*, i8** %bus_context, align 8, !dbg !6105
  %7 = load i32, i32* %reg.addr, align 4, !dbg !6106
  %8 = load i32, i32* %val.addr, align 4, !dbg !6107
  %call = call i32 %4(i8* %6, i32 %7, i32 %8) #11, !dbg !6101
  ret i32 %call, !dbg !6108
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_bus_read(i8* %context, i32 %reg, i32* %val) #0 !dbg !6109 {
entry:
  %retval = alloca i32, align 4
  %context.addr = alloca i8*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32*, align 8
  %ret = alloca i32, align 4
  %map = alloca %struct.regmap*, align 8
  %work_val = alloca i8*, align 8
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !6110, metadata !DIExpression()), !dbg !6111
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6112, metadata !DIExpression()), !dbg !6113
  store i32* %val, i32** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %val.addr, metadata !6114, metadata !DIExpression()), !dbg !6115
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6116, metadata !DIExpression()), !dbg !6117
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !6118, metadata !DIExpression()), !dbg !6119
  %0 = load i8*, i8** %context.addr, align 8, !dbg !6120
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !6120
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !6119
  call void @llvm.dbg.declare(metadata i8** %work_val, metadata !6121, metadata !DIExpression()), !dbg !6122
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6123
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 6, !dbg !6124
  %3 = load i8*, i8** %work_buf, align 8, !dbg !6124
  %4 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6125
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 7, !dbg !6126
  %reg_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 1, !dbg !6127
  %5 = load i64, i64* %reg_bytes, align 8, !dbg !6127
  %add.ptr = getelementptr i8, i8* %3, i64 %5, !dbg !6128
  %6 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6129
  %format1 = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 7, !dbg !6130
  %pad_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format1, i32 0, i32 2, !dbg !6131
  %7 = load i64, i64* %pad_bytes, align 8, !dbg !6131
  %add.ptr2 = getelementptr i8, i8* %add.ptr, i64 %7, !dbg !6132
  store i8* %add.ptr2, i8** %work_val, align 8, !dbg !6122
  %8 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6133
  %format3 = getelementptr inbounds %struct.regmap, %struct.regmap* %8, i32 0, i32 7, !dbg !6135
  %parse_val = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format3, i32 0, i32 7, !dbg !6136
  %9 = load i32 (i8*)*, i32 (i8*)** %parse_val, align 8, !dbg !6136
  %tobool = icmp ne i32 (i8*)* %9, null, !dbg !6133
  br i1 %tobool, label %if.end, label %if.then, !dbg !6137

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !6138
  br label %return, !dbg !6138

if.end:                                           ; preds = %entry
  %10 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6139
  %11 = load i32, i32* %reg.addr, align 4, !dbg !6140
  %12 = load i8*, i8** %work_val, align 8, !dbg !6141
  %13 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6142
  %format4 = getelementptr inbounds %struct.regmap, %struct.regmap* %13, i32 0, i32 7, !dbg !6143
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format4, i32 0, i32 3, !dbg !6144
  %14 = load i64, i64* %val_bytes, align 8, !dbg !6144
  %conv = trunc i64 %14 to i32, !dbg !6142
  %call = call i32 @_regmap_raw_read(%struct.regmap* %10, i32 %11, i8* %12, i32 %conv, i1 zeroext false) #11, !dbg !6145
  store i32 %call, i32* %ret, align 4, !dbg !6146
  %15 = load i32, i32* %ret, align 4, !dbg !6147
  %cmp = icmp eq i32 %15, 0, !dbg !6149
  br i1 %cmp, label %if.then6, label %if.end10, !dbg !6150

if.then6:                                         ; preds = %if.end
  %16 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6151
  %format7 = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 7, !dbg !6152
  %parse_val8 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format7, i32 0, i32 7, !dbg !6153
  %17 = load i32 (i8*)*, i32 (i8*)** %parse_val8, align 8, !dbg !6153
  %18 = load i8*, i8** %work_val, align 8, !dbg !6154
  %call9 = call i32 %17(i8* %18) #11, !dbg !6151
  %19 = load i32*, i32** %val.addr, align 8, !dbg !6155
  store i32 %call9, i32* %19, align 4, !dbg !6156
  br label %if.end10, !dbg !6157

if.end10:                                         ; preds = %if.then6, %if.end
  %20 = load i32, i32* %ret, align 4, !dbg !6158
  store i32 %20, i32* %retval, align 4, !dbg !6159
  br label %return, !dbg !6159

return:                                           ; preds = %if.end10, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !6160
  ret i32 %21, !dbg !6160
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_get_reg_endian(%struct.regmap_bus* %bus, %struct.regmap_config* %config) #0 !dbg !6161 {
entry:
  %retval = alloca i32, align 4
  %bus.addr = alloca %struct.regmap_bus*, align 8
  %config.addr = alloca %struct.regmap_config*, align 8
  %endian = alloca i32, align 4
  store %struct.regmap_bus* %bus, %struct.regmap_bus** %bus.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_bus** %bus.addr, metadata !6164, metadata !DIExpression()), !dbg !6165
  store %struct.regmap_config* %config, %struct.regmap_config** %config.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_config** %config.addr, metadata !6166, metadata !DIExpression()), !dbg !6167
  call void @llvm.dbg.declare(metadata i32* %endian, metadata !6168, metadata !DIExpression()), !dbg !6169
  %0 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !6170
  %reg_format_endian = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %0, i32 0, i32 36, !dbg !6171
  %1 = load i32, i32* %reg_format_endian, align 4, !dbg !6171
  store i32 %1, i32* %endian, align 4, !dbg !6172
  %2 = load i32, i32* %endian, align 4, !dbg !6173
  %cmp = icmp ne i32 %2, 0, !dbg !6175
  br i1 %cmp, label %if.then, label %if.end, !dbg !6176

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %endian, align 4, !dbg !6177
  store i32 %3, i32* %retval, align 4, !dbg !6178
  br label %return, !dbg !6178

if.end:                                           ; preds = %entry
  %4 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !6179
  %tobool = icmp ne %struct.regmap_bus* %4, null, !dbg !6179
  br i1 %tobool, label %land.lhs.true, label %if.end4, !dbg !6181

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !6182
  %reg_format_endian_default = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %5, i32 0, i32 11, !dbg !6183
  %6 = load i32, i32* %reg_format_endian_default, align 4, !dbg !6183
  %tobool1 = icmp ne i32 %6, 0, !dbg !6182
  br i1 %tobool1, label %if.then2, label %if.end4, !dbg !6184

if.then2:                                         ; preds = %land.lhs.true
  %7 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !6185
  %reg_format_endian_default3 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %7, i32 0, i32 11, !dbg !6186
  %8 = load i32, i32* %reg_format_endian_default3, align 4, !dbg !6186
  store i32 %8, i32* %endian, align 4, !dbg !6187
  br label %if.end4, !dbg !6188

if.end4:                                          ; preds = %if.then2, %land.lhs.true, %if.end
  %9 = load i32, i32* %endian, align 4, !dbg !6189
  %cmp5 = icmp ne i32 %9, 0, !dbg !6191
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !6192

if.then6:                                         ; preds = %if.end4
  %10 = load i32, i32* %endian, align 4, !dbg !6193
  store i32 %10, i32* %retval, align 4, !dbg !6194
  br label %return, !dbg !6194

if.end7:                                          ; preds = %if.end4
  store i32 1, i32* %retval, align 4, !dbg !6195
  br label %return, !dbg !6195

return:                                           ; preds = %if.end7, %if.then6, %if.then
  %11 = load i32, i32* %retval, align 4, !dbg !6196
  ret i32 %11, !dbg !6196
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_2_6_write(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !6197 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %out = alloca i8*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !6198, metadata !DIExpression()), !dbg !6199
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6200, metadata !DIExpression()), !dbg !6201
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6202, metadata !DIExpression()), !dbg !6203
  call void @llvm.dbg.declare(metadata i8** %out, metadata !6204, metadata !DIExpression()), !dbg !6205
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !6206
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 6, !dbg !6207
  %1 = load i8*, i8** %work_buf, align 8, !dbg !6207
  store i8* %1, i8** %out, align 8, !dbg !6205
  %2 = load i32, i32* %reg.addr, align 4, !dbg !6208
  %shl = shl i32 %2, 6, !dbg !6209
  %3 = load i32, i32* %val.addr, align 4, !dbg !6210
  %or = or i32 %shl, %3, !dbg !6211
  %conv = trunc i32 %or to i8, !dbg !6212
  %4 = load i8*, i8** %out, align 8, !dbg !6213
  store i8 %conv, i8* %4, align 1, !dbg !6214
  ret void, !dbg !6215
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_4_12_write(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !6216 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %out = alloca i16*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !6217, metadata !DIExpression()), !dbg !6218
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6219, metadata !DIExpression()), !dbg !6220
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6221, metadata !DIExpression()), !dbg !6222
  call void @llvm.dbg.declare(metadata i16** %out, metadata !6223, metadata !DIExpression()), !dbg !6224
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !6225
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 6, !dbg !6226
  %1 = load i8*, i8** %work_buf, align 8, !dbg !6226
  %2 = bitcast i8* %1 to i16*, !dbg !6225
  store i16* %2, i16** %out, align 8, !dbg !6224
  %3 = load i32, i32* %reg.addr, align 4, !dbg !6227
  %shl = shl i32 %3, 12, !dbg !6227
  %4 = load i32, i32* %val.addr, align 4, !dbg !6227
  %or = or i32 %shl, %4, !dbg !6227
  %conv = trunc i32 %or to i16, !dbg !6227
  %5 = call i1 @llvm.is.constant.i16(i16 %conv), !dbg !6227
  br i1 %5, label %cond.true, label %cond.false, !dbg !6227

cond.true:                                        ; preds = %entry
  %6 = load i32, i32* %reg.addr, align 4, !dbg !6227
  %shl1 = shl i32 %6, 12, !dbg !6227
  %7 = load i32, i32* %val.addr, align 4, !dbg !6227
  %or2 = or i32 %shl1, %7, !dbg !6227
  %conv3 = trunc i32 %or2 to i16, !dbg !6227
  %conv4 = zext i16 %conv3 to i32, !dbg !6227
  %and = and i32 %conv4, 255, !dbg !6227
  %shl5 = shl i32 %and, 8, !dbg !6227
  %8 = load i32, i32* %reg.addr, align 4, !dbg !6227
  %shl6 = shl i32 %8, 12, !dbg !6227
  %9 = load i32, i32* %val.addr, align 4, !dbg !6227
  %or7 = or i32 %shl6, %9, !dbg !6227
  %conv8 = trunc i32 %or7 to i16, !dbg !6227
  %conv9 = zext i16 %conv8 to i32, !dbg !6227
  %and10 = and i32 %conv9, 65280, !dbg !6227
  %shr = ashr i32 %and10, 8, !dbg !6227
  %or11 = or i32 %shl5, %shr, !dbg !6227
  %conv12 = trunc i32 %or11 to i16, !dbg !6227
  %conv13 = zext i16 %conv12 to i32, !dbg !6227
  br label %cond.end, !dbg !6227

cond.false:                                       ; preds = %entry
  %10 = load i32, i32* %reg.addr, align 4, !dbg !6227
  %shl14 = shl i32 %10, 12, !dbg !6227
  %11 = load i32, i32* %val.addr, align 4, !dbg !6227
  %or15 = or i32 %shl14, %11, !dbg !6227
  %conv16 = trunc i32 %or15 to i16, !dbg !6227
  %call = call zeroext i16 @__fswab16(i16 zeroext %conv16) #12, !dbg !6227
  %conv17 = zext i16 %call to i32, !dbg !6227
  br label %cond.end, !dbg !6227

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv13, %cond.true ], [ %conv17, %cond.false ], !dbg !6227
  %conv18 = trunc i32 %cond to i16, !dbg !6227
  %12 = load i16*, i16** %out, align 8, !dbg !6228
  store i16 %conv18, i16* %12, align 2, !dbg !6229
  ret void, !dbg !6230
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_7_9_write(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !6231 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %out = alloca i16*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !6232, metadata !DIExpression()), !dbg !6233
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6234, metadata !DIExpression()), !dbg !6235
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6236, metadata !DIExpression()), !dbg !6237
  call void @llvm.dbg.declare(metadata i16** %out, metadata !6238, metadata !DIExpression()), !dbg !6239
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !6240
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 6, !dbg !6241
  %1 = load i8*, i8** %work_buf, align 8, !dbg !6241
  %2 = bitcast i8* %1 to i16*, !dbg !6240
  store i16* %2, i16** %out, align 8, !dbg !6239
  %3 = load i32, i32* %reg.addr, align 4, !dbg !6242
  %shl = shl i32 %3, 9, !dbg !6242
  %4 = load i32, i32* %val.addr, align 4, !dbg !6242
  %or = or i32 %shl, %4, !dbg !6242
  %conv = trunc i32 %or to i16, !dbg !6242
  %5 = call i1 @llvm.is.constant.i16(i16 %conv), !dbg !6242
  br i1 %5, label %cond.true, label %cond.false, !dbg !6242

cond.true:                                        ; preds = %entry
  %6 = load i32, i32* %reg.addr, align 4, !dbg !6242
  %shl1 = shl i32 %6, 9, !dbg !6242
  %7 = load i32, i32* %val.addr, align 4, !dbg !6242
  %or2 = or i32 %shl1, %7, !dbg !6242
  %conv3 = trunc i32 %or2 to i16, !dbg !6242
  %conv4 = zext i16 %conv3 to i32, !dbg !6242
  %and = and i32 %conv4, 255, !dbg !6242
  %shl5 = shl i32 %and, 8, !dbg !6242
  %8 = load i32, i32* %reg.addr, align 4, !dbg !6242
  %shl6 = shl i32 %8, 9, !dbg !6242
  %9 = load i32, i32* %val.addr, align 4, !dbg !6242
  %or7 = or i32 %shl6, %9, !dbg !6242
  %conv8 = trunc i32 %or7 to i16, !dbg !6242
  %conv9 = zext i16 %conv8 to i32, !dbg !6242
  %and10 = and i32 %conv9, 65280, !dbg !6242
  %shr = ashr i32 %and10, 8, !dbg !6242
  %or11 = or i32 %shl5, %shr, !dbg !6242
  %conv12 = trunc i32 %or11 to i16, !dbg !6242
  %conv13 = zext i16 %conv12 to i32, !dbg !6242
  br label %cond.end, !dbg !6242

cond.false:                                       ; preds = %entry
  %10 = load i32, i32* %reg.addr, align 4, !dbg !6242
  %shl14 = shl i32 %10, 9, !dbg !6242
  %11 = load i32, i32* %val.addr, align 4, !dbg !6242
  %or15 = or i32 %shl14, %11, !dbg !6242
  %conv16 = trunc i32 %or15 to i16, !dbg !6242
  %call = call zeroext i16 @__fswab16(i16 zeroext %conv16) #12, !dbg !6242
  %conv17 = zext i16 %call to i32, !dbg !6242
  br label %cond.end, !dbg !6242

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv13, %cond.true ], [ %conv17, %cond.false ], !dbg !6242
  %conv18 = trunc i32 %cond to i16, !dbg !6242
  %12 = load i16*, i16** %out, align 8, !dbg !6243
  store i16 %conv18, i16* %12, align 2, !dbg !6244
  ret void, !dbg !6245
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_10_14_write(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !6246 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %out = alloca i8*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !6247, metadata !DIExpression()), !dbg !6248
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6249, metadata !DIExpression()), !dbg !6250
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6251, metadata !DIExpression()), !dbg !6252
  call void @llvm.dbg.declare(metadata i8** %out, metadata !6253, metadata !DIExpression()), !dbg !6254
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !6255
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 6, !dbg !6256
  %1 = load i8*, i8** %work_buf, align 8, !dbg !6256
  store i8* %1, i8** %out, align 8, !dbg !6254
  %2 = load i32, i32* %val.addr, align 4, !dbg !6257
  %conv = trunc i32 %2 to i8, !dbg !6257
  %3 = load i8*, i8** %out, align 8, !dbg !6258
  %arrayidx = getelementptr i8, i8* %3, i64 2, !dbg !6258
  store i8 %conv, i8* %arrayidx, align 1, !dbg !6259
  %4 = load i32, i32* %val.addr, align 4, !dbg !6260
  %shr = lshr i32 %4, 8, !dbg !6261
  %5 = load i32, i32* %reg.addr, align 4, !dbg !6262
  %shl = shl i32 %5, 6, !dbg !6263
  %or = or i32 %shr, %shl, !dbg !6264
  %conv1 = trunc i32 %or to i8, !dbg !6265
  %6 = load i8*, i8** %out, align 8, !dbg !6266
  %arrayidx2 = getelementptr i8, i8* %6, i64 1, !dbg !6266
  store i8 %conv1, i8* %arrayidx2, align 1, !dbg !6267
  %7 = load i32, i32* %reg.addr, align 4, !dbg !6268
  %shr3 = lshr i32 %7, 2, !dbg !6269
  %conv4 = trunc i32 %shr3 to i8, !dbg !6268
  %8 = load i8*, i8** %out, align 8, !dbg !6270
  %arrayidx5 = getelementptr i8, i8* %8, i64 0, !dbg !6270
  store i8 %conv4, i8* %arrayidx5, align 1, !dbg !6271
  ret void, !dbg !6272
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_12_20_write(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !6273 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %out = alloca i8*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !6274, metadata !DIExpression()), !dbg !6275
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6276, metadata !DIExpression()), !dbg !6277
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6278, metadata !DIExpression()), !dbg !6279
  call void @llvm.dbg.declare(metadata i8** %out, metadata !6280, metadata !DIExpression()), !dbg !6281
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !6282
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 6, !dbg !6283
  %1 = load i8*, i8** %work_buf, align 8, !dbg !6283
  store i8* %1, i8** %out, align 8, !dbg !6281
  %2 = load i32, i32* %reg.addr, align 4, !dbg !6284
  %shr = lshr i32 %2, 4, !dbg !6285
  %conv = trunc i32 %shr to i8, !dbg !6284
  %3 = load i8*, i8** %out, align 8, !dbg !6286
  %arrayidx = getelementptr i8, i8* %3, i64 0, !dbg !6286
  store i8 %conv, i8* %arrayidx, align 1, !dbg !6287
  %4 = load i32, i32* %reg.addr, align 4, !dbg !6288
  %shl = shl i32 %4, 4, !dbg !6289
  %5 = load i32, i32* %val.addr, align 4, !dbg !6290
  %shr1 = lshr i32 %5, 16, !dbg !6291
  %or = or i32 %shl, %shr1, !dbg !6292
  %conv2 = trunc i32 %or to i8, !dbg !6293
  %6 = load i8*, i8** %out, align 8, !dbg !6294
  %arrayidx3 = getelementptr i8, i8* %6, i64 1, !dbg !6294
  store i8 %conv2, i8* %arrayidx3, align 1, !dbg !6295
  %7 = load i32, i32* %val.addr, align 4, !dbg !6296
  %shr4 = lshr i32 %7, 8, !dbg !6297
  %conv5 = trunc i32 %shr4 to i8, !dbg !6296
  %8 = load i8*, i8** %out, align 8, !dbg !6298
  %arrayidx6 = getelementptr i8, i8* %8, i64 2, !dbg !6298
  store i8 %conv5, i8* %arrayidx6, align 1, !dbg !6299
  %9 = load i32, i32* %val.addr, align 4, !dbg !6300
  %conv7 = trunc i32 %9 to i8, !dbg !6300
  %10 = load i8*, i8** %out, align 8, !dbg !6301
  %arrayidx8 = getelementptr i8, i8* %10, i64 3, !dbg !6301
  store i8 %conv7, i8* %arrayidx8, align 1, !dbg !6302
  ret void, !dbg !6303
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_8(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6304 {
entry:
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %b = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6305, metadata !DIExpression()), !dbg !6306
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6307, metadata !DIExpression()), !dbg !6308
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6309, metadata !DIExpression()), !dbg !6310
  call void @llvm.dbg.declare(metadata i8** %b, metadata !6311, metadata !DIExpression()), !dbg !6312
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6313
  store i8* %0, i8** %b, align 8, !dbg !6312
  %1 = load i32, i32* %val.addr, align 4, !dbg !6314
  %2 = load i32, i32* %shift.addr, align 4, !dbg !6315
  %shl = shl i32 %1, %2, !dbg !6316
  %conv = trunc i32 %shl to i8, !dbg !6314
  %3 = load i8*, i8** %b, align 8, !dbg !6317
  %arrayidx = getelementptr i8, i8* %3, i64 0, !dbg !6317
  store i8 %conv, i8* %arrayidx, align 1, !dbg !6318
  ret void, !dbg !6319
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_16_be(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6320 {
entry:
  %val.addr.i = alloca i16, align 2
  call void @llvm.dbg.declare(metadata i16* %val.addr.i, metadata !6321, metadata !DIExpression()), !dbg !6326
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6328, metadata !DIExpression()), !dbg !6329
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6330, metadata !DIExpression()), !dbg !6331
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6332, metadata !DIExpression()), !dbg !6333
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6334, metadata !DIExpression()), !dbg !6335
  %0 = load i32, i32* %val.addr, align 4, !dbg !6336
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6337
  %shl = shl i32 %0, %1, !dbg !6338
  %conv = trunc i32 %shl to i16, !dbg !6336
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6339
  store i16 %conv, i16* %val.addr.i, align 2
  store i8* %2, i8** %p.addr.i, align 8
  %3 = load i16, i16* %val.addr.i, align 2, !dbg !6340
  %4 = call i1 @llvm.is.constant.i16(i16 %3) #10, !dbg !6340
  br i1 %4, label %cond.true.i, label %cond.false.i, !dbg !6340

cond.true.i:                                      ; preds = %entry
  %5 = load i16, i16* %val.addr.i, align 2, !dbg !6340
  %conv.i = zext i16 %5 to i32, !dbg !6340
  %and.i = and i32 %conv.i, 255, !dbg !6340
  %shl.i = shl i32 %and.i, 8, !dbg !6340
  %6 = load i16, i16* %val.addr.i, align 2, !dbg !6340
  %conv1.i = zext i16 %6 to i32, !dbg !6340
  %and2.i = and i32 %conv1.i, 65280, !dbg !6340
  %shr.i = ashr i32 %and2.i, 8, !dbg !6340
  %or.i = or i32 %shl.i, %shr.i, !dbg !6340
  %conv3.i = trunc i32 %or.i to i16, !dbg !6340
  %conv4.i = zext i16 %conv3.i to i32, !dbg !6340
  br label %put_unaligned_be16.exit, !dbg !6340

cond.false.i:                                     ; preds = %entry
  %7 = load i16, i16* %val.addr.i, align 2, !dbg !6340
  %call.i = call zeroext i16 @__fswab16(i16 zeroext %7) #12, !dbg !6340
  %conv5.i = zext i16 %call.i to i32, !dbg !6340
  br label %put_unaligned_be16.exit, !dbg !6340

put_unaligned_be16.exit:                          ; preds = %cond.true.i, %cond.false.i
  %cond.i = phi i32 [ %conv4.i, %cond.true.i ], [ %conv5.i, %cond.false.i ], !dbg !6340
  %conv6.i = trunc i32 %cond.i to i16, !dbg !6340
  %8 = load i8*, i8** %p.addr.i, align 8, !dbg !6341
  %9 = bitcast i8* %8 to i16*, !dbg !6342
  store i16 %conv6.i, i16* %9, align 2, !dbg !6343
  ret void, !dbg !6344
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_16_le(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6345 {
entry:
  %val.addr.i = alloca i16, align 2
  call void @llvm.dbg.declare(metadata i16* %val.addr.i, metadata !6346, metadata !DIExpression()), !dbg !6348
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6350, metadata !DIExpression()), !dbg !6351
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6352, metadata !DIExpression()), !dbg !6353
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6354, metadata !DIExpression()), !dbg !6355
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6356, metadata !DIExpression()), !dbg !6357
  %0 = load i32, i32* %val.addr, align 4, !dbg !6358
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6359
  %shl = shl i32 %0, %1, !dbg !6360
  %conv = trunc i32 %shl to i16, !dbg !6358
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6361
  store i16 %conv, i16* %val.addr.i, align 2
  store i8* %2, i8** %p.addr.i, align 8
  %3 = load i16, i16* %val.addr.i, align 2, !dbg !6362
  %4 = load i8*, i8** %p.addr.i, align 8, !dbg !6363
  %5 = bitcast i8* %4 to i16*, !dbg !6364
  store i16 %3, i16* %5, align 2, !dbg !6365
  ret void, !dbg !6366
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_16_native(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6367 {
entry:
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %v = alloca i16, align 2
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6368, metadata !DIExpression()), !dbg !6369
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6370, metadata !DIExpression()), !dbg !6371
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6372, metadata !DIExpression()), !dbg !6373
  call void @llvm.dbg.declare(metadata i16* %v, metadata !6374, metadata !DIExpression()), !dbg !6375
  %0 = load i32, i32* %val.addr, align 4, !dbg !6376
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6377
  %shl = shl i32 %0, %1, !dbg !6378
  %conv = trunc i32 %shl to i16, !dbg !6376
  store i16 %conv, i16* %v, align 2, !dbg !6375
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6379
  %3 = bitcast i16* %v to i8*, !dbg !6380
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 2 %3, i64 2, i1 false), !dbg !6380
  ret void, !dbg !6381
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_24(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6382 {
entry:
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %b = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6383, metadata !DIExpression()), !dbg !6384
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6385, metadata !DIExpression()), !dbg !6386
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6387, metadata !DIExpression()), !dbg !6388
  call void @llvm.dbg.declare(metadata i8** %b, metadata !6389, metadata !DIExpression()), !dbg !6390
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6391
  store i8* %0, i8** %b, align 8, !dbg !6390
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6392
  %2 = load i32, i32* %val.addr, align 4, !dbg !6393
  %shl = shl i32 %2, %1, !dbg !6393
  store i32 %shl, i32* %val.addr, align 4, !dbg !6393
  %3 = load i32, i32* %val.addr, align 4, !dbg !6394
  %shr = lshr i32 %3, 16, !dbg !6395
  %conv = trunc i32 %shr to i8, !dbg !6394
  %4 = load i8*, i8** %b, align 8, !dbg !6396
  %arrayidx = getelementptr i8, i8* %4, i64 0, !dbg !6396
  store i8 %conv, i8* %arrayidx, align 1, !dbg !6397
  %5 = load i32, i32* %val.addr, align 4, !dbg !6398
  %shr1 = lshr i32 %5, 8, !dbg !6399
  %conv2 = trunc i32 %shr1 to i8, !dbg !6398
  %6 = load i8*, i8** %b, align 8, !dbg !6400
  %arrayidx3 = getelementptr i8, i8* %6, i64 1, !dbg !6400
  store i8 %conv2, i8* %arrayidx3, align 1, !dbg !6401
  %7 = load i32, i32* %val.addr, align 4, !dbg !6402
  %conv4 = trunc i32 %7 to i8, !dbg !6402
  %8 = load i8*, i8** %b, align 8, !dbg !6403
  %arrayidx5 = getelementptr i8, i8* %8, i64 2, !dbg !6403
  store i8 %conv4, i8* %arrayidx5, align 1, !dbg !6404
  ret void, !dbg !6405
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_32_be(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6406 {
entry:
  %val.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr.i, metadata !6407, metadata !DIExpression()), !dbg !6411
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6413, metadata !DIExpression()), !dbg !6414
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6415, metadata !DIExpression()), !dbg !6416
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6417, metadata !DIExpression()), !dbg !6418
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6419, metadata !DIExpression()), !dbg !6420
  %0 = load i32, i32* %val.addr, align 4, !dbg !6421
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6422
  %shl = shl i32 %0, %1, !dbg !6423
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6424
  store i32 %shl, i32* %val.addr.i, align 4
  store i8* %2, i8** %p.addr.i, align 8
  %3 = load i32, i32* %val.addr.i, align 4, !dbg !6425
  %4 = call i1 @llvm.is.constant.i32(i32 %3) #10, !dbg !6425
  br i1 %4, label %cond.true.i, label %cond.false.i, !dbg !6425

cond.true.i:                                      ; preds = %entry
  %5 = load i32, i32* %val.addr.i, align 4, !dbg !6425
  %and.i = and i32 %5, 255, !dbg !6425
  %shl.i = shl i32 %and.i, 24, !dbg !6425
  %6 = load i32, i32* %val.addr.i, align 4, !dbg !6425
  %and1.i = and i32 %6, 65280, !dbg !6425
  %shl2.i = shl i32 %and1.i, 8, !dbg !6425
  %or.i = or i32 %shl.i, %shl2.i, !dbg !6425
  %7 = load i32, i32* %val.addr.i, align 4, !dbg !6425
  %and3.i = and i32 %7, 16711680, !dbg !6425
  %shr.i = lshr i32 %and3.i, 8, !dbg !6425
  %or4.i = or i32 %or.i, %shr.i, !dbg !6425
  %8 = load i32, i32* %val.addr.i, align 4, !dbg !6425
  %and5.i = and i32 %8, -16777216, !dbg !6425
  %shr6.i = lshr i32 %and5.i, 24, !dbg !6425
  %or7.i = or i32 %or4.i, %shr6.i, !dbg !6425
  br label %put_unaligned_be32.exit, !dbg !6425

cond.false.i:                                     ; preds = %entry
  %9 = load i32, i32* %val.addr.i, align 4, !dbg !6425
  %call.i = call i32 @__fswab32(i32 %9) #12, !dbg !6425
  br label %put_unaligned_be32.exit, !dbg !6425

put_unaligned_be32.exit:                          ; preds = %cond.true.i, %cond.false.i
  %cond.i = phi i32 [ %or7.i, %cond.true.i ], [ %call.i, %cond.false.i ], !dbg !6425
  %10 = load i8*, i8** %p.addr.i, align 8, !dbg !6426
  %11 = bitcast i8* %10 to i32*, !dbg !6427
  store i32 %cond.i, i32* %11, align 4, !dbg !6428
  ret void, !dbg !6429
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_32_le(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6430 {
entry:
  %val.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr.i, metadata !6431, metadata !DIExpression()), !dbg !6433
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6435, metadata !DIExpression()), !dbg !6436
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6437, metadata !DIExpression()), !dbg !6438
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6439, metadata !DIExpression()), !dbg !6440
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6441, metadata !DIExpression()), !dbg !6442
  %0 = load i32, i32* %val.addr, align 4, !dbg !6443
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6444
  %shl = shl i32 %0, %1, !dbg !6445
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6446
  store i32 %shl, i32* %val.addr.i, align 4
  store i8* %2, i8** %p.addr.i, align 8
  %3 = load i32, i32* %val.addr.i, align 4, !dbg !6447
  %4 = load i8*, i8** %p.addr.i, align 8, !dbg !6448
  %5 = bitcast i8* %4 to i32*, !dbg !6449
  store i32 %3, i32* %5, align 4, !dbg !6450
  ret void, !dbg !6451
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_32_native(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6452 {
entry:
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %v = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6453, metadata !DIExpression()), !dbg !6454
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6455, metadata !DIExpression()), !dbg !6456
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6457, metadata !DIExpression()), !dbg !6458
  call void @llvm.dbg.declare(metadata i32* %v, metadata !6459, metadata !DIExpression()), !dbg !6460
  %0 = load i32, i32* %val.addr, align 4, !dbg !6461
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6462
  %shl = shl i32 %0, %1, !dbg !6463
  store i32 %shl, i32* %v, align 4, !dbg !6460
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6464
  %3 = bitcast i32* %v to i8*, !dbg !6465
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 4 %3, i64 4, i1 false), !dbg !6465
  ret void, !dbg !6466
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_64_be(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6467 {
entry:
  %val.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %val.addr.i, metadata !6468, metadata !DIExpression()), !dbg !6472
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6474, metadata !DIExpression()), !dbg !6475
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6476, metadata !DIExpression()), !dbg !6477
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6478, metadata !DIExpression()), !dbg !6479
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6480, metadata !DIExpression()), !dbg !6481
  %0 = load i32, i32* %val.addr, align 4, !dbg !6482
  %conv = zext i32 %0 to i64, !dbg !6483
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6484
  %sh_prom = zext i32 %1 to i64, !dbg !6485
  %shl = shl i64 %conv, %sh_prom, !dbg !6485
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6486
  store i64 %shl, i64* %val.addr.i, align 8
  store i8* %2, i8** %p.addr.i, align 8
  %3 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %4 = call i1 @llvm.is.constant.i64(i64 %3) #10, !dbg !6487
  br i1 %4, label %cond.true.i, label %cond.false.i, !dbg !6487

cond.true.i:                                      ; preds = %entry
  %5 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %and.i = and i64 %5, 255, !dbg !6487
  %shl.i = shl i64 %and.i, 56, !dbg !6487
  %6 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %and1.i = and i64 %6, 65280, !dbg !6487
  %shl2.i = shl i64 %and1.i, 40, !dbg !6487
  %or.i = or i64 %shl.i, %shl2.i, !dbg !6487
  %7 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %and3.i = and i64 %7, 16711680, !dbg !6487
  %shl4.i = shl i64 %and3.i, 24, !dbg !6487
  %or5.i = or i64 %or.i, %shl4.i, !dbg !6487
  %8 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %and6.i = and i64 %8, 4278190080, !dbg !6487
  %shl7.i = shl i64 %and6.i, 8, !dbg !6487
  %or8.i = or i64 %or5.i, %shl7.i, !dbg !6487
  %9 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %and9.i = and i64 %9, 1095216660480, !dbg !6487
  %shr.i = lshr i64 %and9.i, 8, !dbg !6487
  %or10.i = or i64 %or8.i, %shr.i, !dbg !6487
  %10 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %and11.i = and i64 %10, 280375465082880, !dbg !6487
  %shr12.i = lshr i64 %and11.i, 24, !dbg !6487
  %or13.i = or i64 %or10.i, %shr12.i, !dbg !6487
  %11 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %and14.i = and i64 %11, 71776119061217280, !dbg !6487
  %shr15.i = lshr i64 %and14.i, 40, !dbg !6487
  %or16.i = or i64 %or13.i, %shr15.i, !dbg !6487
  %12 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %and17.i = and i64 %12, -72057594037927936, !dbg !6487
  %shr18.i = lshr i64 %and17.i, 56, !dbg !6487
  %or19.i = or i64 %or16.i, %shr18.i, !dbg !6487
  br label %put_unaligned_be64.exit, !dbg !6487

cond.false.i:                                     ; preds = %entry
  %13 = load i64, i64* %val.addr.i, align 8, !dbg !6487
  %call.i = call i64 @__fswab64(i64 %13) #12, !dbg !6487
  br label %put_unaligned_be64.exit, !dbg !6487

put_unaligned_be64.exit:                          ; preds = %cond.true.i, %cond.false.i
  %cond.i = phi i64 [ %or19.i, %cond.true.i ], [ %call.i, %cond.false.i ], !dbg !6487
  %14 = load i8*, i8** %p.addr.i, align 8, !dbg !6488
  %15 = bitcast i8* %14 to i64*, !dbg !6489
  store i64 %cond.i, i64* %15, align 8, !dbg !6490
  ret void, !dbg !6491
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_64_le(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6492 {
entry:
  %val.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %val.addr.i, metadata !6493, metadata !DIExpression()), !dbg !6495
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6497, metadata !DIExpression()), !dbg !6498
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6499, metadata !DIExpression()), !dbg !6500
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6501, metadata !DIExpression()), !dbg !6502
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6503, metadata !DIExpression()), !dbg !6504
  %0 = load i32, i32* %val.addr, align 4, !dbg !6505
  %conv = zext i32 %0 to i64, !dbg !6506
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6507
  %sh_prom = zext i32 %1 to i64, !dbg !6508
  %shl = shl i64 %conv, %sh_prom, !dbg !6508
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6509
  store i64 %shl, i64* %val.addr.i, align 8
  store i8* %2, i8** %p.addr.i, align 8
  %3 = load i64, i64* %val.addr.i, align 8, !dbg !6510
  %4 = load i8*, i8** %p.addr.i, align 8, !dbg !6511
  %5 = bitcast i8* %4 to i64*, !dbg !6512
  store i64 %3, i64* %5, align 8, !dbg !6513
  ret void, !dbg !6514
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_format_64_native(i8* %buf, i32 %val, i32 %shift) #0 !dbg !6515 {
entry:
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32, align 4
  %shift.addr = alloca i32, align 4
  %v = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6516, metadata !DIExpression()), !dbg !6517
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6518, metadata !DIExpression()), !dbg !6519
  store i32 %shift, i32* %shift.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %shift.addr, metadata !6520, metadata !DIExpression()), !dbg !6521
  call void @llvm.dbg.declare(metadata i64* %v, metadata !6522, metadata !DIExpression()), !dbg !6523
  %0 = load i32, i32* %val.addr, align 4, !dbg !6524
  %conv = zext i32 %0 to i64, !dbg !6525
  %1 = load i32, i32* %shift.addr, align 4, !dbg !6526
  %sh_prom = zext i32 %1 to i64, !dbg !6527
  %shl = shl i64 %conv, %sh_prom, !dbg !6527
  store i64 %shl, i64* %v, align 8, !dbg !6523
  %2 = load i8*, i8** %buf.addr, align 8, !dbg !6528
  %3 = bitcast i64* %v to i8*, !dbg !6529
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %2, i8* align 8 %3, i64 8, i1 false), !dbg !6529
  ret void, !dbg !6530
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_parse_inplace_noop(i8* %buf) #0 !dbg !6531 {
entry:
  %buf.addr = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6532, metadata !DIExpression()), !dbg !6533
  ret void, !dbg !6534
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_8(i8* %buf) #0 !dbg !6535 {
entry:
  %buf.addr = alloca i8*, align 8
  %b = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6536, metadata !DIExpression()), !dbg !6537
  call void @llvm.dbg.declare(metadata i8** %b, metadata !6538, metadata !DIExpression()), !dbg !6541
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6542
  store i8* %0, i8** %b, align 8, !dbg !6541
  %1 = load i8*, i8** %b, align 8, !dbg !6543
  %arrayidx = getelementptr i8, i8* %1, i64 0, !dbg !6543
  %2 = load i8, i8* %arrayidx, align 1, !dbg !6543
  %conv = zext i8 %2 to i32, !dbg !6543
  ret i32 %conv, !dbg !6544
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_16_be(i8* %buf) #0 !dbg !6545 {
entry:
  %p.addr.i.i.i = alloca i16*, align 8
  call void @llvm.dbg.declare(metadata i16** %p.addr.i.i.i, metadata !6546, metadata !DIExpression()), !dbg !6553
  %p.addr.i.i = alloca i16*, align 8
  call void @llvm.dbg.declare(metadata i16** %p.addr.i.i, metadata !6566, metadata !DIExpression()), !dbg !6567
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6568, metadata !DIExpression()), !dbg !6569
  %buf.addr = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6570, metadata !DIExpression()), !dbg !6571
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6572
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6573
  %2 = bitcast i8* %1 to i16*, !dbg !6574
  store i16* %2, i16** %p.addr.i.i, align 8
  %3 = load i16*, i16** %p.addr.i.i, align 8, !dbg !6575
  store i16* %3, i16** %p.addr.i.i.i, align 8
  %4 = load i16*, i16** %p.addr.i.i.i, align 8, !dbg !6576
  %5 = load i16, i16* %4, align 2, !dbg !6576
  %6 = call i1 @llvm.is.constant.i16(i16 %5) #10, !dbg !6576
  br i1 %6, label %cond.true.i.i.i, label %cond.false.i.i.i, !dbg !6576

cond.true.i.i.i:                                  ; preds = %entry
  %7 = load i16*, i16** %p.addr.i.i.i, align 8, !dbg !6576
  %8 = load i16, i16* %7, align 2, !dbg !6576
  %conv.i.i.i = zext i16 %8 to i32, !dbg !6576
  %and.i.i.i = and i32 %conv.i.i.i, 255, !dbg !6576
  %shl.i.i.i = shl i32 %and.i.i.i, 8, !dbg !6576
  %9 = load i16*, i16** %p.addr.i.i.i, align 8, !dbg !6576
  %10 = load i16, i16* %9, align 2, !dbg !6576
  %conv1.i.i.i = zext i16 %10 to i32, !dbg !6576
  %and2.i.i.i = and i32 %conv1.i.i.i, 65280, !dbg !6576
  %shr.i.i.i = ashr i32 %and2.i.i.i, 8, !dbg !6576
  %or.i.i.i = or i32 %shl.i.i.i, %shr.i.i.i, !dbg !6576
  %conv3.i.i.i = trunc i32 %or.i.i.i to i16, !dbg !6576
  %conv4.i.i.i = zext i16 %conv3.i.i.i to i32, !dbg !6576
  br label %get_unaligned_be16.exit, !dbg !6576

cond.false.i.i.i:                                 ; preds = %entry
  %11 = load i16*, i16** %p.addr.i.i.i, align 8, !dbg !6576
  %12 = load i16, i16* %11, align 2, !dbg !6576
  %call.i.i.i = call zeroext i16 @__fswab16(i16 zeroext %12) #12, !dbg !6576
  %conv5.i.i.i = zext i16 %call.i.i.i to i32, !dbg !6576
  br label %get_unaligned_be16.exit, !dbg !6576

get_unaligned_be16.exit:                          ; preds = %cond.true.i.i.i, %cond.false.i.i.i
  %cond.i.i.i = phi i32 [ %conv4.i.i.i, %cond.true.i.i.i ], [ %conv5.i.i.i, %cond.false.i.i.i ], !dbg !6576
  %conv6.i.i.i = trunc i32 %cond.i.i.i to i16, !dbg !6576
  %conv = zext i16 %conv6.i.i.i to i32, !dbg !6577
  ret i32 %conv, !dbg !6578
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_parse_16_be_inplace(i8* %buf) #0 !dbg !6579 {
entry:
  %p.addr.i.i.i = alloca i16*, align 8
  call void @llvm.dbg.declare(metadata i16** %p.addr.i.i.i, metadata !6546, metadata !DIExpression()), !dbg !6580
  %p.addr.i.i = alloca i16*, align 8
  call void @llvm.dbg.declare(metadata i16** %p.addr.i.i, metadata !6566, metadata !DIExpression()), !dbg !6584
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6568, metadata !DIExpression()), !dbg !6585
  %buf.addr = alloca i8*, align 8
  %v = alloca i16, align 2
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6586, metadata !DIExpression()), !dbg !6587
  call void @llvm.dbg.declare(metadata i16* %v, metadata !6588, metadata !DIExpression()), !dbg !6589
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6590
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6591
  %2 = bitcast i8* %1 to i16*, !dbg !6592
  store i16* %2, i16** %p.addr.i.i, align 8
  %3 = load i16*, i16** %p.addr.i.i, align 8, !dbg !6593
  store i16* %3, i16** %p.addr.i.i.i, align 8
  %4 = load i16*, i16** %p.addr.i.i.i, align 8, !dbg !6594
  %5 = load i16, i16* %4, align 2, !dbg !6594
  %6 = call i1 @llvm.is.constant.i16(i16 %5) #10, !dbg !6594
  br i1 %6, label %cond.true.i.i.i, label %cond.false.i.i.i, !dbg !6594

cond.true.i.i.i:                                  ; preds = %entry
  %7 = load i16*, i16** %p.addr.i.i.i, align 8, !dbg !6594
  %8 = load i16, i16* %7, align 2, !dbg !6594
  %conv.i.i.i = zext i16 %8 to i32, !dbg !6594
  %and.i.i.i = and i32 %conv.i.i.i, 255, !dbg !6594
  %shl.i.i.i = shl i32 %and.i.i.i, 8, !dbg !6594
  %9 = load i16*, i16** %p.addr.i.i.i, align 8, !dbg !6594
  %10 = load i16, i16* %9, align 2, !dbg !6594
  %conv1.i.i.i = zext i16 %10 to i32, !dbg !6594
  %and2.i.i.i = and i32 %conv1.i.i.i, 65280, !dbg !6594
  %shr.i.i.i = ashr i32 %and2.i.i.i, 8, !dbg !6594
  %or.i.i.i = or i32 %shl.i.i.i, %shr.i.i.i, !dbg !6594
  %conv3.i.i.i = trunc i32 %or.i.i.i to i16, !dbg !6594
  %conv4.i.i.i = zext i16 %conv3.i.i.i to i32, !dbg !6594
  br label %get_unaligned_be16.exit, !dbg !6594

cond.false.i.i.i:                                 ; preds = %entry
  %11 = load i16*, i16** %p.addr.i.i.i, align 8, !dbg !6594
  %12 = load i16, i16* %11, align 2, !dbg !6594
  %call.i.i.i = call zeroext i16 @__fswab16(i16 zeroext %12) #12, !dbg !6594
  %conv5.i.i.i = zext i16 %call.i.i.i to i32, !dbg !6594
  br label %get_unaligned_be16.exit, !dbg !6594

get_unaligned_be16.exit:                          ; preds = %cond.true.i.i.i, %cond.false.i.i.i
  %cond.i.i.i = phi i32 [ %conv4.i.i.i, %cond.true.i.i.i ], [ %conv5.i.i.i, %cond.false.i.i.i ], !dbg !6594
  %conv6.i.i.i = trunc i32 %cond.i.i.i to i16, !dbg !6594
  store i16 %conv6.i.i.i, i16* %v, align 2, !dbg !6589
  %13 = load i8*, i8** %buf.addr, align 8, !dbg !6595
  %14 = bitcast i16* %v to i8*, !dbg !6596
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 2 %14, i64 2, i1 false), !dbg !6596
  ret void, !dbg !6597
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_16_le(i8* %buf) #0 !dbg !6598 {
entry:
  %p.addr.i.i = alloca i16*, align 8
  call void @llvm.dbg.declare(metadata i16** %p.addr.i.i, metadata !6599, metadata !DIExpression()), !dbg !6605
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6609, metadata !DIExpression()), !dbg !6610
  %buf.addr = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6611, metadata !DIExpression()), !dbg !6612
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6613
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6614
  %2 = bitcast i8* %1 to i16*, !dbg !6615
  store i16* %2, i16** %p.addr.i.i, align 8
  %3 = load i16*, i16** %p.addr.i.i, align 8, !dbg !6616
  %4 = load i16, i16* %3, align 2, !dbg !6617
  %conv = zext i16 %4 to i32, !dbg !6618
  ret i32 %conv, !dbg !6619
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_parse_16_le_inplace(i8* %buf) #0 !dbg !6620 {
entry:
  %p.addr.i.i = alloca i16*, align 8
  call void @llvm.dbg.declare(metadata i16** %p.addr.i.i, metadata !6599, metadata !DIExpression()), !dbg !6621
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6609, metadata !DIExpression()), !dbg !6624
  %buf.addr = alloca i8*, align 8
  %v = alloca i16, align 2
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6625, metadata !DIExpression()), !dbg !6626
  call void @llvm.dbg.declare(metadata i16* %v, metadata !6627, metadata !DIExpression()), !dbg !6628
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6629
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6630
  %2 = bitcast i8* %1 to i16*, !dbg !6631
  store i16* %2, i16** %p.addr.i.i, align 8
  %3 = load i16*, i16** %p.addr.i.i, align 8, !dbg !6632
  %4 = load i16, i16* %3, align 2, !dbg !6633
  store i16 %4, i16* %v, align 2, !dbg !6628
  %5 = load i8*, i8** %buf.addr, align 8, !dbg !6634
  %6 = bitcast i16* %v to i8*, !dbg !6635
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 2 %6, i64 2, i1 false), !dbg !6635
  ret void, !dbg !6636
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_16_native(i8* %buf) #0 !dbg !6637 {
entry:
  %buf.addr = alloca i8*, align 8
  %v = alloca i16, align 2
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6638, metadata !DIExpression()), !dbg !6639
  call void @llvm.dbg.declare(metadata i16* %v, metadata !6640, metadata !DIExpression()), !dbg !6641
  %0 = bitcast i16* %v to i8*, !dbg !6642
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !6643
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 2 %0, i8* align 1 %1, i64 2, i1 false), !dbg !6642
  %2 = load i16, i16* %v, align 2, !dbg !6644
  %conv = zext i16 %2 to i32, !dbg !6644
  ret i32 %conv, !dbg !6645
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_24(i8* %buf) #0 !dbg !6646 {
entry:
  %buf.addr = alloca i8*, align 8
  %b = alloca i8*, align 8
  %ret = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6647, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.declare(metadata i8** %b, metadata !6649, metadata !DIExpression()), !dbg !6650
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6651
  store i8* %0, i8** %b, align 8, !dbg !6650
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6652, metadata !DIExpression()), !dbg !6653
  %1 = load i8*, i8** %b, align 8, !dbg !6654
  %arrayidx = getelementptr i8, i8* %1, i64 2, !dbg !6654
  %2 = load i8, i8* %arrayidx, align 1, !dbg !6654
  %conv = zext i8 %2 to i32, !dbg !6654
  store i32 %conv, i32* %ret, align 4, !dbg !6653
  %3 = load i8*, i8** %b, align 8, !dbg !6655
  %arrayidx1 = getelementptr i8, i8* %3, i64 1, !dbg !6655
  %4 = load i8, i8* %arrayidx1, align 1, !dbg !6655
  %conv2 = zext i8 %4 to i32, !dbg !6656
  %shl = shl i32 %conv2, 8, !dbg !6657
  %5 = load i32, i32* %ret, align 4, !dbg !6658
  %or = or i32 %5, %shl, !dbg !6658
  store i32 %or, i32* %ret, align 4, !dbg !6658
  %6 = load i8*, i8** %b, align 8, !dbg !6659
  %arrayidx3 = getelementptr i8, i8* %6, i64 0, !dbg !6659
  %7 = load i8, i8* %arrayidx3, align 1, !dbg !6659
  %conv4 = zext i8 %7 to i32, !dbg !6660
  %shl5 = shl i32 %conv4, 16, !dbg !6661
  %8 = load i32, i32* %ret, align 4, !dbg !6662
  %or6 = or i32 %8, %shl5, !dbg !6662
  store i32 %or6, i32* %ret, align 4, !dbg !6662
  %9 = load i32, i32* %ret, align 4, !dbg !6663
  ret i32 %9, !dbg !6664
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_32_be(i8* %buf) #0 !dbg !6665 {
entry:
  %p.addr.i.i.i = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %p.addr.i.i.i, metadata !6666, metadata !DIExpression()), !dbg !6672
  %p.addr.i.i = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %p.addr.i.i, metadata !6684, metadata !DIExpression()), !dbg !6685
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6686, metadata !DIExpression()), !dbg !6687
  %buf.addr = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6688, metadata !DIExpression()), !dbg !6689
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6690
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6691
  %2 = bitcast i8* %1 to i32*, !dbg !6692
  store i32* %2, i32** %p.addr.i.i, align 8
  %3 = load i32*, i32** %p.addr.i.i, align 8, !dbg !6693
  store i32* %3, i32** %p.addr.i.i.i, align 8
  %4 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6694
  %5 = load i32, i32* %4, align 4, !dbg !6694
  %6 = call i1 @llvm.is.constant.i32(i32 %5) #10, !dbg !6694
  br i1 %6, label %cond.true.i.i.i, label %cond.false.i.i.i, !dbg !6694

cond.true.i.i.i:                                  ; preds = %entry
  %7 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6694
  %8 = load i32, i32* %7, align 4, !dbg !6694
  %and.i.i.i = and i32 %8, 255, !dbg !6694
  %shl.i.i.i = shl i32 %and.i.i.i, 24, !dbg !6694
  %9 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6694
  %10 = load i32, i32* %9, align 4, !dbg !6694
  %and1.i.i.i = and i32 %10, 65280, !dbg !6694
  %shl2.i.i.i = shl i32 %and1.i.i.i, 8, !dbg !6694
  %or.i.i.i = or i32 %shl.i.i.i, %shl2.i.i.i, !dbg !6694
  %11 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6694
  %12 = load i32, i32* %11, align 4, !dbg !6694
  %and3.i.i.i = and i32 %12, 16711680, !dbg !6694
  %shr.i.i.i = lshr i32 %and3.i.i.i, 8, !dbg !6694
  %or4.i.i.i = or i32 %or.i.i.i, %shr.i.i.i, !dbg !6694
  %13 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6694
  %14 = load i32, i32* %13, align 4, !dbg !6694
  %and5.i.i.i = and i32 %14, -16777216, !dbg !6694
  %shr6.i.i.i = lshr i32 %and5.i.i.i, 24, !dbg !6694
  %or7.i.i.i = or i32 %or4.i.i.i, %shr6.i.i.i, !dbg !6694
  br label %get_unaligned_be32.exit, !dbg !6694

cond.false.i.i.i:                                 ; preds = %entry
  %15 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6694
  %16 = load i32, i32* %15, align 4, !dbg !6694
  %call.i.i.i = call i32 @__fswab32(i32 %16) #12, !dbg !6694
  br label %get_unaligned_be32.exit, !dbg !6694

get_unaligned_be32.exit:                          ; preds = %cond.true.i.i.i, %cond.false.i.i.i
  %cond.i.i.i = phi i32 [ %or7.i.i.i, %cond.true.i.i.i ], [ %call.i.i.i, %cond.false.i.i.i ], !dbg !6694
  ret i32 %cond.i.i.i, !dbg !6695
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_parse_32_be_inplace(i8* %buf) #0 !dbg !6696 {
entry:
  %p.addr.i.i.i = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %p.addr.i.i.i, metadata !6666, metadata !DIExpression()), !dbg !6697
  %p.addr.i.i = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %p.addr.i.i, metadata !6684, metadata !DIExpression()), !dbg !6701
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6686, metadata !DIExpression()), !dbg !6702
  %buf.addr = alloca i8*, align 8
  %v = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6703, metadata !DIExpression()), !dbg !6704
  call void @llvm.dbg.declare(metadata i32* %v, metadata !6705, metadata !DIExpression()), !dbg !6706
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6707
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6708
  %2 = bitcast i8* %1 to i32*, !dbg !6709
  store i32* %2, i32** %p.addr.i.i, align 8
  %3 = load i32*, i32** %p.addr.i.i, align 8, !dbg !6710
  store i32* %3, i32** %p.addr.i.i.i, align 8
  %4 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6711
  %5 = load i32, i32* %4, align 4, !dbg !6711
  %6 = call i1 @llvm.is.constant.i32(i32 %5) #10, !dbg !6711
  br i1 %6, label %cond.true.i.i.i, label %cond.false.i.i.i, !dbg !6711

cond.true.i.i.i:                                  ; preds = %entry
  %7 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6711
  %8 = load i32, i32* %7, align 4, !dbg !6711
  %and.i.i.i = and i32 %8, 255, !dbg !6711
  %shl.i.i.i = shl i32 %and.i.i.i, 24, !dbg !6711
  %9 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6711
  %10 = load i32, i32* %9, align 4, !dbg !6711
  %and1.i.i.i = and i32 %10, 65280, !dbg !6711
  %shl2.i.i.i = shl i32 %and1.i.i.i, 8, !dbg !6711
  %or.i.i.i = or i32 %shl.i.i.i, %shl2.i.i.i, !dbg !6711
  %11 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6711
  %12 = load i32, i32* %11, align 4, !dbg !6711
  %and3.i.i.i = and i32 %12, 16711680, !dbg !6711
  %shr.i.i.i = lshr i32 %and3.i.i.i, 8, !dbg !6711
  %or4.i.i.i = or i32 %or.i.i.i, %shr.i.i.i, !dbg !6711
  %13 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6711
  %14 = load i32, i32* %13, align 4, !dbg !6711
  %and5.i.i.i = and i32 %14, -16777216, !dbg !6711
  %shr6.i.i.i = lshr i32 %and5.i.i.i, 24, !dbg !6711
  %or7.i.i.i = or i32 %or4.i.i.i, %shr6.i.i.i, !dbg !6711
  br label %get_unaligned_be32.exit, !dbg !6711

cond.false.i.i.i:                                 ; preds = %entry
  %15 = load i32*, i32** %p.addr.i.i.i, align 8, !dbg !6711
  %16 = load i32, i32* %15, align 4, !dbg !6711
  %call.i.i.i = call i32 @__fswab32(i32 %16) #12, !dbg !6711
  br label %get_unaligned_be32.exit, !dbg !6711

get_unaligned_be32.exit:                          ; preds = %cond.true.i.i.i, %cond.false.i.i.i
  %cond.i.i.i = phi i32 [ %or7.i.i.i, %cond.true.i.i.i ], [ %call.i.i.i, %cond.false.i.i.i ], !dbg !6711
  store i32 %cond.i.i.i, i32* %v, align 4, !dbg !6706
  %17 = load i8*, i8** %buf.addr, align 8, !dbg !6712
  %18 = bitcast i32* %v to i8*, !dbg !6713
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 4 %18, i64 4, i1 false), !dbg !6713
  ret void, !dbg !6714
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_32_le(i8* %buf) #0 !dbg !6715 {
entry:
  %p.addr.i.i = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %p.addr.i.i, metadata !6716, metadata !DIExpression()), !dbg !6722
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6726, metadata !DIExpression()), !dbg !6727
  %buf.addr = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6728, metadata !DIExpression()), !dbg !6729
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6730
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6731
  %2 = bitcast i8* %1 to i32*, !dbg !6732
  store i32* %2, i32** %p.addr.i.i, align 8
  %3 = load i32*, i32** %p.addr.i.i, align 8, !dbg !6733
  %4 = load i32, i32* %3, align 4, !dbg !6734
  ret i32 %4, !dbg !6735
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_parse_32_le_inplace(i8* %buf) #0 !dbg !6736 {
entry:
  %p.addr.i.i = alloca i32*, align 8
  call void @llvm.dbg.declare(metadata i32** %p.addr.i.i, metadata !6716, metadata !DIExpression()), !dbg !6737
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6726, metadata !DIExpression()), !dbg !6740
  %buf.addr = alloca i8*, align 8
  %v = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6741, metadata !DIExpression()), !dbg !6742
  call void @llvm.dbg.declare(metadata i32* %v, metadata !6743, metadata !DIExpression()), !dbg !6744
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6745
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6746
  %2 = bitcast i8* %1 to i32*, !dbg !6747
  store i32* %2, i32** %p.addr.i.i, align 8
  %3 = load i32*, i32** %p.addr.i.i, align 8, !dbg !6748
  %4 = load i32, i32* %3, align 4, !dbg !6749
  store i32 %4, i32* %v, align 4, !dbg !6744
  %5 = load i8*, i8** %buf.addr, align 8, !dbg !6750
  %6 = bitcast i32* %v to i8*, !dbg !6751
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 4 %6, i64 4, i1 false), !dbg !6751
  ret void, !dbg !6752
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_32_native(i8* %buf) #0 !dbg !6753 {
entry:
  %buf.addr = alloca i8*, align 8
  %v = alloca i32, align 4
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6754, metadata !DIExpression()), !dbg !6755
  call void @llvm.dbg.declare(metadata i32* %v, metadata !6756, metadata !DIExpression()), !dbg !6757
  %0 = bitcast i32* %v to i8*, !dbg !6758
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !6759
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 1 %1, i64 4, i1 false), !dbg !6758
  %2 = load i32, i32* %v, align 4, !dbg !6760
  ret i32 %2, !dbg !6761
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_64_be(i8* %buf) #0 !dbg !6762 {
entry:
  %p.addr.i.i.i = alloca i64*, align 8
  call void @llvm.dbg.declare(metadata i64** %p.addr.i.i.i, metadata !6763, metadata !DIExpression()), !dbg !6769
  %p.addr.i.i = alloca i64*, align 8
  call void @llvm.dbg.declare(metadata i64** %p.addr.i.i, metadata !6781, metadata !DIExpression()), !dbg !6782
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6783, metadata !DIExpression()), !dbg !6784
  %buf.addr = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6785, metadata !DIExpression()), !dbg !6786
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6787
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6788
  %2 = bitcast i8* %1 to i64*, !dbg !6789
  store i64* %2, i64** %p.addr.i.i, align 8
  %3 = load i64*, i64** %p.addr.i.i, align 8, !dbg !6790
  store i64* %3, i64** %p.addr.i.i.i, align 8
  %4 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %5 = load i64, i64* %4, align 8, !dbg !6791
  %6 = call i1 @llvm.is.constant.i64(i64 %5) #10, !dbg !6791
  br i1 %6, label %cond.true.i.i.i, label %cond.false.i.i.i, !dbg !6791

cond.true.i.i.i:                                  ; preds = %entry
  %7 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %8 = load i64, i64* %7, align 8, !dbg !6791
  %and.i.i.i = and i64 %8, 255, !dbg !6791
  %shl.i.i.i = shl i64 %and.i.i.i, 56, !dbg !6791
  %9 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %10 = load i64, i64* %9, align 8, !dbg !6791
  %and1.i.i.i = and i64 %10, 65280, !dbg !6791
  %shl2.i.i.i = shl i64 %and1.i.i.i, 40, !dbg !6791
  %or.i.i.i = or i64 %shl.i.i.i, %shl2.i.i.i, !dbg !6791
  %11 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %12 = load i64, i64* %11, align 8, !dbg !6791
  %and3.i.i.i = and i64 %12, 16711680, !dbg !6791
  %shl4.i.i.i = shl i64 %and3.i.i.i, 24, !dbg !6791
  %or5.i.i.i = or i64 %or.i.i.i, %shl4.i.i.i, !dbg !6791
  %13 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %14 = load i64, i64* %13, align 8, !dbg !6791
  %and6.i.i.i = and i64 %14, 4278190080, !dbg !6791
  %shl7.i.i.i = shl i64 %and6.i.i.i, 8, !dbg !6791
  %or8.i.i.i = or i64 %or5.i.i.i, %shl7.i.i.i, !dbg !6791
  %15 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %16 = load i64, i64* %15, align 8, !dbg !6791
  %and9.i.i.i = and i64 %16, 1095216660480, !dbg !6791
  %shr.i.i.i = lshr i64 %and9.i.i.i, 8, !dbg !6791
  %or10.i.i.i = or i64 %or8.i.i.i, %shr.i.i.i, !dbg !6791
  %17 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %18 = load i64, i64* %17, align 8, !dbg !6791
  %and11.i.i.i = and i64 %18, 280375465082880, !dbg !6791
  %shr12.i.i.i = lshr i64 %and11.i.i.i, 24, !dbg !6791
  %or13.i.i.i = or i64 %or10.i.i.i, %shr12.i.i.i, !dbg !6791
  %19 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %20 = load i64, i64* %19, align 8, !dbg !6791
  %and14.i.i.i = and i64 %20, 71776119061217280, !dbg !6791
  %shr15.i.i.i = lshr i64 %and14.i.i.i, 40, !dbg !6791
  %or16.i.i.i = or i64 %or13.i.i.i, %shr15.i.i.i, !dbg !6791
  %21 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %22 = load i64, i64* %21, align 8, !dbg !6791
  %and17.i.i.i = and i64 %22, -72057594037927936, !dbg !6791
  %shr18.i.i.i = lshr i64 %and17.i.i.i, 56, !dbg !6791
  %or19.i.i.i = or i64 %or16.i.i.i, %shr18.i.i.i, !dbg !6791
  br label %get_unaligned_be64.exit, !dbg !6791

cond.false.i.i.i:                                 ; preds = %entry
  %23 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6791
  %24 = load i64, i64* %23, align 8, !dbg !6791
  %call.i.i.i = call i64 @__fswab64(i64 %24) #12, !dbg !6791
  br label %get_unaligned_be64.exit, !dbg !6791

get_unaligned_be64.exit:                          ; preds = %cond.true.i.i.i, %cond.false.i.i.i
  %cond.i.i.i = phi i64 [ %or19.i.i.i, %cond.true.i.i.i ], [ %call.i.i.i, %cond.false.i.i.i ], !dbg !6791
  %conv = trunc i64 %cond.i.i.i to i32, !dbg !6792
  ret i32 %conv, !dbg !6793
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_parse_64_be_inplace(i8* %buf) #0 !dbg !6794 {
entry:
  %p.addr.i.i.i = alloca i64*, align 8
  call void @llvm.dbg.declare(metadata i64** %p.addr.i.i.i, metadata !6763, metadata !DIExpression()), !dbg !6795
  %p.addr.i.i = alloca i64*, align 8
  call void @llvm.dbg.declare(metadata i64** %p.addr.i.i, metadata !6781, metadata !DIExpression()), !dbg !6799
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6783, metadata !DIExpression()), !dbg !6800
  %buf.addr = alloca i8*, align 8
  %v = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6801, metadata !DIExpression()), !dbg !6802
  call void @llvm.dbg.declare(metadata i64* %v, metadata !6803, metadata !DIExpression()), !dbg !6804
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6805
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6806
  %2 = bitcast i8* %1 to i64*, !dbg !6807
  store i64* %2, i64** %p.addr.i.i, align 8
  %3 = load i64*, i64** %p.addr.i.i, align 8, !dbg !6808
  store i64* %3, i64** %p.addr.i.i.i, align 8
  %4 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %5 = load i64, i64* %4, align 8, !dbg !6809
  %6 = call i1 @llvm.is.constant.i64(i64 %5) #10, !dbg !6809
  br i1 %6, label %cond.true.i.i.i, label %cond.false.i.i.i, !dbg !6809

cond.true.i.i.i:                                  ; preds = %entry
  %7 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %8 = load i64, i64* %7, align 8, !dbg !6809
  %and.i.i.i = and i64 %8, 255, !dbg !6809
  %shl.i.i.i = shl i64 %and.i.i.i, 56, !dbg !6809
  %9 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %10 = load i64, i64* %9, align 8, !dbg !6809
  %and1.i.i.i = and i64 %10, 65280, !dbg !6809
  %shl2.i.i.i = shl i64 %and1.i.i.i, 40, !dbg !6809
  %or.i.i.i = or i64 %shl.i.i.i, %shl2.i.i.i, !dbg !6809
  %11 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %12 = load i64, i64* %11, align 8, !dbg !6809
  %and3.i.i.i = and i64 %12, 16711680, !dbg !6809
  %shl4.i.i.i = shl i64 %and3.i.i.i, 24, !dbg !6809
  %or5.i.i.i = or i64 %or.i.i.i, %shl4.i.i.i, !dbg !6809
  %13 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %14 = load i64, i64* %13, align 8, !dbg !6809
  %and6.i.i.i = and i64 %14, 4278190080, !dbg !6809
  %shl7.i.i.i = shl i64 %and6.i.i.i, 8, !dbg !6809
  %or8.i.i.i = or i64 %or5.i.i.i, %shl7.i.i.i, !dbg !6809
  %15 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %16 = load i64, i64* %15, align 8, !dbg !6809
  %and9.i.i.i = and i64 %16, 1095216660480, !dbg !6809
  %shr.i.i.i = lshr i64 %and9.i.i.i, 8, !dbg !6809
  %or10.i.i.i = or i64 %or8.i.i.i, %shr.i.i.i, !dbg !6809
  %17 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %18 = load i64, i64* %17, align 8, !dbg !6809
  %and11.i.i.i = and i64 %18, 280375465082880, !dbg !6809
  %shr12.i.i.i = lshr i64 %and11.i.i.i, 24, !dbg !6809
  %or13.i.i.i = or i64 %or10.i.i.i, %shr12.i.i.i, !dbg !6809
  %19 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %20 = load i64, i64* %19, align 8, !dbg !6809
  %and14.i.i.i = and i64 %20, 71776119061217280, !dbg !6809
  %shr15.i.i.i = lshr i64 %and14.i.i.i, 40, !dbg !6809
  %or16.i.i.i = or i64 %or13.i.i.i, %shr15.i.i.i, !dbg !6809
  %21 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %22 = load i64, i64* %21, align 8, !dbg !6809
  %and17.i.i.i = and i64 %22, -72057594037927936, !dbg !6809
  %shr18.i.i.i = lshr i64 %and17.i.i.i, 56, !dbg !6809
  %or19.i.i.i = or i64 %or16.i.i.i, %shr18.i.i.i, !dbg !6809
  br label %get_unaligned_be64.exit, !dbg !6809

cond.false.i.i.i:                                 ; preds = %entry
  %23 = load i64*, i64** %p.addr.i.i.i, align 8, !dbg !6809
  %24 = load i64, i64* %23, align 8, !dbg !6809
  %call.i.i.i = call i64 @__fswab64(i64 %24) #12, !dbg !6809
  br label %get_unaligned_be64.exit, !dbg !6809

get_unaligned_be64.exit:                          ; preds = %cond.true.i.i.i, %cond.false.i.i.i
  %cond.i.i.i = phi i64 [ %or19.i.i.i, %cond.true.i.i.i ], [ %call.i.i.i, %cond.false.i.i.i ], !dbg !6809
  store i64 %cond.i.i.i, i64* %v, align 8, !dbg !6804
  %25 = load i8*, i8** %buf.addr, align 8, !dbg !6810
  %26 = bitcast i64* %v to i8*, !dbg !6811
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %25, i8* align 8 %26, i64 8, i1 false), !dbg !6811
  ret void, !dbg !6812
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_64_le(i8* %buf) #0 !dbg !6813 {
entry:
  %p.addr.i.i = alloca i64*, align 8
  call void @llvm.dbg.declare(metadata i64** %p.addr.i.i, metadata !6814, metadata !DIExpression()), !dbg !6820
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6824, metadata !DIExpression()), !dbg !6825
  %buf.addr = alloca i8*, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6826, metadata !DIExpression()), !dbg !6827
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6828
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6829
  %2 = bitcast i8* %1 to i64*, !dbg !6830
  store i64* %2, i64** %p.addr.i.i, align 8
  %3 = load i64*, i64** %p.addr.i.i, align 8, !dbg !6831
  %4 = load i64, i64* %3, align 8, !dbg !6832
  %conv = trunc i64 %4 to i32, !dbg !6833
  ret i32 %conv, !dbg !6834
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_parse_64_le_inplace(i8* %buf) #0 !dbg !6835 {
entry:
  %p.addr.i.i = alloca i64*, align 8
  call void @llvm.dbg.declare(metadata i64** %p.addr.i.i, metadata !6814, metadata !DIExpression()), !dbg !6836
  %p.addr.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr.i, metadata !6824, metadata !DIExpression()), !dbg !6839
  %buf.addr = alloca i8*, align 8
  %v = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6840, metadata !DIExpression()), !dbg !6841
  call void @llvm.dbg.declare(metadata i64* %v, metadata !6842, metadata !DIExpression()), !dbg !6843
  %0 = load i8*, i8** %buf.addr, align 8, !dbg !6844
  store i8* %0, i8** %p.addr.i, align 8
  %1 = load i8*, i8** %p.addr.i, align 8, !dbg !6845
  %2 = bitcast i8* %1 to i64*, !dbg !6846
  store i64* %2, i64** %p.addr.i.i, align 8
  %3 = load i64*, i64** %p.addr.i.i, align 8, !dbg !6847
  %4 = load i64, i64* %3, align 8, !dbg !6848
  store i64 %4, i64* %v, align 8, !dbg !6843
  %5 = load i8*, i8** %buf.addr, align 8, !dbg !6849
  %6 = bitcast i64* %v to i8*, !dbg !6850
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 8 %6, i64 8, i1 false), !dbg !6850
  ret void, !dbg !6851
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_parse_64_native(i8* %buf) #0 !dbg !6852 {
entry:
  %buf.addr = alloca i8*, align 8
  %v = alloca i64, align 8
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !6853, metadata !DIExpression()), !dbg !6854
  call void @llvm.dbg.declare(metadata i64* %v, metadata !6855, metadata !DIExpression()), !dbg !6856
  %0 = bitcast i64* %v to i8*, !dbg !6857
  %1 = load i8*, i8** %buf.addr, align 8, !dbg !6858
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 1 %1, i64 8, i1 false), !dbg !6857
  %2 = load i64, i64* %v, align 8, !dbg !6859
  %conv = trunc i64 %2 to i32, !dbg !6859
  ret i32 %conv, !dbg !6860
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_bus_formatted_write(i8* %context, i32 %reg, i32 %val) #0 !dbg !6861 {
entry:
  %retval = alloca i32, align 4
  %context.addr = alloca i8*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %range = alloca %struct.regmap_range_node*, align 8
  %map = alloca %struct.regmap*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !6862, metadata !DIExpression()), !dbg !6863
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6864, metadata !DIExpression()), !dbg !6865
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6866, metadata !DIExpression()), !dbg !6867
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !6868, metadata !DIExpression()), !dbg !6869
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %range, metadata !6870, metadata !DIExpression()), !dbg !6871
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !6872, metadata !DIExpression()), !dbg !6873
  %0 = load i8*, i8** %context.addr, align 8, !dbg !6874
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !6874
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !6873
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !6875, metadata !DIExpression()), !dbg !6877
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6877
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 8, !dbg !6877
  %3 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !6877
  %tobool = icmp ne %struct.regmap_bus* %3, null, !dbg !6877
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !6877

lor.rhs:                                          ; preds = %entry
  %4 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6877
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 7, !dbg !6877
  %format_write = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 4, !dbg !6877
  %5 = load void (%struct.regmap*, i32, i32)*, void (%struct.regmap*, i32, i32)** %format_write, align 8, !dbg !6877
  %tobool1 = icmp ne void (%struct.regmap*, i32, i32)* %5, null, !dbg !6877
  %lnot = xor i1 %tobool1, true, !dbg !6877
  br label %lor.end, !dbg !6877

lor.end:                                          ; preds = %lor.rhs, %entry
  %6 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lnot2 = xor i1 %6, true, !dbg !6877
  %lnot3 = xor i1 %lnot2, true, !dbg !6877
  %lnot.ext = zext i1 %lnot3 to i32, !dbg !6877
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !6877
  %7 = load i32, i32* %__ret_warn_on, align 4, !dbg !6878
  %tobool4 = icmp ne i32 %7, 0, !dbg !6878
  %lnot5 = xor i1 %tobool4, true, !dbg !6878
  %lnot7 = xor i1 %lnot5, true, !dbg !6878
  %lnot.ext8 = zext i1 %lnot7 to i32, !dbg !6878
  %conv = sext i32 %lnot.ext8 to i64, !dbg !6878
  %tobool9 = icmp ne i64 %conv, 0, !dbg !6878
  br i1 %tobool9, label %if.then, label %if.end, !dbg !6877

if.then:                                          ; preds = %lor.end
  br label %do.body, !dbg !6878

do.body:                                          ; preds = %if.then
  br label %do.body10, !dbg !6880

do.body10:                                        ; preds = %do.body
  br label %do.end, !dbg !6882

do.end:                                           ; preds = %do.body10
  br label %do.body11, !dbg !6880

do.body11:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 1857, i32 2305, i64 12) #10, !dbg !6884, !srcloc !6886
  br label %do.end12, !dbg !6884

do.end12:                                         ; preds = %do.body11
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 209) #10, !dbg !6887, !srcloc !6889
  br label %do.body13, !dbg !6880

do.body13:                                        ; preds = %do.end12
  br label %do.end14, !dbg !6890

do.end14:                                         ; preds = %do.body13
  br label %do.end15, !dbg !6880

do.end15:                                         ; preds = %do.end14
  br label %if.end, !dbg !6880

if.end:                                           ; preds = %do.end15, %lor.end
  %8 = load i32, i32* %__ret_warn_on, align 4, !dbg !6877
  %tobool16 = icmp ne i32 %8, 0, !dbg !6877
  %lnot17 = xor i1 %tobool16, true, !dbg !6877
  %lnot19 = xor i1 %lnot17, true, !dbg !6877
  %lnot.ext20 = zext i1 %lnot19 to i32, !dbg !6877
  %conv21 = sext i32 %lnot.ext20 to i64, !dbg !6877
  store i64 %conv21, i64* %tmp, align 8, !dbg !6878
  %9 = load i64, i64* %tmp, align 8, !dbg !6877
  %10 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6892
  %11 = load i32, i32* %reg.addr, align 4, !dbg !6893
  %call = call %struct.regmap_range_node* @_regmap_range_lookup(%struct.regmap* %10, i32 %11) #11, !dbg !6894
  store %struct.regmap_range_node* %call, %struct.regmap_range_node** %range, align 8, !dbg !6895
  %12 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !6896
  %tobool22 = icmp ne %struct.regmap_range_node* %12, null, !dbg !6896
  br i1 %tobool22, label %if.then23, label %if.end28, !dbg !6898

if.then23:                                        ; preds = %if.end
  %13 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6899
  %14 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !6901
  %call24 = call i32 @_regmap_select_page(%struct.regmap* %13, i32* %reg.addr, %struct.regmap_range_node* %14, i32 1) #11, !dbg !6902
  store i32 %call24, i32* %ret, align 4, !dbg !6903
  %15 = load i32, i32* %ret, align 4, !dbg !6904
  %cmp = icmp ne i32 %15, 0, !dbg !6906
  br i1 %cmp, label %if.then26, label %if.end27, !dbg !6907

if.then26:                                        ; preds = %if.then23
  %16 = load i32, i32* %ret, align 4, !dbg !6908
  store i32 %16, i32* %retval, align 4, !dbg !6909
  br label %return, !dbg !6909

if.end27:                                         ; preds = %if.then23
  br label %if.end28, !dbg !6910

if.end28:                                         ; preds = %if.end27, %if.end
  %17 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6911
  %format29 = getelementptr inbounds %struct.regmap, %struct.regmap* %17, i32 0, i32 7, !dbg !6912
  %format_write30 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format29, i32 0, i32 4, !dbg !6913
  %18 = load void (%struct.regmap*, i32, i32)*, void (%struct.regmap*, i32, i32)** %format_write30, align 8, !dbg !6913
  %19 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6914
  %20 = load i32, i32* %reg.addr, align 4, !dbg !6915
  %21 = load i32, i32* %val.addr, align 4, !dbg !6916
  call void %18(%struct.regmap* %19, i32 %20, i32 %21) #11, !dbg !6911
  %22 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6917
  %23 = load i32, i32* %reg.addr, align 4, !dbg !6918
  call void @trace_regmap_hw_write_start(%struct.regmap* %22, i32 %23, i32 1) #11, !dbg !6919
  %24 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6920
  %bus31 = getelementptr inbounds %struct.regmap, %struct.regmap* %24, i32 0, i32 8, !dbg !6921
  %25 = load %struct.regmap_bus*, %struct.regmap_bus** %bus31, align 8, !dbg !6921
  %write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %25, i32 0, i32 1, !dbg !6922
  %26 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %write, align 8, !dbg !6922
  %27 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6923
  %bus_context = getelementptr inbounds %struct.regmap, %struct.regmap* %27, i32 0, i32 9, !dbg !6924
  %28 = load i8*, i8** %bus_context, align 8, !dbg !6924
  %29 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6925
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %29, i32 0, i32 6, !dbg !6926
  %30 = load i8*, i8** %work_buf, align 8, !dbg !6926
  %31 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6927
  %format32 = getelementptr inbounds %struct.regmap, %struct.regmap* %31, i32 0, i32 7, !dbg !6928
  %buf_size = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format32, i32 0, i32 0, !dbg !6929
  %32 = load i64, i64* %buf_size, align 8, !dbg !6929
  %call33 = call i32 %26(i8* %28, i8* %30, i64 %32) #11, !dbg !6920
  store i32 %call33, i32* %ret, align 4, !dbg !6930
  %33 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6931
  %34 = load i32, i32* %reg.addr, align 4, !dbg !6932
  call void @trace_regmap_hw_write_done(%struct.regmap* %33, i32 %34, i32 1) #11, !dbg !6933
  %35 = load i32, i32* %ret, align 4, !dbg !6934
  store i32 %35, i32* %retval, align 4, !dbg !6935
  br label %return, !dbg !6935

return:                                           ; preds = %if.end28, %if.then26
  %36 = load i32, i32* %retval, align 4, !dbg !6936
  ret i32 %36, !dbg !6936
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_bus_raw_write(i8* %context, i32 %reg, i32 %val) #0 !dbg !6937 {
entry:
  %context.addr = alloca i8*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %map = alloca %struct.regmap*, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store i8* %context, i8** %context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %context.addr, metadata !6938, metadata !DIExpression()), !dbg !6939
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !6940, metadata !DIExpression()), !dbg !6941
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !6942, metadata !DIExpression()), !dbg !6943
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !6944, metadata !DIExpression()), !dbg !6945
  %0 = load i8*, i8** %context.addr, align 8, !dbg !6946
  %1 = bitcast i8* %0 to %struct.regmap*, !dbg !6946
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !6945
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !6947, metadata !DIExpression()), !dbg !6949
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6949
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 8, !dbg !6949
  %3 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !6949
  %tobool = icmp ne %struct.regmap_bus* %3, null, !dbg !6949
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !6949

lor.rhs:                                          ; preds = %entry
  %4 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6949
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 7, !dbg !6949
  %format_val = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 6, !dbg !6949
  %5 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_val, align 8, !dbg !6949
  %tobool1 = icmp ne void (i8*, i32, i32)* %5, null, !dbg !6949
  %lnot = xor i1 %tobool1, true, !dbg !6949
  br label %lor.end, !dbg !6949

lor.end:                                          ; preds = %lor.rhs, %entry
  %6 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lnot2 = xor i1 %6, true, !dbg !6949
  %lnot3 = xor i1 %lnot2, true, !dbg !6949
  %lnot.ext = zext i1 %lnot3 to i32, !dbg !6949
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !6949
  %7 = load i32, i32* %__ret_warn_on, align 4, !dbg !6950
  %tobool4 = icmp ne i32 %7, 0, !dbg !6950
  %lnot5 = xor i1 %tobool4, true, !dbg !6950
  %lnot7 = xor i1 %lnot5, true, !dbg !6950
  %lnot.ext8 = zext i1 %lnot7 to i32, !dbg !6950
  %conv = sext i32 %lnot.ext8 to i64, !dbg !6950
  %tobool9 = icmp ne i64 %conv, 0, !dbg !6950
  br i1 %tobool9, label %if.then, label %if.end, !dbg !6949

if.then:                                          ; preds = %lor.end
  br label %do.body, !dbg !6950

do.body:                                          ; preds = %if.then
  br label %do.body10, !dbg !6952

do.body10:                                        ; preds = %do.body
  br label %do.end, !dbg !6954

do.end:                                           ; preds = %do.body10
  br label %do.body11, !dbg !6952

do.body11:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 1891, i32 2305, i64 12) #10, !dbg !6956, !srcloc !6958
  br label %do.end12, !dbg !6956

do.end12:                                         ; preds = %do.body11
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 210) #10, !dbg !6959, !srcloc !6961
  br label %do.body13, !dbg !6952

do.body13:                                        ; preds = %do.end12
  br label %do.end14, !dbg !6962

do.end14:                                         ; preds = %do.body13
  br label %do.end15, !dbg !6952

do.end15:                                         ; preds = %do.end14
  br label %if.end, !dbg !6952

if.end:                                           ; preds = %do.end15, %lor.end
  %8 = load i32, i32* %__ret_warn_on, align 4, !dbg !6949
  %tobool16 = icmp ne i32 %8, 0, !dbg !6949
  %lnot17 = xor i1 %tobool16, true, !dbg !6949
  %lnot19 = xor i1 %lnot17, true, !dbg !6949
  %lnot.ext20 = zext i1 %lnot19 to i32, !dbg !6949
  %conv21 = sext i32 %lnot.ext20 to i64, !dbg !6949
  store i64 %conv21, i64* %tmp, align 8, !dbg !6950
  %9 = load i64, i64* %tmp, align 8, !dbg !6949
  %10 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6964
  %format22 = getelementptr inbounds %struct.regmap, %struct.regmap* %10, i32 0, i32 7, !dbg !6965
  %format_val23 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format22, i32 0, i32 6, !dbg !6966
  %11 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_val23, align 8, !dbg !6966
  %12 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6967
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 6, !dbg !6968
  %13 = load i8*, i8** %work_buf, align 8, !dbg !6968
  %14 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6969
  %format24 = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 7, !dbg !6970
  %reg_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format24, i32 0, i32 1, !dbg !6971
  %15 = load i64, i64* %reg_bytes, align 8, !dbg !6971
  %add.ptr = getelementptr i8, i8* %13, i64 %15, !dbg !6972
  %16 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6973
  %format25 = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 7, !dbg !6974
  %pad_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format25, i32 0, i32 2, !dbg !6975
  %17 = load i64, i64* %pad_bytes, align 8, !dbg !6975
  %add.ptr26 = getelementptr i8, i8* %add.ptr, i64 %17, !dbg !6976
  %18 = load i32, i32* %val.addr, align 4, !dbg !6977
  call void %11(i8* %add.ptr26, i32 %18, i32 0) #11, !dbg !6964
  %19 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6978
  %20 = load i32, i32* %reg.addr, align 4, !dbg !6979
  %21 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6980
  %work_buf27 = getelementptr inbounds %struct.regmap, %struct.regmap* %21, i32 0, i32 6, !dbg !6981
  %22 = load i8*, i8** %work_buf27, align 8, !dbg !6981
  %23 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6982
  %format28 = getelementptr inbounds %struct.regmap, %struct.regmap* %23, i32 0, i32 7, !dbg !6983
  %reg_bytes29 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format28, i32 0, i32 1, !dbg !6984
  %24 = load i64, i64* %reg_bytes29, align 8, !dbg !6984
  %add.ptr30 = getelementptr i8, i8* %22, i64 %24, !dbg !6985
  %25 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6986
  %format31 = getelementptr inbounds %struct.regmap, %struct.regmap* %25, i32 0, i32 7, !dbg !6987
  %pad_bytes32 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format31, i32 0, i32 2, !dbg !6988
  %26 = load i64, i64* %pad_bytes32, align 8, !dbg !6988
  %add.ptr33 = getelementptr i8, i8* %add.ptr30, i64 %26, !dbg !6989
  %27 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !6990
  %format34 = getelementptr inbounds %struct.regmap, %struct.regmap* %27, i32 0, i32 7, !dbg !6991
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format34, i32 0, i32 3, !dbg !6992
  %28 = load i64, i64* %val_bytes, align 8, !dbg !6992
  %call = call i32 @_regmap_raw_write_impl(%struct.regmap* %19, i32 %20, i8* %add.ptr33, i64 %28, i1 zeroext false) #11, !dbg !6993
  ret i32 %call, !dbg !6994
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: cold noredzone
declare dso_local void @_dev_err(%struct.device*, i8*, ...) #6

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @_regmap_range_add(%struct.regmap* %map, %struct.regmap_range_node* %data) #0 !dbg !6995 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %data.addr = alloca %struct.regmap_range_node*, align 8
  %root = alloca %struct.rb_root*, align 8
  %new = alloca %struct.rb_node**, align 8
  %parent = alloca %struct.rb_node*, align 8
  %this = alloca %struct.regmap_range_node*, align 8
  %__mptr = alloca i8*, align 8
  %tmp = alloca %struct.regmap_range_node*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !6998, metadata !DIExpression()), !dbg !6999
  store %struct.regmap_range_node* %data, %struct.regmap_range_node** %data.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %data.addr, metadata !7000, metadata !DIExpression()), !dbg !7001
  call void @llvm.dbg.declare(metadata %struct.rb_root** %root, metadata !7002, metadata !DIExpression()), !dbg !7004
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7005
  %range_tree = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 60, !dbg !7006
  store %struct.rb_root* %range_tree, %struct.rb_root** %root, align 8, !dbg !7004
  call void @llvm.dbg.declare(metadata %struct.rb_node*** %new, metadata !7007, metadata !DIExpression()), !dbg !7009
  %1 = load %struct.rb_root*, %struct.rb_root** %root, align 8, !dbg !7010
  %rb_node = getelementptr inbounds %struct.rb_root, %struct.rb_root* %1, i32 0, i32 0, !dbg !7011
  store %struct.rb_node** %rb_node, %struct.rb_node*** %new, align 8, !dbg !7009
  call void @llvm.dbg.declare(metadata %struct.rb_node** %parent, metadata !7012, metadata !DIExpression()), !dbg !7013
  store %struct.rb_node* null, %struct.rb_node** %parent, align 8, !dbg !7013
  br label %while.cond, !dbg !7014

while.cond:                                       ; preds = %if.end6, %entry
  %2 = load %struct.rb_node**, %struct.rb_node*** %new, align 8, !dbg !7015
  %3 = load %struct.rb_node*, %struct.rb_node** %2, align 8, !dbg !7016
  %tobool = icmp ne %struct.rb_node* %3, null, !dbg !7014
  br i1 %tobool, label %while.body, label %while.end, !dbg !7014

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %this, metadata !7017, metadata !DIExpression()), !dbg !7019
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !7020, metadata !DIExpression()), !dbg !7022
  %4 = load %struct.rb_node**, %struct.rb_node*** %new, align 8, !dbg !7022
  %5 = load %struct.rb_node*, %struct.rb_node** %4, align 8, !dbg !7022
  %6 = bitcast %struct.rb_node* %5 to i8*, !dbg !7022
  store i8* %6, i8** %__mptr, align 8, !dbg !7022
  br label %do.body, !dbg !7022

do.body:                                          ; preds = %while.body
  br label %do.end, !dbg !7023

do.end:                                           ; preds = %do.body
  %7 = load i8*, i8** %__mptr, align 8, !dbg !7022
  %add.ptr = getelementptr i8, i8* %7, i64 0, !dbg !7022
  %8 = bitcast i8* %add.ptr to %struct.regmap_range_node*, !dbg !7022
  store %struct.regmap_range_node* %8, %struct.regmap_range_node** %tmp, align 8, !dbg !7023
  %9 = load %struct.regmap_range_node*, %struct.regmap_range_node** %tmp, align 8, !dbg !7022
  store %struct.regmap_range_node* %9, %struct.regmap_range_node** %this, align 8, !dbg !7019
  %10 = load %struct.rb_node**, %struct.rb_node*** %new, align 8, !dbg !7025
  %11 = load %struct.rb_node*, %struct.rb_node** %10, align 8, !dbg !7026
  store %struct.rb_node* %11, %struct.rb_node** %parent, align 8, !dbg !7027
  %12 = load %struct.regmap_range_node*, %struct.regmap_range_node** %data.addr, align 8, !dbg !7028
  %range_max = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %12, i32 0, i32 4, !dbg !7030
  %13 = load i32, i32* %range_max, align 4, !dbg !7030
  %14 = load %struct.regmap_range_node*, %struct.regmap_range_node** %this, align 8, !dbg !7031
  %range_min = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %14, i32 0, i32 3, !dbg !7032
  %15 = load i32, i32* %range_min, align 8, !dbg !7032
  %cmp = icmp ult i32 %13, %15, !dbg !7033
  br i1 %cmp, label %if.then, label %if.else, !dbg !7034

if.then:                                          ; preds = %do.end
  %16 = load %struct.rb_node**, %struct.rb_node*** %new, align 8, !dbg !7035
  %17 = load %struct.rb_node*, %struct.rb_node** %16, align 8, !dbg !7036
  %rb_left = getelementptr inbounds %struct.rb_node, %struct.rb_node* %17, i32 0, i32 2, !dbg !7037
  store %struct.rb_node** %rb_left, %struct.rb_node*** %new, align 8, !dbg !7038
  br label %if.end6, !dbg !7039

if.else:                                          ; preds = %do.end
  %18 = load %struct.regmap_range_node*, %struct.regmap_range_node** %data.addr, align 8, !dbg !7040
  %range_min1 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %18, i32 0, i32 3, !dbg !7042
  %19 = load i32, i32* %range_min1, align 8, !dbg !7042
  %20 = load %struct.regmap_range_node*, %struct.regmap_range_node** %this, align 8, !dbg !7043
  %range_max2 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %20, i32 0, i32 4, !dbg !7044
  %21 = load i32, i32* %range_max2, align 4, !dbg !7044
  %cmp3 = icmp ugt i32 %19, %21, !dbg !7045
  br i1 %cmp3, label %if.then4, label %if.else5, !dbg !7046

if.then4:                                         ; preds = %if.else
  %22 = load %struct.rb_node**, %struct.rb_node*** %new, align 8, !dbg !7047
  %23 = load %struct.rb_node*, %struct.rb_node** %22, align 8, !dbg !7048
  %rb_right = getelementptr inbounds %struct.rb_node, %struct.rb_node* %23, i32 0, i32 1, !dbg !7049
  store %struct.rb_node** %rb_right, %struct.rb_node*** %new, align 8, !dbg !7050
  br label %if.end, !dbg !7051

if.else5:                                         ; preds = %if.else
  store i1 false, i1* %retval, align 1, !dbg !7052
  br label %return, !dbg !7052

if.end:                                           ; preds = %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  br label %while.cond, !dbg !7014, !llvm.loop !7053

while.end:                                        ; preds = %while.cond
  %24 = load %struct.regmap_range_node*, %struct.regmap_range_node** %data.addr, align 8, !dbg !7055
  %node = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %24, i32 0, i32 0, !dbg !7056
  %25 = load %struct.rb_node*, %struct.rb_node** %parent, align 8, !dbg !7057
  %26 = load %struct.rb_node**, %struct.rb_node*** %new, align 8, !dbg !7058
  call void @rb_link_node(%struct.rb_node* %node, %struct.rb_node* %25, %struct.rb_node** %26) #11, !dbg !7059
  %27 = load %struct.regmap_range_node*, %struct.regmap_range_node** %data.addr, align 8, !dbg !7060
  %node7 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %27, i32 0, i32 0, !dbg !7061
  %28 = load %struct.rb_root*, %struct.rb_root** %root, align 8, !dbg !7062
  call void @rb_insert_color(%struct.rb_node* %node7, %struct.rb_root* %28) #11, !dbg !7063
  store i1 true, i1* %retval, align 1, !dbg !7064
  br label %return, !dbg !7064

return:                                           ; preds = %while.end, %if.else5
  %29 = load i1, i1* %retval, align 1, !dbg !7065
  ret i1 %29, !dbg !7065
}

; Function Attrs: noredzone
declare dso_local void @kfree(i8*) #2

; Function Attrs: noredzone
declare dso_local i32 @regcache_init(%struct.regmap*, %struct.regmap_config*) #2

; Function Attrs: noredzone
declare dso_local void @regcache_exit(%struct.regmap*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_range_exit(%struct.regmap* %map) #0 !dbg !7066 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %next = alloca %struct.rb_node*, align 8
  %range_node = alloca %struct.regmap_range_node*, align 8
  %__mptr = alloca i8*, align 8
  %tmp = alloca %struct.regmap_range_node*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7067, metadata !DIExpression()), !dbg !7068
  call void @llvm.dbg.declare(metadata %struct.rb_node** %next, metadata !7069, metadata !DIExpression()), !dbg !7070
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %range_node, metadata !7071, metadata !DIExpression()), !dbg !7072
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7073
  %range_tree = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 60, !dbg !7074
  %call = call %struct.rb_node* @rb_first(%struct.rb_root* %range_tree) #11, !dbg !7075
  store %struct.rb_node* %call, %struct.rb_node** %next, align 8, !dbg !7076
  br label %while.cond, !dbg !7077

while.cond:                                       ; preds = %do.end, %entry
  %1 = load %struct.rb_node*, %struct.rb_node** %next, align 8, !dbg !7078
  %tobool = icmp ne %struct.rb_node* %1, null, !dbg !7077
  br i1 %tobool, label %while.body, label %while.end, !dbg !7077

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !7079, metadata !DIExpression()), !dbg !7082
  %2 = load %struct.rb_node*, %struct.rb_node** %next, align 8, !dbg !7082
  %3 = bitcast %struct.rb_node* %2 to i8*, !dbg !7082
  store i8* %3, i8** %__mptr, align 8, !dbg !7082
  br label %do.body, !dbg !7082

do.body:                                          ; preds = %while.body
  br label %do.end, !dbg !7083

do.end:                                           ; preds = %do.body
  %4 = load i8*, i8** %__mptr, align 8, !dbg !7082
  %add.ptr = getelementptr i8, i8* %4, i64 0, !dbg !7082
  %5 = bitcast i8* %add.ptr to %struct.regmap_range_node*, !dbg !7082
  store %struct.regmap_range_node* %5, %struct.regmap_range_node** %tmp, align 8, !dbg !7083
  %6 = load %struct.regmap_range_node*, %struct.regmap_range_node** %tmp, align 8, !dbg !7082
  store %struct.regmap_range_node* %6, %struct.regmap_range_node** %range_node, align 8, !dbg !7085
  %7 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range_node, align 8, !dbg !7086
  %node = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %7, i32 0, i32 0, !dbg !7087
  %call1 = call %struct.rb_node* @rb_next(%struct.rb_node* %node) #11, !dbg !7088
  store %struct.rb_node* %call1, %struct.rb_node** %next, align 8, !dbg !7089
  %8 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range_node, align 8, !dbg !7090
  %node2 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %8, i32 0, i32 0, !dbg !7091
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7092
  %range_tree3 = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 60, !dbg !7093
  call void @rb_erase(%struct.rb_node* %node2, %struct.rb_root* %range_tree3) #11, !dbg !7094
  %10 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range_node, align 8, !dbg !7095
  %11 = bitcast %struct.regmap_range_node* %10 to i8*, !dbg !7095
  call void @kfree(i8* %11) #11, !dbg !7096
  br label %while.cond, !dbg !7077, !llvm.loop !7097

while.end:                                        ; preds = %while.cond
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7099
  %selector_work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 61, !dbg !7100
  %13 = load i8*, i8** %selector_work_buf, align 8, !dbg !7100
  call void @kfree(i8* %13) #11, !dbg !7101
  ret void, !dbg !7102
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @hwspin_lock_free(%struct.hwspinlock* %hwlock) #0 !dbg !7103 {
entry:
  %hwlock.addr = alloca %struct.hwspinlock*, align 8
  store %struct.hwspinlock* %hwlock, %struct.hwspinlock** %hwlock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hwspinlock** %hwlock.addr, metadata !7106, metadata !DIExpression()), !dbg !7107
  ret i32 0, !dbg !7108
}

; Function Attrs: noredzone
declare dso_local void @kfree_const(i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @ERR_PTR(i64 %error) #0 !dbg !7109 {
entry:
  %error.addr = alloca i64, align 8
  store i64 %error, i64* %error.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %error.addr, metadata !7113, metadata !DIExpression()), !dbg !7114
  %0 = load i64, i64* %error.addr, align 8, !dbg !7115
  %1 = inttoptr i64 %0 to i8*, !dbg !7116
  ret i8* %1, !dbg !7117
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local %struct.regmap* @__devm_regmap_init(%struct.device* %dev, %struct.regmap_bus* %bus, i8* %bus_context, %struct.regmap_config* %config, %struct.lock_class_key* %lock_key, i8* %lock_name) #0 !dbg !7118 {
entry:
  %retval = alloca %struct.regmap*, align 8
  %dev.addr = alloca %struct.device*, align 8
  %bus.addr = alloca %struct.regmap_bus*, align 8
  %bus_context.addr = alloca i8*, align 8
  %config.addr = alloca %struct.regmap_config*, align 8
  %lock_key.addr = alloca %struct.lock_class_key*, align 8
  %lock_name.addr = alloca i8*, align 8
  %ptr = alloca %struct.regmap**, align 8
  %regmap = alloca %struct.regmap*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7119, metadata !DIExpression()), !dbg !7120
  store %struct.regmap_bus* %bus, %struct.regmap_bus** %bus.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_bus** %bus.addr, metadata !7121, metadata !DIExpression()), !dbg !7122
  store i8* %bus_context, i8** %bus_context.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %bus_context.addr, metadata !7123, metadata !DIExpression()), !dbg !7124
  store %struct.regmap_config* %config, %struct.regmap_config** %config.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_config** %config.addr, metadata !7125, metadata !DIExpression()), !dbg !7126
  store %struct.lock_class_key* %lock_key, %struct.lock_class_key** %lock_key.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.lock_class_key** %lock_key.addr, metadata !7127, metadata !DIExpression()), !dbg !7128
  store i8* %lock_name, i8** %lock_name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %lock_name.addr, metadata !7129, metadata !DIExpression()), !dbg !7130
  call void @llvm.dbg.declare(metadata %struct.regmap*** %ptr, metadata !7131, metadata !DIExpression()), !dbg !7132
  call void @llvm.dbg.declare(metadata %struct.regmap** %regmap, metadata !7133, metadata !DIExpression()), !dbg !7134
  %call = call i8* @devres_alloc(void (%struct.device*, i8*)* @devm_regmap_release, i64 8, i32 3264) #11, !dbg !7135
  %0 = bitcast i8* %call to %struct.regmap**, !dbg !7135
  store %struct.regmap** %0, %struct.regmap*** %ptr, align 8, !dbg !7136
  %1 = load %struct.regmap**, %struct.regmap*** %ptr, align 8, !dbg !7137
  %tobool = icmp ne %struct.regmap** %1, null, !dbg !7137
  br i1 %tobool, label %if.end, label %if.then, !dbg !7139

if.then:                                          ; preds = %entry
  %call1 = call i8* @ERR_PTR(i64 -12) #11, !dbg !7140
  %2 = bitcast i8* %call1 to %struct.regmap*, !dbg !7140
  store %struct.regmap* %2, %struct.regmap** %retval, align 8, !dbg !7141
  br label %return, !dbg !7141

if.end:                                           ; preds = %entry
  %3 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !7142
  %4 = load %struct.regmap_bus*, %struct.regmap_bus** %bus.addr, align 8, !dbg !7143
  %5 = load i8*, i8** %bus_context.addr, align 8, !dbg !7144
  %6 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7145
  %7 = load %struct.lock_class_key*, %struct.lock_class_key** %lock_key.addr, align 8, !dbg !7146
  %8 = load i8*, i8** %lock_name.addr, align 8, !dbg !7147
  %call2 = call %struct.regmap* @__regmap_init(%struct.device* %3, %struct.regmap_bus* %4, i8* %5, %struct.regmap_config* %6, %struct.lock_class_key* %7, i8* %8) #11, !dbg !7148
  store %struct.regmap* %call2, %struct.regmap** %regmap, align 8, !dbg !7149
  %9 = load %struct.regmap*, %struct.regmap** %regmap, align 8, !dbg !7150
  %10 = bitcast %struct.regmap* %9 to i8*, !dbg !7150
  %call3 = call zeroext i1 @IS_ERR(i8* %10) #11, !dbg !7152
  br i1 %call3, label %if.else, label %if.then4, !dbg !7153

if.then4:                                         ; preds = %if.end
  %11 = load %struct.regmap*, %struct.regmap** %regmap, align 8, !dbg !7154
  %12 = load %struct.regmap**, %struct.regmap*** %ptr, align 8, !dbg !7156
  store %struct.regmap* %11, %struct.regmap** %12, align 8, !dbg !7157
  %13 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !7158
  %14 = load %struct.regmap**, %struct.regmap*** %ptr, align 8, !dbg !7159
  %15 = bitcast %struct.regmap** %14 to i8*, !dbg !7159
  call void @devres_add(%struct.device* %13, i8* %15) #11, !dbg !7160
  br label %if.end5, !dbg !7161

if.else:                                          ; preds = %if.end
  %16 = load %struct.regmap**, %struct.regmap*** %ptr, align 8, !dbg !7162
  %17 = bitcast %struct.regmap** %16 to i8*, !dbg !7162
  call void @devres_free(i8* %17) #11, !dbg !7164
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then4
  %18 = load %struct.regmap*, %struct.regmap** %regmap, align 8, !dbg !7165
  store %struct.regmap* %18, %struct.regmap** %retval, align 8, !dbg !7166
  br label %return, !dbg !7166

return:                                           ; preds = %if.end5, %if.then
  %19 = load %struct.regmap*, %struct.regmap** %retval, align 8, !dbg !7167
  ret %struct.regmap* %19, !dbg !7167
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @devm_regmap_release(%struct.device* %dev, i8* %res) #0 !dbg !7168 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %res.addr = alloca i8*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7169, metadata !DIExpression()), !dbg !7170
  store i8* %res, i8** %res.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %res.addr, metadata !7171, metadata !DIExpression()), !dbg !7172
  %0 = load i8*, i8** %res.addr, align 8, !dbg !7173
  %1 = bitcast i8* %0 to %struct.regmap**, !dbg !7174
  %2 = load %struct.regmap*, %struct.regmap** %1, align 8, !dbg !7175
  call void @regmap_exit(%struct.regmap* %2) #11, !dbg !7176
  ret void, !dbg !7177
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @IS_ERR(i8* %ptr) #0 !dbg !7178 {
entry:
  %ptr.addr = alloca i8*, align 8
  store i8* %ptr, i8** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %ptr.addr, metadata !7181, metadata !DIExpression()), !dbg !7182
  %0 = load i8*, i8** %ptr.addr, align 8, !dbg !7183
  %1 = ptrtoint i8* %0 to i64, !dbg !7183
  %2 = inttoptr i64 %1 to i8*, !dbg !7183
  %3 = ptrtoint i8* %2 to i64, !dbg !7183
  %cmp = icmp uge i64 %3, -4095, !dbg !7183
  %lnot = xor i1 %cmp, true, !dbg !7183
  %lnot1 = xor i1 %lnot, true, !dbg !7183
  %lnot.ext = zext i1 %lnot1 to i32, !dbg !7183
  %conv = sext i32 %lnot.ext to i64, !dbg !7183
  %tobool = icmp ne i64 %conv, 0, !dbg !7183
  ret i1 %tobool, !dbg !7184
}

; Function Attrs: noredzone
declare dso_local void @devres_free(i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local %struct.regmap_field* @devm_regmap_field_alloc(%struct.device* %dev, %struct.regmap* %regmap, %struct.reg_field* byval(%struct.reg_field) align 8 %reg_field) #0 !dbg !7185 {
entry:
  %retval = alloca %struct.regmap_field*, align 8
  %dev.addr = alloca %struct.device*, align 8
  %regmap.addr = alloca %struct.regmap*, align 8
  %rm_field = alloca %struct.regmap_field*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7204, metadata !DIExpression()), !dbg !7205
  store %struct.regmap* %regmap, %struct.regmap** %regmap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %regmap.addr, metadata !7206, metadata !DIExpression()), !dbg !7207
  call void @llvm.dbg.declare(metadata %struct.reg_field* %reg_field, metadata !7208, metadata !DIExpression()), !dbg !7209
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %rm_field, metadata !7210, metadata !DIExpression()), !dbg !7211
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !7212
  %call = call i8* @devm_kzalloc(%struct.device* %0, i64 32, i32 3264) #11, !dbg !7213
  %1 = bitcast i8* %call to %struct.regmap_field*, !dbg !7213
  store %struct.regmap_field* %1, %struct.regmap_field** %rm_field, align 8, !dbg !7211
  %2 = load %struct.regmap_field*, %struct.regmap_field** %rm_field, align 8, !dbg !7214
  %tobool = icmp ne %struct.regmap_field* %2, null, !dbg !7214
  br i1 %tobool, label %if.end, label %if.then, !dbg !7216

if.then:                                          ; preds = %entry
  %call1 = call i8* @ERR_PTR(i64 -12) #11, !dbg !7217
  %3 = bitcast i8* %call1 to %struct.regmap_field*, !dbg !7217
  store %struct.regmap_field* %3, %struct.regmap_field** %retval, align 8, !dbg !7218
  br label %return, !dbg !7218

if.end:                                           ; preds = %entry
  %4 = load %struct.regmap_field*, %struct.regmap_field** %rm_field, align 8, !dbg !7219
  %5 = load %struct.regmap*, %struct.regmap** %regmap.addr, align 8, !dbg !7220
  call void @regmap_field_init(%struct.regmap_field* %4, %struct.regmap* %5, %struct.reg_field* byval(%struct.reg_field) align 8 %reg_field) #11, !dbg !7221
  %6 = load %struct.regmap_field*, %struct.regmap_field** %rm_field, align 8, !dbg !7222
  store %struct.regmap_field* %6, %struct.regmap_field** %retval, align 8, !dbg !7223
  br label %return, !dbg !7223

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.regmap_field*, %struct.regmap_field** %retval, align 8, !dbg !7224
  ret %struct.regmap_field* %7, !dbg !7224
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @devm_kzalloc(%struct.device* %dev, i64 %size, i32 %gfp) #0 !dbg !7225 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %size.addr = alloca i64, align 8
  %gfp.addr = alloca i32, align 4
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7228, metadata !DIExpression()), !dbg !7229
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !7230, metadata !DIExpression()), !dbg !7231
  store i32 %gfp, i32* %gfp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %gfp.addr, metadata !7232, metadata !DIExpression()), !dbg !7233
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !7234
  %1 = load i64, i64* %size.addr, align 8, !dbg !7235
  %2 = load i32, i32* %gfp.addr, align 4, !dbg !7236
  %or = or i32 %2, 256, !dbg !7237
  %call = call noalias i8* @devm_kmalloc(%struct.device* %0, i64 %1, i32 %or) #11, !dbg !7238
  ret i8* %call, !dbg !7239
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_field_init(%struct.regmap_field* %rm_field, %struct.regmap* %regmap, %struct.reg_field* byval(%struct.reg_field) align 8 %reg_field) #0 !dbg !7240 {
entry:
  %rm_field.addr = alloca %struct.regmap_field*, align 8
  %regmap.addr = alloca %struct.regmap*, align 8
  store %struct.regmap_field* %rm_field, %struct.regmap_field** %rm_field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %rm_field.addr, metadata !7243, metadata !DIExpression()), !dbg !7244
  store %struct.regmap* %regmap, %struct.regmap** %regmap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %regmap.addr, metadata !7245, metadata !DIExpression()), !dbg !7246
  call void @llvm.dbg.declare(metadata %struct.reg_field* %reg_field, metadata !7247, metadata !DIExpression()), !dbg !7248
  %0 = load %struct.regmap*, %struct.regmap** %regmap.addr, align 8, !dbg !7249
  %1 = load %struct.regmap_field*, %struct.regmap_field** %rm_field.addr, align 8, !dbg !7250
  %regmap1 = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %1, i32 0, i32 0, !dbg !7251
  store %struct.regmap* %0, %struct.regmap** %regmap1, align 8, !dbg !7252
  %reg = getelementptr inbounds %struct.reg_field, %struct.reg_field* %reg_field, i32 0, i32 0, !dbg !7253
  %2 = load i32, i32* %reg, align 8, !dbg !7253
  %3 = load %struct.regmap_field*, %struct.regmap_field** %rm_field.addr, align 8, !dbg !7254
  %reg2 = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %3, i32 0, i32 3, !dbg !7255
  store i32 %2, i32* %reg2, align 8, !dbg !7256
  %lsb = getelementptr inbounds %struct.reg_field, %struct.reg_field* %reg_field, i32 0, i32 1, !dbg !7257
  %4 = load i32, i32* %lsb, align 4, !dbg !7257
  %5 = load %struct.regmap_field*, %struct.regmap_field** %rm_field.addr, align 8, !dbg !7258
  %shift = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %5, i32 0, i32 2, !dbg !7259
  store i32 %4, i32* %shift, align 4, !dbg !7260
  %lsb3 = getelementptr inbounds %struct.reg_field, %struct.reg_field* %reg_field, i32 0, i32 1, !dbg !7261
  %6 = load i32, i32* %lsb3, align 4, !dbg !7261
  %sh_prom = zext i32 %6 to i64, !dbg !7261
  %shl = shl i64 1, %sh_prom, !dbg !7261
  %sub = sub i64 -1, %shl, !dbg !7261
  %add = add i64 %sub, 1, !dbg !7261
  %msb = getelementptr inbounds %struct.reg_field, %struct.reg_field* %reg_field, i32 0, i32 2, !dbg !7261
  %7 = load i32, i32* %msb, align 8, !dbg !7261
  %sub4 = sub i32 63, %7, !dbg !7261
  %sh_prom5 = zext i32 %sub4 to i64, !dbg !7261
  %shr = lshr i64 -1, %sh_prom5, !dbg !7261
  %and = and i64 %add, %shr, !dbg !7261
  %add6 = add i64 0, %and, !dbg !7261
  %conv = trunc i64 %add6 to i32, !dbg !7261
  %8 = load %struct.regmap_field*, %struct.regmap_field** %rm_field.addr, align 8, !dbg !7262
  %mask = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %8, i32 0, i32 1, !dbg !7263
  store i32 %conv, i32* %mask, align 8, !dbg !7264
  %id_size = getelementptr inbounds %struct.reg_field, %struct.reg_field* %reg_field, i32 0, i32 3, !dbg !7265
  %9 = load i32, i32* %id_size, align 4, !dbg !7265
  %10 = load %struct.regmap_field*, %struct.regmap_field** %rm_field.addr, align 8, !dbg !7266
  %id_size7 = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %10, i32 0, i32 4, !dbg !7267
  store i32 %9, i32* %id_size7, align 4, !dbg !7268
  %id_offset = getelementptr inbounds %struct.reg_field, %struct.reg_field* %reg_field, i32 0, i32 4, !dbg !7269
  %11 = load i32, i32* %id_offset, align 8, !dbg !7269
  %12 = load %struct.regmap_field*, %struct.regmap_field** %rm_field.addr, align 8, !dbg !7270
  %id_offset8 = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %12, i32 0, i32 5, !dbg !7271
  store i32 %11, i32* %id_offset8, align 8, !dbg !7272
  ret void, !dbg !7273
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_field_bulk_alloc(%struct.regmap* %regmap, %struct.regmap_field** %rm_field, %struct.reg_field* %reg_field, i32 %num_fields) #0 !dbg !7274 {
entry:
  %retval = alloca i32, align 4
  %regmap.addr = alloca %struct.regmap*, align 8
  %rm_field.addr = alloca %struct.regmap_field**, align 8
  %reg_field.addr = alloca %struct.reg_field*, align 8
  %num_fields.addr = alloca i32, align 4
  %rf = alloca %struct.regmap_field*, align 8
  %i = alloca i32, align 4
  %byval-temp = alloca %struct.reg_field, align 8
  store %struct.regmap* %regmap, %struct.regmap** %regmap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %regmap.addr, metadata !7279, metadata !DIExpression()), !dbg !7280
  store %struct.regmap_field** %rm_field, %struct.regmap_field*** %rm_field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field*** %rm_field.addr, metadata !7281, metadata !DIExpression()), !dbg !7282
  store %struct.reg_field* %reg_field, %struct.reg_field** %reg_field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.reg_field** %reg_field.addr, metadata !7283, metadata !DIExpression()), !dbg !7284
  store i32 %num_fields, i32* %num_fields.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_fields.addr, metadata !7285, metadata !DIExpression()), !dbg !7286
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %rf, metadata !7287, metadata !DIExpression()), !dbg !7288
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7289, metadata !DIExpression()), !dbg !7290
  %0 = load i32, i32* %num_fields.addr, align 4, !dbg !7291
  %conv = sext i32 %0 to i64, !dbg !7291
  %call = call i8* @kcalloc(i64 %conv, i64 32, i32 3264) #11, !dbg !7292
  %1 = bitcast i8* %call to %struct.regmap_field*, !dbg !7292
  store %struct.regmap_field* %1, %struct.regmap_field** %rf, align 8, !dbg !7293
  %2 = load %struct.regmap_field*, %struct.regmap_field** %rf, align 8, !dbg !7294
  %tobool = icmp ne %struct.regmap_field* %2, null, !dbg !7294
  br i1 %tobool, label %if.end, label %if.then, !dbg !7296

if.then:                                          ; preds = %entry
  store i32 -12, i32* %retval, align 4, !dbg !7297
  br label %return, !dbg !7297

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7298
  br label %for.cond, !dbg !7300

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load i32, i32* %i, align 4, !dbg !7301
  %4 = load i32, i32* %num_fields.addr, align 4, !dbg !7303
  %cmp = icmp slt i32 %3, %4, !dbg !7304
  br i1 %cmp, label %for.body, label %for.end, !dbg !7305

for.body:                                         ; preds = %for.cond
  %5 = load %struct.regmap_field*, %struct.regmap_field** %rf, align 8, !dbg !7306
  %6 = load i32, i32* %i, align 4, !dbg !7308
  %idxprom = sext i32 %6 to i64, !dbg !7306
  %arrayidx = getelementptr %struct.regmap_field, %struct.regmap_field* %5, i64 %idxprom, !dbg !7306
  %7 = load %struct.regmap*, %struct.regmap** %regmap.addr, align 8, !dbg !7309
  %8 = load %struct.reg_field*, %struct.reg_field** %reg_field.addr, align 8, !dbg !7310
  %9 = load i32, i32* %i, align 4, !dbg !7311
  %idxprom2 = sext i32 %9 to i64, !dbg !7310
  %arrayidx3 = getelementptr %struct.reg_field, %struct.reg_field* %8, i64 %idxprom2, !dbg !7310
  %10 = bitcast %struct.reg_field* %byval-temp to i8*, !dbg !7312
  %11 = bitcast %struct.reg_field* %arrayidx3 to i8*, !dbg !7312
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 4 %11, i64 20, i1 false), !dbg !7312
  call void @regmap_field_init(%struct.regmap_field* %arrayidx, %struct.regmap* %7, %struct.reg_field* byval(%struct.reg_field) align 8 %byval-temp) #11, !dbg !7312
  %12 = load %struct.regmap_field*, %struct.regmap_field** %rf, align 8, !dbg !7313
  %13 = load i32, i32* %i, align 4, !dbg !7314
  %idxprom4 = sext i32 %13 to i64, !dbg !7313
  %arrayidx5 = getelementptr %struct.regmap_field, %struct.regmap_field* %12, i64 %idxprom4, !dbg !7313
  %14 = load %struct.regmap_field**, %struct.regmap_field*** %rm_field.addr, align 8, !dbg !7315
  %15 = load i32, i32* %i, align 4, !dbg !7316
  %idxprom6 = sext i32 %15 to i64, !dbg !7315
  %arrayidx7 = getelementptr %struct.regmap_field*, %struct.regmap_field** %14, i64 %idxprom6, !dbg !7315
  store %struct.regmap_field* %arrayidx5, %struct.regmap_field** %arrayidx7, align 8, !dbg !7317
  br label %for.inc, !dbg !7318

for.inc:                                          ; preds = %for.body
  %16 = load i32, i32* %i, align 4, !dbg !7319
  %inc = add i32 %16, 1, !dbg !7319
  store i32 %inc, i32* %i, align 4, !dbg !7319
  br label %for.cond, !dbg !7320, !llvm.loop !7321

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7323
  br label %return, !dbg !7323

return:                                           ; preds = %for.end, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !7324
  ret i32 %17, !dbg !7324
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @kcalloc(i64 %n, i64 %size, i32 %flags) #0 !dbg !7325 {
entry:
  %n.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !7328, metadata !DIExpression()), !dbg !7329
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !7330, metadata !DIExpression()), !dbg !7331
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7332, metadata !DIExpression()), !dbg !7333
  %0 = load i64, i64* %n.addr, align 8, !dbg !7334
  %1 = load i64, i64* %size.addr, align 8, !dbg !7335
  %2 = load i32, i32* %flags.addr, align 4, !dbg !7336
  %or = or i32 %2, 256, !dbg !7337
  %call = call i8* @kmalloc_array(i64 %0, i64 %1, i32 %or) #11, !dbg !7338
  ret i8* %call, !dbg !7339
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @devm_regmap_field_bulk_alloc(%struct.device* %dev, %struct.regmap* %regmap, %struct.regmap_field** %rm_field, %struct.reg_field* %reg_field, i32 %num_fields) #0 !dbg !7340 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.device*, align 8
  %regmap.addr = alloca %struct.regmap*, align 8
  %rm_field.addr = alloca %struct.regmap_field**, align 8
  %reg_field.addr = alloca %struct.reg_field*, align 8
  %num_fields.addr = alloca i32, align 4
  %rf = alloca %struct.regmap_field*, align 8
  %i = alloca i32, align 4
  %byval-temp = alloca %struct.reg_field, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7343, metadata !DIExpression()), !dbg !7344
  store %struct.regmap* %regmap, %struct.regmap** %regmap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %regmap.addr, metadata !7345, metadata !DIExpression()), !dbg !7346
  store %struct.regmap_field** %rm_field, %struct.regmap_field*** %rm_field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field*** %rm_field.addr, metadata !7347, metadata !DIExpression()), !dbg !7348
  store %struct.reg_field* %reg_field, %struct.reg_field** %reg_field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.reg_field** %reg_field.addr, metadata !7349, metadata !DIExpression()), !dbg !7350
  store i32 %num_fields, i32* %num_fields.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_fields.addr, metadata !7351, metadata !DIExpression()), !dbg !7352
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %rf, metadata !7353, metadata !DIExpression()), !dbg !7354
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7355, metadata !DIExpression()), !dbg !7356
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !7357
  %1 = load i32, i32* %num_fields.addr, align 4, !dbg !7358
  %conv = sext i32 %1 to i64, !dbg !7358
  %call = call i8* @devm_kcalloc(%struct.device* %0, i64 %conv, i64 32, i32 3264) #11, !dbg !7359
  %2 = bitcast i8* %call to %struct.regmap_field*, !dbg !7359
  store %struct.regmap_field* %2, %struct.regmap_field** %rf, align 8, !dbg !7360
  %3 = load %struct.regmap_field*, %struct.regmap_field** %rf, align 8, !dbg !7361
  %tobool = icmp ne %struct.regmap_field* %3, null, !dbg !7361
  br i1 %tobool, label %if.end, label %if.then, !dbg !7363

if.then:                                          ; preds = %entry
  store i32 -12, i32* %retval, align 4, !dbg !7364
  br label %return, !dbg !7364

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !7365
  br label %for.cond, !dbg !7367

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %i, align 4, !dbg !7368
  %5 = load i32, i32* %num_fields.addr, align 4, !dbg !7370
  %cmp = icmp slt i32 %4, %5, !dbg !7371
  br i1 %cmp, label %for.body, label %for.end, !dbg !7372

for.body:                                         ; preds = %for.cond
  %6 = load %struct.regmap_field*, %struct.regmap_field** %rf, align 8, !dbg !7373
  %7 = load i32, i32* %i, align 4, !dbg !7375
  %idxprom = sext i32 %7 to i64, !dbg !7373
  %arrayidx = getelementptr %struct.regmap_field, %struct.regmap_field* %6, i64 %idxprom, !dbg !7373
  %8 = load %struct.regmap*, %struct.regmap** %regmap.addr, align 8, !dbg !7376
  %9 = load %struct.reg_field*, %struct.reg_field** %reg_field.addr, align 8, !dbg !7377
  %10 = load i32, i32* %i, align 4, !dbg !7378
  %idxprom2 = sext i32 %10 to i64, !dbg !7377
  %arrayidx3 = getelementptr %struct.reg_field, %struct.reg_field* %9, i64 %idxprom2, !dbg !7377
  %11 = bitcast %struct.reg_field* %byval-temp to i8*, !dbg !7379
  %12 = bitcast %struct.reg_field* %arrayidx3 to i8*, !dbg !7379
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %11, i8* align 4 %12, i64 20, i1 false), !dbg !7379
  call void @regmap_field_init(%struct.regmap_field* %arrayidx, %struct.regmap* %8, %struct.reg_field* byval(%struct.reg_field) align 8 %byval-temp) #11, !dbg !7379
  %13 = load %struct.regmap_field*, %struct.regmap_field** %rf, align 8, !dbg !7380
  %14 = load i32, i32* %i, align 4, !dbg !7381
  %idxprom4 = sext i32 %14 to i64, !dbg !7380
  %arrayidx5 = getelementptr %struct.regmap_field, %struct.regmap_field* %13, i64 %idxprom4, !dbg !7380
  %15 = load %struct.regmap_field**, %struct.regmap_field*** %rm_field.addr, align 8, !dbg !7382
  %16 = load i32, i32* %i, align 4, !dbg !7383
  %idxprom6 = sext i32 %16 to i64, !dbg !7382
  %arrayidx7 = getelementptr %struct.regmap_field*, %struct.regmap_field** %15, i64 %idxprom6, !dbg !7382
  store %struct.regmap_field* %arrayidx5, %struct.regmap_field** %arrayidx7, align 8, !dbg !7384
  br label %for.inc, !dbg !7385

for.inc:                                          ; preds = %for.body
  %17 = load i32, i32* %i, align 4, !dbg !7386
  %inc = add i32 %17, 1, !dbg !7386
  store i32 %inc, i32* %i, align 4, !dbg !7386
  br label %for.cond, !dbg !7387, !llvm.loop !7388

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !7390
  br label %return, !dbg !7390

return:                                           ; preds = %for.end, %if.then
  %18 = load i32, i32* %retval, align 4, !dbg !7391
  ret i32 %18, !dbg !7391
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @devm_kcalloc(%struct.device* %dev, i64 %n, i64 %size, i32 %flags) #0 !dbg !7392 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %n.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7395, metadata !DIExpression()), !dbg !7396
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !7397, metadata !DIExpression()), !dbg !7398
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !7399, metadata !DIExpression()), !dbg !7400
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7401, metadata !DIExpression()), !dbg !7402
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !7403
  %1 = load i64, i64* %n.addr, align 8, !dbg !7404
  %2 = load i64, i64* %size.addr, align 8, !dbg !7405
  %3 = load i32, i32* %flags.addr, align 4, !dbg !7406
  %or = or i32 %3, 256, !dbg !7407
  %call = call i8* @devm_kmalloc_array(%struct.device* %0, i64 %1, i64 %2, i32 %or) #11, !dbg !7408
  ret i8* %call, !dbg !7409
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @regmap_field_bulk_free(%struct.regmap_field* %field) #0 !dbg !7410 {
entry:
  %field.addr = alloca %struct.regmap_field*, align 8
  store %struct.regmap_field* %field, %struct.regmap_field** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %field.addr, metadata !7413, metadata !DIExpression()), !dbg !7414
  %0 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !7415
  %1 = bitcast %struct.regmap_field* %0 to i8*, !dbg !7415
  call void @kfree(i8* %1) #11, !dbg !7416
  ret void, !dbg !7417
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @devm_regmap_field_bulk_free(%struct.device* %dev, %struct.regmap_field* %field) #0 !dbg !7418 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %field.addr = alloca %struct.regmap_field*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7421, metadata !DIExpression()), !dbg !7422
  store %struct.regmap_field* %field, %struct.regmap_field** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %field.addr, metadata !7423, metadata !DIExpression()), !dbg !7424
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !7425
  %1 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !7426
  %2 = bitcast %struct.regmap_field* %1 to i8*, !dbg !7426
  call void @devm_kfree(%struct.device* %0, i8* %2) #11, !dbg !7427
  ret void, !dbg !7428
}

; Function Attrs: noredzone
declare dso_local void @devm_kfree(%struct.device*, i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @devm_regmap_field_free(%struct.device* %dev, %struct.regmap_field* %field) #0 !dbg !7429 {
entry:
  %dev.addr = alloca %struct.device*, align 8
  %field.addr = alloca %struct.regmap_field*, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7430, metadata !DIExpression()), !dbg !7431
  store %struct.regmap_field* %field, %struct.regmap_field** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %field.addr, metadata !7432, metadata !DIExpression()), !dbg !7433
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !7434
  %1 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !7435
  %2 = bitcast %struct.regmap_field* %1 to i8*, !dbg !7435
  call void @devm_kfree(%struct.device* %0, i8* %2) #11, !dbg !7436
  ret void, !dbg !7437
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local %struct.regmap_field* @regmap_field_alloc(%struct.regmap* %regmap, %struct.reg_field* byval(%struct.reg_field) align 8 %reg_field) #0 !dbg !7438 {
entry:
  %retval = alloca %struct.regmap_field*, align 8
  %regmap.addr = alloca %struct.regmap*, align 8
  %rm_field = alloca %struct.regmap_field*, align 8
  store %struct.regmap* %regmap, %struct.regmap** %regmap.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %regmap.addr, metadata !7441, metadata !DIExpression()), !dbg !7442
  call void @llvm.dbg.declare(metadata %struct.reg_field* %reg_field, metadata !7443, metadata !DIExpression()), !dbg !7444
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %rm_field, metadata !7445, metadata !DIExpression()), !dbg !7446
  %call = call i8* @kzalloc(i64 32, i32 3264) #11, !dbg !7447
  %0 = bitcast i8* %call to %struct.regmap_field*, !dbg !7447
  store %struct.regmap_field* %0, %struct.regmap_field** %rm_field, align 8, !dbg !7446
  %1 = load %struct.regmap_field*, %struct.regmap_field** %rm_field, align 8, !dbg !7448
  %tobool = icmp ne %struct.regmap_field* %1, null, !dbg !7448
  br i1 %tobool, label %if.end, label %if.then, !dbg !7450

if.then:                                          ; preds = %entry
  %call1 = call i8* @ERR_PTR(i64 -12) #11, !dbg !7451
  %2 = bitcast i8* %call1 to %struct.regmap_field*, !dbg !7451
  store %struct.regmap_field* %2, %struct.regmap_field** %retval, align 8, !dbg !7452
  br label %return, !dbg !7452

if.end:                                           ; preds = %entry
  %3 = load %struct.regmap_field*, %struct.regmap_field** %rm_field, align 8, !dbg !7453
  %4 = load %struct.regmap*, %struct.regmap** %regmap.addr, align 8, !dbg !7454
  call void @regmap_field_init(%struct.regmap_field* %3, %struct.regmap* %4, %struct.reg_field* byval(%struct.reg_field) align 8 %reg_field) #11, !dbg !7455
  %5 = load %struct.regmap_field*, %struct.regmap_field** %rm_field, align 8, !dbg !7456
  store %struct.regmap_field* %5, %struct.regmap_field** %retval, align 8, !dbg !7457
  br label %return, !dbg !7457

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.regmap_field*, %struct.regmap_field** %retval, align 8, !dbg !7458
  ret %struct.regmap_field* %6, !dbg !7458
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @regmap_field_free(%struct.regmap_field* %field) #0 !dbg !7459 {
entry:
  %field.addr = alloca %struct.regmap_field*, align 8
  store %struct.regmap_field* %field, %struct.regmap_field** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %field.addr, metadata !7460, metadata !DIExpression()), !dbg !7461
  %0 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !7462
  %1 = bitcast %struct.regmap_field* %0 to i8*, !dbg !7462
  call void @kfree(i8* %1) #11, !dbg !7463
  ret void, !dbg !7464
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_reinit_cache(%struct.regmap* %map, %struct.regmap_config* %config) #0 !dbg !7465 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %config.addr = alloca %struct.regmap_config*, align 8
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7466, metadata !DIExpression()), !dbg !7467
  store %struct.regmap_config* %config, %struct.regmap_config** %config.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_config** %config.addr, metadata !7468, metadata !DIExpression()), !dbg !7469
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7470, metadata !DIExpression()), !dbg !7471
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7472
  call void @regcache_exit(%struct.regmap* %0) #11, !dbg !7473
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7474
  call void @regmap_debugfs_exit(%struct.regmap* %1) #11, !dbg !7475
  %2 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7476
  %max_register = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %2, i32 0, i32 18, !dbg !7477
  %3 = load i32, i32* %max_register, align 4, !dbg !7477
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7478
  %max_register1 = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 17, !dbg !7479
  store i32 %3, i32* %max_register1, align 4, !dbg !7480
  %5 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7481
  %writeable_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %5, i32 0, i32 5, !dbg !7482
  %6 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_reg, align 8, !dbg !7482
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7483
  %writeable_reg2 = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 18, !dbg !7484
  store i1 (%struct.device*, i32)* %6, i1 (%struct.device*, i32)** %writeable_reg2, align 8, !dbg !7485
  %8 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7486
  %readable_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %8, i32 0, i32 6, !dbg !7487
  %9 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %readable_reg, align 8, !dbg !7487
  %10 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7488
  %readable_reg3 = getelementptr inbounds %struct.regmap, %struct.regmap* %10, i32 0, i32 19, !dbg !7489
  store i1 (%struct.device*, i32)* %9, i1 (%struct.device*, i32)** %readable_reg3, align 8, !dbg !7490
  %11 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7491
  %volatile_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %11, i32 0, i32 7, !dbg !7492
  %12 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %volatile_reg, align 8, !dbg !7492
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7493
  %volatile_reg4 = getelementptr inbounds %struct.regmap, %struct.regmap* %13, i32 0, i32 20, !dbg !7494
  store i1 (%struct.device*, i32)* %12, i1 (%struct.device*, i32)** %volatile_reg4, align 8, !dbg !7495
  %14 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7496
  %precious_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %14, i32 0, i32 8, !dbg !7497
  %15 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %precious_reg, align 8, !dbg !7497
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7498
  %precious_reg5 = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 21, !dbg !7499
  store i1 (%struct.device*, i32)* %15, i1 (%struct.device*, i32)** %precious_reg5, align 8, !dbg !7500
  %17 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7501
  %writeable_noinc_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %17, i32 0, i32 9, !dbg !7502
  %18 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_noinc_reg, align 8, !dbg !7502
  %19 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7503
  %writeable_noinc_reg6 = getelementptr inbounds %struct.regmap, %struct.regmap* %19, i32 0, i32 22, !dbg !7504
  store i1 (%struct.device*, i32)* %18, i1 (%struct.device*, i32)** %writeable_noinc_reg6, align 8, !dbg !7505
  %20 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7506
  %readable_noinc_reg = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %20, i32 0, i32 10, !dbg !7507
  %21 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %readable_noinc_reg, align 8, !dbg !7507
  %22 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7508
  %readable_noinc_reg7 = getelementptr inbounds %struct.regmap, %struct.regmap* %22, i32 0, i32 23, !dbg !7509
  store i1 (%struct.device*, i32)* %21, i1 (%struct.device*, i32)** %readable_noinc_reg7, align 8, !dbg !7510
  %23 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7511
  %cache_type = getelementptr inbounds %struct.regmap_config, %struct.regmap_config* %23, i32 0, i32 27, !dbg !7512
  %24 = load i32, i32* %cache_type, align 4, !dbg !7512
  %25 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7513
  %cache_type8 = getelementptr inbounds %struct.regmap, %struct.regmap* %25, i32 0, i32 40, !dbg !7514
  store i32 %24, i32* %cache_type8, align 8, !dbg !7515
  %26 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7516
  %27 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7517
  %call = call i32 @regmap_set_name(%struct.regmap* %26, %struct.regmap_config* %27) #11, !dbg !7518
  store i32 %call, i32* %ret, align 4, !dbg !7519
  %28 = load i32, i32* %ret, align 4, !dbg !7520
  %tobool = icmp ne i32 %28, 0, !dbg !7520
  br i1 %tobool, label %if.then, label %if.end, !dbg !7522

if.then:                                          ; preds = %entry
  %29 = load i32, i32* %ret, align 4, !dbg !7523
  store i32 %29, i32* %retval, align 4, !dbg !7524
  br label %return, !dbg !7524

if.end:                                           ; preds = %entry
  %30 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7525
  call void @regmap_debugfs_init(%struct.regmap* %30) #11, !dbg !7526
  %31 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7527
  %cache_bypass = getelementptr inbounds %struct.regmap, %struct.regmap* %31, i32 0, i32 46, !dbg !7528
  store i8 0, i8* %cache_bypass, align 1, !dbg !7529
  %32 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7530
  %cache_only = getelementptr inbounds %struct.regmap, %struct.regmap* %32, i32 0, i32 45, !dbg !7531
  store i8 0, i8* %cache_only, align 4, !dbg !7532
  %33 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7533
  %34 = load %struct.regmap_config*, %struct.regmap_config** %config.addr, align 8, !dbg !7534
  %call9 = call i32 @regcache_init(%struct.regmap* %33, %struct.regmap_config* %34) #11, !dbg !7535
  store i32 %call9, i32* %retval, align 4, !dbg !7536
  br label %return, !dbg !7536

return:                                           ; preds = %if.end, %if.then
  %35 = load i32, i32* %retval, align 4, !dbg !7537
  ret i32 %35, !dbg !7537
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @regmap_exit(%struct.regmap* %map) #0 !dbg !7538 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %async = alloca %struct.regmap_async*, align 8
  %head__ = alloca %struct.list_head*, align 8
  %pos__ = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.list_head*, align 8
  %tmp7 = alloca %struct.regmap_async*, align 8
  %__mptr = alloca i8*, align 8
  %tmp10 = alloca %struct.regmap_async*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7539, metadata !DIExpression()), !dbg !7540
  call void @llvm.dbg.declare(metadata %struct.regmap_async** %async, metadata !7541, metadata !DIExpression()), !dbg !7542
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7543
  call void @regcache_exit(%struct.regmap* %0) #11, !dbg !7544
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7545
  call void @regmap_debugfs_exit(%struct.regmap* %1) #11, !dbg !7546
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7547
  call void @regmap_range_exit(%struct.regmap* %2) #11, !dbg !7548
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7549
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 8, !dbg !7551
  %4 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !7551
  %tobool = icmp ne %struct.regmap_bus* %4, null, !dbg !7549
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7552

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7553
  %bus1 = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 8, !dbg !7554
  %6 = load %struct.regmap_bus*, %struct.regmap_bus** %bus1, align 8, !dbg !7554
  %free_context = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %6, i32 0, i32 8, !dbg !7555
  %7 = load void (i8*)*, void (i8*)** %free_context, align 8, !dbg !7555
  %tobool2 = icmp ne void (i8*)* %7, null, !dbg !7553
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7556

if.then:                                          ; preds = %land.lhs.true
  %8 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7557
  %bus3 = getelementptr inbounds %struct.regmap, %struct.regmap* %8, i32 0, i32 8, !dbg !7558
  %9 = load %struct.regmap_bus*, %struct.regmap_bus** %bus3, align 8, !dbg !7558
  %free_context4 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %9, i32 0, i32 8, !dbg !7559
  %10 = load void (i8*)*, void (i8*)** %free_context4, align 8, !dbg !7559
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7560
  %bus_context = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 9, !dbg !7561
  %12 = load i8*, i8** %bus_context, align 8, !dbg !7561
  call void %10(i8* %12) #11, !dbg !7557
  br label %if.end, !dbg !7557

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7562
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %13, i32 0, i32 6, !dbg !7563
  %14 = load i8*, i8** %work_buf, align 8, !dbg !7563
  call void @kfree(i8* %14) #11, !dbg !7564
  br label %while.cond, !dbg !7565

while.cond:                                       ; preds = %cond.end, %if.end
  %15 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7566
  %async_free = getelementptr inbounds %struct.regmap, %struct.regmap* %15, i32 0, i32 15, !dbg !7567
  %call = call i32 @list_empty(%struct.list_head* %async_free) #11, !dbg !7568
  %tobool5 = icmp ne i32 %call, 0, !dbg !7569
  %lnot = xor i1 %tobool5, true, !dbg !7569
  br i1 %lnot, label %while.body, label %while.end, !dbg !7565

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.list_head** %head__, metadata !7570, metadata !DIExpression()), !dbg !7573
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7573
  %async_free6 = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 15, !dbg !7573
  store %struct.list_head* %async_free6, %struct.list_head** %head__, align 8, !dbg !7573
  call void @llvm.dbg.declare(metadata %struct.list_head** %pos__, metadata !7574, metadata !DIExpression()), !dbg !7573
  br label %do.body, !dbg !7575

do.body:                                          ; preds = %while.body
  br label %do.end, !dbg !7577

do.end:                                           ; preds = %do.body
  %17 = load %struct.list_head*, %struct.list_head** %head__, align 8, !dbg !7575
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %17, i32 0, i32 0, !dbg !7575
  %18 = load volatile %struct.list_head*, %struct.list_head** %next, align 8, !dbg !7575
  store %struct.list_head* %18, %struct.list_head** %tmp, align 8, !dbg !7577
  %19 = load %struct.list_head*, %struct.list_head** %tmp, align 8, !dbg !7575
  store %struct.list_head* %19, %struct.list_head** %pos__, align 8, !dbg !7573
  %20 = load %struct.list_head*, %struct.list_head** %pos__, align 8, !dbg !7573
  %21 = load %struct.list_head*, %struct.list_head** %head__, align 8, !dbg !7573
  %cmp = icmp ne %struct.list_head* %20, %21, !dbg !7573
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !7573

cond.true:                                        ; preds = %do.end
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !7579, metadata !DIExpression()), !dbg !7581
  %22 = load %struct.list_head*, %struct.list_head** %pos__, align 8, !dbg !7581
  %23 = bitcast %struct.list_head* %22 to i8*, !dbg !7581
  store i8* %23, i8** %__mptr, align 8, !dbg !7581
  br label %do.body8, !dbg !7581

do.body8:                                         ; preds = %cond.true
  br label %do.end9, !dbg !7582

do.end9:                                          ; preds = %do.body8
  %24 = load i8*, i8** %__mptr, align 8, !dbg !7581
  %add.ptr = getelementptr i8, i8* %24, i64 0, !dbg !7581
  %25 = bitcast i8* %add.ptr to %struct.regmap_async*, !dbg !7581
  store %struct.regmap_async* %25, %struct.regmap_async** %tmp10, align 8, !dbg !7582
  %26 = load %struct.regmap_async*, %struct.regmap_async** %tmp10, align 8, !dbg !7581
  br label %cond.end, !dbg !7573

cond.false:                                       ; preds = %do.end
  br label %cond.end, !dbg !7573

cond.end:                                         ; preds = %cond.false, %do.end9
  %cond = phi %struct.regmap_async* [ %26, %do.end9 ], [ null, %cond.false ], !dbg !7573
  store %struct.regmap_async* %cond, %struct.regmap_async** %tmp7, align 8, !dbg !7573
  %27 = load %struct.regmap_async*, %struct.regmap_async** %tmp7, align 8, !dbg !7573
  store %struct.regmap_async* %27, %struct.regmap_async** %async, align 8, !dbg !7584
  %28 = load %struct.regmap_async*, %struct.regmap_async** %async, align 8, !dbg !7585
  %list = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %28, i32 0, i32 0, !dbg !7586
  call void @list_del(%struct.list_head* %list) #11, !dbg !7587
  %29 = load %struct.regmap_async*, %struct.regmap_async** %async, align 8, !dbg !7588
  %work_buf11 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %29, i32 0, i32 2, !dbg !7589
  %30 = load i8*, i8** %work_buf11, align 8, !dbg !7589
  call void @kfree(i8* %30) #11, !dbg !7590
  %31 = load %struct.regmap_async*, %struct.regmap_async** %async, align 8, !dbg !7591
  %32 = bitcast %struct.regmap_async* %31 to i8*, !dbg !7591
  call void @kfree(i8* %32) #11, !dbg !7592
  br label %while.cond, !dbg !7565, !llvm.loop !7593

while.end:                                        ; preds = %while.cond
  %33 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7595
  %hwlock = getelementptr inbounds %struct.regmap, %struct.regmap* %33, i32 0, i32 62, !dbg !7597
  %34 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock, align 8, !dbg !7597
  %tobool12 = icmp ne %struct.hwspinlock* %34, null, !dbg !7595
  br i1 %tobool12, label %if.then13, label %if.end16, !dbg !7598

if.then13:                                        ; preds = %while.end
  %35 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7599
  %hwlock14 = getelementptr inbounds %struct.regmap, %struct.regmap* %35, i32 0, i32 62, !dbg !7600
  %36 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock14, align 8, !dbg !7600
  %call15 = call i32 @hwspin_lock_free(%struct.hwspinlock* %36) #11, !dbg !7601
  br label %if.end16, !dbg !7601

if.end16:                                         ; preds = %if.then13, %while.end
  %37 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7602
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %37, i32 0, i32 1, !dbg !7604
  %38 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !7604
  %cmp17 = icmp eq void (i8*)* %38, @regmap_lock_mutex, !dbg !7605
  br i1 %cmp17, label %if.then18, label %if.end19, !dbg !7606

if.then18:                                        ; preds = %if.end16
  %39 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7607
  %40 = getelementptr inbounds %struct.regmap, %struct.regmap* %39, i32 0, i32 0, !dbg !7608
  %mutex = bitcast %union.anon* %40 to %struct.mutex*, !dbg !7608
  call void @mutex_destroy(%struct.mutex* %mutex) #11, !dbg !7609
  br label %if.end19, !dbg !7609

if.end19:                                         ; preds = %if.then18, %if.end16
  %41 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7610
  %name = getelementptr inbounds %struct.regmap, %struct.regmap* %41, i32 0, i32 10, !dbg !7611
  %42 = load i8*, i8** %name, align 8, !dbg !7611
  call void @kfree_const(i8* %42) #11, !dbg !7612
  %43 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7613
  %patch = getelementptr inbounds %struct.regmap, %struct.regmap* %43, i32 0, i32 53, !dbg !7614
  %44 = load %struct.reg_sequence*, %struct.reg_sequence** %patch, align 8, !dbg !7614
  %45 = bitcast %struct.reg_sequence* %44 to i8*, !dbg !7613
  call void @kfree(i8* %45) #11, !dbg !7615
  %46 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7616
  %47 = bitcast %struct.regmap* %46 to i8*, !dbg !7616
  call void @kfree(i8* %47) #11, !dbg !7617
  ret void, !dbg !7618
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @list_empty(%struct.list_head* %head) #0 !dbg !7619 {
entry:
  %head.addr = alloca %struct.list_head*, align 8
  %tmp = alloca %struct.list_head*, align 8
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %head.addr, metadata !7624, metadata !DIExpression()), !dbg !7625
  br label %do.body, !dbg !7626

do.body:                                          ; preds = %entry
  br label %do.end, !dbg !7628

do.end:                                           ; preds = %do.body
  %0 = load %struct.list_head*, %struct.list_head** %head.addr, align 8, !dbg !7626
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %0, i32 0, i32 0, !dbg !7626
  %1 = load volatile %struct.list_head*, %struct.list_head** %next, align 8, !dbg !7626
  store %struct.list_head* %1, %struct.list_head** %tmp, align 8, !dbg !7628
  %2 = load %struct.list_head*, %struct.list_head** %tmp, align 8, !dbg !7626
  %3 = load %struct.list_head*, %struct.list_head** %head.addr, align 8, !dbg !7630
  %cmp = icmp eq %struct.list_head* %2, %3, !dbg !7631
  %conv = zext i1 %cmp to i32, !dbg !7631
  ret i32 %conv, !dbg !7632
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @list_del(%struct.list_head* %entry1) #0 !dbg !7633 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %entry.addr, metadata !7634, metadata !DIExpression()), !dbg !7635
  %0 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8, !dbg !7636
  call void @__list_del_entry(%struct.list_head* %0) #11, !dbg !7637
  %1 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8, !dbg !7638
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 0, !dbg !7639
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 256 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %next, align 8, !dbg !7640
  %2 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8, !dbg !7641
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 1, !dbg !7642
  store %struct.list_head* bitcast (i8* getelementptr (i8, i8* inttoptr (i64 290 to i8*), i64 -2401263026318606336) to %struct.list_head*), %struct.list_head** %prev, align 8, !dbg !7643
  ret void, !dbg !7644
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @mutex_destroy(%struct.mutex* %lock) #0 !dbg !7645 {
entry:
  %lock.addr = alloca %struct.mutex*, align 8
  store %struct.mutex* %lock, %struct.mutex** %lock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.mutex** %lock.addr, metadata !7649, metadata !DIExpression()), !dbg !7650
  ret void, !dbg !7651
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local %struct.regmap* @dev_get_regmap(%struct.device* %dev, i8* %name) #0 !dbg !7652 {
entry:
  %retval = alloca %struct.regmap*, align 8
  %dev.addr = alloca %struct.device*, align 8
  %name.addr = alloca i8*, align 8
  %r = alloca %struct.regmap**, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7655, metadata !DIExpression()), !dbg !7656
  store i8* %name, i8** %name.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %name.addr, metadata !7657, metadata !DIExpression()), !dbg !7658
  call void @llvm.dbg.declare(metadata %struct.regmap*** %r, metadata !7659, metadata !DIExpression()), !dbg !7660
  %0 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !7661
  %1 = load i8*, i8** %name.addr, align 8, !dbg !7662
  %call = call i8* @devres_find(%struct.device* %0, void (%struct.device*, i8*)* @dev_get_regmap_release, i32 (%struct.device*, i8*, i8*)* @dev_get_regmap_match, i8* %1) #11, !dbg !7663
  %2 = bitcast i8* %call to %struct.regmap**, !dbg !7663
  store %struct.regmap** %2, %struct.regmap*** %r, align 8, !dbg !7660
  %3 = load %struct.regmap**, %struct.regmap*** %r, align 8, !dbg !7664
  %tobool = icmp ne %struct.regmap** %3, null, !dbg !7664
  br i1 %tobool, label %if.end, label %if.then, !dbg !7666

if.then:                                          ; preds = %entry
  store %struct.regmap* null, %struct.regmap** %retval, align 8, !dbg !7667
  br label %return, !dbg !7667

if.end:                                           ; preds = %entry
  %4 = load %struct.regmap**, %struct.regmap*** %r, align 8, !dbg !7668
  %5 = load %struct.regmap*, %struct.regmap** %4, align 8, !dbg !7669
  store %struct.regmap* %5, %struct.regmap** %retval, align 8, !dbg !7670
  br label %return, !dbg !7670

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.regmap*, %struct.regmap** %retval, align 8, !dbg !7671
  ret %struct.regmap* %6, !dbg !7671
}

; Function Attrs: noredzone
declare dso_local i8* @devres_find(%struct.device*, void (%struct.device*, i8*)*, i32 (%struct.device*, i8*, i8*)*, i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @dev_get_regmap_match(%struct.device* %dev, i8* %res, i8* %data) #0 !dbg !7672 {
entry:
  %retval = alloca i32, align 4
  %dev.addr = alloca %struct.device*, align 8
  %res.addr = alloca i8*, align 8
  %data.addr = alloca i8*, align 8
  %r = alloca %struct.regmap**, align 8
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !7675, metadata !DIExpression()), !dbg !7676
  store i8* %res, i8** %res.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %res.addr, metadata !7677, metadata !DIExpression()), !dbg !7678
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !7679, metadata !DIExpression()), !dbg !7680
  call void @llvm.dbg.declare(metadata %struct.regmap*** %r, metadata !7681, metadata !DIExpression()), !dbg !7682
  %0 = load i8*, i8** %res.addr, align 8, !dbg !7683
  %1 = bitcast i8* %0 to %struct.regmap**, !dbg !7683
  store %struct.regmap** %1, %struct.regmap*** %r, align 8, !dbg !7682
  %2 = load %struct.regmap**, %struct.regmap*** %r, align 8, !dbg !7684
  %tobool = icmp ne %struct.regmap** %2, null, !dbg !7684
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7686

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.regmap**, %struct.regmap*** %r, align 8, !dbg !7687
  %4 = load %struct.regmap*, %struct.regmap** %3, align 8, !dbg !7688
  %tobool1 = icmp ne %struct.regmap* %4, null, !dbg !7688
  br i1 %tobool1, label %if.end25, label %if.then, !dbg !7689

if.then:                                          ; preds = %lor.lhs.false, %entry
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !7690, metadata !DIExpression()), !dbg !7693
  %5 = load %struct.regmap**, %struct.regmap*** %r, align 8, !dbg !7693
  %tobool2 = icmp ne %struct.regmap** %5, null, !dbg !7693
  br i1 %tobool2, label %lor.rhs, label %lor.end, !dbg !7693

lor.rhs:                                          ; preds = %if.then
  %6 = load %struct.regmap**, %struct.regmap*** %r, align 8, !dbg !7693
  %7 = load %struct.regmap*, %struct.regmap** %6, align 8, !dbg !7693
  %tobool3 = icmp ne %struct.regmap* %7, null, !dbg !7693
  %lnot = xor i1 %tobool3, true, !dbg !7693
  br label %lor.end, !dbg !7693

lor.end:                                          ; preds = %lor.rhs, %if.then
  %8 = phi i1 [ true, %if.then ], [ %lnot, %lor.rhs ]
  %lnot4 = xor i1 %8, true, !dbg !7693
  %lnot5 = xor i1 %lnot4, true, !dbg !7693
  %lnot.ext = zext i1 %lnot5 to i32, !dbg !7693
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !7693
  %9 = load i32, i32* %__ret_warn_on, align 4, !dbg !7694
  %tobool6 = icmp ne i32 %9, 0, !dbg !7694
  %lnot7 = xor i1 %tobool6, true, !dbg !7694
  %lnot9 = xor i1 %lnot7, true, !dbg !7694
  %lnot.ext10 = zext i1 %lnot9 to i32, !dbg !7694
  %conv = sext i32 %lnot.ext10 to i64, !dbg !7694
  %tobool11 = icmp ne i64 %conv, 0, !dbg !7694
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !7693

if.then12:                                        ; preds = %lor.end
  br label %do.body, !dbg !7694

do.body:                                          ; preds = %if.then12
  br label %do.body13, !dbg !7696

do.body13:                                        ; preds = %do.body
  br label %do.end, !dbg !7698

do.end:                                           ; preds = %do.body13
  br label %do.body14, !dbg !7696

do.body14:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 1507, i32 2305, i64 12) #10, !dbg !7700, !srcloc !7702
  br label %do.end15, !dbg !7700

do.end15:                                         ; preds = %do.body14
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 205) #10, !dbg !7703, !srcloc !7705
  br label %do.body16, !dbg !7696

do.body16:                                        ; preds = %do.end15
  br label %do.end17, !dbg !7706

do.end17:                                         ; preds = %do.body16
  br label %do.end18, !dbg !7696

do.end18:                                         ; preds = %do.end17
  br label %if.end, !dbg !7696

if.end:                                           ; preds = %do.end18, %lor.end
  %10 = load i32, i32* %__ret_warn_on, align 4, !dbg !7693
  %tobool19 = icmp ne i32 %10, 0, !dbg !7693
  %lnot20 = xor i1 %tobool19, true, !dbg !7693
  %lnot22 = xor i1 %lnot20, true, !dbg !7693
  %lnot.ext23 = zext i1 %lnot22 to i32, !dbg !7693
  %conv24 = sext i32 %lnot.ext23 to i64, !dbg !7693
  store i64 %conv24, i64* %tmp, align 8, !dbg !7694
  %11 = load i64, i64* %tmp, align 8, !dbg !7693
  store i32 0, i32* %retval, align 4, !dbg !7708
  br label %return, !dbg !7708

if.end25:                                         ; preds = %lor.lhs.false
  %12 = load i8*, i8** %data.addr, align 8, !dbg !7709
  %tobool26 = icmp ne i8* %12, null, !dbg !7709
  br i1 %tobool26, label %if.then27, label %if.else, !dbg !7711

if.then27:                                        ; preds = %if.end25
  %13 = load %struct.regmap**, %struct.regmap*** %r, align 8, !dbg !7712
  %14 = load %struct.regmap*, %struct.regmap** %13, align 8, !dbg !7713
  %name = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 10, !dbg !7714
  %15 = load i8*, i8** %name, align 8, !dbg !7714
  %16 = load i8*, i8** %data.addr, align 8, !dbg !7715
  %call = call i32 @strcmp(i8* %15, i8* %16) #11, !dbg !7716
  %tobool28 = icmp ne i32 %call, 0, !dbg !7717
  %lnot29 = xor i1 %tobool28, true, !dbg !7717
  %lnot.ext30 = zext i1 %lnot29 to i32, !dbg !7717
  store i32 %lnot.ext30, i32* %retval, align 4, !dbg !7718
  br label %return, !dbg !7718

if.else:                                          ; preds = %if.end25
  store i32 1, i32* %retval, align 4, !dbg !7719
  br label %return, !dbg !7719

return:                                           ; preds = %if.else, %if.then27, %if.end
  %17 = load i32, i32* %retval, align 4, !dbg !7720
  ret i32 %17, !dbg !7720
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local %struct.device* @regmap_get_device(%struct.regmap* %map) #0 !dbg !7721 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7724, metadata !DIExpression()), !dbg !7725
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7726
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 5, !dbg !7727
  %1 = load %struct.device*, %struct.device** %dev, align 8, !dbg !7727
  ret %struct.device* %1, !dbg !7728
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local zeroext i1 @regmap_can_raw_write(%struct.regmap* %map) #0 !dbg !7729 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7732, metadata !DIExpression()), !dbg !7733
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7734
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 8, !dbg !7735
  %1 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !7735
  %tobool = icmp ne %struct.regmap_bus* %1, null, !dbg !7734
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !7736

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7737
  %bus1 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 8, !dbg !7738
  %3 = load %struct.regmap_bus*, %struct.regmap_bus** %bus1, align 8, !dbg !7738
  %write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %3, i32 0, i32 1, !dbg !7739
  %4 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %write, align 8, !dbg !7739
  %tobool2 = icmp ne i32 (i8*, i8*, i64)* %4, null, !dbg !7737
  br i1 %tobool2, label %land.lhs.true3, label %land.end, !dbg !7740

land.lhs.true3:                                   ; preds = %land.lhs.true
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7741
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 7, !dbg !7742
  %format_val = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 6, !dbg !7743
  %6 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_val, align 8, !dbg !7743
  %tobool4 = icmp ne void (i8*, i32, i32)* %6, null, !dbg !7741
  br i1 %tobool4, label %land.rhs, label %land.end, !dbg !7744

land.rhs:                                         ; preds = %land.lhs.true3
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7745
  %format5 = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 7, !dbg !7746
  %format_reg = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format5, i32 0, i32 5, !dbg !7747
  %8 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_reg, align 8, !dbg !7747
  %tobool6 = icmp ne void (i8*, i32, i32)* %8, null, !dbg !7744
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true3, %land.lhs.true, %entry
  %9 = phi i1 [ false, %land.lhs.true3 ], [ false, %land.lhs.true ], [ false, %entry ], [ %tobool6, %land.rhs ], !dbg !7748
  ret i1 %9, !dbg !7749
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i64 @regmap_get_raw_read_max(%struct.regmap* %map) #0 !dbg !7750 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7753, metadata !DIExpression()), !dbg !7754
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7755
  %max_raw_read = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 58, !dbg !7756
  %1 = load i64, i64* %max_raw_read, align 8, !dbg !7756
  ret i64 %1, !dbg !7757
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i64 @regmap_get_raw_write_max(%struct.regmap* %map) #0 !dbg !7758 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7759, metadata !DIExpression()), !dbg !7760
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7761
  %max_raw_write = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 59, !dbg !7762
  %1 = load i64, i64* %max_raw_write, align 8, !dbg !7762
  ret i64 %1, !dbg !7763
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @_regmap_write(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !7764 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %context = alloca i8*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7765, metadata !DIExpression()), !dbg !7766
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !7767, metadata !DIExpression()), !dbg !7768
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !7769, metadata !DIExpression()), !dbg !7770
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7771, metadata !DIExpression()), !dbg !7772
  call void @llvm.dbg.declare(metadata i8** %context, metadata !7773, metadata !DIExpression()), !dbg !7774
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7775
  %call = call i8* @_regmap_map_get_context(%struct.regmap* %0) #11, !dbg !7776
  store i8* %call, i8** %context, align 8, !dbg !7774
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7777
  %2 = load i32, i32* %reg.addr, align 4, !dbg !7779
  %call1 = call zeroext i1 @regmap_writeable(%struct.regmap* %1, i32 %2) #11, !dbg !7780
  br i1 %call1, label %if.end, label %if.then, !dbg !7781

if.then:                                          ; preds = %entry
  store i32 -5, i32* %retval, align 4, !dbg !7782
  br label %return, !dbg !7782

if.end:                                           ; preds = %entry
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7783
  %cache_bypass = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 46, !dbg !7785
  %4 = load i8, i8* %cache_bypass, align 1, !dbg !7785
  %tobool = trunc i8 %4 to i1, !dbg !7785
  br i1 %tobool, label %if.end10, label %land.lhs.true, !dbg !7786

land.lhs.true:                                    ; preds = %if.end
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7787
  %defer_caching = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 33, !dbg !7788
  %6 = load i8, i8* %defer_caching, align 8, !dbg !7788
  %tobool2 = trunc i8 %6 to i1, !dbg !7788
  br i1 %tobool2, label %if.end10, label %if.then3, !dbg !7789

if.then3:                                         ; preds = %land.lhs.true
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7790
  %8 = load i32, i32* %reg.addr, align 4, !dbg !7792
  %9 = load i32, i32* %val.addr, align 4, !dbg !7793
  %call4 = call i32 @regcache_write(%struct.regmap* %7, i32 %8, i32 %9) #11, !dbg !7794
  store i32 %call4, i32* %ret, align 4, !dbg !7795
  %10 = load i32, i32* %ret, align 4, !dbg !7796
  %cmp = icmp ne i32 %10, 0, !dbg !7798
  br i1 %cmp, label %if.then5, label %if.end6, !dbg !7799

if.then5:                                         ; preds = %if.then3
  %11 = load i32, i32* %ret, align 4, !dbg !7800
  store i32 %11, i32* %retval, align 4, !dbg !7801
  br label %return, !dbg !7801

if.end6:                                          ; preds = %if.then3
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7802
  %cache_only = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 45, !dbg !7804
  %13 = load i8, i8* %cache_only, align 4, !dbg !7804
  %tobool7 = trunc i8 %13 to i1, !dbg !7804
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !7805

if.then8:                                         ; preds = %if.end6
  %14 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7806
  %cache_dirty = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 51, !dbg !7808
  store i8 1, i8* %cache_dirty, align 8, !dbg !7809
  store i32 0, i32* %retval, align 4, !dbg !7810
  br label %return, !dbg !7810

if.end9:                                          ; preds = %if.end6
  br label %if.end10, !dbg !7811

if.end10:                                         ; preds = %if.end9, %land.lhs.true, %if.end
  %15 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7812
  %call11 = call zeroext i1 @regmap_should_log(%struct.regmap* %15) #11, !dbg !7814
  br i1 %call11, label %if.then12, label %if.end13, !dbg !7815

if.then12:                                        ; preds = %if.end10
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7816
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 5, !dbg !7816
  %17 = load %struct.device*, %struct.device** %dev, align 8, !dbg !7816
  %18 = load i32, i32* %reg.addr, align 4, !dbg !7816
  %19 = load i32, i32* %val.addr, align 4, !dbg !7816
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %17, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i32 %18, i32 %19) #13, !dbg !7816
  br label %if.end13, !dbg !7816

if.end13:                                         ; preds = %if.then12, %if.end10
  %20 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7817
  %21 = load i32, i32* %reg.addr, align 4, !dbg !7818
  %22 = load i32, i32* %val.addr, align 4, !dbg !7819
  call void @trace_regmap_reg_write(%struct.regmap* %20, i32 %21, i32 %22) #11, !dbg !7820
  %23 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7821
  %reg_write = getelementptr inbounds %struct.regmap, %struct.regmap* %23, i32 0, i32 31, !dbg !7822
  %24 = load i32 (i8*, i32, i32)*, i32 (i8*, i32, i32)** %reg_write, align 8, !dbg !7822
  %25 = load i8*, i8** %context, align 8, !dbg !7823
  %26 = load i32, i32* %reg.addr, align 4, !dbg !7824
  %27 = load i32, i32* %val.addr, align 4, !dbg !7825
  %call14 = call i32 %24(i8* %25, i32 %26, i32 %27) #11, !dbg !7821
  store i32 %call14, i32* %retval, align 4, !dbg !7826
  br label %return, !dbg !7826

return:                                           ; preds = %if.end13, %if.then8, %if.then5, %if.then
  %28 = load i32, i32* %retval, align 4, !dbg !7827
  ret i32 %28, !dbg !7827
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @_regmap_map_get_context(%struct.regmap* %map) #0 !dbg !7828 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7831, metadata !DIExpression()), !dbg !7832
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7833
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 8, !dbg !7834
  %1 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !7834
  %tobool = icmp ne %struct.regmap_bus* %1, null, !dbg !7835
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7835

cond.true:                                        ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7836
  %3 = bitcast %struct.regmap* %2 to i8*, !dbg !7836
  br label %cond.end, !dbg !7835

cond.false:                                       ; preds = %entry
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7837
  %bus_context = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 9, !dbg !7838
  %5 = load i8*, i8** %bus_context, align 8, !dbg !7838
  br label %cond.end, !dbg !7835

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %3, %cond.true ], [ %5, %cond.false ], !dbg !7835
  ret i8* %cond, !dbg !7839
}

; Function Attrs: noredzone
declare dso_local i32 @regcache_write(%struct.regmap*, i32, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @regmap_should_log(%struct.regmap* %map) #0 !dbg !7840 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7841, metadata !DIExpression()), !dbg !7842
  ret i1 false, !dbg !7843
}

; Function Attrs: cold noredzone
declare dso_local void @_dev_info(%struct.device*, i8*, ...) #6

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_reg_write(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !7844 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7846, metadata !DIExpression()), !dbg !7847
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !7848, metadata !DIExpression()), !dbg !7847
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !7849, metadata !DIExpression()), !dbg !7847
  ret void, !dbg !7847
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_write(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !7850 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7851, metadata !DIExpression()), !dbg !7852
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !7853, metadata !DIExpression()), !dbg !7854
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !7855, metadata !DIExpression()), !dbg !7856
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7857, metadata !DIExpression()), !dbg !7858
  %0 = load i32, i32* %reg.addr, align 4, !dbg !7859
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7859
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %1, i32 0, i32 37, !dbg !7859
  %2 = load i32, i32* %reg_stride, align 4, !dbg !7859
  %sub = sub i32 %2, 1, !dbg !7859
  %and = and i32 %0, %sub, !dbg !7859
  %cmp = icmp eq i32 %and, 0, !dbg !7859
  br i1 %cmp, label %if.end, label %if.then, !dbg !7861

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !7862
  br label %return, !dbg !7862

if.end:                                           ; preds = %entry
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7863
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 1, !dbg !7864
  %4 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !7864
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7865
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 3, !dbg !7866
  %6 = load i8*, i8** %lock_arg, align 8, !dbg !7866
  call void %4(i8* %6) #11, !dbg !7863
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7867
  %8 = load i32, i32* %reg.addr, align 4, !dbg !7868
  %9 = load i32, i32* %val.addr, align 4, !dbg !7869
  %call = call i32 @_regmap_write(%struct.regmap* %7, i32 %8, i32 %9) #11, !dbg !7870
  store i32 %call, i32* %ret, align 4, !dbg !7871
  %10 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7872
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %10, i32 0, i32 2, !dbg !7873
  %11 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !7873
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7874
  %lock_arg1 = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 3, !dbg !7875
  %13 = load i8*, i8** %lock_arg1, align 8, !dbg !7875
  call void %11(i8* %13) #11, !dbg !7872
  %14 = load i32, i32* %ret, align 4, !dbg !7876
  store i32 %14, i32* %retval, align 4, !dbg !7877
  br label %return, !dbg !7877

return:                                           ; preds = %if.end, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !7878
  ret i32 %15, !dbg !7878
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_write_async(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !7879 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7880, metadata !DIExpression()), !dbg !7881
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !7882, metadata !DIExpression()), !dbg !7883
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !7884, metadata !DIExpression()), !dbg !7885
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7886, metadata !DIExpression()), !dbg !7887
  %0 = load i32, i32* %reg.addr, align 4, !dbg !7888
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7888
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %1, i32 0, i32 37, !dbg !7888
  %2 = load i32, i32* %reg_stride, align 4, !dbg !7888
  %sub = sub i32 %2, 1, !dbg !7888
  %and = and i32 %0, %sub, !dbg !7888
  %cmp = icmp eq i32 %and, 0, !dbg !7888
  br i1 %cmp, label %if.end, label %if.then, !dbg !7890

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !7891
  br label %return, !dbg !7891

if.end:                                           ; preds = %entry
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7892
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 1, !dbg !7893
  %4 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !7893
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7894
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 3, !dbg !7895
  %6 = load i8*, i8** %lock_arg, align 8, !dbg !7895
  call void %4(i8* %6) #11, !dbg !7892
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7896
  %async = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 11, !dbg !7897
  store i8 1, i8* %async, align 8, !dbg !7898
  %8 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7899
  %9 = load i32, i32* %reg.addr, align 4, !dbg !7900
  %10 = load i32, i32* %val.addr, align 4, !dbg !7901
  %call = call i32 @_regmap_write(%struct.regmap* %8, i32 %9, i32 %10) #11, !dbg !7902
  store i32 %call, i32* %ret, align 4, !dbg !7903
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7904
  %async1 = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 11, !dbg !7905
  store i8 0, i8* %async1, align 8, !dbg !7906
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7907
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 2, !dbg !7908
  %13 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !7908
  %14 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7909
  %lock_arg2 = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 3, !dbg !7910
  %15 = load i8*, i8** %lock_arg2, align 8, !dbg !7910
  call void %13(i8* %15) #11, !dbg !7907
  %16 = load i32, i32* %ret, align 4, !dbg !7911
  store i32 %16, i32* %retval, align 4, !dbg !7912
  br label %return, !dbg !7912

return:                                           ; preds = %if.end, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !7913
  ret i32 %17, !dbg !7913
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @_regmap_raw_write(%struct.regmap* %map, i32 %reg, i8* %val, i64 %val_len, i1 zeroext %noinc) #0 !dbg !7914 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_len.addr = alloca i64, align 8
  %noinc.addr = alloca i8, align 1
  %val_bytes = alloca i64, align 8
  %val_count = alloca i64, align 8
  %chunk_count = alloca i64, align 8
  %chunk_bytes = alloca i64, align 8
  %chunk_regs = alloca i64, align 8
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !7917, metadata !DIExpression()), !dbg !7918
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !7919, metadata !DIExpression()), !dbg !7920
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !7921, metadata !DIExpression()), !dbg !7922
  store i64 %val_len, i64* %val_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val_len.addr, metadata !7923, metadata !DIExpression()), !dbg !7924
  %frombool = zext i1 %noinc to i8
  store i8 %frombool, i8* %noinc.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %noinc.addr, metadata !7925, metadata !DIExpression()), !dbg !7926
  call void @llvm.dbg.declare(metadata i64* %val_bytes, metadata !7927, metadata !DIExpression()), !dbg !7928
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7929
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 7, !dbg !7930
  %val_bytes1 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !7931
  %1 = load i64, i64* %val_bytes1, align 8, !dbg !7931
  store i64 %1, i64* %val_bytes, align 8, !dbg !7928
  call void @llvm.dbg.declare(metadata i64* %val_count, metadata !7932, metadata !DIExpression()), !dbg !7933
  %2 = load i64, i64* %val_len.addr, align 8, !dbg !7934
  %3 = load i64, i64* %val_bytes, align 8, !dbg !7935
  %div = udiv i64 %2, %3, !dbg !7936
  store i64 %div, i64* %val_count, align 8, !dbg !7933
  call void @llvm.dbg.declare(metadata i64* %chunk_count, metadata !7937, metadata !DIExpression()), !dbg !7938
  call void @llvm.dbg.declare(metadata i64* %chunk_bytes, metadata !7939, metadata !DIExpression()), !dbg !7940
  call void @llvm.dbg.declare(metadata i64* %chunk_regs, metadata !7941, metadata !DIExpression()), !dbg !7942
  %4 = load i64, i64* %val_count, align 8, !dbg !7943
  store i64 %4, i64* %chunk_regs, align 8, !dbg !7942
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !7944, metadata !DIExpression()), !dbg !7945
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7946, metadata !DIExpression()), !dbg !7947
  %5 = load i64, i64* %val_count, align 8, !dbg !7948
  %tobool = icmp ne i64 %5, 0, !dbg !7948
  br i1 %tobool, label %if.end, label %if.then, !dbg !7950

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !7951
  br label %return, !dbg !7951

if.end:                                           ; preds = %entry
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7952
  %use_single_write = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 56, !dbg !7954
  %7 = load i8, i8* %use_single_write, align 1, !dbg !7954
  %tobool2 = trunc i8 %7 to i1, !dbg !7954
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !7955

if.then3:                                         ; preds = %if.end
  store i64 1, i64* %chunk_regs, align 8, !dbg !7956
  br label %if.end10, !dbg !7957

if.else:                                          ; preds = %if.end
  %8 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7958
  %max_raw_write = getelementptr inbounds %struct.regmap, %struct.regmap* %8, i32 0, i32 59, !dbg !7960
  %9 = load i64, i64* %max_raw_write, align 8, !dbg !7960
  %tobool4 = icmp ne i64 %9, 0, !dbg !7958
  br i1 %tobool4, label %land.lhs.true, label %if.end9, !dbg !7961

land.lhs.true:                                    ; preds = %if.else
  %10 = load i64, i64* %val_len.addr, align 8, !dbg !7962
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7963
  %max_raw_write5 = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 59, !dbg !7964
  %12 = load i64, i64* %max_raw_write5, align 8, !dbg !7964
  %cmp = icmp ugt i64 %10, %12, !dbg !7965
  br i1 %cmp, label %if.then6, label %if.end9, !dbg !7966

if.then6:                                         ; preds = %land.lhs.true
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7967
  %max_raw_write7 = getelementptr inbounds %struct.regmap, %struct.regmap* %13, i32 0, i32 59, !dbg !7968
  %14 = load i64, i64* %max_raw_write7, align 8, !dbg !7968
  %15 = load i64, i64* %val_bytes, align 8, !dbg !7969
  %div8 = udiv i64 %14, %15, !dbg !7970
  store i64 %div8, i64* %chunk_regs, align 8, !dbg !7971
  br label %if.end9, !dbg !7972

if.end9:                                          ; preds = %if.then6, %land.lhs.true, %if.else
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then3
  %16 = load i64, i64* %val_count, align 8, !dbg !7973
  %17 = load i64, i64* %chunk_regs, align 8, !dbg !7974
  %div11 = udiv i64 %16, %17, !dbg !7975
  store i64 %div11, i64* %chunk_count, align 8, !dbg !7976
  %18 = load i64, i64* %chunk_regs, align 8, !dbg !7977
  %19 = load i64, i64* %val_bytes, align 8, !dbg !7978
  %mul = mul i64 %18, %19, !dbg !7979
  store i64 %mul, i64* %chunk_bytes, align 8, !dbg !7980
  store i32 0, i32* %i, align 4, !dbg !7981
  br label %for.cond, !dbg !7983

for.cond:                                         ; preds = %for.inc, %if.end10
  %20 = load i32, i32* %i, align 4, !dbg !7984
  %conv = sext i32 %20 to i64, !dbg !7984
  %21 = load i64, i64* %chunk_count, align 8, !dbg !7986
  %cmp12 = icmp ult i64 %conv, %21, !dbg !7987
  br i1 %cmp12, label %for.body, label %for.end, !dbg !7988

for.body:                                         ; preds = %for.cond
  %22 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !7989
  %23 = load i32, i32* %reg.addr, align 4, !dbg !7991
  %24 = load i8*, i8** %val.addr, align 8, !dbg !7992
  %25 = load i64, i64* %chunk_bytes, align 8, !dbg !7993
  %26 = load i8, i8* %noinc.addr, align 1, !dbg !7994
  %tobool14 = trunc i8 %26 to i1, !dbg !7994
  %call = call i32 @_regmap_raw_write_impl(%struct.regmap* %22, i32 %23, i8* %24, i64 %25, i1 zeroext %tobool14) #11, !dbg !7995
  store i32 %call, i32* %ret, align 4, !dbg !7996
  %27 = load i32, i32* %ret, align 4, !dbg !7997
  %tobool15 = icmp ne i32 %27, 0, !dbg !7997
  br i1 %tobool15, label %if.then16, label %if.end17, !dbg !7999

if.then16:                                        ; preds = %for.body
  %28 = load i32, i32* %ret, align 4, !dbg !8000
  store i32 %28, i32* %retval, align 4, !dbg !8001
  br label %return, !dbg !8001

if.end17:                                         ; preds = %for.body
  %29 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8002
  %30 = load i64, i64* %chunk_regs, align 8, !dbg !8003
  %conv18 = trunc i64 %30 to i32, !dbg !8003
  %call19 = call i32 @regmap_get_offset(%struct.regmap* %29, i32 %conv18) #11, !dbg !8004
  %31 = load i32, i32* %reg.addr, align 4, !dbg !8005
  %add = add i32 %31, %call19, !dbg !8005
  store i32 %add, i32* %reg.addr, align 4, !dbg !8005
  %32 = load i64, i64* %chunk_bytes, align 8, !dbg !8006
  %33 = load i8*, i8** %val.addr, align 8, !dbg !8007
  %add.ptr = getelementptr i8, i8* %33, i64 %32, !dbg !8007
  store i8* %add.ptr, i8** %val.addr, align 8, !dbg !8007
  %34 = load i64, i64* %chunk_bytes, align 8, !dbg !8008
  %35 = load i64, i64* %val_len.addr, align 8, !dbg !8009
  %sub = sub i64 %35, %34, !dbg !8009
  store i64 %sub, i64* %val_len.addr, align 8, !dbg !8009
  br label %for.inc, !dbg !8010

for.inc:                                          ; preds = %if.end17
  %36 = load i32, i32* %i, align 4, !dbg !8011
  %inc = add i32 %36, 1, !dbg !8011
  store i32 %inc, i32* %i, align 4, !dbg !8011
  br label %for.cond, !dbg !8012, !llvm.loop !8013

for.end:                                          ; preds = %for.cond
  %37 = load i64, i64* %val_len.addr, align 8, !dbg !8015
  %tobool20 = icmp ne i64 %37, 0, !dbg !8015
  br i1 %tobool20, label %if.then21, label %if.end24, !dbg !8017

if.then21:                                        ; preds = %for.end
  %38 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8018
  %39 = load i32, i32* %reg.addr, align 4, !dbg !8019
  %40 = load i8*, i8** %val.addr, align 8, !dbg !8020
  %41 = load i64, i64* %val_len.addr, align 8, !dbg !8021
  %42 = load i8, i8* %noinc.addr, align 1, !dbg !8022
  %tobool22 = trunc i8 %42 to i1, !dbg !8022
  %call23 = call i32 @_regmap_raw_write_impl(%struct.regmap* %38, i32 %39, i8* %40, i64 %41, i1 zeroext %tobool22) #11, !dbg !8023
  store i32 %call23, i32* %ret, align 4, !dbg !8024
  br label %if.end24, !dbg !8025

if.end24:                                         ; preds = %if.then21, %for.end
  %43 = load i32, i32* %ret, align 4, !dbg !8026
  store i32 %43, i32* %retval, align 4, !dbg !8027
  br label %return, !dbg !8027

return:                                           ; preds = %if.end24, %if.then16, %if.then
  %44 = load i32, i32* %retval, align 4, !dbg !8028
  ret i32 %44, !dbg !8028
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_raw_write_impl(%struct.regmap* %map, i32 %reg, i8* %val, i64 %val_len, i1 zeroext %noinc) #0 !dbg !8029 {
entry:
  %lock.addr.i393 = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i393, metadata !5961, metadata !DIExpression()), !dbg !8030
  %flags.addr.i394 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %flags.addr.i394, metadata !5967, metadata !DIExpression()), !dbg !8036
  %tmp.i395 = alloca i32, align 4
  %tmp8.i396 = alloca i32, align 4
  %lock.addr.i391 = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i391, metadata !4413, metadata !DIExpression()), !dbg !8037
  %lock.addr.i386 = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i386, metadata !5961, metadata !DIExpression()), !dbg !8044
  %flags.addr.i387 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %flags.addr.i387, metadata !5967, metadata !DIExpression()), !dbg !8046
  %tmp.i388 = alloca i32, align 4
  %tmp8.i389 = alloca i32, align 4
  %lock.addr.i384 = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i384, metadata !4413, metadata !DIExpression()), !dbg !8047
  %lock.addr.i382 = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i382, metadata !5961, metadata !DIExpression()), !dbg !8054
  %flags.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %flags.addr.i, metadata !5967, metadata !DIExpression()), !dbg !8056
  %tmp.i = alloca i32, align 4
  %tmp8.i = alloca i32, align 4
  %lock.addr.i = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i, metadata !4413, metadata !DIExpression()), !dbg !8057
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_len.addr = alloca i64, align 8
  %noinc.addr = alloca i8, align 1
  %range = alloca %struct.regmap_range_node*, align 8
  %flags = alloca i64, align 8
  %work_val = alloca i8*, align 8
  %buf = alloca i8*, align 8
  %ret = alloca i32, align 4
  %len = alloca i64, align 8
  %i = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %element = alloca i32, align 4
  %ival = alloca i32, align 4
  %val_bytes38 = alloca i32, align 4
  %val_num = alloca i32, align 4
  %win_offset = alloca i32, align 4
  %win_residue = alloca i32, align 4
  %async136 = alloca %struct.regmap_async*, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %tmp142 = alloca i32, align 4
  %__dummy146 = alloca i64, align 8
  %__dummy2147 = alloca i64, align 8
  %tmp150 = alloca i32, align 4
  %head__ = alloca %struct.list_head*, align 8
  %pos__ = alloca %struct.list_head*, align 8
  %tmp164 = alloca %struct.list_head*, align 8
  %tmp165 = alloca %struct.regmap_async*, align 8
  %__mptr = alloca i8*, align 8
  %tmp171 = alloca %struct.regmap_async*, align 8
  %__dummy208 = alloca i64, align 8
  %__dummy2209 = alloca i64, align 8
  %tmp212 = alloca i32, align 4
  %__dummy216 = alloca i64, align 8
  %__dummy2217 = alloca i64, align 8
  %tmp220 = alloca i32, align 4
  %__dummy265 = alloca i64, align 8
  %__dummy2266 = alloca i64, align 8
  %tmp269 = alloca i32, align 4
  %__dummy273 = alloca i64, align 8
  %__dummy2274 = alloca i64, align 8
  %tmp277 = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !8064, metadata !DIExpression()), !dbg !8065
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !8066, metadata !DIExpression()), !dbg !8067
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !8068, metadata !DIExpression()), !dbg !8069
  store i64 %val_len, i64* %val_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val_len.addr, metadata !8070, metadata !DIExpression()), !dbg !8071
  %frombool = zext i1 %noinc to i8
  store i8 %frombool, i8* %noinc.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %noinc.addr, metadata !8072, metadata !DIExpression()), !dbg !8073
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %range, metadata !8074, metadata !DIExpression()), !dbg !8075
  call void @llvm.dbg.declare(metadata i64* %flags, metadata !8076, metadata !DIExpression()), !dbg !8077
  call void @llvm.dbg.declare(metadata i8** %work_val, metadata !8078, metadata !DIExpression()), !dbg !8079
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8080
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 6, !dbg !8081
  %1 = load i8*, i8** %work_buf, align 8, !dbg !8081
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8082
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 7, !dbg !8083
  %reg_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 1, !dbg !8084
  %3 = load i64, i64* %reg_bytes, align 8, !dbg !8084
  %add.ptr = getelementptr i8, i8* %1, i64 %3, !dbg !8085
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8086
  %format1 = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 7, !dbg !8087
  %pad_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format1, i32 0, i32 2, !dbg !8088
  %5 = load i64, i64* %pad_bytes, align 8, !dbg !8088
  %add.ptr2 = getelementptr i8, i8* %add.ptr, i64 %5, !dbg !8089
  store i8* %add.ptr2, i8** %work_val, align 8, !dbg !8079
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !8090, metadata !DIExpression()), !dbg !8091
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8092, metadata !DIExpression()), !dbg !8093
  store i32 -524, i32* %ret, align 4, !dbg !8093
  call void @llvm.dbg.declare(metadata i64* %len, metadata !8094, metadata !DIExpression()), !dbg !8095
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8096, metadata !DIExpression()), !dbg !8097
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !8098, metadata !DIExpression()), !dbg !8100
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8100
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 8, !dbg !8100
  %7 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !8100
  %tobool = icmp ne %struct.regmap_bus* %7, null, !dbg !8100
  %lnot = xor i1 %tobool, true, !dbg !8100
  %lnot3 = xor i1 %lnot, true, !dbg !8100
  %lnot4 = xor i1 %lnot3, true, !dbg !8100
  %lnot.ext = zext i1 %lnot4 to i32, !dbg !8100
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !8100
  %8 = load i32, i32* %__ret_warn_on, align 4, !dbg !8101
  %tobool5 = icmp ne i32 %8, 0, !dbg !8101
  %lnot6 = xor i1 %tobool5, true, !dbg !8101
  %lnot8 = xor i1 %lnot6, true, !dbg !8101
  %lnot.ext9 = zext i1 %lnot8 to i32, !dbg !8101
  %conv = sext i32 %lnot.ext9 to i64, !dbg !8101
  %tobool10 = icmp ne i64 %conv, 0, !dbg !8101
  br i1 %tobool10, label %if.then, label %if.end, !dbg !8100

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !8101

do.body:                                          ; preds = %if.then
  br label %do.body11, !dbg !8103

do.body11:                                        ; preds = %do.body
  br label %do.end, !dbg !8105

do.end:                                           ; preds = %do.body11
  br label %do.body12, !dbg !8103

do.body12:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 1629, i32 2305, i64 12) #10, !dbg !8107, !srcloc !8109
  br label %do.end13, !dbg !8107

do.end13:                                         ; preds = %do.body12
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 206) #10, !dbg !8110, !srcloc !8112
  br label %do.body14, !dbg !8103

do.body14:                                        ; preds = %do.end13
  br label %do.end15, !dbg !8113

do.end15:                                         ; preds = %do.body14
  br label %do.end16, !dbg !8103

do.end16:                                         ; preds = %do.end15
  br label %if.end, !dbg !8103

if.end:                                           ; preds = %do.end16, %entry
  %9 = load i32, i32* %__ret_warn_on, align 4, !dbg !8100
  %tobool17 = icmp ne i32 %9, 0, !dbg !8100
  %lnot18 = xor i1 %tobool17, true, !dbg !8100
  %lnot20 = xor i1 %lnot18, true, !dbg !8100
  %lnot.ext21 = zext i1 %lnot20 to i32, !dbg !8100
  %conv22 = sext i32 %lnot.ext21 to i64, !dbg !8100
  store i64 %conv22, i64* %tmp, align 8, !dbg !8101
  %10 = load i64, i64* %tmp, align 8, !dbg !8100
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8115
  %12 = load i32, i32* %reg.addr, align 4, !dbg !8117
  %call = call zeroext i1 @regmap_writeable_noinc(%struct.regmap* %11, i32 %12) #11, !dbg !8118
  br i1 %call, label %if.end33, label %if.then23, !dbg !8119

if.then23:                                        ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !8120
  br label %for.cond, !dbg !8123

for.cond:                                         ; preds = %for.inc, %if.then23
  %13 = load i32, i32* %i, align 4, !dbg !8124
  %conv24 = sext i32 %13 to i64, !dbg !8124
  %14 = load i64, i64* %val_len.addr, align 8, !dbg !8126
  %15 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8127
  %format25 = getelementptr inbounds %struct.regmap, %struct.regmap* %15, i32 0, i32 7, !dbg !8128
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format25, i32 0, i32 3, !dbg !8129
  %16 = load i64, i64* %val_bytes, align 8, !dbg !8129
  %div = udiv i64 %14, %16, !dbg !8130
  %cmp = icmp ult i64 %conv24, %div, !dbg !8131
  br i1 %cmp, label %for.body, label %for.end, !dbg !8132

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %element, metadata !8133, metadata !DIExpression()), !dbg !8135
  %17 = load i32, i32* %reg.addr, align 4, !dbg !8136
  %18 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8137
  %19 = load i32, i32* %i, align 4, !dbg !8138
  %call27 = call i32 @regmap_get_offset(%struct.regmap* %18, i32 %19) #11, !dbg !8139
  %add = add i32 %17, %call27, !dbg !8140
  store i32 %add, i32* %element, align 4, !dbg !8135
  %20 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8141
  %21 = load i32, i32* %element, align 4, !dbg !8143
  %call28 = call zeroext i1 @regmap_writeable(%struct.regmap* %20, i32 %21) #11, !dbg !8144
  br i1 %call28, label %lor.lhs.false, label %if.then31, !dbg !8145

lor.lhs.false:                                    ; preds = %for.body
  %22 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8146
  %23 = load i32, i32* %element, align 4, !dbg !8147
  %call29 = call zeroext i1 @regmap_writeable_noinc(%struct.regmap* %22, i32 %23) #11, !dbg !8148
  br i1 %call29, label %if.then31, label %if.end32, !dbg !8149

if.then31:                                        ; preds = %lor.lhs.false, %for.body
  store i32 -22, i32* %retval, align 4, !dbg !8150
  br label %return, !dbg !8150

if.end32:                                         ; preds = %lor.lhs.false
  br label %for.inc, !dbg !8151

for.inc:                                          ; preds = %if.end32
  %24 = load i32, i32* %i, align 4, !dbg !8152
  %inc = add i32 %24, 1, !dbg !8152
  store i32 %inc, i32* %i, align 4, !dbg !8152
  br label %for.cond, !dbg !8153, !llvm.loop !8154

for.end:                                          ; preds = %for.cond
  br label %if.end33, !dbg !8156

if.end33:                                         ; preds = %for.end, %if.end
  %25 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8157
  %cache_bypass = getelementptr inbounds %struct.regmap, %struct.regmap* %25, i32 0, i32 46, !dbg !8159
  %26 = load i8, i8* %cache_bypass, align 1, !dbg !8159
  %tobool34 = trunc i8 %26 to i1, !dbg !8159
  br i1 %tobool34, label %if.end66, label %land.lhs.true, !dbg !8160

land.lhs.true:                                    ; preds = %if.end33
  %27 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8161
  %format35 = getelementptr inbounds %struct.regmap, %struct.regmap* %27, i32 0, i32 7, !dbg !8162
  %parse_val = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format35, i32 0, i32 7, !dbg !8163
  %28 = load i32 (i8*)*, i32 (i8*)** %parse_val, align 8, !dbg !8163
  %tobool36 = icmp ne i32 (i8*)* %28, null, !dbg !8161
  br i1 %tobool36, label %if.then37, label %if.end66, !dbg !8164

if.then37:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %ival, metadata !8165, metadata !DIExpression()), !dbg !8167
  call void @llvm.dbg.declare(metadata i32* %val_bytes38, metadata !8168, metadata !DIExpression()), !dbg !8169
  %29 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8170
  %format39 = getelementptr inbounds %struct.regmap, %struct.regmap* %29, i32 0, i32 7, !dbg !8171
  %val_bytes40 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format39, i32 0, i32 3, !dbg !8172
  %30 = load i64, i64* %val_bytes40, align 8, !dbg !8172
  %conv41 = trunc i64 %30 to i32, !dbg !8170
  store i32 %conv41, i32* %val_bytes38, align 4, !dbg !8169
  store i32 0, i32* %i, align 4, !dbg !8173
  br label %for.cond42, !dbg !8175

for.cond42:                                       ; preds = %for.inc60, %if.then37
  %31 = load i32, i32* %i, align 4, !dbg !8176
  %conv43 = sext i32 %31 to i64, !dbg !8176
  %32 = load i64, i64* %val_len.addr, align 8, !dbg !8178
  %33 = load i32, i32* %val_bytes38, align 4, !dbg !8179
  %conv44 = sext i32 %33 to i64, !dbg !8179
  %div45 = udiv i64 %32, %conv44, !dbg !8180
  %cmp46 = icmp ult i64 %conv43, %div45, !dbg !8181
  br i1 %cmp46, label %for.body48, label %for.end62, !dbg !8182

for.body48:                                       ; preds = %for.cond42
  %34 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8183
  %format49 = getelementptr inbounds %struct.regmap, %struct.regmap* %34, i32 0, i32 7, !dbg !8185
  %parse_val50 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format49, i32 0, i32 7, !dbg !8186
  %35 = load i32 (i8*)*, i32 (i8*)** %parse_val50, align 8, !dbg !8186
  %36 = load i8*, i8** %val.addr, align 8, !dbg !8187
  %37 = load i32, i32* %i, align 4, !dbg !8188
  %38 = load i32, i32* %val_bytes38, align 4, !dbg !8189
  %mul = mul i32 %37, %38, !dbg !8190
  %idx.ext = sext i32 %mul to i64, !dbg !8191
  %add.ptr51 = getelementptr i8, i8* %36, i64 %idx.ext, !dbg !8191
  %call52 = call i32 %35(i8* %add.ptr51) #11, !dbg !8183
  store i32 %call52, i32* %ival, align 4, !dbg !8192
  %39 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8193
  %40 = load i32, i32* %reg.addr, align 4, !dbg !8194
  %41 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8195
  %42 = load i32, i32* %i, align 4, !dbg !8196
  %call53 = call i32 @regmap_get_offset(%struct.regmap* %41, i32 %42) #11, !dbg !8197
  %add54 = add i32 %40, %call53, !dbg !8198
  %43 = load i32, i32* %ival, align 4, !dbg !8199
  %call55 = call i32 @regcache_write(%struct.regmap* %39, i32 %add54, i32 %43) #11, !dbg !8200
  store i32 %call55, i32* %ret, align 4, !dbg !8201
  %44 = load i32, i32* %ret, align 4, !dbg !8202
  %tobool56 = icmp ne i32 %44, 0, !dbg !8202
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !8204

if.then57:                                        ; preds = %for.body48
  %45 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8205
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %45, i32 0, i32 5, !dbg !8205
  %46 = load %struct.device*, %struct.device** %dev, align 8, !dbg !8205
  %47 = load i32, i32* %reg.addr, align 4, !dbg !8205
  %48 = load i32, i32* %i, align 4, !dbg !8205
  %add58 = add i32 %47, %48, !dbg !8205
  %49 = load i32, i32* %ret, align 4, !dbg !8205
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %46, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.17, i64 0, i64 0), i32 %add58, i32 %49) #13, !dbg !8205
  %50 = load i32, i32* %ret, align 4, !dbg !8207
  store i32 %50, i32* %retval, align 4, !dbg !8208
  br label %return, !dbg !8208

if.end59:                                         ; preds = %for.body48
  br label %for.inc60, !dbg !8209

for.inc60:                                        ; preds = %if.end59
  %51 = load i32, i32* %i, align 4, !dbg !8210
  %inc61 = add i32 %51, 1, !dbg !8210
  store i32 %inc61, i32* %i, align 4, !dbg !8210
  br label %for.cond42, !dbg !8211, !llvm.loop !8212

for.end62:                                        ; preds = %for.cond42
  %52 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8214
  %cache_only = getelementptr inbounds %struct.regmap, %struct.regmap* %52, i32 0, i32 45, !dbg !8216
  %53 = load i8, i8* %cache_only, align 4, !dbg !8216
  %tobool63 = trunc i8 %53 to i1, !dbg !8216
  br i1 %tobool63, label %if.then64, label %if.end65, !dbg !8217

if.then64:                                        ; preds = %for.end62
  %54 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8218
  %cache_dirty = getelementptr inbounds %struct.regmap, %struct.regmap* %54, i32 0, i32 51, !dbg !8220
  store i8 1, i8* %cache_dirty, align 8, !dbg !8221
  store i32 0, i32* %retval, align 4, !dbg !8222
  br label %return, !dbg !8222

if.end65:                                         ; preds = %for.end62
  br label %if.end66, !dbg !8223

if.end66:                                         ; preds = %if.end65, %land.lhs.true, %if.end33
  %55 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8224
  %56 = load i32, i32* %reg.addr, align 4, !dbg !8225
  %call67 = call %struct.regmap_range_node* @_regmap_range_lookup(%struct.regmap* %55, i32 %56) #11, !dbg !8226
  store %struct.regmap_range_node* %call67, %struct.regmap_range_node** %range, align 8, !dbg !8227
  %57 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !8228
  %tobool68 = icmp ne %struct.regmap_range_node* %57, null, !dbg !8228
  br i1 %tobool68, label %if.then69, label %if.end113, !dbg !8230

if.then69:                                        ; preds = %if.end66
  call void @llvm.dbg.declare(metadata i32* %val_num, metadata !8231, metadata !DIExpression()), !dbg !8233
  %58 = load i64, i64* %val_len.addr, align 8, !dbg !8234
  %59 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8235
  %format70 = getelementptr inbounds %struct.regmap, %struct.regmap* %59, i32 0, i32 7, !dbg !8236
  %val_bytes71 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format70, i32 0, i32 3, !dbg !8237
  %60 = load i64, i64* %val_bytes71, align 8, !dbg !8237
  %div72 = udiv i64 %58, %60, !dbg !8238
  %conv73 = trunc i64 %div72 to i32, !dbg !8234
  store i32 %conv73, i32* %val_num, align 4, !dbg !8233
  call void @llvm.dbg.declare(metadata i32* %win_offset, metadata !8239, metadata !DIExpression()), !dbg !8240
  %61 = load i32, i32* %reg.addr, align 4, !dbg !8241
  %62 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !8242
  %range_min = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %62, i32 0, i32 3, !dbg !8243
  %63 = load i32, i32* %range_min, align 8, !dbg !8243
  %sub = sub i32 %61, %63, !dbg !8244
  %64 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !8245
  %window_len = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %64, i32 0, i32 9, !dbg !8246
  %65 = load i32, i32* %window_len, align 8, !dbg !8246
  %rem = urem i32 %sub, %65, !dbg !8247
  store i32 %rem, i32* %win_offset, align 4, !dbg !8240
  call void @llvm.dbg.declare(metadata i32* %win_residue, metadata !8248, metadata !DIExpression()), !dbg !8249
  %66 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !8250
  %window_len74 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %66, i32 0, i32 9, !dbg !8251
  %67 = load i32, i32* %window_len74, align 8, !dbg !8251
  %68 = load i32, i32* %win_offset, align 4, !dbg !8252
  %sub75 = sub i32 %67, %68, !dbg !8253
  store i32 %sub75, i32* %win_residue, align 4, !dbg !8249
  br label %while.cond, !dbg !8254

while.cond:                                       ; preds = %if.end87, %if.then69
  %69 = load i32, i32* %val_num, align 4, !dbg !8255
  %70 = load i32, i32* %win_residue, align 4, !dbg !8256
  %cmp76 = icmp sgt i32 %69, %70, !dbg !8257
  br i1 %cmp76, label %while.body, label %while.end, !dbg !8254

while.body:                                       ; preds = %while.cond
  %71 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8258
  %72 = load i32, i32* %reg.addr, align 4, !dbg !8260
  %73 = load i8*, i8** %val.addr, align 8, !dbg !8261
  %74 = load i32, i32* %win_residue, align 4, !dbg !8262
  %conv78 = sext i32 %74 to i64, !dbg !8262
  %75 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8263
  %format79 = getelementptr inbounds %struct.regmap, %struct.regmap* %75, i32 0, i32 7, !dbg !8264
  %val_bytes80 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format79, i32 0, i32 3, !dbg !8265
  %76 = load i64, i64* %val_bytes80, align 8, !dbg !8265
  %mul81 = mul i64 %conv78, %76, !dbg !8266
  %77 = load i8, i8* %noinc.addr, align 1, !dbg !8267
  %tobool82 = trunc i8 %77 to i1, !dbg !8267
  %call83 = call i32 @_regmap_raw_write_impl(%struct.regmap* %71, i32 %72, i8* %73, i64 %mul81, i1 zeroext %tobool82) #11, !dbg !8268
  store i32 %call83, i32* %ret, align 4, !dbg !8269
  %78 = load i32, i32* %ret, align 4, !dbg !8270
  %cmp84 = icmp ne i32 %78, 0, !dbg !8272
  br i1 %cmp84, label %if.then86, label %if.end87, !dbg !8273

if.then86:                                        ; preds = %while.body
  %79 = load i32, i32* %ret, align 4, !dbg !8274
  store i32 %79, i32* %retval, align 4, !dbg !8275
  br label %return, !dbg !8275

if.end87:                                         ; preds = %while.body
  %80 = load i32, i32* %win_residue, align 4, !dbg !8276
  %81 = load i32, i32* %reg.addr, align 4, !dbg !8277
  %add88 = add i32 %81, %80, !dbg !8277
  store i32 %add88, i32* %reg.addr, align 4, !dbg !8277
  %82 = load i32, i32* %win_residue, align 4, !dbg !8278
  %83 = load i32, i32* %val_num, align 4, !dbg !8279
  %sub89 = sub i32 %83, %82, !dbg !8279
  store i32 %sub89, i32* %val_num, align 4, !dbg !8279
  %84 = load i32, i32* %win_residue, align 4, !dbg !8280
  %conv90 = sext i32 %84 to i64, !dbg !8280
  %85 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8281
  %format91 = getelementptr inbounds %struct.regmap, %struct.regmap* %85, i32 0, i32 7, !dbg !8282
  %val_bytes92 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format91, i32 0, i32 3, !dbg !8283
  %86 = load i64, i64* %val_bytes92, align 8, !dbg !8283
  %mul93 = mul i64 %conv90, %86, !dbg !8284
  %87 = load i8*, i8** %val.addr, align 8, !dbg !8285
  %add.ptr94 = getelementptr i8, i8* %87, i64 %mul93, !dbg !8285
  store i8* %add.ptr94, i8** %val.addr, align 8, !dbg !8285
  %88 = load i32, i32* %win_residue, align 4, !dbg !8286
  %conv95 = sext i32 %88 to i64, !dbg !8286
  %89 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8287
  %format96 = getelementptr inbounds %struct.regmap, %struct.regmap* %89, i32 0, i32 7, !dbg !8288
  %val_bytes97 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format96, i32 0, i32 3, !dbg !8289
  %90 = load i64, i64* %val_bytes97, align 8, !dbg !8289
  %mul98 = mul i64 %conv95, %90, !dbg !8290
  %91 = load i64, i64* %val_len.addr, align 8, !dbg !8291
  %sub99 = sub i64 %91, %mul98, !dbg !8291
  store i64 %sub99, i64* %val_len.addr, align 8, !dbg !8291
  %92 = load i32, i32* %reg.addr, align 4, !dbg !8292
  %93 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !8293
  %range_min100 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %93, i32 0, i32 3, !dbg !8294
  %94 = load i32, i32* %range_min100, align 8, !dbg !8294
  %sub101 = sub i32 %92, %94, !dbg !8295
  %95 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !8296
  %window_len102 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %95, i32 0, i32 9, !dbg !8297
  %96 = load i32, i32* %window_len102, align 8, !dbg !8297
  %rem103 = urem i32 %sub101, %96, !dbg !8298
  store i32 %rem103, i32* %win_offset, align 4, !dbg !8299
  %97 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !8300
  %window_len104 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %97, i32 0, i32 9, !dbg !8301
  %98 = load i32, i32* %window_len104, align 8, !dbg !8301
  %99 = load i32, i32* %win_offset, align 4, !dbg !8302
  %sub105 = sub i32 %98, %99, !dbg !8303
  store i32 %sub105, i32* %win_residue, align 4, !dbg !8304
  br label %while.cond, !dbg !8254, !llvm.loop !8305

while.end:                                        ; preds = %while.cond
  %100 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8307
  %101 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !8308
  %102 = load i8, i8* %noinc.addr, align 1, !dbg !8309
  %tobool106 = trunc i8 %102 to i1, !dbg !8309
  br i1 %tobool106, label %cond.true, label %cond.false, !dbg !8309

cond.true:                                        ; preds = %while.end
  br label %cond.end, !dbg !8309

cond.false:                                       ; preds = %while.end
  %103 = load i32, i32* %val_num, align 4, !dbg !8310
  br label %cond.end, !dbg !8309

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 1, %cond.true ], [ %103, %cond.false ], !dbg !8309
  %call108 = call i32 @_regmap_select_page(%struct.regmap* %100, i32* %reg.addr, %struct.regmap_range_node* %101, i32 %cond) #11, !dbg !8311
  store i32 %call108, i32* %ret, align 4, !dbg !8312
  %104 = load i32, i32* %ret, align 4, !dbg !8313
  %cmp109 = icmp ne i32 %104, 0, !dbg !8315
  br i1 %cmp109, label %if.then111, label %if.end112, !dbg !8316

if.then111:                                       ; preds = %cond.end
  %105 = load i32, i32* %ret, align 4, !dbg !8317
  store i32 %105, i32* %retval, align 4, !dbg !8318
  br label %return, !dbg !8318

if.end112:                                        ; preds = %cond.end
  br label %if.end113, !dbg !8319

if.end113:                                        ; preds = %if.end112, %if.end66
  %106 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8320
  %format114 = getelementptr inbounds %struct.regmap, %struct.regmap* %106, i32 0, i32 7, !dbg !8321
  %format_reg = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format114, i32 0, i32 5, !dbg !8322
  %107 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_reg, align 8, !dbg !8322
  %108 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8323
  %work_buf115 = getelementptr inbounds %struct.regmap, %struct.regmap* %108, i32 0, i32 6, !dbg !8324
  %109 = load i8*, i8** %work_buf115, align 8, !dbg !8324
  %110 = load i32, i32* %reg.addr, align 4, !dbg !8325
  %111 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8326
  %reg_shift = getelementptr inbounds %struct.regmap, %struct.regmap* %111, i32 0, i32 36, !dbg !8327
  %112 = load i32, i32* %reg_shift, align 8, !dbg !8327
  call void %107(i8* %109, i32 %110, i32 %112) #11, !dbg !8320
  %113 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8328
  %114 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8329
  %format116 = getelementptr inbounds %struct.regmap, %struct.regmap* %114, i32 0, i32 7, !dbg !8330
  %reg_bytes117 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format116, i32 0, i32 1, !dbg !8331
  %115 = load i64, i64* %reg_bytes117, align 8, !dbg !8331
  %conv118 = trunc i64 %115 to i32, !dbg !8329
  %116 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8332
  %write_flag_mask = getelementptr inbounds %struct.regmap, %struct.regmap* %116, i32 0, i32 35, !dbg !8333
  %117 = load i64, i64* %write_flag_mask, align 8, !dbg !8333
  call void @regmap_set_work_buf_flag_mask(%struct.regmap* %113, i32 %conv118, i64 %117) #11, !dbg !8334
  %118 = load i8*, i8** %val.addr, align 8, !dbg !8335
  %119 = load i8*, i8** %work_val, align 8, !dbg !8337
  %cmp119 = icmp ne i8* %118, %119, !dbg !8338
  br i1 %cmp119, label %land.lhs.true121, label %if.end129, !dbg !8339

land.lhs.true121:                                 ; preds = %if.end113
  %120 = load i64, i64* %val_len.addr, align 8, !dbg !8340
  %121 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8341
  %format122 = getelementptr inbounds %struct.regmap, %struct.regmap* %121, i32 0, i32 7, !dbg !8342
  %val_bytes123 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format122, i32 0, i32 3, !dbg !8343
  %122 = load i64, i64* %val_bytes123, align 8, !dbg !8343
  %cmp124 = icmp eq i64 %120, %122, !dbg !8344
  br i1 %cmp124, label %if.then126, label %if.end129, !dbg !8345

if.then126:                                       ; preds = %land.lhs.true121
  %123 = load i8*, i8** %work_val, align 8, !dbg !8346
  %124 = load i8*, i8** %val.addr, align 8, !dbg !8348
  %125 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8349
  %format127 = getelementptr inbounds %struct.regmap, %struct.regmap* %125, i32 0, i32 7, !dbg !8350
  %val_bytes128 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format127, i32 0, i32 3, !dbg !8351
  %126 = load i64, i64* %val_bytes128, align 8, !dbg !8351
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %123, i8* align 1 %124, i64 %126, i1 false), !dbg !8352
  %127 = load i8*, i8** %work_val, align 8, !dbg !8353
  store i8* %127, i8** %val.addr, align 8, !dbg !8354
  br label %if.end129, !dbg !8355

if.end129:                                        ; preds = %if.then126, %land.lhs.true121, %if.end113
  %128 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8356
  %async = getelementptr inbounds %struct.regmap, %struct.regmap* %128, i32 0, i32 11, !dbg !8357
  %129 = load i8, i8* %async, align 8, !dbg !8357
  %tobool130 = trunc i8 %129 to i1, !dbg !8357
  br i1 %tobool130, label %land.lhs.true132, label %if.end294, !dbg !8358

land.lhs.true132:                                 ; preds = %if.end129
  %130 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8359
  %bus133 = getelementptr inbounds %struct.regmap, %struct.regmap* %130, i32 0, i32 8, !dbg !8360
  %131 = load %struct.regmap_bus*, %struct.regmap_bus** %bus133, align 8, !dbg !8360
  %async_write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %131, i32 0, i32 3, !dbg !8361
  %132 = load i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)*, i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)** %async_write, align 8, !dbg !8361
  %tobool134 = icmp ne i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)* %132, null, !dbg !8359
  br i1 %tobool134, label %if.then135, label %if.end294, !dbg !8362

if.then135:                                       ; preds = %land.lhs.true132
  call void @llvm.dbg.declare(metadata %struct.regmap_async** %async136, metadata !8363, metadata !DIExpression()), !dbg !8364
  %133 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8365
  %134 = load i32, i32* %reg.addr, align 4, !dbg !8366
  %135 = load i64, i64* %val_len.addr, align 8, !dbg !8367
  %conv137 = trunc i64 %135 to i32, !dbg !8367
  call void @trace_regmap_async_write_start(%struct.regmap* %133, i32 %134, i32 %conv137) #11, !dbg !8368
  br label %do.body138, !dbg !8369

do.body138:                                       ; preds = %if.then135
  br label %do.body139, !dbg !8370

do.body139:                                       ; preds = %do.body138
  call void @llvm.dbg.declare(metadata i64* %__dummy, metadata !8371, metadata !DIExpression()), !dbg !8373
  call void @llvm.dbg.declare(metadata i64* %__dummy2, metadata !8374, metadata !DIExpression()), !dbg !8373
  %cmp140 = icmp eq i64* %__dummy, %__dummy2, !dbg !8373
  %conv141 = zext i1 %cmp140 to i32, !dbg !8373
  store i32 1, i32* %tmp142, align 4, !dbg !8373
  %136 = load i32, i32* %tmp142, align 4, !dbg !8373
  br label %do.body143, !dbg !8375

do.body143:                                       ; preds = %do.body139
  br label %do.body144, !dbg !8376

do.body144:                                       ; preds = %do.body143
  br label %do.body145, !dbg !8377

do.body145:                                       ; preds = %do.body144
  call void @llvm.dbg.declare(metadata i64* %__dummy146, metadata !8379, metadata !DIExpression()), !dbg !8382
  call void @llvm.dbg.declare(metadata i64* %__dummy2147, metadata !8383, metadata !DIExpression()), !dbg !8382
  %cmp148 = icmp eq i64* %__dummy146, %__dummy2147, !dbg !8382
  %conv149 = zext i1 %cmp148 to i32, !dbg !8382
  store i32 1, i32* %tmp150, align 4, !dbg !8382
  %137 = load i32, i32* %tmp150, align 4, !dbg !8382
  %call151 = call i64 @arch_local_irq_save() #11, !dbg !8384
  store i64 %call151, i64* %flags, align 8, !dbg !8384
  br label %do.end152, !dbg !8384

do.end152:                                        ; preds = %do.body145
  br label %do.end153, !dbg !8377

do.end153:                                        ; preds = %do.end152
  br label %do.body154, !dbg !8376

do.body154:                                       ; preds = %do.end153
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !8385, !srcloc !8386
  br label %do.body155, !dbg !8385

do.body155:                                       ; preds = %do.body154
  %138 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8387
  %async_lock = getelementptr inbounds %struct.regmap, %struct.regmap* %138, i32 0, i32 12, !dbg !8387
  store %struct.spinlock* %async_lock, %struct.spinlock** %lock.addr.i, align 8
  %139 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8, !dbg !8388
  %140 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %139, i32 0, i32 0, !dbg !8389
  %rlock.i = bitcast %union.anon.0* %140 to %struct.raw_spinlock*, !dbg !8389
  br label %do.end157, !dbg !8387

do.end157:                                        ; preds = %do.body155
  br label %do.end158, !dbg !8385

do.end158:                                        ; preds = %do.end157
  br label %do.end159, !dbg !8376

do.end159:                                        ; preds = %do.end158
  br label %do.end160, !dbg !8375

do.end160:                                        ; preds = %do.end159
  br label %do.end161, !dbg !8370

do.end161:                                        ; preds = %do.end160
  call void @llvm.dbg.declare(metadata %struct.list_head** %head__, metadata !8390, metadata !DIExpression()), !dbg !8392
  %141 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8392
  %async_free = getelementptr inbounds %struct.regmap, %struct.regmap* %141, i32 0, i32 15, !dbg !8392
  store %struct.list_head* %async_free, %struct.list_head** %head__, align 8, !dbg !8392
  call void @llvm.dbg.declare(metadata %struct.list_head** %pos__, metadata !8393, metadata !DIExpression()), !dbg !8392
  br label %do.body162, !dbg !8394

do.body162:                                       ; preds = %do.end161
  br label %do.end163, !dbg !8396

do.end163:                                        ; preds = %do.body162
  %142 = load %struct.list_head*, %struct.list_head** %head__, align 8, !dbg !8394
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %142, i32 0, i32 0, !dbg !8394
  %143 = load volatile %struct.list_head*, %struct.list_head** %next, align 8, !dbg !8394
  store %struct.list_head* %143, %struct.list_head** %tmp164, align 8, !dbg !8396
  %144 = load %struct.list_head*, %struct.list_head** %tmp164, align 8, !dbg !8394
  store %struct.list_head* %144, %struct.list_head** %pos__, align 8, !dbg !8392
  %145 = load %struct.list_head*, %struct.list_head** %pos__, align 8, !dbg !8392
  %146 = load %struct.list_head*, %struct.list_head** %head__, align 8, !dbg !8392
  %cmp166 = icmp ne %struct.list_head* %145, %146, !dbg !8392
  br i1 %cmp166, label %cond.true168, label %cond.false173, !dbg !8392

cond.true168:                                     ; preds = %do.end163
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !8398, metadata !DIExpression()), !dbg !8400
  %147 = load %struct.list_head*, %struct.list_head** %pos__, align 8, !dbg !8400
  %148 = bitcast %struct.list_head* %147 to i8*, !dbg !8400
  store i8* %148, i8** %__mptr, align 8, !dbg !8400
  br label %do.body169, !dbg !8400

do.body169:                                       ; preds = %cond.true168
  br label %do.end170, !dbg !8401

do.end170:                                        ; preds = %do.body169
  %149 = load i8*, i8** %__mptr, align 8, !dbg !8400
  %add.ptr172 = getelementptr i8, i8* %149, i64 0, !dbg !8400
  %150 = bitcast i8* %add.ptr172 to %struct.regmap_async*, !dbg !8400
  store %struct.regmap_async* %150, %struct.regmap_async** %tmp171, align 8, !dbg !8401
  %151 = load %struct.regmap_async*, %struct.regmap_async** %tmp171, align 8, !dbg !8400
  br label %cond.end174, !dbg !8392

cond.false173:                                    ; preds = %do.end163
  br label %cond.end174, !dbg !8392

cond.end174:                                      ; preds = %cond.false173, %do.end170
  %cond175 = phi %struct.regmap_async* [ %151, %do.end170 ], [ null, %cond.false173 ], !dbg !8392
  store %struct.regmap_async* %cond175, %struct.regmap_async** %tmp165, align 8, !dbg !8392
  %152 = load %struct.regmap_async*, %struct.regmap_async** %tmp165, align 8, !dbg !8392
  store %struct.regmap_async* %152, %struct.regmap_async** %async136, align 8, !dbg !8403
  %153 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8404
  %tobool176 = icmp ne %struct.regmap_async* %153, null, !dbg !8404
  br i1 %tobool176, label %if.then177, label %if.end178, !dbg !8406

if.then177:                                       ; preds = %cond.end174
  %154 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8407
  %list = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %154, i32 0, i32 0, !dbg !8408
  call void @list_del(%struct.list_head* %list) #11, !dbg !8409
  br label %if.end178, !dbg !8409

if.end178:                                        ; preds = %if.then177, %cond.end174
  %155 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8410
  %async_lock179 = getelementptr inbounds %struct.regmap, %struct.regmap* %155, i32 0, i32 12, !dbg !8411
  %156 = load i64, i64* %flags, align 8, !dbg !8412
  store %struct.spinlock* %async_lock179, %struct.spinlock** %lock.addr.i382, align 8
  store i64 %156, i64* %flags.addr.i, align 8
  call void @llvm.dbg.declare(metadata !45, metadata !5978, metadata !DIExpression()) #10, !dbg !8413
  call void @llvm.dbg.declare(metadata !45, metadata !5982, metadata !DIExpression()) #10, !dbg !8413
  store i32 1, i32* %tmp.i, align 4, !dbg !8413
  %157 = load i32, i32* %tmp.i, align 4, !dbg !8413
  call void @llvm.dbg.declare(metadata !45, metadata !5983, metadata !DIExpression()) #10, !dbg !8414
  call void @llvm.dbg.declare(metadata !45, metadata !5989, metadata !DIExpression()) #10, !dbg !8414
  store i32 1, i32* %tmp8.i, align 4, !dbg !8414
  %158 = load i32, i32* %tmp8.i, align 4, !dbg !8414
  %159 = load i64, i64* %flags.addr.i, align 8, !dbg !8415
  call void @arch_local_irq_restore(i64 %159) #14, !dbg !8415
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !8416, !srcloc !5993
  %160 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i382, align 8, !dbg !8417
  %161 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %160, i32 0, i32 0, !dbg !8417
  %rlock.i383 = bitcast %union.anon.0* %161 to %struct.raw_spinlock*, !dbg !8417
  %162 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8418
  %tobool180 = icmp ne %struct.regmap_async* %162, null, !dbg !8418
  br i1 %tobool180, label %if.end194, label %if.then181, !dbg !8420

if.then181:                                       ; preds = %if.end178
  %163 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8421
  %bus182 = getelementptr inbounds %struct.regmap, %struct.regmap* %163, i32 0, i32 8, !dbg !8423
  %164 = load %struct.regmap_bus*, %struct.regmap_bus** %bus182, align 8, !dbg !8423
  %async_alloc = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %164, i32 0, i32 9, !dbg !8424
  %165 = load %struct.regmap_async* ()*, %struct.regmap_async* ()** %async_alloc, align 8, !dbg !8424
  %call183 = call %struct.regmap_async* %165() #11, !dbg !8421
  store %struct.regmap_async* %call183, %struct.regmap_async** %async136, align 8, !dbg !8425
  %166 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8426
  %tobool184 = icmp ne %struct.regmap_async* %166, null, !dbg !8426
  br i1 %tobool184, label %if.end186, label %if.then185, !dbg !8428

if.then185:                                       ; preds = %if.then181
  store i32 -12, i32* %retval, align 4, !dbg !8429
  br label %return, !dbg !8429

if.end186:                                        ; preds = %if.then181
  %167 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8430
  %format187 = getelementptr inbounds %struct.regmap, %struct.regmap* %167, i32 0, i32 7, !dbg !8431
  %buf_size = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format187, i32 0, i32 0, !dbg !8432
  %168 = load i64, i64* %buf_size, align 8, !dbg !8432
  %call188 = call i8* @kzalloc(i64 %168, i32 3265) #11, !dbg !8433
  %169 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8434
  %work_buf189 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %169, i32 0, i32 2, !dbg !8435
  store i8* %call188, i8** %work_buf189, align 8, !dbg !8436
  %170 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8437
  %work_buf190 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %170, i32 0, i32 2, !dbg !8439
  %171 = load i8*, i8** %work_buf190, align 8, !dbg !8439
  %tobool191 = icmp ne i8* %171, null, !dbg !8437
  br i1 %tobool191, label %if.end193, label %if.then192, !dbg !8440

if.then192:                                       ; preds = %if.end186
  %172 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8441
  %173 = bitcast %struct.regmap_async* %172 to i8*, !dbg !8441
  call void @kfree(i8* %173) #11, !dbg !8443
  store i32 -12, i32* %retval, align 4, !dbg !8444
  br label %return, !dbg !8444

if.end193:                                        ; preds = %if.end186
  br label %if.end194, !dbg !8445

if.end194:                                        ; preds = %if.end193, %if.end178
  %174 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8446
  %175 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8447
  %map195 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %175, i32 0, i32 1, !dbg !8448
  store %struct.regmap* %174, %struct.regmap** %map195, align 8, !dbg !8449
  %176 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8450
  %work_buf196 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %176, i32 0, i32 2, !dbg !8451
  %177 = load i8*, i8** %work_buf196, align 8, !dbg !8451
  %178 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8452
  %work_buf197 = getelementptr inbounds %struct.regmap, %struct.regmap* %178, i32 0, i32 6, !dbg !8453
  %179 = load i8*, i8** %work_buf197, align 8, !dbg !8453
  %180 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8454
  %format198 = getelementptr inbounds %struct.regmap, %struct.regmap* %180, i32 0, i32 7, !dbg !8455
  %pad_bytes199 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format198, i32 0, i32 2, !dbg !8456
  %181 = load i64, i64* %pad_bytes199, align 8, !dbg !8456
  %182 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8457
  %format200 = getelementptr inbounds %struct.regmap, %struct.regmap* %182, i32 0, i32 7, !dbg !8458
  %reg_bytes201 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format200, i32 0, i32 1, !dbg !8459
  %183 = load i64, i64* %reg_bytes201, align 8, !dbg !8459
  %add202 = add i64 %181, %183, !dbg !8460
  %184 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8461
  %format203 = getelementptr inbounds %struct.regmap, %struct.regmap* %184, i32 0, i32 7, !dbg !8462
  %val_bytes204 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format203, i32 0, i32 3, !dbg !8463
  %185 = load i64, i64* %val_bytes204, align 8, !dbg !8463
  %add205 = add i64 %add202, %185, !dbg !8464
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %177, i8* align 1 %179, i64 %add205, i1 false), !dbg !8465
  br label %do.body206, !dbg !8466

do.body206:                                       ; preds = %if.end194
  br label %do.body207, !dbg !8467

do.body207:                                       ; preds = %do.body206
  call void @llvm.dbg.declare(metadata i64* %__dummy208, metadata !8468, metadata !DIExpression()), !dbg !8470
  call void @llvm.dbg.declare(metadata i64* %__dummy2209, metadata !8471, metadata !DIExpression()), !dbg !8470
  %cmp210 = icmp eq i64* %__dummy208, %__dummy2209, !dbg !8470
  %conv211 = zext i1 %cmp210 to i32, !dbg !8470
  store i32 1, i32* %tmp212, align 4, !dbg !8470
  %186 = load i32, i32* %tmp212, align 4, !dbg !8470
  br label %do.body213, !dbg !8472

do.body213:                                       ; preds = %do.body207
  br label %do.body214, !dbg !8473

do.body214:                                       ; preds = %do.body213
  br label %do.body215, !dbg !8474

do.body215:                                       ; preds = %do.body214
  call void @llvm.dbg.declare(metadata i64* %__dummy216, metadata !8476, metadata !DIExpression()), !dbg !8479
  call void @llvm.dbg.declare(metadata i64* %__dummy2217, metadata !8480, metadata !DIExpression()), !dbg !8479
  %cmp218 = icmp eq i64* %__dummy216, %__dummy2217, !dbg !8479
  %conv219 = zext i1 %cmp218 to i32, !dbg !8479
  store i32 1, i32* %tmp220, align 4, !dbg !8479
  %187 = load i32, i32* %tmp220, align 4, !dbg !8479
  %call221 = call i64 @arch_local_irq_save() #11, !dbg !8481
  store i64 %call221, i64* %flags, align 8, !dbg !8481
  br label %do.end222, !dbg !8481

do.end222:                                        ; preds = %do.body215
  br label %do.end223, !dbg !8474

do.end223:                                        ; preds = %do.end222
  br label %do.body224, !dbg !8473

do.body224:                                       ; preds = %do.end223
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !8482, !srcloc !8483
  br label %do.body225, !dbg !8482

do.body225:                                       ; preds = %do.body224
  %188 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8484
  %async_lock226 = getelementptr inbounds %struct.regmap, %struct.regmap* %188, i32 0, i32 12, !dbg !8484
  store %struct.spinlock* %async_lock226, %struct.spinlock** %lock.addr.i384, align 8
  %189 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i384, align 8, !dbg !8485
  %190 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %189, i32 0, i32 0, !dbg !8486
  %rlock.i385 = bitcast %union.anon.0* %190 to %struct.raw_spinlock*, !dbg !8486
  br label %do.end228, !dbg !8484

do.end228:                                        ; preds = %do.body225
  br label %do.end229, !dbg !8482

do.end229:                                        ; preds = %do.end228
  br label %do.end230, !dbg !8473

do.end230:                                        ; preds = %do.end229
  br label %do.end231, !dbg !8472

do.end231:                                        ; preds = %do.end230
  br label %do.end232, !dbg !8467

do.end232:                                        ; preds = %do.end231
  %191 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8487
  %list233 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %191, i32 0, i32 0, !dbg !8488
  %192 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8489
  %async_list = getelementptr inbounds %struct.regmap, %struct.regmap* %192, i32 0, i32 14, !dbg !8490
  call void @list_add_tail(%struct.list_head* %list233, %struct.list_head* %async_list) #11, !dbg !8491
  %193 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8492
  %async_lock234 = getelementptr inbounds %struct.regmap, %struct.regmap* %193, i32 0, i32 12, !dbg !8493
  %194 = load i64, i64* %flags, align 8, !dbg !8494
  store %struct.spinlock* %async_lock234, %struct.spinlock** %lock.addr.i386, align 8
  store i64 %194, i64* %flags.addr.i387, align 8
  call void @llvm.dbg.declare(metadata !45, metadata !5978, metadata !DIExpression()) #10, !dbg !8495
  call void @llvm.dbg.declare(metadata !45, metadata !5982, metadata !DIExpression()) #10, !dbg !8495
  store i32 1, i32* %tmp.i388, align 4, !dbg !8495
  %195 = load i32, i32* %tmp.i388, align 4, !dbg !8495
  call void @llvm.dbg.declare(metadata !45, metadata !5983, metadata !DIExpression()) #10, !dbg !8496
  call void @llvm.dbg.declare(metadata !45, metadata !5989, metadata !DIExpression()) #10, !dbg !8496
  store i32 1, i32* %tmp8.i389, align 4, !dbg !8496
  %196 = load i32, i32* %tmp8.i389, align 4, !dbg !8496
  %197 = load i64, i64* %flags.addr.i387, align 8, !dbg !8497
  call void @arch_local_irq_restore(i64 %197) #14, !dbg !8497
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !8498, !srcloc !5993
  %198 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i386, align 8, !dbg !8499
  %199 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %198, i32 0, i32 0, !dbg !8499
  %rlock.i390 = bitcast %union.anon.0* %199 to %struct.raw_spinlock*, !dbg !8499
  %200 = load i8*, i8** %val.addr, align 8, !dbg !8500
  %201 = load i8*, i8** %work_val, align 8, !dbg !8502
  %cmp235 = icmp ne i8* %200, %201, !dbg !8503
  br i1 %cmp235, label %if.then237, label %if.else, !dbg !8504

if.then237:                                       ; preds = %do.end232
  %202 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8505
  %bus238 = getelementptr inbounds %struct.regmap, %struct.regmap* %202, i32 0, i32 8, !dbg !8506
  %203 = load %struct.regmap_bus*, %struct.regmap_bus** %bus238, align 8, !dbg !8506
  %async_write239 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %203, i32 0, i32 3, !dbg !8507
  %204 = load i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)*, i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)** %async_write239, align 8, !dbg !8507
  %205 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8508
  %bus_context = getelementptr inbounds %struct.regmap, %struct.regmap* %205, i32 0, i32 9, !dbg !8509
  %206 = load i8*, i8** %bus_context, align 8, !dbg !8509
  %207 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8510
  %work_buf240 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %207, i32 0, i32 2, !dbg !8511
  %208 = load i8*, i8** %work_buf240, align 8, !dbg !8511
  %209 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8512
  %format241 = getelementptr inbounds %struct.regmap, %struct.regmap* %209, i32 0, i32 7, !dbg !8513
  %reg_bytes242 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format241, i32 0, i32 1, !dbg !8514
  %210 = load i64, i64* %reg_bytes242, align 8, !dbg !8514
  %211 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8515
  %format243 = getelementptr inbounds %struct.regmap, %struct.regmap* %211, i32 0, i32 7, !dbg !8516
  %pad_bytes244 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format243, i32 0, i32 2, !dbg !8517
  %212 = load i64, i64* %pad_bytes244, align 8, !dbg !8517
  %add245 = add i64 %210, %212, !dbg !8518
  %213 = load i8*, i8** %val.addr, align 8, !dbg !8519
  %214 = load i64, i64* %val_len.addr, align 8, !dbg !8520
  %215 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8521
  %call246 = call i32 %204(i8* %206, i8* %208, i64 %add245, i8* %213, i64 %214, %struct.regmap_async* %215) #11, !dbg !8505
  store i32 %call246, i32* %ret, align 4, !dbg !8522
  br label %if.end258, !dbg !8523

if.else:                                          ; preds = %do.end232
  %216 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8524
  %bus247 = getelementptr inbounds %struct.regmap, %struct.regmap* %216, i32 0, i32 8, !dbg !8525
  %217 = load %struct.regmap_bus*, %struct.regmap_bus** %bus247, align 8, !dbg !8525
  %async_write248 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %217, i32 0, i32 3, !dbg !8526
  %218 = load i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)*, i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)** %async_write248, align 8, !dbg !8526
  %219 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8527
  %bus_context249 = getelementptr inbounds %struct.regmap, %struct.regmap* %219, i32 0, i32 9, !dbg !8528
  %220 = load i8*, i8** %bus_context249, align 8, !dbg !8528
  %221 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8529
  %work_buf250 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %221, i32 0, i32 2, !dbg !8530
  %222 = load i8*, i8** %work_buf250, align 8, !dbg !8530
  %223 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8531
  %format251 = getelementptr inbounds %struct.regmap, %struct.regmap* %223, i32 0, i32 7, !dbg !8532
  %reg_bytes252 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format251, i32 0, i32 1, !dbg !8533
  %224 = load i64, i64* %reg_bytes252, align 8, !dbg !8533
  %225 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8534
  %format253 = getelementptr inbounds %struct.regmap, %struct.regmap* %225, i32 0, i32 7, !dbg !8535
  %pad_bytes254 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format253, i32 0, i32 2, !dbg !8536
  %226 = load i64, i64* %pad_bytes254, align 8, !dbg !8536
  %add255 = add i64 %224, %226, !dbg !8537
  %227 = load i64, i64* %val_len.addr, align 8, !dbg !8538
  %add256 = add i64 %add255, %227, !dbg !8539
  %228 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8540
  %call257 = call i32 %218(i8* %220, i8* %222, i64 %add256, i8* null, i64 0, %struct.regmap_async* %228) #11, !dbg !8524
  store i32 %call257, i32* %ret, align 4, !dbg !8541
  br label %if.end258

if.end258:                                        ; preds = %if.else, %if.then237
  %229 = load i32, i32* %ret, align 4, !dbg !8542
  %cmp259 = icmp ne i32 %229, 0, !dbg !8543
  br i1 %cmp259, label %if.then261, label %if.end293, !dbg !8544

if.then261:                                       ; preds = %if.end258
  %230 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8545
  %dev262 = getelementptr inbounds %struct.regmap, %struct.regmap* %230, i32 0, i32 5, !dbg !8545
  %231 = load %struct.device*, %struct.device** %dev262, align 8, !dbg !8545
  %232 = load i32, i32* %ret, align 4, !dbg !8545
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %231, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.18, i64 0, i64 0), i32 %232) #13, !dbg !8545
  br label %do.body263, !dbg !8546

do.body263:                                       ; preds = %if.then261
  br label %do.body264, !dbg !8547

do.body264:                                       ; preds = %do.body263
  call void @llvm.dbg.declare(metadata i64* %__dummy265, metadata !8548, metadata !DIExpression()), !dbg !8550
  call void @llvm.dbg.declare(metadata i64* %__dummy2266, metadata !8551, metadata !DIExpression()), !dbg !8550
  %cmp267 = icmp eq i64* %__dummy265, %__dummy2266, !dbg !8550
  %conv268 = zext i1 %cmp267 to i32, !dbg !8550
  store i32 1, i32* %tmp269, align 4, !dbg !8550
  %233 = load i32, i32* %tmp269, align 4, !dbg !8550
  br label %do.body270, !dbg !8552

do.body270:                                       ; preds = %do.body264
  br label %do.body271, !dbg !8553

do.body271:                                       ; preds = %do.body270
  br label %do.body272, !dbg !8554

do.body272:                                       ; preds = %do.body271
  call void @llvm.dbg.declare(metadata i64* %__dummy273, metadata !8556, metadata !DIExpression()), !dbg !8559
  call void @llvm.dbg.declare(metadata i64* %__dummy2274, metadata !8560, metadata !DIExpression()), !dbg !8559
  %cmp275 = icmp eq i64* %__dummy273, %__dummy2274, !dbg !8559
  %conv276 = zext i1 %cmp275 to i32, !dbg !8559
  store i32 1, i32* %tmp277, align 4, !dbg !8559
  %234 = load i32, i32* %tmp277, align 4, !dbg !8559
  %call278 = call i64 @arch_local_irq_save() #11, !dbg !8561
  store i64 %call278, i64* %flags, align 8, !dbg !8561
  br label %do.end279, !dbg !8561

do.end279:                                        ; preds = %do.body272
  br label %do.end280, !dbg !8554

do.end280:                                        ; preds = %do.end279
  br label %do.body281, !dbg !8553

do.body281:                                       ; preds = %do.end280
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !8562, !srcloc !8563
  br label %do.body282, !dbg !8562

do.body282:                                       ; preds = %do.body281
  %235 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8564
  %async_lock283 = getelementptr inbounds %struct.regmap, %struct.regmap* %235, i32 0, i32 12, !dbg !8564
  store %struct.spinlock* %async_lock283, %struct.spinlock** %lock.addr.i391, align 8
  %236 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i391, align 8, !dbg !8565
  %237 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %236, i32 0, i32 0, !dbg !8566
  %rlock.i392 = bitcast %union.anon.0* %237 to %struct.raw_spinlock*, !dbg !8566
  br label %do.end285, !dbg !8564

do.end285:                                        ; preds = %do.body282
  br label %do.end286, !dbg !8562

do.end286:                                        ; preds = %do.end285
  br label %do.end287, !dbg !8553

do.end287:                                        ; preds = %do.end286
  br label %do.end288, !dbg !8552

do.end288:                                        ; preds = %do.end287
  br label %do.end289, !dbg !8547

do.end289:                                        ; preds = %do.end288
  %238 = load %struct.regmap_async*, %struct.regmap_async** %async136, align 8, !dbg !8567
  %list290 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %238, i32 0, i32 0, !dbg !8568
  %239 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8569
  %async_free291 = getelementptr inbounds %struct.regmap, %struct.regmap* %239, i32 0, i32 15, !dbg !8570
  call void @list_move(%struct.list_head* %list290, %struct.list_head* %async_free291) #11, !dbg !8571
  %240 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8572
  %async_lock292 = getelementptr inbounds %struct.regmap, %struct.regmap* %240, i32 0, i32 12, !dbg !8573
  %241 = load i64, i64* %flags, align 8, !dbg !8574
  store %struct.spinlock* %async_lock292, %struct.spinlock** %lock.addr.i393, align 8
  store i64 %241, i64* %flags.addr.i394, align 8
  call void @llvm.dbg.declare(metadata !45, metadata !5978, metadata !DIExpression()) #10, !dbg !8575
  call void @llvm.dbg.declare(metadata !45, metadata !5982, metadata !DIExpression()) #10, !dbg !8575
  store i32 1, i32* %tmp.i395, align 4, !dbg !8575
  %242 = load i32, i32* %tmp.i395, align 4, !dbg !8575
  call void @llvm.dbg.declare(metadata !45, metadata !5983, metadata !DIExpression()) #10, !dbg !8576
  call void @llvm.dbg.declare(metadata !45, metadata !5989, metadata !DIExpression()) #10, !dbg !8576
  store i32 1, i32* %tmp8.i396, align 4, !dbg !8576
  %243 = load i32, i32* %tmp8.i396, align 4, !dbg !8576
  %244 = load i64, i64* %flags.addr.i394, align 8, !dbg !8577
  call void @arch_local_irq_restore(i64 %244) #14, !dbg !8577
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !8578, !srcloc !5993
  %245 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i393, align 8, !dbg !8579
  %246 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %245, i32 0, i32 0, !dbg !8579
  %rlock.i397 = bitcast %union.anon.0* %246 to %struct.raw_spinlock*, !dbg !8579
  br label %if.end293, !dbg !8580

if.end293:                                        ; preds = %do.end289, %if.end258
  %247 = load i32, i32* %ret, align 4, !dbg !8581
  store i32 %247, i32* %retval, align 4, !dbg !8582
  br label %return, !dbg !8582

if.end294:                                        ; preds = %land.lhs.true132, %if.end129
  %248 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8583
  %249 = load i32, i32* %reg.addr, align 4, !dbg !8584
  %250 = load i64, i64* %val_len.addr, align 8, !dbg !8585
  %251 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8586
  %format295 = getelementptr inbounds %struct.regmap, %struct.regmap* %251, i32 0, i32 7, !dbg !8587
  %val_bytes296 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format295, i32 0, i32 3, !dbg !8588
  %252 = load i64, i64* %val_bytes296, align 8, !dbg !8588
  %div297 = udiv i64 %250, %252, !dbg !8589
  %conv298 = trunc i64 %div297 to i32, !dbg !8585
  call void @trace_regmap_hw_write_start(%struct.regmap* %248, i32 %249, i32 %conv298) #11, !dbg !8590
  %253 = load i8*, i8** %val.addr, align 8, !dbg !8591
  %254 = load i8*, i8** %work_val, align 8, !dbg !8593
  %cmp299 = icmp eq i8* %253, %254, !dbg !8594
  br i1 %cmp299, label %if.then301, label %if.else312, !dbg !8595

if.then301:                                       ; preds = %if.end294
  %255 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8596
  %bus302 = getelementptr inbounds %struct.regmap, %struct.regmap* %255, i32 0, i32 8, !dbg !8597
  %256 = load %struct.regmap_bus*, %struct.regmap_bus** %bus302, align 8, !dbg !8597
  %write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %256, i32 0, i32 1, !dbg !8598
  %257 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %write, align 8, !dbg !8598
  %258 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8599
  %bus_context303 = getelementptr inbounds %struct.regmap, %struct.regmap* %258, i32 0, i32 9, !dbg !8600
  %259 = load i8*, i8** %bus_context303, align 8, !dbg !8600
  %260 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8601
  %work_buf304 = getelementptr inbounds %struct.regmap, %struct.regmap* %260, i32 0, i32 6, !dbg !8602
  %261 = load i8*, i8** %work_buf304, align 8, !dbg !8602
  %262 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8603
  %format305 = getelementptr inbounds %struct.regmap, %struct.regmap* %262, i32 0, i32 7, !dbg !8604
  %reg_bytes306 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format305, i32 0, i32 1, !dbg !8605
  %263 = load i64, i64* %reg_bytes306, align 8, !dbg !8605
  %264 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8606
  %format307 = getelementptr inbounds %struct.regmap, %struct.regmap* %264, i32 0, i32 7, !dbg !8607
  %pad_bytes308 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format307, i32 0, i32 2, !dbg !8608
  %265 = load i64, i64* %pad_bytes308, align 8, !dbg !8608
  %add309 = add i64 %263, %265, !dbg !8609
  %266 = load i64, i64* %val_len.addr, align 8, !dbg !8610
  %add310 = add i64 %add309, %266, !dbg !8611
  %call311 = call i32 %257(i8* %259, i8* %261, i64 %add310) #11, !dbg !8596
  store i32 %call311, i32* %ret, align 4, !dbg !8612
  br label %if.end328, !dbg !8613

if.else312:                                       ; preds = %if.end294
  %267 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8614
  %bus313 = getelementptr inbounds %struct.regmap, %struct.regmap* %267, i32 0, i32 8, !dbg !8616
  %268 = load %struct.regmap_bus*, %struct.regmap_bus** %bus313, align 8, !dbg !8616
  %gather_write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %268, i32 0, i32 2, !dbg !8617
  %269 = load i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64)** %gather_write, align 8, !dbg !8617
  %tobool314 = icmp ne i32 (i8*, i8*, i64, i8*, i64)* %269, null, !dbg !8614
  br i1 %tobool314, label %if.then315, label %if.else326, !dbg !8618

if.then315:                                       ; preds = %if.else312
  %270 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8619
  %bus316 = getelementptr inbounds %struct.regmap, %struct.regmap* %270, i32 0, i32 8, !dbg !8620
  %271 = load %struct.regmap_bus*, %struct.regmap_bus** %bus316, align 8, !dbg !8620
  %gather_write317 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %271, i32 0, i32 2, !dbg !8621
  %272 = load i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64)** %gather_write317, align 8, !dbg !8621
  %273 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8622
  %bus_context318 = getelementptr inbounds %struct.regmap, %struct.regmap* %273, i32 0, i32 9, !dbg !8623
  %274 = load i8*, i8** %bus_context318, align 8, !dbg !8623
  %275 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8624
  %work_buf319 = getelementptr inbounds %struct.regmap, %struct.regmap* %275, i32 0, i32 6, !dbg !8625
  %276 = load i8*, i8** %work_buf319, align 8, !dbg !8625
  %277 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8626
  %format320 = getelementptr inbounds %struct.regmap, %struct.regmap* %277, i32 0, i32 7, !dbg !8627
  %reg_bytes321 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format320, i32 0, i32 1, !dbg !8628
  %278 = load i64, i64* %reg_bytes321, align 8, !dbg !8628
  %279 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8629
  %format322 = getelementptr inbounds %struct.regmap, %struct.regmap* %279, i32 0, i32 7, !dbg !8630
  %pad_bytes323 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format322, i32 0, i32 2, !dbg !8631
  %280 = load i64, i64* %pad_bytes323, align 8, !dbg !8631
  %add324 = add i64 %278, %280, !dbg !8632
  %281 = load i8*, i8** %val.addr, align 8, !dbg !8633
  %282 = load i64, i64* %val_len.addr, align 8, !dbg !8634
  %call325 = call i32 %272(i8* %274, i8* %276, i64 %add324, i8* %281, i64 %282) #11, !dbg !8619
  store i32 %call325, i32* %ret, align 4, !dbg !8635
  br label %if.end327, !dbg !8636

if.else326:                                       ; preds = %if.else312
  store i32 -524, i32* %ret, align 4, !dbg !8637
  br label %if.end327

if.end327:                                        ; preds = %if.else326, %if.then315
  br label %if.end328

if.end328:                                        ; preds = %if.end327, %if.then301
  %283 = load i32, i32* %ret, align 4, !dbg !8638
  %cmp329 = icmp eq i32 %283, -524, !dbg !8640
  br i1 %cmp329, label %if.then331, label %if.else355, !dbg !8641

if.then331:                                       ; preds = %if.end328
  %284 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8642
  %format332 = getelementptr inbounds %struct.regmap, %struct.regmap* %284, i32 0, i32 7, !dbg !8644
  %reg_bytes333 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format332, i32 0, i32 1, !dbg !8645
  %285 = load i64, i64* %reg_bytes333, align 8, !dbg !8645
  %286 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8646
  %format334 = getelementptr inbounds %struct.regmap, %struct.regmap* %286, i32 0, i32 7, !dbg !8647
  %pad_bytes335 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format334, i32 0, i32 2, !dbg !8648
  %287 = load i64, i64* %pad_bytes335, align 8, !dbg !8648
  %add336 = add i64 %285, %287, !dbg !8649
  %288 = load i64, i64* %val_len.addr, align 8, !dbg !8650
  %add337 = add i64 %add336, %288, !dbg !8651
  store i64 %add337, i64* %len, align 8, !dbg !8652
  %289 = load i64, i64* %len, align 8, !dbg !8653
  %call338 = call i8* @kzalloc(i64 %289, i32 3264) #11, !dbg !8654
  store i8* %call338, i8** %buf, align 8, !dbg !8655
  %290 = load i8*, i8** %buf, align 8, !dbg !8656
  %tobool339 = icmp ne i8* %290, null, !dbg !8656
  br i1 %tobool339, label %if.end341, label %if.then340, !dbg !8658

if.then340:                                       ; preds = %if.then331
  store i32 -12, i32* %retval, align 4, !dbg !8659
  br label %return, !dbg !8659

if.end341:                                        ; preds = %if.then331
  %291 = load i8*, i8** %buf, align 8, !dbg !8660
  %292 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8661
  %work_buf342 = getelementptr inbounds %struct.regmap, %struct.regmap* %292, i32 0, i32 6, !dbg !8662
  %293 = load i8*, i8** %work_buf342, align 8, !dbg !8662
  %294 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8663
  %format343 = getelementptr inbounds %struct.regmap, %struct.regmap* %294, i32 0, i32 7, !dbg !8664
  %reg_bytes344 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format343, i32 0, i32 1, !dbg !8665
  %295 = load i64, i64* %reg_bytes344, align 8, !dbg !8665
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %291, i8* align 1 %293, i64 %295, i1 false), !dbg !8666
  %296 = load i8*, i8** %buf, align 8, !dbg !8667
  %297 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8668
  %format345 = getelementptr inbounds %struct.regmap, %struct.regmap* %297, i32 0, i32 7, !dbg !8669
  %reg_bytes346 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format345, i32 0, i32 1, !dbg !8670
  %298 = load i64, i64* %reg_bytes346, align 8, !dbg !8670
  %add.ptr347 = getelementptr i8, i8* %296, i64 %298, !dbg !8671
  %299 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8672
  %format348 = getelementptr inbounds %struct.regmap, %struct.regmap* %299, i32 0, i32 7, !dbg !8673
  %pad_bytes349 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format348, i32 0, i32 2, !dbg !8674
  %300 = load i64, i64* %pad_bytes349, align 8, !dbg !8674
  %add.ptr350 = getelementptr i8, i8* %add.ptr347, i64 %300, !dbg !8675
  %301 = load i8*, i8** %val.addr, align 8, !dbg !8676
  %302 = load i64, i64* %val_len.addr, align 8, !dbg !8677
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %add.ptr350, i8* align 1 %301, i64 %302, i1 false), !dbg !8678
  %303 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8679
  %bus351 = getelementptr inbounds %struct.regmap, %struct.regmap* %303, i32 0, i32 8, !dbg !8680
  %304 = load %struct.regmap_bus*, %struct.regmap_bus** %bus351, align 8, !dbg !8680
  %write352 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %304, i32 0, i32 1, !dbg !8681
  %305 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %write352, align 8, !dbg !8681
  %306 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8682
  %bus_context353 = getelementptr inbounds %struct.regmap, %struct.regmap* %306, i32 0, i32 9, !dbg !8683
  %307 = load i8*, i8** %bus_context353, align 8, !dbg !8683
  %308 = load i8*, i8** %buf, align 8, !dbg !8684
  %309 = load i64, i64* %len, align 8, !dbg !8685
  %call354 = call i32 %305(i8* %307, i8* %308, i64 %309) #11, !dbg !8679
  store i32 %call354, i32* %ret, align 4, !dbg !8686
  %310 = load i8*, i8** %buf, align 8, !dbg !8687
  call void @kfree(i8* %310) #11, !dbg !8688
  br label %if.end377, !dbg !8689

if.else355:                                       ; preds = %if.end328
  %311 = load i32, i32* %ret, align 4, !dbg !8690
  %cmp356 = icmp ne i32 %311, 0, !dbg !8692
  br i1 %cmp356, label %land.lhs.true358, label %if.end376, !dbg !8693

land.lhs.true358:                                 ; preds = %if.else355
  %312 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8694
  %cache_bypass359 = getelementptr inbounds %struct.regmap, %struct.regmap* %312, i32 0, i32 46, !dbg !8695
  %313 = load i8, i8* %cache_bypass359, align 1, !dbg !8695
  %tobool360 = trunc i8 %313 to i1, !dbg !8695
  br i1 %tobool360, label %if.end376, label %land.lhs.true361, !dbg !8696

land.lhs.true361:                                 ; preds = %land.lhs.true358
  %314 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8697
  %format362 = getelementptr inbounds %struct.regmap, %struct.regmap* %314, i32 0, i32 7, !dbg !8698
  %parse_val363 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format362, i32 0, i32 7, !dbg !8699
  %315 = load i32 (i8*)*, i32 (i8*)** %parse_val363, align 8, !dbg !8699
  %tobool364 = icmp ne i32 (i8*)* %315, null, !dbg !8697
  br i1 %tobool364, label %if.then365, label %if.end376, !dbg !8700

if.then365:                                       ; preds = %land.lhs.true361
  %316 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8701
  %cache_ops = getelementptr inbounds %struct.regmap, %struct.regmap* %316, i32 0, i32 39, !dbg !8704
  %317 = load %struct.regcache_ops*, %struct.regcache_ops** %cache_ops, align 8, !dbg !8704
  %tobool366 = icmp ne %struct.regcache_ops* %317, null, !dbg !8701
  br i1 %tobool366, label %land.lhs.true367, label %if.end375, !dbg !8705

land.lhs.true367:                                 ; preds = %if.then365
  %318 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8706
  %cache_ops368 = getelementptr inbounds %struct.regmap, %struct.regmap* %318, i32 0, i32 39, !dbg !8707
  %319 = load %struct.regcache_ops*, %struct.regcache_ops** %cache_ops368, align 8, !dbg !8707
  %drop = getelementptr inbounds %struct.regcache_ops, %struct.regcache_ops* %319, i32 0, i32 7, !dbg !8708
  %320 = load i32 (%struct.regmap*, i32, i32)*, i32 (%struct.regmap*, i32, i32)** %drop, align 8, !dbg !8708
  %tobool369 = icmp ne i32 (%struct.regmap*, i32, i32)* %320, null, !dbg !8706
  br i1 %tobool369, label %if.then370, label %if.end375, !dbg !8709

if.then370:                                       ; preds = %land.lhs.true367
  %321 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8710
  %cache_ops371 = getelementptr inbounds %struct.regmap, %struct.regmap* %321, i32 0, i32 39, !dbg !8711
  %322 = load %struct.regcache_ops*, %struct.regcache_ops** %cache_ops371, align 8, !dbg !8711
  %drop372 = getelementptr inbounds %struct.regcache_ops, %struct.regcache_ops* %322, i32 0, i32 7, !dbg !8712
  %323 = load i32 (%struct.regmap*, i32, i32)*, i32 (%struct.regmap*, i32, i32)** %drop372, align 8, !dbg !8712
  %324 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8713
  %325 = load i32, i32* %reg.addr, align 4, !dbg !8714
  %326 = load i32, i32* %reg.addr, align 4, !dbg !8715
  %add373 = add i32 %326, 1, !dbg !8716
  %call374 = call i32 %323(%struct.regmap* %324, i32 %325, i32 %add373) #11, !dbg !8710
  br label %if.end375, !dbg !8710

if.end375:                                        ; preds = %if.then370, %land.lhs.true367, %if.then365
  br label %if.end376, !dbg !8717

if.end376:                                        ; preds = %if.end375, %land.lhs.true361, %land.lhs.true358, %if.else355
  br label %if.end377

if.end377:                                        ; preds = %if.end376, %if.end341
  %327 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8718
  %328 = load i32, i32* %reg.addr, align 4, !dbg !8719
  %329 = load i64, i64* %val_len.addr, align 8, !dbg !8720
  %330 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8721
  %format378 = getelementptr inbounds %struct.regmap, %struct.regmap* %330, i32 0, i32 7, !dbg !8722
  %val_bytes379 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format378, i32 0, i32 3, !dbg !8723
  %331 = load i64, i64* %val_bytes379, align 8, !dbg !8723
  %div380 = udiv i64 %329, %331, !dbg !8724
  %conv381 = trunc i64 %div380 to i32, !dbg !8720
  call void @trace_regmap_hw_write_done(%struct.regmap* %327, i32 %328, i32 %conv381) #11, !dbg !8725
  %332 = load i32, i32* %ret, align 4, !dbg !8726
  store i32 %332, i32* %retval, align 4, !dbg !8727
  br label %return, !dbg !8727

return:                                           ; preds = %if.end377, %if.then340, %if.end293, %if.then192, %if.then185, %if.then111, %if.then86, %if.then64, %if.then57, %if.then31
  %333 = load i32, i32* %retval, align 4, !dbg !8728
  ret i32 %333, !dbg !8728
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_get_offset(%struct.regmap* %map, i32 %index) #0 !dbg !8729 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %index.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !8734, metadata !DIExpression()), !dbg !8735
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !8736, metadata !DIExpression()), !dbg !8737
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8738
  %reg_stride_order = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 38, !dbg !8740
  %1 = load i32, i32* %reg_stride_order, align 8, !dbg !8740
  %cmp = icmp sge i32 %1, 0, !dbg !8741
  br i1 %cmp, label %if.then, label %if.else, !dbg !8742

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %index.addr, align 4, !dbg !8743
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8744
  %reg_stride_order1 = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 38, !dbg !8745
  %4 = load i32, i32* %reg_stride_order1, align 8, !dbg !8745
  %shl = shl i32 %2, %4, !dbg !8746
  store i32 %shl, i32* %retval, align 4, !dbg !8747
  br label %return, !dbg !8747

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %index.addr, align 4, !dbg !8748
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8749
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 37, !dbg !8750
  %7 = load i32, i32* %reg_stride, align 4, !dbg !8750
  %mul = mul i32 %5, %7, !dbg !8751
  store i32 %mul, i32* %retval, align 4, !dbg !8752
  br label %return, !dbg !8752

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !8753
  ret i32 %8, !dbg !8753
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_raw_write(%struct.regmap* %map, i32 %reg, i8* %val, i64 %val_len) #0 !dbg !8754 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_len.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !8757, metadata !DIExpression()), !dbg !8758
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !8759, metadata !DIExpression()), !dbg !8760
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !8761, metadata !DIExpression()), !dbg !8762
  store i64 %val_len, i64* %val_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val_len.addr, metadata !8763, metadata !DIExpression()), !dbg !8764
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8765, metadata !DIExpression()), !dbg !8766
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8767
  %call = call zeroext i1 @regmap_can_raw_write(%struct.regmap* %0) #11, !dbg !8769
  br i1 %call, label %if.end, label %if.then, !dbg !8770

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !8771
  br label %return, !dbg !8771

if.end:                                           ; preds = %entry
  %1 = load i64, i64* %val_len.addr, align 8, !dbg !8772
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8774
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 7, !dbg !8775
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !8776
  %3 = load i64, i64* %val_bytes, align 8, !dbg !8776
  %rem = urem i64 %1, %3, !dbg !8777
  %tobool = icmp ne i64 %rem, 0, !dbg !8777
  br i1 %tobool, label %if.then1, label %if.end2, !dbg !8778

if.then1:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !8779
  br label %return, !dbg !8779

if.end2:                                          ; preds = %if.end
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8780
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 1, !dbg !8781
  %5 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !8781
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8782
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 3, !dbg !8783
  %7 = load i8*, i8** %lock_arg, align 8, !dbg !8783
  call void %5(i8* %7) #11, !dbg !8780
  %8 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8784
  %9 = load i32, i32* %reg.addr, align 4, !dbg !8785
  %10 = load i8*, i8** %val.addr, align 8, !dbg !8786
  %11 = load i64, i64* %val_len.addr, align 8, !dbg !8787
  %call3 = call i32 @_regmap_raw_write(%struct.regmap* %8, i32 %9, i8* %10, i64 %11, i1 zeroext false) #11, !dbg !8788
  store i32 %call3, i32* %ret, align 4, !dbg !8789
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8790
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 2, !dbg !8791
  %13 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !8791
  %14 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8792
  %lock_arg4 = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 3, !dbg !8793
  %15 = load i8*, i8** %lock_arg4, align 8, !dbg !8793
  call void %13(i8* %15) #11, !dbg !8790
  %16 = load i32, i32* %ret, align 4, !dbg !8794
  store i32 %16, i32* %retval, align 4, !dbg !8795
  br label %return, !dbg !8795

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %17 = load i32, i32* %retval, align 4, !dbg !8796
  ret i32 %17, !dbg !8796
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_noinc_write(%struct.regmap* %map, i32 %reg, i8* %val, i64 %val_len) #0 !dbg !8797 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_len.addr = alloca i64, align 8
  %write_len = alloca i64, align 8
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !8798, metadata !DIExpression()), !dbg !8799
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !8800, metadata !DIExpression()), !dbg !8801
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !8802, metadata !DIExpression()), !dbg !8803
  store i64 %val_len, i64* %val_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val_len.addr, metadata !8804, metadata !DIExpression()), !dbg !8805
  call void @llvm.dbg.declare(metadata i64* %write_len, metadata !8806, metadata !DIExpression()), !dbg !8807
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8808, metadata !DIExpression()), !dbg !8809
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8810
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 8, !dbg !8812
  %1 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !8812
  %tobool = icmp ne %struct.regmap_bus* %1, null, !dbg !8810
  br i1 %tobool, label %if.end, label %if.then, !dbg !8813

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !8814
  br label %return, !dbg !8814

if.end:                                           ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8815
  %bus1 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 8, !dbg !8817
  %3 = load %struct.regmap_bus*, %struct.regmap_bus** %bus1, align 8, !dbg !8817
  %write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %3, i32 0, i32 1, !dbg !8818
  %4 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %write, align 8, !dbg !8818
  %tobool2 = icmp ne i32 (i8*, i8*, i64)* %4, null, !dbg !8815
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !8819

if.then3:                                         ; preds = %if.end
  store i32 -524, i32* %retval, align 4, !dbg !8820
  br label %return, !dbg !8820

if.end4:                                          ; preds = %if.end
  %5 = load i64, i64* %val_len.addr, align 8, !dbg !8821
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8823
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 7, !dbg !8824
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !8825
  %7 = load i64, i64* %val_bytes, align 8, !dbg !8825
  %rem = urem i64 %5, %7, !dbg !8826
  %tobool5 = icmp ne i64 %rem, 0, !dbg !8826
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !8827

if.then6:                                         ; preds = %if.end4
  store i32 -22, i32* %retval, align 4, !dbg !8828
  br label %return, !dbg !8828

if.end7:                                          ; preds = %if.end4
  %8 = load i32, i32* %reg.addr, align 4, !dbg !8829
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8829
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 37, !dbg !8829
  %10 = load i32, i32* %reg_stride, align 4, !dbg !8829
  %sub = sub i32 %10, 1, !dbg !8829
  %and = and i32 %8, %sub, !dbg !8829
  %cmp = icmp eq i32 %and, 0, !dbg !8829
  br i1 %cmp, label %if.end9, label %if.then8, !dbg !8831

if.then8:                                         ; preds = %if.end7
  store i32 -22, i32* %retval, align 4, !dbg !8832
  br label %return, !dbg !8832

if.end9:                                          ; preds = %if.end7
  %11 = load i64, i64* %val_len.addr, align 8, !dbg !8833
  %cmp10 = icmp eq i64 %11, 0, !dbg !8835
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !8836

if.then11:                                        ; preds = %if.end9
  store i32 -22, i32* %retval, align 4, !dbg !8837
  br label %return, !dbg !8837

if.end12:                                         ; preds = %if.end9
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8838
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 1, !dbg !8839
  %13 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !8839
  %14 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8840
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 3, !dbg !8841
  %15 = load i8*, i8** %lock_arg, align 8, !dbg !8841
  call void %13(i8* %15) #11, !dbg !8838
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8842
  %17 = load i32, i32* %reg.addr, align 4, !dbg !8844
  %call = call zeroext i1 @regmap_volatile(%struct.regmap* %16, i32 %17) #11, !dbg !8845
  br i1 %call, label %lor.lhs.false, label %if.then14, !dbg !8846

lor.lhs.false:                                    ; preds = %if.end12
  %18 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8847
  %19 = load i32, i32* %reg.addr, align 4, !dbg !8848
  %call13 = call zeroext i1 @regmap_writeable_noinc(%struct.regmap* %18, i32 %19) #11, !dbg !8849
  br i1 %call13, label %if.end15, label %if.then14, !dbg !8850

if.then14:                                        ; preds = %lor.lhs.false, %if.end12
  store i32 -22, i32* %ret, align 4, !dbg !8851
  br label %out_unlock, !dbg !8853

if.end15:                                         ; preds = %lor.lhs.false
  br label %while.cond, !dbg !8854

while.cond:                                       ; preds = %if.end26, %if.end15
  %20 = load i64, i64* %val_len.addr, align 8, !dbg !8855
  %tobool16 = icmp ne i64 %20, 0, !dbg !8854
  br i1 %tobool16, label %while.body, label %while.end, !dbg !8854

while.body:                                       ; preds = %while.cond
  %21 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8856
  %max_raw_write = getelementptr inbounds %struct.regmap, %struct.regmap* %21, i32 0, i32 59, !dbg !8859
  %22 = load i64, i64* %max_raw_write, align 8, !dbg !8859
  %tobool17 = icmp ne i64 %22, 0, !dbg !8856
  br i1 %tobool17, label %land.lhs.true, label %if.else, !dbg !8860

land.lhs.true:                                    ; preds = %while.body
  %23 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8861
  %max_raw_write18 = getelementptr inbounds %struct.regmap, %struct.regmap* %23, i32 0, i32 59, !dbg !8862
  %24 = load i64, i64* %max_raw_write18, align 8, !dbg !8862
  %25 = load i64, i64* %val_len.addr, align 8, !dbg !8863
  %cmp19 = icmp ult i64 %24, %25, !dbg !8864
  br i1 %cmp19, label %if.then20, label %if.else, !dbg !8865

if.then20:                                        ; preds = %land.lhs.true
  %26 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8866
  %max_raw_write21 = getelementptr inbounds %struct.regmap, %struct.regmap* %26, i32 0, i32 59, !dbg !8867
  %27 = load i64, i64* %max_raw_write21, align 8, !dbg !8867
  store i64 %27, i64* %write_len, align 8, !dbg !8868
  br label %if.end22, !dbg !8869

if.else:                                          ; preds = %land.lhs.true, %while.body
  %28 = load i64, i64* %val_len.addr, align 8, !dbg !8870
  store i64 %28, i64* %write_len, align 8, !dbg !8871
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then20
  %29 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8872
  %30 = load i32, i32* %reg.addr, align 4, !dbg !8873
  %31 = load i8*, i8** %val.addr, align 8, !dbg !8874
  %32 = load i64, i64* %write_len, align 8, !dbg !8875
  %call23 = call i32 @_regmap_raw_write(%struct.regmap* %29, i32 %30, i8* %31, i64 %32, i1 zeroext true) #11, !dbg !8876
  store i32 %call23, i32* %ret, align 4, !dbg !8877
  %33 = load i32, i32* %ret, align 4, !dbg !8878
  %tobool24 = icmp ne i32 %33, 0, !dbg !8878
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !8880

if.then25:                                        ; preds = %if.end22
  br label %out_unlock, !dbg !8881

if.end26:                                         ; preds = %if.end22
  %34 = load i8*, i8** %val.addr, align 8, !dbg !8882
  %35 = load i64, i64* %write_len, align 8, !dbg !8883
  %add.ptr = getelementptr i8, i8* %34, i64 %35, !dbg !8884
  store i8* %add.ptr, i8** %val.addr, align 8, !dbg !8885
  %36 = load i64, i64* %write_len, align 8, !dbg !8886
  %37 = load i64, i64* %val_len.addr, align 8, !dbg !8887
  %sub27 = sub i64 %37, %36, !dbg !8887
  store i64 %sub27, i64* %val_len.addr, align 8, !dbg !8887
  br label %while.cond, !dbg !8854, !llvm.loop !8888

while.end:                                        ; preds = %while.cond
  br label %out_unlock, !dbg !8854

out_unlock:                                       ; preds = %while.end, %if.then25, %if.then14
  call void @llvm.dbg.label(metadata !8890), !dbg !8891
  %38 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8892
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %38, i32 0, i32 2, !dbg !8893
  %39 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !8893
  %40 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8894
  %lock_arg28 = getelementptr inbounds %struct.regmap, %struct.regmap* %40, i32 0, i32 3, !dbg !8895
  %41 = load i8*, i8** %lock_arg28, align 8, !dbg !8895
  call void %39(i8* %41) #11, !dbg !8892
  %42 = load i32, i32* %ret, align 4, !dbg !8896
  store i32 %42, i32* %retval, align 4, !dbg !8897
  br label %return, !dbg !8897

return:                                           ; preds = %out_unlock, %if.then11, %if.then8, %if.then6, %if.then3, %if.then
  %43 = load i32, i32* %retval, align 4, !dbg !8898
  ret i32 %43, !dbg !8898
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_field_update_bits_base(%struct.regmap_field* %field, i32 %mask, i32 %val, i8* %change, i1 zeroext %async, i1 zeroext %force) #0 !dbg !8899 {
entry:
  %field.addr = alloca %struct.regmap_field*, align 8
  %mask.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %change.addr = alloca i8*, align 8
  %async.addr = alloca i8, align 1
  %force.addr = alloca i8, align 1
  store %struct.regmap_field* %field, %struct.regmap_field** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %field.addr, metadata !8902, metadata !DIExpression()), !dbg !8903
  store i32 %mask, i32* %mask.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mask.addr, metadata !8904, metadata !DIExpression()), !dbg !8905
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !8906, metadata !DIExpression()), !dbg !8907
  store i8* %change, i8** %change.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %change.addr, metadata !8908, metadata !DIExpression()), !dbg !8909
  %frombool = zext i1 %async to i8
  store i8 %frombool, i8* %async.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %async.addr, metadata !8910, metadata !DIExpression()), !dbg !8911
  %frombool1 = zext i1 %force to i8
  store i8 %frombool1, i8* %force.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force.addr, metadata !8912, metadata !DIExpression()), !dbg !8913
  %0 = load i32, i32* %mask.addr, align 4, !dbg !8914
  %1 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !8915
  %shift = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %1, i32 0, i32 2, !dbg !8916
  %2 = load i32, i32* %shift, align 4, !dbg !8916
  %shl = shl i32 %0, %2, !dbg !8917
  %3 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !8918
  %mask2 = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %3, i32 0, i32 1, !dbg !8919
  %4 = load i32, i32* %mask2, align 8, !dbg !8919
  %and = and i32 %shl, %4, !dbg !8920
  store i32 %and, i32* %mask.addr, align 4, !dbg !8921
  %5 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !8922
  %regmap = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %5, i32 0, i32 0, !dbg !8923
  %6 = load %struct.regmap*, %struct.regmap** %regmap, align 8, !dbg !8923
  %7 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !8924
  %reg = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %7, i32 0, i32 3, !dbg !8925
  %8 = load i32, i32* %reg, align 8, !dbg !8925
  %9 = load i32, i32* %mask.addr, align 4, !dbg !8926
  %10 = load i32, i32* %val.addr, align 4, !dbg !8927
  %11 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !8928
  %shift3 = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %11, i32 0, i32 2, !dbg !8929
  %12 = load i32, i32* %shift3, align 4, !dbg !8929
  %shl4 = shl i32 %10, %12, !dbg !8930
  %13 = load i8*, i8** %change.addr, align 8, !dbg !8931
  %14 = load i8, i8* %async.addr, align 1, !dbg !8932
  %tobool = trunc i8 %14 to i1, !dbg !8932
  %15 = load i8, i8* %force.addr, align 1, !dbg !8933
  %tobool5 = trunc i8 %15 to i1, !dbg !8933
  %call = call i32 @regmap_update_bits_base(%struct.regmap* %6, i32 %8, i32 %9, i32 %shl4, i8* %13, i1 zeroext %tobool, i1 zeroext %tobool5) #11, !dbg !8934
  ret i32 %call, !dbg !8935
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_update_bits_base(%struct.regmap* %map, i32 %reg, i32 %mask, i32 %val, i8* %change, i1 zeroext %async, i1 zeroext %force) #0 !dbg !8936 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %mask.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %change.addr = alloca i8*, align 8
  %async.addr = alloca i8, align 1
  %force.addr = alloca i8, align 1
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !8939, metadata !DIExpression()), !dbg !8940
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !8941, metadata !DIExpression()), !dbg !8942
  store i32 %mask, i32* %mask.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mask.addr, metadata !8943, metadata !DIExpression()), !dbg !8944
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !8945, metadata !DIExpression()), !dbg !8946
  store i8* %change, i8** %change.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %change.addr, metadata !8947, metadata !DIExpression()), !dbg !8948
  %frombool = zext i1 %async to i8
  store i8 %frombool, i8* %async.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %async.addr, metadata !8949, metadata !DIExpression()), !dbg !8950
  %frombool1 = zext i1 %force to i8
  store i8 %frombool1, i8* %force.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force.addr, metadata !8951, metadata !DIExpression()), !dbg !8952
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !8953, metadata !DIExpression()), !dbg !8954
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8955
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 1, !dbg !8956
  %1 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !8956
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8957
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 3, !dbg !8958
  %3 = load i8*, i8** %lock_arg, align 8, !dbg !8958
  call void %1(i8* %3) #11, !dbg !8955
  %4 = load i8, i8* %async.addr, align 1, !dbg !8959
  %tobool = trunc i8 %4 to i1, !dbg !8959
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8960
  %async2 = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 11, !dbg !8961
  %frombool3 = zext i1 %tobool to i8, !dbg !8962
  store i8 %frombool3, i8* %async2, align 8, !dbg !8962
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8963
  %7 = load i32, i32* %reg.addr, align 4, !dbg !8964
  %8 = load i32, i32* %mask.addr, align 4, !dbg !8965
  %9 = load i32, i32* %val.addr, align 4, !dbg !8966
  %10 = load i8*, i8** %change.addr, align 8, !dbg !8967
  %11 = load i8, i8* %force.addr, align 1, !dbg !8968
  %tobool4 = trunc i8 %11 to i1, !dbg !8968
  %call = call i32 @_regmap_update_bits(%struct.regmap* %6, i32 %7, i32 %8, i32 %9, i8* %10, i1 zeroext %tobool4) #11, !dbg !8969
  store i32 %call, i32* %ret, align 4, !dbg !8970
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8971
  %async5 = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 11, !dbg !8972
  store i8 0, i8* %async5, align 8, !dbg !8973
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8974
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %13, i32 0, i32 2, !dbg !8975
  %14 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !8975
  %15 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !8976
  %lock_arg6 = getelementptr inbounds %struct.regmap, %struct.regmap* %15, i32 0, i32 3, !dbg !8977
  %16 = load i8*, i8** %lock_arg6, align 8, !dbg !8977
  call void %14(i8* %16) #11, !dbg !8974
  %17 = load i32, i32* %ret, align 4, !dbg !8978
  ret i32 %17, !dbg !8979
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_fields_update_bits_base(%struct.regmap_field* %field, i32 %id, i32 %mask, i32 %val, i8* %change, i1 zeroext %async, i1 zeroext %force) #0 !dbg !8980 {
entry:
  %retval = alloca i32, align 4
  %field.addr = alloca %struct.regmap_field*, align 8
  %id.addr = alloca i32, align 4
  %mask.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %change.addr = alloca i8*, align 8
  %async.addr = alloca i8, align 1
  %force.addr = alloca i8, align 1
  store %struct.regmap_field* %field, %struct.regmap_field** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %field.addr, metadata !8983, metadata !DIExpression()), !dbg !8984
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !8985, metadata !DIExpression()), !dbg !8986
  store i32 %mask, i32* %mask.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mask.addr, metadata !8987, metadata !DIExpression()), !dbg !8988
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !8989, metadata !DIExpression()), !dbg !8990
  store i8* %change, i8** %change.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %change.addr, metadata !8991, metadata !DIExpression()), !dbg !8992
  %frombool = zext i1 %async to i8
  store i8 %frombool, i8* %async.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %async.addr, metadata !8993, metadata !DIExpression()), !dbg !8994
  %frombool1 = zext i1 %force to i8
  store i8 %frombool1, i8* %force.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force.addr, metadata !8995, metadata !DIExpression()), !dbg !8996
  %0 = load i32, i32* %id.addr, align 4, !dbg !8997
  %1 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !8999
  %id_size = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %1, i32 0, i32 4, !dbg !9000
  %2 = load i32, i32* %id_size, align 4, !dbg !9000
  %cmp = icmp uge i32 %0, %2, !dbg !9001
  br i1 %cmp, label %if.then, label %if.end, !dbg !9002

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !9003
  br label %return, !dbg !9003

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %mask.addr, align 4, !dbg !9004
  %4 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !9005
  %shift = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %4, i32 0, i32 2, !dbg !9006
  %5 = load i32, i32* %shift, align 4, !dbg !9006
  %shl = shl i32 %3, %5, !dbg !9007
  %6 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !9008
  %mask2 = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %6, i32 0, i32 1, !dbg !9009
  %7 = load i32, i32* %mask2, align 8, !dbg !9009
  %and = and i32 %shl, %7, !dbg !9010
  store i32 %and, i32* %mask.addr, align 4, !dbg !9011
  %8 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !9012
  %regmap = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %8, i32 0, i32 0, !dbg !9013
  %9 = load %struct.regmap*, %struct.regmap** %regmap, align 8, !dbg !9013
  %10 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !9014
  %reg = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %10, i32 0, i32 3, !dbg !9015
  %11 = load i32, i32* %reg, align 8, !dbg !9015
  %12 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !9016
  %id_offset = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %12, i32 0, i32 5, !dbg !9017
  %13 = load i32, i32* %id_offset, align 8, !dbg !9017
  %14 = load i32, i32* %id.addr, align 4, !dbg !9018
  %mul = mul i32 %13, %14, !dbg !9019
  %add = add i32 %11, %mul, !dbg !9020
  %15 = load i32, i32* %mask.addr, align 4, !dbg !9021
  %16 = load i32, i32* %val.addr, align 4, !dbg !9022
  %17 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !9023
  %shift3 = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %17, i32 0, i32 2, !dbg !9024
  %18 = load i32, i32* %shift3, align 4, !dbg !9024
  %shl4 = shl i32 %16, %18, !dbg !9025
  %19 = load i8*, i8** %change.addr, align 8, !dbg !9026
  %20 = load i8, i8* %async.addr, align 1, !dbg !9027
  %tobool = trunc i8 %20 to i1, !dbg !9027
  %21 = load i8, i8* %force.addr, align 1, !dbg !9028
  %tobool5 = trunc i8 %21 to i1, !dbg !9028
  %call = call i32 @regmap_update_bits_base(%struct.regmap* %9, i32 %add, i32 %15, i32 %shl4, i8* %19, i1 zeroext %tobool, i1 zeroext %tobool5) #11, !dbg !9029
  store i32 %call, i32* %retval, align 4, !dbg !9030
  br label %return, !dbg !9030

return:                                           ; preds = %if.end, %if.then
  %22 = load i32, i32* %retval, align 4, !dbg !9031
  ret i32 %22, !dbg !9031
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_bulk_write(%struct.regmap* %map, i32 %reg, i8* %val, i64 %val_count) #0 !dbg !9032 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_count.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %val_bytes = alloca i64, align 8
  %ival = alloca i32, align 4
  %wval = alloca i8*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9033, metadata !DIExpression()), !dbg !9034
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !9035, metadata !DIExpression()), !dbg !9036
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !9037, metadata !DIExpression()), !dbg !9038
  store i64 %val_count, i64* %val_count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val_count.addr, metadata !9039, metadata !DIExpression()), !dbg !9040
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9041, metadata !DIExpression()), !dbg !9042
  store i32 0, i32* %ret, align 4, !dbg !9042
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9043, metadata !DIExpression()), !dbg !9044
  call void @llvm.dbg.declare(metadata i64* %val_bytes, metadata !9045, metadata !DIExpression()), !dbg !9046
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9047
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 7, !dbg !9048
  %val_bytes1 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !9049
  %1 = load i64, i64* %val_bytes1, align 8, !dbg !9049
  store i64 %1, i64* %val_bytes, align 8, !dbg !9046
  %2 = load i32, i32* %reg.addr, align 4, !dbg !9050
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9050
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 37, !dbg !9050
  %4 = load i32, i32* %reg_stride, align 4, !dbg !9050
  %sub = sub i32 %4, 1, !dbg !9050
  %and = and i32 %2, %sub, !dbg !9050
  %cmp = icmp eq i32 %and, 0, !dbg !9050
  br i1 %cmp, label %if.end, label %if.then, !dbg !9052

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !9053
  br label %return, !dbg !9053

if.end:                                           ; preds = %entry
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9054
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 8, !dbg !9056
  %6 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !9056
  %tobool = icmp ne %struct.regmap_bus* %6, null, !dbg !9054
  br i1 %tobool, label %lor.lhs.false, label %if.then4, !dbg !9057

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9058
  %format2 = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 7, !dbg !9059
  %parse_inplace = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format2, i32 0, i32 8, !dbg !9060
  %8 = load void (i8*)*, void (i8*)** %parse_inplace, align 8, !dbg !9060
  %tobool3 = icmp ne void (i8*)* %8, null, !dbg !9058
  br i1 %tobool3, label %if.else, label %if.then4, !dbg !9061

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9062
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 1, !dbg !9064
  %10 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !9064
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9065
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 3, !dbg !9066
  %12 = load i8*, i8** %lock_arg, align 8, !dbg !9066
  call void %10(i8* %12) #11, !dbg !9062
  store i32 0, i32* %i, align 4, !dbg !9067
  br label %for.cond, !dbg !9069

for.cond:                                         ; preds = %for.inc, %if.then4
  %13 = load i32, i32* %i, align 4, !dbg !9070
  %conv = sext i32 %13 to i64, !dbg !9070
  %14 = load i64, i64* %val_count.addr, align 8, !dbg !9072
  %cmp5 = icmp ult i64 %conv, %14, !dbg !9073
  br i1 %cmp5, label %for.body, label %for.end, !dbg !9074

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %ival, metadata !9075, metadata !DIExpression()), !dbg !9077
  %15 = load i64, i64* %val_bytes, align 8, !dbg !9078
  switch i64 %15, label %sw.default [
    i64 1, label %sw.bb
    i64 2, label %sw.bb9
    i64 4, label %sw.bb14
    i64 8, label %sw.bb18
  ], !dbg !9079

sw.bb:                                            ; preds = %for.body
  %16 = load i8*, i8** %val.addr, align 8, !dbg !9080
  %17 = load i32, i32* %i, align 4, !dbg !9082
  %conv7 = sext i32 %17 to i64, !dbg !9082
  %18 = load i64, i64* %val_bytes, align 8, !dbg !9083
  %mul = mul i64 %conv7, %18, !dbg !9084
  %add.ptr = getelementptr i8, i8* %16, i64 %mul, !dbg !9085
  %19 = load i8, i8* %add.ptr, align 1, !dbg !9086
  %conv8 = zext i8 %19 to i32, !dbg !9086
  store i32 %conv8, i32* %ival, align 4, !dbg !9087
  br label %sw.epilog, !dbg !9088

sw.bb9:                                           ; preds = %for.body
  %20 = load i8*, i8** %val.addr, align 8, !dbg !9089
  %21 = load i32, i32* %i, align 4, !dbg !9090
  %conv10 = sext i32 %21 to i64, !dbg !9090
  %22 = load i64, i64* %val_bytes, align 8, !dbg !9091
  %mul11 = mul i64 %conv10, %22, !dbg !9092
  %add.ptr12 = getelementptr i8, i8* %20, i64 %mul11, !dbg !9093
  %23 = bitcast i8* %add.ptr12 to i16*, !dbg !9094
  %24 = load i16, i16* %23, align 2, !dbg !9095
  %conv13 = zext i16 %24 to i32, !dbg !9095
  store i32 %conv13, i32* %ival, align 4, !dbg !9096
  br label %sw.epilog, !dbg !9097

sw.bb14:                                          ; preds = %for.body
  %25 = load i8*, i8** %val.addr, align 8, !dbg !9098
  %26 = load i32, i32* %i, align 4, !dbg !9099
  %conv15 = sext i32 %26 to i64, !dbg !9099
  %27 = load i64, i64* %val_bytes, align 8, !dbg !9100
  %mul16 = mul i64 %conv15, %27, !dbg !9101
  %add.ptr17 = getelementptr i8, i8* %25, i64 %mul16, !dbg !9102
  %28 = bitcast i8* %add.ptr17 to i32*, !dbg !9103
  %29 = load i32, i32* %28, align 4, !dbg !9104
  store i32 %29, i32* %ival, align 4, !dbg !9105
  br label %sw.epilog, !dbg !9106

sw.bb18:                                          ; preds = %for.body
  %30 = load i8*, i8** %val.addr, align 8, !dbg !9107
  %31 = load i32, i32* %i, align 4, !dbg !9108
  %conv19 = sext i32 %31 to i64, !dbg !9108
  %32 = load i64, i64* %val_bytes, align 8, !dbg !9109
  %mul20 = mul i64 %conv19, %32, !dbg !9110
  %add.ptr21 = getelementptr i8, i8* %30, i64 %mul20, !dbg !9111
  %33 = bitcast i8* %add.ptr21 to i64*, !dbg !9112
  %34 = load i64, i64* %33, align 8, !dbg !9113
  %conv22 = trunc i64 %34 to i32, !dbg !9113
  store i32 %conv22, i32* %ival, align 4, !dbg !9114
  br label %sw.epilog, !dbg !9115

sw.default:                                       ; preds = %for.body
  store i32 -22, i32* %ret, align 4, !dbg !9116
  br label %out, !dbg !9117

sw.epilog:                                        ; preds = %sw.bb18, %sw.bb14, %sw.bb9, %sw.bb
  %35 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9118
  %36 = load i32, i32* %reg.addr, align 4, !dbg !9119
  %37 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9120
  %38 = load i32, i32* %i, align 4, !dbg !9121
  %call = call i32 @regmap_get_offset(%struct.regmap* %37, i32 %38) #11, !dbg !9122
  %add = add i32 %36, %call, !dbg !9123
  %39 = load i32, i32* %ival, align 4, !dbg !9124
  %call23 = call i32 @_regmap_write(%struct.regmap* %35, i32 %add, i32 %39) #11, !dbg !9125
  store i32 %call23, i32* %ret, align 4, !dbg !9126
  %40 = load i32, i32* %ret, align 4, !dbg !9127
  %cmp24 = icmp ne i32 %40, 0, !dbg !9129
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !9130

if.then26:                                        ; preds = %sw.epilog
  br label %out, !dbg !9131

if.end27:                                         ; preds = %sw.epilog
  br label %for.inc, !dbg !9132

for.inc:                                          ; preds = %if.end27
  %41 = load i32, i32* %i, align 4, !dbg !9133
  %inc = add i32 %41, 1, !dbg !9133
  store i32 %inc, i32* %i, align 4, !dbg !9133
  br label %for.cond, !dbg !9134, !llvm.loop !9135

for.end:                                          ; preds = %for.cond
  br label %out, !dbg !9136

out:                                              ; preds = %for.end, %if.then26, %sw.default
  call void @llvm.dbg.label(metadata !9137), !dbg !9138
  %42 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9139
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %42, i32 0, i32 2, !dbg !9140
  %43 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !9140
  %44 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9141
  %lock_arg28 = getelementptr inbounds %struct.regmap, %struct.regmap* %44, i32 0, i32 3, !dbg !9142
  %45 = load i8*, i8** %lock_arg28, align 8, !dbg !9142
  call void %43(i8* %45) #11, !dbg !9139
  br label %if.end50, !dbg !9143

if.else:                                          ; preds = %lor.lhs.false
  call void @llvm.dbg.declare(metadata i8** %wval, metadata !9144, metadata !DIExpression()), !dbg !9146
  %46 = load i8*, i8** %val.addr, align 8, !dbg !9147
  %47 = load i64, i64* %val_count.addr, align 8, !dbg !9148
  %48 = load i64, i64* %val_bytes, align 8, !dbg !9149
  %mul29 = mul i64 %47, %48, !dbg !9150
  %49 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9151
  %alloc_flags = getelementptr inbounds %struct.regmap, %struct.regmap* %49, i32 0, i32 4, !dbg !9152
  %50 = load i32, i32* %alloc_flags, align 8, !dbg !9152
  %call30 = call i8* @kmemdup(i8* %46, i64 %mul29, i32 %50) #11, !dbg !9153
  store i8* %call30, i8** %wval, align 8, !dbg !9154
  %51 = load i8*, i8** %wval, align 8, !dbg !9155
  %tobool31 = icmp ne i8* %51, null, !dbg !9155
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !9157

if.then32:                                        ; preds = %if.else
  store i32 -12, i32* %retval, align 4, !dbg !9158
  br label %return, !dbg !9158

if.end33:                                         ; preds = %if.else
  store i32 0, i32* %i, align 4, !dbg !9159
  br label %for.cond34, !dbg !9161

for.cond34:                                       ; preds = %for.inc43, %if.end33
  %52 = load i32, i32* %i, align 4, !dbg !9162
  %conv35 = sext i32 %52 to i64, !dbg !9162
  %53 = load i64, i64* %val_count.addr, align 8, !dbg !9164
  %54 = load i64, i64* %val_bytes, align 8, !dbg !9165
  %mul36 = mul i64 %53, %54, !dbg !9166
  %cmp37 = icmp ult i64 %conv35, %mul36, !dbg !9167
  br i1 %cmp37, label %for.body39, label %for.end47, !dbg !9168

for.body39:                                       ; preds = %for.cond34
  %55 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9169
  %format40 = getelementptr inbounds %struct.regmap, %struct.regmap* %55, i32 0, i32 7, !dbg !9170
  %parse_inplace41 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format40, i32 0, i32 8, !dbg !9171
  %56 = load void (i8*)*, void (i8*)** %parse_inplace41, align 8, !dbg !9171
  %57 = load i8*, i8** %wval, align 8, !dbg !9172
  %58 = load i32, i32* %i, align 4, !dbg !9173
  %idx.ext = sext i32 %58 to i64, !dbg !9174
  %add.ptr42 = getelementptr i8, i8* %57, i64 %idx.ext, !dbg !9174
  call void %56(i8* %add.ptr42) #11, !dbg !9169
  br label %for.inc43, !dbg !9169

for.inc43:                                        ; preds = %for.body39
  %59 = load i64, i64* %val_bytes, align 8, !dbg !9175
  %60 = load i32, i32* %i, align 4, !dbg !9176
  %conv44 = sext i32 %60 to i64, !dbg !9176
  %add45 = add i64 %conv44, %59, !dbg !9176
  %conv46 = trunc i64 %add45 to i32, !dbg !9176
  store i32 %conv46, i32* %i, align 4, !dbg !9176
  br label %for.cond34, !dbg !9177, !llvm.loop !9178

for.end47:                                        ; preds = %for.cond34
  %61 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9180
  %62 = load i32, i32* %reg.addr, align 4, !dbg !9181
  %63 = load i8*, i8** %wval, align 8, !dbg !9182
  %64 = load i64, i64* %val_bytes, align 8, !dbg !9183
  %65 = load i64, i64* %val_count.addr, align 8, !dbg !9184
  %mul48 = mul i64 %64, %65, !dbg !9185
  %call49 = call i32 @regmap_raw_write(%struct.regmap* %61, i32 %62, i8* %63, i64 %mul48) #11, !dbg !9186
  store i32 %call49, i32* %ret, align 4, !dbg !9187
  %66 = load i8*, i8** %wval, align 8, !dbg !9188
  call void @kfree(i8* %66) #11, !dbg !9189
  br label %if.end50

if.end50:                                         ; preds = %for.end47, %out
  %67 = load i32, i32* %ret, align 4, !dbg !9190
  store i32 %67, i32* %retval, align 4, !dbg !9191
  br label %return, !dbg !9191

return:                                           ; preds = %if.end50, %if.then32, %if.then
  %68 = load i32, i32* %retval, align 4, !dbg !9192
  ret i32 %68, !dbg !9192
}

; Function Attrs: noredzone
declare dso_local i8* @kmemdup(i8*, i64, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_multi_reg_write(%struct.regmap* %map, %struct.reg_sequence* %regs, i32 %num_regs) #0 !dbg !9193 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %regs.addr = alloca %struct.reg_sequence*, align 8
  %num_regs.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9194, metadata !DIExpression()), !dbg !9195
  store %struct.reg_sequence* %regs, %struct.reg_sequence** %regs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.reg_sequence** %regs.addr, metadata !9196, metadata !DIExpression()), !dbg !9197
  store i32 %num_regs, i32* %num_regs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_regs.addr, metadata !9198, metadata !DIExpression()), !dbg !9199
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9200, metadata !DIExpression()), !dbg !9201
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9202
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 1, !dbg !9203
  %1 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !9203
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9204
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 3, !dbg !9205
  %3 = load i8*, i8** %lock_arg, align 8, !dbg !9205
  call void %1(i8* %3) #11, !dbg !9202
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9206
  %5 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9207
  %6 = load i32, i32* %num_regs.addr, align 4, !dbg !9208
  %conv = sext i32 %6 to i64, !dbg !9208
  %call = call i32 @_regmap_multi_reg_write(%struct.regmap* %4, %struct.reg_sequence* %5, i64 %conv) #11, !dbg !9209
  store i32 %call, i32* %ret, align 4, !dbg !9210
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9211
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 2, !dbg !9212
  %8 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !9212
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9213
  %lock_arg1 = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 3, !dbg !9214
  %10 = load i8*, i8** %lock_arg1, align 8, !dbg !9214
  call void %8(i8* %10) #11, !dbg !9211
  %11 = load i32, i32* %ret, align 4, !dbg !9215
  ret i32 %11, !dbg !9216
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_multi_reg_write(%struct.regmap* %map, %struct.reg_sequence* %regs, i64 %num_regs) #0 !dbg !9217 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %regs.addr = alloca %struct.reg_sequence*, align 8
  %num_regs.addr = alloca i64, align 8
  %i = alloca i32, align 4
  %ret = alloca i32, align 4
  %reg52 = alloca i32, align 4
  %val = alloca i32, align 4
  %reg78 = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %reg123 = alloca i32, align 4
  %range = alloca %struct.regmap_range_node*, align 8
  %len = alloca i64, align 8
  %base = alloca %struct.reg_sequence*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9220, metadata !DIExpression()), !dbg !9221
  store %struct.reg_sequence* %regs, %struct.reg_sequence** %regs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.reg_sequence** %regs.addr, metadata !9222, metadata !DIExpression()), !dbg !9223
  store i64 %num_regs, i64* %num_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %num_regs.addr, metadata !9224, metadata !DIExpression()), !dbg !9225
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9226, metadata !DIExpression()), !dbg !9227
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9228, metadata !DIExpression()), !dbg !9229
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9230
  %can_multi_write = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 57, !dbg !9232
  %1 = load i8, i8* %can_multi_write, align 2, !dbg !9232
  %tobool = trunc i8 %1 to i1, !dbg !9232
  br i1 %tobool, label %if.end41, label %if.then, !dbg !9233

if.then:                                          ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !9234
  br label %for.cond, !dbg !9237

for.cond:                                         ; preds = %for.inc, %if.then
  %2 = load i32, i32* %i, align 4, !dbg !9238
  %conv = sext i32 %2 to i64, !dbg !9238
  %3 = load i64, i64* %num_regs.addr, align 8, !dbg !9240
  %cmp = icmp ult i64 %conv, %3, !dbg !9241
  br i1 %cmp, label %for.body, label %for.end, !dbg !9242

for.body:                                         ; preds = %for.cond
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9243
  %5 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9245
  %6 = load i32, i32* %i, align 4, !dbg !9246
  %idxprom = sext i32 %6 to i64, !dbg !9245
  %arrayidx = getelementptr %struct.reg_sequence, %struct.reg_sequence* %5, i64 %idxprom, !dbg !9245
  %reg = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx, i32 0, i32 0, !dbg !9247
  %7 = load i32, i32* %reg, align 4, !dbg !9247
  %8 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9248
  %9 = load i32, i32* %i, align 4, !dbg !9249
  %idxprom2 = sext i32 %9 to i64, !dbg !9248
  %arrayidx3 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %8, i64 %idxprom2, !dbg !9248
  %def = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx3, i32 0, i32 1, !dbg !9250
  %10 = load i32, i32* %def, align 4, !dbg !9250
  %call = call i32 @_regmap_write(%struct.regmap* %4, i32 %7, i32 %10) #11, !dbg !9251
  store i32 %call, i32* %ret, align 4, !dbg !9252
  %11 = load i32, i32* %ret, align 4, !dbg !9253
  %cmp4 = icmp ne i32 %11, 0, !dbg !9255
  br i1 %cmp4, label %if.then6, label %if.end, !dbg !9256

if.then6:                                         ; preds = %for.body
  %12 = load i32, i32* %ret, align 4, !dbg !9257
  store i32 %12, i32* %retval, align 4, !dbg !9258
  br label %return, !dbg !9258

if.end:                                           ; preds = %for.body
  %13 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9259
  %14 = load i32, i32* %i, align 4, !dbg !9261
  %idxprom7 = sext i32 %14 to i64, !dbg !9259
  %arrayidx8 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %13, i64 %idxprom7, !dbg !9259
  %delay_us = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx8, i32 0, i32 2, !dbg !9262
  %15 = load i32, i32* %delay_us, align 4, !dbg !9262
  %tobool9 = icmp ne i32 %15, 0, !dbg !9259
  br i1 %tobool9, label %if.then10, label %if.end40, !dbg !9263

if.then10:                                        ; preds = %if.end
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9264
  %can_sleep = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 63, !dbg !9267
  %17 = load i8, i8* %can_sleep, align 8, !dbg !9267
  %tobool11 = trunc i8 %17 to i1, !dbg !9267
  br i1 %tobool11, label %if.then12, label %if.else, !dbg !9268

if.then12:                                        ; preds = %if.then10
  %18 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9269
  %19 = load i32, i32* %i, align 4, !dbg !9270
  %idxprom13 = sext i32 %19 to i64, !dbg !9269
  %arrayidx14 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %18, i64 %idxprom13, !dbg !9269
  %delay_us15 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx14, i32 0, i32 2, !dbg !9271
  %20 = load i32, i32* %delay_us15, align 4, !dbg !9271
  %conv16 = zext i32 %20 to i64, !dbg !9269
  call void @fsleep(i64 %conv16) #11, !dbg !9272
  br label %if.end39, !dbg !9272

if.else:                                          ; preds = %if.then10
  %21 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9273
  %22 = load i32, i32* %i, align 4, !dbg !9273
  %idxprom17 = sext i32 %22 to i64, !dbg !9273
  %arrayidx18 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %21, i64 %idxprom17, !dbg !9273
  %delay_us19 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx18, i32 0, i32 2, !dbg !9273
  %23 = load i32, i32* %delay_us19, align 4, !dbg !9273
  %24 = call i1 @llvm.is.constant.i32(i32 %23), !dbg !9273
  br i1 %24, label %if.then20, label %if.else33, !dbg !9276

if.then20:                                        ; preds = %if.else
  %25 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9277
  %26 = load i32, i32* %i, align 4, !dbg !9277
  %idxprom21 = sext i32 %26 to i64, !dbg !9277
  %arrayidx22 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %25, i64 %idxprom21, !dbg !9277
  %delay_us23 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx22, i32 0, i32 2, !dbg !9277
  %27 = load i32, i32* %delay_us23, align 4, !dbg !9277
  %div = udiv i32 %27, 20000, !dbg !9277
  %cmp24 = icmp uge i32 %div, 1, !dbg !9277
  br i1 %cmp24, label %if.then26, label %if.else27, !dbg !9280

if.then26:                                        ; preds = %if.then20
  call void @__bad_udelay() #11, !dbg !9277
  br label %if.end32, !dbg !9277

if.else27:                                        ; preds = %if.then20
  %28 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9277
  %29 = load i32, i32* %i, align 4, !dbg !9277
  %idxprom28 = sext i32 %29 to i64, !dbg !9277
  %arrayidx29 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %28, i64 %idxprom28, !dbg !9277
  %delay_us30 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx29, i32 0, i32 2, !dbg !9277
  %30 = load i32, i32* %delay_us30, align 4, !dbg !9277
  %conv31 = zext i32 %30 to i64, !dbg !9277
  %mul = mul i64 %conv31, 4295, !dbg !9277
  call void @__const_udelay(i64 %mul) #11, !dbg !9277
  br label %if.end32

if.end32:                                         ; preds = %if.else27, %if.then26
  br label %if.end38, !dbg !9280

if.else33:                                        ; preds = %if.else
  %31 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9281
  %32 = load i32, i32* %i, align 4, !dbg !9281
  %idxprom34 = sext i32 %32 to i64, !dbg !9281
  %arrayidx35 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %31, i64 %idxprom34, !dbg !9281
  %delay_us36 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx35, i32 0, i32 2, !dbg !9281
  %33 = load i32, i32* %delay_us36, align 4, !dbg !9281
  %conv37 = zext i32 %33 to i64, !dbg !9281
  call void @__udelay(i64 %conv37) #11, !dbg !9281
  br label %if.end38

if.end38:                                         ; preds = %if.else33, %if.end32
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then12
  br label %if.end40, !dbg !9283

if.end40:                                         ; preds = %if.end39, %if.end
  br label %for.inc, !dbg !9284

for.inc:                                          ; preds = %if.end40
  %34 = load i32, i32* %i, align 4, !dbg !9285
  %inc = add i32 %34, 1, !dbg !9285
  store i32 %inc, i32* %i, align 4, !dbg !9285
  br label %for.cond, !dbg !9286, !llvm.loop !9287

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !9289
  br label %return, !dbg !9289

if.end41:                                         ; preds = %entry
  %35 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9290
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %35, i32 0, i32 7, !dbg !9292
  %parse_inplace = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 8, !dbg !9293
  %36 = load void (i8*)*, void (i8*)** %parse_inplace, align 8, !dbg !9293
  %tobool42 = icmp ne void (i8*)* %36, null, !dbg !9290
  br i1 %tobool42, label %if.end44, label %if.then43, !dbg !9294

if.then43:                                        ; preds = %if.end41
  store i32 -22, i32* %retval, align 4, !dbg !9295
  br label %return, !dbg !9295

if.end44:                                         ; preds = %if.end41
  %37 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9296
  %writeable_reg = getelementptr inbounds %struct.regmap, %struct.regmap* %37, i32 0, i32 18, !dbg !9298
  %38 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_reg, align 8, !dbg !9298
  %tobool45 = icmp ne i1 (%struct.device*, i32)* %38, null, !dbg !9296
  br i1 %tobool45, label %if.then46, label %if.end67, !dbg !9299

if.then46:                                        ; preds = %if.end44
  store i32 0, i32* %i, align 4, !dbg !9300
  br label %for.cond47, !dbg !9302

for.cond47:                                       ; preds = %for.inc64, %if.then46
  %39 = load i32, i32* %i, align 4, !dbg !9303
  %conv48 = sext i32 %39 to i64, !dbg !9303
  %40 = load i64, i64* %num_regs.addr, align 8, !dbg !9305
  %cmp49 = icmp ult i64 %conv48, %40, !dbg !9306
  br i1 %cmp49, label %for.body51, label %for.end66, !dbg !9307

for.body51:                                       ; preds = %for.cond47
  call void @llvm.dbg.declare(metadata i32* %reg52, metadata !9308, metadata !DIExpression()), !dbg !9310
  %41 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9311
  %42 = load i32, i32* %i, align 4, !dbg !9312
  %idxprom53 = sext i32 %42 to i64, !dbg !9311
  %arrayidx54 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %41, i64 %idxprom53, !dbg !9311
  %reg55 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx54, i32 0, i32 0, !dbg !9313
  %43 = load i32, i32* %reg55, align 4, !dbg !9313
  store i32 %43, i32* %reg52, align 4, !dbg !9310
  %44 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9314
  %writeable_reg56 = getelementptr inbounds %struct.regmap, %struct.regmap* %44, i32 0, i32 18, !dbg !9316
  %45 = load i1 (%struct.device*, i32)*, i1 (%struct.device*, i32)** %writeable_reg56, align 8, !dbg !9316
  %46 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9317
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %46, i32 0, i32 5, !dbg !9318
  %47 = load %struct.device*, %struct.device** %dev, align 8, !dbg !9318
  %48 = load i32, i32* %reg52, align 4, !dbg !9319
  %call57 = call zeroext i1 %45(%struct.device* %47, i32 %48) #11, !dbg !9314
  br i1 %call57, label %if.end59, label %if.then58, !dbg !9320

if.then58:                                        ; preds = %for.body51
  store i32 -22, i32* %retval, align 4, !dbg !9321
  br label %return, !dbg !9321

if.end59:                                         ; preds = %for.body51
  %49 = load i32, i32* %reg52, align 4, !dbg !9322
  %50 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9322
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %50, i32 0, i32 37, !dbg !9322
  %51 = load i32, i32* %reg_stride, align 4, !dbg !9322
  %sub = sub i32 %51, 1, !dbg !9322
  %and = and i32 %49, %sub, !dbg !9322
  %cmp60 = icmp eq i32 %and, 0, !dbg !9322
  br i1 %cmp60, label %if.end63, label %if.then62, !dbg !9324

if.then62:                                        ; preds = %if.end59
  store i32 -22, i32* %retval, align 4, !dbg !9325
  br label %return, !dbg !9325

if.end63:                                         ; preds = %if.end59
  br label %for.inc64, !dbg !9326

for.inc64:                                        ; preds = %if.end63
  %52 = load i32, i32* %i, align 4, !dbg !9327
  %inc65 = add i32 %52, 1, !dbg !9327
  store i32 %inc65, i32* %i, align 4, !dbg !9327
  br label %for.cond47, !dbg !9328, !llvm.loop !9329

for.end66:                                        ; preds = %for.cond47
  br label %if.end67, !dbg !9330

if.end67:                                         ; preds = %for.end66, %if.end44
  %53 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9331
  %cache_bypass = getelementptr inbounds %struct.regmap, %struct.regmap* %53, i32 0, i32 46, !dbg !9333
  %54 = load i8, i8* %cache_bypass, align 1, !dbg !9333
  %tobool68 = trunc i8 %54 to i1, !dbg !9333
  br i1 %tobool68, label %if.end93, label %if.then69, !dbg !9334

if.then69:                                        ; preds = %if.end67
  store i32 0, i32* %i, align 4, !dbg !9335
  br label %for.cond70, !dbg !9338

for.cond70:                                       ; preds = %for.inc87, %if.then69
  %55 = load i32, i32* %i, align 4, !dbg !9339
  %conv71 = sext i32 %55 to i64, !dbg !9339
  %56 = load i64, i64* %num_regs.addr, align 8, !dbg !9341
  %cmp72 = icmp ult i64 %conv71, %56, !dbg !9342
  br i1 %cmp72, label %for.body74, label %for.end89, !dbg !9343

for.body74:                                       ; preds = %for.cond70
  call void @llvm.dbg.declare(metadata i32* %val, metadata !9344, metadata !DIExpression()), !dbg !9346
  %57 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9347
  %58 = load i32, i32* %i, align 4, !dbg !9348
  %idxprom75 = sext i32 %58 to i64, !dbg !9347
  %arrayidx76 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %57, i64 %idxprom75, !dbg !9347
  %def77 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx76, i32 0, i32 1, !dbg !9349
  %59 = load i32, i32* %def77, align 4, !dbg !9349
  store i32 %59, i32* %val, align 4, !dbg !9346
  call void @llvm.dbg.declare(metadata i32* %reg78, metadata !9350, metadata !DIExpression()), !dbg !9351
  %60 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9352
  %61 = load i32, i32* %i, align 4, !dbg !9353
  %idxprom79 = sext i32 %61 to i64, !dbg !9352
  %arrayidx80 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %60, i64 %idxprom79, !dbg !9352
  %reg81 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx80, i32 0, i32 0, !dbg !9354
  %62 = load i32, i32* %reg81, align 4, !dbg !9354
  store i32 %62, i32* %reg78, align 4, !dbg !9351
  %63 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9355
  %64 = load i32, i32* %reg78, align 4, !dbg !9356
  %65 = load i32, i32* %val, align 4, !dbg !9357
  %call82 = call i32 @regcache_write(%struct.regmap* %63, i32 %64, i32 %65) #11, !dbg !9358
  store i32 %call82, i32* %ret, align 4, !dbg !9359
  %66 = load i32, i32* %ret, align 4, !dbg !9360
  %tobool83 = icmp ne i32 %66, 0, !dbg !9360
  br i1 %tobool83, label %if.then84, label %if.end86, !dbg !9362

if.then84:                                        ; preds = %for.body74
  %67 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9363
  %dev85 = getelementptr inbounds %struct.regmap, %struct.regmap* %67, i32 0, i32 5, !dbg !9363
  %68 = load %struct.device*, %struct.device** %dev85, align 8, !dbg !9363
  %69 = load i32, i32* %reg78, align 4, !dbg !9363
  %70 = load i32, i32* %ret, align 4, !dbg !9363
  call void (%struct.device*, i8*, ...) @_dev_err(%struct.device* %68, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.17, i64 0, i64 0), i32 %69, i32 %70) #13, !dbg !9363
  %71 = load i32, i32* %ret, align 4, !dbg !9365
  store i32 %71, i32* %retval, align 4, !dbg !9366
  br label %return, !dbg !9366

if.end86:                                         ; preds = %for.body74
  br label %for.inc87, !dbg !9367

for.inc87:                                        ; preds = %if.end86
  %72 = load i32, i32* %i, align 4, !dbg !9368
  %inc88 = add i32 %72, 1, !dbg !9368
  store i32 %inc88, i32* %i, align 4, !dbg !9368
  br label %for.cond70, !dbg !9369, !llvm.loop !9370

for.end89:                                        ; preds = %for.cond70
  %73 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9372
  %cache_only = getelementptr inbounds %struct.regmap, %struct.regmap* %73, i32 0, i32 45, !dbg !9374
  %74 = load i8, i8* %cache_only, align 4, !dbg !9374
  %tobool90 = trunc i8 %74 to i1, !dbg !9374
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !9375

if.then91:                                        ; preds = %for.end89
  %75 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9376
  %cache_dirty = getelementptr inbounds %struct.regmap, %struct.regmap* %75, i32 0, i32 51, !dbg !9378
  store i8 1, i8* %cache_dirty, align 8, !dbg !9379
  store i32 0, i32* %retval, align 4, !dbg !9380
  br label %return, !dbg !9380

if.end92:                                         ; preds = %for.end89
  br label %if.end93, !dbg !9381

if.end93:                                         ; preds = %if.end92, %if.end67
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !9382, metadata !DIExpression()), !dbg !9384
  %76 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9384
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %76, i32 0, i32 8, !dbg !9384
  %77 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !9384
  %tobool94 = icmp ne %struct.regmap_bus* %77, null, !dbg !9384
  %lnot = xor i1 %tobool94, true, !dbg !9384
  %lnot95 = xor i1 %lnot, true, !dbg !9384
  %lnot96 = xor i1 %lnot95, true, !dbg !9384
  %lnot.ext = zext i1 %lnot96 to i32, !dbg !9384
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !9384
  %78 = load i32, i32* %__ret_warn_on, align 4, !dbg !9385
  %tobool97 = icmp ne i32 %78, 0, !dbg !9385
  %lnot98 = xor i1 %tobool97, true, !dbg !9385
  %lnot100 = xor i1 %lnot98, true, !dbg !9385
  %lnot.ext101 = zext i1 %lnot100 to i32, !dbg !9385
  %conv102 = sext i32 %lnot.ext101 to i64, !dbg !9385
  %tobool103 = icmp ne i64 %conv102, 0, !dbg !9385
  br i1 %tobool103, label %if.then104, label %if.end111, !dbg !9384

if.then104:                                       ; preds = %if.end93
  br label %do.body, !dbg !9385

do.body:                                          ; preds = %if.then104
  br label %do.body105, !dbg !9387

do.body105:                                       ; preds = %do.body
  br label %do.end, !dbg !9389

do.end:                                           ; preds = %do.body105
  br label %do.body106, !dbg !9387

do.body106:                                       ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 2466, i32 2305, i64 12) #10, !dbg !9391, !srcloc !9393
  br label %do.end107, !dbg !9391

do.end107:                                        ; preds = %do.body106
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 211) #10, !dbg !9394, !srcloc !9396
  br label %do.body108, !dbg !9387

do.body108:                                       ; preds = %do.end107
  br label %do.end109, !dbg !9397

do.end109:                                        ; preds = %do.body108
  br label %do.end110, !dbg !9387

do.end110:                                        ; preds = %do.end109
  br label %if.end111, !dbg !9387

if.end111:                                        ; preds = %do.end110, %if.end93
  %79 = load i32, i32* %__ret_warn_on, align 4, !dbg !9384
  %tobool112 = icmp ne i32 %79, 0, !dbg !9384
  %lnot113 = xor i1 %tobool112, true, !dbg !9384
  %lnot115 = xor i1 %lnot113, true, !dbg !9384
  %lnot.ext116 = zext i1 %lnot115 to i32, !dbg !9384
  %conv117 = sext i32 %lnot.ext116 to i64, !dbg !9384
  store i64 %conv117, i64* %tmp, align 8, !dbg !9385
  %80 = load i64, i64* %tmp, align 8, !dbg !9384
  store i32 0, i32* %i, align 4, !dbg !9399
  br label %for.cond118, !dbg !9401

for.cond118:                                      ; preds = %for.inc141, %if.end111
  %81 = load i32, i32* %i, align 4, !dbg !9402
  %conv119 = sext i32 %81 to i64, !dbg !9402
  %82 = load i64, i64* %num_regs.addr, align 8, !dbg !9404
  %cmp120 = icmp ult i64 %conv119, %82, !dbg !9405
  br i1 %cmp120, label %for.body122, label %for.end143, !dbg !9406

for.body122:                                      ; preds = %for.cond118
  call void @llvm.dbg.declare(metadata i32* %reg123, metadata !9407, metadata !DIExpression()), !dbg !9409
  %83 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9410
  %84 = load i32, i32* %i, align 4, !dbg !9411
  %idxprom124 = sext i32 %84 to i64, !dbg !9410
  %arrayidx125 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %83, i64 %idxprom124, !dbg !9410
  %reg126 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx125, i32 0, i32 0, !dbg !9412
  %85 = load i32, i32* %reg126, align 4, !dbg !9412
  store i32 %85, i32* %reg123, align 4, !dbg !9409
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %range, metadata !9413, metadata !DIExpression()), !dbg !9414
  %86 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9415
  %87 = load i32, i32* %reg123, align 4, !dbg !9416
  %call127 = call %struct.regmap_range_node* @_regmap_range_lookup(%struct.regmap* %86, i32 %87) #11, !dbg !9417
  store %struct.regmap_range_node* %call127, %struct.regmap_range_node** %range, align 8, !dbg !9418
  %88 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !9419
  %tobool128 = icmp ne %struct.regmap_range_node* %88, null, !dbg !9419
  br i1 %tobool128, label %if.then133, label %lor.lhs.false, !dbg !9421

lor.lhs.false:                                    ; preds = %for.body122
  %89 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9422
  %90 = load i32, i32* %i, align 4, !dbg !9423
  %idxprom129 = sext i32 %90 to i64, !dbg !9422
  %arrayidx130 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %89, i64 %idxprom129, !dbg !9422
  %delay_us131 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx130, i32 0, i32 2, !dbg !9424
  %91 = load i32, i32* %delay_us131, align 4, !dbg !9424
  %tobool132 = icmp ne i32 %91, 0, !dbg !9422
  br i1 %tobool132, label %if.then133, label %if.end140, !dbg !9425

if.then133:                                       ; preds = %lor.lhs.false, %for.body122
  call void @llvm.dbg.declare(metadata i64* %len, metadata !9426, metadata !DIExpression()), !dbg !9428
  %92 = load i64, i64* %num_regs.addr, align 8, !dbg !9429
  %mul134 = mul i64 12, %92, !dbg !9430
  store i64 %mul134, i64* %len, align 8, !dbg !9428
  call void @llvm.dbg.declare(metadata %struct.reg_sequence** %base, metadata !9431, metadata !DIExpression()), !dbg !9432
  %93 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9433
  %94 = bitcast %struct.reg_sequence* %93 to i8*, !dbg !9433
  %95 = load i64, i64* %len, align 8, !dbg !9434
  %call135 = call i8* @kmemdup(i8* %94, i64 %95, i32 3264) #11, !dbg !9435
  %96 = bitcast i8* %call135 to %struct.reg_sequence*, !dbg !9435
  store %struct.reg_sequence* %96, %struct.reg_sequence** %base, align 8, !dbg !9432
  %97 = load %struct.reg_sequence*, %struct.reg_sequence** %base, align 8, !dbg !9436
  %tobool136 = icmp ne %struct.reg_sequence* %97, null, !dbg !9436
  br i1 %tobool136, label %if.end138, label %if.then137, !dbg !9438

if.then137:                                       ; preds = %if.then133
  store i32 -12, i32* %retval, align 4, !dbg !9439
  br label %return, !dbg !9439

if.end138:                                        ; preds = %if.then133
  %98 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9440
  %99 = load %struct.reg_sequence*, %struct.reg_sequence** %base, align 8, !dbg !9441
  %100 = load i64, i64* %num_regs.addr, align 8, !dbg !9442
  %call139 = call i32 @_regmap_range_multi_paged_reg_write(%struct.regmap* %98, %struct.reg_sequence* %99, i64 %100) #11, !dbg !9443
  store i32 %call139, i32* %ret, align 4, !dbg !9444
  %101 = load %struct.reg_sequence*, %struct.reg_sequence** %base, align 8, !dbg !9445
  %102 = bitcast %struct.reg_sequence* %101 to i8*, !dbg !9445
  call void @kfree(i8* %102) #11, !dbg !9446
  %103 = load i32, i32* %ret, align 4, !dbg !9447
  store i32 %103, i32* %retval, align 4, !dbg !9448
  br label %return, !dbg !9448

if.end140:                                        ; preds = %lor.lhs.false
  br label %for.inc141, !dbg !9449

for.inc141:                                       ; preds = %if.end140
  %104 = load i32, i32* %i, align 4, !dbg !9450
  %inc142 = add i32 %104, 1, !dbg !9450
  store i32 %inc142, i32* %i, align 4, !dbg !9450
  br label %for.cond118, !dbg !9451, !llvm.loop !9452

for.end143:                                       ; preds = %for.cond118
  %105 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9454
  %106 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9455
  %107 = load i64, i64* %num_regs.addr, align 8, !dbg !9456
  %call144 = call i32 @_regmap_raw_multi_reg_write(%struct.regmap* %105, %struct.reg_sequence* %106, i64 %107) #11, !dbg !9457
  store i32 %call144, i32* %retval, align 4, !dbg !9458
  br label %return, !dbg !9458

return:                                           ; preds = %for.end143, %if.end138, %if.then137, %if.then91, %if.then84, %if.then62, %if.then58, %if.then43, %for.end, %if.then6
  %108 = load i32, i32* %retval, align 4, !dbg !9459
  ret i32 %108, !dbg !9459
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_multi_reg_write_bypassed(%struct.regmap* %map, %struct.reg_sequence* %regs, i32 %num_regs) #0 !dbg !9460 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %regs.addr = alloca %struct.reg_sequence*, align 8
  %num_regs.addr = alloca i32, align 4
  %ret = alloca i32, align 4
  %bypass = alloca i8, align 1
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9461, metadata !DIExpression()), !dbg !9462
  store %struct.reg_sequence* %regs, %struct.reg_sequence** %regs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.reg_sequence** %regs.addr, metadata !9463, metadata !DIExpression()), !dbg !9464
  store i32 %num_regs, i32* %num_regs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_regs.addr, metadata !9465, metadata !DIExpression()), !dbg !9466
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9467, metadata !DIExpression()), !dbg !9468
  call void @llvm.dbg.declare(metadata i8* %bypass, metadata !9469, metadata !DIExpression()), !dbg !9470
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9471
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 1, !dbg !9472
  %1 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !9472
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9473
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 3, !dbg !9474
  %3 = load i8*, i8** %lock_arg, align 8, !dbg !9474
  call void %1(i8* %3) #11, !dbg !9471
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9475
  %cache_bypass = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 46, !dbg !9476
  %5 = load i8, i8* %cache_bypass, align 1, !dbg !9476
  %tobool = trunc i8 %5 to i1, !dbg !9476
  %frombool = zext i1 %tobool to i8, !dbg !9477
  store i8 %frombool, i8* %bypass, align 1, !dbg !9477
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9478
  %cache_bypass1 = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 46, !dbg !9479
  store i8 1, i8* %cache_bypass1, align 1, !dbg !9480
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9481
  %8 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !9482
  %9 = load i32, i32* %num_regs.addr, align 4, !dbg !9483
  %conv = sext i32 %9 to i64, !dbg !9483
  %call = call i32 @_regmap_multi_reg_write(%struct.regmap* %7, %struct.reg_sequence* %8, i64 %conv) #11, !dbg !9484
  store i32 %call, i32* %ret, align 4, !dbg !9485
  %10 = load i8, i8* %bypass, align 1, !dbg !9486
  %tobool2 = trunc i8 %10 to i1, !dbg !9486
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9487
  %cache_bypass3 = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 46, !dbg !9488
  %frombool4 = zext i1 %tobool2 to i8, !dbg !9489
  store i8 %frombool4, i8* %cache_bypass3, align 1, !dbg !9489
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9490
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 2, !dbg !9491
  %13 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !9491
  %14 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9492
  %lock_arg5 = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 3, !dbg !9493
  %15 = load i8*, i8** %lock_arg5, align 8, !dbg !9493
  call void %13(i8* %15) #11, !dbg !9490
  %16 = load i32, i32* %ret, align 4, !dbg !9494
  ret i32 %16, !dbg !9495
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_raw_write_async(%struct.regmap* %map, i32 %reg, i8* %val, i64 %val_len) #0 !dbg !9496 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_len.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9497, metadata !DIExpression()), !dbg !9498
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !9499, metadata !DIExpression()), !dbg !9500
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !9501, metadata !DIExpression()), !dbg !9502
  store i64 %val_len, i64* %val_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val_len.addr, metadata !9503, metadata !DIExpression()), !dbg !9504
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9505, metadata !DIExpression()), !dbg !9506
  %0 = load i64, i64* %val_len.addr, align 8, !dbg !9507
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9509
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %1, i32 0, i32 7, !dbg !9510
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !9511
  %2 = load i64, i64* %val_bytes, align 8, !dbg !9511
  %rem = urem i64 %0, %2, !dbg !9512
  %tobool = icmp ne i64 %rem, 0, !dbg !9512
  br i1 %tobool, label %if.then, label %if.end, !dbg !9513

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !9514
  br label %return, !dbg !9514

if.end:                                           ; preds = %entry
  %3 = load i32, i32* %reg.addr, align 4, !dbg !9515
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9515
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 37, !dbg !9515
  %5 = load i32, i32* %reg_stride, align 4, !dbg !9515
  %sub = sub i32 %5, 1, !dbg !9515
  %and = and i32 %3, %sub, !dbg !9515
  %cmp = icmp eq i32 %and, 0, !dbg !9515
  br i1 %cmp, label %if.end2, label %if.then1, !dbg !9517

if.then1:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !9518
  br label %return, !dbg !9518

if.end2:                                          ; preds = %if.end
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9519
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 1, !dbg !9520
  %7 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !9520
  %8 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9521
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %8, i32 0, i32 3, !dbg !9522
  %9 = load i8*, i8** %lock_arg, align 8, !dbg !9522
  call void %7(i8* %9) #11, !dbg !9519
  %10 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9523
  %async = getelementptr inbounds %struct.regmap, %struct.regmap* %10, i32 0, i32 11, !dbg !9524
  store i8 1, i8* %async, align 8, !dbg !9525
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9526
  %12 = load i32, i32* %reg.addr, align 4, !dbg !9527
  %13 = load i8*, i8** %val.addr, align 8, !dbg !9528
  %14 = load i64, i64* %val_len.addr, align 8, !dbg !9529
  %call = call i32 @_regmap_raw_write(%struct.regmap* %11, i32 %12, i8* %13, i64 %14, i1 zeroext false) #11, !dbg !9530
  store i32 %call, i32* %ret, align 4, !dbg !9531
  %15 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9532
  %async3 = getelementptr inbounds %struct.regmap, %struct.regmap* %15, i32 0, i32 11, !dbg !9533
  store i8 0, i8* %async3, align 8, !dbg !9534
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9535
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 2, !dbg !9536
  %17 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !9536
  %18 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9537
  %lock_arg4 = getelementptr inbounds %struct.regmap, %struct.regmap* %18, i32 0, i32 3, !dbg !9538
  %19 = load i8*, i8** %lock_arg4, align 8, !dbg !9538
  call void %17(i8* %19) #11, !dbg !9535
  %20 = load i32, i32* %ret, align 4, !dbg !9539
  store i32 %20, i32* %retval, align 4, !dbg !9540
  br label %return, !dbg !9540

return:                                           ; preds = %if.end2, %if.then1, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !9541
  ret i32 %21, !dbg !9541
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_read(%struct.regmap* %map, i32 %reg, i32* %val) #0 !dbg !9542 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32*, align 8
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9543, metadata !DIExpression()), !dbg !9544
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !9545, metadata !DIExpression()), !dbg !9546
  store i32* %val, i32** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %val.addr, metadata !9547, metadata !DIExpression()), !dbg !9548
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9549, metadata !DIExpression()), !dbg !9550
  %0 = load i32, i32* %reg.addr, align 4, !dbg !9551
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9551
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %1, i32 0, i32 37, !dbg !9551
  %2 = load i32, i32* %reg_stride, align 4, !dbg !9551
  %sub = sub i32 %2, 1, !dbg !9551
  %and = and i32 %0, %sub, !dbg !9551
  %cmp = icmp eq i32 %and, 0, !dbg !9551
  br i1 %cmp, label %if.end, label %if.then, !dbg !9553

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !9554
  br label %return, !dbg !9554

if.end:                                           ; preds = %entry
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9555
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 1, !dbg !9556
  %4 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !9556
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9557
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 3, !dbg !9558
  %6 = load i8*, i8** %lock_arg, align 8, !dbg !9558
  call void %4(i8* %6) #11, !dbg !9555
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9559
  %8 = load i32, i32* %reg.addr, align 4, !dbg !9560
  %9 = load i32*, i32** %val.addr, align 8, !dbg !9561
  %call = call i32 @_regmap_read(%struct.regmap* %7, i32 %8, i32* %9) #11, !dbg !9562
  store i32 %call, i32* %ret, align 4, !dbg !9563
  %10 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9564
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %10, i32 0, i32 2, !dbg !9565
  %11 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !9565
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9566
  %lock_arg1 = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 3, !dbg !9567
  %13 = load i8*, i8** %lock_arg1, align 8, !dbg !9567
  call void %11(i8* %13) #11, !dbg !9564
  %14 = load i32, i32* %ret, align 4, !dbg !9568
  store i32 %14, i32* %retval, align 4, !dbg !9569
  br label %return, !dbg !9569

return:                                           ; preds = %if.end, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !9570
  ret i32 %15, !dbg !9570
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_read(%struct.regmap* %map, i32 %reg, i32* %val) #0 !dbg !9571 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32*, align 8
  %ret = alloca i32, align 4
  %context = alloca i8*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9572, metadata !DIExpression()), !dbg !9573
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !9574, metadata !DIExpression()), !dbg !9575
  store i32* %val, i32** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %val.addr, metadata !9576, metadata !DIExpression()), !dbg !9577
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9578, metadata !DIExpression()), !dbg !9579
  call void @llvm.dbg.declare(metadata i8** %context, metadata !9580, metadata !DIExpression()), !dbg !9581
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9582
  %call = call i8* @_regmap_map_get_context(%struct.regmap* %0) #11, !dbg !9583
  store i8* %call, i8** %context, align 8, !dbg !9581
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9584
  %cache_bypass = getelementptr inbounds %struct.regmap, %struct.regmap* %1, i32 0, i32 46, !dbg !9586
  %2 = load i8, i8* %cache_bypass, align 1, !dbg !9586
  %tobool = trunc i8 %2 to i1, !dbg !9586
  br i1 %tobool, label %if.end3, label %if.then, !dbg !9587

if.then:                                          ; preds = %entry
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9588
  %4 = load i32, i32* %reg.addr, align 4, !dbg !9590
  %5 = load i32*, i32** %val.addr, align 8, !dbg !9591
  %call1 = call i32 @regcache_read(%struct.regmap* %3, i32 %4, i32* %5) #11, !dbg !9592
  store i32 %call1, i32* %ret, align 4, !dbg !9593
  %6 = load i32, i32* %ret, align 4, !dbg !9594
  %cmp = icmp eq i32 %6, 0, !dbg !9596
  br i1 %cmp, label %if.then2, label %if.end, !dbg !9597

if.then2:                                         ; preds = %if.then
  store i32 0, i32* %retval, align 4, !dbg !9598
  br label %return, !dbg !9598

if.end:                                           ; preds = %if.then
  br label %if.end3, !dbg !9599

if.end3:                                          ; preds = %if.end, %entry
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9600
  %cache_only = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 45, !dbg !9602
  %8 = load i8, i8* %cache_only, align 4, !dbg !9602
  %tobool4 = trunc i8 %8 to i1, !dbg !9602
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !9603

if.then5:                                         ; preds = %if.end3
  store i32 -16, i32* %retval, align 4, !dbg !9604
  br label %return, !dbg !9604

if.end6:                                          ; preds = %if.end3
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9605
  %10 = load i32, i32* %reg.addr, align 4, !dbg !9607
  %call7 = call zeroext i1 @regmap_readable(%struct.regmap* %9, i32 %10) #11, !dbg !9608
  br i1 %call7, label %if.end9, label %if.then8, !dbg !9609

if.then8:                                         ; preds = %if.end6
  store i32 -5, i32* %retval, align 4, !dbg !9610
  br label %return, !dbg !9610

if.end9:                                          ; preds = %if.end6
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9611
  %reg_read = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 30, !dbg !9612
  %12 = load i32 (i8*, i32, i32*)*, i32 (i8*, i32, i32*)** %reg_read, align 8, !dbg !9612
  %13 = load i8*, i8** %context, align 8, !dbg !9613
  %14 = load i32, i32* %reg.addr, align 4, !dbg !9614
  %15 = load i32*, i32** %val.addr, align 8, !dbg !9615
  %call10 = call i32 %12(i8* %13, i32 %14, i32* %15) #11, !dbg !9611
  store i32 %call10, i32* %ret, align 4, !dbg !9616
  %16 = load i32, i32* %ret, align 4, !dbg !9617
  %cmp11 = icmp eq i32 %16, 0, !dbg !9619
  br i1 %cmp11, label %if.then12, label %if.end21, !dbg !9620

if.then12:                                        ; preds = %if.end9
  %17 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9621
  %call13 = call zeroext i1 @regmap_should_log(%struct.regmap* %17) #11, !dbg !9624
  br i1 %call13, label %if.then14, label %if.end15, !dbg !9625

if.then14:                                        ; preds = %if.then12
  %18 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9626
  %dev = getelementptr inbounds %struct.regmap, %struct.regmap* %18, i32 0, i32 5, !dbg !9626
  %19 = load %struct.device*, %struct.device** %dev, align 8, !dbg !9626
  %20 = load i32, i32* %reg.addr, align 4, !dbg !9626
  %21 = load i32*, i32** %val.addr, align 8, !dbg !9626
  %22 = load i32, i32* %21, align 4, !dbg !9626
  call void (%struct.device*, i8*, ...) @_dev_info(%struct.device* %19, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19, i64 0, i64 0), i32 %20, i32 %22) #13, !dbg !9626
  br label %if.end15, !dbg !9626

if.end15:                                         ; preds = %if.then14, %if.then12
  %23 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9627
  %24 = load i32, i32* %reg.addr, align 4, !dbg !9628
  %25 = load i32*, i32** %val.addr, align 8, !dbg !9629
  %26 = load i32, i32* %25, align 4, !dbg !9630
  call void @trace_regmap_reg_read(%struct.regmap* %23, i32 %24, i32 %26) #11, !dbg !9631
  %27 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9632
  %cache_bypass16 = getelementptr inbounds %struct.regmap, %struct.regmap* %27, i32 0, i32 46, !dbg !9634
  %28 = load i8, i8* %cache_bypass16, align 1, !dbg !9634
  %tobool17 = trunc i8 %28 to i1, !dbg !9634
  br i1 %tobool17, label %if.end20, label %if.then18, !dbg !9635

if.then18:                                        ; preds = %if.end15
  %29 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9636
  %30 = load i32, i32* %reg.addr, align 4, !dbg !9637
  %31 = load i32*, i32** %val.addr, align 8, !dbg !9638
  %32 = load i32, i32* %31, align 4, !dbg !9639
  %call19 = call i32 @regcache_write(%struct.regmap* %29, i32 %30, i32 %32) #11, !dbg !9640
  br label %if.end20, !dbg !9640

if.end20:                                         ; preds = %if.then18, %if.end15
  br label %if.end21, !dbg !9641

if.end21:                                         ; preds = %if.end20, %if.end9
  %33 = load i32, i32* %ret, align 4, !dbg !9642
  store i32 %33, i32* %retval, align 4, !dbg !9643
  br label %return, !dbg !9643

return:                                           ; preds = %if.end21, %if.then8, %if.then5, %if.then2
  %34 = load i32, i32* %retval, align 4, !dbg !9644
  ret i32 %34, !dbg !9644
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_raw_read(%struct.regmap* %map, i32 %reg, i8* %val, i64 %val_len) #0 !dbg !9645 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_len.addr = alloca i64, align 8
  %val_bytes = alloca i64, align 8
  %val_count = alloca i64, align 8
  %v = alloca i32, align 4
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %chunk_count = alloca i64, align 8
  %chunk_bytes = alloca i64, align 8
  %chunk_regs = alloca i64, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9648, metadata !DIExpression()), !dbg !9649
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !9650, metadata !DIExpression()), !dbg !9651
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !9652, metadata !DIExpression()), !dbg !9653
  store i64 %val_len, i64* %val_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val_len.addr, metadata !9654, metadata !DIExpression()), !dbg !9655
  call void @llvm.dbg.declare(metadata i64* %val_bytes, metadata !9656, metadata !DIExpression()), !dbg !9657
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9658
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 7, !dbg !9659
  %val_bytes1 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !9660
  %1 = load i64, i64* %val_bytes1, align 8, !dbg !9660
  store i64 %1, i64* %val_bytes, align 8, !dbg !9657
  call void @llvm.dbg.declare(metadata i64* %val_count, metadata !9661, metadata !DIExpression()), !dbg !9662
  %2 = load i64, i64* %val_len.addr, align 8, !dbg !9663
  %3 = load i64, i64* %val_bytes, align 8, !dbg !9664
  %div = udiv i64 %2, %3, !dbg !9665
  store i64 %div, i64* %val_count, align 8, !dbg !9662
  call void @llvm.dbg.declare(metadata i32* %v, metadata !9666, metadata !DIExpression()), !dbg !9667
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9668, metadata !DIExpression()), !dbg !9669
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9670, metadata !DIExpression()), !dbg !9671
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9672
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 8, !dbg !9674
  %5 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !9674
  %tobool = icmp ne %struct.regmap_bus* %5, null, !dbg !9672
  br i1 %tobool, label %if.end, label %if.then, !dbg !9675

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !9676
  br label %return, !dbg !9676

if.end:                                           ; preds = %entry
  %6 = load i64, i64* %val_len.addr, align 8, !dbg !9677
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9679
  %format2 = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 7, !dbg !9680
  %val_bytes3 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format2, i32 0, i32 3, !dbg !9681
  %8 = load i64, i64* %val_bytes3, align 8, !dbg !9681
  %rem = urem i64 %6, %8, !dbg !9682
  %tobool4 = icmp ne i64 %rem, 0, !dbg !9682
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !9683

if.then5:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !9684
  br label %return, !dbg !9684

if.end6:                                          ; preds = %if.end
  %9 = load i32, i32* %reg.addr, align 4, !dbg !9685
  %10 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9685
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %10, i32 0, i32 37, !dbg !9685
  %11 = load i32, i32* %reg_stride, align 4, !dbg !9685
  %sub = sub i32 %11, 1, !dbg !9685
  %and = and i32 %9, %sub, !dbg !9685
  %cmp = icmp eq i32 %and, 0, !dbg !9685
  br i1 %cmp, label %if.end8, label %if.then7, !dbg !9687

if.then7:                                         ; preds = %if.end6
  store i32 -22, i32* %retval, align 4, !dbg !9688
  br label %return, !dbg !9688

if.end8:                                          ; preds = %if.end6
  %12 = load i64, i64* %val_count, align 8, !dbg !9689
  %cmp9 = icmp eq i64 %12, 0, !dbg !9691
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !9692

if.then10:                                        ; preds = %if.end8
  store i32 -22, i32* %retval, align 4, !dbg !9693
  br label %return, !dbg !9693

if.end11:                                         ; preds = %if.end8
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9694
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %13, i32 0, i32 1, !dbg !9695
  %14 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !9695
  %15 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9696
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %15, i32 0, i32 3, !dbg !9697
  %16 = load i8*, i8** %lock_arg, align 8, !dbg !9697
  call void %14(i8* %16) #11, !dbg !9694
  %17 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9698
  %18 = load i32, i32* %reg.addr, align 4, !dbg !9700
  %19 = load i64, i64* %val_count, align 8, !dbg !9701
  %call = call zeroext i1 @regmap_volatile_range(%struct.regmap* %17, i32 %18, i64 %19) #11, !dbg !9702
  br i1 %call, label %if.then15, label %lor.lhs.false, !dbg !9703

lor.lhs.false:                                    ; preds = %if.end11
  %20 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9704
  %cache_bypass = getelementptr inbounds %struct.regmap, %struct.regmap* %20, i32 0, i32 46, !dbg !9705
  %21 = load i8, i8* %cache_bypass, align 1, !dbg !9705
  %tobool12 = trunc i8 %21 to i1, !dbg !9705
  br i1 %tobool12, label %if.then15, label %lor.lhs.false13, !dbg !9706

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %22 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9707
  %cache_type = getelementptr inbounds %struct.regmap, %struct.regmap* %22, i32 0, i32 40, !dbg !9708
  %23 = load i32, i32* %cache_type, align 8, !dbg !9708
  %cmp14 = icmp eq i32 %23, 0, !dbg !9709
  br i1 %cmp14, label %if.then15, label %if.else51, !dbg !9710

if.then15:                                        ; preds = %lor.lhs.false13, %lor.lhs.false, %if.end11
  call void @llvm.dbg.declare(metadata i64* %chunk_count, metadata !9711, metadata !DIExpression()), !dbg !9713
  call void @llvm.dbg.declare(metadata i64* %chunk_bytes, metadata !9714, metadata !DIExpression()), !dbg !9715
  call void @llvm.dbg.declare(metadata i64* %chunk_regs, metadata !9716, metadata !DIExpression()), !dbg !9717
  %24 = load i64, i64* %val_count, align 8, !dbg !9718
  store i64 %24, i64* %chunk_regs, align 8, !dbg !9717
  %25 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9719
  %bus16 = getelementptr inbounds %struct.regmap, %struct.regmap* %25, i32 0, i32 8, !dbg !9721
  %26 = load %struct.regmap_bus*, %struct.regmap_bus** %bus16, align 8, !dbg !9721
  %read = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %26, i32 0, i32 6, !dbg !9722
  %27 = load i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64)** %read, align 8, !dbg !9722
  %tobool17 = icmp ne i32 (i8*, i8*, i64, i8*, i64)* %27, null, !dbg !9719
  br i1 %tobool17, label %if.end19, label %if.then18, !dbg !9723

if.then18:                                        ; preds = %if.then15
  store i32 -524, i32* %ret, align 4, !dbg !9724
  br label %out, !dbg !9726

if.end19:                                         ; preds = %if.then15
  %28 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9727
  %use_single_read = getelementptr inbounds %struct.regmap, %struct.regmap* %28, i32 0, i32 55, !dbg !9729
  %29 = load i8, i8* %use_single_read, align 4, !dbg !9729
  %tobool20 = trunc i8 %29 to i1, !dbg !9729
  br i1 %tobool20, label %if.then21, label %if.else, !dbg !9730

if.then21:                                        ; preds = %if.end19
  store i64 1, i64* %chunk_regs, align 8, !dbg !9731
  br label %if.end29, !dbg !9732

if.else:                                          ; preds = %if.end19
  %30 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9733
  %max_raw_read = getelementptr inbounds %struct.regmap, %struct.regmap* %30, i32 0, i32 58, !dbg !9735
  %31 = load i64, i64* %max_raw_read, align 8, !dbg !9735
  %tobool22 = icmp ne i64 %31, 0, !dbg !9733
  br i1 %tobool22, label %land.lhs.true, label %if.end28, !dbg !9736

land.lhs.true:                                    ; preds = %if.else
  %32 = load i64, i64* %val_len.addr, align 8, !dbg !9737
  %33 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9738
  %max_raw_read23 = getelementptr inbounds %struct.regmap, %struct.regmap* %33, i32 0, i32 58, !dbg !9739
  %34 = load i64, i64* %max_raw_read23, align 8, !dbg !9739
  %cmp24 = icmp ugt i64 %32, %34, !dbg !9740
  br i1 %cmp24, label %if.then25, label %if.end28, !dbg !9741

if.then25:                                        ; preds = %land.lhs.true
  %35 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9742
  %max_raw_read26 = getelementptr inbounds %struct.regmap, %struct.regmap* %35, i32 0, i32 58, !dbg !9743
  %36 = load i64, i64* %max_raw_read26, align 8, !dbg !9743
  %37 = load i64, i64* %val_bytes, align 8, !dbg !9744
  %div27 = udiv i64 %36, %37, !dbg !9745
  store i64 %div27, i64* %chunk_regs, align 8, !dbg !9746
  br label %if.end28, !dbg !9747

if.end28:                                         ; preds = %if.then25, %land.lhs.true, %if.else
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.then21
  %38 = load i64, i64* %val_count, align 8, !dbg !9748
  %39 = load i64, i64* %chunk_regs, align 8, !dbg !9749
  %div30 = udiv i64 %38, %39, !dbg !9750
  store i64 %div30, i64* %chunk_count, align 8, !dbg !9751
  %40 = load i64, i64* %chunk_regs, align 8, !dbg !9752
  %41 = load i64, i64* %val_bytes, align 8, !dbg !9753
  %mul = mul i64 %40, %41, !dbg !9754
  store i64 %mul, i64* %chunk_bytes, align 8, !dbg !9755
  store i32 0, i32* %i, align 4, !dbg !9756
  br label %for.cond, !dbg !9758

for.cond:                                         ; preds = %for.inc, %if.end29
  %42 = load i32, i32* %i, align 4, !dbg !9759
  %conv = sext i32 %42 to i64, !dbg !9759
  %43 = load i64, i64* %chunk_count, align 8, !dbg !9761
  %cmp31 = icmp ult i64 %conv, %43, !dbg !9762
  br i1 %cmp31, label %for.body, label %for.end, !dbg !9763

for.body:                                         ; preds = %for.cond
  %44 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9764
  %45 = load i32, i32* %reg.addr, align 4, !dbg !9766
  %46 = load i8*, i8** %val.addr, align 8, !dbg !9767
  %47 = load i64, i64* %chunk_bytes, align 8, !dbg !9768
  %conv33 = trunc i64 %47 to i32, !dbg !9768
  %call34 = call i32 @_regmap_raw_read(%struct.regmap* %44, i32 %45, i8* %46, i32 %conv33, i1 zeroext false) #11, !dbg !9769
  store i32 %call34, i32* %ret, align 4, !dbg !9770
  %48 = load i32, i32* %ret, align 4, !dbg !9771
  %cmp35 = icmp ne i32 %48, 0, !dbg !9773
  br i1 %cmp35, label %if.then37, label %if.end38, !dbg !9774

if.then37:                                        ; preds = %for.body
  br label %out, !dbg !9775

if.end38:                                         ; preds = %for.body
  %49 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9776
  %50 = load i64, i64* %chunk_regs, align 8, !dbg !9777
  %conv39 = trunc i64 %50 to i32, !dbg !9777
  %call40 = call i32 @regmap_get_offset(%struct.regmap* %49, i32 %conv39) #11, !dbg !9778
  %51 = load i32, i32* %reg.addr, align 4, !dbg !9779
  %add = add i32 %51, %call40, !dbg !9779
  store i32 %add, i32* %reg.addr, align 4, !dbg !9779
  %52 = load i64, i64* %chunk_bytes, align 8, !dbg !9780
  %53 = load i8*, i8** %val.addr, align 8, !dbg !9781
  %add.ptr = getelementptr i8, i8* %53, i64 %52, !dbg !9781
  store i8* %add.ptr, i8** %val.addr, align 8, !dbg !9781
  %54 = load i64, i64* %chunk_bytes, align 8, !dbg !9782
  %55 = load i64, i64* %val_len.addr, align 8, !dbg !9783
  %sub41 = sub i64 %55, %54, !dbg !9783
  store i64 %sub41, i64* %val_len.addr, align 8, !dbg !9783
  br label %for.inc, !dbg !9784

for.inc:                                          ; preds = %if.end38
  %56 = load i32, i32* %i, align 4, !dbg !9785
  %inc = add i32 %56, 1, !dbg !9785
  store i32 %inc, i32* %i, align 4, !dbg !9785
  br label %for.cond, !dbg !9786, !llvm.loop !9787

for.end:                                          ; preds = %for.cond
  %57 = load i64, i64* %val_len.addr, align 8, !dbg !9789
  %tobool42 = icmp ne i64 %57, 0, !dbg !9789
  br i1 %tobool42, label %if.then43, label %if.end50, !dbg !9791

if.then43:                                        ; preds = %for.end
  %58 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9792
  %59 = load i32, i32* %reg.addr, align 4, !dbg !9794
  %60 = load i8*, i8** %val.addr, align 8, !dbg !9795
  %61 = load i64, i64* %val_len.addr, align 8, !dbg !9796
  %conv44 = trunc i64 %61 to i32, !dbg !9796
  %call45 = call i32 @_regmap_raw_read(%struct.regmap* %58, i32 %59, i8* %60, i32 %conv44, i1 zeroext false) #11, !dbg !9797
  store i32 %call45, i32* %ret, align 4, !dbg !9798
  %62 = load i32, i32* %ret, align 4, !dbg !9799
  %cmp46 = icmp ne i32 %62, 0, !dbg !9801
  br i1 %cmp46, label %if.then48, label %if.end49, !dbg !9802

if.then48:                                        ; preds = %if.then43
  br label %out, !dbg !9803

if.end49:                                         ; preds = %if.then43
  br label %if.end50, !dbg !9804

if.end50:                                         ; preds = %if.end49, %for.end
  br label %if.end71, !dbg !9805

if.else51:                                        ; preds = %lor.lhs.false13
  store i32 0, i32* %i, align 4, !dbg !9806
  br label %for.cond52, !dbg !9809

for.cond52:                                       ; preds = %for.inc68, %if.else51
  %63 = load i32, i32* %i, align 4, !dbg !9810
  %conv53 = sext i32 %63 to i64, !dbg !9810
  %64 = load i64, i64* %val_count, align 8, !dbg !9812
  %cmp54 = icmp ult i64 %conv53, %64, !dbg !9813
  br i1 %cmp54, label %for.body56, label %for.end70, !dbg !9814

for.body56:                                       ; preds = %for.cond52
  %65 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9815
  %66 = load i32, i32* %reg.addr, align 4, !dbg !9817
  %67 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9818
  %68 = load i32, i32* %i, align 4, !dbg !9819
  %call57 = call i32 @regmap_get_offset(%struct.regmap* %67, i32 %68) #11, !dbg !9820
  %add58 = add i32 %66, %call57, !dbg !9821
  %call59 = call i32 @_regmap_read(%struct.regmap* %65, i32 %add58, i32* %v) #11, !dbg !9822
  store i32 %call59, i32* %ret, align 4, !dbg !9823
  %69 = load i32, i32* %ret, align 4, !dbg !9824
  %cmp60 = icmp ne i32 %69, 0, !dbg !9826
  br i1 %cmp60, label %if.then62, label %if.end63, !dbg !9827

if.then62:                                        ; preds = %for.body56
  br label %out, !dbg !9828

if.end63:                                         ; preds = %for.body56
  %70 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9829
  %format64 = getelementptr inbounds %struct.regmap, %struct.regmap* %70, i32 0, i32 7, !dbg !9830
  %format_val = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format64, i32 0, i32 6, !dbg !9831
  %71 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_val, align 8, !dbg !9831
  %72 = load i8*, i8** %val.addr, align 8, !dbg !9832
  %73 = load i32, i32* %i, align 4, !dbg !9833
  %conv65 = sext i32 %73 to i64, !dbg !9833
  %74 = load i64, i64* %val_bytes, align 8, !dbg !9834
  %mul66 = mul i64 %conv65, %74, !dbg !9835
  %add.ptr67 = getelementptr i8, i8* %72, i64 %mul66, !dbg !9836
  %75 = load i32, i32* %v, align 4, !dbg !9837
  call void %71(i8* %add.ptr67, i32 %75, i32 0) #11, !dbg !9829
  br label %for.inc68, !dbg !9838

for.inc68:                                        ; preds = %if.end63
  %76 = load i32, i32* %i, align 4, !dbg !9839
  %inc69 = add i32 %76, 1, !dbg !9839
  store i32 %inc69, i32* %i, align 4, !dbg !9839
  br label %for.cond52, !dbg !9840, !llvm.loop !9841

for.end70:                                        ; preds = %for.cond52
  br label %if.end71

if.end71:                                         ; preds = %for.end70, %if.end50
  br label %out, !dbg !9843

out:                                              ; preds = %if.end71, %if.then62, %if.then48, %if.then37, %if.then18
  call void @llvm.dbg.label(metadata !9844), !dbg !9845
  %77 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9846
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %77, i32 0, i32 2, !dbg !9847
  %78 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !9847
  %79 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9848
  %lock_arg72 = getelementptr inbounds %struct.regmap, %struct.regmap* %79, i32 0, i32 3, !dbg !9849
  %80 = load i8*, i8** %lock_arg72, align 8, !dbg !9849
  call void %78(i8* %80) #11, !dbg !9846
  %81 = load i32, i32* %ret, align 4, !dbg !9850
  store i32 %81, i32* %retval, align 4, !dbg !9851
  br label %return, !dbg !9851

return:                                           ; preds = %out, %if.then10, %if.then7, %if.then5, %if.then
  %82 = load i32, i32* %retval, align 4, !dbg !9852
  ret i32 %82, !dbg !9852
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @regmap_volatile_range(%struct.regmap* %map, i32 %reg, i64 %num) #0 !dbg !9853 {
entry:
  %retval = alloca i1, align 1
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %num.addr = alloca i64, align 8
  %i = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9856, metadata !DIExpression()), !dbg !9857
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !9858, metadata !DIExpression()), !dbg !9859
  store i64 %num, i64* %num.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %num.addr, metadata !9860, metadata !DIExpression()), !dbg !9861
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9862, metadata !DIExpression()), !dbg !9863
  store i32 0, i32* %i, align 4, !dbg !9864
  br label %for.cond, !dbg !9866

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !9867
  %conv = zext i32 %0 to i64, !dbg !9867
  %1 = load i64, i64* %num.addr, align 8, !dbg !9869
  %cmp = icmp ult i64 %conv, %1, !dbg !9870
  br i1 %cmp, label %for.body, label %for.end, !dbg !9871

for.body:                                         ; preds = %for.cond
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9872
  %3 = load i32, i32* %reg.addr, align 4, !dbg !9874
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9875
  %5 = load i32, i32* %i, align 4, !dbg !9876
  %call = call i32 @regmap_get_offset(%struct.regmap* %4, i32 %5) #11, !dbg !9877
  %add = add i32 %3, %call, !dbg !9878
  %call2 = call zeroext i1 @regmap_volatile(%struct.regmap* %2, i32 %add) #11, !dbg !9879
  br i1 %call2, label %if.end, label %if.then, !dbg !9880

if.then:                                          ; preds = %for.body
  store i1 false, i1* %retval, align 1, !dbg !9881
  br label %return, !dbg !9881

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9882

for.inc:                                          ; preds = %if.end
  %6 = load i32, i32* %i, align 4, !dbg !9883
  %inc = add i32 %6, 1, !dbg !9883
  store i32 %inc, i32* %i, align 4, !dbg !9883
  br label %for.cond, !dbg !9884, !llvm.loop !9885

for.end:                                          ; preds = %for.cond
  store i1 true, i1* %retval, align 1, !dbg !9887
  br label %return, !dbg !9887

return:                                           ; preds = %for.end, %if.then
  %7 = load i1, i1* %retval, align 1, !dbg !9888
  ret i1 %7, !dbg !9888
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_raw_read(%struct.regmap* %map, i32 %reg, i8* %val, i32 %val_len, i1 zeroext %noinc) #0 !dbg !9889 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_len.addr = alloca i32, align 4
  %noinc.addr = alloca i8, align 1
  %range = alloca %struct.regmap_range_node*, align 8
  %ret = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !9892, metadata !DIExpression()), !dbg !9893
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !9894, metadata !DIExpression()), !dbg !9895
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !9896, metadata !DIExpression()), !dbg !9897
  store i32 %val_len, i32* %val_len.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val_len.addr, metadata !9898, metadata !DIExpression()), !dbg !9899
  %frombool = zext i1 %noinc to i8
  store i8 %frombool, i8* %noinc.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %noinc.addr, metadata !9900, metadata !DIExpression()), !dbg !9901
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %range, metadata !9902, metadata !DIExpression()), !dbg !9903
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !9904, metadata !DIExpression()), !dbg !9905
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !9906, metadata !DIExpression()), !dbg !9908
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9908
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 8, !dbg !9908
  %1 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !9908
  %tobool = icmp ne %struct.regmap_bus* %1, null, !dbg !9908
  %lnot = xor i1 %tobool, true, !dbg !9908
  %lnot1 = xor i1 %lnot, true, !dbg !9908
  %lnot2 = xor i1 %lnot1, true, !dbg !9908
  %lnot.ext = zext i1 %lnot2 to i32, !dbg !9908
  store i32 %lnot.ext, i32* %__ret_warn_on, align 4, !dbg !9908
  %2 = load i32, i32* %__ret_warn_on, align 4, !dbg !9909
  %tobool3 = icmp ne i32 %2, 0, !dbg !9909
  %lnot4 = xor i1 %tobool3, true, !dbg !9909
  %lnot6 = xor i1 %lnot4, true, !dbg !9909
  %lnot.ext7 = zext i1 %lnot6 to i32, !dbg !9909
  %conv = sext i32 %lnot.ext7 to i64, !dbg !9909
  %tobool8 = icmp ne i64 %conv, 0, !dbg !9909
  br i1 %tobool8, label %if.then, label %if.end, !dbg !9908

if.then:                                          ; preds = %entry
  br label %do.body, !dbg !9909

do.body:                                          ; preds = %if.then
  br label %do.body9, !dbg !9911

do.body9:                                         ; preds = %do.body
  br label %do.end, !dbg !9913

do.end:                                           ; preds = %do.body9
  br label %do.body10, !dbg !9911

do.body10:                                        ; preds = %do.end
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 2618, i32 2305, i64 12) #10, !dbg !9915, !srcloc !9917
  br label %do.end11, !dbg !9915

do.end11:                                         ; preds = %do.body10
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 212) #10, !dbg !9918, !srcloc !9920
  br label %do.body12, !dbg !9911

do.body12:                                        ; preds = %do.end11
  br label %do.end13, !dbg !9921

do.end13:                                         ; preds = %do.body12
  br label %do.end14, !dbg !9911

do.end14:                                         ; preds = %do.end13
  br label %if.end, !dbg !9911

if.end:                                           ; preds = %do.end14, %entry
  %3 = load i32, i32* %__ret_warn_on, align 4, !dbg !9908
  %tobool15 = icmp ne i32 %3, 0, !dbg !9908
  %lnot16 = xor i1 %tobool15, true, !dbg !9908
  %lnot18 = xor i1 %lnot16, true, !dbg !9908
  %lnot.ext19 = zext i1 %lnot18 to i32, !dbg !9908
  %conv20 = sext i32 %lnot.ext19 to i64, !dbg !9908
  store i64 %conv20, i64* %tmp, align 8, !dbg !9909
  %4 = load i64, i64* %tmp, align 8, !dbg !9908
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9923
  %bus21 = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 8, !dbg !9925
  %6 = load %struct.regmap_bus*, %struct.regmap_bus** %bus21, align 8, !dbg !9925
  %tobool22 = icmp ne %struct.regmap_bus* %6, null, !dbg !9923
  br i1 %tobool22, label %lor.lhs.false, label %if.then25, !dbg !9926

lor.lhs.false:                                    ; preds = %if.end
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9927
  %bus23 = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 8, !dbg !9928
  %8 = load %struct.regmap_bus*, %struct.regmap_bus** %bus23, align 8, !dbg !9928
  %read = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %8, i32 0, i32 6, !dbg !9929
  %9 = load i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64)** %read, align 8, !dbg !9929
  %tobool24 = icmp ne i32 (i8*, i8*, i64, i8*, i64)* %9, null, !dbg !9927
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !9930

if.then25:                                        ; preds = %lor.lhs.false, %if.end
  store i32 -22, i32* %retval, align 4, !dbg !9931
  br label %return, !dbg !9931

if.end26:                                         ; preds = %lor.lhs.false
  %10 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9932
  %11 = load i32, i32* %reg.addr, align 4, !dbg !9933
  %call = call %struct.regmap_range_node* @_regmap_range_lookup(%struct.regmap* %10, i32 %11) #11, !dbg !9934
  store %struct.regmap_range_node* %call, %struct.regmap_range_node** %range, align 8, !dbg !9935
  %12 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !9936
  %tobool27 = icmp ne %struct.regmap_range_node* %12, null, !dbg !9936
  br i1 %tobool27, label %if.then28, label %if.end37, !dbg !9938

if.then28:                                        ; preds = %if.end26
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9939
  %14 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !9941
  %15 = load i8, i8* %noinc.addr, align 1, !dbg !9942
  %tobool29 = trunc i8 %15 to i1, !dbg !9942
  br i1 %tobool29, label %cond.true, label %cond.false, !dbg !9942

cond.true:                                        ; preds = %if.then28
  br label %cond.end, !dbg !9942

cond.false:                                       ; preds = %if.then28
  %16 = load i32, i32* %val_len.addr, align 4, !dbg !9943
  %conv31 = zext i32 %16 to i64, !dbg !9943
  %17 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9944
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %17, i32 0, i32 7, !dbg !9945
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !9946
  %18 = load i64, i64* %val_bytes, align 8, !dbg !9946
  %div = udiv i64 %conv31, %18, !dbg !9947
  br label %cond.end, !dbg !9942

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i64 [ 1, %cond.true ], [ %div, %cond.false ], !dbg !9942
  %conv32 = trunc i64 %cond to i32, !dbg !9942
  %call33 = call i32 @_regmap_select_page(%struct.regmap* %13, i32* %reg.addr, %struct.regmap_range_node* %14, i32 %conv32) #11, !dbg !9948
  store i32 %call33, i32* %ret, align 4, !dbg !9949
  %19 = load i32, i32* %ret, align 4, !dbg !9950
  %cmp = icmp ne i32 %19, 0, !dbg !9952
  br i1 %cmp, label %if.then35, label %if.end36, !dbg !9953

if.then35:                                        ; preds = %cond.end
  %20 = load i32, i32* %ret, align 4, !dbg !9954
  store i32 %20, i32* %retval, align 4, !dbg !9955
  br label %return, !dbg !9955

if.end36:                                         ; preds = %cond.end
  br label %if.end37, !dbg !9956

if.end37:                                         ; preds = %if.end36, %if.end26
  %21 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9957
  %format38 = getelementptr inbounds %struct.regmap, %struct.regmap* %21, i32 0, i32 7, !dbg !9958
  %format_reg = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format38, i32 0, i32 5, !dbg !9959
  %22 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_reg, align 8, !dbg !9959
  %23 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9960
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %23, i32 0, i32 6, !dbg !9961
  %24 = load i8*, i8** %work_buf, align 8, !dbg !9961
  %25 = load i32, i32* %reg.addr, align 4, !dbg !9962
  %26 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9963
  %reg_shift = getelementptr inbounds %struct.regmap, %struct.regmap* %26, i32 0, i32 36, !dbg !9964
  %27 = load i32, i32* %reg_shift, align 8, !dbg !9964
  call void %22(i8* %24, i32 %25, i32 %27) #11, !dbg !9957
  %28 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9965
  %29 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9966
  %format39 = getelementptr inbounds %struct.regmap, %struct.regmap* %29, i32 0, i32 7, !dbg !9967
  %reg_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format39, i32 0, i32 1, !dbg !9968
  %30 = load i64, i64* %reg_bytes, align 8, !dbg !9968
  %conv40 = trunc i64 %30 to i32, !dbg !9966
  %31 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9969
  %read_flag_mask = getelementptr inbounds %struct.regmap, %struct.regmap* %31, i32 0, i32 34, !dbg !9970
  %32 = load i64, i64* %read_flag_mask, align 8, !dbg !9970
  call void @regmap_set_work_buf_flag_mask(%struct.regmap* %28, i32 %conv40, i64 %32) #11, !dbg !9971
  %33 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9972
  %34 = load i32, i32* %reg.addr, align 4, !dbg !9973
  %35 = load i32, i32* %val_len.addr, align 4, !dbg !9974
  %conv41 = zext i32 %35 to i64, !dbg !9974
  %36 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9975
  %format42 = getelementptr inbounds %struct.regmap, %struct.regmap* %36, i32 0, i32 7, !dbg !9976
  %val_bytes43 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format42, i32 0, i32 3, !dbg !9977
  %37 = load i64, i64* %val_bytes43, align 8, !dbg !9977
  %div44 = udiv i64 %conv41, %37, !dbg !9978
  %conv45 = trunc i64 %div44 to i32, !dbg !9974
  call void @trace_regmap_hw_read_start(%struct.regmap* %33, i32 %34, i32 %conv45) #11, !dbg !9979
  %38 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9980
  %bus46 = getelementptr inbounds %struct.regmap, %struct.regmap* %38, i32 0, i32 8, !dbg !9981
  %39 = load %struct.regmap_bus*, %struct.regmap_bus** %bus46, align 8, !dbg !9981
  %read47 = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %39, i32 0, i32 6, !dbg !9982
  %40 = load i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64)** %read47, align 8, !dbg !9982
  %41 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9983
  %bus_context = getelementptr inbounds %struct.regmap, %struct.regmap* %41, i32 0, i32 9, !dbg !9984
  %42 = load i8*, i8** %bus_context, align 8, !dbg !9984
  %43 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9985
  %work_buf48 = getelementptr inbounds %struct.regmap, %struct.regmap* %43, i32 0, i32 6, !dbg !9986
  %44 = load i8*, i8** %work_buf48, align 8, !dbg !9986
  %45 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9987
  %format49 = getelementptr inbounds %struct.regmap, %struct.regmap* %45, i32 0, i32 7, !dbg !9988
  %reg_bytes50 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format49, i32 0, i32 1, !dbg !9989
  %46 = load i64, i64* %reg_bytes50, align 8, !dbg !9989
  %47 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9990
  %format51 = getelementptr inbounds %struct.regmap, %struct.regmap* %47, i32 0, i32 7, !dbg !9991
  %pad_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format51, i32 0, i32 2, !dbg !9992
  %48 = load i64, i64* %pad_bytes, align 8, !dbg !9992
  %add = add i64 %46, %48, !dbg !9993
  %49 = load i8*, i8** %val.addr, align 8, !dbg !9994
  %50 = load i32, i32* %val_len.addr, align 4, !dbg !9995
  %conv52 = zext i32 %50 to i64, !dbg !9995
  %call53 = call i32 %40(i8* %42, i8* %44, i64 %add, i8* %49, i64 %conv52) #11, !dbg !9980
  store i32 %call53, i32* %ret, align 4, !dbg !9996
  %51 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !9997
  %52 = load i32, i32* %reg.addr, align 4, !dbg !9998
  %53 = load i32, i32* %val_len.addr, align 4, !dbg !9999
  %conv54 = zext i32 %53 to i64, !dbg !9999
  %54 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10000
  %format55 = getelementptr inbounds %struct.regmap, %struct.regmap* %54, i32 0, i32 7, !dbg !10001
  %val_bytes56 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format55, i32 0, i32 3, !dbg !10002
  %55 = load i64, i64* %val_bytes56, align 8, !dbg !10002
  %div57 = udiv i64 %conv54, %55, !dbg !10003
  %conv58 = trunc i64 %div57 to i32, !dbg !9999
  call void @trace_regmap_hw_read_done(%struct.regmap* %51, i32 %52, i32 %conv58) #11, !dbg !10004
  %56 = load i32, i32* %ret, align 4, !dbg !10005
  store i32 %56, i32* %retval, align 4, !dbg !10006
  br label %return, !dbg !10006

return:                                           ; preds = %if.end37, %if.then35, %if.then25
  %57 = load i32, i32* %retval, align 4, !dbg !10007
  ret i32 %57, !dbg !10007
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_noinc_read(%struct.regmap* %map, i32 %reg, i8* %val, i64 %val_len) #0 !dbg !10008 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_len.addr = alloca i64, align 8
  %read_len = alloca i64, align 8
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10009, metadata !DIExpression()), !dbg !10010
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !10011, metadata !DIExpression()), !dbg !10012
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !10013, metadata !DIExpression()), !dbg !10014
  store i64 %val_len, i64* %val_len.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val_len.addr, metadata !10015, metadata !DIExpression()), !dbg !10016
  call void @llvm.dbg.declare(metadata i64* %read_len, metadata !10017, metadata !DIExpression()), !dbg !10018
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10019, metadata !DIExpression()), !dbg !10020
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10021
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 8, !dbg !10023
  %1 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !10023
  %tobool = icmp ne %struct.regmap_bus* %1, null, !dbg !10021
  br i1 %tobool, label %if.end, label %if.then, !dbg !10024

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !10025
  br label %return, !dbg !10025

if.end:                                           ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10026
  %bus1 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 8, !dbg !10028
  %3 = load %struct.regmap_bus*, %struct.regmap_bus** %bus1, align 8, !dbg !10028
  %read = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %3, i32 0, i32 6, !dbg !10029
  %4 = load i32 (i8*, i8*, i64, i8*, i64)*, i32 (i8*, i8*, i64, i8*, i64)** %read, align 8, !dbg !10029
  %tobool2 = icmp ne i32 (i8*, i8*, i64, i8*, i64)* %4, null, !dbg !10026
  br i1 %tobool2, label %if.end4, label %if.then3, !dbg !10030

if.then3:                                         ; preds = %if.end
  store i32 -524, i32* %retval, align 4, !dbg !10031
  br label %return, !dbg !10031

if.end4:                                          ; preds = %if.end
  %5 = load i64, i64* %val_len.addr, align 8, !dbg !10032
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10034
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 7, !dbg !10035
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !10036
  %7 = load i64, i64* %val_bytes, align 8, !dbg !10036
  %rem = urem i64 %5, %7, !dbg !10037
  %tobool5 = icmp ne i64 %rem, 0, !dbg !10037
  br i1 %tobool5, label %if.then6, label %if.end7, !dbg !10038

if.then6:                                         ; preds = %if.end4
  store i32 -22, i32* %retval, align 4, !dbg !10039
  br label %return, !dbg !10039

if.end7:                                          ; preds = %if.end4
  %8 = load i32, i32* %reg.addr, align 4, !dbg !10040
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10040
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 37, !dbg !10040
  %10 = load i32, i32* %reg_stride, align 4, !dbg !10040
  %sub = sub i32 %10, 1, !dbg !10040
  %and = and i32 %8, %sub, !dbg !10040
  %cmp = icmp eq i32 %and, 0, !dbg !10040
  br i1 %cmp, label %if.end9, label %if.then8, !dbg !10042

if.then8:                                         ; preds = %if.end7
  store i32 -22, i32* %retval, align 4, !dbg !10043
  br label %return, !dbg !10043

if.end9:                                          ; preds = %if.end7
  %11 = load i64, i64* %val_len.addr, align 8, !dbg !10044
  %cmp10 = icmp eq i64 %11, 0, !dbg !10046
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !10047

if.then11:                                        ; preds = %if.end9
  store i32 -22, i32* %retval, align 4, !dbg !10048
  br label %return, !dbg !10048

if.end12:                                         ; preds = %if.end9
  %12 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10049
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 1, !dbg !10050
  %13 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !10050
  %14 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10051
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 3, !dbg !10052
  %15 = load i8*, i8** %lock_arg, align 8, !dbg !10052
  call void %13(i8* %15) #11, !dbg !10049
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10053
  %17 = load i32, i32* %reg.addr, align 4, !dbg !10055
  %call = call zeroext i1 @regmap_volatile(%struct.regmap* %16, i32 %17) #11, !dbg !10056
  br i1 %call, label %lor.lhs.false, label %if.then14, !dbg !10057

lor.lhs.false:                                    ; preds = %if.end12
  %18 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10058
  %19 = load i32, i32* %reg.addr, align 4, !dbg !10059
  %call13 = call zeroext i1 @regmap_readable_noinc(%struct.regmap* %18, i32 %19) #11, !dbg !10060
  br i1 %call13, label %if.end15, label %if.then14, !dbg !10061

if.then14:                                        ; preds = %lor.lhs.false, %if.end12
  store i32 -22, i32* %ret, align 4, !dbg !10062
  br label %out_unlock, !dbg !10064

if.end15:                                         ; preds = %lor.lhs.false
  br label %while.cond, !dbg !10065

while.cond:                                       ; preds = %if.end26, %if.end15
  %20 = load i64, i64* %val_len.addr, align 8, !dbg !10066
  %tobool16 = icmp ne i64 %20, 0, !dbg !10065
  br i1 %tobool16, label %while.body, label %while.end, !dbg !10065

while.body:                                       ; preds = %while.cond
  %21 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10067
  %max_raw_read = getelementptr inbounds %struct.regmap, %struct.regmap* %21, i32 0, i32 58, !dbg !10070
  %22 = load i64, i64* %max_raw_read, align 8, !dbg !10070
  %tobool17 = icmp ne i64 %22, 0, !dbg !10067
  br i1 %tobool17, label %land.lhs.true, label %if.else, !dbg !10071

land.lhs.true:                                    ; preds = %while.body
  %23 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10072
  %max_raw_read18 = getelementptr inbounds %struct.regmap, %struct.regmap* %23, i32 0, i32 58, !dbg !10073
  %24 = load i64, i64* %max_raw_read18, align 8, !dbg !10073
  %25 = load i64, i64* %val_len.addr, align 8, !dbg !10074
  %cmp19 = icmp ult i64 %24, %25, !dbg !10075
  br i1 %cmp19, label %if.then20, label %if.else, !dbg !10076

if.then20:                                        ; preds = %land.lhs.true
  %26 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10077
  %max_raw_read21 = getelementptr inbounds %struct.regmap, %struct.regmap* %26, i32 0, i32 58, !dbg !10078
  %27 = load i64, i64* %max_raw_read21, align 8, !dbg !10078
  store i64 %27, i64* %read_len, align 8, !dbg !10079
  br label %if.end22, !dbg !10080

if.else:                                          ; preds = %land.lhs.true, %while.body
  %28 = load i64, i64* %val_len.addr, align 8, !dbg !10081
  store i64 %28, i64* %read_len, align 8, !dbg !10082
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then20
  %29 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10083
  %30 = load i32, i32* %reg.addr, align 4, !dbg !10084
  %31 = load i8*, i8** %val.addr, align 8, !dbg !10085
  %32 = load i64, i64* %read_len, align 8, !dbg !10086
  %conv = trunc i64 %32 to i32, !dbg !10086
  %call23 = call i32 @_regmap_raw_read(%struct.regmap* %29, i32 %30, i8* %31, i32 %conv, i1 zeroext true) #11, !dbg !10087
  store i32 %call23, i32* %ret, align 4, !dbg !10088
  %33 = load i32, i32* %ret, align 4, !dbg !10089
  %tobool24 = icmp ne i32 %33, 0, !dbg !10089
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !10091

if.then25:                                        ; preds = %if.end22
  br label %out_unlock, !dbg !10092

if.end26:                                         ; preds = %if.end22
  %34 = load i8*, i8** %val.addr, align 8, !dbg !10093
  %35 = load i64, i64* %read_len, align 8, !dbg !10094
  %add.ptr = getelementptr i8, i8* %34, i64 %35, !dbg !10095
  store i8* %add.ptr, i8** %val.addr, align 8, !dbg !10096
  %36 = load i64, i64* %read_len, align 8, !dbg !10097
  %37 = load i64, i64* %val_len.addr, align 8, !dbg !10098
  %sub27 = sub i64 %37, %36, !dbg !10098
  store i64 %sub27, i64* %val_len.addr, align 8, !dbg !10098
  br label %while.cond, !dbg !10065, !llvm.loop !10099

while.end:                                        ; preds = %while.cond
  br label %out_unlock, !dbg !10065

out_unlock:                                       ; preds = %while.end, %if.then25, %if.then14
  call void @llvm.dbg.label(metadata !10101), !dbg !10102
  %38 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10103
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %38, i32 0, i32 2, !dbg !10104
  %39 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !10104
  %40 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10105
  %lock_arg28 = getelementptr inbounds %struct.regmap, %struct.regmap* %40, i32 0, i32 3, !dbg !10106
  %41 = load i8*, i8** %lock_arg28, align 8, !dbg !10106
  call void %39(i8* %41) #11, !dbg !10103
  %42 = load i32, i32* %ret, align 4, !dbg !10107
  store i32 %42, i32* %retval, align 4, !dbg !10108
  br label %return, !dbg !10108

return:                                           ; preds = %out_unlock, %if.then11, %if.then8, %if.then6, %if.then3, %if.then
  %43 = load i32, i32* %retval, align 4, !dbg !10109
  ret i32 %43, !dbg !10109
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_field_read(%struct.regmap_field* %field, i32* %val) #0 !dbg !10110 {
entry:
  %retval = alloca i32, align 4
  %field.addr = alloca %struct.regmap_field*, align 8
  %val.addr = alloca i32*, align 8
  %ret = alloca i32, align 4
  %reg_val = alloca i32, align 4
  store %struct.regmap_field* %field, %struct.regmap_field** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %field.addr, metadata !10113, metadata !DIExpression()), !dbg !10114
  store i32* %val, i32** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %val.addr, metadata !10115, metadata !DIExpression()), !dbg !10116
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10117, metadata !DIExpression()), !dbg !10118
  call void @llvm.dbg.declare(metadata i32* %reg_val, metadata !10119, metadata !DIExpression()), !dbg !10120
  %0 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10121
  %regmap = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %0, i32 0, i32 0, !dbg !10122
  %1 = load %struct.regmap*, %struct.regmap** %regmap, align 8, !dbg !10122
  %2 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10123
  %reg = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %2, i32 0, i32 3, !dbg !10124
  %3 = load i32, i32* %reg, align 8, !dbg !10124
  %call = call i32 @regmap_read(%struct.regmap* %1, i32 %3, i32* %reg_val) #11, !dbg !10125
  store i32 %call, i32* %ret, align 4, !dbg !10126
  %4 = load i32, i32* %ret, align 4, !dbg !10127
  %cmp = icmp ne i32 %4, 0, !dbg !10129
  br i1 %cmp, label %if.then, label %if.end, !dbg !10130

if.then:                                          ; preds = %entry
  %5 = load i32, i32* %ret, align 4, !dbg !10131
  store i32 %5, i32* %retval, align 4, !dbg !10132
  br label %return, !dbg !10132

if.end:                                           ; preds = %entry
  %6 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10133
  %mask = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %6, i32 0, i32 1, !dbg !10134
  %7 = load i32, i32* %mask, align 8, !dbg !10134
  %8 = load i32, i32* %reg_val, align 4, !dbg !10135
  %and = and i32 %8, %7, !dbg !10135
  store i32 %and, i32* %reg_val, align 4, !dbg !10135
  %9 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10136
  %shift = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %9, i32 0, i32 2, !dbg !10137
  %10 = load i32, i32* %shift, align 4, !dbg !10137
  %11 = load i32, i32* %reg_val, align 4, !dbg !10138
  %shr = lshr i32 %11, %10, !dbg !10138
  store i32 %shr, i32* %reg_val, align 4, !dbg !10138
  %12 = load i32, i32* %reg_val, align 4, !dbg !10139
  %13 = load i32*, i32** %val.addr, align 8, !dbg !10140
  store i32 %12, i32* %13, align 4, !dbg !10141
  %14 = load i32, i32* %ret, align 4, !dbg !10142
  store i32 %14, i32* %retval, align 4, !dbg !10143
  br label %return, !dbg !10143

return:                                           ; preds = %if.end, %if.then
  %15 = load i32, i32* %retval, align 4, !dbg !10144
  ret i32 %15, !dbg !10144
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_fields_read(%struct.regmap_field* %field, i32 %id, i32* %val) #0 !dbg !10145 {
entry:
  %retval = alloca i32, align 4
  %field.addr = alloca %struct.regmap_field*, align 8
  %id.addr = alloca i32, align 4
  %val.addr = alloca i32*, align 8
  %ret = alloca i32, align 4
  %reg_val = alloca i32, align 4
  store %struct.regmap_field* %field, %struct.regmap_field** %field.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_field** %field.addr, metadata !10148, metadata !DIExpression()), !dbg !10149
  store i32 %id, i32* %id.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %id.addr, metadata !10150, metadata !DIExpression()), !dbg !10151
  store i32* %val, i32** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %val.addr, metadata !10152, metadata !DIExpression()), !dbg !10153
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10154, metadata !DIExpression()), !dbg !10155
  call void @llvm.dbg.declare(metadata i32* %reg_val, metadata !10156, metadata !DIExpression()), !dbg !10157
  %0 = load i32, i32* %id.addr, align 4, !dbg !10158
  %1 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10160
  %id_size = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %1, i32 0, i32 4, !dbg !10161
  %2 = load i32, i32* %id_size, align 4, !dbg !10161
  %cmp = icmp uge i32 %0, %2, !dbg !10162
  br i1 %cmp, label %if.then, label %if.end, !dbg !10163

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !10164
  br label %return, !dbg !10164

if.end:                                           ; preds = %entry
  %3 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10165
  %regmap = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %3, i32 0, i32 0, !dbg !10166
  %4 = load %struct.regmap*, %struct.regmap** %regmap, align 8, !dbg !10166
  %5 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10167
  %reg = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %5, i32 0, i32 3, !dbg !10168
  %6 = load i32, i32* %reg, align 8, !dbg !10168
  %7 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10169
  %id_offset = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %7, i32 0, i32 5, !dbg !10170
  %8 = load i32, i32* %id_offset, align 8, !dbg !10170
  %9 = load i32, i32* %id.addr, align 4, !dbg !10171
  %mul = mul i32 %8, %9, !dbg !10172
  %add = add i32 %6, %mul, !dbg !10173
  %call = call i32 @regmap_read(%struct.regmap* %4, i32 %add, i32* %reg_val) #11, !dbg !10174
  store i32 %call, i32* %ret, align 4, !dbg !10175
  %10 = load i32, i32* %ret, align 4, !dbg !10176
  %cmp1 = icmp ne i32 %10, 0, !dbg !10178
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !10179

if.then2:                                         ; preds = %if.end
  %11 = load i32, i32* %ret, align 4, !dbg !10180
  store i32 %11, i32* %retval, align 4, !dbg !10181
  br label %return, !dbg !10181

if.end3:                                          ; preds = %if.end
  %12 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10182
  %mask = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %12, i32 0, i32 1, !dbg !10183
  %13 = load i32, i32* %mask, align 8, !dbg !10183
  %14 = load i32, i32* %reg_val, align 4, !dbg !10184
  %and = and i32 %14, %13, !dbg !10184
  store i32 %and, i32* %reg_val, align 4, !dbg !10184
  %15 = load %struct.regmap_field*, %struct.regmap_field** %field.addr, align 8, !dbg !10185
  %shift = getelementptr inbounds %struct.regmap_field, %struct.regmap_field* %15, i32 0, i32 2, !dbg !10186
  %16 = load i32, i32* %shift, align 4, !dbg !10186
  %17 = load i32, i32* %reg_val, align 4, !dbg !10187
  %shr = lshr i32 %17, %16, !dbg !10187
  store i32 %shr, i32* %reg_val, align 4, !dbg !10187
  %18 = load i32, i32* %reg_val, align 4, !dbg !10188
  %19 = load i32*, i32** %val.addr, align 8, !dbg !10189
  store i32 %18, i32* %19, align 4, !dbg !10190
  %20 = load i32, i32* %ret, align 4, !dbg !10191
  store i32 %20, i32* %retval, align 4, !dbg !10192
  br label %return, !dbg !10192

return:                                           ; preds = %if.end3, %if.then2, %if.then
  %21 = load i32, i32* %retval, align 4, !dbg !10193
  ret i32 %21, !dbg !10193
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_bulk_read(%struct.regmap* %map, i32 %reg, i8* %val, i64 %val_count) #0 !dbg !10194 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i8*, align 8
  %val_count.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %val_bytes = alloca i64, align 8
  %vol = alloca i8, align 1
  %u64 = alloca i64*, align 8
  %u32 = alloca i32*, align 8
  %u16 = alloca i16*, align 8
  %u8 = alloca i8*, align 8
  %ival = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10195, metadata !DIExpression()), !dbg !10196
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !10197, metadata !DIExpression()), !dbg !10198
  store i8* %val, i8** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %val.addr, metadata !10199, metadata !DIExpression()), !dbg !10200
  store i64 %val_count, i64* %val_count.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val_count.addr, metadata !10201, metadata !DIExpression()), !dbg !10202
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10203, metadata !DIExpression()), !dbg !10204
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10205, metadata !DIExpression()), !dbg !10206
  call void @llvm.dbg.declare(metadata i64* %val_bytes, metadata !10207, metadata !DIExpression()), !dbg !10208
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10209
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 7, !dbg !10210
  %val_bytes1 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !10211
  %1 = load i64, i64* %val_bytes1, align 8, !dbg !10211
  store i64 %1, i64* %val_bytes, align 8, !dbg !10208
  call void @llvm.dbg.declare(metadata i8* %vol, metadata !10212, metadata !DIExpression()), !dbg !10213
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10214
  %3 = load i32, i32* %reg.addr, align 4, !dbg !10215
  %4 = load i64, i64* %val_count.addr, align 8, !dbg !10216
  %call = call zeroext i1 @regmap_volatile_range(%struct.regmap* %2, i32 %3, i64 %4) #11, !dbg !10217
  %frombool = zext i1 %call to i8, !dbg !10213
  store i8 %frombool, i8* %vol, align 1, !dbg !10213
  %5 = load i32, i32* %reg.addr, align 4, !dbg !10218
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10218
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 37, !dbg !10218
  %7 = load i32, i32* %reg_stride, align 4, !dbg !10218
  %sub = sub i32 %7, 1, !dbg !10218
  %and = and i32 %5, %sub, !dbg !10218
  %cmp = icmp eq i32 %and, 0, !dbg !10218
  br i1 %cmp, label %if.end, label %if.then, !dbg !10220

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !10221
  br label %return, !dbg !10221

if.end:                                           ; preds = %entry
  %8 = load i64, i64* %val_count.addr, align 8, !dbg !10222
  %cmp2 = icmp eq i64 %8, 0, !dbg !10224
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !10225

if.then3:                                         ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !10226
  br label %return, !dbg !10226

if.end4:                                          ; preds = %if.end
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10227
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 8, !dbg !10229
  %10 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !10229
  %tobool = icmp ne %struct.regmap_bus* %10, null, !dbg !10227
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !10230

land.lhs.true:                                    ; preds = %if.end4
  %11 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10231
  %format5 = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 7, !dbg !10232
  %parse_inplace = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format5, i32 0, i32 8, !dbg !10233
  %12 = load void (i8*)*, void (i8*)** %parse_inplace, align 8, !dbg !10233
  %tobool6 = icmp ne void (i8*)* %12, null, !dbg !10231
  br i1 %tobool6, label %land.lhs.true7, label %if.else, !dbg !10234

land.lhs.true7:                                   ; preds = %land.lhs.true
  %13 = load i8, i8* %vol, align 1, !dbg !10235
  %tobool8 = trunc i8 %13 to i1, !dbg !10235
  br i1 %tobool8, label %if.then10, label %lor.lhs.false, !dbg !10236

lor.lhs.false:                                    ; preds = %land.lhs.true7
  %14 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10237
  %cache_type = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 40, !dbg !10238
  %15 = load i32, i32* %cache_type, align 8, !dbg !10238
  %cmp9 = icmp eq i32 %15, 0, !dbg !10239
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !10240

if.then10:                                        ; preds = %lor.lhs.false, %land.lhs.true7
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10241
  %17 = load i32, i32* %reg.addr, align 4, !dbg !10243
  %18 = load i8*, i8** %val.addr, align 8, !dbg !10244
  %19 = load i64, i64* %val_bytes, align 8, !dbg !10245
  %20 = load i64, i64* %val_count.addr, align 8, !dbg !10246
  %mul = mul i64 %19, %20, !dbg !10247
  %call11 = call i32 @regmap_raw_read(%struct.regmap* %16, i32 %17, i8* %18, i64 %mul) #11, !dbg !10248
  store i32 %call11, i32* %ret, align 4, !dbg !10249
  %21 = load i32, i32* %ret, align 4, !dbg !10250
  %cmp12 = icmp ne i32 %21, 0, !dbg !10252
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !10253

if.then13:                                        ; preds = %if.then10
  %22 = load i32, i32* %ret, align 4, !dbg !10254
  store i32 %22, i32* %retval, align 4, !dbg !10255
  br label %return, !dbg !10255

if.end14:                                         ; preds = %if.then10
  store i32 0, i32* %i, align 4, !dbg !10256
  br label %for.cond, !dbg !10258

for.cond:                                         ; preds = %for.inc, %if.end14
  %23 = load i32, i32* %i, align 4, !dbg !10259
  %conv = sext i32 %23 to i64, !dbg !10259
  %24 = load i64, i64* %val_count.addr, align 8, !dbg !10261
  %25 = load i64, i64* %val_bytes, align 8, !dbg !10262
  %mul15 = mul i64 %24, %25, !dbg !10263
  %cmp16 = icmp ult i64 %conv, %mul15, !dbg !10264
  br i1 %cmp16, label %for.body, label %for.end, !dbg !10265

for.body:                                         ; preds = %for.cond
  %26 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10266
  %format18 = getelementptr inbounds %struct.regmap, %struct.regmap* %26, i32 0, i32 7, !dbg !10267
  %parse_inplace19 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format18, i32 0, i32 8, !dbg !10268
  %27 = load void (i8*)*, void (i8*)** %parse_inplace19, align 8, !dbg !10268
  %28 = load i8*, i8** %val.addr, align 8, !dbg !10269
  %29 = load i32, i32* %i, align 4, !dbg !10270
  %idx.ext = sext i32 %29 to i64, !dbg !10271
  %add.ptr = getelementptr i8, i8* %28, i64 %idx.ext, !dbg !10271
  call void %27(i8* %add.ptr) #11, !dbg !10266
  br label %for.inc, !dbg !10266

for.inc:                                          ; preds = %for.body
  %30 = load i64, i64* %val_bytes, align 8, !dbg !10272
  %31 = load i32, i32* %i, align 4, !dbg !10273
  %conv20 = sext i32 %31 to i64, !dbg !10273
  %add = add i64 %conv20, %30, !dbg !10273
  %conv21 = trunc i64 %add to i32, !dbg !10273
  store i32 %conv21, i32* %i, align 4, !dbg !10273
  br label %for.cond, !dbg !10274, !llvm.loop !10275

for.end:                                          ; preds = %for.cond
  br label %if.end51, !dbg !10277

if.else:                                          ; preds = %lor.lhs.false, %land.lhs.true, %if.end4
  call void @llvm.dbg.declare(metadata i64** %u64, metadata !10278, metadata !DIExpression()), !dbg !10280
  %32 = load i8*, i8** %val.addr, align 8, !dbg !10281
  %33 = bitcast i8* %32 to i64*, !dbg !10281
  store i64* %33, i64** %u64, align 8, !dbg !10280
  call void @llvm.dbg.declare(metadata i32** %u32, metadata !10282, metadata !DIExpression()), !dbg !10283
  %34 = load i8*, i8** %val.addr, align 8, !dbg !10284
  %35 = bitcast i8* %34 to i32*, !dbg !10284
  store i32* %35, i32** %u32, align 8, !dbg !10283
  call void @llvm.dbg.declare(metadata i16** %u16, metadata !10285, metadata !DIExpression()), !dbg !10286
  %36 = load i8*, i8** %val.addr, align 8, !dbg !10287
  %37 = bitcast i8* %36 to i16*, !dbg !10287
  store i16* %37, i16** %u16, align 8, !dbg !10286
  call void @llvm.dbg.declare(metadata i8** %u8, metadata !10288, metadata !DIExpression()), !dbg !10289
  %38 = load i8*, i8** %val.addr, align 8, !dbg !10290
  store i8* %38, i8** %u8, align 8, !dbg !10289
  %39 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10291
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %39, i32 0, i32 1, !dbg !10292
  %40 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !10292
  %41 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10293
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %41, i32 0, i32 3, !dbg !10294
  %42 = load i8*, i8** %lock_arg, align 8, !dbg !10294
  call void %40(i8* %42) #11, !dbg !10291
  store i32 0, i32* %i, align 4, !dbg !10295
  br label %for.cond22, !dbg !10297

for.cond22:                                       ; preds = %for.inc48, %if.else
  %43 = load i32, i32* %i, align 4, !dbg !10298
  %conv23 = sext i32 %43 to i64, !dbg !10298
  %44 = load i64, i64* %val_count.addr, align 8, !dbg !10300
  %cmp24 = icmp ult i64 %conv23, %44, !dbg !10301
  br i1 %cmp24, label %for.body26, label %for.end49, !dbg !10302

for.body26:                                       ; preds = %for.cond22
  call void @llvm.dbg.declare(metadata i32* %ival, metadata !10303, metadata !DIExpression()), !dbg !10305
  %45 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10306
  %46 = load i32, i32* %reg.addr, align 4, !dbg !10307
  %47 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10308
  %48 = load i32, i32* %i, align 4, !dbg !10309
  %call27 = call i32 @regmap_get_offset(%struct.regmap* %47, i32 %48) #11, !dbg !10310
  %add28 = add i32 %46, %call27, !dbg !10311
  %call29 = call i32 @_regmap_read(%struct.regmap* %45, i32 %add28, i32* %ival) #11, !dbg !10312
  store i32 %call29, i32* %ret, align 4, !dbg !10313
  %49 = load i32, i32* %ret, align 4, !dbg !10314
  %cmp30 = icmp ne i32 %49, 0, !dbg !10316
  br i1 %cmp30, label %if.then32, label %if.end33, !dbg !10317

if.then32:                                        ; preds = %for.body26
  br label %out, !dbg !10318

if.end33:                                         ; preds = %for.body26
  %50 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10319
  %format34 = getelementptr inbounds %struct.regmap, %struct.regmap* %50, i32 0, i32 7, !dbg !10320
  %val_bytes35 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format34, i32 0, i32 3, !dbg !10321
  %51 = load i64, i64* %val_bytes35, align 8, !dbg !10321
  switch i64 %51, label %sw.default [
    i64 8, label %sw.bb
    i64 4, label %sw.bb37
    i64 2, label %sw.bb40
    i64 1, label %sw.bb44
  ], !dbg !10322

sw.bb:                                            ; preds = %if.end33
  %52 = load i32, i32* %ival, align 4, !dbg !10323
  %conv36 = zext i32 %52 to i64, !dbg !10323
  %53 = load i64*, i64** %u64, align 8, !dbg !10325
  %54 = load i32, i32* %i, align 4, !dbg !10326
  %idxprom = sext i32 %54 to i64, !dbg !10325
  %arrayidx = getelementptr i64, i64* %53, i64 %idxprom, !dbg !10325
  store i64 %conv36, i64* %arrayidx, align 8, !dbg !10327
  br label %sw.epilog, !dbg !10328

sw.bb37:                                          ; preds = %if.end33
  %55 = load i32, i32* %ival, align 4, !dbg !10329
  %56 = load i32*, i32** %u32, align 8, !dbg !10330
  %57 = load i32, i32* %i, align 4, !dbg !10331
  %idxprom38 = sext i32 %57 to i64, !dbg !10330
  %arrayidx39 = getelementptr i32, i32* %56, i64 %idxprom38, !dbg !10330
  store i32 %55, i32* %arrayidx39, align 4, !dbg !10332
  br label %sw.epilog, !dbg !10333

sw.bb40:                                          ; preds = %if.end33
  %58 = load i32, i32* %ival, align 4, !dbg !10334
  %conv41 = trunc i32 %58 to i16, !dbg !10334
  %59 = load i16*, i16** %u16, align 8, !dbg !10335
  %60 = load i32, i32* %i, align 4, !dbg !10336
  %idxprom42 = sext i32 %60 to i64, !dbg !10335
  %arrayidx43 = getelementptr i16, i16* %59, i64 %idxprom42, !dbg !10335
  store i16 %conv41, i16* %arrayidx43, align 2, !dbg !10337
  br label %sw.epilog, !dbg !10338

sw.bb44:                                          ; preds = %if.end33
  %61 = load i32, i32* %ival, align 4, !dbg !10339
  %conv45 = trunc i32 %61 to i8, !dbg !10339
  %62 = load i8*, i8** %u8, align 8, !dbg !10340
  %63 = load i32, i32* %i, align 4, !dbg !10341
  %idxprom46 = sext i32 %63 to i64, !dbg !10340
  %arrayidx47 = getelementptr i8, i8* %62, i64 %idxprom46, !dbg !10340
  store i8 %conv45, i8* %arrayidx47, align 1, !dbg !10342
  br label %sw.epilog, !dbg !10343

sw.default:                                       ; preds = %if.end33
  store i32 -22, i32* %ret, align 4, !dbg !10344
  br label %out, !dbg !10345

sw.epilog:                                        ; preds = %sw.bb44, %sw.bb40, %sw.bb37, %sw.bb
  br label %for.inc48, !dbg !10346

for.inc48:                                        ; preds = %sw.epilog
  %64 = load i32, i32* %i, align 4, !dbg !10347
  %inc = add i32 %64, 1, !dbg !10347
  store i32 %inc, i32* %i, align 4, !dbg !10347
  br label %for.cond22, !dbg !10348, !llvm.loop !10349

for.end49:                                        ; preds = %for.cond22
  br label %out, !dbg !10350

out:                                              ; preds = %for.end49, %sw.default, %if.then32
  call void @llvm.dbg.label(metadata !10351), !dbg !10352
  %65 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10353
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %65, i32 0, i32 2, !dbg !10354
  %66 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !10354
  %67 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10355
  %lock_arg50 = getelementptr inbounds %struct.regmap, %struct.regmap* %67, i32 0, i32 3, !dbg !10356
  %68 = load i8*, i8** %lock_arg50, align 8, !dbg !10356
  call void %66(i8* %68) #11, !dbg !10353
  br label %if.end51

if.end51:                                         ; preds = %out, %for.end
  %69 = load i32, i32* %ret, align 4, !dbg !10357
  store i32 %69, i32* %retval, align 4, !dbg !10358
  br label %return, !dbg !10358

return:                                           ; preds = %if.end51, %if.then13, %if.then3, %if.then
  %70 = load i32, i32* %retval, align 4, !dbg !10359
  ret i32 %70, !dbg !10359
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_update_bits(%struct.regmap* %map, i32 %reg, i32 %mask, i32 %val, i8* %change, i1 zeroext %force_write) #0 !dbg !10360 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %mask.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  %change.addr = alloca i8*, align 8
  %force_write.addr = alloca i8, align 1
  %ret = alloca i32, align 4
  %tmp = alloca i32, align 4
  %orig = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10363, metadata !DIExpression()), !dbg !10364
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !10365, metadata !DIExpression()), !dbg !10366
  store i32 %mask, i32* %mask.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mask.addr, metadata !10367, metadata !DIExpression()), !dbg !10368
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !10369, metadata !DIExpression()), !dbg !10370
  store i8* %change, i8** %change.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %change.addr, metadata !10371, metadata !DIExpression()), !dbg !10372
  %frombool = zext i1 %force_write to i8
  store i8 %frombool, i8* %force_write.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_write.addr, metadata !10373, metadata !DIExpression()), !dbg !10374
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10375, metadata !DIExpression()), !dbg !10376
  call void @llvm.dbg.declare(metadata i32* %tmp, metadata !10377, metadata !DIExpression()), !dbg !10378
  call void @llvm.dbg.declare(metadata i32* %orig, metadata !10379, metadata !DIExpression()), !dbg !10380
  %0 = load i8*, i8** %change.addr, align 8, !dbg !10381
  %tobool = icmp ne i8* %0, null, !dbg !10381
  br i1 %tobool, label %if.then, label %if.end, !dbg !10383

if.then:                                          ; preds = %entry
  %1 = load i8*, i8** %change.addr, align 8, !dbg !10384
  store i8 0, i8* %1, align 1, !dbg !10385
  br label %if.end, !dbg !10386

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10387
  %3 = load i32, i32* %reg.addr, align 4, !dbg !10389
  %call = call zeroext i1 @regmap_volatile(%struct.regmap* %2, i32 %3) #11, !dbg !10390
  br i1 %call, label %land.lhs.true, label %if.else, !dbg !10391

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10392
  %reg_update_bits = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 32, !dbg !10393
  %5 = load i32 (i8*, i32, i32, i32)*, i32 (i8*, i32, i32, i32)** %reg_update_bits, align 8, !dbg !10393
  %tobool1 = icmp ne i32 (i8*, i32, i32, i32)* %5, null, !dbg !10392
  br i1 %tobool1, label %if.then2, label %if.else, !dbg !10394

if.then2:                                         ; preds = %land.lhs.true
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10395
  %reg_update_bits3 = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 32, !dbg !10397
  %7 = load i32 (i8*, i32, i32, i32)*, i32 (i8*, i32, i32, i32)** %reg_update_bits3, align 8, !dbg !10397
  %8 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10398
  %bus_context = getelementptr inbounds %struct.regmap, %struct.regmap* %8, i32 0, i32 9, !dbg !10399
  %9 = load i8*, i8** %bus_context, align 8, !dbg !10399
  %10 = load i32, i32* %reg.addr, align 4, !dbg !10400
  %11 = load i32, i32* %mask.addr, align 4, !dbg !10401
  %12 = load i32, i32* %val.addr, align 4, !dbg !10402
  %call4 = call i32 %7(i8* %9, i32 %10, i32 %11, i32 %12) #11, !dbg !10395
  store i32 %call4, i32* %ret, align 4, !dbg !10403
  %13 = load i32, i32* %ret, align 4, !dbg !10404
  %cmp = icmp eq i32 %13, 0, !dbg !10406
  br i1 %cmp, label %land.lhs.true5, label %if.end8, !dbg !10407

land.lhs.true5:                                   ; preds = %if.then2
  %14 = load i8*, i8** %change.addr, align 8, !dbg !10408
  %tobool6 = icmp ne i8* %14, null, !dbg !10408
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !10409

if.then7:                                         ; preds = %land.lhs.true5
  %15 = load i8*, i8** %change.addr, align 8, !dbg !10410
  store i8 1, i8* %15, align 1, !dbg !10411
  br label %if.end8, !dbg !10412

if.end8:                                          ; preds = %if.then7, %land.lhs.true5, %if.then2
  br label %if.end24, !dbg !10413

if.else:                                          ; preds = %land.lhs.true, %if.end
  %16 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10414
  %17 = load i32, i32* %reg.addr, align 4, !dbg !10416
  %call9 = call i32 @_regmap_read(%struct.regmap* %16, i32 %17, i32* %orig) #11, !dbg !10417
  store i32 %call9, i32* %ret, align 4, !dbg !10418
  %18 = load i32, i32* %ret, align 4, !dbg !10419
  %cmp10 = icmp ne i32 %18, 0, !dbg !10421
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !10422

if.then11:                                        ; preds = %if.else
  %19 = load i32, i32* %ret, align 4, !dbg !10423
  store i32 %19, i32* %retval, align 4, !dbg !10424
  br label %return, !dbg !10424

if.end12:                                         ; preds = %if.else
  %20 = load i32, i32* %orig, align 4, !dbg !10425
  %21 = load i32, i32* %mask.addr, align 4, !dbg !10426
  %neg = xor i32 %21, -1, !dbg !10427
  %and = and i32 %20, %neg, !dbg !10428
  store i32 %and, i32* %tmp, align 4, !dbg !10429
  %22 = load i32, i32* %val.addr, align 4, !dbg !10430
  %23 = load i32, i32* %mask.addr, align 4, !dbg !10431
  %and13 = and i32 %22, %23, !dbg !10432
  %24 = load i32, i32* %tmp, align 4, !dbg !10433
  %or = or i32 %24, %and13, !dbg !10433
  store i32 %or, i32* %tmp, align 4, !dbg !10433
  %25 = load i8, i8* %force_write.addr, align 1, !dbg !10434
  %tobool14 = trunc i8 %25 to i1, !dbg !10434
  br i1 %tobool14, label %if.then16, label %lor.lhs.false, !dbg !10436

lor.lhs.false:                                    ; preds = %if.end12
  %26 = load i32, i32* %tmp, align 4, !dbg !10437
  %27 = load i32, i32* %orig, align 4, !dbg !10438
  %cmp15 = icmp ne i32 %26, %27, !dbg !10439
  br i1 %cmp15, label %if.then16, label %if.end23, !dbg !10440

if.then16:                                        ; preds = %lor.lhs.false, %if.end12
  %28 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10441
  %29 = load i32, i32* %reg.addr, align 4, !dbg !10443
  %30 = load i32, i32* %tmp, align 4, !dbg !10444
  %call17 = call i32 @_regmap_write(%struct.regmap* %28, i32 %29, i32 %30) #11, !dbg !10445
  store i32 %call17, i32* %ret, align 4, !dbg !10446
  %31 = load i32, i32* %ret, align 4, !dbg !10447
  %cmp18 = icmp eq i32 %31, 0, !dbg !10449
  br i1 %cmp18, label %land.lhs.true19, label %if.end22, !dbg !10450

land.lhs.true19:                                  ; preds = %if.then16
  %32 = load i8*, i8** %change.addr, align 8, !dbg !10451
  %tobool20 = icmp ne i8* %32, null, !dbg !10451
  br i1 %tobool20, label %if.then21, label %if.end22, !dbg !10452

if.then21:                                        ; preds = %land.lhs.true19
  %33 = load i8*, i8** %change.addr, align 8, !dbg !10453
  store i8 1, i8* %33, align 1, !dbg !10454
  br label %if.end22, !dbg !10455

if.end22:                                         ; preds = %if.then21, %land.lhs.true19, %if.then16
  br label %if.end23, !dbg !10456

if.end23:                                         ; preds = %if.end22, %lor.lhs.false
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %if.end8
  %34 = load i32, i32* %ret, align 4, !dbg !10457
  store i32 %34, i32* %retval, align 4, !dbg !10458
  br label %return, !dbg !10458

return:                                           ; preds = %if.end24, %if.then11
  %35 = load i32, i32* %retval, align 4, !dbg !10459
  ret i32 %35, !dbg !10459
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_test_bits(%struct.regmap* %map, i32 %reg, i32 %bits) #0 !dbg !10460 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %bits.addr = alloca i32, align 4
  %val = alloca i32, align 4
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10461, metadata !DIExpression()), !dbg !10462
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !10463, metadata !DIExpression()), !dbg !10464
  store i32 %bits, i32* %bits.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bits.addr, metadata !10465, metadata !DIExpression()), !dbg !10466
  call void @llvm.dbg.declare(metadata i32* %val, metadata !10467, metadata !DIExpression()), !dbg !10468
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10469, metadata !DIExpression()), !dbg !10470
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10471
  %1 = load i32, i32* %reg.addr, align 4, !dbg !10472
  %call = call i32 @regmap_read(%struct.regmap* %0, i32 %1, i32* %val) #11, !dbg !10473
  store i32 %call, i32* %ret, align 4, !dbg !10474
  %2 = load i32, i32* %ret, align 4, !dbg !10475
  %tobool = icmp ne i32 %2, 0, !dbg !10475
  br i1 %tobool, label %if.then, label %if.end, !dbg !10477

if.then:                                          ; preds = %entry
  %3 = load i32, i32* %ret, align 4, !dbg !10478
  store i32 %3, i32* %retval, align 4, !dbg !10479
  br label %return, !dbg !10479

if.end:                                           ; preds = %entry
  %4 = load i32, i32* %val, align 4, !dbg !10480
  %5 = load i32, i32* %bits.addr, align 4, !dbg !10481
  %and = and i32 %4, %5, !dbg !10482
  %6 = load i32, i32* %bits.addr, align 4, !dbg !10483
  %cmp = icmp eq i32 %and, %6, !dbg !10484
  %conv = zext i1 %cmp to i32, !dbg !10484
  store i32 %conv, i32* %retval, align 4, !dbg !10485
  br label %return, !dbg !10485

return:                                           ; preds = %if.end, %if.then
  %7 = load i32, i32* %retval, align 4, !dbg !10486
  ret i32 %7, !dbg !10486
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local void @regmap_async_complete_cb(%struct.regmap_async* %async, i32 %ret) #0 !dbg !10487 {
entry:
  %lock.addr.i6 = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i6, metadata !10490, metadata !DIExpression()), !dbg !10494
  %lock.addr.i = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i, metadata !10496, metadata !DIExpression()), !dbg !10498
  %async.addr = alloca %struct.regmap_async*, align 8
  %ret.addr = alloca i32, align 4
  %map = alloca %struct.regmap*, align 8
  %wake = alloca i8, align 1
  store %struct.regmap_async* %async, %struct.regmap_async** %async.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_async** %async.addr, metadata !10500, metadata !DIExpression()), !dbg !10501
  store i32 %ret, i32* %ret.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ret.addr, metadata !10502, metadata !DIExpression()), !dbg !10503
  call void @llvm.dbg.declare(metadata %struct.regmap** %map, metadata !10504, metadata !DIExpression()), !dbg !10505
  %0 = load %struct.regmap_async*, %struct.regmap_async** %async.addr, align 8, !dbg !10506
  %map1 = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %0, i32 0, i32 1, !dbg !10507
  %1 = load %struct.regmap*, %struct.regmap** %map1, align 8, !dbg !10507
  store %struct.regmap* %1, %struct.regmap** %map, align 8, !dbg !10505
  call void @llvm.dbg.declare(metadata i8* %wake, metadata !10508, metadata !DIExpression()), !dbg !10509
  %2 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !10510
  call void @trace_regmap_async_io_complete(%struct.regmap* %2) #11, !dbg !10511
  %3 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !10512
  %async_lock = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 12, !dbg !10513
  store %struct.spinlock* %async_lock, %struct.spinlock** %lock.addr.i, align 8
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !10514, !srcloc !10516
  %4 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8, !dbg !10517
  %5 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %4, i32 0, i32 0, !dbg !10517
  %rlock.i = bitcast %union.anon.0* %5 to %struct.raw_spinlock*, !dbg !10517
  %6 = load %struct.regmap_async*, %struct.regmap_async** %async.addr, align 8, !dbg !10519
  %list = getelementptr inbounds %struct.regmap_async, %struct.regmap_async* %6, i32 0, i32 0, !dbg !10520
  %7 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !10521
  %async_free = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 15, !dbg !10522
  call void @list_move(%struct.list_head* %list, %struct.list_head* %async_free) #11, !dbg !10523
  %8 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !10524
  %async_list = getelementptr inbounds %struct.regmap, %struct.regmap* %8, i32 0, i32 14, !dbg !10525
  %call = call i32 @list_empty(%struct.list_head* %async_list) #11, !dbg !10526
  %tobool = icmp ne i32 %call, 0, !dbg !10526
  %frombool = zext i1 %tobool to i8, !dbg !10527
  store i8 %frombool, i8* %wake, align 1, !dbg !10527
  %9 = load i32, i32* %ret.addr, align 4, !dbg !10528
  %cmp = icmp ne i32 %9, 0, !dbg !10530
  br i1 %cmp, label %if.then, label %if.end, !dbg !10531

if.then:                                          ; preds = %entry
  %10 = load i32, i32* %ret.addr, align 4, !dbg !10532
  %11 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !10533
  %async_ret = getelementptr inbounds %struct.regmap, %struct.regmap* %11, i32 0, i32 16, !dbg !10534
  store i32 %10, i32* %async_ret, align 8, !dbg !10535
  br label %if.end, !dbg !10533

if.end:                                           ; preds = %if.then, %entry
  %12 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !10536
  %async_lock2 = getelementptr inbounds %struct.regmap, %struct.regmap* %12, i32 0, i32 12, !dbg !10537
  store %struct.spinlock* %async_lock2, %struct.spinlock** %lock.addr.i6, align 8
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !10538, !srcloc !10540
  %13 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i6, align 8, !dbg !10541
  %14 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %13, i32 0, i32 0, !dbg !10541
  %rlock.i7 = bitcast %union.anon.0* %14 to %struct.raw_spinlock*, !dbg !10541
  %15 = load i8, i8* %wake, align 1, !dbg !10543
  %tobool3 = trunc i8 %15 to i1, !dbg !10543
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !10545

if.then4:                                         ; preds = %if.end
  %16 = load %struct.regmap*, %struct.regmap** %map, align 8, !dbg !10546
  %async_waitq = getelementptr inbounds %struct.regmap, %struct.regmap* %16, i32 0, i32 13, !dbg !10546
  call void @__wake_up(%struct.wait_queue_head* %async_waitq, i32 3, i32 1, i8* null) #11, !dbg !10546
  br label %if.end5, !dbg !10546

if.end5:                                          ; preds = %if.then4, %if.end
  ret void, !dbg !10547
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_async_io_complete(%struct.regmap* %map) #0 !dbg !10548 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10549, metadata !DIExpression()), !dbg !10550
  ret void, !dbg !10550
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @list_move(%struct.list_head* %list, %struct.list_head* %head) #0 !dbg !10551 {
entry:
  %list.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %list, %struct.list_head** %list.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %list.addr, metadata !10554, metadata !DIExpression()), !dbg !10555
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %head.addr, metadata !10556, metadata !DIExpression()), !dbg !10557
  %0 = load %struct.list_head*, %struct.list_head** %list.addr, align 8, !dbg !10558
  call void @__list_del_entry(%struct.list_head* %0) #11, !dbg !10559
  %1 = load %struct.list_head*, %struct.list_head** %list.addr, align 8, !dbg !10560
  %2 = load %struct.list_head*, %struct.list_head** %head.addr, align 8, !dbg !10561
  call void @list_add(%struct.list_head* %1, %struct.list_head* %2) #11, !dbg !10562
  ret void, !dbg !10563
}

; Function Attrs: noredzone
declare dso_local void @__wake_up(%struct.wait_queue_head*, i32, i32, i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_async_complete(%struct.regmap* %map) #0 !dbg !10564 {
entry:
  %lock.addr.i40 = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i40, metadata !5961, metadata !DIExpression()), !dbg !10565
  %flags.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %flags.addr.i, metadata !5967, metadata !DIExpression()), !dbg !10567
  %tmp.i = alloca i32, align 4
  %tmp8.i = alloca i32, align 4
  %lock.addr.i = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i, metadata !4413, metadata !DIExpression()), !dbg !10568
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %flags = alloca i64, align 8
  %ret = alloca i32, align 4
  %__wq_entry = alloca %struct.wait_queue_entry, align 8
  %__ret = alloca i64, align 8
  %__int = alloca i64, align 8
  %tmp = alloca i64, align 8
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %tmp18 = alloca i32, align 4
  %__dummy22 = alloca i64, align 8
  %__dummy223 = alloca i64, align 8
  %tmp26 = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10575, metadata !DIExpression()), !dbg !10576
  call void @llvm.dbg.declare(metadata i64* %flags, metadata !10577, metadata !DIExpression()), !dbg !10578
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10579, metadata !DIExpression()), !dbg !10580
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10581
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 8, !dbg !10583
  %1 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !10583
  %tobool = icmp ne %struct.regmap_bus* %1, null, !dbg !10581
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !10584

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10585
  %bus1 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 8, !dbg !10586
  %3 = load %struct.regmap_bus*, %struct.regmap_bus** %bus1, align 8, !dbg !10586
  %async_write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %3, i32 0, i32 3, !dbg !10587
  %4 = load i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)*, i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)** %async_write, align 8, !dbg !10587
  %tobool2 = icmp ne i32 (i8*, i8*, i64, i8*, i64, %struct.regmap_async*)* %4, null, !dbg !10585
  br i1 %tobool2, label %if.end, label %if.then, !dbg !10588

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !10589
  br label %return, !dbg !10589

if.end:                                           ; preds = %lor.lhs.false
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10590
  call void @trace_regmap_async_complete_start(%struct.regmap* %5) #11, !dbg !10591
  br label %do.body, !dbg !10592

do.body:                                          ; preds = %if.end
  br label %do.body3, !dbg !10593

do.body3:                                         ; preds = %do.body
  br label %do.body4, !dbg !10595

do.body4:                                         ; preds = %do.body3
  br label %do.end, !dbg !10597

do.end:                                           ; preds = %do.body4
  br label %do.end5, !dbg !10595

do.end5:                                          ; preds = %do.end
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10599
  %call = call i32 @regmap_async_is_done(%struct.regmap* %6) #11, !dbg !10599
  %tobool6 = icmp ne i32 %call, 0, !dbg !10599
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !10593

if.then7:                                         ; preds = %do.end5
  br label %do.end15, !dbg !10599

if.end8:                                          ; preds = %do.end5
  call void @llvm.dbg.declare(metadata %struct.wait_queue_entry* %__wq_entry, metadata !10601, metadata !DIExpression()), !dbg !10614
  call void @llvm.dbg.declare(metadata i64* %__ret, metadata !10615, metadata !DIExpression()), !dbg !10614
  store i64 0, i64* %__ret, align 8, !dbg !10614
  call void @init_wait_entry(%struct.wait_queue_entry* %__wq_entry, i32 0) #11, !dbg !10614
  br label %for.cond, !dbg !10614

for.cond:                                         ; preds = %if.end13, %if.end8
  call void @llvm.dbg.declare(metadata i64* %__int, metadata !10616, metadata !DIExpression()), !dbg !10620
  %7 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10620
  %async_waitq = getelementptr inbounds %struct.regmap, %struct.regmap* %7, i32 0, i32 13, !dbg !10620
  %call9 = call i64 @prepare_to_wait_event(%struct.wait_queue_head* %async_waitq, %struct.wait_queue_entry* %__wq_entry, i32 2) #11, !dbg !10620
  store i64 %call9, i64* %__int, align 8, !dbg !10620
  %8 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10621
  %call10 = call i32 @regmap_async_is_done(%struct.regmap* %8) #11, !dbg !10621
  %tobool11 = icmp ne i32 %call10, 0, !dbg !10621
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !10620

if.then12:                                        ; preds = %for.cond
  br label %for.end, !dbg !10621

if.end13:                                         ; preds = %for.cond
  call void @schedule() #11, !dbg !10620
  br label %for.cond, !dbg !10623, !llvm.loop !10624

for.end:                                          ; preds = %if.then12
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10614
  %async_waitq14 = getelementptr inbounds %struct.regmap, %struct.regmap* %9, i32 0, i32 13, !dbg !10614
  call void @finish_wait(%struct.wait_queue_head* %async_waitq14, %struct.wait_queue_entry* %__wq_entry) #11, !dbg !10614
  br label %__out, !dbg !10614

__out:                                            ; preds = %for.end
  call void @llvm.dbg.label(metadata !10626), !dbg !10614
  %10 = load i64, i64* %__ret, align 8, !dbg !10614
  store i64 %10, i64* %tmp, align 8, !dbg !10614
  %11 = load i64, i64* %tmp, align 8, !dbg !10614
  br label %do.end15, !dbg !10593

do.end15:                                         ; preds = %__out, %if.then7
  br label %do.body16, !dbg !10627

do.body16:                                        ; preds = %do.end15
  br label %do.body17, !dbg !10628

do.body17:                                        ; preds = %do.body16
  call void @llvm.dbg.declare(metadata i64* %__dummy, metadata !10629, metadata !DIExpression()), !dbg !10631
  call void @llvm.dbg.declare(metadata i64* %__dummy2, metadata !10632, metadata !DIExpression()), !dbg !10631
  %cmp = icmp eq i64* %__dummy, %__dummy2, !dbg !10631
  %conv = zext i1 %cmp to i32, !dbg !10631
  store i32 1, i32* %tmp18, align 4, !dbg !10631
  %12 = load i32, i32* %tmp18, align 4, !dbg !10631
  br label %do.body19, !dbg !10633

do.body19:                                        ; preds = %do.body17
  br label %do.body20, !dbg !10634

do.body20:                                        ; preds = %do.body19
  br label %do.body21, !dbg !10635

do.body21:                                        ; preds = %do.body20
  call void @llvm.dbg.declare(metadata i64* %__dummy22, metadata !10637, metadata !DIExpression()), !dbg !10640
  call void @llvm.dbg.declare(metadata i64* %__dummy223, metadata !10641, metadata !DIExpression()), !dbg !10640
  %cmp24 = icmp eq i64* %__dummy22, %__dummy223, !dbg !10640
  %conv25 = zext i1 %cmp24 to i32, !dbg !10640
  store i32 1, i32* %tmp26, align 4, !dbg !10640
  %13 = load i32, i32* %tmp26, align 4, !dbg !10640
  %call27 = call i64 @arch_local_irq_save() #11, !dbg !10642
  store i64 %call27, i64* %flags, align 8, !dbg !10642
  br label %do.end28, !dbg !10642

do.end28:                                         ; preds = %do.body21
  br label %do.end29, !dbg !10635

do.end29:                                         ; preds = %do.end28
  br label %do.body30, !dbg !10634

do.body30:                                        ; preds = %do.end29
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !10643, !srcloc !10644
  br label %do.body31, !dbg !10643

do.body31:                                        ; preds = %do.body30
  %14 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10645
  %async_lock = getelementptr inbounds %struct.regmap, %struct.regmap* %14, i32 0, i32 12, !dbg !10645
  store %struct.spinlock* %async_lock, %struct.spinlock** %lock.addr.i, align 8
  %15 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8, !dbg !10646
  %16 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %15, i32 0, i32 0, !dbg !10647
  %rlock.i = bitcast %union.anon.0* %16 to %struct.raw_spinlock*, !dbg !10647
  br label %do.end33, !dbg !10645

do.end33:                                         ; preds = %do.body31
  br label %do.end34, !dbg !10643

do.end34:                                         ; preds = %do.end33
  br label %do.end35, !dbg !10634

do.end35:                                         ; preds = %do.end34
  br label %do.end36, !dbg !10633

do.end36:                                         ; preds = %do.end35
  br label %do.end37, !dbg !10628

do.end37:                                         ; preds = %do.end36
  %17 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10648
  %async_ret = getelementptr inbounds %struct.regmap, %struct.regmap* %17, i32 0, i32 16, !dbg !10649
  %18 = load i32, i32* %async_ret, align 8, !dbg !10649
  store i32 %18, i32* %ret, align 4, !dbg !10650
  %19 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10651
  %async_ret38 = getelementptr inbounds %struct.regmap, %struct.regmap* %19, i32 0, i32 16, !dbg !10652
  store i32 0, i32* %async_ret38, align 8, !dbg !10653
  %20 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10654
  %async_lock39 = getelementptr inbounds %struct.regmap, %struct.regmap* %20, i32 0, i32 12, !dbg !10655
  %21 = load i64, i64* %flags, align 8, !dbg !10656
  store %struct.spinlock* %async_lock39, %struct.spinlock** %lock.addr.i40, align 8
  store i64 %21, i64* %flags.addr.i, align 8
  call void @llvm.dbg.declare(metadata !45, metadata !5978, metadata !DIExpression()) #10, !dbg !10657
  call void @llvm.dbg.declare(metadata !45, metadata !5982, metadata !DIExpression()) #10, !dbg !10657
  store i32 1, i32* %tmp.i, align 4, !dbg !10657
  %22 = load i32, i32* %tmp.i, align 4, !dbg !10657
  call void @llvm.dbg.declare(metadata !45, metadata !5983, metadata !DIExpression()) #10, !dbg !10658
  call void @llvm.dbg.declare(metadata !45, metadata !5989, metadata !DIExpression()) #10, !dbg !10658
  store i32 1, i32* %tmp8.i, align 4, !dbg !10658
  %23 = load i32, i32* %tmp8.i, align 4, !dbg !10658
  %24 = load i64, i64* %flags.addr.i, align 8, !dbg !10659
  call void @arch_local_irq_restore(i64 %24) #14, !dbg !10659
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !10660, !srcloc !5993
  %25 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i40, align 8, !dbg !10661
  %26 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %25, i32 0, i32 0, !dbg !10661
  %rlock.i41 = bitcast %union.anon.0* %26 to %struct.raw_spinlock*, !dbg !10661
  %27 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10662
  call void @trace_regmap_async_complete_done(%struct.regmap* %27) #11, !dbg !10663
  %28 = load i32, i32* %ret, align 4, !dbg !10664
  store i32 %28, i32* %retval, align 4, !dbg !10665
  br label %return, !dbg !10665

return:                                           ; preds = %do.end37, %if.then
  %29 = load i32, i32* %retval, align 4, !dbg !10666
  ret i32 %29, !dbg !10666
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_async_complete_start(%struct.regmap* %map) #0 !dbg !10667 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10668, metadata !DIExpression()), !dbg !10669
  ret void, !dbg !10669
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_async_is_done(%struct.regmap* %map) #0 !dbg !10670 {
entry:
  %lock.addr.i21 = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i21, metadata !5961, metadata !DIExpression()), !dbg !10671
  %flags.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %flags.addr.i, metadata !5967, metadata !DIExpression()), !dbg !10673
  %tmp.i = alloca i32, align 4
  %tmp8.i = alloca i32, align 4
  %lock.addr.i = alloca %struct.spinlock*, align 8
  call void @llvm.dbg.declare(metadata %struct.spinlock** %lock.addr.i, metadata !4413, metadata !DIExpression()), !dbg !10674
  %map.addr = alloca %struct.regmap*, align 8
  %flags = alloca i64, align 8
  %ret = alloca i32, align 4
  %__dummy = alloca i64, align 8
  %__dummy2 = alloca i64, align 8
  %tmp = alloca i32, align 4
  %__dummy5 = alloca i64, align 8
  %__dummy26 = alloca i64, align 8
  %tmp9 = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10681, metadata !DIExpression()), !dbg !10682
  call void @llvm.dbg.declare(metadata i64* %flags, metadata !10683, metadata !DIExpression()), !dbg !10684
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10685, metadata !DIExpression()), !dbg !10686
  br label %do.body, !dbg !10687

do.body:                                          ; preds = %entry
  br label %do.body1, !dbg !10688

do.body1:                                         ; preds = %do.body
  call void @llvm.dbg.declare(metadata i64* %__dummy, metadata !10689, metadata !DIExpression()), !dbg !10691
  call void @llvm.dbg.declare(metadata i64* %__dummy2, metadata !10692, metadata !DIExpression()), !dbg !10691
  %cmp = icmp eq i64* %__dummy, %__dummy2, !dbg !10691
  %conv = zext i1 %cmp to i32, !dbg !10691
  store i32 1, i32* %tmp, align 4, !dbg !10691
  %0 = load i32, i32* %tmp, align 4, !dbg !10691
  br label %do.body2, !dbg !10693

do.body2:                                         ; preds = %do.body1
  br label %do.body3, !dbg !10694

do.body3:                                         ; preds = %do.body2
  br label %do.body4, !dbg !10695

do.body4:                                         ; preds = %do.body3
  call void @llvm.dbg.declare(metadata i64* %__dummy5, metadata !10697, metadata !DIExpression()), !dbg !10700
  call void @llvm.dbg.declare(metadata i64* %__dummy26, metadata !10701, metadata !DIExpression()), !dbg !10700
  %cmp7 = icmp eq i64* %__dummy5, %__dummy26, !dbg !10700
  %conv8 = zext i1 %cmp7 to i32, !dbg !10700
  store i32 1, i32* %tmp9, align 4, !dbg !10700
  %1 = load i32, i32* %tmp9, align 4, !dbg !10700
  %call = call i64 @arch_local_irq_save() #11, !dbg !10702
  store i64 %call, i64* %flags, align 8, !dbg !10702
  br label %do.end, !dbg !10702

do.end:                                           ; preds = %do.body4
  br label %do.end10, !dbg !10695

do.end10:                                         ; preds = %do.end
  br label %do.body11, !dbg !10694

do.body11:                                        ; preds = %do.end10
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !10703, !srcloc !10704
  br label %do.body12, !dbg !10703

do.body12:                                        ; preds = %do.body11
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10705
  %async_lock = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 12, !dbg !10705
  store %struct.spinlock* %async_lock, %struct.spinlock** %lock.addr.i, align 8
  %3 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i, align 8, !dbg !10706
  %4 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %3, i32 0, i32 0, !dbg !10707
  %rlock.i = bitcast %union.anon.0* %4 to %struct.raw_spinlock*, !dbg !10707
  br label %do.end14, !dbg !10705

do.end14:                                         ; preds = %do.body12
  br label %do.end15, !dbg !10703

do.end15:                                         ; preds = %do.end14
  br label %do.end16, !dbg !10694

do.end16:                                         ; preds = %do.end15
  br label %do.end17, !dbg !10693

do.end17:                                         ; preds = %do.end16
  br label %do.end18, !dbg !10688

do.end18:                                         ; preds = %do.end17
  %5 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10708
  %async_list = getelementptr inbounds %struct.regmap, %struct.regmap* %5, i32 0, i32 14, !dbg !10709
  %call19 = call i32 @list_empty(%struct.list_head* %async_list) #11, !dbg !10710
  store i32 %call19, i32* %ret, align 4, !dbg !10711
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10712
  %async_lock20 = getelementptr inbounds %struct.regmap, %struct.regmap* %6, i32 0, i32 12, !dbg !10713
  %7 = load i64, i64* %flags, align 8, !dbg !10714
  store %struct.spinlock* %async_lock20, %struct.spinlock** %lock.addr.i21, align 8
  store i64 %7, i64* %flags.addr.i, align 8
  call void @llvm.dbg.declare(metadata !45, metadata !5978, metadata !DIExpression()) #10, !dbg !10715
  call void @llvm.dbg.declare(metadata !45, metadata !5982, metadata !DIExpression()) #10, !dbg !10715
  store i32 1, i32* %tmp.i, align 4, !dbg !10715
  %8 = load i32, i32* %tmp.i, align 4, !dbg !10715
  call void @llvm.dbg.declare(metadata !45, metadata !5983, metadata !DIExpression()) #10, !dbg !10716
  call void @llvm.dbg.declare(metadata !45, metadata !5989, metadata !DIExpression()) #10, !dbg !10716
  store i32 1, i32* %tmp8.i, align 4, !dbg !10716
  %9 = load i32, i32* %tmp8.i, align 4, !dbg !10716
  %10 = load i64, i64* %flags.addr.i, align 8, !dbg !10717
  call void @arch_local_irq_restore(i64 %10) #14, !dbg !10717
  call void asm sideeffect "", "~{memory},~{dirflag},~{fpsr},~{flags}"() #10, !dbg !10718, !srcloc !5993
  %11 = load %struct.spinlock*, %struct.spinlock** %lock.addr.i21, align 8, !dbg !10719
  %12 = getelementptr inbounds %struct.spinlock, %struct.spinlock* %11, i32 0, i32 0, !dbg !10719
  %rlock.i22 = bitcast %union.anon.0* %12 to %struct.raw_spinlock*, !dbg !10719
  %13 = load i32, i32* %ret, align 4, !dbg !10720
  ret i32 %13, !dbg !10721
}

; Function Attrs: noredzone
declare dso_local void @init_wait_entry(%struct.wait_queue_entry*, i32) #2

; Function Attrs: noredzone
declare dso_local i64 @prepare_to_wait_event(%struct.wait_queue_head*, %struct.wait_queue_entry*, i32) #2

; Function Attrs: noredzone
declare dso_local void @schedule() #2

; Function Attrs: noredzone
declare dso_local void @finish_wait(%struct.wait_queue_head*, %struct.wait_queue_entry*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i64 @arch_local_irq_save() #0 !dbg !10722 {
entry:
  %f = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %f, metadata !10726, metadata !DIExpression()), !dbg !10727
  %call = call i64 @arch_local_save_flags() #11, !dbg !10728
  store i64 %call, i64* %f, align 8, !dbg !10729
  call void @arch_local_irq_disable() #11, !dbg !10730
  %0 = load i64, i64* %f, align 8, !dbg !10731
  ret i64 %0, !dbg !10732
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_async_complete_done(%struct.regmap* %map) #0 !dbg !10733 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10734, metadata !DIExpression()), !dbg !10735
  ret void, !dbg !10735
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_register_patch(%struct.regmap* %map, %struct.reg_sequence* %regs, i32 %num_regs) #0 !dbg !3863 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %regs.addr = alloca %struct.reg_sequence*, align 8
  %num_regs.addr = alloca i32, align 4
  %p = alloca %struct.reg_sequence*, align 8
  %ret = alloca i32, align 4
  %bypass = alloca i8, align 1
  %__ret_warn_once = alloca i32, align 4
  %__ret_warn_on = alloca i32, align 4
  %tmp = alloca i64, align 8
  %tmp37 = alloca i64, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10736, metadata !DIExpression()), !dbg !10737
  store %struct.reg_sequence* %regs, %struct.reg_sequence** %regs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.reg_sequence** %regs.addr, metadata !10738, metadata !DIExpression()), !dbg !10739
  store i32 %num_regs, i32* %num_regs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_regs.addr, metadata !10740, metadata !DIExpression()), !dbg !10741
  call void @llvm.dbg.declare(metadata %struct.reg_sequence** %p, metadata !10742, metadata !DIExpression()), !dbg !10743
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !10744, metadata !DIExpression()), !dbg !10745
  call void @llvm.dbg.declare(metadata i8* %bypass, metadata !10746, metadata !DIExpression()), !dbg !10747
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_once, metadata !10748, metadata !DIExpression()), !dbg !10751
  %0 = load i32, i32* %num_regs.addr, align 4, !dbg !10751
  %cmp = icmp sle i32 %0, 0, !dbg !10751
  %lnot = xor i1 %cmp, true, !dbg !10751
  %lnot1 = xor i1 %lnot, true, !dbg !10751
  %lnot.ext = zext i1 %lnot1 to i32, !dbg !10751
  store i32 %lnot.ext, i32* %__ret_warn_once, align 4, !dbg !10751
  %1 = load i32, i32* %__ret_warn_once, align 4, !dbg !10752
  %tobool = icmp ne i32 %1, 0, !dbg !10752
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !10752

land.rhs:                                         ; preds = %entry
  %2 = load i8, i8* @regmap_register_patch.__warned, align 1, !dbg !10752
  %tobool2 = trunc i8 %2 to i1, !dbg !10752
  %lnot3 = xor i1 %tobool2, true, !dbg !10752
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %3 = phi i1 [ false, %entry ], [ %lnot3, %land.rhs ], !dbg !10754
  %lnot5 = xor i1 %3, true, !dbg !10752
  %lnot7 = xor i1 %lnot5, true, !dbg !10752
  %lnot.ext8 = zext i1 %lnot7 to i32, !dbg !10752
  %conv = sext i32 %lnot.ext8 to i64, !dbg !10752
  %tobool9 = icmp ne i64 %conv, 0, !dbg !10752
  br i1 %tobool9, label %if.then, label %if.end36, !dbg !10751

if.then:                                          ; preds = %land.end
  store i8 1, i8* @regmap_register_patch.__warned, align 1, !dbg !10755
  call void @llvm.dbg.declare(metadata i32* %__ret_warn_on, metadata !10757, metadata !DIExpression()), !dbg !10759
  store i32 1, i32* %__ret_warn_on, align 4, !dbg !10759
  %4 = load i32, i32* %__ret_warn_on, align 4, !dbg !10760
  %tobool10 = icmp ne i32 %4, 0, !dbg !10760
  %lnot11 = xor i1 %tobool10, true, !dbg !10760
  %lnot13 = xor i1 %lnot11, true, !dbg !10760
  %lnot.ext14 = zext i1 %lnot13 to i32, !dbg !10760
  %conv15 = sext i32 %lnot.ext14 to i64, !dbg !10760
  %tobool16 = icmp ne i64 %conv15, 0, !dbg !10760
  br i1 %tobool16, label %if.then17, label %if.end, !dbg !10759

if.then17:                                        ; preds = %if.then
  br label %do.body, !dbg !10760

do.body:                                          ; preds = %if.then17
  br label %do.body18, !dbg !10762

do.body18:                                        ; preds = %do.body
  br label %do.end, !dbg !10764

do.end:                                           ; preds = %do.body18
  %5 = load i32, i32* %num_regs.addr, align 4, !dbg !10762
  call void (i8*, ...) @__warn_printk(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.14, i64 0, i64 0), i32 %5) #11, !dbg !10762
  br label %do.body19, !dbg !10762

do.body19:                                        ; preds = %do.end
  br label %do.body20, !dbg !10766

do.body20:                                        ; preds = %do.body19
  br label %do.end21, !dbg !10768

do.end21:                                         ; preds = %do.body20
  br label %do.body22, !dbg !10766

do.body22:                                        ; preds = %do.end21
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0), i32 3201, i32 2313, i64 12) #10, !dbg !10770, !srcloc !10772
  br label %do.end23, !dbg !10770

do.end23:                                         ; preds = %do.body22
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.reachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 213) #10, !dbg !10773, !srcloc !10775
  br label %do.body24, !dbg !10766

do.body24:                                        ; preds = %do.end23
  br label %do.end25, !dbg !10776

do.end25:                                         ; preds = %do.body24
  br label %do.end26, !dbg !10766

do.end26:                                         ; preds = %do.end25
  br label %do.body27, !dbg !10762

do.body27:                                        ; preds = %do.end26
  br label %do.end28, !dbg !10778

do.end28:                                         ; preds = %do.body27
  br label %do.end29, !dbg !10762

do.end29:                                         ; preds = %do.end28
  br label %if.end, !dbg !10762

if.end:                                           ; preds = %do.end29, %if.then
  %6 = load i32, i32* %__ret_warn_on, align 4, !dbg !10759
  %tobool30 = icmp ne i32 %6, 0, !dbg !10759
  %lnot31 = xor i1 %tobool30, true, !dbg !10759
  %lnot33 = xor i1 %lnot31, true, !dbg !10759
  %lnot.ext34 = zext i1 %lnot33 to i32, !dbg !10759
  %conv35 = sext i32 %lnot.ext34 to i64, !dbg !10759
  store i64 %conv35, i64* %tmp, align 8, !dbg !10760
  %7 = load i64, i64* %tmp, align 8, !dbg !10759
  br label %if.end36, !dbg !10755

if.end36:                                         ; preds = %if.end, %land.end
  %8 = load i32, i32* %__ret_warn_once, align 4, !dbg !10751
  %tobool38 = icmp ne i32 %8, 0, !dbg !10751
  %lnot39 = xor i1 %tobool38, true, !dbg !10751
  %lnot41 = xor i1 %lnot39, true, !dbg !10751
  %lnot.ext42 = zext i1 %lnot41 to i32, !dbg !10751
  %conv43 = sext i32 %lnot.ext42 to i64, !dbg !10751
  store i64 %conv43, i64* %tmp37, align 8, !dbg !10752
  %9 = load i64, i64* %tmp37, align 8, !dbg !10751
  %tobool44 = icmp ne i64 %9, 0, !dbg !10780
  br i1 %tobool44, label %if.then45, label %if.end46, !dbg !10781

if.then45:                                        ; preds = %if.end36
  store i32 0, i32* %retval, align 4, !dbg !10782
  br label %return, !dbg !10782

if.end46:                                         ; preds = %if.end36
  %10 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10783
  %patch = getelementptr inbounds %struct.regmap, %struct.regmap* %10, i32 0, i32 53, !dbg !10784
  %11 = load %struct.reg_sequence*, %struct.reg_sequence** %patch, align 8, !dbg !10784
  %12 = bitcast %struct.reg_sequence* %11 to i8*, !dbg !10783
  %13 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10785
  %patch_regs = getelementptr inbounds %struct.regmap, %struct.regmap* %13, i32 0, i32 54, !dbg !10786
  %14 = load i32, i32* %patch_regs, align 8, !dbg !10786
  %15 = load i32, i32* %num_regs.addr, align 4, !dbg !10787
  %add = add i32 %14, %15, !dbg !10788
  %conv47 = sext i32 %add to i64, !dbg !10789
  %mul = mul i64 12, %conv47, !dbg !10790
  %call = call i8* @krealloc(i8* %12, i64 %mul, i32 3264) #11, !dbg !10791
  %16 = bitcast i8* %call to %struct.reg_sequence*, !dbg !10791
  store %struct.reg_sequence* %16, %struct.reg_sequence** %p, align 8, !dbg !10792
  %17 = load %struct.reg_sequence*, %struct.reg_sequence** %p, align 8, !dbg !10793
  %tobool48 = icmp ne %struct.reg_sequence* %17, null, !dbg !10793
  br i1 %tobool48, label %if.then49, label %if.else, !dbg !10795

if.then49:                                        ; preds = %if.end46
  %18 = load %struct.reg_sequence*, %struct.reg_sequence** %p, align 8, !dbg !10796
  %19 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10798
  %patch_regs50 = getelementptr inbounds %struct.regmap, %struct.regmap* %19, i32 0, i32 54, !dbg !10799
  %20 = load i32, i32* %patch_regs50, align 8, !dbg !10799
  %idx.ext = sext i32 %20 to i64, !dbg !10800
  %add.ptr = getelementptr %struct.reg_sequence, %struct.reg_sequence* %18, i64 %idx.ext, !dbg !10800
  %21 = bitcast %struct.reg_sequence* %add.ptr to i8*, !dbg !10801
  %22 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !10802
  %23 = bitcast %struct.reg_sequence* %22 to i8*, !dbg !10801
  %24 = load i32, i32* %num_regs.addr, align 4, !dbg !10803
  %conv51 = sext i32 %24 to i64, !dbg !10803
  %mul52 = mul i64 %conv51, 12, !dbg !10804
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %23, i64 %mul52, i1 false), !dbg !10801
  %25 = load %struct.reg_sequence*, %struct.reg_sequence** %p, align 8, !dbg !10805
  %26 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10806
  %patch53 = getelementptr inbounds %struct.regmap, %struct.regmap* %26, i32 0, i32 53, !dbg !10807
  store %struct.reg_sequence* %25, %struct.reg_sequence** %patch53, align 8, !dbg !10808
  %27 = load i32, i32* %num_regs.addr, align 4, !dbg !10809
  %28 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10810
  %patch_regs54 = getelementptr inbounds %struct.regmap, %struct.regmap* %28, i32 0, i32 54, !dbg !10811
  %29 = load i32, i32* %patch_regs54, align 8, !dbg !10812
  %add55 = add i32 %29, %27, !dbg !10812
  store i32 %add55, i32* %patch_regs54, align 8, !dbg !10812
  br label %if.end56, !dbg !10813

if.else:                                          ; preds = %if.end46
  store i32 -12, i32* %retval, align 4, !dbg !10814
  br label %return, !dbg !10814

if.end56:                                         ; preds = %if.then49
  %30 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10816
  %lock = getelementptr inbounds %struct.regmap, %struct.regmap* %30, i32 0, i32 1, !dbg !10817
  %31 = load void (i8*)*, void (i8*)** %lock, align 8, !dbg !10817
  %32 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10818
  %lock_arg = getelementptr inbounds %struct.regmap, %struct.regmap* %32, i32 0, i32 3, !dbg !10819
  %33 = load i8*, i8** %lock_arg, align 8, !dbg !10819
  call void %31(i8* %33) #11, !dbg !10816
  %34 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10820
  %cache_bypass = getelementptr inbounds %struct.regmap, %struct.regmap* %34, i32 0, i32 46, !dbg !10821
  %35 = load i8, i8* %cache_bypass, align 1, !dbg !10821
  %tobool57 = trunc i8 %35 to i1, !dbg !10821
  %frombool = zext i1 %tobool57 to i8, !dbg !10822
  store i8 %frombool, i8* %bypass, align 1, !dbg !10822
  %36 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10823
  %cache_bypass58 = getelementptr inbounds %struct.regmap, %struct.regmap* %36, i32 0, i32 46, !dbg !10824
  store i8 1, i8* %cache_bypass58, align 1, !dbg !10825
  %37 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10826
  %async = getelementptr inbounds %struct.regmap, %struct.regmap* %37, i32 0, i32 11, !dbg !10827
  store i8 1, i8* %async, align 8, !dbg !10828
  %38 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10829
  %39 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !10830
  %40 = load i32, i32* %num_regs.addr, align 4, !dbg !10831
  %conv59 = sext i32 %40 to i64, !dbg !10831
  %call60 = call i32 @_regmap_multi_reg_write(%struct.regmap* %38, %struct.reg_sequence* %39, i64 %conv59) #11, !dbg !10832
  store i32 %call60, i32* %ret, align 4, !dbg !10833
  %41 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10834
  %async61 = getelementptr inbounds %struct.regmap, %struct.regmap* %41, i32 0, i32 11, !dbg !10835
  store i8 0, i8* %async61, align 8, !dbg !10836
  %42 = load i8, i8* %bypass, align 1, !dbg !10837
  %tobool62 = trunc i8 %42 to i1, !dbg !10837
  %43 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10838
  %cache_bypass63 = getelementptr inbounds %struct.regmap, %struct.regmap* %43, i32 0, i32 46, !dbg !10839
  %frombool64 = zext i1 %tobool62 to i8, !dbg !10840
  store i8 %frombool64, i8* %cache_bypass63, align 1, !dbg !10840
  %44 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10841
  %unlock = getelementptr inbounds %struct.regmap, %struct.regmap* %44, i32 0, i32 2, !dbg !10842
  %45 = load void (i8*)*, void (i8*)** %unlock, align 8, !dbg !10842
  %46 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10843
  %lock_arg65 = getelementptr inbounds %struct.regmap, %struct.regmap* %46, i32 0, i32 3, !dbg !10844
  %47 = load i8*, i8** %lock_arg65, align 8, !dbg !10844
  call void %45(i8* %47) #11, !dbg !10841
  %48 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10845
  %call66 = call i32 @regmap_async_complete(%struct.regmap* %48) #11, !dbg !10846
  %49 = load i32, i32* %ret, align 4, !dbg !10847
  store i32 %49, i32* %retval, align 4, !dbg !10848
  br label %return, !dbg !10848

return:                                           ; preds = %if.end56, %if.else, %if.then45
  %50 = load i32, i32* %retval, align 4, !dbg !10849
  ret i32 %50, !dbg !10849
}

; Function Attrs: noredzone
declare dso_local void @__warn_printk(i8*, ...) #2

; Function Attrs: noredzone
declare dso_local i8* @krealloc(i8*, i64, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_get_val_bytes(%struct.regmap* %map) #0 !dbg !10850 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10851, metadata !DIExpression()), !dbg !10852
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10853
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 7, !dbg !10855
  %format_write = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 4, !dbg !10856
  %1 = load void (%struct.regmap*, i32, i32)*, void (%struct.regmap*, i32, i32)** %format_write, align 8, !dbg !10856
  %tobool = icmp ne void (%struct.regmap*, i32, i32)* %1, null, !dbg !10853
  br i1 %tobool, label %if.then, label %if.end, !dbg !10857

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !10858
  br label %return, !dbg !10858

if.end:                                           ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10859
  %format1 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 7, !dbg !10860
  %val_bytes = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format1, i32 0, i32 3, !dbg !10861
  %3 = load i64, i64* %val_bytes, align 8, !dbg !10861
  %conv = trunc i64 %3 to i32, !dbg !10859
  store i32 %conv, i32* %retval, align 4, !dbg !10862
  br label %return, !dbg !10862

return:                                           ; preds = %if.end, %if.then
  %4 = load i32, i32* %retval, align 4, !dbg !10863
  ret i32 %4, !dbg !10863
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_get_max_register(%struct.regmap* %map) #0 !dbg !10864 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10865, metadata !DIExpression()), !dbg !10866
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10867
  %max_register = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 17, !dbg !10868
  %1 = load i32, i32* %max_register, align 4, !dbg !10868
  %tobool = icmp ne i32 %1, 0, !dbg !10867
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10867

cond.true:                                        ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10869
  %max_register1 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 17, !dbg !10870
  %3 = load i32, i32* %max_register1, align 4, !dbg !10870
  br label %cond.end, !dbg !10867

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10867

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ -22, %cond.false ], !dbg !10867
  ret i32 %cond, !dbg !10871
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_get_reg_stride(%struct.regmap* %map) #0 !dbg !10872 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10873, metadata !DIExpression()), !dbg !10874
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10875
  %reg_stride = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 37, !dbg !10876
  %1 = load i32, i32* %reg_stride, align 4, !dbg !10876
  ret i32 %1, !dbg !10877
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define dso_local i32 @regmap_parse_val(%struct.regmap* %map, i8* %buf, i32* %val) #0 !dbg !10878 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %buf.addr = alloca i8*, align 8
  %val.addr = alloca i32*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !10881, metadata !DIExpression()), !dbg !10882
  store i8* %buf, i8** %buf.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %buf.addr, metadata !10883, metadata !DIExpression()), !dbg !10884
  store i32* %val, i32** %val.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %val.addr, metadata !10885, metadata !DIExpression()), !dbg !10886
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10887
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 7, !dbg !10889
  %parse_val = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 7, !dbg !10890
  %1 = load i32 (i8*)*, i32 (i8*)** %parse_val, align 8, !dbg !10890
  %tobool = icmp ne i32 (i8*)* %1, null, !dbg !10887
  br i1 %tobool, label %if.end, label %if.then, !dbg !10891

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !10892
  br label %return, !dbg !10892

if.end:                                           ; preds = %entry
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !10893
  %format1 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 7, !dbg !10894
  %parse_val2 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format1, i32 0, i32 7, !dbg !10895
  %3 = load i32 (i8*)*, i32 (i8*)** %parse_val2, align 8, !dbg !10895
  %4 = load i8*, i8** %buf.addr, align 8, !dbg !10896
  %call = call i32 %3(i8* %4) #11, !dbg !10893
  %5 = load i32*, i32** %val.addr, align 8, !dbg !10897
  store i32 %call, i32* %5, align 4, !dbg !10898
  store i32 0, i32* %retval, align 4, !dbg !10899
  br label %return, !dbg !10899

return:                                           ; preds = %if.end, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !10900
  ret i32 %6, !dbg !10900
}

; Function Attrs: cold noinline noredzone nounwind optnone sspstrong
define internal i32 @regmap_initcall() #7 section ".init.text" !dbg !10901 {
entry:
  call void @regmap_debugfs_initcall() #11, !dbg !10904
  ret i32 0, !dbg !10905
}

; Function Attrs: noredzone
declare dso_local i8* @kstrdup_const(i8*, i32) #2

; Function Attrs: noredzone
declare dso_local noalias i8* @devres_alloc_node(void (%struct.device*, i8*)*, i64, i32, i32) #2

; Function Attrs: noredzone
declare dso_local zeroext i1 @fwnode_property_present(%struct.fwnode_handle*, i8*) #2

; Function Attrs: nounwind readnone willreturn
declare i1 @llvm.is.constant.i64(i64) #5

; Function Attrs: noredzone
declare dso_local noalias i8* @__kmalloc(i64, i32) #2

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #8

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal i32 @get_order(i64 %size) #4 !dbg !10906 {
entry:
  %x.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr.i, metadata !10910, metadata !DIExpression()), !dbg !10914
  %bitpos.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %bitpos.i, metadata !10916, metadata !DIExpression()), !dbg !10917
  %retval = alloca i32, align 4
  %size.addr = alloca i64, align 8
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !10918, metadata !DIExpression()), !dbg !10919
  %0 = load i64, i64* %size.addr, align 8, !dbg !10920
  %1 = call i1 @llvm.is.constant.i64(i64 %0), !dbg !10922
  br i1 %1, label %if.then, label %if.end447, !dbg !10923

if.then:                                          ; preds = %entry
  %2 = load i64, i64* %size.addr, align 8, !dbg !10924
  %tobool = icmp ne i64 %2, 0, !dbg !10924
  br i1 %tobool, label %if.end, label %if.then1, !dbg !10927

if.then1:                                         ; preds = %if.then
  store i32 52, i32* %retval, align 4, !dbg !10928
  br label %return, !dbg !10928

if.end:                                           ; preds = %if.then
  %3 = load i64, i64* %size.addr, align 8, !dbg !10929
  %cmp = icmp ult i64 %3, 4096, !dbg !10931
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !10932

if.then2:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !10933
  br label %return, !dbg !10933

if.end3:                                          ; preds = %if.end
  %4 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub = sub i64 %4, 1, !dbg !10934
  %5 = call i1 @llvm.is.constant.i64(i64 %sub), !dbg !10934
  br i1 %5, label %cond.true, label %cond.false442, !dbg !10934

cond.true:                                        ; preds = %if.end3
  %6 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub4 = sub i64 %6, 1, !dbg !10934
  %7 = call i1 @llvm.is.constant.i64(i64 %sub4), !dbg !10934
  br i1 %7, label %cond.true5, label %cond.false439, !dbg !10934

cond.true5:                                       ; preds = %cond.true
  %8 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub6 = sub i64 %8, 1, !dbg !10934
  %cmp7 = icmp ult i64 %sub6, 2, !dbg !10934
  br i1 %cmp7, label %cond.true8, label %cond.false, !dbg !10934

cond.true8:                                       ; preds = %cond.true5
  br label %cond.end437, !dbg !10934

cond.false:                                       ; preds = %cond.true5
  %9 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub9 = sub i64 %9, 1, !dbg !10934
  %and = and i64 %sub9, -9223372036854775808, !dbg !10934
  %tobool10 = icmp ne i64 %and, 0, !dbg !10934
  br i1 %tobool10, label %cond.true11, label %cond.false12, !dbg !10934

cond.true11:                                      ; preds = %cond.false
  br label %cond.end435, !dbg !10934

cond.false12:                                     ; preds = %cond.false
  %10 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub13 = sub i64 %10, 1, !dbg !10934
  %and14 = and i64 %sub13, 4611686018427387904, !dbg !10934
  %tobool15 = icmp ne i64 %and14, 0, !dbg !10934
  br i1 %tobool15, label %cond.true16, label %cond.false17, !dbg !10934

cond.true16:                                      ; preds = %cond.false12
  br label %cond.end433, !dbg !10934

cond.false17:                                     ; preds = %cond.false12
  %11 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub18 = sub i64 %11, 1, !dbg !10934
  %and19 = and i64 %sub18, 2305843009213693952, !dbg !10934
  %tobool20 = icmp ne i64 %and19, 0, !dbg !10934
  br i1 %tobool20, label %cond.true21, label %cond.false22, !dbg !10934

cond.true21:                                      ; preds = %cond.false17
  br label %cond.end431, !dbg !10934

cond.false22:                                     ; preds = %cond.false17
  %12 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub23 = sub i64 %12, 1, !dbg !10934
  %and24 = and i64 %sub23, 1152921504606846976, !dbg !10934
  %tobool25 = icmp ne i64 %and24, 0, !dbg !10934
  br i1 %tobool25, label %cond.true26, label %cond.false27, !dbg !10934

cond.true26:                                      ; preds = %cond.false22
  br label %cond.end429, !dbg !10934

cond.false27:                                     ; preds = %cond.false22
  %13 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub28 = sub i64 %13, 1, !dbg !10934
  %and29 = and i64 %sub28, 576460752303423488, !dbg !10934
  %tobool30 = icmp ne i64 %and29, 0, !dbg !10934
  br i1 %tobool30, label %cond.true31, label %cond.false32, !dbg !10934

cond.true31:                                      ; preds = %cond.false27
  br label %cond.end427, !dbg !10934

cond.false32:                                     ; preds = %cond.false27
  %14 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub33 = sub i64 %14, 1, !dbg !10934
  %and34 = and i64 %sub33, 288230376151711744, !dbg !10934
  %tobool35 = icmp ne i64 %and34, 0, !dbg !10934
  br i1 %tobool35, label %cond.true36, label %cond.false37, !dbg !10934

cond.true36:                                      ; preds = %cond.false32
  br label %cond.end425, !dbg !10934

cond.false37:                                     ; preds = %cond.false32
  %15 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub38 = sub i64 %15, 1, !dbg !10934
  %and39 = and i64 %sub38, 144115188075855872, !dbg !10934
  %tobool40 = icmp ne i64 %and39, 0, !dbg !10934
  br i1 %tobool40, label %cond.true41, label %cond.false42, !dbg !10934

cond.true41:                                      ; preds = %cond.false37
  br label %cond.end423, !dbg !10934

cond.false42:                                     ; preds = %cond.false37
  %16 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub43 = sub i64 %16, 1, !dbg !10934
  %and44 = and i64 %sub43, 72057594037927936, !dbg !10934
  %tobool45 = icmp ne i64 %and44, 0, !dbg !10934
  br i1 %tobool45, label %cond.true46, label %cond.false47, !dbg !10934

cond.true46:                                      ; preds = %cond.false42
  br label %cond.end421, !dbg !10934

cond.false47:                                     ; preds = %cond.false42
  %17 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub48 = sub i64 %17, 1, !dbg !10934
  %and49 = and i64 %sub48, 36028797018963968, !dbg !10934
  %tobool50 = icmp ne i64 %and49, 0, !dbg !10934
  br i1 %tobool50, label %cond.true51, label %cond.false52, !dbg !10934

cond.true51:                                      ; preds = %cond.false47
  br label %cond.end419, !dbg !10934

cond.false52:                                     ; preds = %cond.false47
  %18 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub53 = sub i64 %18, 1, !dbg !10934
  %and54 = and i64 %sub53, 18014398509481984, !dbg !10934
  %tobool55 = icmp ne i64 %and54, 0, !dbg !10934
  br i1 %tobool55, label %cond.true56, label %cond.false57, !dbg !10934

cond.true56:                                      ; preds = %cond.false52
  br label %cond.end417, !dbg !10934

cond.false57:                                     ; preds = %cond.false52
  %19 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub58 = sub i64 %19, 1, !dbg !10934
  %and59 = and i64 %sub58, 9007199254740992, !dbg !10934
  %tobool60 = icmp ne i64 %and59, 0, !dbg !10934
  br i1 %tobool60, label %cond.true61, label %cond.false62, !dbg !10934

cond.true61:                                      ; preds = %cond.false57
  br label %cond.end415, !dbg !10934

cond.false62:                                     ; preds = %cond.false57
  %20 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub63 = sub i64 %20, 1, !dbg !10934
  %and64 = and i64 %sub63, 4503599627370496, !dbg !10934
  %tobool65 = icmp ne i64 %and64, 0, !dbg !10934
  br i1 %tobool65, label %cond.true66, label %cond.false67, !dbg !10934

cond.true66:                                      ; preds = %cond.false62
  br label %cond.end413, !dbg !10934

cond.false67:                                     ; preds = %cond.false62
  %21 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub68 = sub i64 %21, 1, !dbg !10934
  %and69 = and i64 %sub68, 2251799813685248, !dbg !10934
  %tobool70 = icmp ne i64 %and69, 0, !dbg !10934
  br i1 %tobool70, label %cond.true71, label %cond.false72, !dbg !10934

cond.true71:                                      ; preds = %cond.false67
  br label %cond.end411, !dbg !10934

cond.false72:                                     ; preds = %cond.false67
  %22 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub73 = sub i64 %22, 1, !dbg !10934
  %and74 = and i64 %sub73, 1125899906842624, !dbg !10934
  %tobool75 = icmp ne i64 %and74, 0, !dbg !10934
  br i1 %tobool75, label %cond.true76, label %cond.false77, !dbg !10934

cond.true76:                                      ; preds = %cond.false72
  br label %cond.end409, !dbg !10934

cond.false77:                                     ; preds = %cond.false72
  %23 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub78 = sub i64 %23, 1, !dbg !10934
  %and79 = and i64 %sub78, 562949953421312, !dbg !10934
  %tobool80 = icmp ne i64 %and79, 0, !dbg !10934
  br i1 %tobool80, label %cond.true81, label %cond.false82, !dbg !10934

cond.true81:                                      ; preds = %cond.false77
  br label %cond.end407, !dbg !10934

cond.false82:                                     ; preds = %cond.false77
  %24 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub83 = sub i64 %24, 1, !dbg !10934
  %and84 = and i64 %sub83, 281474976710656, !dbg !10934
  %tobool85 = icmp ne i64 %and84, 0, !dbg !10934
  br i1 %tobool85, label %cond.true86, label %cond.false87, !dbg !10934

cond.true86:                                      ; preds = %cond.false82
  br label %cond.end405, !dbg !10934

cond.false87:                                     ; preds = %cond.false82
  %25 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub88 = sub i64 %25, 1, !dbg !10934
  %and89 = and i64 %sub88, 140737488355328, !dbg !10934
  %tobool90 = icmp ne i64 %and89, 0, !dbg !10934
  br i1 %tobool90, label %cond.true91, label %cond.false92, !dbg !10934

cond.true91:                                      ; preds = %cond.false87
  br label %cond.end403, !dbg !10934

cond.false92:                                     ; preds = %cond.false87
  %26 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub93 = sub i64 %26, 1, !dbg !10934
  %and94 = and i64 %sub93, 70368744177664, !dbg !10934
  %tobool95 = icmp ne i64 %and94, 0, !dbg !10934
  br i1 %tobool95, label %cond.true96, label %cond.false97, !dbg !10934

cond.true96:                                      ; preds = %cond.false92
  br label %cond.end401, !dbg !10934

cond.false97:                                     ; preds = %cond.false92
  %27 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub98 = sub i64 %27, 1, !dbg !10934
  %and99 = and i64 %sub98, 35184372088832, !dbg !10934
  %tobool100 = icmp ne i64 %and99, 0, !dbg !10934
  br i1 %tobool100, label %cond.true101, label %cond.false102, !dbg !10934

cond.true101:                                     ; preds = %cond.false97
  br label %cond.end399, !dbg !10934

cond.false102:                                    ; preds = %cond.false97
  %28 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub103 = sub i64 %28, 1, !dbg !10934
  %and104 = and i64 %sub103, 17592186044416, !dbg !10934
  %tobool105 = icmp ne i64 %and104, 0, !dbg !10934
  br i1 %tobool105, label %cond.true106, label %cond.false107, !dbg !10934

cond.true106:                                     ; preds = %cond.false102
  br label %cond.end397, !dbg !10934

cond.false107:                                    ; preds = %cond.false102
  %29 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub108 = sub i64 %29, 1, !dbg !10934
  %and109 = and i64 %sub108, 8796093022208, !dbg !10934
  %tobool110 = icmp ne i64 %and109, 0, !dbg !10934
  br i1 %tobool110, label %cond.true111, label %cond.false112, !dbg !10934

cond.true111:                                     ; preds = %cond.false107
  br label %cond.end395, !dbg !10934

cond.false112:                                    ; preds = %cond.false107
  %30 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub113 = sub i64 %30, 1, !dbg !10934
  %and114 = and i64 %sub113, 4398046511104, !dbg !10934
  %tobool115 = icmp ne i64 %and114, 0, !dbg !10934
  br i1 %tobool115, label %cond.true116, label %cond.false117, !dbg !10934

cond.true116:                                     ; preds = %cond.false112
  br label %cond.end393, !dbg !10934

cond.false117:                                    ; preds = %cond.false112
  %31 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub118 = sub i64 %31, 1, !dbg !10934
  %and119 = and i64 %sub118, 2199023255552, !dbg !10934
  %tobool120 = icmp ne i64 %and119, 0, !dbg !10934
  br i1 %tobool120, label %cond.true121, label %cond.false122, !dbg !10934

cond.true121:                                     ; preds = %cond.false117
  br label %cond.end391, !dbg !10934

cond.false122:                                    ; preds = %cond.false117
  %32 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub123 = sub i64 %32, 1, !dbg !10934
  %and124 = and i64 %sub123, 1099511627776, !dbg !10934
  %tobool125 = icmp ne i64 %and124, 0, !dbg !10934
  br i1 %tobool125, label %cond.true126, label %cond.false127, !dbg !10934

cond.true126:                                     ; preds = %cond.false122
  br label %cond.end389, !dbg !10934

cond.false127:                                    ; preds = %cond.false122
  %33 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub128 = sub i64 %33, 1, !dbg !10934
  %and129 = and i64 %sub128, 549755813888, !dbg !10934
  %tobool130 = icmp ne i64 %and129, 0, !dbg !10934
  br i1 %tobool130, label %cond.true131, label %cond.false132, !dbg !10934

cond.true131:                                     ; preds = %cond.false127
  br label %cond.end387, !dbg !10934

cond.false132:                                    ; preds = %cond.false127
  %34 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub133 = sub i64 %34, 1, !dbg !10934
  %and134 = and i64 %sub133, 274877906944, !dbg !10934
  %tobool135 = icmp ne i64 %and134, 0, !dbg !10934
  br i1 %tobool135, label %cond.true136, label %cond.false137, !dbg !10934

cond.true136:                                     ; preds = %cond.false132
  br label %cond.end385, !dbg !10934

cond.false137:                                    ; preds = %cond.false132
  %35 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub138 = sub i64 %35, 1, !dbg !10934
  %and139 = and i64 %sub138, 137438953472, !dbg !10934
  %tobool140 = icmp ne i64 %and139, 0, !dbg !10934
  br i1 %tobool140, label %cond.true141, label %cond.false142, !dbg !10934

cond.true141:                                     ; preds = %cond.false137
  br label %cond.end383, !dbg !10934

cond.false142:                                    ; preds = %cond.false137
  %36 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub143 = sub i64 %36, 1, !dbg !10934
  %and144 = and i64 %sub143, 68719476736, !dbg !10934
  %tobool145 = icmp ne i64 %and144, 0, !dbg !10934
  br i1 %tobool145, label %cond.true146, label %cond.false147, !dbg !10934

cond.true146:                                     ; preds = %cond.false142
  br label %cond.end381, !dbg !10934

cond.false147:                                    ; preds = %cond.false142
  %37 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub148 = sub i64 %37, 1, !dbg !10934
  %and149 = and i64 %sub148, 34359738368, !dbg !10934
  %tobool150 = icmp ne i64 %and149, 0, !dbg !10934
  br i1 %tobool150, label %cond.true151, label %cond.false152, !dbg !10934

cond.true151:                                     ; preds = %cond.false147
  br label %cond.end379, !dbg !10934

cond.false152:                                    ; preds = %cond.false147
  %38 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub153 = sub i64 %38, 1, !dbg !10934
  %and154 = and i64 %sub153, 17179869184, !dbg !10934
  %tobool155 = icmp ne i64 %and154, 0, !dbg !10934
  br i1 %tobool155, label %cond.true156, label %cond.false157, !dbg !10934

cond.true156:                                     ; preds = %cond.false152
  br label %cond.end377, !dbg !10934

cond.false157:                                    ; preds = %cond.false152
  %39 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub158 = sub i64 %39, 1, !dbg !10934
  %and159 = and i64 %sub158, 8589934592, !dbg !10934
  %tobool160 = icmp ne i64 %and159, 0, !dbg !10934
  br i1 %tobool160, label %cond.true161, label %cond.false162, !dbg !10934

cond.true161:                                     ; preds = %cond.false157
  br label %cond.end375, !dbg !10934

cond.false162:                                    ; preds = %cond.false157
  %40 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub163 = sub i64 %40, 1, !dbg !10934
  %and164 = and i64 %sub163, 4294967296, !dbg !10934
  %tobool165 = icmp ne i64 %and164, 0, !dbg !10934
  br i1 %tobool165, label %cond.true166, label %cond.false167, !dbg !10934

cond.true166:                                     ; preds = %cond.false162
  br label %cond.end373, !dbg !10934

cond.false167:                                    ; preds = %cond.false162
  %41 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub168 = sub i64 %41, 1, !dbg !10934
  %and169 = and i64 %sub168, 2147483648, !dbg !10934
  %tobool170 = icmp ne i64 %and169, 0, !dbg !10934
  br i1 %tobool170, label %cond.true171, label %cond.false172, !dbg !10934

cond.true171:                                     ; preds = %cond.false167
  br label %cond.end371, !dbg !10934

cond.false172:                                    ; preds = %cond.false167
  %42 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub173 = sub i64 %42, 1, !dbg !10934
  %and174 = and i64 %sub173, 1073741824, !dbg !10934
  %tobool175 = icmp ne i64 %and174, 0, !dbg !10934
  br i1 %tobool175, label %cond.true176, label %cond.false177, !dbg !10934

cond.true176:                                     ; preds = %cond.false172
  br label %cond.end369, !dbg !10934

cond.false177:                                    ; preds = %cond.false172
  %43 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub178 = sub i64 %43, 1, !dbg !10934
  %and179 = and i64 %sub178, 536870912, !dbg !10934
  %tobool180 = icmp ne i64 %and179, 0, !dbg !10934
  br i1 %tobool180, label %cond.true181, label %cond.false182, !dbg !10934

cond.true181:                                     ; preds = %cond.false177
  br label %cond.end367, !dbg !10934

cond.false182:                                    ; preds = %cond.false177
  %44 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub183 = sub i64 %44, 1, !dbg !10934
  %and184 = and i64 %sub183, 268435456, !dbg !10934
  %tobool185 = icmp ne i64 %and184, 0, !dbg !10934
  br i1 %tobool185, label %cond.true186, label %cond.false187, !dbg !10934

cond.true186:                                     ; preds = %cond.false182
  br label %cond.end365, !dbg !10934

cond.false187:                                    ; preds = %cond.false182
  %45 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub188 = sub i64 %45, 1, !dbg !10934
  %and189 = and i64 %sub188, 134217728, !dbg !10934
  %tobool190 = icmp ne i64 %and189, 0, !dbg !10934
  br i1 %tobool190, label %cond.true191, label %cond.false192, !dbg !10934

cond.true191:                                     ; preds = %cond.false187
  br label %cond.end363, !dbg !10934

cond.false192:                                    ; preds = %cond.false187
  %46 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub193 = sub i64 %46, 1, !dbg !10934
  %and194 = and i64 %sub193, 67108864, !dbg !10934
  %tobool195 = icmp ne i64 %and194, 0, !dbg !10934
  br i1 %tobool195, label %cond.true196, label %cond.false197, !dbg !10934

cond.true196:                                     ; preds = %cond.false192
  br label %cond.end361, !dbg !10934

cond.false197:                                    ; preds = %cond.false192
  %47 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub198 = sub i64 %47, 1, !dbg !10934
  %and199 = and i64 %sub198, 33554432, !dbg !10934
  %tobool200 = icmp ne i64 %and199, 0, !dbg !10934
  br i1 %tobool200, label %cond.true201, label %cond.false202, !dbg !10934

cond.true201:                                     ; preds = %cond.false197
  br label %cond.end359, !dbg !10934

cond.false202:                                    ; preds = %cond.false197
  %48 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub203 = sub i64 %48, 1, !dbg !10934
  %and204 = and i64 %sub203, 16777216, !dbg !10934
  %tobool205 = icmp ne i64 %and204, 0, !dbg !10934
  br i1 %tobool205, label %cond.true206, label %cond.false207, !dbg !10934

cond.true206:                                     ; preds = %cond.false202
  br label %cond.end357, !dbg !10934

cond.false207:                                    ; preds = %cond.false202
  %49 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub208 = sub i64 %49, 1, !dbg !10934
  %and209 = and i64 %sub208, 8388608, !dbg !10934
  %tobool210 = icmp ne i64 %and209, 0, !dbg !10934
  br i1 %tobool210, label %cond.true211, label %cond.false212, !dbg !10934

cond.true211:                                     ; preds = %cond.false207
  br label %cond.end355, !dbg !10934

cond.false212:                                    ; preds = %cond.false207
  %50 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub213 = sub i64 %50, 1, !dbg !10934
  %and214 = and i64 %sub213, 4194304, !dbg !10934
  %tobool215 = icmp ne i64 %and214, 0, !dbg !10934
  br i1 %tobool215, label %cond.true216, label %cond.false217, !dbg !10934

cond.true216:                                     ; preds = %cond.false212
  br label %cond.end353, !dbg !10934

cond.false217:                                    ; preds = %cond.false212
  %51 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub218 = sub i64 %51, 1, !dbg !10934
  %and219 = and i64 %sub218, 2097152, !dbg !10934
  %tobool220 = icmp ne i64 %and219, 0, !dbg !10934
  br i1 %tobool220, label %cond.true221, label %cond.false222, !dbg !10934

cond.true221:                                     ; preds = %cond.false217
  br label %cond.end351, !dbg !10934

cond.false222:                                    ; preds = %cond.false217
  %52 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub223 = sub i64 %52, 1, !dbg !10934
  %and224 = and i64 %sub223, 1048576, !dbg !10934
  %tobool225 = icmp ne i64 %and224, 0, !dbg !10934
  br i1 %tobool225, label %cond.true226, label %cond.false227, !dbg !10934

cond.true226:                                     ; preds = %cond.false222
  br label %cond.end349, !dbg !10934

cond.false227:                                    ; preds = %cond.false222
  %53 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub228 = sub i64 %53, 1, !dbg !10934
  %and229 = and i64 %sub228, 524288, !dbg !10934
  %tobool230 = icmp ne i64 %and229, 0, !dbg !10934
  br i1 %tobool230, label %cond.true231, label %cond.false232, !dbg !10934

cond.true231:                                     ; preds = %cond.false227
  br label %cond.end347, !dbg !10934

cond.false232:                                    ; preds = %cond.false227
  %54 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub233 = sub i64 %54, 1, !dbg !10934
  %and234 = and i64 %sub233, 262144, !dbg !10934
  %tobool235 = icmp ne i64 %and234, 0, !dbg !10934
  br i1 %tobool235, label %cond.true236, label %cond.false237, !dbg !10934

cond.true236:                                     ; preds = %cond.false232
  br label %cond.end345, !dbg !10934

cond.false237:                                    ; preds = %cond.false232
  %55 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub238 = sub i64 %55, 1, !dbg !10934
  %and239 = and i64 %sub238, 131072, !dbg !10934
  %tobool240 = icmp ne i64 %and239, 0, !dbg !10934
  br i1 %tobool240, label %cond.true241, label %cond.false242, !dbg !10934

cond.true241:                                     ; preds = %cond.false237
  br label %cond.end343, !dbg !10934

cond.false242:                                    ; preds = %cond.false237
  %56 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub243 = sub i64 %56, 1, !dbg !10934
  %and244 = and i64 %sub243, 65536, !dbg !10934
  %tobool245 = icmp ne i64 %and244, 0, !dbg !10934
  br i1 %tobool245, label %cond.true246, label %cond.false247, !dbg !10934

cond.true246:                                     ; preds = %cond.false242
  br label %cond.end341, !dbg !10934

cond.false247:                                    ; preds = %cond.false242
  %57 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub248 = sub i64 %57, 1, !dbg !10934
  %and249 = and i64 %sub248, 32768, !dbg !10934
  %tobool250 = icmp ne i64 %and249, 0, !dbg !10934
  br i1 %tobool250, label %cond.true251, label %cond.false252, !dbg !10934

cond.true251:                                     ; preds = %cond.false247
  br label %cond.end339, !dbg !10934

cond.false252:                                    ; preds = %cond.false247
  %58 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub253 = sub i64 %58, 1, !dbg !10934
  %and254 = and i64 %sub253, 16384, !dbg !10934
  %tobool255 = icmp ne i64 %and254, 0, !dbg !10934
  br i1 %tobool255, label %cond.true256, label %cond.false257, !dbg !10934

cond.true256:                                     ; preds = %cond.false252
  br label %cond.end337, !dbg !10934

cond.false257:                                    ; preds = %cond.false252
  %59 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub258 = sub i64 %59, 1, !dbg !10934
  %and259 = and i64 %sub258, 8192, !dbg !10934
  %tobool260 = icmp ne i64 %and259, 0, !dbg !10934
  br i1 %tobool260, label %cond.true261, label %cond.false262, !dbg !10934

cond.true261:                                     ; preds = %cond.false257
  br label %cond.end335, !dbg !10934

cond.false262:                                    ; preds = %cond.false257
  %60 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub263 = sub i64 %60, 1, !dbg !10934
  %and264 = and i64 %sub263, 4096, !dbg !10934
  %tobool265 = icmp ne i64 %and264, 0, !dbg !10934
  br i1 %tobool265, label %cond.true266, label %cond.false267, !dbg !10934

cond.true266:                                     ; preds = %cond.false262
  br label %cond.end333, !dbg !10934

cond.false267:                                    ; preds = %cond.false262
  %61 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub268 = sub i64 %61, 1, !dbg !10934
  %and269 = and i64 %sub268, 2048, !dbg !10934
  %tobool270 = icmp ne i64 %and269, 0, !dbg !10934
  br i1 %tobool270, label %cond.true271, label %cond.false272, !dbg !10934

cond.true271:                                     ; preds = %cond.false267
  br label %cond.end331, !dbg !10934

cond.false272:                                    ; preds = %cond.false267
  %62 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub273 = sub i64 %62, 1, !dbg !10934
  %and274 = and i64 %sub273, 1024, !dbg !10934
  %tobool275 = icmp ne i64 %and274, 0, !dbg !10934
  br i1 %tobool275, label %cond.true276, label %cond.false277, !dbg !10934

cond.true276:                                     ; preds = %cond.false272
  br label %cond.end329, !dbg !10934

cond.false277:                                    ; preds = %cond.false272
  %63 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub278 = sub i64 %63, 1, !dbg !10934
  %and279 = and i64 %sub278, 512, !dbg !10934
  %tobool280 = icmp ne i64 %and279, 0, !dbg !10934
  br i1 %tobool280, label %cond.true281, label %cond.false282, !dbg !10934

cond.true281:                                     ; preds = %cond.false277
  br label %cond.end327, !dbg !10934

cond.false282:                                    ; preds = %cond.false277
  %64 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub283 = sub i64 %64, 1, !dbg !10934
  %and284 = and i64 %sub283, 256, !dbg !10934
  %tobool285 = icmp ne i64 %and284, 0, !dbg !10934
  br i1 %tobool285, label %cond.true286, label %cond.false287, !dbg !10934

cond.true286:                                     ; preds = %cond.false282
  br label %cond.end325, !dbg !10934

cond.false287:                                    ; preds = %cond.false282
  %65 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub288 = sub i64 %65, 1, !dbg !10934
  %and289 = and i64 %sub288, 128, !dbg !10934
  %tobool290 = icmp ne i64 %and289, 0, !dbg !10934
  br i1 %tobool290, label %cond.true291, label %cond.false292, !dbg !10934

cond.true291:                                     ; preds = %cond.false287
  br label %cond.end323, !dbg !10934

cond.false292:                                    ; preds = %cond.false287
  %66 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub293 = sub i64 %66, 1, !dbg !10934
  %and294 = and i64 %sub293, 64, !dbg !10934
  %tobool295 = icmp ne i64 %and294, 0, !dbg !10934
  br i1 %tobool295, label %cond.true296, label %cond.false297, !dbg !10934

cond.true296:                                     ; preds = %cond.false292
  br label %cond.end321, !dbg !10934

cond.false297:                                    ; preds = %cond.false292
  %67 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub298 = sub i64 %67, 1, !dbg !10934
  %and299 = and i64 %sub298, 32, !dbg !10934
  %tobool300 = icmp ne i64 %and299, 0, !dbg !10934
  br i1 %tobool300, label %cond.true301, label %cond.false302, !dbg !10934

cond.true301:                                     ; preds = %cond.false297
  br label %cond.end319, !dbg !10934

cond.false302:                                    ; preds = %cond.false297
  %68 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub303 = sub i64 %68, 1, !dbg !10934
  %and304 = and i64 %sub303, 16, !dbg !10934
  %tobool305 = icmp ne i64 %and304, 0, !dbg !10934
  br i1 %tobool305, label %cond.true306, label %cond.false307, !dbg !10934

cond.true306:                                     ; preds = %cond.false302
  br label %cond.end317, !dbg !10934

cond.false307:                                    ; preds = %cond.false302
  %69 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub308 = sub i64 %69, 1, !dbg !10934
  %and309 = and i64 %sub308, 8, !dbg !10934
  %tobool310 = icmp ne i64 %and309, 0, !dbg !10934
  br i1 %tobool310, label %cond.true311, label %cond.false312, !dbg !10934

cond.true311:                                     ; preds = %cond.false307
  br label %cond.end, !dbg !10934

cond.false312:                                    ; preds = %cond.false307
  %70 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub313 = sub i64 %70, 1, !dbg !10934
  %and314 = and i64 %sub313, 4, !dbg !10934
  %tobool315 = icmp ne i64 %and314, 0, !dbg !10934
  %71 = zext i1 %tobool315 to i64, !dbg !10934
  %cond = select i1 %tobool315, i32 2, i32 1, !dbg !10934
  br label %cond.end, !dbg !10934

cond.end:                                         ; preds = %cond.false312, %cond.true311
  %cond316 = phi i32 [ 3, %cond.true311 ], [ %cond, %cond.false312 ], !dbg !10934
  br label %cond.end317, !dbg !10934

cond.end317:                                      ; preds = %cond.end, %cond.true306
  %cond318 = phi i32 [ 4, %cond.true306 ], [ %cond316, %cond.end ], !dbg !10934
  br label %cond.end319, !dbg !10934

cond.end319:                                      ; preds = %cond.end317, %cond.true301
  %cond320 = phi i32 [ 5, %cond.true301 ], [ %cond318, %cond.end317 ], !dbg !10934
  br label %cond.end321, !dbg !10934

cond.end321:                                      ; preds = %cond.end319, %cond.true296
  %cond322 = phi i32 [ 6, %cond.true296 ], [ %cond320, %cond.end319 ], !dbg !10934
  br label %cond.end323, !dbg !10934

cond.end323:                                      ; preds = %cond.end321, %cond.true291
  %cond324 = phi i32 [ 7, %cond.true291 ], [ %cond322, %cond.end321 ], !dbg !10934
  br label %cond.end325, !dbg !10934

cond.end325:                                      ; preds = %cond.end323, %cond.true286
  %cond326 = phi i32 [ 8, %cond.true286 ], [ %cond324, %cond.end323 ], !dbg !10934
  br label %cond.end327, !dbg !10934

cond.end327:                                      ; preds = %cond.end325, %cond.true281
  %cond328 = phi i32 [ 9, %cond.true281 ], [ %cond326, %cond.end325 ], !dbg !10934
  br label %cond.end329, !dbg !10934

cond.end329:                                      ; preds = %cond.end327, %cond.true276
  %cond330 = phi i32 [ 10, %cond.true276 ], [ %cond328, %cond.end327 ], !dbg !10934
  br label %cond.end331, !dbg !10934

cond.end331:                                      ; preds = %cond.end329, %cond.true271
  %cond332 = phi i32 [ 11, %cond.true271 ], [ %cond330, %cond.end329 ], !dbg !10934
  br label %cond.end333, !dbg !10934

cond.end333:                                      ; preds = %cond.end331, %cond.true266
  %cond334 = phi i32 [ 12, %cond.true266 ], [ %cond332, %cond.end331 ], !dbg !10934
  br label %cond.end335, !dbg !10934

cond.end335:                                      ; preds = %cond.end333, %cond.true261
  %cond336 = phi i32 [ 13, %cond.true261 ], [ %cond334, %cond.end333 ], !dbg !10934
  br label %cond.end337, !dbg !10934

cond.end337:                                      ; preds = %cond.end335, %cond.true256
  %cond338 = phi i32 [ 14, %cond.true256 ], [ %cond336, %cond.end335 ], !dbg !10934
  br label %cond.end339, !dbg !10934

cond.end339:                                      ; preds = %cond.end337, %cond.true251
  %cond340 = phi i32 [ 15, %cond.true251 ], [ %cond338, %cond.end337 ], !dbg !10934
  br label %cond.end341, !dbg !10934

cond.end341:                                      ; preds = %cond.end339, %cond.true246
  %cond342 = phi i32 [ 16, %cond.true246 ], [ %cond340, %cond.end339 ], !dbg !10934
  br label %cond.end343, !dbg !10934

cond.end343:                                      ; preds = %cond.end341, %cond.true241
  %cond344 = phi i32 [ 17, %cond.true241 ], [ %cond342, %cond.end341 ], !dbg !10934
  br label %cond.end345, !dbg !10934

cond.end345:                                      ; preds = %cond.end343, %cond.true236
  %cond346 = phi i32 [ 18, %cond.true236 ], [ %cond344, %cond.end343 ], !dbg !10934
  br label %cond.end347, !dbg !10934

cond.end347:                                      ; preds = %cond.end345, %cond.true231
  %cond348 = phi i32 [ 19, %cond.true231 ], [ %cond346, %cond.end345 ], !dbg !10934
  br label %cond.end349, !dbg !10934

cond.end349:                                      ; preds = %cond.end347, %cond.true226
  %cond350 = phi i32 [ 20, %cond.true226 ], [ %cond348, %cond.end347 ], !dbg !10934
  br label %cond.end351, !dbg !10934

cond.end351:                                      ; preds = %cond.end349, %cond.true221
  %cond352 = phi i32 [ 21, %cond.true221 ], [ %cond350, %cond.end349 ], !dbg !10934
  br label %cond.end353, !dbg !10934

cond.end353:                                      ; preds = %cond.end351, %cond.true216
  %cond354 = phi i32 [ 22, %cond.true216 ], [ %cond352, %cond.end351 ], !dbg !10934
  br label %cond.end355, !dbg !10934

cond.end355:                                      ; preds = %cond.end353, %cond.true211
  %cond356 = phi i32 [ 23, %cond.true211 ], [ %cond354, %cond.end353 ], !dbg !10934
  br label %cond.end357, !dbg !10934

cond.end357:                                      ; preds = %cond.end355, %cond.true206
  %cond358 = phi i32 [ 24, %cond.true206 ], [ %cond356, %cond.end355 ], !dbg !10934
  br label %cond.end359, !dbg !10934

cond.end359:                                      ; preds = %cond.end357, %cond.true201
  %cond360 = phi i32 [ 25, %cond.true201 ], [ %cond358, %cond.end357 ], !dbg !10934
  br label %cond.end361, !dbg !10934

cond.end361:                                      ; preds = %cond.end359, %cond.true196
  %cond362 = phi i32 [ 26, %cond.true196 ], [ %cond360, %cond.end359 ], !dbg !10934
  br label %cond.end363, !dbg !10934

cond.end363:                                      ; preds = %cond.end361, %cond.true191
  %cond364 = phi i32 [ 27, %cond.true191 ], [ %cond362, %cond.end361 ], !dbg !10934
  br label %cond.end365, !dbg !10934

cond.end365:                                      ; preds = %cond.end363, %cond.true186
  %cond366 = phi i32 [ 28, %cond.true186 ], [ %cond364, %cond.end363 ], !dbg !10934
  br label %cond.end367, !dbg !10934

cond.end367:                                      ; preds = %cond.end365, %cond.true181
  %cond368 = phi i32 [ 29, %cond.true181 ], [ %cond366, %cond.end365 ], !dbg !10934
  br label %cond.end369, !dbg !10934

cond.end369:                                      ; preds = %cond.end367, %cond.true176
  %cond370 = phi i32 [ 30, %cond.true176 ], [ %cond368, %cond.end367 ], !dbg !10934
  br label %cond.end371, !dbg !10934

cond.end371:                                      ; preds = %cond.end369, %cond.true171
  %cond372 = phi i32 [ 31, %cond.true171 ], [ %cond370, %cond.end369 ], !dbg !10934
  br label %cond.end373, !dbg !10934

cond.end373:                                      ; preds = %cond.end371, %cond.true166
  %cond374 = phi i32 [ 32, %cond.true166 ], [ %cond372, %cond.end371 ], !dbg !10934
  br label %cond.end375, !dbg !10934

cond.end375:                                      ; preds = %cond.end373, %cond.true161
  %cond376 = phi i32 [ 33, %cond.true161 ], [ %cond374, %cond.end373 ], !dbg !10934
  br label %cond.end377, !dbg !10934

cond.end377:                                      ; preds = %cond.end375, %cond.true156
  %cond378 = phi i32 [ 34, %cond.true156 ], [ %cond376, %cond.end375 ], !dbg !10934
  br label %cond.end379, !dbg !10934

cond.end379:                                      ; preds = %cond.end377, %cond.true151
  %cond380 = phi i32 [ 35, %cond.true151 ], [ %cond378, %cond.end377 ], !dbg !10934
  br label %cond.end381, !dbg !10934

cond.end381:                                      ; preds = %cond.end379, %cond.true146
  %cond382 = phi i32 [ 36, %cond.true146 ], [ %cond380, %cond.end379 ], !dbg !10934
  br label %cond.end383, !dbg !10934

cond.end383:                                      ; preds = %cond.end381, %cond.true141
  %cond384 = phi i32 [ 37, %cond.true141 ], [ %cond382, %cond.end381 ], !dbg !10934
  br label %cond.end385, !dbg !10934

cond.end385:                                      ; preds = %cond.end383, %cond.true136
  %cond386 = phi i32 [ 38, %cond.true136 ], [ %cond384, %cond.end383 ], !dbg !10934
  br label %cond.end387, !dbg !10934

cond.end387:                                      ; preds = %cond.end385, %cond.true131
  %cond388 = phi i32 [ 39, %cond.true131 ], [ %cond386, %cond.end385 ], !dbg !10934
  br label %cond.end389, !dbg !10934

cond.end389:                                      ; preds = %cond.end387, %cond.true126
  %cond390 = phi i32 [ 40, %cond.true126 ], [ %cond388, %cond.end387 ], !dbg !10934
  br label %cond.end391, !dbg !10934

cond.end391:                                      ; preds = %cond.end389, %cond.true121
  %cond392 = phi i32 [ 41, %cond.true121 ], [ %cond390, %cond.end389 ], !dbg !10934
  br label %cond.end393, !dbg !10934

cond.end393:                                      ; preds = %cond.end391, %cond.true116
  %cond394 = phi i32 [ 42, %cond.true116 ], [ %cond392, %cond.end391 ], !dbg !10934
  br label %cond.end395, !dbg !10934

cond.end395:                                      ; preds = %cond.end393, %cond.true111
  %cond396 = phi i32 [ 43, %cond.true111 ], [ %cond394, %cond.end393 ], !dbg !10934
  br label %cond.end397, !dbg !10934

cond.end397:                                      ; preds = %cond.end395, %cond.true106
  %cond398 = phi i32 [ 44, %cond.true106 ], [ %cond396, %cond.end395 ], !dbg !10934
  br label %cond.end399, !dbg !10934

cond.end399:                                      ; preds = %cond.end397, %cond.true101
  %cond400 = phi i32 [ 45, %cond.true101 ], [ %cond398, %cond.end397 ], !dbg !10934
  br label %cond.end401, !dbg !10934

cond.end401:                                      ; preds = %cond.end399, %cond.true96
  %cond402 = phi i32 [ 46, %cond.true96 ], [ %cond400, %cond.end399 ], !dbg !10934
  br label %cond.end403, !dbg !10934

cond.end403:                                      ; preds = %cond.end401, %cond.true91
  %cond404 = phi i32 [ 47, %cond.true91 ], [ %cond402, %cond.end401 ], !dbg !10934
  br label %cond.end405, !dbg !10934

cond.end405:                                      ; preds = %cond.end403, %cond.true86
  %cond406 = phi i32 [ 48, %cond.true86 ], [ %cond404, %cond.end403 ], !dbg !10934
  br label %cond.end407, !dbg !10934

cond.end407:                                      ; preds = %cond.end405, %cond.true81
  %cond408 = phi i32 [ 49, %cond.true81 ], [ %cond406, %cond.end405 ], !dbg !10934
  br label %cond.end409, !dbg !10934

cond.end409:                                      ; preds = %cond.end407, %cond.true76
  %cond410 = phi i32 [ 50, %cond.true76 ], [ %cond408, %cond.end407 ], !dbg !10934
  br label %cond.end411, !dbg !10934

cond.end411:                                      ; preds = %cond.end409, %cond.true71
  %cond412 = phi i32 [ 51, %cond.true71 ], [ %cond410, %cond.end409 ], !dbg !10934
  br label %cond.end413, !dbg !10934

cond.end413:                                      ; preds = %cond.end411, %cond.true66
  %cond414 = phi i32 [ 52, %cond.true66 ], [ %cond412, %cond.end411 ], !dbg !10934
  br label %cond.end415, !dbg !10934

cond.end415:                                      ; preds = %cond.end413, %cond.true61
  %cond416 = phi i32 [ 53, %cond.true61 ], [ %cond414, %cond.end413 ], !dbg !10934
  br label %cond.end417, !dbg !10934

cond.end417:                                      ; preds = %cond.end415, %cond.true56
  %cond418 = phi i32 [ 54, %cond.true56 ], [ %cond416, %cond.end415 ], !dbg !10934
  br label %cond.end419, !dbg !10934

cond.end419:                                      ; preds = %cond.end417, %cond.true51
  %cond420 = phi i32 [ 55, %cond.true51 ], [ %cond418, %cond.end417 ], !dbg !10934
  br label %cond.end421, !dbg !10934

cond.end421:                                      ; preds = %cond.end419, %cond.true46
  %cond422 = phi i32 [ 56, %cond.true46 ], [ %cond420, %cond.end419 ], !dbg !10934
  br label %cond.end423, !dbg !10934

cond.end423:                                      ; preds = %cond.end421, %cond.true41
  %cond424 = phi i32 [ 57, %cond.true41 ], [ %cond422, %cond.end421 ], !dbg !10934
  br label %cond.end425, !dbg !10934

cond.end425:                                      ; preds = %cond.end423, %cond.true36
  %cond426 = phi i32 [ 58, %cond.true36 ], [ %cond424, %cond.end423 ], !dbg !10934
  br label %cond.end427, !dbg !10934

cond.end427:                                      ; preds = %cond.end425, %cond.true31
  %cond428 = phi i32 [ 59, %cond.true31 ], [ %cond426, %cond.end425 ], !dbg !10934
  br label %cond.end429, !dbg !10934

cond.end429:                                      ; preds = %cond.end427, %cond.true26
  %cond430 = phi i32 [ 60, %cond.true26 ], [ %cond428, %cond.end427 ], !dbg !10934
  br label %cond.end431, !dbg !10934

cond.end431:                                      ; preds = %cond.end429, %cond.true21
  %cond432 = phi i32 [ 61, %cond.true21 ], [ %cond430, %cond.end429 ], !dbg !10934
  br label %cond.end433, !dbg !10934

cond.end433:                                      ; preds = %cond.end431, %cond.true16
  %cond434 = phi i32 [ 62, %cond.true16 ], [ %cond432, %cond.end431 ], !dbg !10934
  br label %cond.end435, !dbg !10934

cond.end435:                                      ; preds = %cond.end433, %cond.true11
  %cond436 = phi i32 [ 63, %cond.true11 ], [ %cond434, %cond.end433 ], !dbg !10934
  br label %cond.end437, !dbg !10934

cond.end437:                                      ; preds = %cond.end435, %cond.true8
  %cond438 = phi i32 [ 0, %cond.true8 ], [ %cond436, %cond.end435 ], !dbg !10934
  br label %cond.end440, !dbg !10934

cond.false439:                                    ; preds = %cond.true
  br label %cond.end440, !dbg !10934

cond.end440:                                      ; preds = %cond.false439, %cond.end437
  %cond441 = phi i32 [ %cond438, %cond.end437 ], [ -1, %cond.false439 ], !dbg !10934
  br label %cond.end444, !dbg !10934

cond.false442:                                    ; preds = %if.end3
  %72 = load i64, i64* %size.addr, align 8, !dbg !10934
  %sub443 = sub i64 %72, 1, !dbg !10934
  %call = call i32 @__ilog2_u64(i64 %sub443) #12, !dbg !10934
  br label %cond.end444, !dbg !10934

cond.end444:                                      ; preds = %cond.false442, %cond.end440
  %cond445 = phi i32 [ %cond441, %cond.end440 ], [ %call, %cond.false442 ], !dbg !10934
  %sub446 = sub i32 %cond445, 12, !dbg !10935
  %add = add i32 %sub446, 1, !dbg !10936
  store i32 %add, i32* %retval, align 4, !dbg !10937
  br label %return, !dbg !10937

if.end447:                                        ; preds = %entry
  %73 = load i64, i64* %size.addr, align 8, !dbg !10938
  %dec = add i64 %73, -1, !dbg !10938
  store i64 %dec, i64* %size.addr, align 8, !dbg !10938
  %74 = load i64, i64* %size.addr, align 8, !dbg !10939
  %shr = lshr i64 %74, 12, !dbg !10939
  store i64 %shr, i64* %size.addr, align 8, !dbg !10939
  %75 = load i64, i64* %size.addr, align 8, !dbg !10940
  store i64 %75, i64* %x.addr.i, align 8
  store i32 -1, i32* %bitpos.i, align 4, !dbg !10917
  %76 = load i32, i32* %bitpos.i, align 4, !dbg !10941
  %77 = load i64, i64* %x.addr.i, align 8, !dbg !10942
  %78 = call i32 asm "bsrq $1,${0:q}", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %77, i32 %76) #9, !dbg !10941, !srcloc !10943
  store i32 %78, i32* %bitpos.i, align 4, !dbg !10941
  %79 = load i32, i32* %bitpos.i, align 4, !dbg !10944
  %add.i = add i32 %79, 1, !dbg !10945
  store i32 %add.i, i32* %retval, align 4, !dbg !10946
  br label %return, !dbg !10946

return:                                           ; preds = %if.end447, %cond.end444, %if.then2, %if.then1
  %80 = load i32, i32* %retval, align 4, !dbg !10947
  ret i32 %80, !dbg !10947
}

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal i32 @__ilog2_u64(i64 %n) #4 !dbg !10948 {
entry:
  %x.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %x.addr.i, metadata !10910, metadata !DIExpression()), !dbg !10951
  %bitpos.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %bitpos.i, metadata !10916, metadata !DIExpression()), !dbg !10953
  %n.addr = alloca i64, align 8
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !10954, metadata !DIExpression()), !dbg !10955
  %0 = load i64, i64* %n.addr, align 8, !dbg !10956
  store i64 %0, i64* %x.addr.i, align 8
  store i32 -1, i32* %bitpos.i, align 4, !dbg !10953
  %1 = load i32, i32* %bitpos.i, align 4, !dbg !10957
  %2 = load i64, i64* %x.addr.i, align 8, !dbg !10958
  %3 = call i32 asm "bsrq $1,${0:q}", "=r,rm,0,~{dirflag},~{fpsr},~{flags}"(i64 %2, i32 %1) #9, !dbg !10957, !srcloc !10943
  store i32 %3, i32* %bitpos.i, align 4, !dbg !10957
  %4 = load i32, i32* %bitpos.i, align 4, !dbg !10959
  %add.i = add i32 %4, 1, !dbg !10960
  %sub = sub i32 %add.i, 1, !dbg !10961
  ret i32 %sub, !dbg !10962
}

; Function Attrs: noredzone
declare dso_local noalias i8* @kmalloc_order(i64, i32, i32) #2

; Function Attrs: noredzone
declare dso_local noalias i8* @kmem_cache_alloc(%struct.kmem_cache*, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @kasan_kmalloc(%struct.kmem_cache* %s, i8* %object, i64 %size, i32 %flags) #0 !dbg !10963 {
entry:
  %s.addr = alloca %struct.kmem_cache*, align 8
  %object.addr = alloca i8*, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  store %struct.kmem_cache* %s, %struct.kmem_cache** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.kmem_cache** %s.addr, metadata !10967, metadata !DIExpression()), !dbg !10968
  store i8* %object, i8** %object.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %object.addr, metadata !10969, metadata !DIExpression()), !dbg !10970
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !10971, metadata !DIExpression()), !dbg !10972
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10973, metadata !DIExpression()), !dbg !10974
  %0 = load i8*, i8** %object.addr, align 8, !dbg !10975
  ret i8* %0, !dbg !10976
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @hwspin_lock_timeout_irqsave(%struct.hwspinlock* %hwlock, i32 %to, i64* %flags) #0 !dbg !10977 {
entry:
  %hwlock.addr = alloca %struct.hwspinlock*, align 8
  %to.addr = alloca i32, align 4
  %flags.addr = alloca i64*, align 8
  store %struct.hwspinlock* %hwlock, %struct.hwspinlock** %hwlock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hwspinlock** %hwlock.addr, metadata !10981, metadata !DIExpression()), !dbg !10982
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !10983, metadata !DIExpression()), !dbg !10984
  store i64* %flags, i64** %flags.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %flags.addr, metadata !10985, metadata !DIExpression()), !dbg !10986
  %0 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock.addr, align 8, !dbg !10987
  %1 = load i32, i32* %to.addr, align 4, !dbg !10988
  %2 = load i64*, i64** %flags.addr, align 8, !dbg !10989
  %call = call i32 @__hwspin_lock_timeout(%struct.hwspinlock* %0, i32 %1, i32 1, i64* %2) #11, !dbg !10990
  ret i32 %call, !dbg !10991
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @__hwspin_lock_timeout(%struct.hwspinlock* %hwlock, i32 %to, i32 %mode, i64* %flags) #0 !dbg !10992 {
entry:
  %hwlock.addr = alloca %struct.hwspinlock*, align 8
  %to.addr = alloca i32, align 4
  %mode.addr = alloca i32, align 4
  %flags.addr = alloca i64*, align 8
  store %struct.hwspinlock* %hwlock, %struct.hwspinlock** %hwlock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hwspinlock** %hwlock.addr, metadata !10995, metadata !DIExpression()), !dbg !10996
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !10997, metadata !DIExpression()), !dbg !10998
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !10999, metadata !DIExpression()), !dbg !11000
  store i64* %flags, i64** %flags.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %flags.addr, metadata !11001, metadata !DIExpression()), !dbg !11002
  ret i32 0, !dbg !11003
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @hwspin_unlock_irqrestore(%struct.hwspinlock* %hwlock, i64* %flags) #0 !dbg !11004 {
entry:
  %hwlock.addr = alloca %struct.hwspinlock*, align 8
  %flags.addr = alloca i64*, align 8
  store %struct.hwspinlock* %hwlock, %struct.hwspinlock** %hwlock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hwspinlock** %hwlock.addr, metadata !11007, metadata !DIExpression()), !dbg !11008
  store i64* %flags, i64** %flags.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %flags.addr, metadata !11009, metadata !DIExpression()), !dbg !11010
  %0 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock.addr, align 8, !dbg !11011
  %1 = load i64*, i64** %flags.addr, align 8, !dbg !11012
  call void @__hwspin_unlock(%struct.hwspinlock* %0, i32 1, i64* %1) #11, !dbg !11013
  ret void, !dbg !11014
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @__hwspin_unlock(%struct.hwspinlock* %hwlock, i32 %mode, i64* %flags) #0 !dbg !11015 {
entry:
  %hwlock.addr = alloca %struct.hwspinlock*, align 8
  %mode.addr = alloca i32, align 4
  %flags.addr = alloca i64*, align 8
  store %struct.hwspinlock* %hwlock, %struct.hwspinlock** %hwlock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hwspinlock** %hwlock.addr, metadata !11018, metadata !DIExpression()), !dbg !11019
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !11020, metadata !DIExpression()), !dbg !11021
  store i64* %flags, i64** %flags.addr, align 8
  call void @llvm.dbg.declare(metadata i64** %flags.addr, metadata !11022, metadata !DIExpression()), !dbg !11023
  ret void, !dbg !11024
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @hwspin_lock_timeout_irq(%struct.hwspinlock* %hwlock, i32 %to) #0 !dbg !11025 {
entry:
  %hwlock.addr = alloca %struct.hwspinlock*, align 8
  %to.addr = alloca i32, align 4
  store %struct.hwspinlock* %hwlock, %struct.hwspinlock** %hwlock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hwspinlock** %hwlock.addr, metadata !11028, metadata !DIExpression()), !dbg !11029
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !11030, metadata !DIExpression()), !dbg !11031
  %0 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock.addr, align 8, !dbg !11032
  %1 = load i32, i32* %to.addr, align 4, !dbg !11033
  %call = call i32 @__hwspin_lock_timeout(%struct.hwspinlock* %0, i32 %1, i32 2, i64* null) #11, !dbg !11034
  ret i32 %call, !dbg !11035
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @hwspin_unlock_irq(%struct.hwspinlock* %hwlock) #0 !dbg !11036 {
entry:
  %hwlock.addr = alloca %struct.hwspinlock*, align 8
  store %struct.hwspinlock* %hwlock, %struct.hwspinlock** %hwlock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hwspinlock** %hwlock.addr, metadata !11039, metadata !DIExpression()), !dbg !11040
  %0 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock.addr, align 8, !dbg !11041
  call void @__hwspin_unlock(%struct.hwspinlock* %0, i32 2, i64* null) #11, !dbg !11042
  ret void, !dbg !11043
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @hwspin_lock_timeout(%struct.hwspinlock* %hwlock, i32 %to) #0 !dbg !11044 {
entry:
  %hwlock.addr = alloca %struct.hwspinlock*, align 8
  %to.addr = alloca i32, align 4
  store %struct.hwspinlock* %hwlock, %struct.hwspinlock** %hwlock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hwspinlock** %hwlock.addr, metadata !11045, metadata !DIExpression()), !dbg !11046
  store i32 %to, i32* %to.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %to.addr, metadata !11047, metadata !DIExpression()), !dbg !11048
  %0 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock.addr, align 8, !dbg !11049
  %1 = load i32, i32* %to.addr, align 4, !dbg !11050
  %call = call i32 @__hwspin_lock_timeout(%struct.hwspinlock* %0, i32 %1, i32 0, i64* null) #11, !dbg !11051
  ret i32 %call, !dbg !11052
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @hwspin_unlock(%struct.hwspinlock* %hwlock) #0 !dbg !11053 {
entry:
  %hwlock.addr = alloca %struct.hwspinlock*, align 8
  store %struct.hwspinlock* %hwlock, %struct.hwspinlock** %hwlock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.hwspinlock** %hwlock.addr, metadata !11054, metadata !DIExpression()), !dbg !11055
  %0 = load %struct.hwspinlock*, %struct.hwspinlock** %hwlock.addr, align 8, !dbg !11056
  call void @__hwspin_unlock(%struct.hwspinlock* %0, i32 0, i64* null) #11, !dbg !11057
  ret void, !dbg !11058
}

; Function Attrs: noredzone
declare dso_local void @mutex_lock(%struct.mutex*) #2

; Function Attrs: noredzone
declare dso_local void @mutex_unlock(%struct.mutex*) #2

; Function Attrs: nounwind readnone willreturn
declare i1 @llvm.is.constant.i16(i16) #5

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal zeroext i16 @__fswab16(i16 zeroext %val) #4 !dbg !11059 {
entry:
  %val.addr = alloca i16, align 2
  store i16 %val, i16* %val.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %val.addr, metadata !11062, metadata !DIExpression()), !dbg !11063
  %0 = load i16, i16* %val.addr, align 2, !dbg !11064
  %conv = zext i16 %0 to i32, !dbg !11064
  %and = and i32 %conv, 255, !dbg !11064
  %shl = shl i32 %and, 8, !dbg !11064
  %1 = load i16, i16* %val.addr, align 2, !dbg !11064
  %conv1 = zext i16 %1 to i32, !dbg !11064
  %and2 = and i32 %conv1, 65280, !dbg !11064
  %shr = ashr i32 %and2, 8, !dbg !11064
  %or = or i32 %shl, %shr, !dbg !11064
  %conv3 = trunc i32 %or to i16, !dbg !11064
  ret i16 %conv3, !dbg !11065
}

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal i32 @__fswab32(i32 %val) #4 !dbg !11066 {
entry:
  %val.addr = alloca i32, align 4
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !11069, metadata !DIExpression()), !dbg !11070
  %0 = load i32, i32* %val.addr, align 4, !dbg !11071
  %call = call i32 @__arch_swab32(i32 %0) #12, !dbg !11072
  ret i32 %call, !dbg !11073
}

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal i32 @__arch_swab32(i32 %val) #4 !dbg !11074 {
entry:
  %val.addr = alloca i32, align 4
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !11076, metadata !DIExpression()), !dbg !11077
  %0 = load i32, i32* %val.addr, align 4, !dbg !11078
  %1 = call i32 asm "bswapl $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i32 %0) #15, !dbg !11079, !srcloc !11080
  store i32 %1, i32* %val.addr, align 4, !dbg !11079
  %2 = load i32, i32* %val.addr, align 4, !dbg !11081
  ret i32 %2, !dbg !11082
}

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal i64 @__fswab64(i64 %val) #4 !dbg !11083 {
entry:
  %val.addr = alloca i64, align 8
  store i64 %val, i64* %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val.addr, metadata !11086, metadata !DIExpression()), !dbg !11087
  %0 = load i64, i64* %val.addr, align 8, !dbg !11088
  %call = call i64 @__arch_swab64(i64 %0) #12, !dbg !11089
  ret i64 %call, !dbg !11090
}

; Function Attrs: noinline noredzone nounwind optnone readnone sspstrong
define internal i64 @__arch_swab64(i64 %val) #4 !dbg !11091 {
entry:
  %val.addr = alloca i64, align 8
  store i64 %val, i64* %val.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %val.addr, metadata !11092, metadata !DIExpression()), !dbg !11093
  %0 = load i64, i64* %val.addr, align 8, !dbg !11094
  %1 = call i64 asm "bswapq $0", "=r,0,~{dirflag},~{fpsr},~{flags}"(i64 %0) #15, !dbg !11095, !srcloc !11096
  store i64 %1, i64* %val.addr, align 8, !dbg !11095
  %2 = load i64, i64* %val.addr, align 8, !dbg !11097
  ret i64 %2, !dbg !11098
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @rb_link_node(%struct.rb_node* %node, %struct.rb_node* %parent, %struct.rb_node** %rb_link) #0 !dbg !11099 {
entry:
  %node.addr = alloca %struct.rb_node*, align 8
  %parent.addr = alloca %struct.rb_node*, align 8
  %rb_link.addr = alloca %struct.rb_node**, align 8
  store %struct.rb_node* %node, %struct.rb_node** %node.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rb_node** %node.addr, metadata !11102, metadata !DIExpression()), !dbg !11103
  store %struct.rb_node* %parent, %struct.rb_node** %parent.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rb_node** %parent.addr, metadata !11104, metadata !DIExpression()), !dbg !11105
  store %struct.rb_node** %rb_link, %struct.rb_node*** %rb_link.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rb_node*** %rb_link.addr, metadata !11106, metadata !DIExpression()), !dbg !11107
  %0 = load %struct.rb_node*, %struct.rb_node** %parent.addr, align 8, !dbg !11108
  %1 = ptrtoint %struct.rb_node* %0 to i64, !dbg !11109
  %2 = load %struct.rb_node*, %struct.rb_node** %node.addr, align 8, !dbg !11110
  %__rb_parent_color = getelementptr inbounds %struct.rb_node, %struct.rb_node* %2, i32 0, i32 0, !dbg !11111
  store i64 %1, i64* %__rb_parent_color, align 8, !dbg !11112
  %3 = load %struct.rb_node*, %struct.rb_node** %node.addr, align 8, !dbg !11113
  %rb_right = getelementptr inbounds %struct.rb_node, %struct.rb_node* %3, i32 0, i32 1, !dbg !11114
  store %struct.rb_node* null, %struct.rb_node** %rb_right, align 8, !dbg !11115
  %4 = load %struct.rb_node*, %struct.rb_node** %node.addr, align 8, !dbg !11116
  %rb_left = getelementptr inbounds %struct.rb_node, %struct.rb_node* %4, i32 0, i32 2, !dbg !11117
  store %struct.rb_node* null, %struct.rb_node** %rb_left, align 8, !dbg !11118
  %5 = load %struct.rb_node*, %struct.rb_node** %node.addr, align 8, !dbg !11119
  %6 = load %struct.rb_node**, %struct.rb_node*** %rb_link.addr, align 8, !dbg !11120
  store %struct.rb_node* %5, %struct.rb_node** %6, align 8, !dbg !11121
  ret void, !dbg !11122
}

; Function Attrs: noredzone
declare dso_local void @rb_insert_color(%struct.rb_node*, %struct.rb_root*) #2

; Function Attrs: noredzone
declare dso_local %struct.rb_node* @rb_first(%struct.rb_root*) #2

; Function Attrs: noredzone
declare dso_local %struct.rb_node* @rb_next(%struct.rb_node*) #2

; Function Attrs: noredzone
declare dso_local void @rb_erase(%struct.rb_node*, %struct.rb_root*) #2

; Function Attrs: noredzone
declare dso_local noalias i8* @devm_kmalloc(%struct.device*, i64, i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @kmalloc_array(i64 %n, i64 %size, i32 %flags) #0 !dbg !11123 {
entry:
  %s.addr.i.i = alloca %struct.kmem_cache*, align 8
  call void @llvm.dbg.declare(metadata %struct.kmem_cache** %s.addr.i.i, metadata !5571, metadata !DIExpression()), !dbg !11124
  %flags.addr.i17.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i17.i, metadata !5581, metadata !DIExpression()), !dbg !11128
  %size.addr.i18.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i18.i, metadata !5583, metadata !DIExpression()), !dbg !11129
  %ret.i.i = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %ret.i.i, metadata !5585, metadata !DIExpression()), !dbg !11130
  %retval.i12.i = alloca i32, align 4
  %flags.addr.i13.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i13.i, metadata !5587, metadata !DIExpression()), !dbg !11131
  %retval.i.i = alloca i32, align 4
  %size.addr.i11.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i11.i, metadata !5593, metadata !DIExpression()), !dbg !11133
  %size.addr.i.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i.i, metadata !5599, metadata !DIExpression()), !dbg !11135
  %flags.addr.i.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i.i, metadata !5608, metadata !DIExpression()), !dbg !11138
  %order.addr.i.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.addr.i.i.i, metadata !5610, metadata !DIExpression()), !dbg !11139
  %size.addr.i.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i.i, metadata !5612, metadata !DIExpression()), !dbg !11140
  %flags.addr.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i.i, metadata !5614, metadata !DIExpression()), !dbg !11141
  %order.i.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %order.i.i, metadata !5616, metadata !DIExpression()), !dbg !11142
  %retval.i = alloca i8*, align 8
  %size.addr.i = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr.i, metadata !5618, metadata !DIExpression()), !dbg !11143
  %flags.addr.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr.i, metadata !5620, metadata !DIExpression()), !dbg !11144
  %index.i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %index.i, metadata !5622, metadata !DIExpression()), !dbg !11145
  %retval = alloca i8*, align 8
  %n.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %bytes = alloca i64, align 8
  %__a = alloca i64, align 8
  %__b = alloca i64, align 8
  %__d = alloca i64*, align 8
  %tmp = alloca i8, align 1
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !11146, metadata !DIExpression()), !dbg !11147
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !11148, metadata !DIExpression()), !dbg !11149
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !11150, metadata !DIExpression()), !dbg !11151
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !11152, metadata !DIExpression()), !dbg !11153
  call void @llvm.dbg.declare(metadata i64* %__a, metadata !11154, metadata !DIExpression()), !dbg !11157
  %0 = load i64, i64* %n.addr, align 8, !dbg !11157
  store i64 %0, i64* %__a, align 8, !dbg !11157
  call void @llvm.dbg.declare(metadata i64* %__b, metadata !11158, metadata !DIExpression()), !dbg !11157
  %1 = load i64, i64* %size.addr, align 8, !dbg !11157
  store i64 %1, i64* %__b, align 8, !dbg !11157
  call void @llvm.dbg.declare(metadata i64** %__d, metadata !11159, metadata !DIExpression()), !dbg !11157
  store i64* %bytes, i64** %__d, align 8, !dbg !11157
  %cmp = icmp eq i64* %__a, %__b, !dbg !11157
  %conv = zext i1 %cmp to i32, !dbg !11157
  %2 = load i64*, i64** %__d, align 8, !dbg !11157
  %cmp1 = icmp eq i64* %__a, %2, !dbg !11157
  %conv2 = zext i1 %cmp1 to i32, !dbg !11157
  %3 = load i64, i64* %__a, align 8, !dbg !11157
  %4 = load i64, i64* %__b, align 8, !dbg !11157
  %5 = load i64*, i64** %__d, align 8, !dbg !11157
  %6 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %3, i64 %4), !dbg !11157
  %7 = extractvalue { i64, i1 } %6, 1, !dbg !11157
  %8 = extractvalue { i64, i1 } %6, 0, !dbg !11157
  store i64 %8, i64* %5, align 8, !dbg !11157
  %frombool = zext i1 %7 to i8, !dbg !11157
  store i8 %frombool, i8* %tmp, align 1, !dbg !11157
  %9 = load i8, i8* %tmp, align 1, !dbg !11157
  %tobool = trunc i8 %9 to i1, !dbg !11157
  %call = call zeroext i1 @__must_check_overflow(i1 zeroext %tobool) #11, !dbg !11161
  %lnot = xor i1 %call, true, !dbg !11161
  %lnot3 = xor i1 %lnot, true, !dbg !11161
  %lnot.ext = zext i1 %lnot3 to i32, !dbg !11161
  %conv4 = sext i32 %lnot.ext to i64, !dbg !11161
  %tobool5 = icmp ne i64 %conv4, 0, !dbg !11161
  br i1 %tobool5, label %if.then, label %if.end, !dbg !11162

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !11163
  br label %return, !dbg !11163

if.end:                                           ; preds = %entry
  %10 = load i64, i64* %n.addr, align 8, !dbg !11164
  %11 = call i1 @llvm.is.constant.i64(i64 %10), !dbg !11165
  br i1 %11, label %land.lhs.true, label %if.end8, !dbg !11166

land.lhs.true:                                    ; preds = %if.end
  %12 = load i64, i64* %size.addr, align 8, !dbg !11167
  %13 = call i1 @llvm.is.constant.i64(i64 %12), !dbg !11168
  br i1 %13, label %if.then6, label %if.end8, !dbg !11169

if.then6:                                         ; preds = %land.lhs.true
  %14 = load i64, i64* %bytes, align 8, !dbg !11170
  %15 = load i32, i32* %flags.addr, align 4, !dbg !11171
  store i64 %14, i64* %size.addr.i, align 8
  store i32 %15, i32* %flags.addr.i, align 4
  %16 = load i64, i64* %size.addr.i, align 8, !dbg !11172
  %17 = call i1 @llvm.is.constant.i64(i64 %16) #10, !dbg !11173
  br i1 %17, label %if.then.i, label %if.end9.i, !dbg !11174

if.then.i:                                        ; preds = %if.then6
  %18 = load i64, i64* %size.addr.i, align 8, !dbg !11175
  %cmp.i = icmp ugt i64 %18, 8192, !dbg !11176
  br i1 %cmp.i, label %if.then1.i, label %if.end.i, !dbg !11177

if.then1.i:                                       ; preds = %if.then.i
  %19 = load i64, i64* %size.addr.i, align 8, !dbg !11178
  %20 = load i32, i32* %flags.addr.i, align 4, !dbg !11179
  store i64 %19, i64* %size.addr.i.i, align 8
  store i32 %20, i32* %flags.addr.i.i, align 4
  %21 = load i64, i64* %size.addr.i.i, align 8, !dbg !11180
  %call.i.i = call i32 @get_order(i64 %21) #12, !dbg !11181
  store i32 %call.i.i, i32* %order.i.i, align 4, !dbg !11142
  %22 = load i64, i64* %size.addr.i.i, align 8, !dbg !11182
  %23 = load i32, i32* %flags.addr.i.i, align 4, !dbg !11183
  %24 = load i32, i32* %order.i.i, align 4, !dbg !11184
  store i64 %22, i64* %size.addr.i.i.i, align 8
  store i32 %23, i32* %flags.addr.i.i.i, align 4
  store i32 %24, i32* %order.addr.i.i.i, align 4
  %25 = load i64, i64* %size.addr.i.i.i, align 8, !dbg !11185
  %26 = load i32, i32* %flags.addr.i.i.i, align 4, !dbg !11186
  %27 = load i32, i32* %order.addr.i.i.i, align 4, !dbg !11187
  %call.i.i.i = call noalias i8* @kmalloc_order(i64 %25, i32 %26, i32 %27) #14, !dbg !11188
  %ptrint.i.i.i = ptrtoint i8* %call.i.i.i to i64, !dbg !11188
  %maskedptr.i.i.i = and i64 %ptrint.i.i.i, 4095, !dbg !11188
  %maskcond.i.i.i = icmp eq i64 %maskedptr.i.i.i, 0, !dbg !11188
  call void @llvm.assume(i1 %maskcond.i.i.i) #10, !dbg !11188
  store i8* %call.i.i.i, i8** %retval.i, align 8, !dbg !11189
  br label %kmalloc.exit, !dbg !11189

if.end.i:                                         ; preds = %if.then.i
  %28 = load i64, i64* %size.addr.i, align 8, !dbg !11190
  store i64 %28, i64* %size.addr.i11.i, align 8
  %29 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11191
  %tobool.i.i = icmp ne i64 %29, 0, !dbg !11191
  br i1 %tobool.i.i, label %if.end.i.i, label %if.then.i.i, !dbg !11192

if.then.i.i:                                      ; preds = %if.end.i
  store i32 0, i32* %retval.i.i, align 4, !dbg !11193
  br label %kmalloc_index.exit.i, !dbg !11193

if.end.i.i:                                       ; preds = %if.end.i
  %30 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11194
  %cmp.i.i = icmp ule i64 %30, 8, !dbg !11195
  br i1 %cmp.i.i, label %if.then1.i.i, label %if.end2.i.i, !dbg !11196

if.then1.i.i:                                     ; preds = %if.end.i.i
  store i32 3, i32* %retval.i.i, align 4, !dbg !11197
  br label %kmalloc_index.exit.i, !dbg !11197

if.end2.i.i:                                      ; preds = %if.end.i.i
  %31 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11198
  %cmp3.i.i = icmp ugt i64 %31, 64, !dbg !11199
  br i1 %cmp3.i.i, label %land.lhs.true.i.i, label %if.end6.i.i, !dbg !11200

land.lhs.true.i.i:                                ; preds = %if.end2.i.i
  %32 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11201
  %cmp4.i.i = icmp ule i64 %32, 96, !dbg !11202
  br i1 %cmp4.i.i, label %if.then5.i.i, label %if.end6.i.i, !dbg !11203

if.then5.i.i:                                     ; preds = %land.lhs.true.i.i
  store i32 1, i32* %retval.i.i, align 4, !dbg !11204
  br label %kmalloc_index.exit.i, !dbg !11204

if.end6.i.i:                                      ; preds = %land.lhs.true.i.i, %if.end2.i.i
  %33 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11205
  %cmp7.i.i = icmp ugt i64 %33, 128, !dbg !11206
  br i1 %cmp7.i.i, label %land.lhs.true8.i.i, label %if.end11.i.i, !dbg !11207

land.lhs.true8.i.i:                               ; preds = %if.end6.i.i
  %34 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11208
  %cmp9.i.i = icmp ule i64 %34, 192, !dbg !11209
  br i1 %cmp9.i.i, label %if.then10.i.i, label %if.end11.i.i, !dbg !11210

if.then10.i.i:                                    ; preds = %land.lhs.true8.i.i
  store i32 2, i32* %retval.i.i, align 4, !dbg !11211
  br label %kmalloc_index.exit.i, !dbg !11211

if.end11.i.i:                                     ; preds = %land.lhs.true8.i.i, %if.end6.i.i
  %35 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11212
  %cmp12.i.i = icmp ule i64 %35, 8, !dbg !11213
  br i1 %cmp12.i.i, label %if.then13.i.i, label %if.end14.i.i, !dbg !11214

if.then13.i.i:                                    ; preds = %if.end11.i.i
  store i32 3, i32* %retval.i.i, align 4, !dbg !11215
  br label %kmalloc_index.exit.i, !dbg !11215

if.end14.i.i:                                     ; preds = %if.end11.i.i
  %36 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11216
  %cmp15.i.i = icmp ule i64 %36, 16, !dbg !11217
  br i1 %cmp15.i.i, label %if.then16.i.i, label %if.end17.i.i, !dbg !11218

if.then16.i.i:                                    ; preds = %if.end14.i.i
  store i32 4, i32* %retval.i.i, align 4, !dbg !11219
  br label %kmalloc_index.exit.i, !dbg !11219

if.end17.i.i:                                     ; preds = %if.end14.i.i
  %37 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11220
  %cmp18.i.i = icmp ule i64 %37, 32, !dbg !11221
  br i1 %cmp18.i.i, label %if.then19.i.i, label %if.end20.i.i, !dbg !11222

if.then19.i.i:                                    ; preds = %if.end17.i.i
  store i32 5, i32* %retval.i.i, align 4, !dbg !11223
  br label %kmalloc_index.exit.i, !dbg !11223

if.end20.i.i:                                     ; preds = %if.end17.i.i
  %38 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11224
  %cmp21.i.i = icmp ule i64 %38, 64, !dbg !11225
  br i1 %cmp21.i.i, label %if.then22.i.i, label %if.end23.i.i, !dbg !11226

if.then22.i.i:                                    ; preds = %if.end20.i.i
  store i32 6, i32* %retval.i.i, align 4, !dbg !11227
  br label %kmalloc_index.exit.i, !dbg !11227

if.end23.i.i:                                     ; preds = %if.end20.i.i
  %39 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11228
  %cmp24.i.i = icmp ule i64 %39, 128, !dbg !11229
  br i1 %cmp24.i.i, label %if.then25.i.i, label %if.end26.i.i, !dbg !11230

if.then25.i.i:                                    ; preds = %if.end23.i.i
  store i32 7, i32* %retval.i.i, align 4, !dbg !11231
  br label %kmalloc_index.exit.i, !dbg !11231

if.end26.i.i:                                     ; preds = %if.end23.i.i
  %40 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11232
  %cmp27.i.i = icmp ule i64 %40, 256, !dbg !11233
  br i1 %cmp27.i.i, label %if.then28.i.i, label %if.end29.i.i, !dbg !11234

if.then28.i.i:                                    ; preds = %if.end26.i.i
  store i32 8, i32* %retval.i.i, align 4, !dbg !11235
  br label %kmalloc_index.exit.i, !dbg !11235

if.end29.i.i:                                     ; preds = %if.end26.i.i
  %41 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11236
  %cmp30.i.i = icmp ule i64 %41, 512, !dbg !11237
  br i1 %cmp30.i.i, label %if.then31.i.i, label %if.end32.i.i, !dbg !11238

if.then31.i.i:                                    ; preds = %if.end29.i.i
  store i32 9, i32* %retval.i.i, align 4, !dbg !11239
  br label %kmalloc_index.exit.i, !dbg !11239

if.end32.i.i:                                     ; preds = %if.end29.i.i
  %42 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11240
  %cmp33.i.i = icmp ule i64 %42, 1024, !dbg !11241
  br i1 %cmp33.i.i, label %if.then34.i.i, label %if.end35.i.i, !dbg !11242

if.then34.i.i:                                    ; preds = %if.end32.i.i
  store i32 10, i32* %retval.i.i, align 4, !dbg !11243
  br label %kmalloc_index.exit.i, !dbg !11243

if.end35.i.i:                                     ; preds = %if.end32.i.i
  %43 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11244
  %cmp36.i.i = icmp ule i64 %43, 2048, !dbg !11245
  br i1 %cmp36.i.i, label %if.then37.i.i, label %if.end38.i.i, !dbg !11246

if.then37.i.i:                                    ; preds = %if.end35.i.i
  store i32 11, i32* %retval.i.i, align 4, !dbg !11247
  br label %kmalloc_index.exit.i, !dbg !11247

if.end38.i.i:                                     ; preds = %if.end35.i.i
  %44 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11248
  %cmp39.i.i = icmp ule i64 %44, 4096, !dbg !11249
  br i1 %cmp39.i.i, label %if.then40.i.i, label %if.end41.i.i, !dbg !11250

if.then40.i.i:                                    ; preds = %if.end38.i.i
  store i32 12, i32* %retval.i.i, align 4, !dbg !11251
  br label %kmalloc_index.exit.i, !dbg !11251

if.end41.i.i:                                     ; preds = %if.end38.i.i
  %45 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11252
  %cmp42.i.i = icmp ule i64 %45, 8192, !dbg !11253
  br i1 %cmp42.i.i, label %if.then43.i.i, label %if.end44.i.i, !dbg !11254

if.then43.i.i:                                    ; preds = %if.end41.i.i
  store i32 13, i32* %retval.i.i, align 4, !dbg !11255
  br label %kmalloc_index.exit.i, !dbg !11255

if.end44.i.i:                                     ; preds = %if.end41.i.i
  %46 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11256
  %cmp45.i.i = icmp ule i64 %46, 16384, !dbg !11257
  br i1 %cmp45.i.i, label %if.then46.i.i, label %if.end47.i.i, !dbg !11258

if.then46.i.i:                                    ; preds = %if.end44.i.i
  store i32 14, i32* %retval.i.i, align 4, !dbg !11259
  br label %kmalloc_index.exit.i, !dbg !11259

if.end47.i.i:                                     ; preds = %if.end44.i.i
  %47 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11260
  %cmp48.i.i = icmp ule i64 %47, 32768, !dbg !11261
  br i1 %cmp48.i.i, label %if.then49.i.i, label %if.end50.i.i, !dbg !11262

if.then49.i.i:                                    ; preds = %if.end47.i.i
  store i32 15, i32* %retval.i.i, align 4, !dbg !11263
  br label %kmalloc_index.exit.i, !dbg !11263

if.end50.i.i:                                     ; preds = %if.end47.i.i
  %48 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11264
  %cmp51.i.i = icmp ule i64 %48, 65536, !dbg !11265
  br i1 %cmp51.i.i, label %if.then52.i.i, label %if.end53.i.i, !dbg !11266

if.then52.i.i:                                    ; preds = %if.end50.i.i
  store i32 16, i32* %retval.i.i, align 4, !dbg !11267
  br label %kmalloc_index.exit.i, !dbg !11267

if.end53.i.i:                                     ; preds = %if.end50.i.i
  %49 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11268
  %cmp54.i.i = icmp ule i64 %49, 131072, !dbg !11269
  br i1 %cmp54.i.i, label %if.then55.i.i, label %if.end56.i.i, !dbg !11270

if.then55.i.i:                                    ; preds = %if.end53.i.i
  store i32 17, i32* %retval.i.i, align 4, !dbg !11271
  br label %kmalloc_index.exit.i, !dbg !11271

if.end56.i.i:                                     ; preds = %if.end53.i.i
  %50 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11272
  %cmp57.i.i = icmp ule i64 %50, 262144, !dbg !11273
  br i1 %cmp57.i.i, label %if.then58.i.i, label %if.end59.i.i, !dbg !11274

if.then58.i.i:                                    ; preds = %if.end56.i.i
  store i32 18, i32* %retval.i.i, align 4, !dbg !11275
  br label %kmalloc_index.exit.i, !dbg !11275

if.end59.i.i:                                     ; preds = %if.end56.i.i
  %51 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11276
  %cmp60.i.i = icmp ule i64 %51, 524288, !dbg !11277
  br i1 %cmp60.i.i, label %if.then61.i.i, label %if.end62.i.i, !dbg !11278

if.then61.i.i:                                    ; preds = %if.end59.i.i
  store i32 19, i32* %retval.i.i, align 4, !dbg !11279
  br label %kmalloc_index.exit.i, !dbg !11279

if.end62.i.i:                                     ; preds = %if.end59.i.i
  %52 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11280
  %cmp63.i.i = icmp ule i64 %52, 1048576, !dbg !11281
  br i1 %cmp63.i.i, label %if.then64.i.i, label %if.end65.i.i, !dbg !11282

if.then64.i.i:                                    ; preds = %if.end62.i.i
  store i32 20, i32* %retval.i.i, align 4, !dbg !11283
  br label %kmalloc_index.exit.i, !dbg !11283

if.end65.i.i:                                     ; preds = %if.end62.i.i
  %53 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11284
  %cmp66.i.i = icmp ule i64 %53, 2097152, !dbg !11285
  br i1 %cmp66.i.i, label %if.then67.i.i, label %if.end68.i.i, !dbg !11286

if.then67.i.i:                                    ; preds = %if.end65.i.i
  store i32 21, i32* %retval.i.i, align 4, !dbg !11287
  br label %kmalloc_index.exit.i, !dbg !11287

if.end68.i.i:                                     ; preds = %if.end65.i.i
  %54 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11288
  %cmp69.i.i = icmp ule i64 %54, 4194304, !dbg !11289
  br i1 %cmp69.i.i, label %if.then70.i.i, label %if.end71.i.i, !dbg !11290

if.then70.i.i:                                    ; preds = %if.end68.i.i
  store i32 22, i32* %retval.i.i, align 4, !dbg !11291
  br label %kmalloc_index.exit.i, !dbg !11291

if.end71.i.i:                                     ; preds = %if.end68.i.i
  %55 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11292
  %cmp72.i.i = icmp ule i64 %55, 8388608, !dbg !11293
  br i1 %cmp72.i.i, label %if.then73.i.i, label %if.end74.i.i, !dbg !11294

if.then73.i.i:                                    ; preds = %if.end71.i.i
  store i32 23, i32* %retval.i.i, align 4, !dbg !11295
  br label %kmalloc_index.exit.i, !dbg !11295

if.end74.i.i:                                     ; preds = %if.end71.i.i
  %56 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11296
  %cmp75.i.i = icmp ule i64 %56, 16777216, !dbg !11297
  br i1 %cmp75.i.i, label %if.then76.i.i, label %if.end77.i.i, !dbg !11298

if.then76.i.i:                                    ; preds = %if.end74.i.i
  store i32 24, i32* %retval.i.i, align 4, !dbg !11299
  br label %kmalloc_index.exit.i, !dbg !11299

if.end77.i.i:                                     ; preds = %if.end74.i.i
  %57 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11300
  %cmp78.i.i = icmp ule i64 %57, 33554432, !dbg !11301
  br i1 %cmp78.i.i, label %if.then79.i.i, label %if.end80.i.i, !dbg !11302

if.then79.i.i:                                    ; preds = %if.end77.i.i
  store i32 25, i32* %retval.i.i, align 4, !dbg !11303
  br label %kmalloc_index.exit.i, !dbg !11303

if.end80.i.i:                                     ; preds = %if.end77.i.i
  %58 = load i64, i64* %size.addr.i11.i, align 8, !dbg !11304
  %cmp81.i.i = icmp ule i64 %58, 67108864, !dbg !11305
  br i1 %cmp81.i.i, label %if.then82.i.i, label %if.end83.i.i, !dbg !11306

if.then82.i.i:                                    ; preds = %if.end80.i.i
  store i32 26, i32* %retval.i.i, align 4, !dbg !11307
  br label %kmalloc_index.exit.i, !dbg !11307

if.end83.i.i:                                     ; preds = %if.end80.i.i
  call void asm sideeffect "1:\09.byte 0x0f, 0x0b\0A.pushsection __bug_table,\22aw\22\0A2:\09.long 1b - 2b\09# bug_entry::bug_addr\0A\09.long ${0:c} - 2b\09# bug_entry::file\0A\09.word ${1:c}\09# bug_entry::line\0A\09.word ${2:c}\09# bug_entry::flags\0A\09.org 2b+${3:c}\0A.popsection", "i,i,i,i,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.16, i64 0, i64 0), i32 382, i32 0, i64 12) #10, !dbg !11308, !srcloc !5798
  call void asm sideeffect "${0:c}:\0A\09.pushsection .discard.unreachable\0A\09.long ${0:c}b - .\0A\09.popsection\0A\09", "i,~{dirflag},~{fpsr},~{flags}"(i32 156) #10, !dbg !11309, !srcloc !5802
  unreachable, !dbg !11310

kmalloc_index.exit.i:                             ; preds = %if.then82.i.i, %if.then79.i.i, %if.then76.i.i, %if.then73.i.i, %if.then70.i.i, %if.then67.i.i, %if.then64.i.i, %if.then61.i.i, %if.then58.i.i, %if.then55.i.i, %if.then52.i.i, %if.then49.i.i, %if.then46.i.i, %if.then43.i.i, %if.then40.i.i, %if.then37.i.i, %if.then34.i.i, %if.then31.i.i, %if.then28.i.i, %if.then25.i.i, %if.then22.i.i, %if.then19.i.i, %if.then16.i.i, %if.then13.i.i, %if.then10.i.i, %if.then5.i.i, %if.then1.i.i, %if.then.i.i
  %59 = load i32, i32* %retval.i.i, align 4, !dbg !11311
  store i32 %59, i32* %index.i, align 4, !dbg !11312
  %60 = load i32, i32* %index.i, align 4, !dbg !11313
  %tobool.i = icmp ne i32 %60, 0, !dbg !11313
  br i1 %tobool.i, label %if.end4.i, label %if.then3.i, !dbg !11314

if.then3.i:                                       ; preds = %kmalloc_index.exit.i
  store i8* inttoptr (i64 16 to i8*), i8** %retval.i, align 8, !dbg !11315
  br label %kmalloc.exit, !dbg !11315

if.end4.i:                                        ; preds = %kmalloc_index.exit.i
  %61 = load i32, i32* %flags.addr.i, align 4, !dbg !11316
  store i32 %61, i32* %flags.addr.i13.i, align 4
  %62 = load i32, i32* %flags.addr.i13.i, align 4, !dbg !11317
  %and.i.i = and i32 %62, 17, !dbg !11317
  %cmp.i14.i = icmp eq i32 %and.i.i, 0, !dbg !11317
  %lnot.i.i = xor i1 %cmp.i14.i, true, !dbg !11317
  %lnot.ext.i.i = zext i1 %cmp.i14.i to i32, !dbg !11317
  %conv.i.i = sext i32 %lnot.ext.i.i to i64, !dbg !11317
  br i1 %cmp.i14.i, label %if.then.i15.i, label %if.end.i16.i, !dbg !11318

if.then.i15.i:                                    ; preds = %if.end4.i
  store i32 0, i32* %retval.i12.i, align 4, !dbg !11319
  br label %kmalloc_type.exit.i, !dbg !11319

if.end.i16.i:                                     ; preds = %if.end4.i
  %63 = load i32, i32* %flags.addr.i13.i, align 4, !dbg !11320
  %and2.i.i = and i32 %63, 1, !dbg !11321
  %tobool3.i.i = icmp ne i32 %and2.i.i, 0, !dbg !11320
  %64 = zext i1 %tobool3.i.i to i64, !dbg !11320
  %cond.i.i = select i1 %tobool3.i.i, i32 2, i32 1, !dbg !11320
  store i32 %cond.i.i, i32* %retval.i12.i, align 4, !dbg !11322
  br label %kmalloc_type.exit.i, !dbg !11322

kmalloc_type.exit.i:                              ; preds = %if.end.i16.i, %if.then.i15.i
  %65 = load i32, i32* %retval.i12.i, align 4, !dbg !11323
  %idxprom.i = zext i32 %65 to i64, !dbg !11324
  %arrayidx.i = getelementptr [3 x [14 x %struct.kmem_cache*]], [3 x [14 x %struct.kmem_cache*]]* @kmalloc_caches, i64 0, i64 %idxprom.i, !dbg !11324
  %66 = load i32, i32* %index.i, align 4, !dbg !11325
  %idxprom6.i = zext i32 %66 to i64, !dbg !11324
  %arrayidx7.i = getelementptr [14 x %struct.kmem_cache*], [14 x %struct.kmem_cache*]* %arrayidx.i, i64 0, i64 %idxprom6.i, !dbg !11324
  %67 = load %struct.kmem_cache*, %struct.kmem_cache** %arrayidx7.i, align 8, !dbg !11324
  %68 = load i32, i32* %flags.addr.i, align 4, !dbg !11326
  %69 = load i64, i64* %size.addr.i, align 8, !dbg !11327
  store %struct.kmem_cache* %67, %struct.kmem_cache** %s.addr.i.i, align 8
  store i32 %68, i32* %flags.addr.i17.i, align 4
  store i64 %69, i64* %size.addr.i18.i, align 8
  %70 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i, align 8, !dbg !11328
  %71 = load i32, i32* %flags.addr.i17.i, align 4, !dbg !11329
  %call.i19.i = call noalias i8* @kmem_cache_alloc(%struct.kmem_cache* %70, i32 %71) #14, !dbg !11330
  %ptrint.i.i = ptrtoint i8* %call.i19.i to i64, !dbg !11330
  %maskedptr.i.i = and i64 %ptrint.i.i, 7, !dbg !11330
  %maskcond.i.i = icmp eq i64 %maskedptr.i.i, 0, !dbg !11330
  call void @llvm.assume(i1 %maskcond.i.i) #10, !dbg !11330
  store i8* %call.i19.i, i8** %ret.i.i, align 8, !dbg !11130
  %72 = load %struct.kmem_cache*, %struct.kmem_cache** %s.addr.i.i, align 8, !dbg !11331
  %73 = load i8*, i8** %ret.i.i, align 8, !dbg !11332
  %74 = load i64, i64* %size.addr.i18.i, align 8, !dbg !11333
  %75 = load i32, i32* %flags.addr.i17.i, align 4, !dbg !11334
  %call1.i.i = call i8* @kasan_kmalloc(%struct.kmem_cache* %72, i8* %73, i64 %74, i32 %75) #14, !dbg !11335
  store i8* %call1.i.i, i8** %ret.i.i, align 8, !dbg !11336
  %76 = load i8*, i8** %ret.i.i, align 8, !dbg !11337
  store i8* %76, i8** %retval.i, align 8, !dbg !11338
  br label %kmalloc.exit, !dbg !11338

if.end9.i:                                        ; preds = %if.then6
  %77 = load i64, i64* %size.addr.i, align 8, !dbg !11339
  %78 = load i32, i32* %flags.addr.i, align 4, !dbg !11340
  %call10.i = call noalias i8* @__kmalloc(i64 %77, i32 %78) #14, !dbg !11341
  %ptrint.i = ptrtoint i8* %call10.i to i64, !dbg !11341
  %maskedptr.i = and i64 %ptrint.i, 7, !dbg !11341
  %maskcond.i = icmp eq i64 %maskedptr.i, 0, !dbg !11341
  call void @llvm.assume(i1 %maskcond.i) #10, !dbg !11341
  store i8* %call10.i, i8** %retval.i, align 8, !dbg !11342
  br label %kmalloc.exit, !dbg !11342

kmalloc.exit:                                     ; preds = %if.then1.i, %if.then3.i, %kmalloc_type.exit.i, %if.end9.i
  %79 = load i8*, i8** %retval.i, align 8, !dbg !11343
  store i8* %79, i8** %retval, align 8, !dbg !11344
  br label %return, !dbg !11344

if.end8:                                          ; preds = %land.lhs.true, %if.end
  %80 = load i64, i64* %bytes, align 8, !dbg !11345
  %81 = load i32, i32* %flags.addr, align 4, !dbg !11346
  %call9 = call noalias i8* @__kmalloc(i64 %80, i32 %81) #11, !dbg !11347
  %ptrint = ptrtoint i8* %call9 to i64, !dbg !11347
  %maskedptr = and i64 %ptrint, 7, !dbg !11347
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !11347
  call void @llvm.assume(i1 %maskcond), !dbg !11347
  store i8* %call9, i8** %retval, align 8, !dbg !11348
  br label %return, !dbg !11348

return:                                           ; preds = %if.end8, %kmalloc.exit, %if.then
  %82 = load i8*, i8** %retval, align 8, !dbg !11349
  ret i8* %82, !dbg !11349
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @__must_check_overflow(i1 zeroext %overflow) #0 !dbg !11350 {
entry:
  %overflow.addr = alloca i8, align 1
  %frombool = zext i1 %overflow to i8
  store i8 %frombool, i8* %overflow.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %overflow.addr, metadata !11354, metadata !DIExpression()), !dbg !11355
  %0 = load i8, i8* %overflow.addr, align 1, !dbg !11356
  %tobool = trunc i8 %0 to i1, !dbg !11356
  %lnot = xor i1 %tobool, true, !dbg !11356
  %lnot1 = xor i1 %lnot, true, !dbg !11356
  %lnot.ext = zext i1 %lnot1 to i32, !dbg !11356
  %conv = sext i32 %lnot.ext to i64, !dbg !11356
  %tobool2 = icmp ne i64 %conv, 0, !dbg !11356
  ret i1 %tobool2, !dbg !11357
}

; Function Attrs: nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #1

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i8* @devm_kmalloc_array(%struct.device* %dev, i64 %n, i64 %size, i32 %flags) #0 !dbg !11358 {
entry:
  %retval = alloca i8*, align 8
  %dev.addr = alloca %struct.device*, align 8
  %n.addr = alloca i64, align 8
  %size.addr = alloca i64, align 8
  %flags.addr = alloca i32, align 4
  %bytes = alloca i64, align 8
  %__a = alloca i64, align 8
  %__b = alloca i64, align 8
  %__d = alloca i64*, align 8
  %tmp = alloca i8, align 1
  store %struct.device* %dev, %struct.device** %dev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.device** %dev.addr, metadata !11359, metadata !DIExpression()), !dbg !11360
  store i64 %n, i64* %n.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %n.addr, metadata !11361, metadata !DIExpression()), !dbg !11362
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !11363, metadata !DIExpression()), !dbg !11364
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !11365, metadata !DIExpression()), !dbg !11366
  call void @llvm.dbg.declare(metadata i64* %bytes, metadata !11367, metadata !DIExpression()), !dbg !11368
  call void @llvm.dbg.declare(metadata i64* %__a, metadata !11369, metadata !DIExpression()), !dbg !11372
  %0 = load i64, i64* %n.addr, align 8, !dbg !11372
  store i64 %0, i64* %__a, align 8, !dbg !11372
  call void @llvm.dbg.declare(metadata i64* %__b, metadata !11373, metadata !DIExpression()), !dbg !11372
  %1 = load i64, i64* %size.addr, align 8, !dbg !11372
  store i64 %1, i64* %__b, align 8, !dbg !11372
  call void @llvm.dbg.declare(metadata i64** %__d, metadata !11374, metadata !DIExpression()), !dbg !11372
  store i64* %bytes, i64** %__d, align 8, !dbg !11372
  %cmp = icmp eq i64* %__a, %__b, !dbg !11372
  %conv = zext i1 %cmp to i32, !dbg !11372
  %2 = load i64*, i64** %__d, align 8, !dbg !11372
  %cmp1 = icmp eq i64* %__a, %2, !dbg !11372
  %conv2 = zext i1 %cmp1 to i32, !dbg !11372
  %3 = load i64, i64* %__a, align 8, !dbg !11372
  %4 = load i64, i64* %__b, align 8, !dbg !11372
  %5 = load i64*, i64** %__d, align 8, !dbg !11372
  %6 = call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %3, i64 %4), !dbg !11372
  %7 = extractvalue { i64, i1 } %6, 1, !dbg !11372
  %8 = extractvalue { i64, i1 } %6, 0, !dbg !11372
  store i64 %8, i64* %5, align 8, !dbg !11372
  %frombool = zext i1 %7 to i8, !dbg !11372
  store i8 %frombool, i8* %tmp, align 1, !dbg !11372
  %9 = load i8, i8* %tmp, align 1, !dbg !11372
  %tobool = trunc i8 %9 to i1, !dbg !11372
  %call = call zeroext i1 @__must_check_overflow(i1 zeroext %tobool) #11, !dbg !11375
  %lnot = xor i1 %call, true, !dbg !11375
  %lnot3 = xor i1 %lnot, true, !dbg !11375
  %lnot.ext = zext i1 %lnot3 to i32, !dbg !11375
  %conv4 = sext i32 %lnot.ext to i64, !dbg !11375
  %tobool5 = icmp ne i64 %conv4, 0, !dbg !11375
  br i1 %tobool5, label %if.then, label %if.end, !dbg !11376

if.then:                                          ; preds = %entry
  store i8* null, i8** %retval, align 8, !dbg !11377
  br label %return, !dbg !11377

if.end:                                           ; preds = %entry
  %10 = load %struct.device*, %struct.device** %dev.addr, align 8, !dbg !11378
  %11 = load i64, i64* %bytes, align 8, !dbg !11379
  %12 = load i32, i32* %flags.addr, align 4, !dbg !11380
  %call6 = call noalias i8* @devm_kmalloc(%struct.device* %10, i64 %11, i32 %12) #11, !dbg !11381
  store i8* %call6, i8** %retval, align 8, !dbg !11382
  br label %return, !dbg !11382

return:                                           ; preds = %if.end, %if.then
  %13 = load i8*, i8** %retval, align 8, !dbg !11383
  ret i8* %13, !dbg !11383
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @__list_del_entry(%struct.list_head* %entry1) #0 !dbg !11384 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %entry.addr, metadata !11385, metadata !DIExpression()), !dbg !11386
  %0 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8, !dbg !11387
  %call = call zeroext i1 @__list_del_entry_valid(%struct.list_head* %0) #11, !dbg !11389
  br i1 %call, label %if.end, label %if.then, !dbg !11390

if.then:                                          ; preds = %entry
  br label %return, !dbg !11391

if.end:                                           ; preds = %entry
  %1 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8, !dbg !11392
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1, !dbg !11393
  %2 = load %struct.list_head*, %struct.list_head** %prev, align 8, !dbg !11393
  %3 = load %struct.list_head*, %struct.list_head** %entry.addr, align 8, !dbg !11394
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %3, i32 0, i32 0, !dbg !11395
  %4 = load %struct.list_head*, %struct.list_head** %next, align 8, !dbg !11395
  call void @__list_del(%struct.list_head* %2, %struct.list_head* %4) #11, !dbg !11396
  br label %return, !dbg !11397

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !11397
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @__list_del_entry_valid(%struct.list_head* %entry1) #0 !dbg !11398 {
entry:
  %entry.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %entry1, %struct.list_head** %entry.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %entry.addr, metadata !11401, metadata !DIExpression()), !dbg !11402
  ret i1 true, !dbg !11403
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @__list_del(%struct.list_head* %prev, %struct.list_head* %next) #0 !dbg !11404 {
entry:
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %prev.addr, metadata !11405, metadata !DIExpression()), !dbg !11406
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %next.addr, metadata !11407, metadata !DIExpression()), !dbg !11408
  %0 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8, !dbg !11409
  %1 = load %struct.list_head*, %struct.list_head** %next.addr, align 8, !dbg !11410
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1, !dbg !11411
  store %struct.list_head* %0, %struct.list_head** %prev1, align 8, !dbg !11412
  br label %do.body, !dbg !11413

do.body:                                          ; preds = %entry
  br label %do.body2, !dbg !11414

do.body2:                                         ; preds = %do.body
  br label %do.end, !dbg !11416

do.end:                                           ; preds = %do.body2
  br label %do.body3, !dbg !11414

do.body3:                                         ; preds = %do.end
  %2 = load %struct.list_head*, %struct.list_head** %next.addr, align 8, !dbg !11418
  %3 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8, !dbg !11418
  %next4 = getelementptr inbounds %struct.list_head, %struct.list_head* %3, i32 0, i32 0, !dbg !11418
  store volatile %struct.list_head* %2, %struct.list_head** %next4, align 8, !dbg !11418
  br label %do.end5, !dbg !11418

do.end5:                                          ; preds = %do.body3
  br label %do.end6, !dbg !11414

do.end6:                                          ; preds = %do.end5
  ret void, !dbg !11420
}

; Function Attrs: noredzone
declare dso_local i32 @strcmp(i8*, i8*) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal %struct.regmap_range_node* @_regmap_range_lookup(%struct.regmap* %map, i32 %reg) #0 !dbg !11421 {
entry:
  %retval = alloca %struct.regmap_range_node*, align 8
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %node = alloca %struct.rb_node*, align 8
  %this = alloca %struct.regmap_range_node*, align 8
  %__mptr = alloca i8*, align 8
  %tmp = alloca %struct.regmap_range_node*, align 8
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !11424, metadata !DIExpression()), !dbg !11425
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !11426, metadata !DIExpression()), !dbg !11427
  call void @llvm.dbg.declare(metadata %struct.rb_node** %node, metadata !11428, metadata !DIExpression()), !dbg !11429
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11430
  %range_tree = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 60, !dbg !11431
  %rb_node = getelementptr inbounds %struct.rb_root, %struct.rb_root* %range_tree, i32 0, i32 0, !dbg !11432
  %1 = load %struct.rb_node*, %struct.rb_node** %rb_node, align 8, !dbg !11432
  store %struct.rb_node* %1, %struct.rb_node** %node, align 8, !dbg !11429
  br label %while.cond, !dbg !11433

while.cond:                                       ; preds = %if.end4, %entry
  %2 = load %struct.rb_node*, %struct.rb_node** %node, align 8, !dbg !11434
  %tobool = icmp ne %struct.rb_node* %2, null, !dbg !11433
  br i1 %tobool, label %while.body, label %while.end, !dbg !11433

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %this, metadata !11435, metadata !DIExpression()), !dbg !11437
  call void @llvm.dbg.declare(metadata i8** %__mptr, metadata !11438, metadata !DIExpression()), !dbg !11440
  %3 = load %struct.rb_node*, %struct.rb_node** %node, align 8, !dbg !11440
  %4 = bitcast %struct.rb_node* %3 to i8*, !dbg !11440
  store i8* %4, i8** %__mptr, align 8, !dbg !11440
  br label %do.body, !dbg !11440

do.body:                                          ; preds = %while.body
  br label %do.end, !dbg !11441

do.end:                                           ; preds = %do.body
  %5 = load i8*, i8** %__mptr, align 8, !dbg !11440
  %add.ptr = getelementptr i8, i8* %5, i64 0, !dbg !11440
  %6 = bitcast i8* %add.ptr to %struct.regmap_range_node*, !dbg !11440
  store %struct.regmap_range_node* %6, %struct.regmap_range_node** %tmp, align 8, !dbg !11441
  %7 = load %struct.regmap_range_node*, %struct.regmap_range_node** %tmp, align 8, !dbg !11440
  store %struct.regmap_range_node* %7, %struct.regmap_range_node** %this, align 8, !dbg !11437
  %8 = load i32, i32* %reg.addr, align 4, !dbg !11443
  %9 = load %struct.regmap_range_node*, %struct.regmap_range_node** %this, align 8, !dbg !11445
  %range_min = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %9, i32 0, i32 3, !dbg !11446
  %10 = load i32, i32* %range_min, align 8, !dbg !11446
  %cmp = icmp ult i32 %8, %10, !dbg !11447
  br i1 %cmp, label %if.then, label %if.else, !dbg !11448

if.then:                                          ; preds = %do.end
  %11 = load %struct.rb_node*, %struct.rb_node** %node, align 8, !dbg !11449
  %rb_left = getelementptr inbounds %struct.rb_node, %struct.rb_node* %11, i32 0, i32 2, !dbg !11450
  %12 = load %struct.rb_node*, %struct.rb_node** %rb_left, align 8, !dbg !11450
  store %struct.rb_node* %12, %struct.rb_node** %node, align 8, !dbg !11451
  br label %if.end4, !dbg !11452

if.else:                                          ; preds = %do.end
  %13 = load i32, i32* %reg.addr, align 4, !dbg !11453
  %14 = load %struct.regmap_range_node*, %struct.regmap_range_node** %this, align 8, !dbg !11455
  %range_max = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %14, i32 0, i32 4, !dbg !11456
  %15 = load i32, i32* %range_max, align 4, !dbg !11456
  %cmp1 = icmp ugt i32 %13, %15, !dbg !11457
  br i1 %cmp1, label %if.then2, label %if.else3, !dbg !11458

if.then2:                                         ; preds = %if.else
  %16 = load %struct.rb_node*, %struct.rb_node** %node, align 8, !dbg !11459
  %rb_right = getelementptr inbounds %struct.rb_node, %struct.rb_node* %16, i32 0, i32 1, !dbg !11460
  %17 = load %struct.rb_node*, %struct.rb_node** %rb_right, align 8, !dbg !11460
  store %struct.rb_node* %17, %struct.rb_node** %node, align 8, !dbg !11461
  br label %if.end, !dbg !11462

if.else3:                                         ; preds = %if.else
  %18 = load %struct.regmap_range_node*, %struct.regmap_range_node** %this, align 8, !dbg !11463
  store %struct.regmap_range_node* %18, %struct.regmap_range_node** %retval, align 8, !dbg !11464
  br label %return, !dbg !11464

if.end:                                           ; preds = %if.then2
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  br label %while.cond, !dbg !11433, !llvm.loop !11465

while.end:                                        ; preds = %while.cond
  store %struct.regmap_range_node* null, %struct.regmap_range_node** %retval, align 8, !dbg !11467
  br label %return, !dbg !11467

return:                                           ; preds = %while.end, %if.else3
  %19 = load %struct.regmap_range_node*, %struct.regmap_range_node** %retval, align 8, !dbg !11468
  ret %struct.regmap_range_node* %19, !dbg !11468
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_select_page(%struct.regmap* %map, i32* %reg, %struct.regmap_range_node* %range, i32 %val_num) #0 !dbg !11469 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32*, align 8
  %range.addr = alloca %struct.regmap_range_node*, align 8
  %val_num.addr = alloca i32, align 4
  %orig_work_buf = alloca i8*, align 8
  %win_offset = alloca i32, align 4
  %win_page = alloca i32, align 4
  %page_chg = alloca i8, align 1
  %ret = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !11472, metadata !DIExpression()), !dbg !11473
  store i32* %reg, i32** %reg.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %reg.addr, metadata !11474, metadata !DIExpression()), !dbg !11475
  store %struct.regmap_range_node* %range, %struct.regmap_range_node** %range.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %range.addr, metadata !11476, metadata !DIExpression()), !dbg !11477
  store i32 %val_num, i32* %val_num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val_num.addr, metadata !11478, metadata !DIExpression()), !dbg !11479
  call void @llvm.dbg.declare(metadata i8** %orig_work_buf, metadata !11480, metadata !DIExpression()), !dbg !11481
  call void @llvm.dbg.declare(metadata i32* %win_offset, metadata !11482, metadata !DIExpression()), !dbg !11483
  call void @llvm.dbg.declare(metadata i32* %win_page, metadata !11484, metadata !DIExpression()), !dbg !11485
  call void @llvm.dbg.declare(metadata i8* %page_chg, metadata !11486, metadata !DIExpression()), !dbg !11487
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !11488, metadata !DIExpression()), !dbg !11489
  %0 = load i32*, i32** %reg.addr, align 8, !dbg !11490
  %1 = load i32, i32* %0, align 4, !dbg !11491
  %2 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11492
  %range_min = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %2, i32 0, i32 3, !dbg !11493
  %3 = load i32, i32* %range_min, align 8, !dbg !11493
  %sub = sub i32 %1, %3, !dbg !11494
  %4 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11495
  %window_len = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %4, i32 0, i32 9, !dbg !11496
  %5 = load i32, i32* %window_len, align 8, !dbg !11496
  %rem = urem i32 %sub, %5, !dbg !11497
  store i32 %rem, i32* %win_offset, align 4, !dbg !11498
  %6 = load i32*, i32** %reg.addr, align 8, !dbg !11499
  %7 = load i32, i32* %6, align 4, !dbg !11500
  %8 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11501
  %range_min1 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %8, i32 0, i32 3, !dbg !11502
  %9 = load i32, i32* %range_min1, align 8, !dbg !11502
  %sub2 = sub i32 %7, %9, !dbg !11503
  %10 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11504
  %window_len3 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %10, i32 0, i32 9, !dbg !11505
  %11 = load i32, i32* %window_len3, align 8, !dbg !11505
  %div = udiv i32 %sub2, %11, !dbg !11506
  store i32 %div, i32* %win_page, align 4, !dbg !11507
  %12 = load i32, i32* %val_num.addr, align 4, !dbg !11508
  %cmp = icmp ugt i32 %12, 1, !dbg !11510
  br i1 %cmp, label %if.then, label %if.end12, !dbg !11511

if.then:                                          ; preds = %entry
  %13 = load i32*, i32** %reg.addr, align 8, !dbg !11512
  %14 = load i32, i32* %13, align 4, !dbg !11515
  %15 = load i32, i32* %val_num.addr, align 4, !dbg !11516
  %add = add i32 %14, %15, !dbg !11517
  %sub4 = sub i32 %add, 1, !dbg !11518
  %16 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11519
  %range_max = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %16, i32 0, i32 4, !dbg !11520
  %17 = load i32, i32* %range_max, align 4, !dbg !11520
  %cmp5 = icmp ugt i32 %sub4, %17, !dbg !11521
  br i1 %cmp5, label %if.then6, label %if.end, !dbg !11522

if.then6:                                         ; preds = %if.then
  store i32 -22, i32* %retval, align 4, !dbg !11523
  br label %return, !dbg !11523

if.end:                                           ; preds = %if.then
  %18 = load i32, i32* %val_num.addr, align 4, !dbg !11524
  %19 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11526
  %window_len7 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %19, i32 0, i32 9, !dbg !11527
  %20 = load i32, i32* %window_len7, align 8, !dbg !11527
  %21 = load i32, i32* %win_offset, align 4, !dbg !11528
  %sub8 = sub i32 %20, %21, !dbg !11529
  %cmp9 = icmp ugt i32 %18, %sub8, !dbg !11530
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !11531

if.then10:                                        ; preds = %if.end
  store i32 -22, i32* %retval, align 4, !dbg !11532
  br label %return, !dbg !11532

if.end11:                                         ; preds = %if.end
  br label %if.end12, !dbg !11533

if.end12:                                         ; preds = %if.end11, %entry
  %22 = load i32, i32* %val_num.addr, align 4, !dbg !11534
  %cmp13 = icmp ugt i32 %22, 1, !dbg !11536
  br i1 %cmp13, label %if.then16, label %lor.lhs.false, !dbg !11537

lor.lhs.false:                                    ; preds = %if.end12
  %23 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11538
  %window_start = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %23, i32 0, i32 8, !dbg !11539
  %24 = load i32, i32* %window_start, align 4, !dbg !11539
  %25 = load i32, i32* %win_offset, align 4, !dbg !11540
  %add14 = add i32 %24, %25, !dbg !11541
  %26 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11542
  %selector_reg = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %26, i32 0, i32 5, !dbg !11543
  %27 = load i32, i32* %selector_reg, align 8, !dbg !11543
  %cmp15 = icmp ne i32 %add14, %27, !dbg !11544
  br i1 %cmp15, label %if.then16, label %if.end23, !dbg !11545

if.then16:                                        ; preds = %lor.lhs.false, %if.end12
  %28 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11546
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %28, i32 0, i32 6, !dbg !11548
  %29 = load i8*, i8** %work_buf, align 8, !dbg !11548
  store i8* %29, i8** %orig_work_buf, align 8, !dbg !11549
  %30 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11550
  %selector_work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %30, i32 0, i32 61, !dbg !11551
  %31 = load i8*, i8** %selector_work_buf, align 8, !dbg !11551
  %32 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11552
  %work_buf17 = getelementptr inbounds %struct.regmap, %struct.regmap* %32, i32 0, i32 6, !dbg !11553
  store i8* %31, i8** %work_buf17, align 8, !dbg !11554
  %33 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11555
  %34 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11556
  %selector_reg18 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %34, i32 0, i32 5, !dbg !11557
  %35 = load i32, i32* %selector_reg18, align 8, !dbg !11557
  %36 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11558
  %selector_mask = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %36, i32 0, i32 6, !dbg !11559
  %37 = load i32, i32* %selector_mask, align 4, !dbg !11559
  %38 = load i32, i32* %win_page, align 4, !dbg !11560
  %39 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11561
  %selector_shift = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %39, i32 0, i32 7, !dbg !11562
  %40 = load i32, i32* %selector_shift, align 8, !dbg !11562
  %shl = shl i32 %38, %40, !dbg !11563
  %call = call i32 @_regmap_update_bits(%struct.regmap* %33, i32 %35, i32 %37, i32 %shl, i8* %page_chg, i1 zeroext false) #11, !dbg !11564
  store i32 %call, i32* %ret, align 4, !dbg !11565
  %41 = load i8*, i8** %orig_work_buf, align 8, !dbg !11566
  %42 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11567
  %work_buf19 = getelementptr inbounds %struct.regmap, %struct.regmap* %42, i32 0, i32 6, !dbg !11568
  store i8* %41, i8** %work_buf19, align 8, !dbg !11569
  %43 = load i32, i32* %ret, align 4, !dbg !11570
  %cmp20 = icmp ne i32 %43, 0, !dbg !11572
  br i1 %cmp20, label %if.then21, label %if.end22, !dbg !11573

if.then21:                                        ; preds = %if.then16
  %44 = load i32, i32* %ret, align 4, !dbg !11574
  store i32 %44, i32* %retval, align 4, !dbg !11575
  br label %return, !dbg !11575

if.end22:                                         ; preds = %if.then16
  br label %if.end23, !dbg !11576

if.end23:                                         ; preds = %if.end22, %lor.lhs.false
  %45 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !11577
  %window_start24 = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %45, i32 0, i32 8, !dbg !11578
  %46 = load i32, i32* %window_start24, align 4, !dbg !11578
  %47 = load i32, i32* %win_offset, align 4, !dbg !11579
  %add25 = add i32 %46, %47, !dbg !11580
  %48 = load i32*, i32** %reg.addr, align 8, !dbg !11581
  store i32 %add25, i32* %48, align 4, !dbg !11582
  store i32 0, i32* %retval, align 4, !dbg !11583
  br label %return, !dbg !11583

return:                                           ; preds = %if.end23, %if.then21, %if.then10, %if.then6
  %49 = load i32, i32* %retval, align 4, !dbg !11584
  ret i32 %49, !dbg !11584
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_hw_write_start(%struct.regmap* %map, i32 %reg, i32 %count) #0 !dbg !11585 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !11588, metadata !DIExpression()), !dbg !11589
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !11590, metadata !DIExpression()), !dbg !11589
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !11591, metadata !DIExpression()), !dbg !11589
  ret void, !dbg !11589
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_hw_write_done(%struct.regmap* %map, i32 %reg, i32 %count) #0 !dbg !11592 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !11593, metadata !DIExpression()), !dbg !11594
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !11595, metadata !DIExpression()), !dbg !11594
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !11596, metadata !DIExpression()), !dbg !11594
  ret void, !dbg !11594
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_set_work_buf_flag_mask(%struct.regmap* %map, i32 %max_bytes, i64 %mask) #0 !dbg !11597 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %max_bytes.addr = alloca i32, align 4
  %mask.addr = alloca i64, align 8
  %buf = alloca i8*, align 8
  %i = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !11600, metadata !DIExpression()), !dbg !11601
  store i32 %max_bytes, i32* %max_bytes.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_bytes.addr, metadata !11602, metadata !DIExpression()), !dbg !11603
  store i64 %mask, i64* %mask.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %mask.addr, metadata !11604, metadata !DIExpression()), !dbg !11605
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !11606, metadata !DIExpression()), !dbg !11607
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11608, metadata !DIExpression()), !dbg !11609
  %0 = load i64, i64* %mask.addr, align 8, !dbg !11610
  %tobool = icmp ne i64 %0, 0, !dbg !11610
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !11612

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11613
  %work_buf = getelementptr inbounds %struct.regmap, %struct.regmap* %1, i32 0, i32 6, !dbg !11614
  %2 = load i8*, i8** %work_buf, align 8, !dbg !11614
  %tobool1 = icmp ne i8* %2, null, !dbg !11613
  br i1 %tobool1, label %if.end, label %if.then, !dbg !11615

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %for.end, !dbg !11616

if.end:                                           ; preds = %lor.lhs.false
  %3 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11617
  %work_buf2 = getelementptr inbounds %struct.regmap, %struct.regmap* %3, i32 0, i32 6, !dbg !11618
  %4 = load i8*, i8** %work_buf2, align 8, !dbg !11618
  store i8* %4, i8** %buf, align 8, !dbg !11619
  store i32 0, i32* %i, align 4, !dbg !11620
  br label %for.cond, !dbg !11622

for.cond:                                         ; preds = %for.inc, %if.end
  %5 = load i32, i32* %i, align 4, !dbg !11623
  %6 = load i32, i32* %max_bytes.addr, align 4, !dbg !11625
  %cmp = icmp slt i32 %5, %6, !dbg !11626
  br i1 %cmp, label %for.body, label %for.end, !dbg !11627

for.body:                                         ; preds = %for.cond
  %7 = load i64, i64* %mask.addr, align 8, !dbg !11628
  %8 = load i32, i32* %i, align 4, !dbg !11629
  %mul = mul i32 8, %8, !dbg !11630
  %sh_prom = zext i32 %mul to i64, !dbg !11631
  %shr = lshr i64 %7, %sh_prom, !dbg !11631
  %and = and i64 %shr, 255, !dbg !11632
  %9 = load i8*, i8** %buf, align 8, !dbg !11633
  %10 = load i32, i32* %i, align 4, !dbg !11634
  %idxprom = sext i32 %10 to i64, !dbg !11633
  %arrayidx = getelementptr i8, i8* %9, i64 %idxprom, !dbg !11633
  %11 = load i8, i8* %arrayidx, align 1, !dbg !11635
  %conv = zext i8 %11 to i64, !dbg !11635
  %or = or i64 %conv, %and, !dbg !11635
  %conv3 = trunc i64 %or to i8, !dbg !11635
  store i8 %conv3, i8* %arrayidx, align 1, !dbg !11635
  br label %for.inc, !dbg !11633

for.inc:                                          ; preds = %for.body
  %12 = load i32, i32* %i, align 4, !dbg !11636
  %inc = add i32 %12, 1, !dbg !11636
  store i32 %inc, i32* %i, align 4, !dbg !11636
  br label %for.cond, !dbg !11637, !llvm.loop !11638

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !11640
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_async_write_start(%struct.regmap* %map, i32 %reg, i32 %count) #0 !dbg !11641 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !11642, metadata !DIExpression()), !dbg !11643
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !11644, metadata !DIExpression()), !dbg !11643
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !11645, metadata !DIExpression()), !dbg !11643
  ret void, !dbg !11643
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @list_add_tail(%struct.list_head* %new, %struct.list_head* %head) #0 !dbg !11646 {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %new.addr, metadata !11647, metadata !DIExpression()), !dbg !11648
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %head.addr, metadata !11649, metadata !DIExpression()), !dbg !11650
  %0 = load %struct.list_head*, %struct.list_head** %new.addr, align 8, !dbg !11651
  %1 = load %struct.list_head*, %struct.list_head** %head.addr, align 8, !dbg !11652
  %prev = getelementptr inbounds %struct.list_head, %struct.list_head* %1, i32 0, i32 1, !dbg !11653
  %2 = load %struct.list_head*, %struct.list_head** %prev, align 8, !dbg !11653
  %3 = load %struct.list_head*, %struct.list_head** %head.addr, align 8, !dbg !11654
  call void @__list_add(%struct.list_head* %0, %struct.list_head* %2, %struct.list_head* %3) #11, !dbg !11655
  ret void, !dbg !11656
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @__list_add(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #0 !dbg !11657 {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %new.addr, metadata !11660, metadata !DIExpression()), !dbg !11661
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %prev.addr, metadata !11662, metadata !DIExpression()), !dbg !11663
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %next.addr, metadata !11664, metadata !DIExpression()), !dbg !11665
  %0 = load %struct.list_head*, %struct.list_head** %new.addr, align 8, !dbg !11666
  %1 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8, !dbg !11668
  %2 = load %struct.list_head*, %struct.list_head** %next.addr, align 8, !dbg !11669
  %call = call zeroext i1 @__list_add_valid(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %2) #11, !dbg !11670
  br i1 %call, label %if.end, label %if.then, !dbg !11671

if.then:                                          ; preds = %entry
  br label %do.end8, !dbg !11672

if.end:                                           ; preds = %entry
  %3 = load %struct.list_head*, %struct.list_head** %new.addr, align 8, !dbg !11673
  %4 = load %struct.list_head*, %struct.list_head** %next.addr, align 8, !dbg !11674
  %prev1 = getelementptr inbounds %struct.list_head, %struct.list_head* %4, i32 0, i32 1, !dbg !11675
  store %struct.list_head* %3, %struct.list_head** %prev1, align 8, !dbg !11676
  %5 = load %struct.list_head*, %struct.list_head** %next.addr, align 8, !dbg !11677
  %6 = load %struct.list_head*, %struct.list_head** %new.addr, align 8, !dbg !11678
  %next2 = getelementptr inbounds %struct.list_head, %struct.list_head* %6, i32 0, i32 0, !dbg !11679
  store %struct.list_head* %5, %struct.list_head** %next2, align 8, !dbg !11680
  %7 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8, !dbg !11681
  %8 = load %struct.list_head*, %struct.list_head** %new.addr, align 8, !dbg !11682
  %prev3 = getelementptr inbounds %struct.list_head, %struct.list_head* %8, i32 0, i32 1, !dbg !11683
  store %struct.list_head* %7, %struct.list_head** %prev3, align 8, !dbg !11684
  br label %do.body, !dbg !11685

do.body:                                          ; preds = %if.end
  br label %do.body4, !dbg !11686

do.body4:                                         ; preds = %do.body
  br label %do.end, !dbg !11688

do.end:                                           ; preds = %do.body4
  br label %do.body5, !dbg !11686

do.body5:                                         ; preds = %do.end
  %9 = load %struct.list_head*, %struct.list_head** %new.addr, align 8, !dbg !11690
  %10 = load %struct.list_head*, %struct.list_head** %prev.addr, align 8, !dbg !11690
  %next6 = getelementptr inbounds %struct.list_head, %struct.list_head* %10, i32 0, i32 0, !dbg !11690
  store volatile %struct.list_head* %9, %struct.list_head** %next6, align 8, !dbg !11690
  br label %do.end7, !dbg !11690

do.end7:                                          ; preds = %do.body5
  br label %do.end8, !dbg !11686

do.end8:                                          ; preds = %if.then, %do.end7
  ret void, !dbg !11692
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal zeroext i1 @__list_add_valid(%struct.list_head* %new, %struct.list_head* %prev, %struct.list_head* %next) #0 !dbg !11693 {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %prev.addr = alloca %struct.list_head*, align 8
  %next.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %new.addr, metadata !11696, metadata !DIExpression()), !dbg !11697
  store %struct.list_head* %prev, %struct.list_head** %prev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %prev.addr, metadata !11698, metadata !DIExpression()), !dbg !11699
  store %struct.list_head* %next, %struct.list_head** %next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %next.addr, metadata !11700, metadata !DIExpression()), !dbg !11701
  ret i1 true, !dbg !11702
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @fsleep(i64 %usecs) #0 !dbg !11703 {
entry:
  %usecs.addr = alloca i64, align 8
  store i64 %usecs, i64* %usecs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %usecs.addr, metadata !11707, metadata !DIExpression()), !dbg !11708
  %0 = load i64, i64* %usecs.addr, align 8, !dbg !11709
  %cmp = icmp ule i64 %0, 10, !dbg !11711
  br i1 %cmp, label %if.then, label %if.else6, !dbg !11712

if.then:                                          ; preds = %entry
  %1 = load i64, i64* %usecs.addr, align 8, !dbg !11713
  %2 = call i1 @llvm.is.constant.i64(i64 %1), !dbg !11713
  br i1 %2, label %if.then1, label %if.else4, !dbg !11716

if.then1:                                         ; preds = %if.then
  %3 = load i64, i64* %usecs.addr, align 8, !dbg !11717
  %div = udiv i64 %3, 20000, !dbg !11717
  %cmp2 = icmp uge i64 %div, 1, !dbg !11717
  br i1 %cmp2, label %if.then3, label %if.else, !dbg !11720

if.then3:                                         ; preds = %if.then1
  call void @__bad_udelay() #11, !dbg !11717
  br label %if.end, !dbg !11717

if.else:                                          ; preds = %if.then1
  %4 = load i64, i64* %usecs.addr, align 8, !dbg !11717
  %mul = mul i64 %4, 4295, !dbg !11717
  call void @__const_udelay(i64 %mul) #11, !dbg !11717
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end5, !dbg !11720

if.else4:                                         ; preds = %if.then
  %5 = load i64, i64* %usecs.addr, align 8, !dbg !11721
  call void @__udelay(i64 %5) #11, !dbg !11721
  br label %if.end5

if.end5:                                          ; preds = %if.else4, %if.end
  br label %if.end13, !dbg !11723

if.else6:                                         ; preds = %entry
  %6 = load i64, i64* %usecs.addr, align 8, !dbg !11724
  %cmp7 = icmp ule i64 %6, 20000, !dbg !11726
  br i1 %cmp7, label %if.then8, label %if.else10, !dbg !11727

if.then8:                                         ; preds = %if.else6
  %7 = load i64, i64* %usecs.addr, align 8, !dbg !11728
  %8 = load i64, i64* %usecs.addr, align 8, !dbg !11729
  %mul9 = mul i64 2, %8, !dbg !11730
  call void @usleep_range(i64 %7, i64 %mul9) #11, !dbg !11731
  br label %if.end12, !dbg !11731

if.else10:                                        ; preds = %if.else6
  %9 = load i64, i64* %usecs.addr, align 8, !dbg !11732
  %add = add i64 %9, 1000, !dbg !11732
  %sub = sub i64 %add, 1, !dbg !11732
  %div11 = udiv i64 %sub, 1000, !dbg !11732
  %conv = trunc i64 %div11 to i32, !dbg !11732
  call void @msleep(i32 %conv) #11, !dbg !11733
  br label %if.end12

if.end12:                                         ; preds = %if.else10, %if.then8
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.end5
  ret void, !dbg !11734
}

; Function Attrs: noredzone
declare dso_local void @__bad_udelay() #2

; Function Attrs: noredzone
declare dso_local void @__const_udelay(i64) #2

; Function Attrs: noredzone
declare dso_local void @__udelay(i64) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_range_multi_paged_reg_write(%struct.regmap* %map, %struct.reg_sequence* %regs, i64 %num_regs) #0 !dbg !11735 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %regs.addr = alloca %struct.reg_sequence*, align 8
  %num_regs.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %base = alloca %struct.reg_sequence*, align 8
  %this_page = alloca i32, align 4
  %page_change = alloca i32, align 4
  %reg = alloca i32, align 4
  %range = alloca %struct.regmap_range_node*, align 8
  %win_page = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !11738, metadata !DIExpression()), !dbg !11739
  store %struct.reg_sequence* %regs, %struct.reg_sequence** %regs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.reg_sequence** %regs.addr, metadata !11740, metadata !DIExpression()), !dbg !11741
  store i64 %num_regs, i64* %num_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %num_regs.addr, metadata !11742, metadata !DIExpression()), !dbg !11743
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !11744, metadata !DIExpression()), !dbg !11745
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11746, metadata !DIExpression()), !dbg !11747
  call void @llvm.dbg.declare(metadata i32* %n, metadata !11748, metadata !DIExpression()), !dbg !11749
  call void @llvm.dbg.declare(metadata %struct.reg_sequence** %base, metadata !11750, metadata !DIExpression()), !dbg !11751
  call void @llvm.dbg.declare(metadata i32* %this_page, metadata !11752, metadata !DIExpression()), !dbg !11753
  store i32 0, i32* %this_page, align 4, !dbg !11753
  call void @llvm.dbg.declare(metadata i32* %page_change, metadata !11754, metadata !DIExpression()), !dbg !11755
  store i32 0, i32* %page_change, align 4, !dbg !11755
  %0 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11756
  store %struct.reg_sequence* %0, %struct.reg_sequence** %base, align 8, !dbg !11757
  store i32 0, i32* %i, align 4, !dbg !11758
  store i32 0, i32* %n, align 4, !dbg !11760
  br label %for.cond, !dbg !11761

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !11762
  %conv = sext i32 %1 to i64, !dbg !11762
  %2 = load i64, i64* %num_regs.addr, align 8, !dbg !11764
  %cmp = icmp ult i64 %conv, %2, !dbg !11765
  br i1 %cmp, label %for.body, label %for.end, !dbg !11766

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !11767, metadata !DIExpression()), !dbg !11769
  %3 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11770
  %4 = load i32, i32* %i, align 4, !dbg !11771
  %idxprom = sext i32 %4 to i64, !dbg !11770
  %arrayidx = getelementptr %struct.reg_sequence, %struct.reg_sequence* %3, i64 %idxprom, !dbg !11770
  %reg2 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx, i32 0, i32 0, !dbg !11772
  %5 = load i32, i32* %reg2, align 4, !dbg !11772
  store i32 %5, i32* %reg, align 4, !dbg !11769
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %range, metadata !11773, metadata !DIExpression()), !dbg !11774
  %6 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11775
  %7 = load i32, i32* %reg, align 4, !dbg !11776
  %call = call %struct.regmap_range_node* @_regmap_range_lookup(%struct.regmap* %6, i32 %7) #11, !dbg !11777
  store %struct.regmap_range_node* %call, %struct.regmap_range_node** %range, align 8, !dbg !11778
  %8 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !11779
  %tobool = icmp ne %struct.regmap_range_node* %8, null, !dbg !11779
  br i1 %tobool, label %if.then, label %if.end11, !dbg !11781

if.then:                                          ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %win_page, metadata !11782, metadata !DIExpression()), !dbg !11784
  %9 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11785
  %10 = load i32, i32* %reg, align 4, !dbg !11786
  %11 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !11787
  %call3 = call i32 @_regmap_register_page(%struct.regmap* %9, i32 %10, %struct.regmap_range_node* %11) #11, !dbg !11788
  store i32 %call3, i32* %win_page, align 4, !dbg !11784
  %12 = load i32, i32* %i, align 4, !dbg !11789
  %cmp4 = icmp eq i32 %12, 0, !dbg !11791
  br i1 %cmp4, label %if.then6, label %if.end, !dbg !11792

if.then6:                                         ; preds = %if.then
  %13 = load i32, i32* %win_page, align 4, !dbg !11793
  store i32 %13, i32* %this_page, align 4, !dbg !11794
  br label %if.end, !dbg !11795

if.end:                                           ; preds = %if.then6, %if.then
  %14 = load i32, i32* %win_page, align 4, !dbg !11796
  %15 = load i32, i32* %this_page, align 4, !dbg !11798
  %cmp7 = icmp ne i32 %14, %15, !dbg !11799
  br i1 %cmp7, label %if.then9, label %if.end10, !dbg !11800

if.then9:                                         ; preds = %if.end
  %16 = load i32, i32* %win_page, align 4, !dbg !11801
  store i32 %16, i32* %this_page, align 4, !dbg !11803
  store i32 1, i32* %page_change, align 4, !dbg !11804
  br label %if.end10, !dbg !11805

if.end10:                                         ; preds = %if.then9, %if.end
  br label %if.end11, !dbg !11806

if.end11:                                         ; preds = %if.end10, %for.body
  %17 = load i32, i32* %page_change, align 4, !dbg !11807
  %tobool12 = icmp ne i32 %17, 0, !dbg !11807
  br i1 %tobool12, label %if.then16, label %lor.lhs.false, !dbg !11809

lor.lhs.false:                                    ; preds = %if.end11
  %18 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11810
  %19 = load i32, i32* %i, align 4, !dbg !11811
  %idxprom13 = sext i32 %19 to i64, !dbg !11810
  %arrayidx14 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %18, i64 %idxprom13, !dbg !11810
  %delay_us = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx14, i32 0, i32 2, !dbg !11812
  %20 = load i32, i32* %delay_us, align 4, !dbg !11812
  %tobool15 = icmp ne i32 %20, 0, !dbg !11810
  br i1 %tobool15, label %if.then16, label %if.end77, !dbg !11813

if.then16:                                        ; preds = %lor.lhs.false, %if.end11
  %21 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11814
  %22 = load i32, i32* %i, align 4, !dbg !11817
  %idxprom17 = sext i32 %22 to i64, !dbg !11814
  %arrayidx18 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %21, i64 %idxprom17, !dbg !11814
  %delay_us19 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx18, i32 0, i32 2, !dbg !11818
  %23 = load i32, i32* %delay_us19, align 4, !dbg !11818
  %tobool20 = icmp ne i32 %23, 0, !dbg !11814
  br i1 %tobool20, label %land.lhs.true, label %if.end24, !dbg !11819

land.lhs.true:                                    ; preds = %if.then16
  %24 = load i32, i32* %i, align 4, !dbg !11820
  %cmp21 = icmp eq i32 %24, 0, !dbg !11821
  br i1 %cmp21, label %if.then23, label %if.end24, !dbg !11822

if.then23:                                        ; preds = %land.lhs.true
  store i32 1, i32* %n, align 4, !dbg !11823
  br label %if.end24, !dbg !11824

if.end24:                                         ; preds = %if.then23, %land.lhs.true, %if.then16
  %25 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11825
  %26 = load %struct.reg_sequence*, %struct.reg_sequence** %base, align 8, !dbg !11826
  %27 = load i32, i32* %n, align 4, !dbg !11827
  %conv25 = sext i32 %27 to i64, !dbg !11827
  %call26 = call i32 @_regmap_raw_multi_reg_write(%struct.regmap* %25, %struct.reg_sequence* %26, i64 %conv25) #11, !dbg !11828
  store i32 %call26, i32* %ret, align 4, !dbg !11829
  %28 = load i32, i32* %ret, align 4, !dbg !11830
  %cmp27 = icmp ne i32 %28, 0, !dbg !11832
  br i1 %cmp27, label %if.then29, label %if.end30, !dbg !11833

if.then29:                                        ; preds = %if.end24
  %29 = load i32, i32* %ret, align 4, !dbg !11834
  store i32 %29, i32* %retval, align 4, !dbg !11835
  br label %return, !dbg !11835

if.end30:                                         ; preds = %if.end24
  %30 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11836
  %31 = load i32, i32* %i, align 4, !dbg !11838
  %idxprom31 = sext i32 %31 to i64, !dbg !11836
  %arrayidx32 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %30, i64 %idxprom31, !dbg !11836
  %delay_us33 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx32, i32 0, i32 2, !dbg !11839
  %32 = load i32, i32* %delay_us33, align 4, !dbg !11839
  %tobool34 = icmp ne i32 %32, 0, !dbg !11836
  br i1 %tobool34, label %if.then35, label %if.end65, !dbg !11840

if.then35:                                        ; preds = %if.end30
  %33 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11841
  %can_sleep = getelementptr inbounds %struct.regmap, %struct.regmap* %33, i32 0, i32 63, !dbg !11844
  %34 = load i8, i8* %can_sleep, align 8, !dbg !11844
  %tobool36 = trunc i8 %34 to i1, !dbg !11844
  br i1 %tobool36, label %if.then37, label %if.else, !dbg !11845

if.then37:                                        ; preds = %if.then35
  %35 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11846
  %36 = load i32, i32* %i, align 4, !dbg !11847
  %idxprom38 = sext i32 %36 to i64, !dbg !11846
  %arrayidx39 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %35, i64 %idxprom38, !dbg !11846
  %delay_us40 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx39, i32 0, i32 2, !dbg !11848
  %37 = load i32, i32* %delay_us40, align 4, !dbg !11848
  %conv41 = zext i32 %37 to i64, !dbg !11846
  call void @fsleep(i64 %conv41) #11, !dbg !11849
  br label %if.end64, !dbg !11849

if.else:                                          ; preds = %if.then35
  %38 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11850
  %39 = load i32, i32* %i, align 4, !dbg !11850
  %idxprom42 = sext i32 %39 to i64, !dbg !11850
  %arrayidx43 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %38, i64 %idxprom42, !dbg !11850
  %delay_us44 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx43, i32 0, i32 2, !dbg !11850
  %40 = load i32, i32* %delay_us44, align 4, !dbg !11850
  %41 = call i1 @llvm.is.constant.i32(i32 %40), !dbg !11850
  br i1 %41, label %if.then45, label %if.else58, !dbg !11853

if.then45:                                        ; preds = %if.else
  %42 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11854
  %43 = load i32, i32* %i, align 4, !dbg !11854
  %idxprom46 = sext i32 %43 to i64, !dbg !11854
  %arrayidx47 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %42, i64 %idxprom46, !dbg !11854
  %delay_us48 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx47, i32 0, i32 2, !dbg !11854
  %44 = load i32, i32* %delay_us48, align 4, !dbg !11854
  %div = udiv i32 %44, 20000, !dbg !11854
  %cmp49 = icmp uge i32 %div, 1, !dbg !11854
  br i1 %cmp49, label %if.then51, label %if.else52, !dbg !11857

if.then51:                                        ; preds = %if.then45
  call void @__bad_udelay() #11, !dbg !11854
  br label %if.end57, !dbg !11854

if.else52:                                        ; preds = %if.then45
  %45 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11854
  %46 = load i32, i32* %i, align 4, !dbg !11854
  %idxprom53 = sext i32 %46 to i64, !dbg !11854
  %arrayidx54 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %45, i64 %idxprom53, !dbg !11854
  %delay_us55 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx54, i32 0, i32 2, !dbg !11854
  %47 = load i32, i32* %delay_us55, align 4, !dbg !11854
  %conv56 = zext i32 %47 to i64, !dbg !11854
  %mul = mul i64 %conv56, 4295, !dbg !11854
  call void @__const_udelay(i64 %mul) #11, !dbg !11854
  br label %if.end57

if.end57:                                         ; preds = %if.else52, %if.then51
  br label %if.end63, !dbg !11857

if.else58:                                        ; preds = %if.else
  %48 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11858
  %49 = load i32, i32* %i, align 4, !dbg !11858
  %idxprom59 = sext i32 %49 to i64, !dbg !11858
  %arrayidx60 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %48, i64 %idxprom59, !dbg !11858
  %delay_us61 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx60, i32 0, i32 2, !dbg !11858
  %50 = load i32, i32* %delay_us61, align 4, !dbg !11858
  %conv62 = zext i32 %50 to i64, !dbg !11858
  call void @__udelay(i64 %conv62) #11, !dbg !11858
  br label %if.end63

if.end63:                                         ; preds = %if.else58, %if.end57
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then37
  br label %if.end65, !dbg !11860

if.end65:                                         ; preds = %if.end64, %if.end30
  %51 = load i32, i32* %n, align 4, !dbg !11861
  %52 = load %struct.reg_sequence*, %struct.reg_sequence** %base, align 8, !dbg !11862
  %idx.ext = sext i32 %51 to i64, !dbg !11862
  %add.ptr = getelementptr %struct.reg_sequence, %struct.reg_sequence* %52, i64 %idx.ext, !dbg !11862
  store %struct.reg_sequence* %add.ptr, %struct.reg_sequence** %base, align 8, !dbg !11862
  store i32 0, i32* %n, align 4, !dbg !11863
  %53 = load i32, i32* %page_change, align 4, !dbg !11864
  %tobool66 = icmp ne i32 %53, 0, !dbg !11864
  br i1 %tobool66, label %if.then67, label %if.end76, !dbg !11866

if.then67:                                        ; preds = %if.end65
  %54 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11867
  %55 = load %struct.reg_sequence*, %struct.reg_sequence** %base, align 8, !dbg !11869
  %56 = load i32, i32* %n, align 4, !dbg !11870
  %idxprom68 = sext i32 %56 to i64, !dbg !11869
  %arrayidx69 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %55, i64 %idxprom68, !dbg !11869
  %reg70 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx69, i32 0, i32 0, !dbg !11871
  %57 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range, align 8, !dbg !11872
  %call71 = call i32 @_regmap_select_page(%struct.regmap* %54, i32* %reg70, %struct.regmap_range_node* %57, i32 1) #11, !dbg !11873
  store i32 %call71, i32* %ret, align 4, !dbg !11874
  %58 = load i32, i32* %ret, align 4, !dbg !11875
  %cmp72 = icmp ne i32 %58, 0, !dbg !11877
  br i1 %cmp72, label %if.then74, label %if.end75, !dbg !11878

if.then74:                                        ; preds = %if.then67
  %59 = load i32, i32* %ret, align 4, !dbg !11879
  store i32 %59, i32* %retval, align 4, !dbg !11880
  br label %return, !dbg !11880

if.end75:                                         ; preds = %if.then67
  store i32 0, i32* %page_change, align 4, !dbg !11881
  br label %if.end76, !dbg !11882

if.end76:                                         ; preds = %if.end75, %if.end65
  br label %if.end77, !dbg !11883

if.end77:                                         ; preds = %if.end76, %lor.lhs.false
  br label %for.inc, !dbg !11884

for.inc:                                          ; preds = %if.end77
  %60 = load i32, i32* %i, align 4, !dbg !11885
  %inc = add i32 %60, 1, !dbg !11885
  store i32 %inc, i32* %i, align 4, !dbg !11885
  %61 = load i32, i32* %n, align 4, !dbg !11886
  %inc78 = add i32 %61, 1, !dbg !11886
  store i32 %inc78, i32* %n, align 4, !dbg !11886
  br label %for.cond, !dbg !11887, !llvm.loop !11888

for.end:                                          ; preds = %for.cond
  %62 = load i32, i32* %n, align 4, !dbg !11890
  %cmp79 = icmp sgt i32 %62, 0, !dbg !11892
  br i1 %cmp79, label %if.then81, label %if.end84, !dbg !11893

if.then81:                                        ; preds = %for.end
  %63 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11894
  %64 = load %struct.reg_sequence*, %struct.reg_sequence** %base, align 8, !dbg !11895
  %65 = load i32, i32* %n, align 4, !dbg !11896
  %conv82 = sext i32 %65 to i64, !dbg !11896
  %call83 = call i32 @_regmap_raw_multi_reg_write(%struct.regmap* %63, %struct.reg_sequence* %64, i64 %conv82) #11, !dbg !11897
  store i32 %call83, i32* %retval, align 4, !dbg !11898
  br label %return, !dbg !11898

if.end84:                                         ; preds = %for.end
  store i32 0, i32* %retval, align 4, !dbg !11899
  br label %return, !dbg !11899

return:                                           ; preds = %if.end84, %if.then81, %if.then74, %if.then29
  %66 = load i32, i32* %retval, align 4, !dbg !11900
  ret i32 %66, !dbg !11900
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_raw_multi_reg_write(%struct.regmap* %map, %struct.reg_sequence* %regs, i64 %num_regs) #0 !dbg !11901 {
entry:
  %retval = alloca i32, align 4
  %map.addr = alloca %struct.regmap*, align 8
  %regs.addr = alloca %struct.reg_sequence*, align 8
  %num_regs.addr = alloca i64, align 8
  %ret = alloca i32, align 4
  %buf = alloca i8*, align 8
  %i = alloca i32, align 4
  %u8 = alloca i8*, align 8
  %val_bytes = alloca i64, align 8
  %reg_bytes = alloca i64, align 8
  %pad_bytes = alloca i64, align 8
  %pair_size = alloca i64, align 8
  %len = alloca i64, align 8
  %reg = alloca i32, align 4
  %val = alloca i32, align 4
  %reg26 = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !11902, metadata !DIExpression()), !dbg !11903
  store %struct.reg_sequence* %regs, %struct.reg_sequence** %regs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.reg_sequence** %regs.addr, metadata !11904, metadata !DIExpression()), !dbg !11905
  store i64 %num_regs, i64* %num_regs.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %num_regs.addr, metadata !11906, metadata !DIExpression()), !dbg !11907
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !11908, metadata !DIExpression()), !dbg !11909
  call void @llvm.dbg.declare(metadata i8** %buf, metadata !11910, metadata !DIExpression()), !dbg !11911
  call void @llvm.dbg.declare(metadata i32* %i, metadata !11912, metadata !DIExpression()), !dbg !11913
  call void @llvm.dbg.declare(metadata i8** %u8, metadata !11914, metadata !DIExpression()), !dbg !11915
  call void @llvm.dbg.declare(metadata i64* %val_bytes, metadata !11916, metadata !DIExpression()), !dbg !11917
  %0 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11918
  %format = getelementptr inbounds %struct.regmap, %struct.regmap* %0, i32 0, i32 7, !dbg !11919
  %val_bytes1 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format, i32 0, i32 3, !dbg !11920
  %1 = load i64, i64* %val_bytes1, align 8, !dbg !11920
  store i64 %1, i64* %val_bytes, align 8, !dbg !11917
  call void @llvm.dbg.declare(metadata i64* %reg_bytes, metadata !11921, metadata !DIExpression()), !dbg !11922
  %2 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11923
  %format2 = getelementptr inbounds %struct.regmap, %struct.regmap* %2, i32 0, i32 7, !dbg !11924
  %reg_bytes3 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format2, i32 0, i32 1, !dbg !11925
  %3 = load i64, i64* %reg_bytes3, align 8, !dbg !11925
  store i64 %3, i64* %reg_bytes, align 8, !dbg !11922
  call void @llvm.dbg.declare(metadata i64* %pad_bytes, metadata !11926, metadata !DIExpression()), !dbg !11927
  %4 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11928
  %format4 = getelementptr inbounds %struct.regmap, %struct.regmap* %4, i32 0, i32 7, !dbg !11929
  %pad_bytes5 = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format4, i32 0, i32 2, !dbg !11930
  %5 = load i64, i64* %pad_bytes5, align 8, !dbg !11930
  store i64 %5, i64* %pad_bytes, align 8, !dbg !11927
  call void @llvm.dbg.declare(metadata i64* %pair_size, metadata !11931, metadata !DIExpression()), !dbg !11932
  %6 = load i64, i64* %reg_bytes, align 8, !dbg !11933
  %7 = load i64, i64* %pad_bytes, align 8, !dbg !11934
  %add = add i64 %6, %7, !dbg !11935
  %8 = load i64, i64* %val_bytes, align 8, !dbg !11936
  %add6 = add i64 %add, %8, !dbg !11937
  store i64 %add6, i64* %pair_size, align 8, !dbg !11932
  call void @llvm.dbg.declare(metadata i64* %len, metadata !11938, metadata !DIExpression()), !dbg !11939
  %9 = load i64, i64* %pair_size, align 8, !dbg !11940
  %10 = load i64, i64* %num_regs.addr, align 8, !dbg !11941
  %mul = mul i64 %9, %10, !dbg !11942
  store i64 %mul, i64* %len, align 8, !dbg !11939
  %11 = load i64, i64* %len, align 8, !dbg !11943
  %tobool = icmp ne i64 %11, 0, !dbg !11943
  br i1 %tobool, label %if.end, label %if.then, !dbg !11945

if.then:                                          ; preds = %entry
  store i32 -22, i32* %retval, align 4, !dbg !11946
  br label %return, !dbg !11946

if.end:                                           ; preds = %entry
  %12 = load i64, i64* %len, align 8, !dbg !11947
  %call = call i8* @kzalloc(i64 %12, i32 3264) #11, !dbg !11948
  store i8* %call, i8** %buf, align 8, !dbg !11949
  %13 = load i8*, i8** %buf, align 8, !dbg !11950
  %tobool7 = icmp ne i8* %13, null, !dbg !11950
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !11952

if.then8:                                         ; preds = %if.end
  store i32 -12, i32* %retval, align 4, !dbg !11953
  br label %return, !dbg !11953

if.end9:                                          ; preds = %if.end
  %14 = load i8*, i8** %buf, align 8, !dbg !11954
  store i8* %14, i8** %u8, align 8, !dbg !11955
  store i32 0, i32* %i, align 4, !dbg !11956
  br label %for.cond, !dbg !11958

for.cond:                                         ; preds = %for.inc, %if.end9
  %15 = load i32, i32* %i, align 4, !dbg !11959
  %conv = sext i32 %15 to i64, !dbg !11959
  %16 = load i64, i64* %num_regs.addr, align 8, !dbg !11961
  %cmp = icmp ult i64 %conv, %16, !dbg !11962
  br i1 %cmp, label %for.body, label %for.end, !dbg !11963

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !11964, metadata !DIExpression()), !dbg !11966
  %17 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11967
  %18 = load i32, i32* %i, align 4, !dbg !11968
  %idxprom = sext i32 %18 to i64, !dbg !11967
  %arrayidx = getelementptr %struct.reg_sequence, %struct.reg_sequence* %17, i64 %idxprom, !dbg !11967
  %reg11 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx, i32 0, i32 0, !dbg !11969
  %19 = load i32, i32* %reg11, align 4, !dbg !11969
  store i32 %19, i32* %reg, align 4, !dbg !11966
  call void @llvm.dbg.declare(metadata i32* %val, metadata !11970, metadata !DIExpression()), !dbg !11971
  %20 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !11972
  %21 = load i32, i32* %i, align 4, !dbg !11973
  %idxprom12 = sext i32 %21 to i64, !dbg !11972
  %arrayidx13 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %20, i64 %idxprom12, !dbg !11972
  %def = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx13, i32 0, i32 1, !dbg !11974
  %22 = load i32, i32* %def, align 4, !dbg !11974
  store i32 %22, i32* %val, align 4, !dbg !11971
  %23 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11975
  %24 = load i32, i32* %reg, align 4, !dbg !11976
  call void @trace_regmap_hw_write_start(%struct.regmap* %23, i32 %24, i32 1) #11, !dbg !11977
  %25 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11978
  %format14 = getelementptr inbounds %struct.regmap, %struct.regmap* %25, i32 0, i32 7, !dbg !11979
  %format_reg = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format14, i32 0, i32 5, !dbg !11980
  %26 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_reg, align 8, !dbg !11980
  %27 = load i8*, i8** %u8, align 8, !dbg !11981
  %28 = load i32, i32* %reg, align 4, !dbg !11982
  %29 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11983
  %reg_shift = getelementptr inbounds %struct.regmap, %struct.regmap* %29, i32 0, i32 36, !dbg !11984
  %30 = load i32, i32* %reg_shift, align 8, !dbg !11984
  call void %26(i8* %27, i32 %28, i32 %30) #11, !dbg !11978
  %31 = load i64, i64* %reg_bytes, align 8, !dbg !11985
  %32 = load i64, i64* %pad_bytes, align 8, !dbg !11986
  %add15 = add i64 %31, %32, !dbg !11987
  %33 = load i8*, i8** %u8, align 8, !dbg !11988
  %add.ptr = getelementptr i8, i8* %33, i64 %add15, !dbg !11988
  store i8* %add.ptr, i8** %u8, align 8, !dbg !11988
  %34 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !11989
  %format16 = getelementptr inbounds %struct.regmap, %struct.regmap* %34, i32 0, i32 7, !dbg !11990
  %format_val = getelementptr inbounds %struct.regmap_format, %struct.regmap_format* %format16, i32 0, i32 6, !dbg !11991
  %35 = load void (i8*, i32, i32)*, void (i8*, i32, i32)** %format_val, align 8, !dbg !11991
  %36 = load i8*, i8** %u8, align 8, !dbg !11992
  %37 = load i32, i32* %val, align 4, !dbg !11993
  call void %35(i8* %36, i32 %37, i32 0) #11, !dbg !11989
  %38 = load i64, i64* %val_bytes, align 8, !dbg !11994
  %39 = load i8*, i8** %u8, align 8, !dbg !11995
  %add.ptr17 = getelementptr i8, i8* %39, i64 %38, !dbg !11995
  store i8* %add.ptr17, i8** %u8, align 8, !dbg !11995
  br label %for.inc, !dbg !11996

for.inc:                                          ; preds = %for.body
  %40 = load i32, i32* %i, align 4, !dbg !11997
  %inc = add i32 %40, 1, !dbg !11997
  store i32 %inc, i32* %i, align 4, !dbg !11997
  br label %for.cond, !dbg !11998, !llvm.loop !11999

for.end:                                          ; preds = %for.cond
  %41 = load i8*, i8** %buf, align 8, !dbg !12001
  store i8* %41, i8** %u8, align 8, !dbg !12002
  %42 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !12003
  %write_flag_mask = getelementptr inbounds %struct.regmap, %struct.regmap* %42, i32 0, i32 35, !dbg !12004
  %43 = load i64, i64* %write_flag_mask, align 8, !dbg !12004
  %44 = load i8*, i8** %u8, align 8, !dbg !12005
  %45 = load i8, i8* %44, align 1, !dbg !12006
  %conv18 = zext i8 %45 to i64, !dbg !12006
  %or = or i64 %conv18, %43, !dbg !12006
  %conv19 = trunc i64 %or to i8, !dbg !12006
  store i8 %conv19, i8* %44, align 1, !dbg !12006
  %46 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !12007
  %bus = getelementptr inbounds %struct.regmap, %struct.regmap* %46, i32 0, i32 8, !dbg !12008
  %47 = load %struct.regmap_bus*, %struct.regmap_bus** %bus, align 8, !dbg !12008
  %write = getelementptr inbounds %struct.regmap_bus, %struct.regmap_bus* %47, i32 0, i32 1, !dbg !12009
  %48 = load i32 (i8*, i8*, i64)*, i32 (i8*, i8*, i64)** %write, align 8, !dbg !12009
  %49 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !12010
  %bus_context = getelementptr inbounds %struct.regmap, %struct.regmap* %49, i32 0, i32 9, !dbg !12011
  %50 = load i8*, i8** %bus_context, align 8, !dbg !12011
  %51 = load i8*, i8** %buf, align 8, !dbg !12012
  %52 = load i64, i64* %len, align 8, !dbg !12013
  %call20 = call i32 %48(i8* %50, i8* %51, i64 %52) #11, !dbg !12007
  store i32 %call20, i32* %ret, align 4, !dbg !12014
  %53 = load i8*, i8** %buf, align 8, !dbg !12015
  call void @kfree(i8* %53) #11, !dbg !12016
  store i32 0, i32* %i, align 4, !dbg !12017
  br label %for.cond21, !dbg !12019

for.cond21:                                       ; preds = %for.inc30, %for.end
  %54 = load i32, i32* %i, align 4, !dbg !12020
  %conv22 = sext i32 %54 to i64, !dbg !12020
  %55 = load i64, i64* %num_regs.addr, align 8, !dbg !12022
  %cmp23 = icmp ult i64 %conv22, %55, !dbg !12023
  br i1 %cmp23, label %for.body25, label %for.end32, !dbg !12024

for.body25:                                       ; preds = %for.cond21
  call void @llvm.dbg.declare(metadata i32* %reg26, metadata !12025, metadata !DIExpression()), !dbg !12027
  %56 = load %struct.reg_sequence*, %struct.reg_sequence** %regs.addr, align 8, !dbg !12028
  %57 = load i32, i32* %i, align 4, !dbg !12029
  %idxprom27 = sext i32 %57 to i64, !dbg !12028
  %arrayidx28 = getelementptr %struct.reg_sequence, %struct.reg_sequence* %56, i64 %idxprom27, !dbg !12028
  %reg29 = getelementptr inbounds %struct.reg_sequence, %struct.reg_sequence* %arrayidx28, i32 0, i32 0, !dbg !12030
  %58 = load i32, i32* %reg29, align 4, !dbg !12030
  store i32 %58, i32* %reg26, align 4, !dbg !12027
  %59 = load %struct.regmap*, %struct.regmap** %map.addr, align 8, !dbg !12031
  %60 = load i32, i32* %reg26, align 4, !dbg !12032
  call void @trace_regmap_hw_write_done(%struct.regmap* %59, i32 %60, i32 1) #11, !dbg !12033
  br label %for.inc30, !dbg !12034

for.inc30:                                        ; preds = %for.body25
  %61 = load i32, i32* %i, align 4, !dbg !12035
  %inc31 = add i32 %61, 1, !dbg !12035
  store i32 %inc31, i32* %i, align 4, !dbg !12035
  br label %for.cond21, !dbg !12036, !llvm.loop !12037

for.end32:                                        ; preds = %for.cond21
  %62 = load i32, i32* %ret, align 4, !dbg !12039
  store i32 %62, i32* %retval, align 4, !dbg !12040
  br label %return, !dbg !12040

return:                                           ; preds = %for.end32, %if.then8, %if.then
  %63 = load i32, i32* %retval, align 4, !dbg !12041
  ret i32 %63, !dbg !12041
}

; Function Attrs: noredzone
declare dso_local void @usleep_range(i64, i64) #2

; Function Attrs: noredzone
declare dso_local void @msleep(i32) #2

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i32 @_regmap_register_page(%struct.regmap* %map, i32 %reg, %struct.regmap_range_node* %range) #0 !dbg !12042 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %range.addr = alloca %struct.regmap_range_node*, align 8
  %win_page = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !12045, metadata !DIExpression()), !dbg !12046
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !12047, metadata !DIExpression()), !dbg !12048
  store %struct.regmap_range_node* %range, %struct.regmap_range_node** %range.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap_range_node** %range.addr, metadata !12049, metadata !DIExpression()), !dbg !12050
  call void @llvm.dbg.declare(metadata i32* %win_page, metadata !12051, metadata !DIExpression()), !dbg !12052
  %0 = load i32, i32* %reg.addr, align 4, !dbg !12053
  %1 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !12054
  %range_min = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %1, i32 0, i32 3, !dbg !12055
  %2 = load i32, i32* %range_min, align 8, !dbg !12055
  %sub = sub i32 %0, %2, !dbg !12056
  %3 = load %struct.regmap_range_node*, %struct.regmap_range_node** %range.addr, align 8, !dbg !12057
  %window_len = getelementptr inbounds %struct.regmap_range_node, %struct.regmap_range_node* %3, i32 0, i32 9, !dbg !12058
  %4 = load i32, i32* %window_len, align 8, !dbg !12058
  %div = udiv i32 %sub, %4, !dbg !12059
  store i32 %div, i32* %win_page, align 4, !dbg !12052
  %5 = load i32, i32* %win_page, align 4, !dbg !12060
  ret i32 %5, !dbg !12061
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_reg_read(%struct.regmap* %map, i32 %reg, i32 %val) #0 !dbg !12062 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %val.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !12063, metadata !DIExpression()), !dbg !12064
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !12065, metadata !DIExpression()), !dbg !12064
  store i32 %val, i32* %val.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %val.addr, metadata !12066, metadata !DIExpression()), !dbg !12064
  ret void, !dbg !12064
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_hw_read_start(%struct.regmap* %map, i32 %reg, i32 %count) #0 !dbg !12067 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !12068, metadata !DIExpression()), !dbg !12069
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !12070, metadata !DIExpression()), !dbg !12069
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !12071, metadata !DIExpression()), !dbg !12069
  ret void, !dbg !12069
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @trace_regmap_hw_read_done(%struct.regmap* %map, i32 %reg, i32 %count) #0 !dbg !12072 {
entry:
  %map.addr = alloca %struct.regmap*, align 8
  %reg.addr = alloca i32, align 4
  %count.addr = alloca i32, align 4
  store %struct.regmap* %map, %struct.regmap** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.regmap** %map.addr, metadata !12073, metadata !DIExpression()), !dbg !12074
  store i32 %reg, i32* %reg.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg.addr, metadata !12075, metadata !DIExpression()), !dbg !12074
  store i32 %count, i32* %count.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %count.addr, metadata !12076, metadata !DIExpression()), !dbg !12074
  ret void, !dbg !12074
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @list_add(%struct.list_head* %new, %struct.list_head* %head) #0 !dbg !12077 {
entry:
  %new.addr = alloca %struct.list_head*, align 8
  %head.addr = alloca %struct.list_head*, align 8
  store %struct.list_head* %new, %struct.list_head** %new.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %new.addr, metadata !12078, metadata !DIExpression()), !dbg !12079
  store %struct.list_head* %head, %struct.list_head** %head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.list_head** %head.addr, metadata !12080, metadata !DIExpression()), !dbg !12081
  %0 = load %struct.list_head*, %struct.list_head** %new.addr, align 8, !dbg !12082
  %1 = load %struct.list_head*, %struct.list_head** %head.addr, align 8, !dbg !12083
  %2 = load %struct.list_head*, %struct.list_head** %head.addr, align 8, !dbg !12084
  %next = getelementptr inbounds %struct.list_head, %struct.list_head* %2, i32 0, i32 0, !dbg !12085
  %3 = load %struct.list_head*, %struct.list_head** %next, align 8, !dbg !12085
  call void @__list_add(%struct.list_head* %0, %struct.list_head* %1, %struct.list_head* %3) #11, !dbg !12086
  ret void, !dbg !12087
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal i64 @arch_local_save_flags() #0 !dbg !12088 {
entry:
  %__ret = alloca i64, align 8
  %__edi = alloca i64, align 8
  %__esi = alloca i64, align 8
  %__edx = alloca i64, align 8
  %__ecx = alloca i64, align 8
  %__eax = alloca i64, align 8
  %__mask = alloca i64, align 8
  %tmp = alloca i64, align 8
  %tmp2 = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %__ret, metadata !12089, metadata !DIExpression()), !dbg !12091
  call void @llvm.dbg.declare(metadata i64* %__edi, metadata !12092, metadata !DIExpression()), !dbg !12091
  %0 = load i64, i64* %__edi, align 8, !dbg !12091
  store i64 %0, i64* %__edi, align 8, !dbg !12091
  call void @llvm.dbg.declare(metadata i64* %__esi, metadata !12093, metadata !DIExpression()), !dbg !12091
  %1 = load i64, i64* %__esi, align 8, !dbg !12091
  store i64 %1, i64* %__esi, align 8, !dbg !12091
  call void @llvm.dbg.declare(metadata i64* %__edx, metadata !12094, metadata !DIExpression()), !dbg !12091
  %2 = load i64, i64* %__edx, align 8, !dbg !12091
  store i64 %2, i64* %__edx, align 8, !dbg !12091
  call void @llvm.dbg.declare(metadata i64* %__ecx, metadata !12095, metadata !DIExpression()), !dbg !12091
  %3 = load i64, i64* %__ecx, align 8, !dbg !12091
  store i64 %3, i64* %__ecx, align 8, !dbg !12091
  call void @llvm.dbg.declare(metadata i64* %__eax, metadata !12096, metadata !DIExpression()), !dbg !12091
  %4 = load i64, i64* %__eax, align 8, !dbg !12091
  store i64 %4, i64* %__eax, align 8, !dbg !12091
  %5 = load i8*, i8** getelementptr inbounds (%struct.paravirt_patch_template, %struct.paravirt_patch_template* @pv_ops, i32 0, i32 3, i32 0, i32 0), align 8, !dbg !12091
  %6 = call i64 @llvm.read_register.i64(metadata !3870), !dbg !12097
  %7 = call { i64, i64 } asm sideeffect "771:\0A\09999:\0A\09.pushsection .discard.retpoline_safe\0A\09 .quad  999b\0A\09.popsection\0A\09call *${3:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${2:c}\0A  .byte 772b-771b\0A  .short ${4:c}\0A.popsection\0A", "={ax},={rsp},i,i,i,1,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i64 36, i8** getelementptr inbounds (%struct.paravirt_patch_template, %struct.paravirt_patch_template* @pv_ops, i32 0, i32 3, i32 0, i32 0), i32 1, i64 %6) #10, !dbg !12097, !srcloc !12100
  %asmresult = extractvalue { i64, i64 } %7, 0, !dbg !12097
  %asmresult1 = extractvalue { i64, i64 } %7, 1, !dbg !12097
  store i64 %asmresult, i64* %__eax, align 8, !dbg !12097
  call void @llvm.write_register.i64(metadata !3870, i64 %asmresult1), !dbg !12097
  %8 = load i64, i64* %__eax, align 8, !dbg !12097
  call void @llvm.dbg.declare(metadata i64* %__mask, metadata !12101, metadata !DIExpression()), !dbg !12103
  store i64 -1, i64* %__mask, align 8, !dbg !12103
  %9 = load i64, i64* %__mask, align 8, !dbg !12103
  store i64 %9, i64* %tmp, align 8, !dbg !12103
  %10 = load i64, i64* %tmp, align 8, !dbg !12103
  %and = and i64 %8, %10, !dbg !12097
  store i64 %and, i64* %__ret, align 8, !dbg !12097
  %11 = load i64, i64* %__ret, align 8, !dbg !12091
  store i64 %11, i64* %tmp2, align 8, !dbg !12104
  %12 = load i64, i64* %tmp2, align 8, !dbg !12091
  ret i64 %12, !dbg !12105
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @arch_local_irq_disable() #0 !dbg !12106 {
entry:
  %__edi = alloca i64, align 8
  %__esi = alloca i64, align 8
  %__edx = alloca i64, align 8
  %__ecx = alloca i64, align 8
  %__eax = alloca i64, align 8
  call void @llvm.dbg.declare(metadata i64* %__edi, metadata !12107, metadata !DIExpression()), !dbg !12109
  %0 = load i64, i64* %__edi, align 8, !dbg !12109
  store i64 %0, i64* %__edi, align 8, !dbg !12109
  call void @llvm.dbg.declare(metadata i64* %__esi, metadata !12110, metadata !DIExpression()), !dbg !12109
  %1 = load i64, i64* %__esi, align 8, !dbg !12109
  store i64 %1, i64* %__esi, align 8, !dbg !12109
  call void @llvm.dbg.declare(metadata i64* %__edx, metadata !12111, metadata !DIExpression()), !dbg !12109
  %2 = load i64, i64* %__edx, align 8, !dbg !12109
  store i64 %2, i64* %__edx, align 8, !dbg !12109
  call void @llvm.dbg.declare(metadata i64* %__ecx, metadata !12112, metadata !DIExpression()), !dbg !12109
  %3 = load i64, i64* %__ecx, align 8, !dbg !12109
  store i64 %3, i64* %__ecx, align 8, !dbg !12109
  call void @llvm.dbg.declare(metadata i64* %__eax, metadata !12113, metadata !DIExpression()), !dbg !12109
  %4 = load i64, i64* %__eax, align 8, !dbg !12109
  store i64 %4, i64* %__eax, align 8, !dbg !12109
  %5 = load i8*, i8** getelementptr inbounds (%struct.paravirt_patch_template, %struct.paravirt_patch_template* @pv_ops, i32 0, i32 3, i32 2, i32 0), align 8, !dbg !12109
  %6 = call i64 @llvm.read_register.i64(metadata !3870), !dbg !12109
  %7 = call { i64, i64 } asm sideeffect "771:\0A\09999:\0A\09.pushsection .discard.retpoline_safe\0A\09 .quad  999b\0A\09.popsection\0A\09call *${3:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${2:c}\0A  .byte 772b-771b\0A  .short ${4:c}\0A.popsection\0A", "={ax},={rsp},i,i,i,1,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i64 38, i8** getelementptr inbounds (%struct.paravirt_patch_template, %struct.paravirt_patch_template* @pv_ops, i32 0, i32 3, i32 2, i32 0), i32 1, i64 %6) #10, !dbg !12109, !srcloc !12114
  %asmresult = extractvalue { i64, i64 } %7, 0, !dbg !12109
  %asmresult1 = extractvalue { i64, i64 } %7, 1, !dbg !12109
  store i64 %asmresult, i64* %__eax, align 8, !dbg !12109
  call void @llvm.write_register.i64(metadata !3870, i64 %asmresult1), !dbg !12109
  ret void, !dbg !12115
}

; Function Attrs: nounwind readonly
declare i64 @llvm.read_register.i64(metadata) #9

; Function Attrs: nounwind
declare void @llvm.write_register.i64(metadata, i64) #10

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @arch_local_irq_restore(i64 %f) #0 !dbg !12116 {
entry:
  %f.addr = alloca i64, align 8
  %__edi = alloca i64, align 8
  %__esi = alloca i64, align 8
  %__edx = alloca i64, align 8
  %__ecx = alloca i64, align 8
  %__eax = alloca i64, align 8
  store i64 %f, i64* %f.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %f.addr, metadata !12117, metadata !DIExpression()), !dbg !12118
  call void @llvm.dbg.declare(metadata i64* %__edi, metadata !12119, metadata !DIExpression()), !dbg !12121
  %0 = load i64, i64* %__edi, align 8, !dbg !12121
  store i64 %0, i64* %__edi, align 8, !dbg !12121
  call void @llvm.dbg.declare(metadata i64* %__esi, metadata !12122, metadata !DIExpression()), !dbg !12121
  %1 = load i64, i64* %__esi, align 8, !dbg !12121
  store i64 %1, i64* %__esi, align 8, !dbg !12121
  call void @llvm.dbg.declare(metadata i64* %__edx, metadata !12123, metadata !DIExpression()), !dbg !12121
  %2 = load i64, i64* %__edx, align 8, !dbg !12121
  store i64 %2, i64* %__edx, align 8, !dbg !12121
  call void @llvm.dbg.declare(metadata i64* %__ecx, metadata !12124, metadata !DIExpression()), !dbg !12121
  %3 = load i64, i64* %__ecx, align 8, !dbg !12121
  store i64 %3, i64* %__ecx, align 8, !dbg !12121
  call void @llvm.dbg.declare(metadata i64* %__eax, metadata !12125, metadata !DIExpression()), !dbg !12121
  %4 = load i64, i64* %__eax, align 8, !dbg !12121
  store i64 %4, i64* %__eax, align 8, !dbg !12121
  %5 = load i8*, i8** getelementptr inbounds (%struct.paravirt_patch_template, %struct.paravirt_patch_template* @pv_ops, i32 0, i32 3, i32 1, i32 0), align 8, !dbg !12121
  %6 = call i64 @llvm.read_register.i64(metadata !3870), !dbg !12121
  %7 = load i64, i64* %f.addr, align 8, !dbg !12121
  %8 = call { i64, i64 } asm sideeffect "771:\0A\09999:\0A\09.pushsection .discard.retpoline_safe\0A\09 .quad  999b\0A\09.popsection\0A\09call *${3:c};\0A772:\0A.pushsection .parainstructions,\22a\22\0A .balign 8 \0A .quad  771b\0A  .byte ${2:c}\0A  .byte 772b-771b\0A  .short ${4:c}\0A.popsection\0A", "={ax},={rsp},i,i,i,{di},1,~{memory},~{cc},~{dirflag},~{fpsr},~{flags}"(i64 37, i8** getelementptr inbounds (%struct.paravirt_patch_template, %struct.paravirt_patch_template* @pv_ops, i32 0, i32 3, i32 1, i32 0), i32 1, i64 %7, i64 %6) #10, !dbg !12121, !srcloc !12126
  %asmresult = extractvalue { i64, i64 } %8, 0, !dbg !12121
  %asmresult1 = extractvalue { i64, i64 } %8, 1, !dbg !12121
  store i64 %asmresult, i64* %__eax, align 8, !dbg !12121
  call void @llvm.write_register.i64(metadata !3870, i64 %asmresult1), !dbg !12121
  ret void, !dbg !12127
}

; Function Attrs: noinline noredzone nounwind optnone sspstrong
define internal void @regmap_debugfs_initcall() #0 !dbg !12128 {
entry:
  ret void, !dbg !12129
}

attributes #0 = { noinline noredzone nounwind optnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="true" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { noredzone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noinline noredzone nounwind optnone readnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="true" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readnone willreturn }
attributes #6 = { cold noredzone "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { cold noinline noredzone nounwind optnone sspstrong "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="true" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "null-pointer-is-valid"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,-3dnow,-3dnowa,-aes,-avx,-avx2,-avx512bf16,-avx512bitalg,-avx512bw,-avx512cd,-avx512dq,-avx512er,-avx512f,-avx512ifma,-avx512pf,-avx512vbmi,-avx512vbmi2,-avx512vl,-avx512vnni,-avx512vp2intersect,-avx512vpopcntdq,-f16c,-fma,-fma4,-gfni,-mmx,-pclmul,-sha,-sse,-sse2,-sse3,-sse4.1,-sse4.2,-sse4a,-ssse3,-vaes,-vpclmulqdq,-x87,-xop,-xsave,-xsaveopt" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind willreturn }
attributes #9 = { nounwind readonly }
attributes #10 = { nounwind }
attributes #11 = { noredzone }
attributes #12 = { noredzone nounwind readnone }
attributes #13 = { cold noredzone }
attributes #14 = { noredzone nounwind }
attributes #15 = { nounwind readnone }

!llvm.dbg.cu = !{!3808}
!llvm.named.register.rsp = !{!3870}
!llvm.module.flags = !{!3871, !3872, !3873, !3874}
!llvm.ident = !{!3875}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "__key", scope: !2, file: !3, line: 769, type: !487, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "__regmap_init", scope: !3, file: !3, line: 701, type: !4, scopeLine: 707, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!3 = !DIFile(filename: "drivers/base/regmap/regmap.c", directory: "/home/lizy2001/genbc/linux")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !72, !3568, !64, !3745, !3807, !81}
!6 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!7 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap", file: !8, line: 49, size: 4160, elements: !9)
!8 = !DIFile(filename: "drivers/base/regmap/internal.h", directory: "/home/lizy2001/genbc/linux")
!9 = !{!10, !58, !65, !67, !68, !71, !3545, !3546, !3567, !3632, !3633, !3634, !3635, !3636, !3637, !3638, !3639, !3640, !3641, !3645, !3646, !3647, !3648, !3649, !3650, !3665, !3666, !3667, !3668, !3669, !3670, !3671, !3672, !3673, !3674, !3675, !3676, !3677, !3678, !3679, !3707, !3708, !3709, !3710, !3711, !3712, !3713, !3714, !3715, !3721, !3722, !3723, !3724, !3725, !3732, !3733, !3734, !3735, !3736, !3737, !3738, !3739, !3740, !3744}
!10 = !DIDerivedType(tag: DW_TAG_member, scope: !7, file: !8, line: 50, baseType: !11, size: 192)
!11 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !7, file: !8, line: 50, size: 192, elements: !12)
!12 = !{!13, !52}
!13 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", scope: !11, file: !8, line: 51, baseType: !14, size: 192)
!14 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mutex", file: !15, line: 53, size: 192, elements: !16)
!15 = !DIFile(filename: "./include/linux/mutex.h", directory: "/home/lizy2001/genbc/linux")
!16 = !{!17, !30, !46}
!17 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !14, file: !15, line: 54, baseType: !18, size: 64)
!18 = !DIDerivedType(tag: DW_TAG_typedef, name: "atomic_long_t", file: !19, line: 13, baseType: !20)
!19 = !DIFile(filename: "./include/asm-generic/atomic-long.h", directory: "/home/lizy2001/genbc/linux")
!20 = !DIDerivedType(tag: DW_TAG_typedef, name: "atomic64_t", file: !21, line: 175, baseType: !22)
!21 = !DIFile(filename: "./include/linux/types.h", directory: "/home/lizy2001/genbc/linux")
!22 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !21, line: 173, size: 64, elements: !23)
!23 = !{!24}
!24 = !DIDerivedType(tag: DW_TAG_member, name: "counter", scope: !22, file: !21, line: 174, baseType: !25, size: 64)
!25 = !DIDerivedType(tag: DW_TAG_typedef, name: "s64", file: !26, line: 22, baseType: !27)
!26 = !DIFile(filename: "./include/asm-generic/int-ll64.h", directory: "/home/lizy2001/genbc/linux")
!27 = !DIDerivedType(tag: DW_TAG_typedef, name: "__s64", file: !28, line: 30, baseType: !29)
!28 = !DIFile(filename: "./include/uapi/asm-generic/int-ll64.h", directory: "/home/lizy2001/genbc/linux")
!29 = !DIBasicType(name: "long long int", size: 64, encoding: DW_ATE_signed)
!30 = !DIDerivedType(tag: DW_TAG_member, name: "wait_lock", scope: !14, file: !15, line: 55, baseType: !31, offset: 64)
!31 = !DIDerivedType(tag: DW_TAG_typedef, name: "spinlock_t", file: !32, line: 83, baseType: !33)
!32 = !DIFile(filename: "./include/linux/spinlock_types.h", directory: "/home/lizy2001/genbc/linux")
!33 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "spinlock", file: !32, line: 71, elements: !34)
!34 = !{!35}
!35 = !DIDerivedType(tag: DW_TAG_member, scope: !33, file: !32, line: 72, baseType: !36)
!36 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !33, file: !32, line: 72, elements: !37)
!37 = !{!38}
!38 = !DIDerivedType(tag: DW_TAG_member, name: "rlock", scope: !36, file: !32, line: 73, baseType: !39)
!39 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "raw_spinlock", file: !32, line: 20, elements: !40)
!40 = !{!41}
!41 = !DIDerivedType(tag: DW_TAG_member, name: "raw_lock", scope: !39, file: !32, line: 21, baseType: !42)
!42 = !DIDerivedType(tag: DW_TAG_typedef, name: "arch_spinlock_t", file: !43, line: 25, baseType: !44)
!43 = !DIFile(filename: "./include/linux/spinlock_types_up.h", directory: "/home/lizy2001/genbc/linux")
!44 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !43, line: 25, elements: !45)
!45 = !{}
!46 = !DIDerivedType(tag: DW_TAG_member, name: "wait_list", scope: !14, file: !15, line: 59, baseType: !47, size: 128, offset: 64)
!47 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "list_head", file: !21, line: 178, size: 128, elements: !48)
!48 = !{!49, !51}
!49 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !47, file: !21, line: 179, baseType: !50, size: 64)
!50 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !47, size: 64)
!51 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !47, file: !21, line: 179, baseType: !50, size: 64, offset: 64)
!52 = !DIDerivedType(tag: DW_TAG_member, scope: !11, file: !8, line: 52, baseType: !53, size: 64)
!53 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !11, file: !8, line: 52, size: 64, elements: !54)
!54 = !{!55, !56}
!55 = !DIDerivedType(tag: DW_TAG_member, name: "spinlock", scope: !53, file: !8, line: 53, baseType: !31)
!56 = !DIDerivedType(tag: DW_TAG_member, name: "spinlock_flags", scope: !53, file: !8, line: 54, baseType: !57, size: 64)
!57 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!58 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !7, file: !8, line: 57, baseType: !59, size: 64, offset: 192)
!59 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_lock", file: !60, line: 226, baseType: !61)
!60 = !DIFile(filename: "./include/linux/regmap.h", directory: "/home/lizy2001/genbc/linux")
!61 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !62, size: 64)
!62 = !DISubroutineType(types: !63)
!63 = !{null, !64}
!64 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!65 = !DIDerivedType(tag: DW_TAG_member, name: "unlock", scope: !7, file: !8, line: 58, baseType: !66, size: 64, offset: 256)
!66 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_unlock", file: !60, line: 227, baseType: !61)
!67 = !DIDerivedType(tag: DW_TAG_member, name: "lock_arg", scope: !7, file: !8, line: 59, baseType: !64, size: 64, offset: 320)
!68 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_flags", scope: !7, file: !8, line: 60, baseType: !69, size: 32, offset: 384)
!69 = !DIDerivedType(tag: DW_TAG_typedef, name: "gfp_t", file: !21, line: 148, baseType: !70)
!70 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!71 = !DIDerivedType(tag: DW_TAG_member, name: "dev", scope: !7, file: !8, line: 62, baseType: !72, size: 64, offset: 448)
!72 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !73, size: 64)
!73 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "device", file: !74, line: 461, size: 5568, elements: !75)
!74 = !DIFile(filename: "./include/linux/device.h", directory: "/home/lizy2001/genbc/linux")
!75 = !{!76, !3091, !3092, !3095, !3096, !3148, !3227, !3228, !3229, !3230, !3231, !3246, !3364, !3377, !3380, !3381, !3385, !3387, !3388, !3389, !3393, !3399, !3400, !3403, !3407, !3497, !3498, !3499, !3500, !3501, !3533, !3534, !3535, !3538, !3541, !3542, !3543, !3544}
!76 = !DIDerivedType(tag: DW_TAG_member, name: "kobj", scope: !73, file: !74, line: 462, baseType: !77, size: 512)
!77 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kobject", file: !78, line: 64, size: 512, elements: !79)
!78 = !DIFile(filename: "./include/linux/kobject.h", directory: "/home/lizy2001/genbc/linux")
!79 = !{!80, !84, !85, !87, !133, !2942, !3081, !3086, !3087, !3088, !3089, !3090}
!80 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !77, file: !78, line: 65, baseType: !81, size: 64)
!81 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !82, size: 64)
!82 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !83)
!83 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!84 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !77, file: !78, line: 66, baseType: !47, size: 128, offset: 64)
!85 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !77, file: !78, line: 67, baseType: !86, size: 64, offset: 192)
!86 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !77, size: 64)
!87 = !DIDerivedType(tag: DW_TAG_member, name: "kset", scope: !77, file: !78, line: 68, baseType: !88, size: 64, offset: 256)
!88 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !89, size: 64)
!89 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kset", file: !78, line: 192, size: 704, elements: !90)
!90 = !{!91, !92, !93, !94}
!91 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !89, file: !78, line: 193, baseType: !47, size: 128)
!92 = !DIDerivedType(tag: DW_TAG_member, name: "list_lock", scope: !89, file: !78, line: 194, baseType: !31, offset: 128)
!93 = !DIDerivedType(tag: DW_TAG_member, name: "kobj", scope: !89, file: !78, line: 195, baseType: !77, size: 512, offset: 128)
!94 = !DIDerivedType(tag: DW_TAG_member, name: "uevent_ops", scope: !89, file: !78, line: 196, baseType: !95, size: 64, offset: 640)
!95 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !96, size: 64)
!96 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !97)
!97 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kset_uevent_ops", file: !78, line: 156, size: 192, elements: !98)
!98 = !{!99, !105, !110}
!99 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !97, file: !78, line: 157, baseType: !100, size: 64)
!100 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !101)
!101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !102, size: 64)
!102 = !DISubroutineType(types: !103)
!103 = !{!104, !88, !86}
!104 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!105 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !97, file: !78, line: 158, baseType: !106, size: 64, offset: 64)
!106 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !107)
!107 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !108, size: 64)
!108 = !DISubroutineType(types: !109)
!109 = !{!81, !88, !86}
!110 = !DIDerivedType(tag: DW_TAG_member, name: "uevent", scope: !97, file: !78, line: 159, baseType: !111, size: 64, offset: 128)
!111 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !112)
!112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !113, size: 64)
!113 = !DISubroutineType(types: !114)
!114 = !{!104, !88, !86, !115}
!115 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !116, size: 64)
!116 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kobj_uevent_env", file: !78, line: 148, size: 20736, elements: !117)
!117 = !{!118, !123, !127, !128, !132}
!118 = !DIDerivedType(tag: DW_TAG_member, name: "argv", scope: !116, file: !78, line: 149, baseType: !119, size: 192)
!119 = !DICompositeType(tag: DW_TAG_array_type, baseType: !120, size: 192, elements: !121)
!120 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !83, size: 64)
!121 = !{!122}
!122 = !DISubrange(count: 3)
!123 = !DIDerivedType(tag: DW_TAG_member, name: "envp", scope: !116, file: !78, line: 150, baseType: !124, size: 4096, offset: 192)
!124 = !DICompositeType(tag: DW_TAG_array_type, baseType: !120, size: 4096, elements: !125)
!125 = !{!126}
!126 = !DISubrange(count: 64)
!127 = !DIDerivedType(tag: DW_TAG_member, name: "envp_idx", scope: !116, file: !78, line: 151, baseType: !104, size: 32, offset: 4288)
!128 = !DIDerivedType(tag: DW_TAG_member, name: "buf", scope: !116, file: !78, line: 152, baseType: !129, size: 16384, offset: 4320)
!129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !83, size: 16384, elements: !130)
!130 = !{!131}
!131 = !DISubrange(count: 2048)
!132 = !DIDerivedType(tag: DW_TAG_member, name: "buflen", scope: !116, file: !78, line: 153, baseType: !104, size: 32, offset: 20704)
!133 = !DIDerivedType(tag: DW_TAG_member, name: "ktype", scope: !77, file: !78, line: 69, baseType: !134, size: 64, offset: 320)
!134 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !135, size: 64)
!135 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kobj_type", file: !78, line: 138, size: 448, elements: !136)
!136 = !{!137, !141, !170, !172, !2898, !2932, !2936}
!137 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !135, file: !78, line: 139, baseType: !138, size: 64)
!138 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !139, size: 64)
!139 = !DISubroutineType(types: !140)
!140 = !{null, !86}
!141 = !DIDerivedType(tag: DW_TAG_member, name: "sysfs_ops", scope: !135, file: !78, line: 140, baseType: !142, size: 64, offset: 64)
!142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !143, size: 64)
!143 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !144)
!144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sysfs_ops", file: !145, line: 230, size: 128, elements: !146)
!145 = !DIFile(filename: "./include/linux/sysfs.h", directory: "/home/lizy2001/genbc/linux")
!146 = !{!147, !163}
!147 = !DIDerivedType(tag: DW_TAG_member, name: "show", scope: !144, file: !145, line: 231, baseType: !148, size: 64)
!148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !149, size: 64)
!149 = !DISubroutineType(types: !150)
!150 = !{!151, !86, !156, !120}
!151 = !DIDerivedType(tag: DW_TAG_typedef, name: "ssize_t", file: !21, line: 60, baseType: !152)
!152 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_ssize_t", file: !153, line: 73, baseType: !154)
!153 = !DIFile(filename: "./include/uapi/asm-generic/posix_types.h", directory: "/home/lizy2001/genbc/linux")
!154 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_long_t", file: !153, line: 15, baseType: !155)
!155 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!156 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !157, size: 64)
!157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "attribute", file: !145, line: 30, size: 128, elements: !158)
!158 = !{!159, !160}
!159 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !157, file: !145, line: 31, baseType: !81, size: 64)
!160 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !157, file: !145, line: 32, baseType: !161, size: 16, offset: 64)
!161 = !DIDerivedType(tag: DW_TAG_typedef, name: "umode_t", file: !21, line: 19, baseType: !162)
!162 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!163 = !DIDerivedType(tag: DW_TAG_member, name: "store", scope: !144, file: !145, line: 232, baseType: !164, size: 64, offset: 64)
!164 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !165, size: 64)
!165 = !DISubroutineType(types: !166)
!166 = !{!151, !86, !156, !81, !167}
!167 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !21, line: 55, baseType: !168)
!168 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_size_t", file: !153, line: 72, baseType: !169)
!169 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_ulong_t", file: !153, line: 16, baseType: !57)
!170 = !DIDerivedType(tag: DW_TAG_member, name: "default_attrs", scope: !135, file: !78, line: 141, baseType: !171, size: 64, offset: 128)
!171 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !156, size: 64)
!172 = !DIDerivedType(tag: DW_TAG_member, name: "default_groups", scope: !135, file: !78, line: 142, baseType: !173, size: 64, offset: 192)
!173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !174, size: 64)
!174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !175, size: 64)
!175 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !176)
!176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "attribute_group", file: !145, line: 84, size: 320, elements: !177)
!177 = !{!178, !179, !183, !2895, !2896}
!178 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !176, file: !145, line: 85, baseType: !81, size: 64)
!179 = !DIDerivedType(tag: DW_TAG_member, name: "is_visible", scope: !176, file: !145, line: 86, baseType: !180, size: 64, offset: 64)
!180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !181, size: 64)
!181 = !DISubroutineType(types: !182)
!182 = !{!161, !86, !156, !104}
!183 = !DIDerivedType(tag: DW_TAG_member, name: "is_bin_visible", scope: !176, file: !145, line: 88, baseType: !184, size: 64, offset: 128)
!184 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !185, size: 64)
!185 = !DISubroutineType(types: !186)
!186 = !{!161, !86, !187, !104}
!187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !188, size: 64)
!188 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bin_attribute", file: !145, line: 168, size: 448, elements: !189)
!189 = !{!190, !191, !192, !193, !2890, !2891}
!190 = !DIDerivedType(tag: DW_TAG_member, name: "attr", scope: !188, file: !145, line: 169, baseType: !157, size: 128)
!191 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !188, file: !145, line: 170, baseType: !167, size: 64, offset: 128)
!192 = !DIDerivedType(tag: DW_TAG_member, name: "private", scope: !188, file: !145, line: 171, baseType: !64, size: 64, offset: 192)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "read", scope: !188, file: !145, line: 172, baseType: !194, size: 64, offset: 256)
!194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !195, size: 64)
!195 = !DISubroutineType(types: !196)
!196 = !{!151, !197, !86, !187, !120, !372, !167}
!197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !198, size: 64)
!198 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file", file: !199, line: 916, size: 1856, align: 32, elements: !200)
!199 = !DIFile(filename: "./include/linux/fs.h", directory: "/home/lizy2001/genbc/linux")
!200 = !{!201, !219, !2840, !2841, !2842, !2843, !2852, !2853, !2854, !2855, !2856, !2857, !2873, !2874, !2883, !2884, !2885, !2886, !2887, !2888, !2889}
!201 = !DIDerivedType(tag: DW_TAG_member, name: "f_u", scope: !198, file: !199, line: 920, baseType: !202, size: 128)
!202 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !198, file: !199, line: 917, size: 128, elements: !203)
!203 = !{!204, !210}
!204 = !DIDerivedType(tag: DW_TAG_member, name: "fu_llist", scope: !202, file: !199, line: 918, baseType: !205, size: 64)
!205 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "llist_node", file: !206, line: 58, size: 64, elements: !207)
!206 = !DIFile(filename: "./include/linux/llist.h", directory: "/home/lizy2001/genbc/linux")
!207 = !{!208}
!208 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !205, file: !206, line: 59, baseType: !209, size: 64)
!209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !205, size: 64)
!210 = !DIDerivedType(tag: DW_TAG_member, name: "fu_rcuhead", scope: !202, file: !199, line: 919, baseType: !211, size: 128, align: 64)
!211 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "callback_head", file: !21, line: 216, size: 128, align: 64, elements: !212)
!212 = !{!213, !215}
!213 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !211, file: !21, line: 217, baseType: !214, size: 64)
!214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !211, size: 64)
!215 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !211, file: !21, line: 218, baseType: !216, size: 64, offset: 64)
!216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !217, size: 64)
!217 = !DISubroutineType(types: !218)
!218 = !{null, !214}
!219 = !DIDerivedType(tag: DW_TAG_member, name: "f_path", scope: !198, file: !199, line: 921, baseType: !220, size: 128, offset: 128)
!220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "path", file: !221, line: 8, size: 128, elements: !222)
!221 = !DIFile(filename: "./include/linux/path.h", directory: "/home/lizy2001/genbc/linux")
!222 = !{!223, !227}
!223 = !DIDerivedType(tag: DW_TAG_member, name: "mnt", scope: !220, file: !221, line: 9, baseType: !224, size: 64)
!224 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !225, size: 64)
!225 = !DICompositeType(tag: DW_TAG_structure_type, name: "vfsmount", file: !226, line: 18, flags: DIFlagFwdDecl)
!226 = !DIFile(filename: "./include/linux/dcache.h", directory: "/home/lizy2001/genbc/linux")
!227 = !DIDerivedType(tag: DW_TAG_member, name: "dentry", scope: !220, file: !221, line: 10, baseType: !228, size: 64, offset: 64)
!228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !229, size: 64)
!229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dentry", file: !226, line: 89, size: 1536, elements: !230)
!230 = !{!231, !232, !242, !250, !251, !272, !2808, !2810, !2822, !2823, !2824, !2825, !2826, !2832, !2833, !2834}
!231 = !DIDerivedType(tag: DW_TAG_member, name: "d_flags", scope: !229, file: !226, line: 91, baseType: !70, size: 32)
!232 = !DIDerivedType(tag: DW_TAG_member, name: "d_seq", scope: !229, file: !226, line: 92, baseType: !233, size: 32, offset: 32)
!233 = !DIDerivedType(tag: DW_TAG_typedef, name: "seqcount_spinlock_t", file: !234, line: 277, baseType: !235)
!234 = !DIFile(filename: "./include/linux/seqlock.h", directory: "/home/lizy2001/genbc/linux")
!235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "seqcount_spinlock", file: !234, line: 277, size: 32, elements: !236)
!236 = !{!237}
!237 = !DIDerivedType(tag: DW_TAG_member, name: "seqcount", scope: !235, file: !234, line: 277, baseType: !238, size: 32)
!238 = !DIDerivedType(tag: DW_TAG_typedef, name: "seqcount_t", file: !234, line: 70, baseType: !239)
!239 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "seqcount", file: !234, line: 65, size: 32, elements: !240)
!240 = !{!241}
!241 = !DIDerivedType(tag: DW_TAG_member, name: "sequence", scope: !239, file: !234, line: 66, baseType: !70, size: 32)
!242 = !DIDerivedType(tag: DW_TAG_member, name: "d_hash", scope: !229, file: !226, line: 93, baseType: !243, size: 128, offset: 64)
!243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hlist_bl_node", file: !244, line: 38, size: 128, elements: !245)
!244 = !DIFile(filename: "./include/linux/list_bl.h", directory: "/home/lizy2001/genbc/linux")
!245 = !{!246, !248}
!246 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !243, file: !244, line: 39, baseType: !247, size: 64)
!247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !243, size: 64)
!248 = !DIDerivedType(tag: DW_TAG_member, name: "pprev", scope: !243, file: !244, line: 39, baseType: !249, size: 64, offset: 64)
!249 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !247, size: 64)
!250 = !DIDerivedType(tag: DW_TAG_member, name: "d_parent", scope: !229, file: !226, line: 94, baseType: !228, size: 64, offset: 192)
!251 = !DIDerivedType(tag: DW_TAG_member, name: "d_name", scope: !229, file: !226, line: 95, baseType: !252, size: 128, offset: 256)
!252 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qstr", file: !226, line: 47, size: 128, elements: !253)
!253 = !{!254, !268}
!254 = !DIDerivedType(tag: DW_TAG_member, scope: !252, file: !226, line: 48, baseType: !255, size: 64)
!255 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !252, file: !226, line: 48, size: 64, elements: !256)
!256 = !{!257, !264}
!257 = !DIDerivedType(tag: DW_TAG_member, scope: !255, file: !226, line: 49, baseType: !258, size: 64)
!258 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !255, file: !226, line: 49, size: 64, elements: !259)
!259 = !{!260, !263}
!260 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !258, file: !226, line: 50, baseType: !261, size: 32)
!261 = !DIDerivedType(tag: DW_TAG_typedef, name: "u32", file: !26, line: 21, baseType: !262)
!262 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u32", file: !28, line: 27, baseType: !70)
!263 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !258, file: !226, line: 50, baseType: !261, size: 32, offset: 32)
!264 = !DIDerivedType(tag: DW_TAG_member, name: "hash_len", scope: !255, file: !226, line: 52, baseType: !265, size: 64)
!265 = !DIDerivedType(tag: DW_TAG_typedef, name: "u64", file: !26, line: 23, baseType: !266)
!266 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u64", file: !28, line: 31, baseType: !267)
!267 = !DIBasicType(name: "long long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!268 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !252, file: !226, line: 54, baseType: !269, size: 64, offset: 64)
!269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !270, size: 64)
!270 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !271)
!271 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "d_inode", scope: !229, file: !226, line: 96, baseType: !273, size: 64, offset: 384)
!273 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !274, size: 64)
!274 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inode", file: !199, line: 610, size: 4224, elements: !275)
!275 = !{!276, !277, !278, !286, !293, !294, !437, !2519, !2520, !2521, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2784, !2792, !2793, !2794, !2804, !2805, !2806, !2807}
!276 = !DIDerivedType(tag: DW_TAG_member, name: "i_mode", scope: !274, file: !199, line: 611, baseType: !161, size: 16)
!277 = !DIDerivedType(tag: DW_TAG_member, name: "i_opflags", scope: !274, file: !199, line: 612, baseType: !162, size: 16, offset: 16)
!278 = !DIDerivedType(tag: DW_TAG_member, name: "i_uid", scope: !274, file: !199, line: 613, baseType: !279, size: 32, offset: 32)
!279 = !DIDerivedType(tag: DW_TAG_typedef, name: "kuid_t", file: !280, line: 23, baseType: !281)
!280 = !DIFile(filename: "./include/linux/uidgid.h", directory: "/home/lizy2001/genbc/linux")
!281 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !280, line: 21, size: 32, elements: !282)
!282 = !{!283}
!283 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !281, file: !280, line: 22, baseType: !284, size: 32)
!284 = !DIDerivedType(tag: DW_TAG_typedef, name: "uid_t", file: !21, line: 32, baseType: !285)
!285 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_uid32_t", file: !153, line: 49, baseType: !70)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "i_gid", scope: !274, file: !199, line: 614, baseType: !287, size: 32, offset: 64)
!287 = !DIDerivedType(tag: DW_TAG_typedef, name: "kgid_t", file: !280, line: 28, baseType: !288)
!288 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !280, line: 26, size: 32, elements: !289)
!289 = !{!290}
!290 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !288, file: !280, line: 27, baseType: !291, size: 32)
!291 = !DIDerivedType(tag: DW_TAG_typedef, name: "gid_t", file: !21, line: 33, baseType: !292)
!292 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_gid32_t", file: !153, line: 50, baseType: !70)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "i_flags", scope: !274, file: !199, line: 615, baseType: !70, size: 32, offset: 96)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "i_op", scope: !274, file: !199, line: 622, baseType: !295, size: 64, offset: 128)
!295 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !296, size: 64)
!296 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !297)
!297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "inode_operations", file: !199, line: 1864, size: 1536, align: 512, elements: !298)
!298 = !{!299, !303, !313, !317, !323, !327, !333, !337, !341, !345, !349, !350, !356, !360, !384, !413, !417, !423, !428, !432, !433}
!299 = !DIDerivedType(tag: DW_TAG_member, name: "lookup", scope: !297, file: !199, line: 1865, baseType: !300, size: 64)
!300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !301, size: 64)
!301 = !DISubroutineType(types: !302)
!302 = !{!228, !273, !228, !70}
!303 = !DIDerivedType(tag: DW_TAG_member, name: "get_link", scope: !297, file: !199, line: 1866, baseType: !304, size: 64, offset: 64)
!304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !305, size: 64)
!305 = !DISubroutineType(types: !306)
!306 = !{!81, !228, !273, !307}
!307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !308, size: 64)
!308 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "delayed_call", file: !309, line: 10, size: 128, elements: !310)
!309 = !DIFile(filename: "./include/linux/delayed_call.h", directory: "/home/lizy2001/genbc/linux")
!310 = !{!311, !312}
!311 = !DIDerivedType(tag: DW_TAG_member, name: "fn", scope: !308, file: !309, line: 11, baseType: !61, size: 64)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "arg", scope: !308, file: !309, line: 12, baseType: !64, size: 64, offset: 64)
!313 = !DIDerivedType(tag: DW_TAG_member, name: "permission", scope: !297, file: !199, line: 1867, baseType: !314, size: 64, offset: 128)
!314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !315, size: 64)
!315 = !DISubroutineType(types: !316)
!316 = !{!104, !273, !104}
!317 = !DIDerivedType(tag: DW_TAG_member, name: "get_acl", scope: !297, file: !199, line: 1868, baseType: !318, size: 64, offset: 192)
!318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !319, size: 64)
!319 = !DISubroutineType(types: !320)
!320 = !{!321, !273, !104}
!321 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !322, size: 64)
!322 = !DICompositeType(tag: DW_TAG_structure_type, name: "posix_acl", file: !199, line: 581, flags: DIFlagFwdDecl)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "readlink", scope: !297, file: !199, line: 1870, baseType: !324, size: 64, offset: 256)
!324 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !325, size: 64)
!325 = !DISubroutineType(types: !326)
!326 = !{!104, !228, !120, !104}
!327 = !DIDerivedType(tag: DW_TAG_member, name: "create", scope: !297, file: !199, line: 1872, baseType: !328, size: 64, offset: 320)
!328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !329, size: 64)
!329 = !DISubroutineType(types: !330)
!330 = !{!104, !273, !228, !161, !331}
!331 = !DIDerivedType(tag: DW_TAG_typedef, name: "bool", file: !21, line: 30, baseType: !332)
!332 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
!333 = !DIDerivedType(tag: DW_TAG_member, name: "link", scope: !297, file: !199, line: 1873, baseType: !334, size: 64, offset: 384)
!334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !335, size: 64)
!335 = !DISubroutineType(types: !336)
!336 = !{!104, !228, !273, !228}
!337 = !DIDerivedType(tag: DW_TAG_member, name: "unlink", scope: !297, file: !199, line: 1874, baseType: !338, size: 64, offset: 448)
!338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !339, size: 64)
!339 = !DISubroutineType(types: !340)
!340 = !{!104, !273, !228}
!341 = !DIDerivedType(tag: DW_TAG_member, name: "symlink", scope: !297, file: !199, line: 1875, baseType: !342, size: 64, offset: 512)
!342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !343, size: 64)
!343 = !DISubroutineType(types: !344)
!344 = !{!104, !273, !228, !81}
!345 = !DIDerivedType(tag: DW_TAG_member, name: "mkdir", scope: !297, file: !199, line: 1876, baseType: !346, size: 64, offset: 576)
!346 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !347, size: 64)
!347 = !DISubroutineType(types: !348)
!348 = !{!104, !273, !228, !161}
!349 = !DIDerivedType(tag: DW_TAG_member, name: "rmdir", scope: !297, file: !199, line: 1877, baseType: !338, size: 64, offset: 640)
!350 = !DIDerivedType(tag: DW_TAG_member, name: "mknod", scope: !297, file: !199, line: 1878, baseType: !351, size: 64, offset: 704)
!351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !352, size: 64)
!352 = !DISubroutineType(types: !353)
!353 = !{!104, !273, !228, !161, !354}
!354 = !DIDerivedType(tag: DW_TAG_typedef, name: "dev_t", file: !21, line: 16, baseType: !355)
!355 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_dev_t", file: !21, line: 13, baseType: !261)
!356 = !DIDerivedType(tag: DW_TAG_member, name: "rename", scope: !297, file: !199, line: 1879, baseType: !357, size: 64, offset: 768)
!357 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !358, size: 64)
!358 = !DISubroutineType(types: !359)
!359 = !{!104, !273, !228, !273, !228, !70}
!360 = !DIDerivedType(tag: DW_TAG_member, name: "setattr", scope: !297, file: !199, line: 1881, baseType: !361, size: 64, offset: 832)
!361 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !362, size: 64)
!362 = !DISubroutineType(types: !363)
!363 = !{!104, !228, !364}
!364 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !365, size: 64)
!365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "iattr", file: !199, line: 219, size: 640, elements: !366)
!366 = !{!367, !368, !369, !370, !371, !374, !381, !382, !383}
!367 = !DIDerivedType(tag: DW_TAG_member, name: "ia_valid", scope: !365, file: !199, line: 220, baseType: !70, size: 32)
!368 = !DIDerivedType(tag: DW_TAG_member, name: "ia_mode", scope: !365, file: !199, line: 221, baseType: !161, size: 16, offset: 32)
!369 = !DIDerivedType(tag: DW_TAG_member, name: "ia_uid", scope: !365, file: !199, line: 222, baseType: !279, size: 32, offset: 64)
!370 = !DIDerivedType(tag: DW_TAG_member, name: "ia_gid", scope: !365, file: !199, line: 223, baseType: !287, size: 32, offset: 96)
!371 = !DIDerivedType(tag: DW_TAG_member, name: "ia_size", scope: !365, file: !199, line: 224, baseType: !372, size: 64, offset: 128)
!372 = !DIDerivedType(tag: DW_TAG_typedef, name: "loff_t", file: !21, line: 46, baseType: !373)
!373 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_loff_t", file: !153, line: 88, baseType: !29)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "ia_atime", scope: !365, file: !199, line: 225, baseType: !375, size: 128, offset: 192)
!375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timespec64", file: !376, line: 13, size: 128, elements: !377)
!376 = !DIFile(filename: "./include/linux/time64.h", directory: "/home/lizy2001/genbc/linux")
!377 = !{!378, !380}
!378 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !375, file: !376, line: 14, baseType: !379, size: 64)
!379 = !DIDerivedType(tag: DW_TAG_typedef, name: "time64_t", file: !376, line: 8, baseType: !27)
!380 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !375, file: !376, line: 15, baseType: !155, size: 64, offset: 64)
!381 = !DIDerivedType(tag: DW_TAG_member, name: "ia_mtime", scope: !365, file: !199, line: 226, baseType: !375, size: 128, offset: 320)
!382 = !DIDerivedType(tag: DW_TAG_member, name: "ia_ctime", scope: !365, file: !199, line: 227, baseType: !375, size: 128, offset: 448)
!383 = !DIDerivedType(tag: DW_TAG_member, name: "ia_file", scope: !365, file: !199, line: 234, baseType: !197, size: 64, offset: 576)
!384 = !DIDerivedType(tag: DW_TAG_member, name: "getattr", scope: !297, file: !199, line: 1882, baseType: !385, size: 64, offset: 896)
!385 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !386, size: 64)
!386 = !DISubroutineType(types: !387)
!387 = !{!104, !388, !390, !261, !70}
!388 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !389, size: 64)
!389 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !220)
!390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !391, size: 64)
!391 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kstat", file: !392, line: 22, size: 1152, elements: !393)
!392 = !DIFile(filename: "./include/linux/stat.h", directory: "/home/lizy2001/genbc/linux")
!393 = !{!394, !395, !396, !397, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412}
!394 = !DIDerivedType(tag: DW_TAG_member, name: "result_mask", scope: !391, file: !392, line: 23, baseType: !261, size: 32)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !391, file: !392, line: 24, baseType: !161, size: 16, offset: 32)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "nlink", scope: !391, file: !392, line: 25, baseType: !70, size: 32, offset: 64)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "blksize", scope: !391, file: !392, line: 26, baseType: !398, size: 32, offset: 96)
!398 = !DIDerivedType(tag: DW_TAG_typedef, name: "uint32_t", file: !21, line: 104, baseType: !261)
!399 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !391, file: !392, line: 27, baseType: !265, size: 64, offset: 128)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "attributes_mask", scope: !391, file: !392, line: 28, baseType: !265, size: 64, offset: 192)
!401 = !DIDerivedType(tag: DW_TAG_member, name: "ino", scope: !391, file: !392, line: 37, baseType: !265, size: 64, offset: 256)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "dev", scope: !391, file: !392, line: 38, baseType: !354, size: 32, offset: 320)
!403 = !DIDerivedType(tag: DW_TAG_member, name: "rdev", scope: !391, file: !392, line: 39, baseType: !354, size: 32, offset: 352)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !391, file: !392, line: 40, baseType: !279, size: 32, offset: 384)
!405 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !391, file: !392, line: 41, baseType: !287, size: 32, offset: 416)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !391, file: !392, line: 42, baseType: !372, size: 64, offset: 448)
!407 = !DIDerivedType(tag: DW_TAG_member, name: "atime", scope: !391, file: !392, line: 43, baseType: !375, size: 128, offset: 512)
!408 = !DIDerivedType(tag: DW_TAG_member, name: "mtime", scope: !391, file: !392, line: 44, baseType: !375, size: 128, offset: 640)
!409 = !DIDerivedType(tag: DW_TAG_member, name: "ctime", scope: !391, file: !392, line: 45, baseType: !375, size: 128, offset: 768)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "btime", scope: !391, file: !392, line: 46, baseType: !375, size: 128, offset: 896)
!411 = !DIDerivedType(tag: DW_TAG_member, name: "blocks", scope: !391, file: !392, line: 47, baseType: !265, size: 64, offset: 1024)
!412 = !DIDerivedType(tag: DW_TAG_member, name: "mnt_id", scope: !391, file: !392, line: 48, baseType: !265, size: 64, offset: 1088)
!413 = !DIDerivedType(tag: DW_TAG_member, name: "listxattr", scope: !297, file: !199, line: 1883, baseType: !414, size: 64, offset: 960)
!414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !415, size: 64)
!415 = !DISubroutineType(types: !416)
!416 = !{!151, !228, !120, !167}
!417 = !DIDerivedType(tag: DW_TAG_member, name: "fiemap", scope: !297, file: !199, line: 1884, baseType: !418, size: 64, offset: 1024)
!418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !419, size: 64)
!419 = !DISubroutineType(types: !420)
!420 = !{!104, !273, !421, !265, !265}
!421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !422, size: 64)
!422 = !DICompositeType(tag: DW_TAG_structure_type, name: "fiemap_extent_info", file: !199, line: 50, flags: DIFlagFwdDecl)
!423 = !DIDerivedType(tag: DW_TAG_member, name: "update_time", scope: !297, file: !199, line: 1886, baseType: !424, size: 64, offset: 1088)
!424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !425, size: 64)
!425 = !DISubroutineType(types: !426)
!426 = !{!104, !273, !427, !104}
!427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !375, size: 64)
!428 = !DIDerivedType(tag: DW_TAG_member, name: "atomic_open", scope: !297, file: !199, line: 1887, baseType: !429, size: 64, offset: 1152)
!429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !430, size: 64)
!430 = !DISubroutineType(types: !431)
!431 = !{!104, !273, !228, !197, !70, !161}
!432 = !DIDerivedType(tag: DW_TAG_member, name: "tmpfile", scope: !297, file: !199, line: 1890, baseType: !346, size: 64, offset: 1216)
!433 = !DIDerivedType(tag: DW_TAG_member, name: "set_acl", scope: !297, file: !199, line: 1891, baseType: !434, size: 64, offset: 1280)
!434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !435, size: 64)
!435 = !DISubroutineType(types: !436)
!436 = !{!104, !273, !321, !104}
!437 = !DIDerivedType(tag: DW_TAG_member, name: "i_sb", scope: !274, file: !199, line: 623, baseType: !438, size: 64, offset: 192)
!438 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !439, size: 64)
!439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "super_block", file: !199, line: 1416, size: 9472, elements: !440)
!440 = !{!441, !442, !443, !444, !445, !446, !496, !2120, !2208, !2291, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2307, !2311, !2312, !2315, !2316, !2319, !2320, !2321, !2362, !2389, !2390, !2391, !2392, !2393, !2394, !2397, !2399, !2406, !2407, !2409, !2410, !2411, !2470, !2471, !2486, !2487, !2488, !2489, !2490, !2493, !2494, !2495, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518}
!441 = !DIDerivedType(tag: DW_TAG_member, name: "s_list", scope: !439, file: !199, line: 1417, baseType: !47, size: 128)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "s_dev", scope: !439, file: !199, line: 1418, baseType: !354, size: 32, offset: 128)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "s_blocksize_bits", scope: !439, file: !199, line: 1419, baseType: !271, size: 8, offset: 160)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "s_blocksize", scope: !439, file: !199, line: 1420, baseType: !57, size: 64, offset: 192)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "s_maxbytes", scope: !439, file: !199, line: 1421, baseType: !372, size: 64, offset: 256)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "s_type", scope: !439, file: !199, line: 1422, baseType: !447, size: 64, offset: 320)
!447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !448, size: 64)
!448 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_system_type", file: !199, line: 2228, size: 576, elements: !449)
!449 = !{!450, !451, !452, !459, !463, !467, !471, !475, !476, !486, !489, !490, !491, !493, !494, !495}
!450 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !448, file: !199, line: 2229, baseType: !81, size: 64)
!451 = !DIDerivedType(tag: DW_TAG_member, name: "fs_flags", scope: !448, file: !199, line: 2230, baseType: !104, size: 32, offset: 64)
!452 = !DIDerivedType(tag: DW_TAG_member, name: "init_fs_context", scope: !448, file: !199, line: 2238, baseType: !453, size: 64, offset: 128)
!453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !454, size: 64)
!454 = !DISubroutineType(types: !455)
!455 = !{!104, !456}
!456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !457, size: 64)
!457 = !DICompositeType(tag: DW_TAG_structure_type, name: "fs_context", file: !458, line: 28, flags: DIFlagFwdDecl)
!458 = !DIFile(filename: "./include/linux/kernfs.h", directory: "/home/lizy2001/genbc/linux")
!459 = !DIDerivedType(tag: DW_TAG_member, name: "parameters", scope: !448, file: !199, line: 2239, baseType: !460, size: 64, offset: 192)
!460 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !461, size: 64)
!461 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !462)
!462 = !DICompositeType(tag: DW_TAG_structure_type, name: "fs_parameter_spec", file: !199, line: 70, flags: DIFlagFwdDecl)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "mount", scope: !448, file: !199, line: 2240, baseType: !464, size: 64, offset: 256)
!464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !465, size: 64)
!465 = !DISubroutineType(types: !466)
!466 = !{!228, !447, !104, !81, !64}
!467 = !DIDerivedType(tag: DW_TAG_member, name: "kill_sb", scope: !448, file: !199, line: 2242, baseType: !468, size: 64, offset: 320)
!468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !469, size: 64)
!469 = !DISubroutineType(types: !470)
!470 = !{null, !438}
!471 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !448, file: !199, line: 2243, baseType: !472, size: 64, offset: 384)
!472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !473, size: 64)
!473 = !DICompositeType(tag: DW_TAG_structure_type, name: "module", file: !474, line: 76, flags: DIFlagFwdDecl)
!474 = !DIFile(filename: "./arch/x86/include/asm/alternative.h", directory: "/home/lizy2001/genbc/linux")
!475 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !448, file: !199, line: 2244, baseType: !447, size: 64, offset: 448)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "fs_supers", scope: !448, file: !199, line: 2245, baseType: !477, size: 64, offset: 512)
!477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hlist_head", file: !21, line: 182, size: 64, elements: !478)
!478 = !{!479}
!479 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !477, file: !21, line: 183, baseType: !480, size: 64)
!480 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !481, size: 64)
!481 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hlist_node", file: !21, line: 186, size: 128, elements: !482)
!482 = !{!483, !484}
!483 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !481, file: !21, line: 187, baseType: !480, size: 64)
!484 = !DIDerivedType(tag: DW_TAG_member, name: "pprev", scope: !481, file: !21, line: 187, baseType: !485, size: 64, offset: 64)
!485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !480, size: 64)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "s_lock_key", scope: !448, file: !199, line: 2247, baseType: !487, offset: 576)
!487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lock_class_key", file: !488, line: 187, elements: !45)
!488 = !DIFile(filename: "./include/linux/lockdep_types.h", directory: "/home/lizy2001/genbc/linux")
!489 = !DIDerivedType(tag: DW_TAG_member, name: "s_umount_key", scope: !448, file: !199, line: 2248, baseType: !487, offset: 576)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "s_vfs_rename_key", scope: !448, file: !199, line: 2249, baseType: !487, offset: 576)
!491 = !DIDerivedType(tag: DW_TAG_member, name: "s_writers_key", scope: !448, file: !199, line: 2250, baseType: !492, offset: 576)
!492 = !DICompositeType(tag: DW_TAG_array_type, baseType: !487, elements: !121)
!493 = !DIDerivedType(tag: DW_TAG_member, name: "i_lock_key", scope: !448, file: !199, line: 2252, baseType: !487, offset: 576)
!494 = !DIDerivedType(tag: DW_TAG_member, name: "i_mutex_key", scope: !448, file: !199, line: 2253, baseType: !487, offset: 576)
!495 = !DIDerivedType(tag: DW_TAG_member, name: "i_mutex_dir_key", scope: !448, file: !199, line: 2254, baseType: !487, offset: 576)
!496 = !DIDerivedType(tag: DW_TAG_member, name: "s_op", scope: !439, file: !199, line: 1423, baseType: !497, size: 64, offset: 384)
!497 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !498, size: 64)
!498 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !499)
!499 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "super_operations", file: !199, line: 1935, size: 1472, elements: !500)
!500 = !{!501, !505, !509, !510, !514, !520, !524, !525, !526, !530, !534, !535, !536, !537, !543, !548, !549, !556, !557, !558, !559, !2104, !2119}
!501 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_inode", scope: !499, file: !199, line: 1936, baseType: !502, size: 64)
!502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !503, size: 64)
!503 = !DISubroutineType(types: !504)
!504 = !{!273, !438}
!505 = !DIDerivedType(tag: DW_TAG_member, name: "destroy_inode", scope: !499, file: !199, line: 1937, baseType: !506, size: 64, offset: 64)
!506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !507, size: 64)
!507 = !DISubroutineType(types: !508)
!508 = !{null, !273}
!509 = !DIDerivedType(tag: DW_TAG_member, name: "free_inode", scope: !499, file: !199, line: 1938, baseType: !506, size: 64, offset: 128)
!510 = !DIDerivedType(tag: DW_TAG_member, name: "dirty_inode", scope: !499, file: !199, line: 1940, baseType: !511, size: 64, offset: 192)
!511 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !512, size: 64)
!512 = !DISubroutineType(types: !513)
!513 = !{null, !273, !104}
!514 = !DIDerivedType(tag: DW_TAG_member, name: "write_inode", scope: !499, file: !199, line: 1941, baseType: !515, size: 64, offset: 256)
!515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !516, size: 64)
!516 = !DISubroutineType(types: !517)
!517 = !{!104, !273, !518}
!518 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !519, size: 64)
!519 = !DICompositeType(tag: DW_TAG_structure_type, name: "writeback_control", file: !199, line: 289, flags: DIFlagFwdDecl)
!520 = !DIDerivedType(tag: DW_TAG_member, name: "drop_inode", scope: !499, file: !199, line: 1942, baseType: !521, size: 64, offset: 320)
!521 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !522, size: 64)
!522 = !DISubroutineType(types: !523)
!523 = !{!104, !273}
!524 = !DIDerivedType(tag: DW_TAG_member, name: "evict_inode", scope: !499, file: !199, line: 1943, baseType: !506, size: 64, offset: 384)
!525 = !DIDerivedType(tag: DW_TAG_member, name: "put_super", scope: !499, file: !199, line: 1944, baseType: !468, size: 64, offset: 448)
!526 = !DIDerivedType(tag: DW_TAG_member, name: "sync_fs", scope: !499, file: !199, line: 1945, baseType: !527, size: 64, offset: 512)
!527 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !528, size: 64)
!528 = !DISubroutineType(types: !529)
!529 = !{!104, !438, !104}
!530 = !DIDerivedType(tag: DW_TAG_member, name: "freeze_super", scope: !499, file: !199, line: 1946, baseType: !531, size: 64, offset: 576)
!531 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !532, size: 64)
!532 = !DISubroutineType(types: !533)
!533 = !{!104, !438}
!534 = !DIDerivedType(tag: DW_TAG_member, name: "freeze_fs", scope: !499, file: !199, line: 1947, baseType: !531, size: 64, offset: 640)
!535 = !DIDerivedType(tag: DW_TAG_member, name: "thaw_super", scope: !499, file: !199, line: 1948, baseType: !531, size: 64, offset: 704)
!536 = !DIDerivedType(tag: DW_TAG_member, name: "unfreeze_fs", scope: !499, file: !199, line: 1949, baseType: !531, size: 64, offset: 768)
!537 = !DIDerivedType(tag: DW_TAG_member, name: "statfs", scope: !499, file: !199, line: 1950, baseType: !538, size: 64, offset: 832)
!538 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !539, size: 64)
!539 = !DISubroutineType(types: !540)
!540 = !{!104, !228, !541}
!541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !542, size: 64)
!542 = !DICompositeType(tag: DW_TAG_structure_type, name: "kstatfs", file: !199, line: 57, flags: DIFlagFwdDecl)
!543 = !DIDerivedType(tag: DW_TAG_member, name: "remount_fs", scope: !499, file: !199, line: 1951, baseType: !544, size: 64, offset: 896)
!544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !545, size: 64)
!545 = !DISubroutineType(types: !546)
!546 = !{!104, !438, !547, !120}
!547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !104, size: 64)
!548 = !DIDerivedType(tag: DW_TAG_member, name: "umount_begin", scope: !499, file: !199, line: 1952, baseType: !468, size: 64, offset: 960)
!549 = !DIDerivedType(tag: DW_TAG_member, name: "show_options", scope: !499, file: !199, line: 1954, baseType: !550, size: 64, offset: 1024)
!550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !551, size: 64)
!551 = !DISubroutineType(types: !552)
!552 = !{!104, !553, !228}
!553 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !554, size: 64)
!554 = !DICompositeType(tag: DW_TAG_structure_type, name: "seq_file", file: !555, line: 539, flags: DIFlagFwdDecl)
!555 = !DIFile(filename: "./arch/x86/include/asm/pgtable_types.h", directory: "/home/lizy2001/genbc/linux")
!556 = !DIDerivedType(tag: DW_TAG_member, name: "show_devname", scope: !499, file: !199, line: 1955, baseType: !550, size: 64, offset: 1088)
!557 = !DIDerivedType(tag: DW_TAG_member, name: "show_path", scope: !499, file: !199, line: 1956, baseType: !550, size: 64, offset: 1152)
!558 = !DIDerivedType(tag: DW_TAG_member, name: "show_stats", scope: !499, file: !199, line: 1957, baseType: !550, size: 64, offset: 1216)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "bdev_try_to_free_page", scope: !499, file: !199, line: 1963, baseType: !560, size: 64, offset: 1280)
!560 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !561, size: 64)
!561 = !DISubroutineType(types: !562)
!562 = !{!104, !438, !563, !69}
!563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !564, size: 64)
!564 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "page", file: !565, line: 68, size: 512, align: 128, elements: !566)
!565 = !DIFile(filename: "./include/linux/mm_types.h", directory: "/home/lizy2001/genbc/linux")
!566 = !{!567, !568, !2096, !2103}
!567 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !564, file: !565, line: 69, baseType: !57, size: 64)
!568 = !DIDerivedType(tag: DW_TAG_member, scope: !564, file: !565, line: 77, baseType: !569, size: 320, offset: 64)
!569 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !564, file: !565, line: 77, size: 320, elements: !570)
!570 = !{!571, !758, !763, !791, !799, !805, !2088, !2095}
!571 = !DIDerivedType(tag: DW_TAG_member, scope: !569, file: !565, line: 78, baseType: !572, size: 320)
!572 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !569, file: !565, line: 78, size: 320, elements: !573)
!573 = !{!574, !575, !756, !757}
!574 = !DIDerivedType(tag: DW_TAG_member, name: "lru", scope: !572, file: !565, line: 84, baseType: !47, size: 128)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "mapping", scope: !572, file: !565, line: 86, baseType: !576, size: 64, offset: 128)
!576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !577, size: 64)
!577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "address_space", file: !199, line: 451, size: 1216, align: 64, elements: !578)
!578 = !{!579, !580, !587, !588, !593, !608, !617, !618, !619, !620, !749, !750, !753, !754, !755}
!579 = !DIDerivedType(tag: DW_TAG_member, name: "host", scope: !577, file: !199, line: 452, baseType: !273, size: 64)
!580 = !DIDerivedType(tag: DW_TAG_member, name: "i_pages", scope: !577, file: !199, line: 453, baseType: !581, size: 128, offset: 64)
!581 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "xarray", file: !582, line: 292, size: 128, elements: !583)
!582 = !DIFile(filename: "./include/linux/xarray.h", directory: "/home/lizy2001/genbc/linux")
!583 = !{!584, !585, !586}
!584 = !DIDerivedType(tag: DW_TAG_member, name: "xa_lock", scope: !581, file: !582, line: 293, baseType: !31)
!585 = !DIDerivedType(tag: DW_TAG_member, name: "xa_flags", scope: !581, file: !582, line: 295, baseType: !69, size: 32)
!586 = !DIDerivedType(tag: DW_TAG_member, name: "xa_head", scope: !581, file: !582, line: 296, baseType: !64, size: 64, offset: 64)
!587 = !DIDerivedType(tag: DW_TAG_member, name: "gfp_mask", scope: !577, file: !199, line: 454, baseType: !69, size: 32, offset: 192)
!588 = !DIDerivedType(tag: DW_TAG_member, name: "i_mmap_writable", scope: !577, file: !199, line: 455, baseType: !589, size: 32, offset: 224)
!589 = !DIDerivedType(tag: DW_TAG_typedef, name: "atomic_t", file: !21, line: 168, baseType: !590)
!590 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !21, line: 166, size: 32, elements: !591)
!591 = !{!592}
!592 = !DIDerivedType(tag: DW_TAG_member, name: "counter", scope: !590, file: !21, line: 167, baseType: !104, size: 32)
!593 = !DIDerivedType(tag: DW_TAG_member, name: "i_mmap", scope: !577, file: !199, line: 460, baseType: !594, size: 128, offset: 256)
!594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rb_root_cached", file: !595, line: 125, size: 128, elements: !596)
!595 = !DIFile(filename: "./include/linux/rbtree.h", directory: "/home/lizy2001/genbc/linux")
!596 = !{!597, !607}
!597 = !DIDerivedType(tag: DW_TAG_member, name: "rb_root", scope: !594, file: !595, line: 126, baseType: !598, size: 64)
!598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rb_root", file: !595, line: 31, size: 64, elements: !599)
!599 = !{!600}
!600 = !DIDerivedType(tag: DW_TAG_member, name: "rb_node", scope: !598, file: !595, line: 32, baseType: !601, size: 64)
!601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !602, size: 64)
!602 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rb_node", file: !595, line: 24, size: 192, align: 64, elements: !603)
!603 = !{!604, !605, !606}
!604 = !DIDerivedType(tag: DW_TAG_member, name: "__rb_parent_color", scope: !602, file: !595, line: 25, baseType: !57, size: 64)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "rb_right", scope: !602, file: !595, line: 26, baseType: !601, size: 64, offset: 64)
!606 = !DIDerivedType(tag: DW_TAG_member, name: "rb_left", scope: !602, file: !595, line: 27, baseType: !601, size: 64, offset: 128)
!607 = !DIDerivedType(tag: DW_TAG_member, name: "rb_leftmost", scope: !594, file: !595, line: 127, baseType: !601, size: 64, offset: 64)
!608 = !DIDerivedType(tag: DW_TAG_member, name: "i_mmap_rwsem", scope: !577, file: !199, line: 461, baseType: !609, size: 256, offset: 384)
!609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rw_semaphore", file: !610, line: 35, size: 256, elements: !611)
!610 = !DIFile(filename: "./include/linux/rwsem.h", directory: "/home/lizy2001/genbc/linux")
!611 = !{!612, !613, !614, !616}
!612 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !609, file: !610, line: 36, baseType: !18, size: 64)
!613 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !609, file: !610, line: 42, baseType: !18, size: 64, offset: 64)
!614 = !DIDerivedType(tag: DW_TAG_member, name: "wait_lock", scope: !609, file: !610, line: 46, baseType: !615, offset: 128)
!615 = !DIDerivedType(tag: DW_TAG_typedef, name: "raw_spinlock_t", file: !32, line: 29, baseType: !39)
!616 = !DIDerivedType(tag: DW_TAG_member, name: "wait_list", scope: !609, file: !610, line: 47, baseType: !47, size: 128, offset: 128)
!617 = !DIDerivedType(tag: DW_TAG_member, name: "nrpages", scope: !577, file: !199, line: 462, baseType: !57, size: 64, offset: 640)
!618 = !DIDerivedType(tag: DW_TAG_member, name: "nrexceptional", scope: !577, file: !199, line: 463, baseType: !57, size: 64, offset: 704)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "writeback_index", scope: !577, file: !199, line: 464, baseType: !57, size: 64, offset: 768)
!620 = !DIDerivedType(tag: DW_TAG_member, name: "a_ops", scope: !577, file: !199, line: 465, baseType: !621, size: 64, offset: 832)
!621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !622, size: 64)
!622 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !623)
!623 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "address_space_operations", file: !199, line: 367, size: 1408, elements: !624)
!624 = !{!625, !629, !633, !637, !641, !645, !651, !657, !661, !666, !670, !674, !678, !706, !717, !723, !724, !725, !729, !734, !738, !745}
!625 = !DIDerivedType(tag: DW_TAG_member, name: "writepage", scope: !623, file: !199, line: 368, baseType: !626, size: 64)
!626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !627, size: 64)
!627 = !DISubroutineType(types: !628)
!628 = !{!104, !563, !518}
!629 = !DIDerivedType(tag: DW_TAG_member, name: "readpage", scope: !623, file: !199, line: 369, baseType: !630, size: 64, offset: 64)
!630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !631, size: 64)
!631 = !DISubroutineType(types: !632)
!632 = !{!104, !197, !563}
!633 = !DIDerivedType(tag: DW_TAG_member, name: "writepages", scope: !623, file: !199, line: 372, baseType: !634, size: 64, offset: 128)
!634 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !635, size: 64)
!635 = !DISubroutineType(types: !636)
!636 = !{!104, !576, !518}
!637 = !DIDerivedType(tag: DW_TAG_member, name: "set_page_dirty", scope: !623, file: !199, line: 375, baseType: !638, size: 64, offset: 192)
!638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !639, size: 64)
!639 = !DISubroutineType(types: !640)
!640 = !{!104, !563}
!641 = !DIDerivedType(tag: DW_TAG_member, name: "readpages", scope: !623, file: !199, line: 381, baseType: !642, size: 64, offset: 256)
!642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !643, size: 64)
!643 = !DISubroutineType(types: !644)
!644 = !{!104, !197, !576, !50, !70}
!645 = !DIDerivedType(tag: DW_TAG_member, name: "readahead", scope: !623, file: !199, line: 383, baseType: !646, size: 64, offset: 320)
!646 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !647, size: 64)
!647 = !DISubroutineType(types: !648)
!648 = !{null, !649}
!649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !650, size: 64)
!650 = !DICompositeType(tag: DW_TAG_structure_type, name: "readahead_control", file: !199, line: 290, flags: DIFlagFwdDecl)
!651 = !DIDerivedType(tag: DW_TAG_member, name: "write_begin", scope: !623, file: !199, line: 385, baseType: !652, size: 64, offset: 384)
!652 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !653, size: 64)
!653 = !DISubroutineType(types: !654)
!654 = !{!104, !197, !576, !372, !70, !70, !655, !656}
!655 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !563, size: 64)
!656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !64, size: 64)
!657 = !DIDerivedType(tag: DW_TAG_member, name: "write_end", scope: !623, file: !199, line: 388, baseType: !658, size: 64, offset: 448)
!658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !659, size: 64)
!659 = !DISubroutineType(types: !660)
!660 = !{!104, !197, !576, !372, !70, !70, !563, !64}
!661 = !DIDerivedType(tag: DW_TAG_member, name: "bmap", scope: !623, file: !199, line: 393, baseType: !662, size: 64, offset: 512)
!662 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !663, size: 64)
!663 = !DISubroutineType(types: !664)
!664 = !{!665, !576, !665}
!665 = !DIDerivedType(tag: DW_TAG_typedef, name: "sector_t", file: !21, line: 125, baseType: !265)
!666 = !DIDerivedType(tag: DW_TAG_member, name: "invalidatepage", scope: !623, file: !199, line: 394, baseType: !667, size: 64, offset: 576)
!667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !668, size: 64)
!668 = !DISubroutineType(types: !669)
!669 = !{null, !563, !70, !70}
!670 = !DIDerivedType(tag: DW_TAG_member, name: "releasepage", scope: !623, file: !199, line: 395, baseType: !671, size: 64, offset: 640)
!671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !672, size: 64)
!672 = !DISubroutineType(types: !673)
!673 = !{!104, !563, !69}
!674 = !DIDerivedType(tag: DW_TAG_member, name: "freepage", scope: !623, file: !199, line: 396, baseType: !675, size: 64, offset: 704)
!675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !676, size: 64)
!676 = !DISubroutineType(types: !677)
!677 = !{null, !563}
!678 = !DIDerivedType(tag: DW_TAG_member, name: "direct_IO", scope: !623, file: !199, line: 397, baseType: !679, size: 64, offset: 768)
!679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !680, size: 64)
!680 = !DISubroutineType(types: !681)
!681 = !{!151, !682, !704}
!682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !683, size: 64)
!683 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kiocb", file: !199, line: 320, size: 384, elements: !684)
!684 = !{!685, !686, !687, !691, !692, !693, !696, !697}
!685 = !DIDerivedType(tag: DW_TAG_member, name: "ki_filp", scope: !683, file: !199, line: 321, baseType: !197, size: 64)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "ki_pos", scope: !683, file: !199, line: 326, baseType: !372, size: 64, offset: 64)
!687 = !DIDerivedType(tag: DW_TAG_member, name: "ki_complete", scope: !683, file: !199, line: 327, baseType: !688, size: 64, offset: 128)
!688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !689, size: 64)
!689 = !DISubroutineType(types: !690)
!690 = !{null, !682, !155, !155}
!691 = !DIDerivedType(tag: DW_TAG_member, name: "private", scope: !683, file: !199, line: 328, baseType: !64, size: 64, offset: 192)
!692 = !DIDerivedType(tag: DW_TAG_member, name: "ki_flags", scope: !683, file: !199, line: 329, baseType: !104, size: 32, offset: 256)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "ki_hint", scope: !683, file: !199, line: 330, baseType: !694, size: 16, offset: 288)
!694 = !DIDerivedType(tag: DW_TAG_typedef, name: "u16", file: !26, line: 19, baseType: !695)
!695 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u16", file: !28, line: 24, baseType: !162)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "ki_ioprio", scope: !683, file: !199, line: 331, baseType: !694, size: 16, offset: 304)
!697 = !DIDerivedType(tag: DW_TAG_member, scope: !683, file: !199, line: 332, baseType: !698, size: 64, offset: 320)
!698 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !683, file: !199, line: 332, size: 64, elements: !699)
!699 = !{!700, !701}
!700 = !DIDerivedType(tag: DW_TAG_member, name: "ki_cookie", scope: !698, file: !199, line: 333, baseType: !70, size: 32)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "ki_waitq", scope: !698, file: !199, line: 334, baseType: !702, size: 64)
!702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !703, size: 64)
!703 = !DICompositeType(tag: DW_TAG_structure_type, name: "wait_page_queue", file: !199, line: 334, flags: DIFlagFwdDecl)
!704 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !705, size: 64)
!705 = !DICompositeType(tag: DW_TAG_structure_type, name: "iov_iter", file: !199, line: 64, flags: DIFlagFwdDecl)
!706 = !DIDerivedType(tag: DW_TAG_member, name: "migratepage", scope: !623, file: !199, line: 402, baseType: !707, size: 64, offset: 832)
!707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !708, size: 64)
!708 = !DISubroutineType(types: !709)
!709 = !{!104, !576, !563, !563, !710}
!710 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "migrate_mode", file: !711, line: 15, baseType: !70, size: 32, elements: !712)
!711 = !DIFile(filename: "./include/linux/migrate_mode.h", directory: "/home/lizy2001/genbc/linux")
!712 = !{!713, !714, !715, !716}
!713 = !DIEnumerator(name: "MIGRATE_ASYNC", value: 0, isUnsigned: true)
!714 = !DIEnumerator(name: "MIGRATE_SYNC_LIGHT", value: 1, isUnsigned: true)
!715 = !DIEnumerator(name: "MIGRATE_SYNC", value: 2, isUnsigned: true)
!716 = !DIEnumerator(name: "MIGRATE_SYNC_NO_COPY", value: 3, isUnsigned: true)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "isolate_page", scope: !623, file: !199, line: 404, baseType: !718, size: 64, offset: 896)
!718 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !719, size: 64)
!719 = !DISubroutineType(types: !720)
!720 = !{!331, !563, !721}
!721 = !DIDerivedType(tag: DW_TAG_typedef, name: "isolate_mode_t", file: !722, line: 305, baseType: !70)
!722 = !DIFile(filename: "./include/linux/mmzone.h", directory: "/home/lizy2001/genbc/linux")
!723 = !DIDerivedType(tag: DW_TAG_member, name: "putback_page", scope: !623, file: !199, line: 405, baseType: !675, size: 64, offset: 960)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "launder_page", scope: !623, file: !199, line: 406, baseType: !638, size: 64, offset: 1024)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "is_partially_uptodate", scope: !623, file: !199, line: 407, baseType: !726, size: 64, offset: 1088)
!726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !727, size: 64)
!727 = !DISubroutineType(types: !728)
!728 = !{!104, !563, !57, !57}
!729 = !DIDerivedType(tag: DW_TAG_member, name: "is_dirty_writeback", scope: !623, file: !199, line: 409, baseType: !730, size: 64, offset: 1152)
!730 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !731, size: 64)
!731 = !DISubroutineType(types: !732)
!732 = !{null, !563, !733, !733}
!733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !331, size: 64)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "error_remove_page", scope: !623, file: !199, line: 410, baseType: !735, size: 64, offset: 1216)
!735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !736, size: 64)
!736 = !DISubroutineType(types: !737)
!737 = !{!104, !576, !563}
!738 = !DIDerivedType(tag: DW_TAG_member, name: "swap_activate", scope: !623, file: !199, line: 413, baseType: !739, size: 64, offset: 1280)
!739 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !740, size: 64)
!740 = !DISubroutineType(types: !741)
!741 = !{!104, !742, !197, !744}
!742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !743, size: 64)
!743 = !DICompositeType(tag: DW_TAG_structure_type, name: "swap_info_struct", file: !199, line: 61, flags: DIFlagFwdDecl)
!744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !665, size: 64)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "swap_deactivate", scope: !623, file: !199, line: 415, baseType: !746, size: 64, offset: 1344)
!746 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !747, size: 64)
!747 = !DISubroutineType(types: !748)
!748 = !{null, !197}
!749 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !577, file: !199, line: 466, baseType: !57, size: 64, offset: 896)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "wb_err", scope: !577, file: !199, line: 467, baseType: !751, size: 32, offset: 960)
!751 = !DIDerivedType(tag: DW_TAG_typedef, name: "errseq_t", file: !752, line: 8, baseType: !261)
!752 = !DIFile(filename: "./include/linux/errseq.h", directory: "/home/lizy2001/genbc/linux")
!753 = !DIDerivedType(tag: DW_TAG_member, name: "private_lock", scope: !577, file: !199, line: 468, baseType: !31, offset: 992)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "private_list", scope: !577, file: !199, line: 469, baseType: !47, size: 128, offset: 1024)
!755 = !DIDerivedType(tag: DW_TAG_member, name: "private_data", scope: !577, file: !199, line: 470, baseType: !64, size: 64, offset: 1152)
!756 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !572, file: !565, line: 87, baseType: !57, size: 64, offset: 192)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "private", scope: !572, file: !565, line: 94, baseType: !57, size: 64, offset: 256)
!758 = !DIDerivedType(tag: DW_TAG_member, scope: !569, file: !565, line: 96, baseType: !759, size: 64)
!759 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !569, file: !565, line: 96, size: 64, elements: !760)
!760 = !{!761}
!761 = !DIDerivedType(tag: DW_TAG_member, name: "dma_addr", scope: !759, file: !565, line: 101, baseType: !762, size: 64)
!762 = !DIDerivedType(tag: DW_TAG_typedef, name: "dma_addr_t", file: !21, line: 143, baseType: !265)
!763 = !DIDerivedType(tag: DW_TAG_member, scope: !569, file: !565, line: 103, baseType: !764, size: 320)
!764 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !569, file: !565, line: 103, size: 320, elements: !765)
!765 = !{!766, !776, !779, !780}
!766 = !DIDerivedType(tag: DW_TAG_member, scope: !764, file: !565, line: 104, baseType: !767, size: 128)
!767 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !764, file: !565, line: 104, size: 128, elements: !768)
!768 = !{!769, !770}
!769 = !DIDerivedType(tag: DW_TAG_member, name: "slab_list", scope: !767, file: !565, line: 105, baseType: !47, size: 128)
!770 = !DIDerivedType(tag: DW_TAG_member, scope: !767, file: !565, line: 106, baseType: !771, size: 128)
!771 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !767, file: !565, line: 106, size: 128, elements: !772)
!772 = !{!773, !774, !775}
!773 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !771, file: !565, line: 107, baseType: !563, size: 64)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "pages", scope: !771, file: !565, line: 109, baseType: !104, size: 32, offset: 64)
!775 = !DIDerivedType(tag: DW_TAG_member, name: "pobjects", scope: !771, file: !565, line: 110, baseType: !104, size: 32, offset: 96)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "slab_cache", scope: !764, file: !565, line: 117, baseType: !777, size: 64, offset: 128)
!777 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !778, size: 64)
!778 = !DICompositeType(tag: DW_TAG_structure_type, name: "kmem_cache", file: !565, line: 117, flags: DIFlagFwdDecl)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "freelist", scope: !764, file: !565, line: 119, baseType: !64, size: 64, offset: 192)
!780 = !DIDerivedType(tag: DW_TAG_member, scope: !764, file: !565, line: 120, baseType: !781, size: 64, offset: 256)
!781 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !764, file: !565, line: 120, size: 64, elements: !782)
!782 = !{!783, !784, !785}
!783 = !DIDerivedType(tag: DW_TAG_member, name: "s_mem", scope: !781, file: !565, line: 121, baseType: !64, size: 64)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "counters", scope: !781, file: !565, line: 122, baseType: !57, size: 64)
!785 = !DIDerivedType(tag: DW_TAG_member, scope: !781, file: !565, line: 123, baseType: !786, size: 32)
!786 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !781, file: !565, line: 123, size: 32, elements: !787)
!787 = !{!788, !789, !790}
!788 = !DIDerivedType(tag: DW_TAG_member, name: "inuse", scope: !786, file: !565, line: 124, baseType: !70, size: 16, flags: DIFlagBitField, extraData: i64 0)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !786, file: !565, line: 125, baseType: !70, size: 15, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!790 = !DIDerivedType(tag: DW_TAG_member, name: "frozen", scope: !786, file: !565, line: 126, baseType: !70, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!791 = !DIDerivedType(tag: DW_TAG_member, scope: !569, file: !565, line: 130, baseType: !792, size: 192)
!792 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !569, file: !565, line: 130, size: 192, elements: !793)
!793 = !{!794, !795, !796, !797, !798}
!794 = !DIDerivedType(tag: DW_TAG_member, name: "compound_head", scope: !792, file: !565, line: 131, baseType: !57, size: 64)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "compound_dtor", scope: !792, file: !565, line: 134, baseType: !271, size: 8, offset: 64)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "compound_order", scope: !792, file: !565, line: 135, baseType: !271, size: 8, offset: 72)
!797 = !DIDerivedType(tag: DW_TAG_member, name: "compound_mapcount", scope: !792, file: !565, line: 136, baseType: !589, size: 32, offset: 96)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "compound_nr", scope: !792, file: !565, line: 137, baseType: !70, size: 32, offset: 128)
!799 = !DIDerivedType(tag: DW_TAG_member, scope: !569, file: !565, line: 139, baseType: !800, size: 256)
!800 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !569, file: !565, line: 139, size: 256, elements: !801)
!801 = !{!802, !803, !804}
!802 = !DIDerivedType(tag: DW_TAG_member, name: "_compound_pad_1", scope: !800, file: !565, line: 140, baseType: !57, size: 64)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "hpage_pinned_refcount", scope: !800, file: !565, line: 141, baseType: !589, size: 32, offset: 64)
!804 = !DIDerivedType(tag: DW_TAG_member, name: "deferred_list", scope: !800, file: !565, line: 143, baseType: !47, size: 128, offset: 128)
!805 = !DIDerivedType(tag: DW_TAG_member, scope: !569, file: !565, line: 145, baseType: !806, size: 256)
!806 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !569, file: !565, line: 145, size: 256, elements: !807)
!807 = !{!808, !809, !811, !812, !2087}
!808 = !DIDerivedType(tag: DW_TAG_member, name: "_pt_pad_1", scope: !806, file: !565, line: 146, baseType: !57, size: 64)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "pmd_huge_pte", scope: !806, file: !565, line: 147, baseType: !810, size: 64, offset: 64)
!810 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgtable_t", file: !555, line: 509, baseType: !563)
!811 = !DIDerivedType(tag: DW_TAG_member, name: "_pt_pad_2", scope: !806, file: !565, line: 148, baseType: !57, size: 64, offset: 128)
!812 = !DIDerivedType(tag: DW_TAG_member, scope: !806, file: !565, line: 149, baseType: !813, size: 64, offset: 192)
!813 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !806, file: !565, line: 149, size: 64, elements: !814)
!814 = !{!815, !2086}
!815 = !DIDerivedType(tag: DW_TAG_member, name: "pt_mm", scope: !813, file: !565, line: 150, baseType: !816, size: 64)
!816 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !817, size: 64)
!817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mm_struct", file: !565, line: 388, size: 7296, elements: !818)
!818 = !{!819, !2082}
!819 = !DIDerivedType(tag: DW_TAG_member, scope: !817, file: !565, line: 389, baseType: !820, size: 7296)
!820 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !817, file: !565, line: 389, size: 7296, elements: !821)
!821 = !{!822, !860, !861, !862, !866, !867, !868, !869, !870, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !911, !919, !922, !946, !947, !2066, !2067, !2070, !2071, !2072, !2075, !2076, !2077, !2080, !2081}
!822 = !DIDerivedType(tag: DW_TAG_member, name: "mmap", scope: !820, file: !565, line: 390, baseType: !823, size: 64)
!823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !824, size: 64)
!824 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vm_area_struct", file: !565, line: 305, size: 1472, elements: !825)
!825 = !{!826, !827, !828, !829, !830, !831, !832, !833, !840, !841, !846, !847, !850, !854, !855, !856, !857, !858}
!826 = !DIDerivedType(tag: DW_TAG_member, name: "vm_start", scope: !824, file: !565, line: 308, baseType: !57, size: 64)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "vm_end", scope: !824, file: !565, line: 309, baseType: !57, size: 64, offset: 64)
!828 = !DIDerivedType(tag: DW_TAG_member, name: "vm_next", scope: !824, file: !565, line: 313, baseType: !823, size: 64, offset: 128)
!829 = !DIDerivedType(tag: DW_TAG_member, name: "vm_prev", scope: !824, file: !565, line: 313, baseType: !823, size: 64, offset: 192)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "vm_rb", scope: !824, file: !565, line: 315, baseType: !602, size: 192, align: 64, offset: 256)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "rb_subtree_gap", scope: !824, file: !565, line: 323, baseType: !57, size: 64, offset: 448)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "vm_mm", scope: !824, file: !565, line: 327, baseType: !816, size: 64, offset: 512)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "vm_page_prot", scope: !824, file: !565, line: 333, baseType: !834, size: 64, offset: 576)
!834 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgprot_t", file: !555, line: 284, baseType: !835)
!835 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pgprot", file: !555, line: 284, size: 64, elements: !836)
!836 = !{!837}
!837 = !DIDerivedType(tag: DW_TAG_member, name: "pgprot", scope: !835, file: !555, line: 284, baseType: !838, size: 64)
!838 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgprotval_t", file: !839, line: 19, baseType: !57)
!839 = !DIFile(filename: "./arch/x86/include/asm/pgtable_64_types.h", directory: "/home/lizy2001/genbc/linux")
!840 = !DIDerivedType(tag: DW_TAG_member, name: "vm_flags", scope: !824, file: !565, line: 334, baseType: !57, size: 64, offset: 640)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "shared", scope: !824, file: !565, line: 343, baseType: !842, size: 256, offset: 704)
!842 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !824, file: !565, line: 340, size: 256, elements: !843)
!843 = !{!844, !845}
!844 = !DIDerivedType(tag: DW_TAG_member, name: "rb", scope: !842, file: !565, line: 341, baseType: !602, size: 192, align: 64)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "rb_subtree_last", scope: !842, file: !565, line: 342, baseType: !57, size: 64, offset: 192)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "anon_vma_chain", scope: !824, file: !565, line: 351, baseType: !47, size: 128, offset: 960)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "anon_vma", scope: !824, file: !565, line: 353, baseType: !848, size: 64, offset: 1088)
!848 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !849, size: 64)
!849 = !DICompositeType(tag: DW_TAG_structure_type, name: "anon_vma", file: !565, line: 353, flags: DIFlagFwdDecl)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "vm_ops", scope: !824, file: !565, line: 356, baseType: !851, size: 64, offset: 1152)
!851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !852, size: 64)
!852 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !853)
!853 = !DICompositeType(tag: DW_TAG_structure_type, name: "vm_operations_struct", file: !565, line: 356, flags: DIFlagFwdDecl)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "vm_pgoff", scope: !824, file: !565, line: 359, baseType: !57, size: 64, offset: 1216)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "vm_file", scope: !824, file: !565, line: 361, baseType: !197, size: 64, offset: 1280)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "vm_private_data", scope: !824, file: !565, line: 362, baseType: !64, size: 64, offset: 1344)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "swap_readahead_info", scope: !824, file: !565, line: 365, baseType: !18, size: 64, offset: 1408)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "vm_userfaultfd_ctx", scope: !824, file: !565, line: 373, baseType: !859, offset: 1472)
!859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vm_userfaultfd_ctx", file: !565, line: 296, elements: !45)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "mm_rb", scope: !820, file: !565, line: 391, baseType: !598, size: 64, offset: 64)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "vmacache_seqnum", scope: !820, file: !565, line: 392, baseType: !265, size: 64, offset: 128)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "get_unmapped_area", scope: !820, file: !565, line: 394, baseType: !863, size: 64, offset: 192)
!863 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !864, size: 64)
!864 = !DISubroutineType(types: !865)
!865 = !{!57, !197, !57, !57, !57, !57}
!866 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_base", scope: !820, file: !565, line: 398, baseType: !57, size: 64, offset: 256)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_legacy_base", scope: !820, file: !565, line: 399, baseType: !57, size: 64, offset: 320)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "task_size", scope: !820, file: !565, line: 405, baseType: !57, size: 64, offset: 384)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "highest_vm_end", scope: !820, file: !565, line: 406, baseType: !57, size: 64, offset: 448)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "pgd", scope: !820, file: !565, line: 407, baseType: !871, size: 64, offset: 512)
!871 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !872, size: 64)
!872 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgd_t", file: !555, line: 286, baseType: !873)
!873 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !555, line: 286, size: 64, elements: !874)
!874 = !{!875}
!875 = !DIDerivedType(tag: DW_TAG_member, name: "pgd", scope: !873, file: !555, line: 286, baseType: !876, size: 64)
!876 = !DIDerivedType(tag: DW_TAG_typedef, name: "pgdval_t", file: !839, line: 18, baseType: !57)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "membarrier_state", scope: !820, file: !565, line: 416, baseType: !589, size: 32, offset: 576)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "mm_users", scope: !820, file: !565, line: 428, baseType: !589, size: 32, offset: 608)
!879 = !DIDerivedType(tag: DW_TAG_member, name: "mm_count", scope: !820, file: !565, line: 437, baseType: !589, size: 32, offset: 640)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "has_pinned", scope: !820, file: !565, line: 447, baseType: !589, size: 32, offset: 672)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "pgtables_bytes", scope: !820, file: !565, line: 450, baseType: !18, size: 64, offset: 704)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "map_count", scope: !820, file: !565, line: 452, baseType: !104, size: 32, offset: 768)
!883 = !DIDerivedType(tag: DW_TAG_member, name: "page_table_lock", scope: !820, file: !565, line: 454, baseType: !31, offset: 800)
!884 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_lock", scope: !820, file: !565, line: 457, baseType: !609, size: 256, offset: 832)
!885 = !DIDerivedType(tag: DW_TAG_member, name: "mmlist", scope: !820, file: !565, line: 459, baseType: !47, size: 128, offset: 1088)
!886 = !DIDerivedType(tag: DW_TAG_member, name: "hiwater_rss", scope: !820, file: !565, line: 466, baseType: !57, size: 64, offset: 1216)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "hiwater_vm", scope: !820, file: !565, line: 467, baseType: !57, size: 64, offset: 1280)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "total_vm", scope: !820, file: !565, line: 469, baseType: !57, size: 64, offset: 1344)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "locked_vm", scope: !820, file: !565, line: 470, baseType: !57, size: 64, offset: 1408)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "pinned_vm", scope: !820, file: !565, line: 471, baseType: !20, size: 64, offset: 1472)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "data_vm", scope: !820, file: !565, line: 472, baseType: !57, size: 64, offset: 1536)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "exec_vm", scope: !820, file: !565, line: 473, baseType: !57, size: 64, offset: 1600)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "stack_vm", scope: !820, file: !565, line: 474, baseType: !57, size: 64, offset: 1664)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "def_flags", scope: !820, file: !565, line: 475, baseType: !57, size: 64, offset: 1728)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "arg_lock", scope: !820, file: !565, line: 477, baseType: !31, offset: 1792)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "start_code", scope: !820, file: !565, line: 478, baseType: !57, size: 64, offset: 1792)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "end_code", scope: !820, file: !565, line: 478, baseType: !57, size: 64, offset: 1856)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "start_data", scope: !820, file: !565, line: 478, baseType: !57, size: 64, offset: 1920)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "end_data", scope: !820, file: !565, line: 478, baseType: !57, size: 64, offset: 1984)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "start_brk", scope: !820, file: !565, line: 479, baseType: !57, size: 64, offset: 2048)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "brk", scope: !820, file: !565, line: 479, baseType: !57, size: 64, offset: 2112)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "start_stack", scope: !820, file: !565, line: 479, baseType: !57, size: 64, offset: 2176)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "arg_start", scope: !820, file: !565, line: 480, baseType: !57, size: 64, offset: 2240)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "arg_end", scope: !820, file: !565, line: 480, baseType: !57, size: 64, offset: 2304)
!905 = !DIDerivedType(tag: DW_TAG_member, name: "env_start", scope: !820, file: !565, line: 480, baseType: !57, size: 64, offset: 2368)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "env_end", scope: !820, file: !565, line: 480, baseType: !57, size: 64, offset: 2432)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "saved_auxv", scope: !820, file: !565, line: 482, baseType: !908, size: 2816, offset: 2496)
!908 = !DICompositeType(tag: DW_TAG_array_type, baseType: !57, size: 2816, elements: !909)
!909 = !{!910}
!910 = !DISubrange(count: 44)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "rss_stat", scope: !820, file: !565, line: 488, baseType: !912, size: 256, offset: 5312)
!912 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mm_rss_stat", file: !913, line: 60, size: 256, elements: !914)
!913 = !DIFile(filename: "./include/linux/mm_types_task.h", directory: "/home/lizy2001/genbc/linux")
!914 = !{!915}
!915 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !912, file: !913, line: 61, baseType: !916, size: 256)
!916 = !DICompositeType(tag: DW_TAG_array_type, baseType: !18, size: 256, elements: !917)
!917 = !{!918}
!918 = !DISubrange(count: 4)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "binfmt", scope: !820, file: !565, line: 490, baseType: !920, size: 64, offset: 5568)
!920 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !921, size: 64)
!921 = !DICompositeType(tag: DW_TAG_structure_type, name: "linux_binfmt", file: !565, line: 490, flags: DIFlagFwdDecl)
!922 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !820, file: !565, line: 493, baseType: !923, size: 896, offset: 5632)
!923 = !DIDerivedType(tag: DW_TAG_typedef, name: "mm_context_t", file: !924, line: 53, baseType: !925)
!924 = !DIFile(filename: "./arch/x86/include/asm/mmu.h", directory: "/home/lizy2001/genbc/linux")
!925 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !924, line: 13, size: 896, elements: !926)
!926 = !{!927, !928, !929, !930, !933, !934, !935, !936, !940, !941, !942}
!927 = !DIDerivedType(tag: DW_TAG_member, name: "ctx_id", scope: !925, file: !924, line: 18, baseType: !265, size: 64)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "tlb_gen", scope: !925, file: !924, line: 28, baseType: !20, size: 64, offset: 64)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "ldt_usr_sem", scope: !925, file: !924, line: 31, baseType: !609, size: 256, offset: 128)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "ldt", scope: !925, file: !924, line: 32, baseType: !931, size: 64, offset: 384)
!931 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !932, size: 64)
!932 = !DICompositeType(tag: DW_TAG_structure_type, name: "ldt_struct", file: !924, line: 32, flags: DIFlagFwdDecl)
!933 = !DIDerivedType(tag: DW_TAG_member, name: "ia32_compat", scope: !925, file: !924, line: 37, baseType: !162, size: 16, offset: 448)
!934 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !925, file: !924, line: 40, baseType: !14, size: 192, offset: 512)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "vdso", scope: !925, file: !924, line: 41, baseType: !64, size: 64, offset: 704)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "vdso_image", scope: !925, file: !924, line: 42, baseType: !937, size: 64, offset: 768)
!937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !938, size: 64)
!938 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !939)
!939 = !DICompositeType(tag: DW_TAG_structure_type, name: "vdso_image", file: !924, line: 42, flags: DIFlagFwdDecl)
!940 = !DIDerivedType(tag: DW_TAG_member, name: "perf_rdpmc_allowed", scope: !925, file: !924, line: 44, baseType: !589, size: 32, offset: 832)
!941 = !DIDerivedType(tag: DW_TAG_member, name: "pkey_allocation_map", scope: !925, file: !924, line: 50, baseType: !694, size: 16, offset: 864)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "execute_only_pkey", scope: !925, file: !924, line: 51, baseType: !943, size: 16, offset: 880)
!943 = !DIDerivedType(tag: DW_TAG_typedef, name: "s16", file: !26, line: 18, baseType: !944)
!944 = !DIDerivedType(tag: DW_TAG_typedef, name: "__s16", file: !28, line: 23, baseType: !945)
!945 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!946 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !820, file: !565, line: 495, baseType: !57, size: 64, offset: 6528)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "core_state", scope: !820, file: !565, line: 497, baseType: !948, size: 64, offset: 6592)
!948 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !949, size: 64)
!949 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "core_state", file: !565, line: 381, size: 384, elements: !950)
!950 = !{!951, !952, !2065}
!951 = !DIDerivedType(tag: DW_TAG_member, name: "nr_threads", scope: !949, file: !565, line: 382, baseType: !589, size: 32)
!952 = !DIDerivedType(tag: DW_TAG_member, name: "dumper", scope: !949, file: !565, line: 383, baseType: !953, size: 128, offset: 64)
!953 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "core_thread", file: !565, line: 376, size: 128, elements: !954)
!954 = !{!955, !2063}
!955 = !DIDerivedType(tag: DW_TAG_member, name: "task", scope: !953, file: !565, line: 377, baseType: !956, size: 64)
!956 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !957, size: 64)
!957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "task_struct", file: !958, line: 640, size: 48640, elements: !959)
!958 = !DIFile(filename: "./include/linux/sched.h", directory: "/home/lizy2001/genbc/linux")
!959 = !{!960, !966, !968, !969, !975, !976, !977, !978, !979, !980, !981, !982, !986, !1004, !1015, !1105, !1106, !1107, !1118, !1119, !1121, !1122, !1123, !1124, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1209, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1248, !1250, !1251, !1252, !1264, !1265, !1266, !1267, !1268, !1269, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1293, !1298, !1482, !1483, !1484, !1485, !1489, !1492, !1495, !1498, !1501, !1504, !1605, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1651, !1652, !1653, !1654, !1655, !1660, !1661, !1662, !1665, !1666, !1669, !1672, !1675, !1678, !1721, !1724, !1725, !1804, !1805, !1808, !1809, !1812, !1813, !1814, !1818, !1819, !1820, !1833, !1834, !1835, !1845, !1850, !1853, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890}
!960 = !DIDerivedType(tag: DW_TAG_member, name: "thread_info", scope: !957, file: !958, line: 646, baseType: !961, size: 128)
!961 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "thread_info", file: !962, line: 56, size: 128, elements: !963)
!962 = !DIFile(filename: "./arch/x86/include/asm/thread_info.h", directory: "/home/lizy2001/genbc/linux")
!963 = !{!964, !965}
!964 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !961, file: !962, line: 57, baseType: !57, size: 64)
!965 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !961, file: !962, line: 58, baseType: !261, size: 32, offset: 64)
!966 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !957, file: !958, line: 649, baseType: !967, size: 64, offset: 128)
!967 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !155)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "stack", scope: !957, file: !958, line: 657, baseType: !64, size: 64, offset: 192)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !957, file: !958, line: 658, baseType: !970, size: 32, offset: 256)
!970 = !DIDerivedType(tag: DW_TAG_typedef, name: "refcount_t", file: !971, line: 113, baseType: !972)
!971 = !DIFile(filename: "./include/linux/refcount.h", directory: "/home/lizy2001/genbc/linux")
!972 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "refcount_struct", file: !971, line: 111, size: 32, elements: !973)
!973 = !{!974}
!974 = !DIDerivedType(tag: DW_TAG_member, name: "refs", scope: !972, file: !971, line: 112, baseType: !589, size: 32)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !957, file: !958, line: 660, baseType: !70, size: 32, offset: 288)
!976 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace", scope: !957, file: !958, line: 661, baseType: !70, size: 32, offset: 320)
!977 = !DIDerivedType(tag: DW_TAG_member, name: "on_rq", scope: !957, file: !958, line: 684, baseType: !104, size: 32, offset: 352)
!978 = !DIDerivedType(tag: DW_TAG_member, name: "prio", scope: !957, file: !958, line: 686, baseType: !104, size: 32, offset: 384)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "static_prio", scope: !957, file: !958, line: 687, baseType: !104, size: 32, offset: 416)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "normal_prio", scope: !957, file: !958, line: 688, baseType: !104, size: 32, offset: 448)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "rt_priority", scope: !957, file: !958, line: 689, baseType: !70, size: 32, offset: 480)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "sched_class", scope: !957, file: !958, line: 691, baseType: !983, size: 64, offset: 512)
!983 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !984, size: 64)
!984 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !985)
!985 = !DICompositeType(tag: DW_TAG_structure_type, name: "sched_class", file: !958, line: 691, flags: DIFlagFwdDecl)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "se", scope: !957, file: !958, line: 692, baseType: !987, size: 832, offset: 576)
!987 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_entity", file: !958, line: 451, size: 832, elements: !988)
!988 = !{!989, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002}
!989 = !DIDerivedType(tag: DW_TAG_member, name: "load", scope: !987, file: !958, line: 453, baseType: !990, size: 128)
!990 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "load_weight", file: !958, line: 325, size: 128, elements: !991)
!991 = !{!992, !993}
!992 = !DIDerivedType(tag: DW_TAG_member, name: "weight", scope: !990, file: !958, line: 326, baseType: !57, size: 64)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "inv_weight", scope: !990, file: !958, line: 327, baseType: !261, size: 32, offset: 64)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "run_node", scope: !987, file: !958, line: 454, baseType: !602, size: 192, align: 64, offset: 128)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "group_node", scope: !987, file: !958, line: 455, baseType: !47, size: 128, offset: 320)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "on_rq", scope: !987, file: !958, line: 456, baseType: !70, size: 32, offset: 448)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "exec_start", scope: !987, file: !958, line: 458, baseType: !265, size: 64, offset: 512)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "sum_exec_runtime", scope: !987, file: !958, line: 459, baseType: !265, size: 64, offset: 576)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "vruntime", scope: !987, file: !958, line: 460, baseType: !265, size: 64, offset: 640)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "prev_sum_exec_runtime", scope: !987, file: !958, line: 461, baseType: !265, size: 64, offset: 704)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "nr_migrations", scope: !987, file: !958, line: 463, baseType: !265, size: 64, offset: 768)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "statistics", scope: !987, file: !958, line: 465, baseType: !1003, offset: 832)
!1003 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_statistics", file: !958, line: 415, elements: !45)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "rt", scope: !957, file: !958, line: 693, baseType: !1005, size: 384, offset: 1408)
!1005 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_rt_entity", file: !958, line: 489, size: 384, elements: !1006)
!1006 = !{!1007, !1008, !1009, !1010, !1011, !1012, !1013}
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "run_list", scope: !1005, file: !958, line: 490, baseType: !47, size: 128)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "timeout", scope: !1005, file: !958, line: 491, baseType: !57, size: 64, offset: 128)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "watchdog_stamp", scope: !1005, file: !958, line: 492, baseType: !57, size: 64, offset: 192)
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "time_slice", scope: !1005, file: !958, line: 493, baseType: !70, size: 32, offset: 256)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "on_rq", scope: !1005, file: !958, line: 494, baseType: !162, size: 16, offset: 288)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "on_list", scope: !1005, file: !958, line: 495, baseType: !162, size: 16, offset: 304)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "back", scope: !1005, file: !958, line: 497, baseType: !1014, size: 64, offset: 320)
!1014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1005, size: 64)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "dl", scope: !957, file: !958, line: 697, baseType: !1016, size: 1792, offset: 1792)
!1016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_dl_entity", file: !958, line: 507, size: 1792, elements: !1017)
!1017 = !{!1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1102, !1103}
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "rb_node", scope: !1016, file: !958, line: 508, baseType: !602, size: 192, align: 64)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "dl_runtime", scope: !1016, file: !958, line: 515, baseType: !265, size: 64, offset: 192)
!1020 = !DIDerivedType(tag: DW_TAG_member, name: "dl_deadline", scope: !1016, file: !958, line: 516, baseType: !265, size: 64, offset: 256)
!1021 = !DIDerivedType(tag: DW_TAG_member, name: "dl_period", scope: !1016, file: !958, line: 517, baseType: !265, size: 64, offset: 320)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "dl_bw", scope: !1016, file: !958, line: 518, baseType: !265, size: 64, offset: 384)
!1023 = !DIDerivedType(tag: DW_TAG_member, name: "dl_density", scope: !1016, file: !958, line: 519, baseType: !265, size: 64, offset: 448)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "runtime", scope: !1016, file: !958, line: 526, baseType: !25, size: 64, offset: 512)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "deadline", scope: !1016, file: !958, line: 527, baseType: !265, size: 64, offset: 576)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1016, file: !958, line: 528, baseType: !70, size: 32, offset: 640)
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "dl_throttled", scope: !1016, file: !958, line: 554, baseType: !70, size: 1, offset: 672, flags: DIFlagBitField, extraData: i64 672)
!1028 = !DIDerivedType(tag: DW_TAG_member, name: "dl_yielded", scope: !1016, file: !958, line: 555, baseType: !70, size: 1, offset: 673, flags: DIFlagBitField, extraData: i64 672)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "dl_non_contending", scope: !1016, file: !958, line: 556, baseType: !70, size: 1, offset: 674, flags: DIFlagBitField, extraData: i64 672)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "dl_overrun", scope: !1016, file: !958, line: 557, baseType: !70, size: 1, offset: 675, flags: DIFlagBitField, extraData: i64 672)
!1031 = !DIDerivedType(tag: DW_TAG_member, name: "dl_timer", scope: !1016, file: !958, line: 563, baseType: !1032, size: 512, offset: 704)
!1032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hrtimer", file: !1033, line: 118, size: 512, elements: !1034)
!1033 = !DIFile(filename: "./include/linux/hrtimer.h", directory: "/home/lizy2001/genbc/linux")
!1034 = !{!1035, !1043, !1044, !1053, !1096, !1099, !1100, !1101}
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !1032, file: !1033, line: 119, baseType: !1036, size: 256)
!1036 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timerqueue_node", file: !1037, line: 9, size: 256, elements: !1038)
!1037 = !DIFile(filename: "./include/linux/timerqueue.h", directory: "/home/lizy2001/genbc/linux")
!1038 = !{!1039, !1040}
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !1036, file: !1037, line: 10, baseType: !602, size: 192, align: 64)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "expires", scope: !1036, file: !1037, line: 11, baseType: !1041, size: 64, offset: 192)
!1041 = !DIDerivedType(tag: DW_TAG_typedef, name: "ktime_t", file: !1042, line: 29, baseType: !25)
!1042 = !DIFile(filename: "./include/linux/ktime.h", directory: "/home/lizy2001/genbc/linux")
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "_softexpires", scope: !1032, file: !1033, line: 120, baseType: !1041, size: 64, offset: 256)
!1044 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !1032, file: !1033, line: 121, baseType: !1045, size: 64, offset: 320)
!1045 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1046, size: 64)
!1046 = !DISubroutineType(types: !1047)
!1047 = !{!1048, !1052}
!1048 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "hrtimer_restart", file: !1033, line: 65, baseType: !70, size: 32, elements: !1049)
!1049 = !{!1050, !1051}
!1050 = !DIEnumerator(name: "HRTIMER_NORESTART", value: 0, isUnsigned: true)
!1051 = !DIEnumerator(name: "HRTIMER_RESTART", value: 1, isUnsigned: true)
!1052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1032, size: 64)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1032, file: !1033, line: 122, baseType: !1054, size: 64, offset: 384)
!1054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1055, size: 64)
!1055 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hrtimer_clock_base", file: !1033, line: 159, size: 512, align: 512, elements: !1056)
!1056 = !{!1057, !1077, !1078, !1081, !1086, !1087, !1091, !1095}
!1057 = !DIDerivedType(tag: DW_TAG_member, name: "cpu_base", scope: !1055, file: !1033, line: 160, baseType: !1058, size: 64)
!1058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1059, size: 64)
!1059 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hrtimer_cpu_base", file: !1033, line: 214, size: 4608, align: 512, elements: !1060)
!1060 = !{!1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073}
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1059, file: !1033, line: 215, baseType: !615)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "cpu", scope: !1059, file: !1033, line: 216, baseType: !70, size: 32)
!1063 = !DIDerivedType(tag: DW_TAG_member, name: "active_bases", scope: !1059, file: !1033, line: 217, baseType: !70, size: 32, offset: 32)
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "clock_was_set_seq", scope: !1059, file: !1033, line: 218, baseType: !70, size: 32, offset: 64)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "hres_active", scope: !1059, file: !1033, line: 219, baseType: !70, size: 1, offset: 96, flags: DIFlagBitField, extraData: i64 96)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "in_hrtirq", scope: !1059, file: !1033, line: 220, baseType: !70, size: 1, offset: 97, flags: DIFlagBitField, extraData: i64 96)
!1067 = !DIDerivedType(tag: DW_TAG_member, name: "hang_detected", scope: !1059, file: !1033, line: 221, baseType: !70, size: 1, offset: 98, flags: DIFlagBitField, extraData: i64 96)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "softirq_activated", scope: !1059, file: !1033, line: 222, baseType: !70, size: 1, offset: 99, flags: DIFlagBitField, extraData: i64 96)
!1069 = !DIDerivedType(tag: DW_TAG_member, name: "expires_next", scope: !1059, file: !1033, line: 233, baseType: !1041, size: 64, offset: 128)
!1070 = !DIDerivedType(tag: DW_TAG_member, name: "next_timer", scope: !1059, file: !1033, line: 234, baseType: !1052, size: 64, offset: 192)
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "softirq_expires_next", scope: !1059, file: !1033, line: 235, baseType: !1041, size: 64, offset: 256)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "softirq_next_timer", scope: !1059, file: !1033, line: 236, baseType: !1052, size: 64, offset: 320)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "clock_base", scope: !1059, file: !1033, line: 237, baseType: !1074, size: 4096, offset: 512)
!1074 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1055, size: 4096, elements: !1075)
!1075 = !{!1076}
!1076 = !DISubrange(count: 8)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1055, file: !1033, line: 161, baseType: !70, size: 32, offset: 64)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "clockid", scope: !1055, file: !1033, line: 162, baseType: !1079, size: 32, offset: 96)
!1079 = !DIDerivedType(tag: DW_TAG_typedef, name: "clockid_t", file: !21, line: 27, baseType: !1080)
!1080 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_clockid_t", file: !153, line: 96, baseType: !104)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1055, file: !1033, line: 163, baseType: !1082, size: 32, offset: 128)
!1082 = !DIDerivedType(tag: DW_TAG_typedef, name: "seqcount_raw_spinlock_t", file: !234, line: 276, baseType: !1083)
!1083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "seqcount_raw_spinlock", file: !234, line: 276, size: 32, elements: !1084)
!1084 = !{!1085}
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "seqcount", scope: !1083, file: !234, line: 276, baseType: !238, size: 32)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "running", scope: !1055, file: !1033, line: 164, baseType: !1052, size: 64, offset: 192)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !1055, file: !1033, line: 165, baseType: !1088, size: 128, offset: 256)
!1088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timerqueue_head", file: !1037, line: 14, size: 128, elements: !1089)
!1089 = !{!1090}
!1090 = !DIDerivedType(tag: DW_TAG_member, name: "rb_root", scope: !1088, file: !1037, line: 15, baseType: !594, size: 128)
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "get_time", scope: !1055, file: !1033, line: 166, baseType: !1092, size: 64, offset: 384)
!1092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1093, size: 64)
!1093 = !DISubroutineType(types: !1094)
!1094 = !{!1041}
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1055, file: !1033, line: 167, baseType: !1041, size: 64, offset: 448)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1032, file: !1033, line: 123, baseType: !1097, size: 8, offset: 448)
!1097 = !DIDerivedType(tag: DW_TAG_typedef, name: "u8", file: !26, line: 17, baseType: !1098)
!1098 = !DIDerivedType(tag: DW_TAG_typedef, name: "__u8", file: !28, line: 21, baseType: !271)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "is_rel", scope: !1032, file: !1033, line: 124, baseType: !1097, size: 8, offset: 456)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "is_soft", scope: !1032, file: !1033, line: 125, baseType: !1097, size: 8, offset: 464)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "is_hard", scope: !1032, file: !1033, line: 126, baseType: !1097, size: 8, offset: 472)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "inactive_timer", scope: !1016, file: !958, line: 572, baseType: !1032, size: 512, offset: 1216)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "pi_se", scope: !1016, file: !958, line: 580, baseType: !1104, size: 64, offset: 1728)
!1104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1016, size: 64)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "policy", scope: !957, file: !958, line: 721, baseType: !70, size: 32, offset: 3584)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "nr_cpus_allowed", scope: !957, file: !958, line: 722, baseType: !104, size: 32, offset: 3616)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "cpus_ptr", scope: !957, file: !958, line: 723, baseType: !1108, size: 64, offset: 3648)
!1108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1109, size: 64)
!1109 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1110)
!1110 = !DIDerivedType(tag: DW_TAG_typedef, name: "cpumask_t", file: !1111, line: 17, baseType: !1112)
!1111 = !DIFile(filename: "./include/linux/cpumask.h", directory: "/home/lizy2001/genbc/linux")
!1112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cpumask", file: !1111, line: 17, size: 64, elements: !1113)
!1113 = !{!1114}
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !1112, file: !1111, line: 17, baseType: !1115, size: 64)
!1115 = !DICompositeType(tag: DW_TAG_array_type, baseType: !57, size: 64, elements: !1116)
!1116 = !{!1117}
!1117 = !DISubrange(count: 1)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "cpus_mask", scope: !957, file: !958, line: 724, baseType: !1110, size: 64, offset: 3712)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "sched_info", scope: !957, file: !958, line: 749, baseType: !1120, offset: 3776)
!1120 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_info", file: !958, line: 290, elements: !45)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "tasks", scope: !957, file: !958, line: 751, baseType: !47, size: 128, offset: 3776)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "mm", scope: !957, file: !958, line: 757, baseType: !816, size: 64, offset: 3904)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "active_mm", scope: !957, file: !958, line: 758, baseType: !816, size: 64, offset: 3968)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "vmacache", scope: !957, file: !958, line: 761, baseType: !1125, size: 320, offset: 4032)
!1125 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vmacache", file: !913, line: 34, size: 320, elements: !1126)
!1126 = !{!1127, !1128}
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "seqnum", scope: !1125, file: !913, line: 35, baseType: !265, size: 64)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "vmas", scope: !1125, file: !913, line: 36, baseType: !1129, size: 256, offset: 64)
!1129 = !DICompositeType(tag: DW_TAG_array_type, baseType: !823, size: 256, elements: !917)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "exit_state", scope: !957, file: !958, line: 766, baseType: !104, size: 32, offset: 4352)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "exit_code", scope: !957, file: !958, line: 767, baseType: !104, size: 32, offset: 4384)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "exit_signal", scope: !957, file: !958, line: 768, baseType: !104, size: 32, offset: 4416)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "pdeath_signal", scope: !957, file: !958, line: 770, baseType: !104, size: 32, offset: 4448)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "jobctl", scope: !957, file: !958, line: 772, baseType: !57, size: 64, offset: 4480)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !957, file: !958, line: 775, baseType: !70, size: 32, offset: 4544)
!1136 = !DIDerivedType(tag: DW_TAG_member, name: "sched_reset_on_fork", scope: !957, file: !958, line: 778, baseType: !70, size: 1, offset: 4576, flags: DIFlagBitField, extraData: i64 4576)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "sched_contributes_to_load", scope: !957, file: !958, line: 779, baseType: !70, size: 1, offset: 4577, flags: DIFlagBitField, extraData: i64 4576)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "sched_migrated", scope: !957, file: !958, line: 780, baseType: !70, size: 1, offset: 4578, flags: DIFlagBitField, extraData: i64 4576)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "sched_remote_wakeup", scope: !957, file: !958, line: 803, baseType: !70, size: 1, offset: 4608, flags: DIFlagBitField, extraData: i64 4608)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "in_execve", scope: !957, file: !958, line: 806, baseType: !70, size: 1, offset: 4609, flags: DIFlagBitField, extraData: i64 4608)
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "in_iowait", scope: !957, file: !958, line: 807, baseType: !70, size: 1, offset: 4610, flags: DIFlagBitField, extraData: i64 4608)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "restore_sigmask", scope: !957, file: !958, line: 809, baseType: !70, size: 1, offset: 4611, flags: DIFlagBitField, extraData: i64 4608)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "brk_randomized", scope: !957, file: !958, line: 815, baseType: !70, size: 1, offset: 4612, flags: DIFlagBitField, extraData: i64 4608)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "atomic_flags", scope: !957, file: !958, line: 831, baseType: !57, size: 64, offset: 4672)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "restart_block", scope: !957, file: !958, line: 833, baseType: !1146, size: 384, offset: 4736)
!1146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "restart_block", file: !1147, line: 25, size: 384, elements: !1148)
!1147 = !DIFile(filename: "./include/linux/restart_block.h", directory: "/home/lizy2001/genbc/linux")
!1148 = !{!1149, !1154}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "fn", scope: !1146, file: !1147, line: 26, baseType: !1150, size: 64)
!1150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1151, size: 64)
!1151 = !DISubroutineType(types: !1152)
!1152 = !{!155, !1153}
!1153 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1146, size: 64)
!1154 = !DIDerivedType(tag: DW_TAG_member, scope: !1146, file: !1147, line: 27, baseType: !1155, size: 320, offset: 64)
!1155 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1146, file: !1147, line: 27, size: 320, elements: !1156)
!1156 = !{!1157, !1167, !1199}
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "futex", scope: !1155, file: !1147, line: 36, baseType: !1158, size: 320)
!1158 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1155, file: !1147, line: 29, size: 320, elements: !1159)
!1159 = !{!1160, !1162, !1163, !1164, !1165, !1166}
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "uaddr", scope: !1158, file: !1147, line: 30, baseType: !1161, size: 64)
!1161 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !261, size: 64)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1158, file: !1147, line: 31, baseType: !261, size: 32, offset: 64)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1158, file: !1147, line: 32, baseType: !261, size: 32, offset: 96)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "bitset", scope: !1158, file: !1147, line: 33, baseType: !261, size: 32, offset: 128)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "time", scope: !1158, file: !1147, line: 34, baseType: !265, size: 64, offset: 192)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "uaddr2", scope: !1158, file: !1147, line: 35, baseType: !1161, size: 64, offset: 256)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "nanosleep", scope: !1155, file: !1147, line: 46, baseType: !1168, size: 192)
!1168 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1155, file: !1147, line: 38, size: 192, elements: !1169)
!1169 = !{!1170, !1171, !1177, !1198}
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "clockid", scope: !1168, file: !1147, line: 39, baseType: !1079, size: 32)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1168, file: !1147, line: 40, baseType: !1172, size: 32, offset: 32)
!1172 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "timespec_type", file: !1147, line: 16, baseType: !70, size: 32, elements: !1173)
!1173 = !{!1174, !1175, !1176}
!1174 = !DIEnumerator(name: "TT_NONE", value: 0, isUnsigned: true)
!1175 = !DIEnumerator(name: "TT_NATIVE", value: 1, isUnsigned: true)
!1176 = !DIEnumerator(name: "TT_COMPAT", value: 2, isUnsigned: true)
!1177 = !DIDerivedType(tag: DW_TAG_member, scope: !1168, file: !1147, line: 41, baseType: !1178, size: 64, offset: 64)
!1178 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1168, file: !1147, line: 41, size: 64, elements: !1179)
!1179 = !{!1180, !1188}
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "rmtp", scope: !1178, file: !1147, line: 42, baseType: !1181, size: 64)
!1181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1182, size: 64)
!1182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__kernel_timespec", file: !1183, line: 7, size: 128, elements: !1184)
!1183 = !DIFile(filename: "./include/uapi/linux/time_types.h", directory: "/home/lizy2001/genbc/linux")
!1184 = !{!1185, !1187}
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1182, file: !1183, line: 8, baseType: !1186, size: 64)
!1186 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_time64_t", file: !153, line: 93, baseType: !29)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1182, file: !1183, line: 9, baseType: !29, size: 64, offset: 64)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "compat_rmtp", scope: !1178, file: !1147, line: 43, baseType: !1189, size: 64)
!1189 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1190, size: 64)
!1190 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "old_timespec32", file: !1191, line: 7, size: 64, elements: !1192)
!1191 = !DIFile(filename: "./include/vdso/time32.h", directory: "/home/lizy2001/genbc/linux")
!1192 = !{!1193, !1197}
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1190, file: !1191, line: 8, baseType: !1194, size: 32)
!1194 = !DIDerivedType(tag: DW_TAG_typedef, name: "old_time32_t", file: !1191, line: 5, baseType: !1195)
!1195 = !DIDerivedType(tag: DW_TAG_typedef, name: "s32", file: !26, line: 20, baseType: !1196)
!1196 = !DIDerivedType(tag: DW_TAG_typedef, name: "__s32", file: !28, line: 26, baseType: !104)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1190, file: !1191, line: 9, baseType: !1195, size: 32, offset: 32)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "expires", scope: !1168, file: !1147, line: 45, baseType: !265, size: 64, offset: 128)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "poll", scope: !1155, file: !1147, line: 54, baseType: !1200, size: 256)
!1200 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1155, file: !1147, line: 48, size: 256, elements: !1201)
!1201 = !{!1202, !1205, !1206, !1207, !1208}
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "ufds", scope: !1200, file: !1147, line: 49, baseType: !1203, size: 64)
!1203 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1204, size: 64)
!1204 = !DICompositeType(tag: DW_TAG_structure_type, name: "pollfd", file: !1147, line: 14, flags: DIFlagFwdDecl)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "nfds", scope: !1200, file: !1147, line: 50, baseType: !104, size: 32, offset: 64)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "has_timeout", scope: !1200, file: !1147, line: 51, baseType: !104, size: 32, offset: 96)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "tv_sec", scope: !1200, file: !1147, line: 52, baseType: !57, size: 64, offset: 128)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "tv_nsec", scope: !1200, file: !1147, line: 53, baseType: !57, size: 64, offset: 192)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !957, file: !958, line: 835, baseType: !1210, size: 32, offset: 5120)
!1210 = !DIDerivedType(tag: DW_TAG_typedef, name: "pid_t", file: !21, line: 22, baseType: !1211)
!1211 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_pid_t", file: !153, line: 28, baseType: !104)
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "tgid", scope: !957, file: !958, line: 836, baseType: !1210, size: 32, offset: 5152)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "stack_canary", scope: !957, file: !958, line: 840, baseType: !57, size: 64, offset: 5184)
!1214 = !DIDerivedType(tag: DW_TAG_member, name: "real_parent", scope: !957, file: !958, line: 849, baseType: !956, size: 64, offset: 5248)
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !957, file: !958, line: 852, baseType: !956, size: 64, offset: 5312)
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !957, file: !958, line: 857, baseType: !47, size: 128, offset: 5376)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "sibling", scope: !957, file: !958, line: 858, baseType: !47, size: 128, offset: 5504)
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "group_leader", scope: !957, file: !958, line: 859, baseType: !956, size: 64, offset: 5632)
!1219 = !DIDerivedType(tag: DW_TAG_member, name: "ptraced", scope: !957, file: !958, line: 867, baseType: !47, size: 128, offset: 5696)
!1220 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace_entry", scope: !957, file: !958, line: 868, baseType: !47, size: 128, offset: 5824)
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "thread_pid", scope: !957, file: !958, line: 871, baseType: !1222, size: 64, offset: 5952)
!1222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1223, size: 64)
!1223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pid", file: !1224, line: 59, size: 768, elements: !1225)
!1224 = !DIFile(filename: "./include/linux/pid.h", directory: "/home/lizy2001/genbc/linux")
!1225 = !{!1226, !1227, !1228, !1229, !1231, !1232, !1239, !1240}
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1223, file: !1224, line: 61, baseType: !970, size: 32)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "level", scope: !1223, file: !1224, line: 62, baseType: !70, size: 32, offset: 32)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1223, file: !1224, line: 63, baseType: !31, offset: 64)
!1229 = !DIDerivedType(tag: DW_TAG_member, name: "tasks", scope: !1223, file: !1224, line: 65, baseType: !1230, size: 256, offset: 64)
!1230 = !DICompositeType(tag: DW_TAG_array_type, baseType: !477, size: 256, elements: !917)
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "inodes", scope: !1223, file: !1224, line: 66, baseType: !477, size: 64, offset: 320)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "wait_pidfd", scope: !1223, file: !1224, line: 68, baseType: !1233, size: 128, offset: 384)
!1233 = !DIDerivedType(tag: DW_TAG_typedef, name: "wait_queue_head_t", file: !1234, line: 40, baseType: !1235)
!1234 = !DIFile(filename: "./include/linux/wait.h", directory: "/home/lizy2001/genbc/linux")
!1235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wait_queue_head", file: !1234, line: 36, size: 128, elements: !1236)
!1236 = !{!1237, !1238}
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1235, file: !1234, line: 37, baseType: !31)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1235, file: !1234, line: 38, baseType: !47, size: 128)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !1223, file: !1224, line: 69, baseType: !211, size: 128, align: 64, offset: 512)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "numbers", scope: !1223, file: !1224, line: 70, baseType: !1241, size: 128, offset: 640)
!1241 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1242, size: 128, elements: !1116)
!1242 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "upid", file: !1224, line: 54, size: 128, elements: !1243)
!1243 = !{!1244, !1245}
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "nr", scope: !1242, file: !1224, line: 55, baseType: !104, size: 32)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "ns", scope: !1242, file: !1224, line: 56, baseType: !1246, size: 64, offset: 64)
!1246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1247, size: 64)
!1247 = !DICompositeType(tag: DW_TAG_structure_type, name: "pid_namespace", file: !1224, line: 56, flags: DIFlagFwdDecl)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "pid_links", scope: !957, file: !958, line: 872, baseType: !1249, size: 512, offset: 6016)
!1249 = !DICompositeType(tag: DW_TAG_array_type, baseType: !481, size: 512, elements: !917)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "thread_group", scope: !957, file: !958, line: 873, baseType: !47, size: 128, offset: 6528)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "thread_node", scope: !957, file: !958, line: 874, baseType: !47, size: 128, offset: 6656)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "vfork_done", scope: !957, file: !958, line: 876, baseType: !1253, size: 64, offset: 6784)
!1253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1254, size: 64)
!1254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "completion", file: !1255, line: 26, size: 192, elements: !1256)
!1255 = !DIFile(filename: "./include/linux/completion.h", directory: "/home/lizy2001/genbc/linux")
!1256 = !{!1257, !1258}
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "done", scope: !1254, file: !1255, line: 27, baseType: !70, size: 32)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "wait", scope: !1254, file: !1255, line: 28, baseType: !1259, size: 128, offset: 64)
!1259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "swait_queue_head", file: !1260, line: 43, size: 128, elements: !1261)
!1260 = !DIFile(filename: "./include/linux/swait.h", directory: "/home/lizy2001/genbc/linux")
!1261 = !{!1262, !1263}
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1259, file: !1260, line: 44, baseType: !615)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "task_list", scope: !1259, file: !1260, line: 45, baseType: !47, size: 128)
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "set_child_tid", scope: !957, file: !958, line: 879, baseType: !547, size: 64, offset: 6848)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "clear_child_tid", scope: !957, file: !958, line: 882, baseType: !547, size: 64, offset: 6912)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "utime", scope: !957, file: !958, line: 884, baseType: !265, size: 64, offset: 6976)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "stime", scope: !957, file: !958, line: 885, baseType: !265, size: 64, offset: 7040)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "gtime", scope: !957, file: !958, line: 890, baseType: !265, size: 64, offset: 7104)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "prev_cputime", scope: !957, file: !958, line: 891, baseType: !1270, size: 128, offset: 7168)
!1270 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "prev_cputime", file: !958, line: 242, size: 128, elements: !1271)
!1271 = !{!1272, !1273, !1274}
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "utime", scope: !1270, file: !958, line: 244, baseType: !265, size: 64)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "stime", scope: !1270, file: !958, line: 245, baseType: !265, size: 64, offset: 64)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1270, file: !958, line: 246, baseType: !615, offset: 128)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "nvcsw", scope: !957, file: !958, line: 900, baseType: !57, size: 64, offset: 7296)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "nivcsw", scope: !957, file: !958, line: 901, baseType: !57, size: 64, offset: 7360)
!1277 = !DIDerivedType(tag: DW_TAG_member, name: "start_time", scope: !957, file: !958, line: 904, baseType: !265, size: 64, offset: 7424)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "start_boottime", scope: !957, file: !958, line: 907, baseType: !265, size: 64, offset: 7488)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "min_flt", scope: !957, file: !958, line: 910, baseType: !57, size: 64, offset: 7552)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "maj_flt", scope: !957, file: !958, line: 911, baseType: !57, size: 64, offset: 7616)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "posix_cputimers", scope: !957, file: !958, line: 914, baseType: !1282, size: 640, offset: 7680)
!1282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "posix_cputimers", file: !1283, line: 123, size: 640, elements: !1284)
!1283 = !DIFile(filename: "./include/linux/posix-timers.h", directory: "/home/lizy2001/genbc/linux")
!1284 = !{!1285, !1291, !1292}
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "bases", scope: !1282, file: !1283, line: 124, baseType: !1286, size: 576)
!1286 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1287, size: 576, elements: !121)
!1287 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "posix_cputimer_base", file: !1283, line: 108, size: 192, elements: !1288)
!1288 = !{!1289, !1290}
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "nextevt", scope: !1287, file: !1283, line: 109, baseType: !265, size: 64)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "tqhead", scope: !1287, file: !1283, line: 110, baseType: !1088, size: 128, offset: 64)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "timers_active", scope: !1282, file: !1283, line: 125, baseType: !70, size: 32, offset: 576)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "expiry_active", scope: !1282, file: !1283, line: 126, baseType: !70, size: 32, offset: 608)
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "posix_cputimers_work", scope: !957, file: !958, line: 917, baseType: !1294, size: 192, offset: 8320)
!1294 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "posix_cputimers_work", file: !1283, line: 134, size: 192, elements: !1295)
!1295 = !{!1296, !1297}
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "work", scope: !1294, file: !1283, line: 135, baseType: !211, size: 128, align: 64)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "scheduled", scope: !1294, file: !1283, line: 136, baseType: !70, size: 32, offset: 128)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "ptracer_cred", scope: !957, file: !958, line: 923, baseType: !1299, size: 64, offset: 8512)
!1299 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1300, size: 64)
!1300 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1301)
!1301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cred", file: !1302, line: 111, size: 1280, elements: !1303)
!1302 = !DIFile(filename: "./include/linux/cred.h", directory: "/home/lizy2001/genbc/linux")
!1303 = !{!1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1323, !1324, !1325, !1326, !1327, !1328, !1435, !1436, !1437, !1438, !1464, !1467, !1477}
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !1301, file: !1302, line: 112, baseType: !589, size: 32)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1301, file: !1302, line: 120, baseType: !279, size: 32, offset: 32)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !1301, file: !1302, line: 121, baseType: !287, size: 32, offset: 64)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "suid", scope: !1301, file: !1302, line: 122, baseType: !279, size: 32, offset: 96)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "sgid", scope: !1301, file: !1302, line: 123, baseType: !287, size: 32, offset: 128)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "euid", scope: !1301, file: !1302, line: 124, baseType: !279, size: 32, offset: 160)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "egid", scope: !1301, file: !1302, line: 125, baseType: !287, size: 32, offset: 192)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "fsuid", scope: !1301, file: !1302, line: 126, baseType: !279, size: 32, offset: 224)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "fsgid", scope: !1301, file: !1302, line: 127, baseType: !287, size: 32, offset: 256)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "securebits", scope: !1301, file: !1302, line: 128, baseType: !70, size: 32, offset: 288)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "cap_inheritable", scope: !1301, file: !1302, line: 129, baseType: !1315, size: 64, offset: 320)
!1315 = !DIDerivedType(tag: DW_TAG_typedef, name: "kernel_cap_t", file: !1316, line: 26, baseType: !1317)
!1316 = !DIFile(filename: "./include/linux/capability.h", directory: "/home/lizy2001/genbc/linux")
!1317 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernel_cap_struct", file: !1316, line: 24, size: 64, elements: !1318)
!1318 = !{!1319}
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "cap", scope: !1317, file: !1316, line: 25, baseType: !1320, size: 64)
!1320 = !DICompositeType(tag: DW_TAG_array_type, baseType: !262, size: 64, elements: !1321)
!1321 = !{!1322}
!1322 = !DISubrange(count: 2)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "cap_permitted", scope: !1301, file: !1302, line: 130, baseType: !1315, size: 64, offset: 384)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "cap_effective", scope: !1301, file: !1302, line: 131, baseType: !1315, size: 64, offset: 448)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "cap_bset", scope: !1301, file: !1302, line: 132, baseType: !1315, size: 64, offset: 512)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "cap_ambient", scope: !1301, file: !1302, line: 133, baseType: !1315, size: 64, offset: 576)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "jit_keyring", scope: !1301, file: !1302, line: 135, baseType: !271, size: 8, offset: 640)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "session_keyring", scope: !1301, file: !1302, line: 137, baseType: !1329, size: 64, offset: 704)
!1329 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1330, size: 64)
!1330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "key", file: !1331, line: 189, size: 1664, elements: !1332)
!1331 = !DIFile(filename: "./include/linux/key.h", directory: "/home/lizy2001/genbc/linux")
!1332 = !{!1333, !1334, !1337, !1342, !1343, !1346, !1347, !1352, !1353, !1354, !1355, !1357, !1358, !1359, !1360, !1361, !1399, !1420}
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !1330, file: !1331, line: 190, baseType: !970, size: 32)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "serial", scope: !1330, file: !1331, line: 191, baseType: !1335, size: 32, offset: 32)
!1335 = !DIDerivedType(tag: DW_TAG_typedef, name: "key_serial_t", file: !1331, line: 28, baseType: !1336)
!1336 = !DIDerivedType(tag: DW_TAG_typedef, name: "int32_t", file: !21, line: 98, baseType: !1195)
!1337 = !DIDerivedType(tag: DW_TAG_member, scope: !1330, file: !1331, line: 192, baseType: !1338, size: 192, offset: 64)
!1338 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1330, file: !1331, line: 192, size: 192, elements: !1339)
!1339 = !{!1340, !1341}
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "graveyard_link", scope: !1338, file: !1331, line: 193, baseType: !47, size: 128)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "serial_node", scope: !1338, file: !1331, line: 194, baseType: !602, size: 192, align: 64)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "sem", scope: !1330, file: !1331, line: 199, baseType: !609, size: 256, offset: 256)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "user", scope: !1330, file: !1331, line: 200, baseType: !1344, size: 64, offset: 512)
!1344 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1345, size: 64)
!1345 = !DICompositeType(tag: DW_TAG_structure_type, name: "key_user", file: !1331, line: 200, flags: DIFlagFwdDecl)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "security", scope: !1330, file: !1331, line: 201, baseType: !64, size: 64, offset: 576)
!1347 = !DIDerivedType(tag: DW_TAG_member, scope: !1330, file: !1331, line: 202, baseType: !1348, size: 64, offset: 640)
!1348 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1330, file: !1331, line: 202, size: 64, elements: !1349)
!1349 = !{!1350, !1351}
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "expiry", scope: !1348, file: !1331, line: 203, baseType: !379, size: 64)
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "revoked_at", scope: !1348, file: !1331, line: 204, baseType: !379, size: 64)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "last_used_at", scope: !1330, file: !1331, line: 206, baseType: !379, size: 64, offset: 704)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1330, file: !1331, line: 207, baseType: !279, size: 32, offset: 768)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !1330, file: !1331, line: 208, baseType: !287, size: 32, offset: 800)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "perm", scope: !1330, file: !1331, line: 209, baseType: !1356, size: 32, offset: 832)
!1356 = !DIDerivedType(tag: DW_TAG_typedef, name: "key_perm_t", file: !1331, line: 31, baseType: !398)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "quotalen", scope: !1330, file: !1331, line: 210, baseType: !162, size: 16, offset: 864)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "datalen", scope: !1330, file: !1331, line: 211, baseType: !162, size: 16, offset: 880)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1330, file: !1331, line: 215, baseType: !945, size: 16, offset: 896)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1330, file: !1331, line: 222, baseType: !57, size: 64, offset: 960)
!1361 = !DIDerivedType(tag: DW_TAG_member, scope: !1330, file: !1331, line: 239, baseType: !1362, size: 320, offset: 1024)
!1362 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1330, file: !1331, line: 239, size: 320, elements: !1363)
!1363 = !{!1364, !1391}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "index_key", scope: !1362, file: !1331, line: 240, baseType: !1365, size: 320)
!1365 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "keyring_index_key", file: !1331, line: 108, size: 320, elements: !1366)
!1366 = !{!1367, !1368, !1380, !1383, !1390}
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1365, file: !1331, line: 110, baseType: !57, size: 64)
!1368 = !DIDerivedType(tag: DW_TAG_member, scope: !1365, file: !1331, line: 111, baseType: !1369, size: 64, offset: 64)
!1369 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1365, file: !1331, line: 111, size: 64, elements: !1370)
!1370 = !{!1371, !1379}
!1371 = !DIDerivedType(tag: DW_TAG_member, scope: !1369, file: !1331, line: 112, baseType: !1372, size: 64)
!1372 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1369, file: !1331, line: 112, size: 64, elements: !1373)
!1373 = !{!1374, !1375}
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "desc_len", scope: !1372, file: !1331, line: 114, baseType: !694, size: 16)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "desc", scope: !1372, file: !1331, line: 115, baseType: !1376, size: 48, offset: 16)
!1376 = !DICompositeType(tag: DW_TAG_array_type, baseType: !83, size: 48, elements: !1377)
!1377 = !{!1378}
!1378 = !DISubrange(count: 6)
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !1369, file: !1331, line: 121, baseType: !57, size: 64)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1365, file: !1331, line: 123, baseType: !1381, size: 64, offset: 128)
!1381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1382, size: 64)
!1382 = !DICompositeType(tag: DW_TAG_structure_type, name: "key_type", file: !1331, line: 96, flags: DIFlagFwdDecl)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "domain_tag", scope: !1365, file: !1331, line: 124, baseType: !1384, size: 64, offset: 192)
!1384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1385, size: 64)
!1385 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "key_tag", file: !1331, line: 102, size: 192, elements: !1386)
!1386 = !{!1387, !1388, !1389}
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !1385, file: !1331, line: 103, baseType: !211, size: 128, align: 64)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !1385, file: !1331, line: 104, baseType: !970, size: 32, offset: 128)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "removed", scope: !1385, file: !1331, line: 105, baseType: !331, size: 8, offset: 160)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "description", scope: !1365, file: !1331, line: 125, baseType: !81, size: 64, offset: 256)
!1391 = !DIDerivedType(tag: DW_TAG_member, scope: !1362, file: !1331, line: 241, baseType: !1392, size: 320)
!1392 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1362, file: !1331, line: 241, size: 320, elements: !1393)
!1393 = !{!1394, !1395, !1396, !1397, !1398}
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !1392, file: !1331, line: 242, baseType: !57, size: 64)
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "len_desc", scope: !1392, file: !1331, line: 243, baseType: !57, size: 64, offset: 64)
!1396 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1392, file: !1331, line: 244, baseType: !1381, size: 64, offset: 128)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "domain_tag", scope: !1392, file: !1331, line: 245, baseType: !1384, size: 64, offset: 192)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "description", scope: !1392, file: !1331, line: 246, baseType: !120, size: 64, offset: 256)
!1399 = !DIDerivedType(tag: DW_TAG_member, scope: !1330, file: !1331, line: 254, baseType: !1400, size: 256, offset: 1344)
!1400 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1330, file: !1331, line: 254, size: 256, elements: !1401)
!1401 = !{!1402, !1408}
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "payload", scope: !1400, file: !1331, line: 255, baseType: !1403, size: 256)
!1403 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "key_payload", file: !1331, line: 128, size: 256, elements: !1404)
!1404 = !{!1405, !1406}
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "rcu_data0", scope: !1403, file: !1331, line: 129, baseType: !64, size: 64)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1403, file: !1331, line: 130, baseType: !1407, size: 256)
!1407 = !DICompositeType(tag: DW_TAG_array_type, baseType: !64, size: 256, elements: !917)
!1408 = !DIDerivedType(tag: DW_TAG_member, scope: !1400, file: !1331, line: 256, baseType: !1409, size: 256)
!1409 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1400, file: !1331, line: 256, size: 256, elements: !1410)
!1410 = !{!1411, !1412}
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "name_link", scope: !1409, file: !1331, line: 258, baseType: !47, size: 128)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "keys", scope: !1409, file: !1331, line: 259, baseType: !1413, size: 128, offset: 128)
!1413 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "assoc_array", file: !1414, line: 22, size: 128, elements: !1415)
!1414 = !DIFile(filename: "./include/linux/assoc_array.h", directory: "/home/lizy2001/genbc/linux")
!1415 = !{!1416, !1419}
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !1413, file: !1414, line: 23, baseType: !1417, size: 64)
!1417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1418, size: 64)
!1418 = !DICompositeType(tag: DW_TAG_structure_type, name: "assoc_array_ptr", file: !1414, line: 23, flags: DIFlagFwdDecl)
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "nr_leaves_on_tree", scope: !1413, file: !1414, line: 24, baseType: !57, size: 64, offset: 64)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_link", scope: !1330, file: !1331, line: 274, baseType: !1421, size: 64, offset: 1600)
!1421 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1422, size: 64)
!1422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "key_restriction", file: !1331, line: 170, size: 192, elements: !1423)
!1423 = !{!1424, !1433, !1434}
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "check", scope: !1422, file: !1331, line: 171, baseType: !1425, size: 64)
!1425 = !DIDerivedType(tag: DW_TAG_typedef, name: "key_restrict_link_func_t", file: !1331, line: 165, baseType: !1426)
!1426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1427, size: 64)
!1427 = !DISubroutineType(types: !1428)
!1428 = !{!104, !1329, !1429, !1431, !1329}
!1429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1430, size: 64)
!1430 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1382)
!1431 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1432, size: 64)
!1432 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1403)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "key", scope: !1422, file: !1331, line: 172, baseType: !1329, size: 64, offset: 64)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "keytype", scope: !1422, file: !1331, line: 173, baseType: !1381, size: 64, offset: 128)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "process_keyring", scope: !1301, file: !1302, line: 138, baseType: !1329, size: 64, offset: 768)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "thread_keyring", scope: !1301, file: !1302, line: 139, baseType: !1329, size: 64, offset: 832)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "request_key_auth", scope: !1301, file: !1302, line: 140, baseType: !1329, size: 64, offset: 896)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "user", scope: !1301, file: !1302, line: 145, baseType: !1439, size: 64, offset: 960)
!1439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1440, size: 64)
!1440 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "user_struct", file: !1441, line: 13, size: 896, elements: !1442)
!1441 = !DIFile(filename: "./include/linux/sched/user.h", directory: "/home/lizy2001/genbc/linux")
!1442 = !{!1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453}
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "__count", scope: !1440, file: !1441, line: 14, baseType: !970, size: 32)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "processes", scope: !1440, file: !1441, line: 15, baseType: !589, size: 32, offset: 32)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "sigpending", scope: !1440, file: !1441, line: 16, baseType: !589, size: 32, offset: 64)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "epoll_watches", scope: !1440, file: !1441, line: 21, baseType: !18, size: 64, offset: 128)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "locked_shm", scope: !1440, file: !1441, line: 27, baseType: !57, size: 64, offset: 192)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "unix_inflight", scope: !1440, file: !1441, line: 28, baseType: !57, size: 64, offset: 256)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "pipe_bufs", scope: !1440, file: !1441, line: 29, baseType: !18, size: 64, offset: 320)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "uidhash_node", scope: !1440, file: !1441, line: 32, baseType: !481, size: 128, offset: 384)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1440, file: !1441, line: 33, baseType: !279, size: 32, offset: 512)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "locked_vm", scope: !1440, file: !1441, line: 37, baseType: !18, size: 64, offset: 576)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "ratelimit", scope: !1440, file: !1441, line: 44, baseType: !1454, size: 256, offset: 640)
!1454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ratelimit_state", file: !1455, line: 15, size: 256, elements: !1456)
!1455 = !DIFile(filename: "./include/linux/ratelimit_types.h", directory: "/home/lizy2001/genbc/linux")
!1456 = !{!1457, !1458, !1459, !1460, !1461, !1462, !1463}
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1454, file: !1455, line: 16, baseType: !615)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "interval", scope: !1454, file: !1455, line: 18, baseType: !104, size: 32)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "burst", scope: !1454, file: !1455, line: 19, baseType: !104, size: 32, offset: 32)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "printed", scope: !1454, file: !1455, line: 20, baseType: !104, size: 32, offset: 64)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "missed", scope: !1454, file: !1455, line: 21, baseType: !104, size: 32, offset: 96)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "begin", scope: !1454, file: !1455, line: 22, baseType: !57, size: 64, offset: 128)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1454, file: !1455, line: 23, baseType: !57, size: 64, offset: 192)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "user_ns", scope: !1301, file: !1302, line: 146, baseType: !1465, size: 64, offset: 1024)
!1465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1466, size: 64)
!1466 = !DICompositeType(tag: DW_TAG_structure_type, name: "user_namespace", file: !280, line: 18, flags: DIFlagFwdDecl)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "group_info", scope: !1301, file: !1302, line: 147, baseType: !1468, size: 64, offset: 1088)
!1468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1469, size: 64)
!1469 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "group_info", file: !1302, line: 25, size: 64, elements: !1470)
!1470 = !{!1471, !1472, !1473}
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "usage", scope: !1469, file: !1302, line: 26, baseType: !589, size: 32)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "ngroups", scope: !1469, file: !1302, line: 27, baseType: !104, size: 32, offset: 32)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !1469, file: !1302, line: 28, baseType: !1474, offset: 64)
!1474 = !DICompositeType(tag: DW_TAG_array_type, baseType: !287, elements: !1475)
!1475 = !{!1476}
!1476 = !DISubrange(count: 0)
!1477 = !DIDerivedType(tag: DW_TAG_member, scope: !1301, file: !1302, line: 149, baseType: !1478, size: 128, offset: 1152)
!1478 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1301, file: !1302, line: 149, size: 128, elements: !1479)
!1479 = !{!1480, !1481}
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "non_rcu", scope: !1478, file: !1302, line: 150, baseType: !104, size: 32)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !1478, file: !1302, line: 151, baseType: !211, size: 128, align: 64)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "real_cred", scope: !957, file: !958, line: 926, baseType: !1299, size: 64, offset: 8576)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "cred", scope: !957, file: !958, line: 929, baseType: !1299, size: 64, offset: 8640)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "cached_requested_key", scope: !957, file: !958, line: 933, baseType: !1329, size: 64, offset: 8704)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "comm", scope: !957, file: !958, line: 943, baseType: !1486, size: 128, offset: 8768)
!1486 = !DICompositeType(tag: DW_TAG_array_type, baseType: !83, size: 128, elements: !1487)
!1487 = !{!1488}
!1488 = !DISubrange(count: 16)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "nameidata", scope: !957, file: !958, line: 945, baseType: !1490, size: 64, offset: 8896)
!1490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1491, size: 64)
!1491 = !DICompositeType(tag: DW_TAG_structure_type, name: "nameidata", file: !958, line: 49, flags: DIFlagFwdDecl)
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "fs", scope: !957, file: !958, line: 956, baseType: !1493, size: 64, offset: 8960)
!1493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1494, size: 64)
!1494 = !DICompositeType(tag: DW_TAG_structure_type, name: "fs_struct", file: !958, line: 45, flags: DIFlagFwdDecl)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "files", scope: !957, file: !958, line: 959, baseType: !1496, size: 64, offset: 9024)
!1496 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1497, size: 64)
!1497 = !DICompositeType(tag: DW_TAG_structure_type, name: "files_struct", file: !958, line: 959, flags: DIFlagFwdDecl)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "io_uring", scope: !957, file: !958, line: 962, baseType: !1499, size: 64, offset: 9088)
!1499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1500, size: 64)
!1500 = !DICompositeType(tag: DW_TAG_structure_type, name: "io_uring_task", file: !958, line: 66, flags: DIFlagFwdDecl)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "nsproxy", scope: !957, file: !958, line: 966, baseType: !1502, size: 64, offset: 9152)
!1502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1503, size: 64)
!1503 = !DICompositeType(tag: DW_TAG_structure_type, name: "nsproxy", file: !958, line: 50, flags: DIFlagFwdDecl)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "signal", scope: !957, file: !958, line: 969, baseType: !1505, size: 64, offset: 9216)
!1505 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1506, size: 64)
!1506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "signal_struct", file: !1507, line: 82, size: 7296, elements: !1508)
!1507 = !DIFile(filename: "./include/linux/sched/signal.h", directory: "/home/lizy2001/genbc/linux")
!1508 = !{!1509, !1510, !1511, !1512, !1513, !1514, !1515, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1544, !1553, !1554, !1556, !1557, !1558, !1561, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1591, !1592, !1599, !1600, !1601, !1602, !1603, !1604}
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "sigcnt", scope: !1506, file: !1507, line: 83, baseType: !970, size: 32)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "live", scope: !1506, file: !1507, line: 84, baseType: !589, size: 32, offset: 32)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "nr_threads", scope: !1506, file: !1507, line: 85, baseType: !104, size: 32, offset: 64)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "thread_head", scope: !1506, file: !1507, line: 86, baseType: !47, size: 128, offset: 128)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "wait_chldexit", scope: !1506, file: !1507, line: 88, baseType: !1233, size: 128, offset: 256)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "curr_target", scope: !1506, file: !1507, line: 91, baseType: !956, size: 64, offset: 384)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "shared_pending", scope: !1506, file: !1507, line: 94, baseType: !1516, size: 192, offset: 448)
!1516 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sigpending", file: !1517, line: 30, size: 192, elements: !1518)
!1517 = !DIFile(filename: "./include/linux/signal_types.h", directory: "/home/lizy2001/genbc/linux")
!1518 = !{!1519, !1520}
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !1516, file: !1517, line: 31, baseType: !47, size: 128)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "signal", scope: !1516, file: !1517, line: 32, baseType: !1521, size: 64, offset: 128)
!1521 = !DIDerivedType(tag: DW_TAG_typedef, name: "sigset_t", file: !1522, line: 25, baseType: !1523)
!1522 = !DIFile(filename: "./arch/x86/include/asm/signal.h", directory: "/home/lizy2001/genbc/linux")
!1523 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1522, line: 23, size: 64, elements: !1524)
!1524 = !{!1525}
!1525 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1523, file: !1522, line: 24, baseType: !1115, size: 64)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "multiprocess", scope: !1506, file: !1507, line: 97, baseType: !477, size: 64, offset: 640)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "group_exit_code", scope: !1506, file: !1507, line: 100, baseType: !104, size: 32, offset: 704)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "notify_count", scope: !1506, file: !1507, line: 106, baseType: !104, size: 32, offset: 736)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "group_exit_task", scope: !1506, file: !1507, line: 107, baseType: !956, size: 64, offset: 768)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "group_stop_count", scope: !1506, file: !1507, line: 110, baseType: !104, size: 32, offset: 832)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1506, file: !1507, line: 111, baseType: !70, size: 32, offset: 864)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "is_child_subreaper", scope: !1506, file: !1507, line: 122, baseType: !70, size: 1, offset: 896, flags: DIFlagBitField, extraData: i64 896)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "has_child_subreaper", scope: !1506, file: !1507, line: 123, baseType: !70, size: 1, offset: 897, flags: DIFlagBitField, extraData: i64 896)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "posix_timer_id", scope: !1506, file: !1507, line: 128, baseType: !104, size: 32, offset: 928)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "posix_timers", scope: !1506, file: !1507, line: 129, baseType: !47, size: 128, offset: 960)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "real_timer", scope: !1506, file: !1507, line: 132, baseType: !1032, size: 512, offset: 1088)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "it_real_incr", scope: !1506, file: !1507, line: 133, baseType: !1041, size: 64, offset: 1600)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "it", scope: !1506, file: !1507, line: 140, baseType: !1539, size: 256, offset: 1664)
!1539 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1540, size: 256, elements: !1321)
!1540 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cpu_itimer", file: !1507, line: 38, size: 128, elements: !1541)
!1541 = !{!1542, !1543}
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "expires", scope: !1540, file: !1507, line: 39, baseType: !265, size: 64)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1540, file: !1507, line: 40, baseType: !265, size: 64, offset: 64)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "cputimer", scope: !1506, file: !1507, line: 146, baseType: !1545, size: 192, offset: 1920)
!1545 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "thread_group_cputimer", file: !1507, line: 66, size: 192, elements: !1546)
!1546 = !{!1547}
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "cputime_atomic", scope: !1545, file: !1507, line: 67, baseType: !1548, size: 192)
!1548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "task_cputime_atomic", file: !1507, line: 47, size: 192, elements: !1549)
!1549 = !{!1550, !1551, !1552}
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "utime", scope: !1548, file: !1507, line: 48, baseType: !20, size: 64)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "stime", scope: !1548, file: !1507, line: 49, baseType: !20, size: 64, offset: 64)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "sum_exec_runtime", scope: !1548, file: !1507, line: 50, baseType: !20, size: 64, offset: 128)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "posix_cputimers", scope: !1506, file: !1507, line: 150, baseType: !1282, size: 640, offset: 2112)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "pids", scope: !1506, file: !1507, line: 153, baseType: !1555, size: 256, offset: 2752)
!1555 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1222, size: 256, elements: !917)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "tty_old_pgrp", scope: !1506, file: !1507, line: 159, baseType: !1222, size: 64, offset: 3008)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "leader", scope: !1506, file: !1507, line: 162, baseType: !104, size: 32, offset: 3072)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "tty", scope: !1506, file: !1507, line: 164, baseType: !1559, size: 64, offset: 3136)
!1559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1560, size: 64)
!1560 = !DICompositeType(tag: DW_TAG_structure_type, name: "tty_struct", file: !1507, line: 164, flags: DIFlagFwdDecl)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "stats_lock", scope: !1506, file: !1507, line: 175, baseType: !1562, size: 32, offset: 3200)
!1562 = !DIDerivedType(tag: DW_TAG_typedef, name: "seqlock_t", file: !234, line: 805, baseType: !1563)
!1563 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !234, line: 798, size: 32, elements: !1564)
!1564 = !{!1565, !1566}
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "seqcount", scope: !1563, file: !234, line: 803, baseType: !233, size: 32)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1563, file: !234, line: 804, baseType: !31, offset: 32)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "utime", scope: !1506, file: !1507, line: 176, baseType: !265, size: 64, offset: 3264)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "stime", scope: !1506, file: !1507, line: 176, baseType: !265, size: 64, offset: 3328)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "cutime", scope: !1506, file: !1507, line: 176, baseType: !265, size: 64, offset: 3392)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "cstime", scope: !1506, file: !1507, line: 176, baseType: !265, size: 64, offset: 3456)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "gtime", scope: !1506, file: !1507, line: 177, baseType: !265, size: 64, offset: 3520)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "cgtime", scope: !1506, file: !1507, line: 178, baseType: !265, size: 64, offset: 3584)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "prev_cputime", scope: !1506, file: !1507, line: 179, baseType: !1270, size: 128, offset: 3648)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "nvcsw", scope: !1506, file: !1507, line: 180, baseType: !57, size: 64, offset: 3776)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "nivcsw", scope: !1506, file: !1507, line: 180, baseType: !57, size: 64, offset: 3840)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "cnvcsw", scope: !1506, file: !1507, line: 180, baseType: !57, size: 64, offset: 3904)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "cnivcsw", scope: !1506, file: !1507, line: 180, baseType: !57, size: 64, offset: 3968)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "min_flt", scope: !1506, file: !1507, line: 181, baseType: !57, size: 64, offset: 4032)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "maj_flt", scope: !1506, file: !1507, line: 181, baseType: !57, size: 64, offset: 4096)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "cmin_flt", scope: !1506, file: !1507, line: 181, baseType: !57, size: 64, offset: 4160)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "cmaj_flt", scope: !1506, file: !1507, line: 181, baseType: !57, size: 64, offset: 4224)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "inblock", scope: !1506, file: !1507, line: 182, baseType: !57, size: 64, offset: 4288)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "oublock", scope: !1506, file: !1507, line: 182, baseType: !57, size: 64, offset: 4352)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "cinblock", scope: !1506, file: !1507, line: 182, baseType: !57, size: 64, offset: 4416)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "coublock", scope: !1506, file: !1507, line: 182, baseType: !57, size: 64, offset: 4480)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "maxrss", scope: !1506, file: !1507, line: 183, baseType: !57, size: 64, offset: 4544)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "cmaxrss", scope: !1506, file: !1507, line: 183, baseType: !57, size: 64, offset: 4608)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "ioac", scope: !1506, file: !1507, line: 184, baseType: !1589, offset: 4672)
!1589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "task_io_accounting", file: !1590, line: 12, elements: !45)
!1590 = !DIFile(filename: "./include/linux/task_io_accounting.h", directory: "/home/lizy2001/genbc/linux")
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "sum_sched_runtime", scope: !1506, file: !1507, line: 192, baseType: !267, size: 64, offset: 4672)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "rlim", scope: !1506, file: !1507, line: 203, baseType: !1593, size: 2048, offset: 4736)
!1593 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1594, size: 2048, elements: !1487)
!1594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rlimit", file: !1595, line: 43, size: 128, elements: !1596)
!1595 = !DIFile(filename: "./include/uapi/linux/resource.h", directory: "/home/lizy2001/genbc/linux")
!1596 = !{!1597, !1598}
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_cur", scope: !1594, file: !1595, line: 44, baseType: !169, size: 64)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "rlim_max", scope: !1594, file: !1595, line: 45, baseType: !169, size: 64, offset: 64)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "oom_flag_origin", scope: !1506, file: !1507, line: 220, baseType: !331, size: 8, offset: 6784)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "oom_score_adj", scope: !1506, file: !1507, line: 221, baseType: !945, size: 16, offset: 6800)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "oom_score_adj_min", scope: !1506, file: !1507, line: 222, baseType: !945, size: 16, offset: 6816)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "oom_mm", scope: !1506, file: !1507, line: 224, baseType: !816, size: 64, offset: 6848)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "cred_guard_mutex", scope: !1506, file: !1507, line: 227, baseType: !14, size: 192, offset: 6912)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "exec_update_mutex", scope: !1506, file: !1507, line: 233, baseType: !14, size: 192, offset: 7104)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "sighand", scope: !957, file: !958, line: 970, baseType: !1606, size: 64, offset: 9280)
!1606 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1607, size: 64)
!1607 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sighand_struct", file: !1507, line: 20, size: 16576, elements: !1608)
!1608 = !{!1609, !1610, !1611, !1612}
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "siglock", scope: !1607, file: !1507, line: 21, baseType: !31)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1607, file: !1507, line: 22, baseType: !970, size: 32)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "signalfd_wqh", scope: !1607, file: !1507, line: 23, baseType: !1233, size: 128, offset: 64)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "action", scope: !1607, file: !1507, line: 24, baseType: !1613, size: 16384, offset: 192)
!1613 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1614, size: 16384, elements: !125)
!1614 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "k_sigaction", file: !1517, line: 49, size: 256, elements: !1615)
!1615 = !{!1616}
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "sa", scope: !1614, file: !1517, line: 50, baseType: !1617, size: 256)
!1617 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sigaction", file: !1517, line: 35, size: 256, elements: !1618)
!1618 = !{!1619, !1626, !1627, !1633}
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "sa_handler", scope: !1617, file: !1517, line: 37, baseType: !1620, size: 64)
!1620 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sighandler_t", file: !1621, line: 19, baseType: !1622)
!1621 = !DIFile(filename: "./include/uapi/asm-generic/signal-defs.h", directory: "/home/lizy2001/genbc/linux")
!1622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1623, size: 64)
!1623 = !DIDerivedType(tag: DW_TAG_typedef, name: "__signalfn_t", file: !1621, line: 18, baseType: !1624)
!1624 = !DISubroutineType(types: !1625)
!1625 = !{null, !104}
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "sa_flags", scope: !1617, file: !1517, line: 38, baseType: !57, size: 64, offset: 64)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "sa_restorer", scope: !1617, file: !1517, line: 44, baseType: !1628, size: 64, offset: 128)
!1628 = !DIDerivedType(tag: DW_TAG_typedef, name: "__sigrestore_t", file: !1621, line: 22, baseType: !1629)
!1629 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1630, size: 64)
!1630 = !DIDerivedType(tag: DW_TAG_typedef, name: "__restorefn_t", file: !1621, line: 21, baseType: !1631)
!1631 = !DISubroutineType(types: !1632)
!1632 = !{null}
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "sa_mask", scope: !1617, file: !1517, line: 46, baseType: !1521, size: 64, offset: 192)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "blocked", scope: !957, file: !958, line: 971, baseType: !1521, size: 64, offset: 9344)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "real_blocked", scope: !957, file: !958, line: 972, baseType: !1521, size: 64, offset: 9408)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "saved_sigmask", scope: !957, file: !958, line: 974, baseType: !1521, size: 64, offset: 9472)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "pending", scope: !957, file: !958, line: 975, baseType: !1516, size: 192, offset: 9536)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "sas_ss_sp", scope: !957, file: !958, line: 976, baseType: !57, size: 64, offset: 9728)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "sas_ss_size", scope: !957, file: !958, line: 977, baseType: !167, size: 64, offset: 9792)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "sas_ss_flags", scope: !957, file: !958, line: 978, baseType: !70, size: 32, offset: 9856)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "task_works", scope: !957, file: !958, line: 980, baseType: !214, size: 64, offset: 9920)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "seccomp", scope: !957, file: !958, line: 989, baseType: !1643, size: 128, offset: 9984)
!1643 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "seccomp", file: !1644, line: 35, size: 128, elements: !1645)
!1644 = !DIFile(filename: "./include/linux/seccomp.h", directory: "/home/lizy2001/genbc/linux")
!1645 = !{!1646, !1647, !1648}
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1643, file: !1644, line: 36, baseType: !104, size: 32)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "filter_count", scope: !1643, file: !1644, line: 37, baseType: !589, size: 32, offset: 32)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1643, file: !1644, line: 38, baseType: !1649, size: 64, offset: 64)
!1649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1650, size: 64)
!1650 = !DICompositeType(tag: DW_TAG_structure_type, name: "seccomp_filter", file: !1644, line: 23, flags: DIFlagFwdDecl)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "parent_exec_id", scope: !957, file: !958, line: 992, baseType: !265, size: 64, offset: 10112)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "self_exec_id", scope: !957, file: !958, line: 993, baseType: !265, size: 64, offset: 10176)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_lock", scope: !957, file: !958, line: 996, baseType: !31, offset: 10240)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "pi_lock", scope: !957, file: !958, line: 999, baseType: !615, offset: 10240)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "wake_q", scope: !957, file: !958, line: 1001, baseType: !1656, size: 64, offset: 10240)
!1656 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wake_q_node", file: !958, line: 636, size: 64, elements: !1657)
!1657 = !{!1658}
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1656, file: !958, line: 637, baseType: !1659, size: 64)
!1659 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1656, size: 64)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "pi_waiters", scope: !957, file: !958, line: 1005, baseType: !594, size: 128, offset: 10304)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "pi_top_task", scope: !957, file: !958, line: 1007, baseType: !956, size: 64, offset: 10432)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "pi_blocked_on", scope: !957, file: !958, line: 1009, baseType: !1663, size: 64, offset: 10496)
!1663 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1664, size: 64)
!1664 = !DICompositeType(tag: DW_TAG_structure_type, name: "rt_mutex_waiter", file: !958, line: 1009, flags: DIFlagFwdDecl)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "journal_info", scope: !957, file: !958, line: 1043, baseType: !64, size: 64, offset: 10560)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "bio_list", scope: !957, file: !958, line: 1046, baseType: !1667, size: 64, offset: 10624)
!1667 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1668, size: 64)
!1668 = !DICompositeType(tag: DW_TAG_structure_type, name: "bio_list", file: !958, line: 41, flags: DIFlagFwdDecl)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "plug", scope: !957, file: !958, line: 1050, baseType: !1670, size: 64, offset: 10688)
!1670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1671, size: 64)
!1671 = !DICompositeType(tag: DW_TAG_structure_type, name: "blk_plug", file: !958, line: 42, flags: DIFlagFwdDecl)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "reclaim_state", scope: !957, file: !958, line: 1054, baseType: !1673, size: 64, offset: 10752)
!1673 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1674, size: 64)
!1674 = !DICompositeType(tag: DW_TAG_structure_type, name: "reclaim_state", file: !958, line: 55, flags: DIFlagFwdDecl)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "backing_dev_info", scope: !957, file: !958, line: 1056, baseType: !1676, size: 64, offset: 10816)
!1676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1677, size: 64)
!1677 = !DICompositeType(tag: DW_TAG_structure_type, name: "backing_dev_info", file: !958, line: 40, flags: DIFlagFwdDecl)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "io_context", scope: !957, file: !958, line: 1058, baseType: !1679, size: 64, offset: 10880)
!1679 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1680, size: 64)
!1680 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "io_context", file: !1681, line: 99, size: 704, elements: !1682)
!1681 = !DIFile(filename: "./include/linux/iocontext.h", directory: "/home/lizy2001/genbc/linux")
!1682 = !{!1683, !1684, !1685, !1686, !1687, !1688, !1689, !1708, !1709}
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "refcount", scope: !1680, file: !1681, line: 100, baseType: !18, size: 64)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "active_ref", scope: !1680, file: !1681, line: 101, baseType: !589, size: 32, offset: 64)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "nr_tasks", scope: !1680, file: !1681, line: 102, baseType: !589, size: 32, offset: 96)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !1680, file: !1681, line: 105, baseType: !31, offset: 128)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "ioprio", scope: !1680, file: !1681, line: 107, baseType: !162, size: 16, offset: 128)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "icq_tree", scope: !1680, file: !1681, line: 109, baseType: !581, size: 128, offset: 192)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "icq_hint", scope: !1680, file: !1681, line: 110, baseType: !1690, size: 64, offset: 320)
!1690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1691, size: 64)
!1691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "io_cq", file: !1681, line: 73, size: 448, elements: !1692)
!1692 = !{!1693, !1696, !1697, !1702, !1707}
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "q", scope: !1691, file: !1681, line: 74, baseType: !1694, size: 64)
!1694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1695, size: 64)
!1695 = !DICompositeType(tag: DW_TAG_structure_type, name: "request_queue", file: !1681, line: 74, flags: DIFlagFwdDecl)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "ioc", scope: !1691, file: !1681, line: 75, baseType: !1679, size: 64, offset: 64)
!1697 = !DIDerivedType(tag: DW_TAG_member, scope: !1691, file: !1681, line: 83, baseType: !1698, size: 128, offset: 128)
!1698 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1691, file: !1681, line: 83, size: 128, elements: !1699)
!1699 = !{!1700, !1701}
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "q_node", scope: !1698, file: !1681, line: 84, baseType: !47, size: 128)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "__rcu_icq_cache", scope: !1698, file: !1681, line: 85, baseType: !777, size: 64)
!1702 = !DIDerivedType(tag: DW_TAG_member, scope: !1691, file: !1681, line: 87, baseType: !1703, size: 128, offset: 256)
!1703 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1691, file: !1681, line: 87, size: 128, elements: !1704)
!1704 = !{!1705, !1706}
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "ioc_node", scope: !1703, file: !1681, line: 88, baseType: !481, size: 128)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "__rcu_head", scope: !1703, file: !1681, line: 89, baseType: !211, size: 128, align: 64)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1691, file: !1681, line: 92, baseType: !70, size: 32, offset: 384)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "icq_list", scope: !1680, file: !1681, line: 111, baseType: !477, size: 64, offset: 384)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "release_work", scope: !1680, file: !1681, line: 113, baseType: !1710, size: 256, offset: 448)
!1710 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "work_struct", file: !1711, line: 102, size: 256, elements: !1712)
!1711 = !DIFile(filename: "./include/linux/workqueue.h", directory: "/home/lizy2001/genbc/linux")
!1712 = !{!1713, !1714, !1715}
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1710, file: !1711, line: 103, baseType: !18, size: 64)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !1710, file: !1711, line: 104, baseType: !47, size: 128, offset: 64)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !1710, file: !1711, line: 105, baseType: !1716, size: 64, offset: 192)
!1716 = !DIDerivedType(tag: DW_TAG_typedef, name: "work_func_t", file: !1711, line: 21, baseType: !1717)
!1717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1718, size: 64)
!1718 = !DISubroutineType(types: !1719)
!1719 = !{null, !1720}
!1720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1710, size: 64)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "capture_control", scope: !957, file: !958, line: 1061, baseType: !1722, size: 64, offset: 10944)
!1722 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1723, size: 64)
!1723 = !DICompositeType(tag: DW_TAG_structure_type, name: "capture_control", file: !958, line: 43, flags: DIFlagFwdDecl)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace_message", scope: !957, file: !958, line: 1064, baseType: !57, size: 64, offset: 11008)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "last_siginfo", scope: !957, file: !958, line: 1065, baseType: !1726, size: 64, offset: 11072)
!1726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1727, size: 64)
!1727 = !DIDerivedType(tag: DW_TAG_typedef, name: "kernel_siginfo_t", file: !1517, line: 14, baseType: !1728)
!1728 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernel_siginfo", file: !1517, line: 12, size: 384, elements: !1729)
!1729 = !{!1730}
!1730 = !DIDerivedType(tag: DW_TAG_member, scope: !1728, file: !1517, line: 13, baseType: !1731, size: 384)
!1731 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1728, file: !1517, line: 13, size: 384, elements: !1732)
!1732 = !{!1733, !1734, !1735, !1736}
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "si_signo", scope: !1731, file: !1517, line: 13, baseType: !104, size: 32)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "si_errno", scope: !1731, file: !1517, line: 13, baseType: !104, size: 32, offset: 32)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "si_code", scope: !1731, file: !1517, line: 13, baseType: !104, size: 32, offset: 64)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "_sifields", scope: !1731, file: !1517, line: 13, baseType: !1737, size: 256, offset: 128)
!1737 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "__sifields", file: !1738, line: 32, size: 256, elements: !1739)
!1738 = !DIFile(filename: "./include/uapi/asm-generic/siginfo.h", directory: "/home/lizy2001/genbc/linux")
!1739 = !{!1740, !1745, !1758, !1764, !1773, !1793, !1798}
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "_kill", scope: !1737, file: !1738, line: 37, baseType: !1741, size: 64)
!1741 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1737, file: !1738, line: 34, size: 64, elements: !1742)
!1742 = !{!1743, !1744}
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "_pid", scope: !1741, file: !1738, line: 35, baseType: !1211, size: 32)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "_uid", scope: !1741, file: !1738, line: 36, baseType: !285, size: 32, offset: 32)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "_timer", scope: !1737, file: !1738, line: 45, baseType: !1746, size: 192)
!1746 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1737, file: !1738, line: 40, size: 192, elements: !1747)
!1747 = !{!1748, !1750, !1751, !1757}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "_tid", scope: !1746, file: !1738, line: 41, baseType: !1749, size: 32)
!1749 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_timer_t", file: !153, line: 95, baseType: !104)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "_overrun", scope: !1746, file: !1738, line: 42, baseType: !104, size: 32, offset: 32)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "_sigval", scope: !1746, file: !1738, line: 43, baseType: !1752, size: 64, offset: 64)
!1752 = !DIDerivedType(tag: DW_TAG_typedef, name: "sigval_t", file: !1738, line: 11, baseType: !1753)
!1753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "sigval", file: !1738, line: 8, size: 64, elements: !1754)
!1754 = !{!1755, !1756}
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "sival_int", scope: !1753, file: !1738, line: 9, baseType: !104, size: 32)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "sival_ptr", scope: !1753, file: !1738, line: 10, baseType: !64, size: 64)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "_sys_private", scope: !1746, file: !1738, line: 44, baseType: !104, size: 32, offset: 128)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "_rt", scope: !1737, file: !1738, line: 52, baseType: !1759, size: 128)
!1759 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1737, file: !1738, line: 48, size: 128, elements: !1760)
!1760 = !{!1761, !1762, !1763}
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "_pid", scope: !1759, file: !1738, line: 49, baseType: !1211, size: 32)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "_uid", scope: !1759, file: !1738, line: 50, baseType: !285, size: 32, offset: 32)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "_sigval", scope: !1759, file: !1738, line: 51, baseType: !1752, size: 64, offset: 64)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "_sigchld", scope: !1737, file: !1738, line: 61, baseType: !1765, size: 256)
!1765 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1737, file: !1738, line: 55, size: 256, elements: !1766)
!1766 = !{!1767, !1768, !1769, !1770, !1772}
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "_pid", scope: !1765, file: !1738, line: 56, baseType: !1211, size: 32)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "_uid", scope: !1765, file: !1738, line: 57, baseType: !285, size: 32, offset: 32)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "_status", scope: !1765, file: !1738, line: 58, baseType: !104, size: 32, offset: 64)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "_utime", scope: !1765, file: !1738, line: 59, baseType: !1771, size: 64, offset: 128)
!1771 = !DIDerivedType(tag: DW_TAG_typedef, name: "__kernel_clock_t", file: !153, line: 94, baseType: !154)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "_stime", scope: !1765, file: !1738, line: 60, baseType: !1771, size: 64, offset: 192)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "_sigfault", scope: !1737, file: !1738, line: 95, baseType: !1774, size: 256)
!1774 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1737, file: !1738, line: 64, size: 256, elements: !1775)
!1775 = !{!1776, !1777}
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "_addr", scope: !1774, file: !1738, line: 65, baseType: !64, size: 64)
!1777 = !DIDerivedType(tag: DW_TAG_member, scope: !1774, file: !1738, line: 77, baseType: !1778, size: 192, offset: 64)
!1778 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1774, file: !1738, line: 77, size: 192, elements: !1779)
!1779 = !{!1780, !1781, !1788}
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "_addr_lsb", scope: !1778, file: !1738, line: 82, baseType: !945, size: 16)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "_addr_bnd", scope: !1778, file: !1738, line: 88, baseType: !1782, size: 192)
!1782 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1778, file: !1738, line: 84, size: 192, elements: !1783)
!1783 = !{!1784, !1786, !1787}
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "_dummy_bnd", scope: !1782, file: !1738, line: 85, baseType: !1785, size: 64)
!1785 = !DICompositeType(tag: DW_TAG_array_type, baseType: !83, size: 64, elements: !1075)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "_lower", scope: !1782, file: !1738, line: 86, baseType: !64, size: 64, offset: 64)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "_upper", scope: !1782, file: !1738, line: 87, baseType: !64, size: 64, offset: 128)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "_addr_pkey", scope: !1778, file: !1738, line: 93, baseType: !1789, size: 96)
!1789 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1778, file: !1738, line: 90, size: 96, elements: !1790)
!1790 = !{!1791, !1792}
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "_dummy_pkey", scope: !1789, file: !1738, line: 91, baseType: !1785, size: 64)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "_pkey", scope: !1789, file: !1738, line: 92, baseType: !262, size: 32, offset: 64)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "_sigpoll", scope: !1737, file: !1738, line: 101, baseType: !1794, size: 128)
!1794 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1737, file: !1738, line: 98, size: 128, elements: !1795)
!1795 = !{!1796, !1797}
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "_band", scope: !1794, file: !1738, line: 99, baseType: !155, size: 64)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "_fd", scope: !1794, file: !1738, line: 100, baseType: !104, size: 32, offset: 64)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "_sigsys", scope: !1737, file: !1738, line: 108, baseType: !1799, size: 128)
!1799 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1737, file: !1738, line: 104, size: 128, elements: !1800)
!1800 = !{!1801, !1802, !1803}
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "_call_addr", scope: !1799, file: !1738, line: 105, baseType: !64, size: 64)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "_syscall", scope: !1799, file: !1738, line: 106, baseType: !104, size: 32, offset: 64)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "_arch", scope: !1799, file: !1738, line: 107, baseType: !70, size: 32, offset: 96)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "ioac", scope: !957, file: !958, line: 1067, baseType: !1589, offset: 11136)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "robust_list", scope: !957, file: !958, line: 1099, baseType: !1806, size: 64, offset: 11136)
!1806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1807, size: 64)
!1807 = !DICompositeType(tag: DW_TAG_structure_type, name: "robust_list_head", file: !958, line: 56, flags: DIFlagFwdDecl)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "pi_state_list", scope: !957, file: !958, line: 1103, baseType: !47, size: 128, offset: 11200)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "pi_state_cache", scope: !957, file: !958, line: 1104, baseType: !1810, size: 64, offset: 11328)
!1810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1811, size: 64)
!1811 = !DICompositeType(tag: DW_TAG_structure_type, name: "futex_pi_state", file: !958, line: 46, flags: DIFlagFwdDecl)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "futex_exit_mutex", scope: !957, file: !958, line: 1105, baseType: !14, size: 192, offset: 11392)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "futex_state", scope: !957, file: !958, line: 1106, baseType: !70, size: 32, offset: 11584)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "perf_event_ctxp", scope: !957, file: !958, line: 1109, baseType: !1815, size: 128, offset: 11648)
!1815 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1816, size: 128, elements: !1321)
!1816 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1817, size: 64)
!1817 = !DICompositeType(tag: DW_TAG_structure_type, name: "perf_event_context", file: !958, line: 51, flags: DIFlagFwdDecl)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "perf_event_mutex", scope: !957, file: !958, line: 1110, baseType: !14, size: 192, offset: 11776)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "perf_event_list", scope: !957, file: !958, line: 1111, baseType: !47, size: 128, offset: 11968)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "rseq", scope: !957, file: !958, line: 1173, baseType: !1821, size: 64, offset: 12096)
!1821 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1822, size: 64)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rseq", file: !1823, line: 62, size: 256, align: 256, elements: !1824)
!1823 = !DIFile(filename: "./include/uapi/linux/rseq.h", directory: "/home/lizy2001/genbc/linux")
!1824 = !{!1825, !1826, !1827, !1832}
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "cpu_id_start", scope: !1822, file: !1823, line: 75, baseType: !262, size: 32)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "cpu_id", scope: !1822, file: !1823, line: 90, baseType: !262, size: 32, offset: 32)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "rseq_cs", scope: !1822, file: !1823, line: 124, baseType: !1828, size: 64, offset: 64)
!1828 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1822, file: !1823, line: 109, size: 64, elements: !1829)
!1829 = !{!1830, !1831}
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "ptr64", scope: !1828, file: !1823, line: 110, baseType: !266, size: 64)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !1828, file: !1823, line: 112, baseType: !266, size: 64)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1822, file: !1823, line: 144, baseType: !262, size: 32, offset: 128)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "rseq_sig", scope: !957, file: !958, line: 1174, baseType: !261, size: 32, offset: 12160)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "rseq_event_mask", scope: !957, file: !958, line: 1179, baseType: !57, size: 64, offset: 12224)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "tlb_ubc", scope: !957, file: !958, line: 1182, baseType: !1836, size: 128, offset: 12288)
!1836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tlbflush_unmap_batch", file: !913, line: 76, size: 128, elements: !1837)
!1837 = !{!1838, !1843, !1844}
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1836, file: !913, line: 85, baseType: !1839, size: 64)
!1839 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "arch_tlbflush_unmap_batch", file: !1840, line: 7, size: 64, elements: !1841)
!1840 = !DIFile(filename: "./arch/x86/include/asm/tlbbatch.h", directory: "/home/lizy2001/genbc/linux")
!1841 = !{!1842}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "cpumask", scope: !1839, file: !1840, line: 12, baseType: !1112, size: 64)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flush_required", scope: !1836, file: !913, line: 88, baseType: !331, size: 8, offset: 64)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "writable", scope: !1836, file: !913, line: 95, baseType: !331, size: 8, offset: 72)
!1845 = !DIDerivedType(tag: DW_TAG_member, scope: !957, file: !958, line: 1184, baseType: !1846, size: 128, offset: 12416)
!1846 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !957, file: !958, line: 1184, size: 128, elements: !1847)
!1847 = !{!1848, !1849}
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "rcu_users", scope: !1846, file: !958, line: 1185, baseType: !970, size: 32)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !1846, file: !958, line: 1186, baseType: !211, size: 128, align: 64)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "splice_pipe", scope: !957, file: !958, line: 1190, baseType: !1851, size: 64, offset: 12544)
!1851 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1852, size: 64)
!1852 = !DICompositeType(tag: DW_TAG_structure_type, name: "pipe_inode_info", file: !958, line: 53, flags: DIFlagFwdDecl)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "task_frag", scope: !957, file: !958, line: 1192, baseType: !1854, size: 128, offset: 12608)
!1854 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "page_frag", file: !913, line: 64, size: 128, elements: !1855)
!1855 = !{!1856, !1857, !1858}
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "page", scope: !1854, file: !913, line: 65, baseType: !563, size: 64)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1854, file: !913, line: 67, baseType: !262, size: 32, offset: 64)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1854, file: !913, line: 68, baseType: !262, size: 32, offset: 96)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "nr_dirtied", scope: !957, file: !958, line: 1206, baseType: !104, size: 32, offset: 12736)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "nr_dirtied_pause", scope: !957, file: !958, line: 1207, baseType: !104, size: 32, offset: 12768)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "dirty_paused_when", scope: !957, file: !958, line: 1209, baseType: !57, size: 64, offset: 12800)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "timer_slack_ns", scope: !957, file: !958, line: 1219, baseType: !265, size: 64, offset: 12864)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "default_timer_slack_ns", scope: !957, file: !958, line: 1220, baseType: !265, size: 64, offset: 12928)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "pagefault_disabled", scope: !957, file: !958, line: 1317, baseType: !104, size: 32, offset: 12992)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "oom_reaper_list", scope: !957, file: !958, line: 1319, baseType: !956, size: 64, offset: 13056)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "stack_vm_area", scope: !957, file: !958, line: 1322, baseType: !1867, size: 64, offset: 13120)
!1867 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1868, size: 64)
!1868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vm_struct", file: !1869, line: 56, size: 512, elements: !1870)
!1869 = !DIFile(filename: "./include/linux/vmalloc.h", directory: "/home/lizy2001/genbc/linux")
!1870 = !{!1871, !1872, !1873, !1874, !1875, !1876, !1877, !1879}
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1868, file: !1869, line: 57, baseType: !1867, size: 64)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "addr", scope: !1868, file: !1869, line: 58, baseType: !64, size: 64, offset: 64)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1868, file: !1869, line: 59, baseType: !57, size: 64, offset: 128)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1868, file: !1869, line: 60, baseType: !57, size: 64, offset: 192)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "pages", scope: !1868, file: !1869, line: 61, baseType: !655, size: 64, offset: 256)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "nr_pages", scope: !1868, file: !1869, line: 62, baseType: !70, size: 32, offset: 320)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "phys_addr", scope: !1868, file: !1869, line: 63, baseType: !1878, size: 64, offset: 384)
!1878 = !DIDerivedType(tag: DW_TAG_typedef, name: "phys_addr_t", file: !21, line: 153, baseType: !265)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "caller", scope: !1868, file: !1869, line: 64, baseType: !1880, size: 64, offset: 448)
!1880 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1881, size: 64)
!1881 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "stack_refcount", scope: !957, file: !958, line: 1326, baseType: !970, size: 32, offset: 13184)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "mce_vaddr", scope: !957, file: !958, line: 1342, baseType: !64, size: 64, offset: 13248)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "mce_kflags", scope: !957, file: !958, line: 1343, baseType: !266, size: 64, offset: 13312)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "mce_addr", scope: !957, file: !958, line: 1344, baseType: !265, size: 64, offset: 13376)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "mce_ripv", scope: !957, file: !958, line: 1345, baseType: !266, size: 1, offset: 13440, flags: DIFlagBitField, extraData: i64 13440)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "mce_whole_page", scope: !957, file: !958, line: 1346, baseType: !266, size: 1, offset: 13441, flags: DIFlagBitField, extraData: i64 13440)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "__mce_reserved", scope: !957, file: !958, line: 1347, baseType: !266, size: 62, offset: 13442, flags: DIFlagBitField, extraData: i64 13440)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "mce_kill_me", scope: !957, file: !958, line: 1348, baseType: !211, size: 128, align: 64, offset: 13504)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "thread", scope: !957, file: !958, line: 1358, baseType: !1891, size: 34816, offset: 13824)
!1891 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "thread_struct", file: !1892, line: 485, size: 34816, elements: !1893)
!1892 = !DIFile(filename: "./arch/x86/include/asm/processor.h", directory: "/home/lizy2001/genbc/linux")
!1893 = !{!1894, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1923, !1924, !1925, !1926, !1927, !1928, !1931, !1932, !1933}
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "tls_array", scope: !1891, file: !1892, line: 487, baseType: !1895, size: 192)
!1895 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1896, size: 192, elements: !121)
!1896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "desc_struct", file: !1897, line: 16, size: 64, elements: !1898)
!1897 = !DIFile(filename: "./arch/x86/include/asm/desc_defs.h", directory: "/home/lizy2001/genbc/linux")
!1898 = !{!1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911}
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "limit0", scope: !1896, file: !1897, line: 17, baseType: !694, size: 16)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "base0", scope: !1896, file: !1897, line: 18, baseType: !694, size: 16, offset: 16)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "base1", scope: !1896, file: !1897, line: 19, baseType: !694, size: 8, offset: 32, flags: DIFlagBitField, extraData: i64 32)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1896, file: !1897, line: 19, baseType: !694, size: 4, offset: 40, flags: DIFlagBitField, extraData: i64 32)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !1896, file: !1897, line: 19, baseType: !694, size: 1, offset: 44, flags: DIFlagBitField, extraData: i64 32)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "dpl", scope: !1896, file: !1897, line: 19, baseType: !694, size: 2, offset: 45, flags: DIFlagBitField, extraData: i64 32)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !1896, file: !1897, line: 19, baseType: !694, size: 1, offset: 47, flags: DIFlagBitField, extraData: i64 32)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "limit1", scope: !1896, file: !1897, line: 20, baseType: !694, size: 4, offset: 48, flags: DIFlagBitField, extraData: i64 32)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "avl", scope: !1896, file: !1897, line: 20, baseType: !694, size: 1, offset: 52, flags: DIFlagBitField, extraData: i64 32)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "l", scope: !1896, file: !1897, line: 20, baseType: !694, size: 1, offset: 53, flags: DIFlagBitField, extraData: i64 32)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "d", scope: !1896, file: !1897, line: 20, baseType: !694, size: 1, offset: 54, flags: DIFlagBitField, extraData: i64 32)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1896, file: !1897, line: 20, baseType: !694, size: 1, offset: 55, flags: DIFlagBitField, extraData: i64 32)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "base2", scope: !1896, file: !1897, line: 20, baseType: !694, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 32)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "sp", scope: !1891, file: !1892, line: 491, baseType: !57, size: 64, offset: 192)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "es", scope: !1891, file: !1892, line: 495, baseType: !162, size: 16, offset: 256)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !1891, file: !1892, line: 496, baseType: !162, size: 16, offset: 272)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "fsindex", scope: !1891, file: !1892, line: 497, baseType: !162, size: 16, offset: 288)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "gsindex", scope: !1891, file: !1892, line: 498, baseType: !162, size: 16, offset: 304)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "fsbase", scope: !1891, file: !1892, line: 502, baseType: !57, size: 64, offset: 320)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1891, file: !1892, line: 503, baseType: !57, size: 64, offset: 384)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace_bps", scope: !1891, file: !1892, line: 514, baseType: !1920, size: 256, offset: 448)
!1920 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1921, size: 256, elements: !917)
!1921 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1922, size: 64)
!1922 = !DICompositeType(tag: DW_TAG_structure_type, name: "perf_event", file: !1892, line: 483, flags: DIFlagFwdDecl)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_dr6", scope: !1891, file: !1892, line: 516, baseType: !57, size: 64, offset: 704)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "ptrace_dr7", scope: !1891, file: !1892, line: 518, baseType: !57, size: 64, offset: 768)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "cr2", scope: !1891, file: !1892, line: 520, baseType: !57, size: 64, offset: 832)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "trap_nr", scope: !1891, file: !1892, line: 521, baseType: !57, size: 64, offset: 896)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "error_code", scope: !1891, file: !1892, line: 522, baseType: !57, size: 64, offset: 960)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "io_bitmap", scope: !1891, file: !1892, line: 528, baseType: !1929, size: 64, offset: 1024)
!1929 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1930, size: 64)
!1930 = !DICompositeType(tag: DW_TAG_structure_type, name: "io_bitmap", file: !1892, line: 10, flags: DIFlagFwdDecl)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "iopl_emul", scope: !1891, file: !1892, line: 535, baseType: !57, size: 64, offset: 1088)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "sig_on_uaccess_err", scope: !1891, file: !1892, line: 537, baseType: !70, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "fpu", scope: !1891, file: !1892, line: 540, baseType: !1934, size: 33280, offset: 1536)
!1934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fpu", file: !1935, line: 317, size: 33280, elements: !1936)
!1935 = !DIFile(filename: "./arch/x86/include/asm/fpu/types.h", directory: "/home/lizy2001/genbc/linux")
!1936 = !{!1937, !1938, !1939}
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "last_cpu", scope: !1934, file: !1935, line: 330, baseType: !70, size: 32)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "avx512_timestamp", scope: !1934, file: !1935, line: 337, baseType: !57, size: 64, offset: 64)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1934, file: !1935, line: 348, baseType: !1940, size: 32768, offset: 512)
!1940 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "fpregs_state", file: !1935, line: 304, size: 32768, elements: !1941)
!1941 = !{!1942, !1957, !1996, !2046, !2059}
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "fsave", scope: !1940, file: !1935, line: 305, baseType: !1943, size: 896)
!1943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fregs_state", file: !1935, line: 12, size: 896, elements: !1944)
!1944 = !{!1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1956}
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1943, file: !1935, line: 13, baseType: !261, size: 32)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1943, file: !1935, line: 14, baseType: !261, size: 32, offset: 32)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "twd", scope: !1943, file: !1935, line: 15, baseType: !261, size: 32, offset: 64)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "fip", scope: !1943, file: !1935, line: 16, baseType: !261, size: 32, offset: 96)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "fcs", scope: !1943, file: !1935, line: 17, baseType: !261, size: 32, offset: 128)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !1943, file: !1935, line: 18, baseType: !261, size: 32, offset: 160)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "fos", scope: !1943, file: !1935, line: 19, baseType: !261, size: 32, offset: 192)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "st_space", scope: !1943, file: !1935, line: 22, baseType: !1953, size: 640, offset: 224)
!1953 = !DICompositeType(tag: DW_TAG_array_type, baseType: !261, size: 640, elements: !1954)
!1954 = !{!1955}
!1955 = !DISubrange(count: 20)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !1943, file: !1935, line: 25, baseType: !261, size: 32, offset: 864)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "fxsave", scope: !1940, file: !1935, line: 306, baseType: !1958, size: 4096, align: 128)
!1958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fxregs_state", file: !1935, line: 34, size: 4096, align: 128, elements: !1959)
!1959 = !{!1960, !1961, !1962, !1963, !1964, !1979, !1980, !1981, !1985, !1987, !1991}
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1958, file: !1935, line: 35, baseType: !694, size: 16)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1958, file: !1935, line: 36, baseType: !694, size: 16, offset: 16)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "twd", scope: !1958, file: !1935, line: 37, baseType: !694, size: 16, offset: 32)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "fop", scope: !1958, file: !1935, line: 38, baseType: !694, size: 16, offset: 48)
!1964 = !DIDerivedType(tag: DW_TAG_member, scope: !1958, file: !1935, line: 39, baseType: !1965, size: 128, offset: 64)
!1965 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1958, file: !1935, line: 39, size: 128, elements: !1966)
!1966 = !{!1967, !1972}
!1967 = !DIDerivedType(tag: DW_TAG_member, scope: !1965, file: !1935, line: 40, baseType: !1968, size: 128)
!1968 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1965, file: !1935, line: 40, size: 128, elements: !1969)
!1969 = !{!1970, !1971}
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "rip", scope: !1968, file: !1935, line: 41, baseType: !265, size: 64)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "rdp", scope: !1968, file: !1935, line: 42, baseType: !265, size: 64, offset: 64)
!1972 = !DIDerivedType(tag: DW_TAG_member, scope: !1965, file: !1935, line: 44, baseType: !1973, size: 128)
!1973 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !1965, file: !1935, line: 44, size: 128, elements: !1974)
!1974 = !{!1975, !1976, !1977, !1978}
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "fip", scope: !1973, file: !1935, line: 45, baseType: !261, size: 32)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "fcs", scope: !1973, file: !1935, line: 46, baseType: !261, size: 32, offset: 32)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !1973, file: !1935, line: 47, baseType: !261, size: 32, offset: 64)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "fos", scope: !1973, file: !1935, line: 48, baseType: !261, size: 32, offset: 96)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr", scope: !1958, file: !1935, line: 51, baseType: !261, size: 32, offset: 192)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "mxcsr_mask", scope: !1958, file: !1935, line: 52, baseType: !261, size: 32, offset: 224)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "st_space", scope: !1958, file: !1935, line: 55, baseType: !1982, size: 1024, offset: 256)
!1982 = !DICompositeType(tag: DW_TAG_array_type, baseType: !261, size: 1024, elements: !1983)
!1983 = !{!1984}
!1984 = !DISubrange(count: 32)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "xmm_space", scope: !1958, file: !1935, line: 58, baseType: !1986, size: 2048, offset: 1280)
!1986 = !DICompositeType(tag: DW_TAG_array_type, baseType: !261, size: 2048, elements: !125)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "padding", scope: !1958, file: !1935, line: 60, baseType: !1988, size: 384, offset: 3328)
!1988 = !DICompositeType(tag: DW_TAG_array_type, baseType: !261, size: 384, elements: !1989)
!1989 = !{!1990}
!1990 = !DISubrange(count: 12)
!1991 = !DIDerivedType(tag: DW_TAG_member, scope: !1958, file: !1935, line: 62, baseType: !1992, size: 384, offset: 3712)
!1992 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1958, file: !1935, line: 62, size: 384, elements: !1993)
!1993 = !{!1994, !1995}
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "padding1", scope: !1992, file: !1935, line: 63, baseType: !1988, size: 384)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "sw_reserved", scope: !1992, file: !1935, line: 64, baseType: !1988, size: 384)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "soft", scope: !1940, file: !1935, line: 307, baseType: !1997, size: 1088)
!1997 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "swregs_state", file: !1935, line: 79, size: 1088, elements: !1998)
!1998 = !{!1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2045}
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "cwd", scope: !1997, file: !1935, line: 80, baseType: !261, size: 32)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "swd", scope: !1997, file: !1935, line: 81, baseType: !261, size: 32, offset: 32)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "twd", scope: !1997, file: !1935, line: 82, baseType: !261, size: 32, offset: 64)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "fip", scope: !1997, file: !1935, line: 83, baseType: !261, size: 32, offset: 96)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "fcs", scope: !1997, file: !1935, line: 84, baseType: !261, size: 32, offset: 128)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "foo", scope: !1997, file: !1935, line: 85, baseType: !261, size: 32, offset: 160)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "fos", scope: !1997, file: !1935, line: 86, baseType: !261, size: 32, offset: 192)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "st_space", scope: !1997, file: !1935, line: 88, baseType: !1953, size: 640, offset: 224)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "ftop", scope: !1997, file: !1935, line: 89, baseType: !1097, size: 8, offset: 864)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "changed", scope: !1997, file: !1935, line: 90, baseType: !1097, size: 8, offset: 872)
!2009 = !DIDerivedType(tag: DW_TAG_member, name: "lookahead", scope: !1997, file: !1935, line: 91, baseType: !1097, size: 8, offset: 880)
!2010 = !DIDerivedType(tag: DW_TAG_member, name: "no_update", scope: !1997, file: !1935, line: 92, baseType: !1097, size: 8, offset: 888)
!2011 = !DIDerivedType(tag: DW_TAG_member, name: "rm", scope: !1997, file: !1935, line: 93, baseType: !1097, size: 8, offset: 896)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "alimit", scope: !1997, file: !1935, line: 94, baseType: !1097, size: 8, offset: 904)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !1997, file: !1935, line: 95, baseType: !2014, size: 64, offset: 960)
!2014 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2015, size: 64)
!2015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "math_emu_info", file: !2016, line: 11, size: 128, elements: !2017)
!2016 = !DIFile(filename: "./arch/x86/include/asm/math_emu.h", directory: "/home/lizy2001/genbc/linux")
!2017 = !{!2018, !2019}
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "___orig_eip", scope: !2015, file: !2016, line: 12, baseType: !155, size: 64)
!2019 = !DIDerivedType(tag: DW_TAG_member, name: "regs", scope: !2015, file: !2016, line: 13, baseType: !2020, size: 64, offset: 64)
!2020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2021, size: 64)
!2021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_regs", file: !2022, line: 56, size: 1344, elements: !2023)
!2022 = !DIFile(filename: "./arch/x86/include/asm/ptrace.h", directory: "/home/lizy2001/genbc/linux")
!2023 = !{!2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044}
!2024 = !DIDerivedType(tag: DW_TAG_member, name: "r15", scope: !2021, file: !2022, line: 61, baseType: !57, size: 64)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "r14", scope: !2021, file: !2022, line: 62, baseType: !57, size: 64, offset: 64)
!2026 = !DIDerivedType(tag: DW_TAG_member, name: "r13", scope: !2021, file: !2022, line: 63, baseType: !57, size: 64, offset: 128)
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "r12", scope: !2021, file: !2022, line: 64, baseType: !57, size: 64, offset: 192)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "bp", scope: !2021, file: !2022, line: 65, baseType: !57, size: 64, offset: 256)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "bx", scope: !2021, file: !2022, line: 66, baseType: !57, size: 64, offset: 320)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "r11", scope: !2021, file: !2022, line: 68, baseType: !57, size: 64, offset: 384)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "r10", scope: !2021, file: !2022, line: 69, baseType: !57, size: 64, offset: 448)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "r9", scope: !2021, file: !2022, line: 70, baseType: !57, size: 64, offset: 512)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "r8", scope: !2021, file: !2022, line: 71, baseType: !57, size: 64, offset: 576)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "ax", scope: !2021, file: !2022, line: 72, baseType: !57, size: 64, offset: 640)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "cx", scope: !2021, file: !2022, line: 73, baseType: !57, size: 64, offset: 704)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "dx", scope: !2021, file: !2022, line: 74, baseType: !57, size: 64, offset: 768)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "si", scope: !2021, file: !2022, line: 75, baseType: !57, size: 64, offset: 832)
!2038 = !DIDerivedType(tag: DW_TAG_member, name: "di", scope: !2021, file: !2022, line: 76, baseType: !57, size: 64, offset: 896)
!2039 = !DIDerivedType(tag: DW_TAG_member, name: "orig_ax", scope: !2021, file: !2022, line: 81, baseType: !57, size: 64, offset: 960)
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "ip", scope: !2021, file: !2022, line: 83, baseType: !57, size: 64, offset: 1024)
!2041 = !DIDerivedType(tag: DW_TAG_member, name: "cs", scope: !2021, file: !2022, line: 84, baseType: !57, size: 64, offset: 1088)
!2042 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2021, file: !2022, line: 85, baseType: !57, size: 64, offset: 1152)
!2043 = !DIDerivedType(tag: DW_TAG_member, name: "sp", scope: !2021, file: !2022, line: 86, baseType: !57, size: 64, offset: 1216)
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !2021, file: !2022, line: 87, baseType: !57, size: 64, offset: 1280)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "entry_eip", scope: !1997, file: !1935, line: 96, baseType: !261, size: 32, offset: 1024)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "xsave", scope: !1940, file: !1935, line: 308, baseType: !2047, size: 4608, align: 512)
!2047 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "xregs_state", file: !1935, line: 289, size: 4608, align: 512, elements: !2048)
!2048 = !{!2049, !2050, !2057}
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "i387", scope: !2047, file: !1935, line: 290, baseType: !1958, size: 4096, align: 128)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2047, file: !1935, line: 291, baseType: !2051, size: 512, offset: 4096)
!2051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "xstate_header", file: !1935, line: 268, size: 512, elements: !2052)
!2052 = !{!2053, !2054, !2055}
!2053 = !DIDerivedType(tag: DW_TAG_member, name: "xfeatures", scope: !2051, file: !1935, line: 269, baseType: !265, size: 64)
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "xcomp_bv", scope: !2051, file: !1935, line: 270, baseType: !265, size: 64, offset: 64)
!2055 = !DIDerivedType(tag: DW_TAG_member, name: "reserved", scope: !2051, file: !1935, line: 271, baseType: !2056, size: 384, offset: 128)
!2056 = !DICompositeType(tag: DW_TAG_array_type, baseType: !265, size: 384, elements: !1377)
!2057 = !DIDerivedType(tag: DW_TAG_member, name: "extended_state_area", scope: !2047, file: !1935, line: 292, baseType: !2058, offset: 4608)
!2058 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1097, elements: !1475)
!2059 = !DIDerivedType(tag: DW_TAG_member, name: "__padding", scope: !1940, file: !1935, line: 309, baseType: !2060, size: 32768)
!2060 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1097, size: 32768, elements: !2061)
!2061 = !{!2062}
!2062 = !DISubrange(count: 4096)
!2063 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !953, file: !565, line: 378, baseType: !2064, size: 64, offset: 64)
!2064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !953, size: 64)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "startup", scope: !949, file: !565, line: 384, baseType: !1254, size: 192, offset: 192)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "ioctx_lock", scope: !820, file: !565, line: 500, baseType: !31, offset: 6656)
!2067 = !DIDerivedType(tag: DW_TAG_member, name: "ioctx_table", scope: !820, file: !565, line: 501, baseType: !2068, size: 64, offset: 6656)
!2068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2069, size: 64)
!2069 = !DICompositeType(tag: DW_TAG_structure_type, name: "kioctx_table", file: !565, line: 387, flags: DIFlagFwdDecl)
!2070 = !DIDerivedType(tag: DW_TAG_member, name: "user_ns", scope: !820, file: !565, line: 516, baseType: !1465, size: 64, offset: 6720)
!2071 = !DIDerivedType(tag: DW_TAG_member, name: "exe_file", scope: !820, file: !565, line: 519, baseType: !197, size: 64, offset: 6784)
!2072 = !DIDerivedType(tag: DW_TAG_member, name: "notifier_subscriptions", scope: !820, file: !565, line: 521, baseType: !2073, size: 64, offset: 6848)
!2073 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2074, size: 64)
!2074 = !DICompositeType(tag: DW_TAG_structure_type, name: "mmu_notifier_subscriptions", file: !565, line: 521, flags: DIFlagFwdDecl)
!2075 = !DIDerivedType(tag: DW_TAG_member, name: "tlb_flush_pending", scope: !820, file: !565, line: 545, baseType: !589, size: 32, offset: 6912)
!2076 = !DIDerivedType(tag: DW_TAG_member, name: "tlb_flush_batched", scope: !820, file: !565, line: 548, baseType: !331, size: 8, offset: 6944)
!2077 = !DIDerivedType(tag: DW_TAG_member, name: "uprobes_state", scope: !820, file: !565, line: 550, baseType: !2078, offset: 6952)
!2078 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "uprobes_state", file: !2079, line: 142, elements: !45)
!2079 = !DIFile(filename: "./include/linux/uprobes.h", directory: "/home/lizy2001/genbc/linux")
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "async_put_work", scope: !820, file: !565, line: 554, baseType: !1710, size: 256, offset: 6976)
!2081 = !DIDerivedType(tag: DW_TAG_member, name: "pasid", scope: !820, file: !565, line: 557, baseType: !261, size: 32, offset: 7232)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "cpu_bitmap", scope: !817, file: !565, line: 565, baseType: !2083, offset: 7296)
!2083 = !DICompositeType(tag: DW_TAG_array_type, baseType: !57, elements: !2084)
!2084 = !{!2085}
!2085 = !DISubrange(count: -1)
!2086 = !DIDerivedType(tag: DW_TAG_member, name: "pt_frag_refcount", scope: !813, file: !565, line: 151, baseType: !589, size: 32)
!2087 = !DIDerivedType(tag: DW_TAG_member, name: "ptl", scope: !806, file: !565, line: 156, baseType: !31, offset: 256)
!2088 = !DIDerivedType(tag: DW_TAG_member, scope: !569, file: !565, line: 159, baseType: !2089, size: 128)
!2089 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !569, file: !565, line: 159, size: 128, elements: !2090)
!2090 = !{!2091, !2094}
!2091 = !DIDerivedType(tag: DW_TAG_member, name: "pgmap", scope: !2089, file: !565, line: 161, baseType: !2092, size: 64)
!2092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2093, size: 64)
!2093 = !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pagemap", file: !565, line: 161, flags: DIFlagFwdDecl)
!2094 = !DIDerivedType(tag: DW_TAG_member, name: "zone_device_data", scope: !2089, file: !565, line: 162, baseType: !64, size: 64, offset: 64)
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "callback_head", scope: !569, file: !565, line: 176, baseType: !211, size: 128, align: 64)
!2096 = !DIDerivedType(tag: DW_TAG_member, scope: !564, file: !565, line: 179, baseType: !2097, size: 32, offset: 384)
!2097 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !564, file: !565, line: 179, size: 32, elements: !2098)
!2098 = !{!2099, !2100, !2101, !2102}
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "_mapcount", scope: !2097, file: !565, line: 184, baseType: !589, size: 32)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "page_type", scope: !2097, file: !565, line: 192, baseType: !70, size: 32)
!2101 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !2097, file: !565, line: 194, baseType: !70, size: 32)
!2102 = !DIDerivedType(tag: DW_TAG_member, name: "units", scope: !2097, file: !565, line: 195, baseType: !104, size: 32)
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "_refcount", scope: !564, file: !565, line: 199, baseType: !589, size: 32, offset: 416)
!2104 = !DIDerivedType(tag: DW_TAG_member, name: "nr_cached_objects", scope: !499, file: !199, line: 1964, baseType: !2105, size: 64, offset: 1344)
!2105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2106, size: 64)
!2106 = !DISubroutineType(types: !2107)
!2107 = !{!155, !438, !2108}
!2108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2109, size: 64)
!2109 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "shrink_control", file: !2110, line: 12, size: 256, elements: !2111)
!2110 = !DIFile(filename: "./include/linux/shrinker.h", directory: "/home/lizy2001/genbc/linux")
!2111 = !{!2112, !2113, !2114, !2115, !2116}
!2112 = !DIDerivedType(tag: DW_TAG_member, name: "gfp_mask", scope: !2109, file: !2110, line: 13, baseType: !69, size: 32)
!2113 = !DIDerivedType(tag: DW_TAG_member, name: "nid", scope: !2109, file: !2110, line: 16, baseType: !104, size: 32, offset: 32)
!2114 = !DIDerivedType(tag: DW_TAG_member, name: "nr_to_scan", scope: !2109, file: !2110, line: 23, baseType: !57, size: 64, offset: 64)
!2115 = !DIDerivedType(tag: DW_TAG_member, name: "nr_scanned", scope: !2109, file: !2110, line: 30, baseType: !57, size: 64, offset: 128)
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "memcg", scope: !2109, file: !2110, line: 33, baseType: !2117, size: 64, offset: 192)
!2117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2118, size: 64)
!2118 = !DICompositeType(tag: DW_TAG_structure_type, name: "mem_cgroup", file: !565, line: 27, flags: DIFlagFwdDecl)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "free_cached_objects", scope: !499, file: !199, line: 1966, baseType: !2105, size: 64, offset: 1408)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "dq_op", scope: !439, file: !199, line: 1424, baseType: !2121, size: 64, offset: 448)
!2121 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2122, size: 64)
!2122 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2123)
!2123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dquot_operations", file: !2124, line: 322, size: 704, elements: !2125)
!2124 = !DIFile(filename: "./include/linux/quota.h", directory: "/home/lizy2001/genbc/linux")
!2125 = !{!2126, !2177, !2181, !2185, !2186, !2187, !2188, !2189, !2194, !2199, !2203}
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "write_dquot", scope: !2123, file: !2124, line: 323, baseType: !2127, size: 64)
!2127 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2128, size: 64)
!2128 = !DISubroutineType(types: !2129)
!2129 = !{!104, !2130}
!2130 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2131, size: 64)
!2131 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dquot", file: !2124, line: 294, size: 1600, elements: !2132)
!2132 = !{!2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2162, !2163, !2164}
!2133 = !DIDerivedType(tag: DW_TAG_member, name: "dq_hash", scope: !2131, file: !2124, line: 295, baseType: !481, size: 128)
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "dq_inuse", scope: !2131, file: !2124, line: 296, baseType: !47, size: 128, offset: 128)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "dq_free", scope: !2131, file: !2124, line: 297, baseType: !47, size: 128, offset: 256)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "dq_dirty", scope: !2131, file: !2124, line: 298, baseType: !47, size: 128, offset: 384)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "dq_lock", scope: !2131, file: !2124, line: 299, baseType: !14, size: 192, offset: 512)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "dq_dqb_lock", scope: !2131, file: !2124, line: 300, baseType: !31, offset: 704)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "dq_count", scope: !2131, file: !2124, line: 301, baseType: !589, size: 32, offset: 704)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "dq_sb", scope: !2131, file: !2124, line: 302, baseType: !438, size: 64, offset: 768)
!2141 = !DIDerivedType(tag: DW_TAG_member, name: "dq_id", scope: !2131, file: !2124, line: 303, baseType: !2142, size: 64, offset: 832)
!2142 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kqid", file: !2124, line: 68, size: 64, elements: !2143)
!2143 = !{!2144, !2156}
!2144 = !DIDerivedType(tag: DW_TAG_member, scope: !2142, file: !2124, line: 69, baseType: !2145, size: 32)
!2145 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2142, file: !2124, line: 69, size: 32, elements: !2146)
!2146 = !{!2147, !2148, !2149}
!2147 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2145, file: !2124, line: 70, baseType: !279, size: 32)
!2148 = !DIDerivedType(tag: DW_TAG_member, name: "gid", scope: !2145, file: !2124, line: 71, baseType: !287, size: 32)
!2149 = !DIDerivedType(tag: DW_TAG_member, name: "projid", scope: !2145, file: !2124, line: 72, baseType: !2150, size: 32)
!2150 = !DIDerivedType(tag: DW_TAG_typedef, name: "kprojid_t", file: !2151, line: 24, baseType: !2152)
!2151 = !DIFile(filename: "./include/linux/projid.h", directory: "/home/lizy2001/genbc/linux")
!2152 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2151, line: 22, size: 32, elements: !2153)
!2153 = !{!2154}
!2154 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !2152, file: !2151, line: 23, baseType: !2155, size: 32)
!2155 = !DIDerivedType(tag: DW_TAG_typedef, name: "projid_t", file: !2151, line: 20, baseType: !285)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2142, file: !2124, line: 74, baseType: !2157, size: 32, offset: 32)
!2157 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "quota_type", file: !2124, line: 54, baseType: !70, size: 32, elements: !2158)
!2158 = !{!2159, !2160, !2161}
!2159 = !DIEnumerator(name: "USRQUOTA", value: 0, isUnsigned: true)
!2160 = !DIEnumerator(name: "GRPQUOTA", value: 1, isUnsigned: true)
!2161 = !DIEnumerator(name: "PRJQUOTA", value: 2, isUnsigned: true)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "dq_off", scope: !2131, file: !2124, line: 304, baseType: !372, size: 64, offset: 896)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "dq_flags", scope: !2131, file: !2124, line: 305, baseType: !57, size: 64, offset: 960)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "dq_dqb", scope: !2131, file: !2124, line: 306, baseType: !2165, size: 576, offset: 1024)
!2165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_dqblk", file: !2124, line: 205, size: 576, elements: !2166)
!2166 = !{!2167, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176}
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_bhardlimit", scope: !2165, file: !2124, line: 206, baseType: !2168, size: 64)
!2168 = !DIDerivedType(tag: DW_TAG_typedef, name: "qsize_t", file: !2124, line: 66, baseType: !29)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_bsoftlimit", scope: !2165, file: !2124, line: 207, baseType: !2168, size: 64, offset: 64)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_curspace", scope: !2165, file: !2124, line: 208, baseType: !2168, size: 64, offset: 128)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_rsvspace", scope: !2165, file: !2124, line: 209, baseType: !2168, size: 64, offset: 192)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_ihardlimit", scope: !2165, file: !2124, line: 210, baseType: !2168, size: 64, offset: 256)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_isoftlimit", scope: !2165, file: !2124, line: 211, baseType: !2168, size: 64, offset: 320)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_curinodes", scope: !2165, file: !2124, line: 212, baseType: !2168, size: 64, offset: 384)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_btime", scope: !2165, file: !2124, line: 213, baseType: !379, size: 64, offset: 448)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "dqb_itime", scope: !2165, file: !2124, line: 214, baseType: !379, size: 64, offset: 512)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_dquot", scope: !2123, file: !2124, line: 324, baseType: !2178, size: 64, offset: 64)
!2178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2179, size: 64)
!2179 = !DISubroutineType(types: !2180)
!2180 = !{!2130, !438, !104}
!2181 = !DIDerivedType(tag: DW_TAG_member, name: "destroy_dquot", scope: !2123, file: !2124, line: 325, baseType: !2182, size: 64, offset: 128)
!2182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2183, size: 64)
!2183 = !DISubroutineType(types: !2184)
!2184 = !{null, !2130}
!2185 = !DIDerivedType(tag: DW_TAG_member, name: "acquire_dquot", scope: !2123, file: !2124, line: 326, baseType: !2127, size: 64, offset: 192)
!2186 = !DIDerivedType(tag: DW_TAG_member, name: "release_dquot", scope: !2123, file: !2124, line: 327, baseType: !2127, size: 64, offset: 256)
!2187 = !DIDerivedType(tag: DW_TAG_member, name: "mark_dirty", scope: !2123, file: !2124, line: 328, baseType: !2127, size: 64, offset: 320)
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "write_info", scope: !2123, file: !2124, line: 329, baseType: !527, size: 64, offset: 384)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "get_reserved_space", scope: !2123, file: !2124, line: 332, baseType: !2190, size: 64, offset: 448)
!2190 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2191, size: 64)
!2191 = !DISubroutineType(types: !2192)
!2192 = !{!2193, !273}
!2193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2168, size: 64)
!2194 = !DIDerivedType(tag: DW_TAG_member, name: "get_projid", scope: !2123, file: !2124, line: 333, baseType: !2195, size: 64, offset: 512)
!2195 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2196, size: 64)
!2196 = !DISubroutineType(types: !2197)
!2197 = !{!104, !273, !2198}
!2198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2150, size: 64)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "get_inode_usage", scope: !2123, file: !2124, line: 335, baseType: !2200, size: 64, offset: 576)
!2200 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2201, size: 64)
!2201 = !DISubroutineType(types: !2202)
!2202 = !{!104, !273, !2193}
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "get_next_id", scope: !2123, file: !2124, line: 337, baseType: !2204, size: 64, offset: 640)
!2204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2205, size: 64)
!2205 = !DISubroutineType(types: !2206)
!2206 = !{!104, !438, !2207}
!2207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2142, size: 64)
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "s_qcop", scope: !439, file: !199, line: 1425, baseType: !2209, size: 64, offset: 512)
!2209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2210, size: 64)
!2210 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2211)
!2211 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quotactl_ops", file: !2124, line: 428, size: 704, elements: !2212)
!2212 = !{!2213, !2217, !2218, !2222, !2223, !2224, !2239, !2262, !2266, !2267, !2290}
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "quota_on", scope: !2211, file: !2124, line: 429, baseType: !2214, size: 64)
!2214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2215, size: 64)
!2215 = !DISubroutineType(types: !2216)
!2216 = !{!104, !438, !104, !104, !388}
!2217 = !DIDerivedType(tag: DW_TAG_member, name: "quota_off", scope: !2211, file: !2124, line: 430, baseType: !527, size: 64, offset: 64)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "quota_enable", scope: !2211, file: !2124, line: 431, baseType: !2219, size: 64, offset: 128)
!2219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2220, size: 64)
!2220 = !DISubroutineType(types: !2221)
!2221 = !{!104, !438, !70}
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "quota_disable", scope: !2211, file: !2124, line: 432, baseType: !2219, size: 64, offset: 192)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "quota_sync", scope: !2211, file: !2124, line: 433, baseType: !527, size: 64, offset: 256)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "set_info", scope: !2211, file: !2124, line: 434, baseType: !2225, size: 64, offset: 320)
!2225 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2226, size: 64)
!2226 = !DISubroutineType(types: !2227)
!2227 = !{!104, !438, !104, !2228}
!2228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2229, size: 64)
!2229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qc_info", file: !2124, line: 415, size: 256, elements: !2230)
!2230 = !{!2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238}
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "i_fieldmask", scope: !2229, file: !2124, line: 416, baseType: !104, size: 32)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "i_flags", scope: !2229, file: !2124, line: 417, baseType: !70, size: 32, offset: 32)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "i_spc_timelimit", scope: !2229, file: !2124, line: 418, baseType: !70, size: 32, offset: 64)
!2234 = !DIDerivedType(tag: DW_TAG_member, name: "i_ino_timelimit", scope: !2229, file: !2124, line: 420, baseType: !70, size: 32, offset: 96)
!2235 = !DIDerivedType(tag: DW_TAG_member, name: "i_rt_spc_timelimit", scope: !2229, file: !2124, line: 421, baseType: !70, size: 32, offset: 128)
!2236 = !DIDerivedType(tag: DW_TAG_member, name: "i_spc_warnlimit", scope: !2229, file: !2124, line: 422, baseType: !70, size: 32, offset: 160)
!2237 = !DIDerivedType(tag: DW_TAG_member, name: "i_ino_warnlimit", scope: !2229, file: !2124, line: 423, baseType: !70, size: 32, offset: 192)
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "i_rt_spc_warnlimit", scope: !2229, file: !2124, line: 424, baseType: !70, size: 32, offset: 224)
!2239 = !DIDerivedType(tag: DW_TAG_member, name: "get_dqblk", scope: !2211, file: !2124, line: 435, baseType: !2240, size: 64, offset: 384)
!2240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2241, size: 64)
!2241 = !DISubroutineType(types: !2242)
!2242 = !{!104, !438, !2142, !2243}
!2243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2244, size: 64)
!2244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qc_dqblk", file: !2124, line: 343, size: 960, elements: !2245)
!2245 = !{!2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261}
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "d_fieldmask", scope: !2244, file: !2124, line: 344, baseType: !104, size: 32)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "d_spc_hardlimit", scope: !2244, file: !2124, line: 345, baseType: !265, size: 64, offset: 64)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "d_spc_softlimit", scope: !2244, file: !2124, line: 346, baseType: !265, size: 64, offset: 128)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_hardlimit", scope: !2244, file: !2124, line: 347, baseType: !265, size: 64, offset: 192)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_softlimit", scope: !2244, file: !2124, line: 348, baseType: !265, size: 64, offset: 256)
!2251 = !DIDerivedType(tag: DW_TAG_member, name: "d_space", scope: !2244, file: !2124, line: 349, baseType: !265, size: 64, offset: 320)
!2252 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_count", scope: !2244, file: !2124, line: 350, baseType: !265, size: 64, offset: 384)
!2253 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_timer", scope: !2244, file: !2124, line: 351, baseType: !25, size: 64, offset: 448)
!2254 = !DIDerivedType(tag: DW_TAG_member, name: "d_spc_timer", scope: !2244, file: !2124, line: 353, baseType: !25, size: 64, offset: 512)
!2255 = !DIDerivedType(tag: DW_TAG_member, name: "d_ino_warns", scope: !2244, file: !2124, line: 354, baseType: !104, size: 32, offset: 576)
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "d_spc_warns", scope: !2244, file: !2124, line: 355, baseType: !104, size: 32, offset: 608)
!2257 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_spc_hardlimit", scope: !2244, file: !2124, line: 356, baseType: !265, size: 64, offset: 640)
!2258 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_spc_softlimit", scope: !2244, file: !2124, line: 357, baseType: !265, size: 64, offset: 704)
!2259 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_space", scope: !2244, file: !2124, line: 358, baseType: !265, size: 64, offset: 768)
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_spc_timer", scope: !2244, file: !2124, line: 359, baseType: !25, size: 64, offset: 832)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "d_rt_spc_warns", scope: !2244, file: !2124, line: 360, baseType: !104, size: 32, offset: 896)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "get_nextdqblk", scope: !2211, file: !2124, line: 436, baseType: !2263, size: 64, offset: 448)
!2263 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2264, size: 64)
!2264 = !DISubroutineType(types: !2265)
!2265 = !{!104, !438, !2207, !2243}
!2266 = !DIDerivedType(tag: DW_TAG_member, name: "set_dqblk", scope: !2211, file: !2124, line: 438, baseType: !2240, size: 64, offset: 512)
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "get_state", scope: !2211, file: !2124, line: 439, baseType: !2268, size: 64, offset: 576)
!2268 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2269, size: 64)
!2269 = !DISubroutineType(types: !2270)
!2270 = !{!104, !438, !2271}
!2271 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2272, size: 64)
!2272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qc_state", file: !2124, line: 409, size: 1408, elements: !2273)
!2273 = !{!2274, !2275}
!2274 = !DIDerivedType(tag: DW_TAG_member, name: "s_incoredqs", scope: !2272, file: !2124, line: 410, baseType: !70, size: 32)
!2275 = !DIDerivedType(tag: DW_TAG_member, name: "s_state", scope: !2272, file: !2124, line: 411, baseType: !2276, size: 1344, offset: 64)
!2276 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2277, size: 1344, elements: !121)
!2277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "qc_type_state", file: !2124, line: 395, size: 448, elements: !2278)
!2278 = !{!2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2289}
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2277, file: !2124, line: 396, baseType: !70, size: 32)
!2280 = !DIDerivedType(tag: DW_TAG_member, name: "spc_timelimit", scope: !2277, file: !2124, line: 397, baseType: !70, size: 32, offset: 32)
!2281 = !DIDerivedType(tag: DW_TAG_member, name: "ino_timelimit", scope: !2277, file: !2124, line: 399, baseType: !70, size: 32, offset: 64)
!2282 = !DIDerivedType(tag: DW_TAG_member, name: "rt_spc_timelimit", scope: !2277, file: !2124, line: 400, baseType: !70, size: 32, offset: 96)
!2283 = !DIDerivedType(tag: DW_TAG_member, name: "spc_warnlimit", scope: !2277, file: !2124, line: 401, baseType: !70, size: 32, offset: 128)
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "ino_warnlimit", scope: !2277, file: !2124, line: 402, baseType: !70, size: 32, offset: 160)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "rt_spc_warnlimit", scope: !2277, file: !2124, line: 403, baseType: !70, size: 32, offset: 192)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "ino", scope: !2277, file: !2124, line: 404, baseType: !267, size: 64, offset: 256)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "blocks", scope: !2277, file: !2124, line: 405, baseType: !2288, size: 64, offset: 320)
!2288 = !DIDerivedType(tag: DW_TAG_typedef, name: "blkcnt_t", file: !21, line: 126, baseType: !265)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "nextents", scope: !2277, file: !2124, line: 406, baseType: !2288, size: 64, offset: 384)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "rm_xquota", scope: !2211, file: !2124, line: 440, baseType: !2219, size: 64, offset: 640)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "s_export_op", scope: !439, file: !199, line: 1426, baseType: !2292, size: 64, offset: 576)
!2292 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2293, size: 64)
!2293 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2294)
!2294 = !DICompositeType(tag: DW_TAG_structure_type, name: "export_operations", file: !199, line: 49, flags: DIFlagFwdDecl)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "s_flags", scope: !439, file: !199, line: 1427, baseType: !57, size: 64, offset: 640)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "s_iflags", scope: !439, file: !199, line: 1428, baseType: !57, size: 64, offset: 704)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "s_magic", scope: !439, file: !199, line: 1429, baseType: !57, size: 64, offset: 768)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "s_root", scope: !439, file: !199, line: 1430, baseType: !228, size: 64, offset: 832)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "s_umount", scope: !439, file: !199, line: 1431, baseType: !609, size: 256, offset: 896)
!2300 = !DIDerivedType(tag: DW_TAG_member, name: "s_count", scope: !439, file: !199, line: 1432, baseType: !104, size: 32, offset: 1152)
!2301 = !DIDerivedType(tag: DW_TAG_member, name: "s_active", scope: !439, file: !199, line: 1433, baseType: !589, size: 32, offset: 1184)
!2302 = !DIDerivedType(tag: DW_TAG_member, name: "s_xattr", scope: !439, file: !199, line: 1437, baseType: !2303, size: 64, offset: 1216)
!2303 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2304, size: 64)
!2304 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2305, size: 64)
!2305 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2306)
!2306 = !DICompositeType(tag: DW_TAG_structure_type, name: "xattr_handler", file: !199, line: 1437, flags: DIFlagFwdDecl)
!2307 = !DIDerivedType(tag: DW_TAG_member, name: "s_roots", scope: !439, file: !199, line: 1449, baseType: !2308, size: 64, offset: 1280)
!2308 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "hlist_bl_head", file: !244, line: 34, size: 64, elements: !2309)
!2309 = !{!2310}
!2310 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2308, file: !244, line: 35, baseType: !247, size: 64)
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "s_mounts", scope: !439, file: !199, line: 1450, baseType: !47, size: 128, offset: 1344)
!2312 = !DIDerivedType(tag: DW_TAG_member, name: "s_bdev", scope: !439, file: !199, line: 1451, baseType: !2313, size: 64, offset: 1472)
!2313 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2314, size: 64)
!2314 = !DICompositeType(tag: DW_TAG_structure_type, name: "block_device", file: !199, line: 699, flags: DIFlagFwdDecl)
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "s_bdi", scope: !439, file: !199, line: 1452, baseType: !1676, size: 64, offset: 1536)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "s_mtd", scope: !439, file: !199, line: 1453, baseType: !2317, size: 64, offset: 1600)
!2317 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2318, size: 64)
!2318 = !DICompositeType(tag: DW_TAG_structure_type, name: "mtd_info", file: !199, line: 1453, flags: DIFlagFwdDecl)
!2319 = !DIDerivedType(tag: DW_TAG_member, name: "s_instances", scope: !439, file: !199, line: 1454, baseType: !481, size: 128, offset: 1664)
!2320 = !DIDerivedType(tag: DW_TAG_member, name: "s_quota_types", scope: !439, file: !199, line: 1455, baseType: !70, size: 32, offset: 1792)
!2321 = !DIDerivedType(tag: DW_TAG_member, name: "s_dquot", scope: !439, file: !199, line: 1456, baseType: !2322, size: 2432, offset: 1856)
!2322 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quota_info", file: !2124, line: 518, size: 2432, elements: !2323)
!2323 = !{!2324, !2325, !2326, !2328, !2360}
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2322, file: !2124, line: 519, baseType: !70, size: 32)
!2325 = !DIDerivedType(tag: DW_TAG_member, name: "dqio_sem", scope: !2322, file: !2124, line: 520, baseType: !609, size: 256, offset: 64)
!2326 = !DIDerivedType(tag: DW_TAG_member, name: "files", scope: !2322, file: !2124, line: 521, baseType: !2327, size: 192, offset: 320)
!2327 = !DICompositeType(tag: DW_TAG_array_type, baseType: !273, size: 192, elements: !121)
!2328 = !DIDerivedType(tag: DW_TAG_member, name: "info", scope: !2322, file: !2124, line: 522, baseType: !2329, size: 1728, offset: 512)
!2329 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2330, size: 1728, elements: !121)
!2330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_dqinfo", file: !2124, line: 222, size: 576, elements: !2331)
!2331 = !{!2332, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359}
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_format", scope: !2330, file: !2124, line: 223, baseType: !2333, size: 64)
!2333 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2334, size: 64)
!2334 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quota_format_type", file: !2124, line: 443, size: 256, elements: !2335)
!2335 = !{!2336, !2337, !2350, !2351}
!2336 = !DIDerivedType(tag: DW_TAG_member, name: "qf_fmt_id", scope: !2334, file: !2124, line: 444, baseType: !104, size: 32)
!2337 = !DIDerivedType(tag: DW_TAG_member, name: "qf_ops", scope: !2334, file: !2124, line: 445, baseType: !2338, size: 64, offset: 64)
!2338 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2339, size: 64)
!2339 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2340)
!2340 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "quota_format_ops", file: !2124, line: 310, size: 512, elements: !2341)
!2341 = !{!2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349}
!2342 = !DIDerivedType(tag: DW_TAG_member, name: "check_quota_file", scope: !2340, file: !2124, line: 311, baseType: !527, size: 64)
!2343 = !DIDerivedType(tag: DW_TAG_member, name: "read_file_info", scope: !2340, file: !2124, line: 312, baseType: !527, size: 64, offset: 64)
!2344 = !DIDerivedType(tag: DW_TAG_member, name: "write_file_info", scope: !2340, file: !2124, line: 313, baseType: !527, size: 64, offset: 128)
!2345 = !DIDerivedType(tag: DW_TAG_member, name: "free_file_info", scope: !2340, file: !2124, line: 314, baseType: !527, size: 64, offset: 192)
!2346 = !DIDerivedType(tag: DW_TAG_member, name: "read_dqblk", scope: !2340, file: !2124, line: 315, baseType: !2127, size: 64, offset: 256)
!2347 = !DIDerivedType(tag: DW_TAG_member, name: "commit_dqblk", scope: !2340, file: !2124, line: 316, baseType: !2127, size: 64, offset: 320)
!2348 = !DIDerivedType(tag: DW_TAG_member, name: "release_dqblk", scope: !2340, file: !2124, line: 317, baseType: !2127, size: 64, offset: 384)
!2349 = !DIDerivedType(tag: DW_TAG_member, name: "get_next_id", scope: !2340, file: !2124, line: 318, baseType: !2204, size: 64, offset: 448)
!2350 = !DIDerivedType(tag: DW_TAG_member, name: "qf_owner", scope: !2334, file: !2124, line: 446, baseType: !472, size: 64, offset: 128)
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "qf_next", scope: !2334, file: !2124, line: 447, baseType: !2333, size: 64, offset: 192)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_fmt_id", scope: !2330, file: !2124, line: 224, baseType: !104, size: 32, offset: 64)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_dirty_list", scope: !2330, file: !2124, line: 226, baseType: !47, size: 128, offset: 128)
!2354 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_flags", scope: !2330, file: !2124, line: 227, baseType: !57, size: 64, offset: 256)
!2355 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_bgrace", scope: !2330, file: !2124, line: 228, baseType: !70, size: 32, offset: 320)
!2356 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_igrace", scope: !2330, file: !2124, line: 229, baseType: !70, size: 32, offset: 352)
!2357 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_max_spc_limit", scope: !2330, file: !2124, line: 230, baseType: !2168, size: 64, offset: 384)
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_max_ino_limit", scope: !2330, file: !2124, line: 231, baseType: !2168, size: 64, offset: 448)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "dqi_priv", scope: !2330, file: !2124, line: 232, baseType: !64, size: 64, offset: 512)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !2322, file: !2124, line: 523, baseType: !2361, size: 192, offset: 2240)
!2361 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2338, size: 192, elements: !121)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "s_writers", scope: !439, file: !199, line: 1458, baseType: !2363, size: 2112, offset: 4288)
!2363 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sb_writers", file: !199, line: 1410, size: 2112, elements: !2364)
!2364 = !{!2365, !2366, !2367}
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "frozen", scope: !2363, file: !199, line: 1411, baseType: !104, size: 32)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "wait_unfrozen", scope: !2363, file: !199, line: 1412, baseType: !1233, size: 128, offset: 64)
!2367 = !DIDerivedType(tag: DW_TAG_member, name: "rw_sem", scope: !2363, file: !199, line: 1413, baseType: !2368, size: 1920, offset: 192)
!2368 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2369, size: 1920, elements: !121)
!2369 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "percpu_rw_semaphore", file: !2370, line: 12, size: 640, elements: !2371)
!2370 = !DIFile(filename: "./include/linux/percpu-rwsem.h", directory: "/home/lizy2001/genbc/linux")
!2371 = !{!2372, !2380, !2382, !2387, !2388}
!2372 = !DIDerivedType(tag: DW_TAG_member, name: "rss", scope: !2369, file: !2370, line: 13, baseType: !2373, size: 320)
!2373 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rcu_sync", file: !2374, line: 17, size: 320, elements: !2375)
!2374 = !DIFile(filename: "./include/linux/rcu_sync.h", directory: "/home/lizy2001/genbc/linux")
!2375 = !{!2376, !2377, !2378, !2379}
!2376 = !DIDerivedType(tag: DW_TAG_member, name: "gp_state", scope: !2373, file: !2374, line: 18, baseType: !104, size: 32)
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "gp_count", scope: !2373, file: !2374, line: 19, baseType: !104, size: 32, offset: 32)
!2378 = !DIDerivedType(tag: DW_TAG_member, name: "gp_wait", scope: !2373, file: !2374, line: 20, baseType: !1233, size: 128, offset: 64)
!2379 = !DIDerivedType(tag: DW_TAG_member, name: "cb_head", scope: !2373, file: !2374, line: 22, baseType: !211, size: 128, align: 64, offset: 192)
!2380 = !DIDerivedType(tag: DW_TAG_member, name: "read_count", scope: !2369, file: !2370, line: 14, baseType: !2381, size: 64, offset: 320)
!2381 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !70, size: 64)
!2382 = !DIDerivedType(tag: DW_TAG_member, name: "writer", scope: !2369, file: !2370, line: 15, baseType: !2383, size: 64, offset: 384)
!2383 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rcuwait", file: !2384, line: 16, size: 64, elements: !2385)
!2384 = !DIFile(filename: "./include/linux/rcuwait.h", directory: "/home/lizy2001/genbc/linux")
!2385 = !{!2386}
!2386 = !DIDerivedType(tag: DW_TAG_member, name: "task", scope: !2383, file: !2384, line: 17, baseType: !956, size: 64)
!2387 = !DIDerivedType(tag: DW_TAG_member, name: "waiters", scope: !2369, file: !2370, line: 16, baseType: !1233, size: 128, offset: 448)
!2388 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2369, file: !2370, line: 17, baseType: !589, size: 32, offset: 576)
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "s_fs_info", scope: !439, file: !199, line: 1465, baseType: !64, size: 64, offset: 6400)
!2390 = !DIDerivedType(tag: DW_TAG_member, name: "s_time_gran", scope: !439, file: !199, line: 1468, baseType: !261, size: 32, offset: 6464)
!2391 = !DIDerivedType(tag: DW_TAG_member, name: "s_time_min", scope: !439, file: !199, line: 1470, baseType: !379, size: 64, offset: 6528)
!2392 = !DIDerivedType(tag: DW_TAG_member, name: "s_time_max", scope: !439, file: !199, line: 1471, baseType: !379, size: 64, offset: 6592)
!2393 = !DIDerivedType(tag: DW_TAG_member, name: "s_fsnotify_mask", scope: !439, file: !199, line: 1473, baseType: !262, size: 32, offset: 6656)
!2394 = !DIDerivedType(tag: DW_TAG_member, name: "s_fsnotify_marks", scope: !439, file: !199, line: 1474, baseType: !2395, size: 64, offset: 6720)
!2395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2396, size: 64)
!2396 = !DICompositeType(tag: DW_TAG_structure_type, name: "fsnotify_mark_connector", file: !199, line: 603, flags: DIFlagFwdDecl)
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "s_id", scope: !439, file: !199, line: 1477, baseType: !2398, size: 256, offset: 6784)
!2398 = !DICompositeType(tag: DW_TAG_array_type, baseType: !83, size: 256, elements: !1983)
!2399 = !DIDerivedType(tag: DW_TAG_member, name: "s_uuid", scope: !439, file: !199, line: 1478, baseType: !2400, size: 128, offset: 7040)
!2400 = !DIDerivedType(tag: DW_TAG_typedef, name: "uuid_t", file: !2401, line: 18, baseType: !2402)
!2401 = !DIFile(filename: "./include/linux/uuid.h", directory: "/home/lizy2001/genbc/linux")
!2402 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2401, line: 16, size: 128, elements: !2403)
!2403 = !{!2404}
!2404 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !2402, file: !2401, line: 17, baseType: !2405, size: 128)
!2405 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1098, size: 128, elements: !1487)
!2406 = !DIDerivedType(tag: DW_TAG_member, name: "s_max_links", scope: !439, file: !199, line: 1480, baseType: !70, size: 32, offset: 7168)
!2407 = !DIDerivedType(tag: DW_TAG_member, name: "s_mode", scope: !439, file: !199, line: 1481, baseType: !2408, size: 32, offset: 7200)
!2408 = !DIDerivedType(tag: DW_TAG_typedef, name: "fmode_t", file: !21, line: 150, baseType: !70)
!2409 = !DIDerivedType(tag: DW_TAG_member, name: "s_vfs_rename_mutex", scope: !439, file: !199, line: 1487, baseType: !14, size: 192, offset: 7232)
!2410 = !DIDerivedType(tag: DW_TAG_member, name: "s_subtype", scope: !439, file: !199, line: 1493, baseType: !81, size: 64, offset: 7424)
!2411 = !DIDerivedType(tag: DW_TAG_member, name: "s_d_op", scope: !439, file: !199, line: 1495, baseType: !2412, size: 64, offset: 7488)
!2412 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2413, size: 64)
!2413 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2414)
!2414 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dentry_operations", file: !226, line: 135, size: 1024, align: 512, elements: !2415)
!2415 = !{!2416, !2420, !2421, !2428, !2434, !2438, !2442, !2446, !2447, !2451, !2455, !2460, !2464}
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "d_revalidate", scope: !2414, file: !226, line: 136, baseType: !2417, size: 64)
!2417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2418, size: 64)
!2418 = !DISubroutineType(types: !2419)
!2419 = !{!104, !228, !70}
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "d_weak_revalidate", scope: !2414, file: !226, line: 137, baseType: !2417, size: 64, offset: 64)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "d_hash", scope: !2414, file: !226, line: 138, baseType: !2422, size: 64, offset: 128)
!2422 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2423, size: 64)
!2423 = !DISubroutineType(types: !2424)
!2424 = !{!104, !2425, !2427}
!2425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2426, size: 64)
!2426 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !229)
!2427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !252, size: 64)
!2428 = !DIDerivedType(tag: DW_TAG_member, name: "d_compare", scope: !2414, file: !226, line: 139, baseType: !2429, size: 64, offset: 192)
!2429 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2430, size: 64)
!2430 = !DISubroutineType(types: !2431)
!2431 = !{!104, !2425, !70, !81, !2432}
!2432 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2433, size: 64)
!2433 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !252)
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "d_delete", scope: !2414, file: !226, line: 141, baseType: !2435, size: 64, offset: 256)
!2435 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2436, size: 64)
!2436 = !DISubroutineType(types: !2437)
!2437 = !{!104, !2425}
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "d_init", scope: !2414, file: !226, line: 142, baseType: !2439, size: 64, offset: 320)
!2439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2440, size: 64)
!2440 = !DISubroutineType(types: !2441)
!2441 = !{!104, !228}
!2442 = !DIDerivedType(tag: DW_TAG_member, name: "d_release", scope: !2414, file: !226, line: 143, baseType: !2443, size: 64, offset: 384)
!2443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2444, size: 64)
!2444 = !DISubroutineType(types: !2445)
!2445 = !{null, !228}
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "d_prune", scope: !2414, file: !226, line: 144, baseType: !2443, size: 64, offset: 448)
!2447 = !DIDerivedType(tag: DW_TAG_member, name: "d_iput", scope: !2414, file: !226, line: 145, baseType: !2448, size: 64, offset: 512)
!2448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2449, size: 64)
!2449 = !DISubroutineType(types: !2450)
!2450 = !{null, !228, !273}
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "d_dname", scope: !2414, file: !226, line: 146, baseType: !2452, size: 64, offset: 576)
!2452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2453, size: 64)
!2453 = !DISubroutineType(types: !2454)
!2454 = !{!120, !228, !120, !104}
!2455 = !DIDerivedType(tag: DW_TAG_member, name: "d_automount", scope: !2414, file: !226, line: 147, baseType: !2456, size: 64, offset: 640)
!2456 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2457, size: 64)
!2457 = !DISubroutineType(types: !2458)
!2458 = !{!224, !2459}
!2459 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !220, size: 64)
!2460 = !DIDerivedType(tag: DW_TAG_member, name: "d_manage", scope: !2414, file: !226, line: 148, baseType: !2461, size: 64, offset: 704)
!2461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2462, size: 64)
!2462 = !DISubroutineType(types: !2463)
!2463 = !{!104, !388, !331}
!2464 = !DIDerivedType(tag: DW_TAG_member, name: "d_real", scope: !2414, file: !226, line: 149, baseType: !2465, size: 64, offset: 768)
!2465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2466, size: 64)
!2466 = !DISubroutineType(types: !2467)
!2467 = !{!228, !228, !2468}
!2468 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2469, size: 64)
!2469 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !274)
!2470 = !DIDerivedType(tag: DW_TAG_member, name: "cleancache_poolid", scope: !439, file: !199, line: 1500, baseType: !104, size: 32, offset: 7552)
!2471 = !DIDerivedType(tag: DW_TAG_member, name: "s_shrink", scope: !439, file: !199, line: 1502, baseType: !2472, size: 448, offset: 7616)
!2472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "shrinker", file: !2110, line: 60, size: 448, elements: !2473)
!2473 = !{!2474, !2479, !2480, !2481, !2482, !2483, !2484}
!2474 = !DIDerivedType(tag: DW_TAG_member, name: "count_objects", scope: !2472, file: !2110, line: 61, baseType: !2475, size: 64)
!2475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2476, size: 64)
!2476 = !DISubroutineType(types: !2477)
!2477 = !{!57, !2478, !2108}
!2478 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2472, size: 64)
!2479 = !DIDerivedType(tag: DW_TAG_member, name: "scan_objects", scope: !2472, file: !2110, line: 63, baseType: !2475, size: 64, offset: 64)
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "batch", scope: !2472, file: !2110, line: 66, baseType: !155, size: 64, offset: 128)
!2481 = !DIDerivedType(tag: DW_TAG_member, name: "seeks", scope: !2472, file: !2110, line: 67, baseType: !104, size: 32, offset: 192)
!2482 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2472, file: !2110, line: 68, baseType: !70, size: 32, offset: 224)
!2483 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2472, file: !2110, line: 71, baseType: !47, size: 128, offset: 256)
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "nr_deferred", scope: !2472, file: !2110, line: 77, baseType: !2485, size: 64, offset: 384)
!2485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !18, size: 64)
!2486 = !DIDerivedType(tag: DW_TAG_member, name: "s_remove_count", scope: !439, file: !199, line: 1505, baseType: !18, size: 64, offset: 8064)
!2487 = !DIDerivedType(tag: DW_TAG_member, name: "s_fsnotify_inode_refs", scope: !439, file: !199, line: 1508, baseType: !18, size: 64, offset: 8128)
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "s_readonly_remount", scope: !439, file: !199, line: 1511, baseType: !104, size: 32, offset: 8192)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "s_wb_err", scope: !439, file: !199, line: 1514, baseType: !751, size: 32, offset: 8224)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "s_dio_done_wq", scope: !439, file: !199, line: 1517, baseType: !2491, size: 64, offset: 8256)
!2491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2492, size: 64)
!2492 = !DICompositeType(tag: DW_TAG_structure_type, name: "workqueue_struct", file: !1711, line: 18, flags: DIFlagFwdDecl)
!2493 = !DIDerivedType(tag: DW_TAG_member, name: "s_pins", scope: !439, file: !199, line: 1518, baseType: !477, size: 64, offset: 8320)
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "s_user_ns", scope: !439, file: !199, line: 1525, baseType: !1465, size: 64, offset: 8384)
!2495 = !DIDerivedType(tag: DW_TAG_member, name: "s_dentry_lru", scope: !439, file: !199, line: 1532, baseType: !2496, size: 64, offset: 8448)
!2496 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "list_lru", file: !2497, line: 52, size: 64, elements: !2498)
!2497 = !DIFile(filename: "./include/linux/list_lru.h", directory: "/home/lizy2001/genbc/linux")
!2498 = !{!2499}
!2499 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !2496, file: !2497, line: 53, baseType: !2500, size: 64)
!2500 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2501, size: 64)
!2501 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "list_lru_node", file: !2497, line: 40, size: 256, elements: !2502)
!2502 = !{!2503, !2504, !2509}
!2503 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !2501, file: !2497, line: 42, baseType: !31)
!2504 = !DIDerivedType(tag: DW_TAG_member, name: "lru", scope: !2501, file: !2497, line: 44, baseType: !2505, size: 192)
!2505 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "list_lru_one", file: !2497, line: 28, size: 192, elements: !2506)
!2506 = !{!2507, !2508}
!2507 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2505, file: !2497, line: 29, baseType: !47, size: 128)
!2508 = !DIDerivedType(tag: DW_TAG_member, name: "nr_items", scope: !2505, file: !2497, line: 31, baseType: !155, size: 64, offset: 128)
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "nr_items", scope: !2501, file: !2497, line: 49, baseType: !155, size: 64, offset: 192)
!2510 = !DIDerivedType(tag: DW_TAG_member, name: "s_inode_lru", scope: !439, file: !199, line: 1533, baseType: !2496, size: 64, offset: 8512)
!2511 = !DIDerivedType(tag: DW_TAG_member, name: "rcu", scope: !439, file: !199, line: 1534, baseType: !211, size: 128, align: 64, offset: 8576)
!2512 = !DIDerivedType(tag: DW_TAG_member, name: "destroy_work", scope: !439, file: !199, line: 1535, baseType: !1710, size: 256, offset: 8704)
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "s_sync_lock", scope: !439, file: !199, line: 1537, baseType: !14, size: 192, offset: 8960)
!2514 = !DIDerivedType(tag: DW_TAG_member, name: "s_stack_depth", scope: !439, file: !199, line: 1542, baseType: !104, size: 32, offset: 9152)
!2515 = !DIDerivedType(tag: DW_TAG_member, name: "s_inode_list_lock", scope: !439, file: !199, line: 1545, baseType: !31, offset: 9184)
!2516 = !DIDerivedType(tag: DW_TAG_member, name: "s_inodes", scope: !439, file: !199, line: 1546, baseType: !47, size: 128, offset: 9216)
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "s_inode_wblist_lock", scope: !439, file: !199, line: 1548, baseType: !31, offset: 9344)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "s_inodes_wb", scope: !439, file: !199, line: 1549, baseType: !47, size: 128, offset: 9344)
!2519 = !DIDerivedType(tag: DW_TAG_member, name: "i_mapping", scope: !274, file: !199, line: 624, baseType: !576, size: 64, offset: 256)
!2520 = !DIDerivedType(tag: DW_TAG_member, name: "i_ino", scope: !274, file: !199, line: 631, baseType: !57, size: 64, offset: 320)
!2521 = !DIDerivedType(tag: DW_TAG_member, scope: !274, file: !199, line: 639, baseType: !2522, size: 32, offset: 384)
!2522 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !274, file: !199, line: 639, size: 32, elements: !2523)
!2523 = !{!2524, !2526}
!2524 = !DIDerivedType(tag: DW_TAG_member, name: "i_nlink", scope: !2522, file: !199, line: 640, baseType: !2525, size: 32)
!2525 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !70)
!2526 = !DIDerivedType(tag: DW_TAG_member, name: "__i_nlink", scope: !2522, file: !199, line: 641, baseType: !70, size: 32)
!2527 = !DIDerivedType(tag: DW_TAG_member, name: "i_rdev", scope: !274, file: !199, line: 643, baseType: !354, size: 32, offset: 416)
!2528 = !DIDerivedType(tag: DW_TAG_member, name: "i_size", scope: !274, file: !199, line: 644, baseType: !372, size: 64, offset: 448)
!2529 = !DIDerivedType(tag: DW_TAG_member, name: "i_atime", scope: !274, file: !199, line: 645, baseType: !375, size: 128, offset: 512)
!2530 = !DIDerivedType(tag: DW_TAG_member, name: "i_mtime", scope: !274, file: !199, line: 646, baseType: !375, size: 128, offset: 640)
!2531 = !DIDerivedType(tag: DW_TAG_member, name: "i_ctime", scope: !274, file: !199, line: 647, baseType: !375, size: 128, offset: 768)
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "i_lock", scope: !274, file: !199, line: 648, baseType: !31, offset: 896)
!2533 = !DIDerivedType(tag: DW_TAG_member, name: "i_bytes", scope: !274, file: !199, line: 649, baseType: !162, size: 16, offset: 896)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "i_blkbits", scope: !274, file: !199, line: 650, baseType: !1097, size: 8, offset: 912)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "i_write_hint", scope: !274, file: !199, line: 651, baseType: !1097, size: 8, offset: 920)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "i_blocks", scope: !274, file: !199, line: 652, baseType: !2288, size: 64, offset: 960)
!2537 = !DIDerivedType(tag: DW_TAG_member, name: "i_state", scope: !274, file: !199, line: 659, baseType: !57, size: 64, offset: 1024)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "i_rwsem", scope: !274, file: !199, line: 660, baseType: !609, size: 256, offset: 1088)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "dirtied_when", scope: !274, file: !199, line: 662, baseType: !57, size: 64, offset: 1344)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "dirtied_time_when", scope: !274, file: !199, line: 663, baseType: !57, size: 64, offset: 1408)
!2541 = !DIDerivedType(tag: DW_TAG_member, name: "i_hash", scope: !274, file: !199, line: 665, baseType: !481, size: 128, offset: 1472)
!2542 = !DIDerivedType(tag: DW_TAG_member, name: "i_io_list", scope: !274, file: !199, line: 666, baseType: !47, size: 128, offset: 1600)
!2543 = !DIDerivedType(tag: DW_TAG_member, name: "i_lru", scope: !274, file: !199, line: 675, baseType: !47, size: 128, offset: 1728)
!2544 = !DIDerivedType(tag: DW_TAG_member, name: "i_sb_list", scope: !274, file: !199, line: 676, baseType: !47, size: 128, offset: 1856)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "i_wb_list", scope: !274, file: !199, line: 677, baseType: !47, size: 128, offset: 1984)
!2546 = !DIDerivedType(tag: DW_TAG_member, scope: !274, file: !199, line: 678, baseType: !2547, size: 128, offset: 2112)
!2547 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !274, file: !199, line: 678, size: 128, elements: !2548)
!2548 = !{!2549, !2550}
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "i_dentry", scope: !2547, file: !199, line: 679, baseType: !477, size: 64)
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "i_rcu", scope: !2547, file: !199, line: 680, baseType: !211, size: 128, align: 64)
!2551 = !DIDerivedType(tag: DW_TAG_member, name: "i_version", scope: !274, file: !199, line: 682, baseType: !20, size: 64, offset: 2240)
!2552 = !DIDerivedType(tag: DW_TAG_member, name: "i_sequence", scope: !274, file: !199, line: 683, baseType: !20, size: 64, offset: 2304)
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "i_count", scope: !274, file: !199, line: 684, baseType: !589, size: 32, offset: 2368)
!2554 = !DIDerivedType(tag: DW_TAG_member, name: "i_dio_count", scope: !274, file: !199, line: 685, baseType: !589, size: 32, offset: 2400)
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "i_writecount", scope: !274, file: !199, line: 686, baseType: !589, size: 32, offset: 2432)
!2556 = !DIDerivedType(tag: DW_TAG_member, name: "i_readcount", scope: !274, file: !199, line: 688, baseType: !589, size: 32, offset: 2464)
!2557 = !DIDerivedType(tag: DW_TAG_member, scope: !274, file: !199, line: 690, baseType: !2558, size: 64, offset: 2496)
!2558 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !274, file: !199, line: 690, size: 64, elements: !2559)
!2559 = !{!2560, !2783}
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "i_fop", scope: !2558, file: !199, line: 691, baseType: !2561, size: 64)
!2561 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2562, size: 64)
!2562 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2563)
!2563 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_operations", file: !199, line: 1822, size: 2048, elements: !2564)
!2564 = !{!2565, !2566, !2570, !2575, !2579, !2580, !2581, !2585, !2598, !2599, !2607, !2611, !2612, !2616, !2617, !2621, !2626, !2627, !2631, !2635, !2743, !2747, !2748, !2752, !2753, !2757, !2761, !2766, !2770, !2774, !2778, !2782}
!2565 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !2563, file: !199, line: 1823, baseType: !472, size: 64)
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "llseek", scope: !2563, file: !199, line: 1824, baseType: !2567, size: 64, offset: 64)
!2567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2568, size: 64)
!2568 = !DISubroutineType(types: !2569)
!2569 = !{!372, !197, !372, !104}
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "read", scope: !2563, file: !199, line: 1825, baseType: !2571, size: 64, offset: 128)
!2571 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2572, size: 64)
!2572 = !DISubroutineType(types: !2573)
!2573 = !{!151, !197, !120, !167, !2574}
!2574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !372, size: 64)
!2575 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !2563, file: !199, line: 1826, baseType: !2576, size: 64, offset: 192)
!2576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2577, size: 64)
!2577 = !DISubroutineType(types: !2578)
!2578 = !{!151, !197, !81, !167, !2574}
!2579 = !DIDerivedType(tag: DW_TAG_member, name: "read_iter", scope: !2563, file: !199, line: 1827, baseType: !679, size: 64, offset: 256)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "write_iter", scope: !2563, file: !199, line: 1828, baseType: !679, size: 64, offset: 320)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "iopoll", scope: !2563, file: !199, line: 1829, baseType: !2582, size: 64, offset: 384)
!2582 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2583, size: 64)
!2583 = !DISubroutineType(types: !2584)
!2584 = !{!104, !682, !331}
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "iterate", scope: !2563, file: !199, line: 1830, baseType: !2586, size: 64, offset: 448)
!2586 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2587, size: 64)
!2587 = !DISubroutineType(types: !2588)
!2588 = !{!104, !197, !2589}
!2589 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2590, size: 64)
!2590 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dir_context", file: !199, line: 1776, size: 128, elements: !2591)
!2591 = !{!2592, !2597}
!2592 = !DIDerivedType(tag: DW_TAG_member, name: "actor", scope: !2590, file: !199, line: 1777, baseType: !2593, size: 64)
!2593 = !DIDerivedType(tag: DW_TAG_typedef, name: "filldir_t", file: !199, line: 1773, baseType: !2594)
!2594 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2595, size: 64)
!2595 = !DISubroutineType(types: !2596)
!2596 = !{!104, !2589, !81, !104, !372, !265, !70}
!2597 = !DIDerivedType(tag: DW_TAG_member, name: "pos", scope: !2590, file: !199, line: 1778, baseType: !372, size: 64, offset: 64)
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "iterate_shared", scope: !2563, file: !199, line: 1831, baseType: !2586, size: 64, offset: 512)
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "poll", scope: !2563, file: !199, line: 1832, baseType: !2600, size: 64, offset: 576)
!2600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2601, size: 64)
!2601 = !DISubroutineType(types: !2602)
!2602 = !{!2603, !197, !2605}
!2603 = !DIDerivedType(tag: DW_TAG_typedef, name: "__poll_t", file: !2604, line: 52, baseType: !70)
!2604 = !DIFile(filename: "./include/uapi/linux/types.h", directory: "/home/lizy2001/genbc/linux")
!2605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2606, size: 64)
!2606 = !DICompositeType(tag: DW_TAG_structure_type, name: "poll_table_struct", file: !458, line: 27, flags: DIFlagFwdDecl)
!2607 = !DIDerivedType(tag: DW_TAG_member, name: "unlocked_ioctl", scope: !2563, file: !199, line: 1833, baseType: !2608, size: 64, offset: 640)
!2608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2609, size: 64)
!2609 = !DISubroutineType(types: !2610)
!2610 = !{!155, !197, !70, !57}
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "compat_ioctl", scope: !2563, file: !199, line: 1834, baseType: !2608, size: 64, offset: 704)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "mmap", scope: !2563, file: !199, line: 1835, baseType: !2613, size: 64, offset: 768)
!2613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2614, size: 64)
!2614 = !DISubroutineType(types: !2615)
!2615 = !{!104, !197, !823}
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_supported_flags", scope: !2563, file: !199, line: 1836, baseType: !57, size: 64, offset: 832)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "open", scope: !2563, file: !199, line: 1837, baseType: !2618, size: 64, offset: 896)
!2618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2619, size: 64)
!2619 = !DISubroutineType(types: !2620)
!2620 = !{!104, !273, !197}
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "flush", scope: !2563, file: !199, line: 1838, baseType: !2622, size: 64, offset: 960)
!2622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2623, size: 64)
!2623 = !DISubroutineType(types: !2624)
!2624 = !{!104, !197, !2625}
!2625 = !DIDerivedType(tag: DW_TAG_typedef, name: "fl_owner_t", file: !199, line: 1007, baseType: !64)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !2563, file: !199, line: 1839, baseType: !2618, size: 64, offset: 1024)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "fsync", scope: !2563, file: !199, line: 1840, baseType: !2628, size: 64, offset: 1088)
!2628 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2629, size: 64)
!2629 = !DISubroutineType(types: !2630)
!2630 = !{!104, !197, !372, !372, !104}
!2631 = !DIDerivedType(tag: DW_TAG_member, name: "fasync", scope: !2563, file: !199, line: 1841, baseType: !2632, size: 64, offset: 1152)
!2632 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2633, size: 64)
!2633 = !DISubroutineType(types: !2634)
!2634 = !{!104, !104, !197, !104}
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !2563, file: !199, line: 1842, baseType: !2636, size: 64, offset: 1216)
!2636 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2637, size: 64)
!2637 = !DISubroutineType(types: !2638)
!2638 = !{!104, !197, !104, !2639}
!2639 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2640, size: 64)
!2640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_lock", file: !199, line: 1062, size: 1664, elements: !2641)
!2641 = !{!2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2673, !2674, !2675, !2688, !2719}
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "fl_blocker", scope: !2640, file: !199, line: 1063, baseType: !2639, size: 64)
!2643 = !DIDerivedType(tag: DW_TAG_member, name: "fl_list", scope: !2640, file: !199, line: 1064, baseType: !47, size: 128, offset: 64)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "fl_link", scope: !2640, file: !199, line: 1065, baseType: !481, size: 128, offset: 192)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "fl_blocked_requests", scope: !2640, file: !199, line: 1066, baseType: !47, size: 128, offset: 320)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "fl_blocked_member", scope: !2640, file: !199, line: 1069, baseType: !47, size: 128, offset: 448)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "fl_owner", scope: !2640, file: !199, line: 1072, baseType: !2625, size: 64, offset: 576)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "fl_flags", scope: !2640, file: !199, line: 1073, baseType: !70, size: 32, offset: 640)
!2649 = !DIDerivedType(tag: DW_TAG_member, name: "fl_type", scope: !2640, file: !199, line: 1074, baseType: !271, size: 8, offset: 672)
!2650 = !DIDerivedType(tag: DW_TAG_member, name: "fl_pid", scope: !2640, file: !199, line: 1075, baseType: !70, size: 32, offset: 704)
!2651 = !DIDerivedType(tag: DW_TAG_member, name: "fl_link_cpu", scope: !2640, file: !199, line: 1076, baseType: !104, size: 32, offset: 736)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "fl_wait", scope: !2640, file: !199, line: 1077, baseType: !1233, size: 128, offset: 768)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "fl_file", scope: !2640, file: !199, line: 1078, baseType: !197, size: 64, offset: 896)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "fl_start", scope: !2640, file: !199, line: 1079, baseType: !372, size: 64, offset: 960)
!2655 = !DIDerivedType(tag: DW_TAG_member, name: "fl_end", scope: !2640, file: !199, line: 1080, baseType: !372, size: 64, offset: 1024)
!2656 = !DIDerivedType(tag: DW_TAG_member, name: "fl_fasync", scope: !2640, file: !199, line: 1082, baseType: !2657, size: 64, offset: 1088)
!2657 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2658, size: 64)
!2658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fasync_struct", file: !199, line: 1314, size: 320, elements: !2659)
!2659 = !{!2660, !2668, !2669, !2670, !2671, !2672}
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "fa_lock", scope: !2658, file: !199, line: 1315, baseType: !2661)
!2661 = !DIDerivedType(tag: DW_TAG_typedef, name: "rwlock_t", file: !2662, line: 20, baseType: !2663)
!2662 = !DIFile(filename: "./include/linux/rwlock_types.h", directory: "/home/lizy2001/genbc/linux")
!2663 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2662, line: 11, elements: !2664)
!2664 = !{!2665}
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "raw_lock", scope: !2663, file: !2662, line: 12, baseType: !2666)
!2666 = !DIDerivedType(tag: DW_TAG_typedef, name: "arch_rwlock_t", file: !43, line: 33, baseType: !2667)
!2667 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !43, line: 31, elements: !45)
!2668 = !DIDerivedType(tag: DW_TAG_member, name: "magic", scope: !2658, file: !199, line: 1316, baseType: !104, size: 32)
!2669 = !DIDerivedType(tag: DW_TAG_member, name: "fa_fd", scope: !2658, file: !199, line: 1317, baseType: !104, size: 32, offset: 32)
!2670 = !DIDerivedType(tag: DW_TAG_member, name: "fa_next", scope: !2658, file: !199, line: 1318, baseType: !2657, size: 64, offset: 64)
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "fa_file", scope: !2658, file: !199, line: 1319, baseType: !197, size: 64, offset: 128)
!2672 = !DIDerivedType(tag: DW_TAG_member, name: "fa_rcu", scope: !2658, file: !199, line: 1320, baseType: !211, size: 128, align: 64, offset: 192)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "fl_break_time", scope: !2640, file: !199, line: 1084, baseType: !57, size: 64, offset: 1152)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "fl_downgrade_time", scope: !2640, file: !199, line: 1085, baseType: !57, size: 64, offset: 1216)
!2675 = !DIDerivedType(tag: DW_TAG_member, name: "fl_ops", scope: !2640, file: !199, line: 1087, baseType: !2676, size: 64, offset: 1280)
!2676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2677, size: 64)
!2677 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2678)
!2678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_lock_operations", file: !199, line: 1011, size: 128, elements: !2679)
!2679 = !{!2680, !2684}
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "fl_copy_lock", scope: !2678, file: !199, line: 1012, baseType: !2681, size: 64)
!2681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2682, size: 64)
!2682 = !DISubroutineType(types: !2683)
!2683 = !{null, !2639, !2639}
!2684 = !DIDerivedType(tag: DW_TAG_member, name: "fl_release_private", scope: !2678, file: !199, line: 1013, baseType: !2685, size: 64, offset: 64)
!2685 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2686, size: 64)
!2686 = !DISubroutineType(types: !2687)
!2687 = !{null, !2639}
!2688 = !DIDerivedType(tag: DW_TAG_member, name: "fl_lmops", scope: !2640, file: !199, line: 1088, baseType: !2689, size: 64, offset: 1344)
!2689 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2690, size: 64)
!2690 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2691)
!2691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lock_manager_operations", file: !199, line: 1016, size: 512, elements: !2692)
!2692 = !{!2693, !2697, !2701, !2702, !2706, !2710, !2714, !2718}
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "lm_get_owner", scope: !2691, file: !199, line: 1017, baseType: !2694, size: 64)
!2694 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2695, size: 64)
!2695 = !DISubroutineType(types: !2696)
!2696 = !{!2625, !2625}
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "lm_put_owner", scope: !2691, file: !199, line: 1018, baseType: !2698, size: 64, offset: 64)
!2698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2699, size: 64)
!2699 = !DISubroutineType(types: !2700)
!2700 = !{null, !2625}
!2701 = !DIDerivedType(tag: DW_TAG_member, name: "lm_notify", scope: !2691, file: !199, line: 1019, baseType: !2685, size: 64, offset: 128)
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "lm_grant", scope: !2691, file: !199, line: 1020, baseType: !2703, size: 64, offset: 192)
!2703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2704, size: 64)
!2704 = !DISubroutineType(types: !2705)
!2705 = !{!104, !2639, !104}
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "lm_break", scope: !2691, file: !199, line: 1021, baseType: !2707, size: 64, offset: 256)
!2707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2708, size: 64)
!2708 = !DISubroutineType(types: !2709)
!2709 = !{!331, !2639}
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "lm_change", scope: !2691, file: !199, line: 1022, baseType: !2711, size: 64, offset: 320)
!2711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2712, size: 64)
!2712 = !DISubroutineType(types: !2713)
!2713 = !{!104, !2639, !104, !50}
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "lm_setup", scope: !2691, file: !199, line: 1023, baseType: !2715, size: 64, offset: 384)
!2715 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2716, size: 64)
!2716 = !DISubroutineType(types: !2717)
!2717 = !{null, !2639, !656}
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "lm_breaker_owns_lease", scope: !2691, file: !199, line: 1024, baseType: !2707, size: 64, offset: 448)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "fl_u", scope: !2640, file: !199, line: 1097, baseType: !2720, size: 256, offset: 1408)
!2720 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2640, file: !199, line: 1089, size: 256, elements: !2721)
!2721 = !{!2722, !2731, !2737}
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "nfs_fl", scope: !2720, file: !199, line: 1090, baseType: !2723, size: 256)
!2723 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nfs_lock_info", file: !2724, line: 10, size: 256, elements: !2725)
!2724 = !DIFile(filename: "./include/linux/nfs_fs_i.h", directory: "/home/lizy2001/genbc/linux")
!2725 = !{!2726, !2727, !2730}
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2723, file: !2724, line: 11, baseType: !261, size: 32)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !2723, file: !2724, line: 12, baseType: !2728, size: 64, offset: 64)
!2728 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2729, size: 64)
!2729 = !DICompositeType(tag: DW_TAG_structure_type, name: "nlm_lockowner", file: !2724, line: 5, flags: DIFlagFwdDecl)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2723, file: !2724, line: 13, baseType: !47, size: 128, offset: 128)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "nfs4_fl", scope: !2720, file: !199, line: 1091, baseType: !2732, size: 64)
!2732 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nfs4_lock_info", file: !2724, line: 17, size: 64, elements: !2733)
!2733 = !{!2734}
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !2732, file: !2724, line: 18, baseType: !2735, size: 64)
!2735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2736, size: 64)
!2736 = !DICompositeType(tag: DW_TAG_structure_type, name: "nfs4_lock_state", file: !2724, line: 16, flags: DIFlagFwdDecl)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "afs", scope: !2720, file: !199, line: 1096, baseType: !2738, size: 192)
!2738 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2720, file: !199, line: 1092, size: 192, elements: !2739)
!2739 = !{!2740, !2741, !2742}
!2740 = !DIDerivedType(tag: DW_TAG_member, name: "link", scope: !2738, file: !199, line: 1093, baseType: !47, size: 128)
!2741 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2738, file: !199, line: 1094, baseType: !104, size: 32, offset: 128)
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "debug_id", scope: !2738, file: !199, line: 1095, baseType: !70, size: 32, offset: 160)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "sendpage", scope: !2563, file: !199, line: 1843, baseType: !2744, size: 64, offset: 1280)
!2744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2745, size: 64)
!2745 = !DISubroutineType(types: !2746)
!2746 = !{!151, !197, !563, !104, !167, !2574, !104}
!2747 = !DIDerivedType(tag: DW_TAG_member, name: "get_unmapped_area", scope: !2563, file: !199, line: 1844, baseType: !863, size: 64, offset: 1344)
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "check_flags", scope: !2563, file: !199, line: 1845, baseType: !2749, size: 64, offset: 1408)
!2749 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2750, size: 64)
!2750 = !DISubroutineType(types: !2751)
!2751 = !{!104, !104}
!2752 = !DIDerivedType(tag: DW_TAG_member, name: "flock", scope: !2563, file: !199, line: 1846, baseType: !2636, size: 64, offset: 1472)
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "splice_write", scope: !2563, file: !199, line: 1847, baseType: !2754, size: 64, offset: 1536)
!2754 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2755, size: 64)
!2755 = !DISubroutineType(types: !2756)
!2756 = !{!151, !1851, !197, !2574, !167, !70}
!2757 = !DIDerivedType(tag: DW_TAG_member, name: "splice_read", scope: !2563, file: !199, line: 1848, baseType: !2758, size: 64, offset: 1600)
!2758 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2759, size: 64)
!2759 = !DISubroutineType(types: !2760)
!2760 = !{!151, !197, !2574, !1851, !167, !70}
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "setlease", scope: !2563, file: !199, line: 1849, baseType: !2762, size: 64, offset: 1664)
!2762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2763, size: 64)
!2763 = !DISubroutineType(types: !2764)
!2764 = !{!104, !197, !155, !2765, !656}
!2765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2639, size: 64)
!2766 = !DIDerivedType(tag: DW_TAG_member, name: "fallocate", scope: !2563, file: !199, line: 1850, baseType: !2767, size: 64, offset: 1728)
!2767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2768, size: 64)
!2768 = !DISubroutineType(types: !2769)
!2769 = !{!155, !197, !104, !372, !372}
!2770 = !DIDerivedType(tag: DW_TAG_member, name: "show_fdinfo", scope: !2563, file: !199, line: 1852, baseType: !2771, size: 64, offset: 1792)
!2771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2772, size: 64)
!2772 = !DISubroutineType(types: !2773)
!2773 = !{null, !553, !197}
!2774 = !DIDerivedType(tag: DW_TAG_member, name: "copy_file_range", scope: !2563, file: !199, line: 1856, baseType: !2775, size: 64, offset: 1856)
!2775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2776, size: 64)
!2776 = !DISubroutineType(types: !2777)
!2777 = !{!151, !197, !372, !197, !372, !167, !70}
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "remap_file_range", scope: !2563, file: !199, line: 1858, baseType: !2779, size: 64, offset: 1920)
!2779 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2780, size: 64)
!2780 = !DISubroutineType(types: !2781)
!2781 = !{!372, !197, !372, !197, !372, !372, !70}
!2782 = !DIDerivedType(tag: DW_TAG_member, name: "fadvise", scope: !2563, file: !199, line: 1861, baseType: !2628, size: 64, offset: 1984)
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "free_inode", scope: !2558, file: !199, line: 692, baseType: !506, size: 64)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "i_flctx", scope: !274, file: !199, line: 694, baseType: !2785, size: 64, offset: 2560)
!2785 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2786, size: 64)
!2786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_lock_context", file: !199, line: 1100, size: 384, elements: !2787)
!2787 = !{!2788, !2789, !2790, !2791}
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "flc_lock", scope: !2786, file: !199, line: 1101, baseType: !31)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "flc_flock", scope: !2786, file: !199, line: 1102, baseType: !47, size: 128)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "flc_posix", scope: !2786, file: !199, line: 1103, baseType: !47, size: 128, offset: 128)
!2791 = !DIDerivedType(tag: DW_TAG_member, name: "flc_lease", scope: !2786, file: !199, line: 1104, baseType: !47, size: 128, offset: 256)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "i_data", scope: !274, file: !199, line: 695, baseType: !577, size: 1216, align: 64, offset: 2624)
!2793 = !DIDerivedType(tag: DW_TAG_member, name: "i_devices", scope: !274, file: !199, line: 696, baseType: !47, size: 128, offset: 3840)
!2794 = !DIDerivedType(tag: DW_TAG_member, scope: !274, file: !199, line: 697, baseType: !2795, size: 64, offset: 3968)
!2795 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !274, file: !199, line: 697, size: 64, elements: !2796)
!2796 = !{!2797, !2798, !2799, !2802, !2803}
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "i_pipe", scope: !2795, file: !199, line: 698, baseType: !1851, size: 64)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "i_bdev", scope: !2795, file: !199, line: 699, baseType: !2313, size: 64)
!2799 = !DIDerivedType(tag: DW_TAG_member, name: "i_cdev", scope: !2795, file: !199, line: 700, baseType: !2800, size: 64)
!2800 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2801, size: 64)
!2801 = !DICompositeType(tag: DW_TAG_structure_type, name: "cdev", file: !199, line: 700, flags: DIFlagFwdDecl)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "i_link", scope: !2795, file: !199, line: 701, baseType: !120, size: 64)
!2803 = !DIDerivedType(tag: DW_TAG_member, name: "i_dir_seq", scope: !2795, file: !199, line: 702, baseType: !70, size: 32)
!2804 = !DIDerivedType(tag: DW_TAG_member, name: "i_generation", scope: !274, file: !199, line: 705, baseType: !262, size: 32, offset: 4032)
!2805 = !DIDerivedType(tag: DW_TAG_member, name: "i_fsnotify_mask", scope: !274, file: !199, line: 708, baseType: !262, size: 32, offset: 4064)
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "i_fsnotify_marks", scope: !274, file: !199, line: 709, baseType: !2395, size: 64, offset: 4096)
!2807 = !DIDerivedType(tag: DW_TAG_member, name: "i_private", scope: !274, file: !199, line: 720, baseType: !64, size: 64, offset: 4160)
!2808 = !DIDerivedType(tag: DW_TAG_member, name: "d_iname", scope: !229, file: !226, line: 98, baseType: !2809, size: 256, offset: 448)
!2809 = !DICompositeType(tag: DW_TAG_array_type, baseType: !271, size: 256, elements: !1983)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "d_lockref", scope: !229, file: !226, line: 101, baseType: !2811, size: 32, offset: 704)
!2811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lockref", file: !2812, line: 25, size: 32, elements: !2813)
!2812 = !DIFile(filename: "./include/linux/lockref.h", directory: "/home/lizy2001/genbc/linux")
!2813 = !{!2814}
!2814 = !DIDerivedType(tag: DW_TAG_member, scope: !2811, file: !2812, line: 26, baseType: !2815, size: 32)
!2815 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2811, file: !2812, line: 26, size: 32, elements: !2816)
!2816 = !{!2817}
!2817 = !DIDerivedType(tag: DW_TAG_member, scope: !2815, file: !2812, line: 30, baseType: !2818, size: 32)
!2818 = distinct !DICompositeType(tag: DW_TAG_structure_type, scope: !2815, file: !2812, line: 30, size: 32, elements: !2819)
!2819 = !{!2820, !2821}
!2820 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !2818, file: !2812, line: 31, baseType: !31)
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2818, file: !2812, line: 32, baseType: !104, size: 32)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "d_op", scope: !229, file: !226, line: 102, baseType: !2412, size: 64, offset: 768)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "d_sb", scope: !229, file: !226, line: 103, baseType: !438, size: 64, offset: 832)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "d_time", scope: !229, file: !226, line: 104, baseType: !57, size: 64, offset: 896)
!2825 = !DIDerivedType(tag: DW_TAG_member, name: "d_fsdata", scope: !229, file: !226, line: 105, baseType: !64, size: 64, offset: 960)
!2826 = !DIDerivedType(tag: DW_TAG_member, scope: !229, file: !226, line: 107, baseType: !2827, size: 128, offset: 1024)
!2827 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !229, file: !226, line: 107, size: 128, elements: !2828)
!2828 = !{!2829, !2830}
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "d_lru", scope: !2827, file: !226, line: 108, baseType: !47, size: 128)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "d_wait", scope: !2827, file: !226, line: 109, baseType: !2831, size: 64)
!2831 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1233, size: 64)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "d_child", scope: !229, file: !226, line: 111, baseType: !47, size: 128, offset: 1152)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "d_subdirs", scope: !229, file: !226, line: 112, baseType: !47, size: 128, offset: 1280)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "d_u", scope: !229, file: !226, line: 120, baseType: !2835, size: 128, offset: 1408)
!2835 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !229, file: !226, line: 116, size: 128, elements: !2836)
!2836 = !{!2837, !2838, !2839}
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "d_alias", scope: !2835, file: !226, line: 117, baseType: !481, size: 128)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "d_in_lookup_hash", scope: !2835, file: !226, line: 118, baseType: !243, size: 128)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "d_rcu", scope: !2835, file: !226, line: 119, baseType: !211, size: 128, align: 64)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "f_inode", scope: !198, file: !199, line: 922, baseType: !273, size: 64, offset: 256)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "f_op", scope: !198, file: !199, line: 923, baseType: !2561, size: 64, offset: 320)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "f_lock", scope: !198, file: !199, line: 929, baseType: !31, offset: 384)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "f_write_hint", scope: !198, file: !199, line: 930, baseType: !2844, size: 32, offset: 384)
!2844 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rw_hint", file: !199, line: 296, baseType: !70, size: 32, elements: !2845)
!2845 = !{!2846, !2847, !2848, !2849, !2850, !2851}
!2846 = !DIEnumerator(name: "WRITE_LIFE_NOT_SET", value: 0, isUnsigned: true)
!2847 = !DIEnumerator(name: "WRITE_LIFE_NONE", value: 1, isUnsigned: true)
!2848 = !DIEnumerator(name: "WRITE_LIFE_SHORT", value: 2, isUnsigned: true)
!2849 = !DIEnumerator(name: "WRITE_LIFE_MEDIUM", value: 3, isUnsigned: true)
!2850 = !DIEnumerator(name: "WRITE_LIFE_LONG", value: 4, isUnsigned: true)
!2851 = !DIEnumerator(name: "WRITE_LIFE_EXTREME", value: 5, isUnsigned: true)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "f_count", scope: !198, file: !199, line: 931, baseType: !18, size: 64, offset: 448)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "f_flags", scope: !198, file: !199, line: 932, baseType: !70, size: 32, offset: 512)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "f_mode", scope: !198, file: !199, line: 933, baseType: !2408, size: 32, offset: 544)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "f_pos_lock", scope: !198, file: !199, line: 934, baseType: !14, size: 192, offset: 576)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "f_pos", scope: !198, file: !199, line: 935, baseType: !372, size: 64, offset: 768)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "f_owner", scope: !198, file: !199, line: 936, baseType: !2858, size: 192, offset: 832)
!2858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fown_struct", file: !199, line: 885, size: 192, elements: !2859)
!2859 = !{!2860, !2861, !2862, !2870, !2871, !2872}
!2860 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !2858, file: !199, line: 886, baseType: !2661)
!2861 = !DIDerivedType(tag: DW_TAG_member, name: "pid", scope: !2858, file: !199, line: 887, baseType: !1222, size: 64)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "pid_type", scope: !2858, file: !199, line: 888, baseType: !2863, size: 32, offset: 64)
!2863 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "pid_type", file: !1224, line: 9, baseType: !70, size: 32, elements: !2864)
!2864 = !{!2865, !2866, !2867, !2868, !2869}
!2865 = !DIEnumerator(name: "PIDTYPE_PID", value: 0, isUnsigned: true)
!2866 = !DIEnumerator(name: "PIDTYPE_TGID", value: 1, isUnsigned: true)
!2867 = !DIEnumerator(name: "PIDTYPE_PGID", value: 2, isUnsigned: true)
!2868 = !DIEnumerator(name: "PIDTYPE_SID", value: 3, isUnsigned: true)
!2869 = !DIEnumerator(name: "PIDTYPE_MAX", value: 4, isUnsigned: true)
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2858, file: !199, line: 889, baseType: !279, size: 32, offset: 96)
!2871 = !DIDerivedType(tag: DW_TAG_member, name: "euid", scope: !2858, file: !199, line: 889, baseType: !279, size: 32, offset: 128)
!2872 = !DIDerivedType(tag: DW_TAG_member, name: "signum", scope: !2858, file: !199, line: 890, baseType: !104, size: 32, offset: 160)
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "f_cred", scope: !198, file: !199, line: 937, baseType: !1299, size: 64, offset: 1024)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "f_ra", scope: !198, file: !199, line: 938, baseType: !2875, size: 256, offset: 1088)
!2875 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "file_ra_state", file: !199, line: 896, size: 256, elements: !2876)
!2876 = !{!2877, !2878, !2879, !2880, !2881, !2882}
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !2875, file: !199, line: 897, baseType: !57, size: 64)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2875, file: !199, line: 898, baseType: !70, size: 32, offset: 64)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "async_size", scope: !2875, file: !199, line: 899, baseType: !70, size: 32, offset: 96)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "ra_pages", scope: !2875, file: !199, line: 902, baseType: !70, size: 32, offset: 128)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "mmap_miss", scope: !2875, file: !199, line: 903, baseType: !70, size: 32, offset: 160)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "prev_pos", scope: !2875, file: !199, line: 904, baseType: !372, size: 64, offset: 192)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "f_version", scope: !198, file: !199, line: 940, baseType: !265, size: 64, offset: 1344)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "private_data", scope: !198, file: !199, line: 945, baseType: !64, size: 64, offset: 1408)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "f_ep_links", scope: !198, file: !199, line: 949, baseType: !47, size: 128, offset: 1472)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "f_tfile_llink", scope: !198, file: !199, line: 950, baseType: !47, size: 128, offset: 1600)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "f_mapping", scope: !198, file: !199, line: 952, baseType: !576, size: 64, offset: 1728)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "f_wb_err", scope: !198, file: !199, line: 953, baseType: !751, size: 32, offset: 1792)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "f_sb_err", scope: !198, file: !199, line: 954, baseType: !751, size: 32, offset: 1824)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !188, file: !145, line: 174, baseType: !194, size: 64, offset: 320)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "mmap", scope: !188, file: !145, line: 176, baseType: !2892, size: 64, offset: 384)
!2892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2893, size: 64)
!2893 = !DISubroutineType(types: !2894)
!2894 = !{!104, !197, !86, !187, !823}
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "attrs", scope: !176, file: !145, line: 90, baseType: !171, size: 64, offset: 192)
!2896 = !DIDerivedType(tag: DW_TAG_member, name: "bin_attrs", scope: !176, file: !145, line: 91, baseType: !2897, size: 64, offset: 256)
!2897 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !187, size: 64)
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "child_ns_type", scope: !135, file: !78, line: 143, baseType: !2899, size: 64, offset: 256)
!2899 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2900, size: 64)
!2900 = !DISubroutineType(types: !2901)
!2901 = !{!2902, !86}
!2902 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2903, size: 64)
!2903 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2904)
!2904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kobj_ns_type_operations", file: !2905, line: 39, size: 384, elements: !2906)
!2905 = !DIFile(filename: "./include/linux/kobject_ns.h", directory: "/home/lizy2001/genbc/linux")
!2906 = !{!2907, !2913, !2917, !2921, !2927, !2931}
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2904, file: !2905, line: 40, baseType: !2908, size: 32)
!2908 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "kobj_ns_type", file: !2905, line: 26, baseType: !70, size: 32, elements: !2909)
!2909 = !{!2910, !2911, !2912}
!2910 = !DIEnumerator(name: "KOBJ_NS_TYPE_NONE", value: 0, isUnsigned: true)
!2911 = !DIEnumerator(name: "KOBJ_NS_TYPE_NET", value: 1, isUnsigned: true)
!2912 = !DIEnumerator(name: "KOBJ_NS_TYPES", value: 2, isUnsigned: true)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "current_may_mount", scope: !2904, file: !2905, line: 41, baseType: !2914, size: 64, offset: 64)
!2914 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2915, size: 64)
!2915 = !DISubroutineType(types: !2916)
!2916 = !{!331}
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "grab_current_ns", scope: !2904, file: !2905, line: 42, baseType: !2918, size: 64, offset: 128)
!2918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2919, size: 64)
!2919 = !DISubroutineType(types: !2920)
!2920 = !{!64}
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "netlink_ns", scope: !2904, file: !2905, line: 43, baseType: !2922, size: 64, offset: 192)
!2922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2923, size: 64)
!2923 = !DISubroutineType(types: !2924)
!2924 = !{!1880, !2925}
!2925 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2926, size: 64)
!2926 = !DICompositeType(tag: DW_TAG_structure_type, name: "sock", file: !2905, line: 19, flags: DIFlagFwdDecl)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "initial_ns", scope: !2904, file: !2905, line: 44, baseType: !2928, size: 64, offset: 256)
!2928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2929, size: 64)
!2929 = !DISubroutineType(types: !2930)
!2930 = !{!1880}
!2931 = !DIDerivedType(tag: DW_TAG_member, name: "drop_ns", scope: !2904, file: !2905, line: 45, baseType: !61, size: 64, offset: 320)
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "namespace", scope: !135, file: !78, line: 144, baseType: !2933, size: 64, offset: 320)
!2933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2934, size: 64)
!2934 = !DISubroutineType(types: !2935)
!2935 = !{!1880, !86}
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "get_ownership", scope: !135, file: !78, line: 145, baseType: !2937, size: 64, offset: 384)
!2937 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2938, size: 64)
!2938 = !DISubroutineType(types: !2939)
!2939 = !{null, !86, !2940, !2941}
!2940 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !279, size: 64)
!2941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !287, size: 64)
!2942 = !DIDerivedType(tag: DW_TAG_member, name: "sd", scope: !77, file: !78, line: 70, baseType: !2943, size: 64, offset: 384)
!2943 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2944, size: 64)
!2944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_node", file: !458, line: 123, size: 1024, elements: !2945)
!2945 = !{!2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !3074, !3075, !3076, !3077, !3078}
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2944, file: !458, line: 124, baseType: !589, size: 32)
!2947 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !2944, file: !458, line: 125, baseType: !589, size: 32, offset: 32)
!2948 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !2944, file: !458, line: 135, baseType: !2943, size: 64, offset: 64)
!2949 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2944, file: !458, line: 136, baseType: !81, size: 64, offset: 128)
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "rb", scope: !2944, file: !458, line: 138, baseType: !602, size: 192, align: 64, offset: 192)
!2951 = !DIDerivedType(tag: DW_TAG_member, name: "ns", scope: !2944, file: !458, line: 140, baseType: !1880, size: 64, offset: 384)
!2952 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !2944, file: !458, line: 141, baseType: !70, size: 32, offset: 448)
!2953 = !DIDerivedType(tag: DW_TAG_member, scope: !2944, file: !458, line: 142, baseType: !2954, size: 256, offset: 512)
!2954 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2944, file: !458, line: 142, size: 256, elements: !2955)
!2955 = !{!2956, !3002, !3006}
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "dir", scope: !2954, file: !458, line: 143, baseType: !2957, size: 192)
!2957 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_elem_dir", file: !458, line: 91, size: 192, elements: !2958)
!2958 = !{!2959, !2960, !2961}
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "subdirs", scope: !2957, file: !458, line: 92, baseType: !57, size: 64)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "children", scope: !2957, file: !458, line: 94, baseType: !598, size: 64, offset: 64)
!2961 = !DIDerivedType(tag: DW_TAG_member, name: "root", scope: !2957, file: !458, line: 100, baseType: !2962, size: 64, offset: 128)
!2962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2963, size: 64)
!2963 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_root", file: !458, line: 180, size: 704, elements: !2964)
!2964 = !{!2965, !2966, !2967, !2974, !2975, !2976, !3000, !3001}
!2965 = !DIDerivedType(tag: DW_TAG_member, name: "kn", scope: !2963, file: !458, line: 182, baseType: !2943, size: 64)
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2963, file: !458, line: 183, baseType: !70, size: 32, offset: 64)
!2967 = !DIDerivedType(tag: DW_TAG_member, name: "ino_idr", scope: !2963, file: !458, line: 186, baseType: !2968, size: 192, offset: 128)
!2968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "idr", file: !2969, line: 19, size: 192, elements: !2970)
!2969 = !DIFile(filename: "./include/linux/idr.h", directory: "/home/lizy2001/genbc/linux")
!2970 = !{!2971, !2972, !2973}
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "idr_rt", scope: !2968, file: !2969, line: 20, baseType: !581, size: 128)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "idr_base", scope: !2968, file: !2969, line: 21, baseType: !70, size: 32, offset: 128)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "idr_next", scope: !2968, file: !2969, line: 22, baseType: !70, size: 32, offset: 160)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "last_id_lowbits", scope: !2963, file: !458, line: 187, baseType: !261, size: 32, offset: 320)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "id_highbits", scope: !2963, file: !458, line: 188, baseType: !261, size: 32, offset: 352)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "syscall_ops", scope: !2963, file: !458, line: 189, baseType: !2977, size: 64, offset: 384)
!2977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2978, size: 64)
!2978 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_syscall_ops", file: !458, line: 168, size: 320, elements: !2979)
!2979 = !{!2980, !2984, !2988, !2992, !2996}
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "show_options", scope: !2978, file: !458, line: 169, baseType: !2981, size: 64)
!2981 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2982, size: 64)
!2982 = !DISubroutineType(types: !2983)
!2983 = !{!104, !553, !2962}
!2984 = !DIDerivedType(tag: DW_TAG_member, name: "mkdir", scope: !2978, file: !458, line: 171, baseType: !2985, size: 64, offset: 64)
!2985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2986, size: 64)
!2986 = !DISubroutineType(types: !2987)
!2987 = !{!104, !2943, !81, !161}
!2988 = !DIDerivedType(tag: DW_TAG_member, name: "rmdir", scope: !2978, file: !458, line: 173, baseType: !2989, size: 64, offset: 128)
!2989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2990, size: 64)
!2990 = !DISubroutineType(types: !2991)
!2991 = !{!104, !2943}
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "rename", scope: !2978, file: !458, line: 174, baseType: !2993, size: 64, offset: 192)
!2993 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2994, size: 64)
!2994 = !DISubroutineType(types: !2995)
!2995 = !{!104, !2943, !2943, !81}
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "show_path", scope: !2978, file: !458, line: 176, baseType: !2997, size: 64, offset: 256)
!2997 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2998, size: 64)
!2998 = !DISubroutineType(types: !2999)
!2999 = !{!104, !553, !2943, !2962}
!3000 = !DIDerivedType(tag: DW_TAG_member, name: "supers", scope: !2963, file: !458, line: 192, baseType: !47, size: 128, offset: 448)
!3001 = !DIDerivedType(tag: DW_TAG_member, name: "deactivate_waitq", scope: !2963, file: !458, line: 194, baseType: !1233, size: 128, offset: 576)
!3002 = !DIDerivedType(tag: DW_TAG_member, name: "symlink", scope: !2954, file: !458, line: 144, baseType: !3003, size: 64)
!3003 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_elem_symlink", file: !458, line: 103, size: 64, elements: !3004)
!3004 = !{!3005}
!3005 = !DIDerivedType(tag: DW_TAG_member, name: "target_kn", scope: !3003, file: !458, line: 104, baseType: !2943, size: 64)
!3006 = !DIDerivedType(tag: DW_TAG_member, name: "attr", scope: !2954, file: !458, line: 145, baseType: !3007, size: 256)
!3007 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_elem_attr", file: !458, line: 107, size: 256, elements: !3008)
!3008 = !{!3009, !3069, !3072, !3073}
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3007, file: !458, line: 108, baseType: !3010, size: 64)
!3010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3011, size: 64)
!3011 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3012)
!3012 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_ops", file: !458, line: 217, size: 768, elements: !3013)
!3013 = !{!3014, !3034, !3038, !3042, !3046, !3050, !3054, !3058, !3059, !3060, !3061, !3065}
!3014 = !DIDerivedType(tag: DW_TAG_member, name: "open", scope: !3012, file: !458, line: 222, baseType: !3015, size: 64)
!3015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3016, size: 64)
!3016 = !DISubroutineType(types: !3017)
!3017 = !{!104, !3018}
!3018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3019, size: 64)
!3019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_open_file", file: !458, line: 197, size: 1088, elements: !3020)
!3020 = !{!3021, !3022, !3023, !3024, !3025, !3026, !3027, !3028, !3029, !3030, !3031, !3032, !3033}
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "kn", scope: !3019, file: !458, line: 199, baseType: !2943, size: 64)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "file", scope: !3019, file: !458, line: 200, baseType: !197, size: 64, offset: 64)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "seq_file", scope: !3019, file: !458, line: 201, baseType: !553, size: 64, offset: 128)
!3024 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !3019, file: !458, line: 202, baseType: !64, size: 64, offset: 192)
!3025 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", scope: !3019, file: !458, line: 205, baseType: !14, size: 192, offset: 256)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "prealloc_mutex", scope: !3019, file: !458, line: 206, baseType: !14, size: 192, offset: 448)
!3027 = !DIDerivedType(tag: DW_TAG_member, name: "event", scope: !3019, file: !458, line: 207, baseType: !104, size: 32, offset: 640)
!3028 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !3019, file: !458, line: 208, baseType: !47, size: 128, offset: 704)
!3029 = !DIDerivedType(tag: DW_TAG_member, name: "prealloc_buf", scope: !3019, file: !458, line: 209, baseType: !120, size: 64, offset: 832)
!3030 = !DIDerivedType(tag: DW_TAG_member, name: "atomic_write_len", scope: !3019, file: !458, line: 211, baseType: !167, size: 64, offset: 896)
!3031 = !DIDerivedType(tag: DW_TAG_member, name: "mmapped", scope: !3019, file: !458, line: 212, baseType: !331, size: 1, offset: 960, flags: DIFlagBitField, extraData: i64 960)
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "released", scope: !3019, file: !458, line: 213, baseType: !331, size: 1, offset: 961, flags: DIFlagBitField, extraData: i64 960)
!3033 = !DIDerivedType(tag: DW_TAG_member, name: "vm_ops", scope: !3019, file: !458, line: 214, baseType: !851, size: 64, offset: 1024)
!3034 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !3012, file: !458, line: 223, baseType: !3035, size: 64, offset: 64)
!3035 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3036, size: 64)
!3036 = !DISubroutineType(types: !3037)
!3037 = !{null, !3018}
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "seq_show", scope: !3012, file: !458, line: 236, baseType: !3039, size: 64, offset: 128)
!3039 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3040, size: 64)
!3040 = !DISubroutineType(types: !3041)
!3041 = !{!104, !553, !64}
!3042 = !DIDerivedType(tag: DW_TAG_member, name: "seq_start", scope: !3012, file: !458, line: 238, baseType: !3043, size: 64, offset: 192)
!3043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3044, size: 64)
!3044 = !DISubroutineType(types: !3045)
!3045 = !{!64, !553, !2574}
!3046 = !DIDerivedType(tag: DW_TAG_member, name: "seq_next", scope: !3012, file: !458, line: 239, baseType: !3047, size: 64, offset: 256)
!3047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3048, size: 64)
!3048 = !DISubroutineType(types: !3049)
!3049 = !{!64, !553, !64, !2574}
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "seq_stop", scope: !3012, file: !458, line: 240, baseType: !3051, size: 64, offset: 320)
!3051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3052, size: 64)
!3052 = !DISubroutineType(types: !3053)
!3053 = !{null, !553, !64}
!3054 = !DIDerivedType(tag: DW_TAG_member, name: "read", scope: !3012, file: !458, line: 242, baseType: !3055, size: 64, offset: 384)
!3055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3056, size: 64)
!3056 = !DISubroutineType(types: !3057)
!3057 = !{!151, !3018, !120, !167, !372}
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "atomic_write_len", scope: !3012, file: !458, line: 252, baseType: !167, size: 64, offset: 448)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "prealloc", scope: !3012, file: !458, line: 259, baseType: !331, size: 8, offset: 512)
!3060 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !3012, file: !458, line: 260, baseType: !3055, size: 64, offset: 576)
!3061 = !DIDerivedType(tag: DW_TAG_member, name: "poll", scope: !3012, file: !458, line: 263, baseType: !3062, size: 64, offset: 640)
!3062 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3063, size: 64)
!3063 = !DISubroutineType(types: !3064)
!3064 = !{!2603, !3018, !2605}
!3065 = !DIDerivedType(tag: DW_TAG_member, name: "mmap", scope: !3012, file: !458, line: 266, baseType: !3066, size: 64, offset: 704)
!3066 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3067, size: 64)
!3067 = !DISubroutineType(types: !3068)
!3068 = !{!104, !3018, !823}
!3069 = !DIDerivedType(tag: DW_TAG_member, name: "open", scope: !3007, file: !458, line: 109, baseType: !3070, size: 64, offset: 64)
!3070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3071, size: 64)
!3071 = !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_open_node", file: !458, line: 31, flags: DIFlagFwdDecl)
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3007, file: !458, line: 110, baseType: !372, size: 64, offset: 128)
!3073 = !DIDerivedType(tag: DW_TAG_member, name: "notify_next", scope: !3007, file: !458, line: 111, baseType: !2943, size: 64, offset: 192)
!3074 = !DIDerivedType(tag: DW_TAG_member, name: "priv", scope: !2944, file: !458, line: 148, baseType: !64, size: 64, offset: 768)
!3075 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2944, file: !458, line: 154, baseType: !265, size: 64, offset: 832)
!3076 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2944, file: !458, line: 156, baseType: !162, size: 16, offset: 896)
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2944, file: !458, line: 157, baseType: !161, size: 16, offset: 912)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "iattr", scope: !2944, file: !458, line: 158, baseType: !3079, size: 64, offset: 960)
!3079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3080, size: 64)
!3080 = !DICompositeType(tag: DW_TAG_structure_type, name: "kernfs_iattrs", file: !458, line: 32, flags: DIFlagFwdDecl)
!3081 = !DIDerivedType(tag: DW_TAG_member, name: "kref", scope: !77, file: !78, line: 71, baseType: !3082, size: 32, offset: 448)
!3082 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "kref", file: !3083, line: 19, size: 32, elements: !3084)
!3083 = !DIFile(filename: "./include/linux/kref.h", directory: "/home/lizy2001/genbc/linux")
!3084 = !{!3085}
!3085 = !DIDerivedType(tag: DW_TAG_member, name: "refcount", scope: !3082, file: !3083, line: 20, baseType: !970, size: 32)
!3086 = !DIDerivedType(tag: DW_TAG_member, name: "state_initialized", scope: !77, file: !78, line: 75, baseType: !70, size: 1, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "state_in_sysfs", scope: !77, file: !78, line: 76, baseType: !70, size: 1, offset: 481, flags: DIFlagBitField, extraData: i64 480)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "state_add_uevent_sent", scope: !77, file: !78, line: 77, baseType: !70, size: 1, offset: 482, flags: DIFlagBitField, extraData: i64 480)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "state_remove_uevent_sent", scope: !77, file: !78, line: 78, baseType: !70, size: 1, offset: 483, flags: DIFlagBitField, extraData: i64 480)
!3090 = !DIDerivedType(tag: DW_TAG_member, name: "uevent_suppress", scope: !77, file: !78, line: 79, baseType: !70, size: 1, offset: 484, flags: DIFlagBitField, extraData: i64 480)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "parent", scope: !73, file: !74, line: 463, baseType: !72, size: 64, offset: 512)
!3092 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !73, file: !74, line: 465, baseType: !3093, size: 64, offset: 576)
!3093 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3094, size: 64)
!3094 = !DICompositeType(tag: DW_TAG_structure_type, name: "device_private", file: !74, line: 36, flags: DIFlagFwdDecl)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "init_name", scope: !73, file: !74, line: 467, baseType: !81, size: 64, offset: 640)
!3096 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !73, file: !74, line: 468, baseType: !3097, size: 64, offset: 704)
!3097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3098, size: 64)
!3098 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3099)
!3099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "device_type", file: !74, line: 87, size: 384, elements: !3100)
!3100 = !{!3101, !3102, !3103, !3107, !3112, !3116}
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3099, file: !74, line: 88, baseType: !81, size: 64)
!3102 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !3099, file: !74, line: 89, baseType: !173, size: 64, offset: 64)
!3103 = !DIDerivedType(tag: DW_TAG_member, name: "uevent", scope: !3099, file: !74, line: 90, baseType: !3104, size: 64, offset: 128)
!3104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3105, size: 64)
!3105 = !DISubroutineType(types: !3106)
!3106 = !{!104, !72, !115}
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "devnode", scope: !3099, file: !74, line: 91, baseType: !3108, size: 64, offset: 192)
!3108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3109, size: 64)
!3109 = !DISubroutineType(types: !3110)
!3110 = !{!120, !72, !3111, !2940, !2941}
!3111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !161, size: 64)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !3099, file: !74, line: 93, baseType: !3113, size: 64, offset: 256)
!3113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3114, size: 64)
!3114 = !DISubroutineType(types: !3115)
!3115 = !{null, !72}
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !3099, file: !74, line: 95, baseType: !3117, size: 64, offset: 320)
!3117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3118, size: 64)
!3118 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3119)
!3119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pm_ops", file: !3120, line: 278, size: 1472, elements: !3121)
!3120 = !DIFile(filename: "./include/linux/pm.h", directory: "/home/lizy2001/genbc/linux")
!3121 = !{!3122, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147}
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "prepare", scope: !3119, file: !3120, line: 279, baseType: !3123, size: 64)
!3123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3124, size: 64)
!3124 = !DISubroutineType(types: !3125)
!3125 = !{!104, !72}
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "complete", scope: !3119, file: !3120, line: 280, baseType: !3113, size: 64, offset: 64)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "suspend", scope: !3119, file: !3120, line: 281, baseType: !3123, size: 64, offset: 128)
!3128 = !DIDerivedType(tag: DW_TAG_member, name: "resume", scope: !3119, file: !3120, line: 282, baseType: !3123, size: 64, offset: 192)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "freeze", scope: !3119, file: !3120, line: 283, baseType: !3123, size: 64, offset: 256)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "thaw", scope: !3119, file: !3120, line: 284, baseType: !3123, size: 64, offset: 320)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "poweroff", scope: !3119, file: !3120, line: 285, baseType: !3123, size: 64, offset: 384)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "restore", scope: !3119, file: !3120, line: 286, baseType: !3123, size: 64, offset: 448)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "suspend_late", scope: !3119, file: !3120, line: 287, baseType: !3123, size: 64, offset: 512)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "resume_early", scope: !3119, file: !3120, line: 288, baseType: !3123, size: 64, offset: 576)
!3135 = !DIDerivedType(tag: DW_TAG_member, name: "freeze_late", scope: !3119, file: !3120, line: 289, baseType: !3123, size: 64, offset: 640)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "thaw_early", scope: !3119, file: !3120, line: 290, baseType: !3123, size: 64, offset: 704)
!3137 = !DIDerivedType(tag: DW_TAG_member, name: "poweroff_late", scope: !3119, file: !3120, line: 291, baseType: !3123, size: 64, offset: 768)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "restore_early", scope: !3119, file: !3120, line: 292, baseType: !3123, size: 64, offset: 832)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "suspend_noirq", scope: !3119, file: !3120, line: 293, baseType: !3123, size: 64, offset: 896)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "resume_noirq", scope: !3119, file: !3120, line: 294, baseType: !3123, size: 64, offset: 960)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "freeze_noirq", scope: !3119, file: !3120, line: 295, baseType: !3123, size: 64, offset: 1024)
!3142 = !DIDerivedType(tag: DW_TAG_member, name: "thaw_noirq", scope: !3119, file: !3120, line: 296, baseType: !3123, size: 64, offset: 1088)
!3143 = !DIDerivedType(tag: DW_TAG_member, name: "poweroff_noirq", scope: !3119, file: !3120, line: 297, baseType: !3123, size: 64, offset: 1152)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "restore_noirq", scope: !3119, file: !3120, line: 298, baseType: !3123, size: 64, offset: 1216)
!3145 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_suspend", scope: !3119, file: !3120, line: 299, baseType: !3123, size: 64, offset: 1280)
!3146 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_resume", scope: !3119, file: !3120, line: 300, baseType: !3123, size: 64, offset: 1344)
!3147 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_idle", scope: !3119, file: !3120, line: 301, baseType: !3123, size: 64, offset: 1408)
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "bus", scope: !73, file: !74, line: 470, baseType: !3149, size: 64, offset: 768)
!3149 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3150, size: 64)
!3150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bus_type", file: !3151, line: 82, size: 1408, elements: !3152)
!3151 = !DIFile(filename: "./include/linux/device/bus.h", directory: "/home/lizy2001/genbc/linux")
!3152 = !{!3153, !3154, !3155, !3156, !3157, !3158, !3159, !3206, !3207, !3208, !3209, !3210, !3211, !3212, !3213, !3214, !3215, !3216, !3217, !3218, !3222, !3225, !3226}
!3153 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3150, file: !3151, line: 83, baseType: !81, size: 64)
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "dev_name", scope: !3150, file: !3151, line: 84, baseType: !81, size: 64, offset: 64)
!3155 = !DIDerivedType(tag: DW_TAG_member, name: "dev_root", scope: !3150, file: !3151, line: 85, baseType: !72, size: 64, offset: 128)
!3156 = !DIDerivedType(tag: DW_TAG_member, name: "bus_groups", scope: !3150, file: !3151, line: 86, baseType: !173, size: 64, offset: 192)
!3157 = !DIDerivedType(tag: DW_TAG_member, name: "dev_groups", scope: !3150, file: !3151, line: 87, baseType: !173, size: 64, offset: 256)
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "drv_groups", scope: !3150, file: !3151, line: 88, baseType: !173, size: 64, offset: 320)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "match", scope: !3150, file: !3151, line: 90, baseType: !3160, size: 64, offset: 384)
!3160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3161, size: 64)
!3161 = !DISubroutineType(types: !3162)
!3162 = !{!104, !72, !3163}
!3163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3164, size: 64)
!3164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "device_driver", file: !3165, line: 95, size: 1152, elements: !3166)
!3165 = !DIFile(filename: "./include/linux/device/driver.h", directory: "/home/lizy2001/genbc/linux")
!3166 = !{!3167, !3168, !3169, !3170, !3171, !3172, !3178, !3182, !3186, !3187, !3188, !3189, !3190, !3198, !3199, !3200, !3201, !3202, !3203}
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3164, file: !3165, line: 96, baseType: !81, size: 64)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "bus", scope: !3164, file: !3165, line: 97, baseType: !3149, size: 64, offset: 64)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !3164, file: !3165, line: 99, baseType: !472, size: 64, offset: 128)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "mod_name", scope: !3164, file: !3165, line: 100, baseType: !81, size: 64, offset: 192)
!3171 = !DIDerivedType(tag: DW_TAG_member, name: "suppress_bind_attrs", scope: !3164, file: !3165, line: 102, baseType: !331, size: 8, offset: 256)
!3172 = !DIDerivedType(tag: DW_TAG_member, name: "probe_type", scope: !3164, file: !3165, line: 103, baseType: !3173, size: 32, offset: 288)
!3173 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "probe_type", file: !3165, line: 44, baseType: !70, size: 32, elements: !3174)
!3174 = !{!3175, !3176, !3177}
!3175 = !DIEnumerator(name: "PROBE_DEFAULT_STRATEGY", value: 0, isUnsigned: true)
!3176 = !DIEnumerator(name: "PROBE_PREFER_ASYNCHRONOUS", value: 1, isUnsigned: true)
!3177 = !DIEnumerator(name: "PROBE_FORCE_SYNCHRONOUS", value: 2, isUnsigned: true)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "of_match_table", scope: !3164, file: !3165, line: 105, baseType: !3179, size: 64, offset: 320)
!3179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3180, size: 64)
!3180 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3181)
!3181 = !DICompositeType(tag: DW_TAG_structure_type, name: "of_device_id", file: !3165, line: 105, flags: DIFlagFwdDecl)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "acpi_match_table", scope: !3164, file: !3165, line: 106, baseType: !3183, size: 64, offset: 384)
!3183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3184, size: 64)
!3184 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3185)
!3185 = !DICompositeType(tag: DW_TAG_structure_type, name: "acpi_device_id", file: !3165, line: 106, flags: DIFlagFwdDecl)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "probe", scope: !3164, file: !3165, line: 108, baseType: !3123, size: 64, offset: 448)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "sync_state", scope: !3164, file: !3165, line: 109, baseType: !3113, size: 64, offset: 512)
!3188 = !DIDerivedType(tag: DW_TAG_member, name: "remove", scope: !3164, file: !3165, line: 110, baseType: !3123, size: 64, offset: 576)
!3189 = !DIDerivedType(tag: DW_TAG_member, name: "shutdown", scope: !3164, file: !3165, line: 111, baseType: !3113, size: 64, offset: 640)
!3190 = !DIDerivedType(tag: DW_TAG_member, name: "suspend", scope: !3164, file: !3165, line: 112, baseType: !3191, size: 64, offset: 704)
!3191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3192, size: 64)
!3192 = !DISubroutineType(types: !3193)
!3193 = !{!104, !72, !3194}
!3194 = !DIDerivedType(tag: DW_TAG_typedef, name: "pm_message_t", file: !3120, line: 52, baseType: !3195)
!3195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pm_message", file: !3120, line: 50, size: 32, elements: !3196)
!3196 = !{!3197}
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "event", scope: !3195, file: !3120, line: 51, baseType: !104, size: 32)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "resume", scope: !3164, file: !3165, line: 113, baseType: !3123, size: 64, offset: 768)
!3199 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !3164, file: !3165, line: 114, baseType: !173, size: 64, offset: 832)
!3200 = !DIDerivedType(tag: DW_TAG_member, name: "dev_groups", scope: !3164, file: !3165, line: 115, baseType: !173, size: 64, offset: 896)
!3201 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !3164, file: !3165, line: 117, baseType: !3117, size: 64, offset: 960)
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "coredump", scope: !3164, file: !3165, line: 118, baseType: !3113, size: 64, offset: 1024)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !3164, file: !3165, line: 120, baseType: !3204, size: 64, offset: 1088)
!3204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3205, size: 64)
!3205 = !DICompositeType(tag: DW_TAG_structure_type, name: "driver_private", file: !3165, line: 120, flags: DIFlagFwdDecl)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "uevent", scope: !3150, file: !3151, line: 91, baseType: !3104, size: 64, offset: 448)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "probe", scope: !3150, file: !3151, line: 92, baseType: !3123, size: 64, offset: 512)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "sync_state", scope: !3150, file: !3151, line: 93, baseType: !3113, size: 64, offset: 576)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "remove", scope: !3150, file: !3151, line: 94, baseType: !3123, size: 64, offset: 640)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "shutdown", scope: !3150, file: !3151, line: 95, baseType: !3113, size: 64, offset: 704)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "online", scope: !3150, file: !3151, line: 97, baseType: !3123, size: 64, offset: 768)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "offline", scope: !3150, file: !3151, line: 98, baseType: !3123, size: 64, offset: 832)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "suspend", scope: !3150, file: !3151, line: 100, baseType: !3191, size: 64, offset: 896)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "resume", scope: !3150, file: !3151, line: 101, baseType: !3123, size: 64, offset: 960)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "num_vf", scope: !3150, file: !3151, line: 103, baseType: !3123, size: 64, offset: 1024)
!3216 = !DIDerivedType(tag: DW_TAG_member, name: "dma_configure", scope: !3150, file: !3151, line: 105, baseType: !3123, size: 64, offset: 1088)
!3217 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !3150, file: !3151, line: 107, baseType: !3117, size: 64, offset: 1152)
!3218 = !DIDerivedType(tag: DW_TAG_member, name: "iommu_ops", scope: !3150, file: !3151, line: 109, baseType: !3219, size: 64, offset: 1216)
!3219 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3220, size: 64)
!3220 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3221)
!3221 = !DICompositeType(tag: DW_TAG_structure_type, name: "iommu_ops", file: !3151, line: 109, flags: DIFlagFwdDecl)
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !3150, file: !3151, line: 111, baseType: !3223, size: 64, offset: 1280)
!3223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3224, size: 64)
!3224 = !DICompositeType(tag: DW_TAG_structure_type, name: "subsys_private", file: !3151, line: 111, flags: DIFlagFwdDecl)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "lock_key", scope: !3150, file: !3151, line: 112, baseType: !487, offset: 1344)
!3226 = !DIDerivedType(tag: DW_TAG_member, name: "need_parent_lock", scope: !3150, file: !3151, line: 114, baseType: !331, size: 8, offset: 1344)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "driver", scope: !73, file: !74, line: 471, baseType: !3163, size: 64, offset: 832)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "platform_data", scope: !73, file: !74, line: 473, baseType: !64, size: 64, offset: 896)
!3229 = !DIDerivedType(tag: DW_TAG_member, name: "driver_data", scope: !73, file: !74, line: 475, baseType: !64, size: 64, offset: 960)
!3230 = !DIDerivedType(tag: DW_TAG_member, name: "mutex", scope: !73, file: !74, line: 480, baseType: !14, size: 192, offset: 1024)
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "links", scope: !73, file: !74, line: 484, baseType: !3232, size: 576, offset: 1216)
!3232 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_links_info", file: !74, line: 361, size: 576, elements: !3233)
!3233 = !{!3234, !3235, !3236, !3237, !3238, !3239}
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "suppliers", scope: !3232, file: !74, line: 362, baseType: !47, size: 128)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "consumers", scope: !3232, file: !74, line: 363, baseType: !47, size: 128, offset: 128)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "needs_suppliers", scope: !3232, file: !74, line: 364, baseType: !47, size: 128, offset: 256)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "defer_hook", scope: !3232, file: !74, line: 365, baseType: !47, size: 128, offset: 384)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "need_for_probe", scope: !3232, file: !74, line: 366, baseType: !331, size: 8, offset: 512)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !3232, file: !74, line: 367, baseType: !3240, size: 32, offset: 544)
!3240 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dl_dev_state", file: !74, line: 343, baseType: !70, size: 32, elements: !3241)
!3241 = !{!3242, !3243, !3244, !3245}
!3242 = !DIEnumerator(name: "DL_DEV_NO_DRIVER", value: 0, isUnsigned: true)
!3243 = !DIEnumerator(name: "DL_DEV_PROBING", value: 1, isUnsigned: true)
!3244 = !DIEnumerator(name: "DL_DEV_DRIVER_BOUND", value: 2, isUnsigned: true)
!3245 = !DIEnumerator(name: "DL_DEV_UNBINDING", value: 3, isUnsigned: true)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "power", scope: !73, file: !74, line: 485, baseType: !3247, size: 2304, offset: 1792)
!3247 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pm_info", file: !3120, line: 565, size: 2304, elements: !3248)
!3248 = !{!3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326, !3334, !3341, !3342, !3343, !3344, !3345, !3346, !3347, !3357, !3361}
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "power_state", scope: !3247, file: !3120, line: 566, baseType: !3194, size: 32)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "can_wakeup", scope: !3247, file: !3120, line: 567, baseType: !70, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 32)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "async_suspend", scope: !3247, file: !3120, line: 568, baseType: !70, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 32)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "in_dpm_list", scope: !3247, file: !3120, line: 569, baseType: !331, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 32)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "is_prepared", scope: !3247, file: !3120, line: 570, baseType: !331, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 32)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "is_suspended", scope: !3247, file: !3120, line: 571, baseType: !331, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 32)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "is_noirq_suspended", scope: !3247, file: !3120, line: 572, baseType: !331, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 32)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "is_late_suspended", scope: !3247, file: !3120, line: 573, baseType: !331, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 32)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "no_pm", scope: !3247, file: !3120, line: 574, baseType: !331, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 32)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "early_init", scope: !3247, file: !3120, line: 575, baseType: !331, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 32)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "direct_complete", scope: !3247, file: !3120, line: 576, baseType: !331, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 32)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "driver_flags", scope: !3247, file: !3120, line: 577, baseType: !261, size: 32, offset: 64)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3247, file: !3120, line: 578, baseType: !31, offset: 96)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !3247, file: !3120, line: 580, baseType: !47, size: 128, offset: 128)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "completion", scope: !3247, file: !3120, line: 581, baseType: !1254, size: 192, offset: 256)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "wakeup", scope: !3247, file: !3120, line: 582, baseType: !3265, size: 64, offset: 448)
!3265 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3266, size: 64)
!3266 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wakeup_source", file: !3267, line: 43, size: 1472, elements: !3268)
!3267 = !DIFile(filename: "./include/linux/pm_wakeup.h", directory: "/home/lizy2001/genbc/linux")
!3268 = !{!3269, !3270, !3271, !3272, !3273, !3276, !3288, !3289, !3290, !3291, !3292, !3293, !3294, !3295, !3296, !3297, !3298, !3299, !3300, !3301}
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3266, file: !3267, line: 44, baseType: !81, size: 64)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !3266, file: !3267, line: 45, baseType: !104, size: 32, offset: 64)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !3266, file: !3267, line: 46, baseType: !47, size: 128, offset: 128)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3266, file: !3267, line: 47, baseType: !31, offset: 256)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "wakeirq", scope: !3266, file: !3267, line: 48, baseType: !3274, size: 64, offset: 256)
!3274 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3275, size: 64)
!3275 = !DICompositeType(tag: DW_TAG_structure_type, name: "wake_irq", file: !3120, line: 533, flags: DIFlagFwdDecl)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "timer", scope: !3266, file: !3267, line: 49, baseType: !3277, size: 320, offset: 320)
!3277 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "timer_list", file: !3278, line: 11, size: 320, elements: !3279)
!3278 = !DIFile(filename: "./include/linux/timer.h", directory: "/home/lizy2001/genbc/linux")
!3279 = !{!3280, !3281, !3282, !3287}
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !3277, file: !3278, line: 16, baseType: !481, size: 128)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "expires", scope: !3277, file: !3278, line: 17, baseType: !57, size: 64, offset: 128)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "function", scope: !3277, file: !3278, line: 18, baseType: !3283, size: 64, offset: 192)
!3283 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3284, size: 64)
!3284 = !DISubroutineType(types: !3285)
!3285 = !{null, !3286}
!3286 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3277, size: 64)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3277, file: !3278, line: 19, baseType: !261, size: 32, offset: 256)
!3288 = !DIDerivedType(tag: DW_TAG_member, name: "timer_expires", scope: !3266, file: !3267, line: 50, baseType: !57, size: 64, offset: 640)
!3289 = !DIDerivedType(tag: DW_TAG_member, name: "total_time", scope: !3266, file: !3267, line: 51, baseType: !1041, size: 64, offset: 704)
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "max_time", scope: !3266, file: !3267, line: 52, baseType: !1041, size: 64, offset: 768)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "last_time", scope: !3266, file: !3267, line: 53, baseType: !1041, size: 64, offset: 832)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "start_prevent_time", scope: !3266, file: !3267, line: 54, baseType: !1041, size: 64, offset: 896)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "prevent_sleep_time", scope: !3266, file: !3267, line: 55, baseType: !1041, size: 64, offset: 960)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "event_count", scope: !3266, file: !3267, line: 56, baseType: !57, size: 64, offset: 1024)
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "active_count", scope: !3266, file: !3267, line: 57, baseType: !57, size: 64, offset: 1088)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "relax_count", scope: !3266, file: !3267, line: 58, baseType: !57, size: 64, offset: 1152)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "expire_count", scope: !3266, file: !3267, line: 59, baseType: !57, size: 64, offset: 1216)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "wakeup_count", scope: !3266, file: !3267, line: 60, baseType: !57, size: 64, offset: 1280)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "dev", scope: !3266, file: !3267, line: 61, baseType: !72, size: 64, offset: 1344)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "active", scope: !3266, file: !3267, line: 62, baseType: !331, size: 1, offset: 1408, flags: DIFlagBitField, extraData: i64 1408)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "autosleep_enabled", scope: !3266, file: !3267, line: 63, baseType: !331, size: 1, offset: 1409, flags: DIFlagBitField, extraData: i64 1408)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "wakeup_path", scope: !3247, file: !3120, line: 583, baseType: !331, size: 1, offset: 512, flags: DIFlagBitField, extraData: i64 512)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "syscore", scope: !3247, file: !3120, line: 584, baseType: !331, size: 1, offset: 513, flags: DIFlagBitField, extraData: i64 512)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "no_pm_callbacks", scope: !3247, file: !3120, line: 585, baseType: !331, size: 1, offset: 514, flags: DIFlagBitField, extraData: i64 512)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "must_resume", scope: !3247, file: !3120, line: 586, baseType: !70, size: 1, offset: 515, flags: DIFlagBitField, extraData: i64 512)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "may_skip_resume", scope: !3247, file: !3120, line: 587, baseType: !70, size: 1, offset: 516, flags: DIFlagBitField, extraData: i64 512)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "suspend_timer", scope: !3247, file: !3120, line: 592, baseType: !1032, size: 512, offset: 576)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "timer_expires", scope: !3247, file: !3120, line: 593, baseType: !265, size: 64, offset: 1088)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "work", scope: !3247, file: !3120, line: 594, baseType: !1710, size: 256, offset: 1152)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "wait_queue", scope: !3247, file: !3120, line: 595, baseType: !1233, size: 128, offset: 1408)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "wakeirq", scope: !3247, file: !3120, line: 596, baseType: !3274, size: 64, offset: 1536)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "usage_count", scope: !3247, file: !3120, line: 597, baseType: !589, size: 32, offset: 1600)
!3313 = !DIDerivedType(tag: DW_TAG_member, name: "child_count", scope: !3247, file: !3120, line: 598, baseType: !589, size: 32, offset: 1632)
!3314 = !DIDerivedType(tag: DW_TAG_member, name: "disable_depth", scope: !3247, file: !3120, line: 599, baseType: !70, size: 3, offset: 1664, flags: DIFlagBitField, extraData: i64 1664)
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "idle_notification", scope: !3247, file: !3120, line: 600, baseType: !70, size: 1, offset: 1667, flags: DIFlagBitField, extraData: i64 1664)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "request_pending", scope: !3247, file: !3120, line: 601, baseType: !70, size: 1, offset: 1668, flags: DIFlagBitField, extraData: i64 1664)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "deferred_resume", scope: !3247, file: !3120, line: 602, baseType: !70, size: 1, offset: 1669, flags: DIFlagBitField, extraData: i64 1664)
!3318 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_auto", scope: !3247, file: !3120, line: 603, baseType: !70, size: 1, offset: 1670, flags: DIFlagBitField, extraData: i64 1664)
!3319 = !DIDerivedType(tag: DW_TAG_member, name: "ignore_children", scope: !3247, file: !3120, line: 604, baseType: !331, size: 1, offset: 1671, flags: DIFlagBitField, extraData: i64 1664)
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "no_callbacks", scope: !3247, file: !3120, line: 605, baseType: !70, size: 1, offset: 1672, flags: DIFlagBitField, extraData: i64 1664)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "irq_safe", scope: !3247, file: !3120, line: 606, baseType: !70, size: 1, offset: 1673, flags: DIFlagBitField, extraData: i64 1664)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "use_autosuspend", scope: !3247, file: !3120, line: 607, baseType: !70, size: 1, offset: 1674, flags: DIFlagBitField, extraData: i64 1664)
!3323 = !DIDerivedType(tag: DW_TAG_member, name: "timer_autosuspends", scope: !3247, file: !3120, line: 608, baseType: !70, size: 1, offset: 1675, flags: DIFlagBitField, extraData: i64 1664)
!3324 = !DIDerivedType(tag: DW_TAG_member, name: "memalloc_noio", scope: !3247, file: !3120, line: 609, baseType: !70, size: 1, offset: 1676, flags: DIFlagBitField, extraData: i64 1664)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "links_count", scope: !3247, file: !3120, line: 610, baseType: !70, size: 32, offset: 1696)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "request", scope: !3247, file: !3120, line: 611, baseType: !3327, size: 32, offset: 1728)
!3327 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rpm_request", file: !3120, line: 524, baseType: !70, size: 32, elements: !3328)
!3328 = !{!3329, !3330, !3331, !3332, !3333}
!3329 = !DIEnumerator(name: "RPM_REQ_NONE", value: 0, isUnsigned: true)
!3330 = !DIEnumerator(name: "RPM_REQ_IDLE", value: 1, isUnsigned: true)
!3331 = !DIEnumerator(name: "RPM_REQ_SUSPEND", value: 2, isUnsigned: true)
!3332 = !DIEnumerator(name: "RPM_REQ_AUTOSUSPEND", value: 3, isUnsigned: true)
!3333 = !DIEnumerator(name: "RPM_REQ_RESUME", value: 4, isUnsigned: true)
!3334 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_status", scope: !3247, file: !3120, line: 612, baseType: !3335, size: 32, offset: 1760)
!3335 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rpm_status", file: !3120, line: 502, baseType: !70, size: 32, elements: !3336)
!3336 = !{!3337, !3338, !3339, !3340}
!3337 = !DIEnumerator(name: "RPM_ACTIVE", value: 0, isUnsigned: true)
!3338 = !DIEnumerator(name: "RPM_RESUMING", value: 1, isUnsigned: true)
!3339 = !DIEnumerator(name: "RPM_SUSPENDED", value: 2, isUnsigned: true)
!3340 = !DIEnumerator(name: "RPM_SUSPENDING", value: 3, isUnsigned: true)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "runtime_error", scope: !3247, file: !3120, line: 613, baseType: !104, size: 32, offset: 1792)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "autosuspend_delay", scope: !3247, file: !3120, line: 614, baseType: !104, size: 32, offset: 1824)
!3343 = !DIDerivedType(tag: DW_TAG_member, name: "last_busy", scope: !3247, file: !3120, line: 615, baseType: !265, size: 64, offset: 1856)
!3344 = !DIDerivedType(tag: DW_TAG_member, name: "active_time", scope: !3247, file: !3120, line: 616, baseType: !265, size: 64, offset: 1920)
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "suspended_time", scope: !3247, file: !3120, line: 617, baseType: !265, size: 64, offset: 1984)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "accounting_timestamp", scope: !3247, file: !3120, line: 618, baseType: !265, size: 64, offset: 2048)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "subsys_data", scope: !3247, file: !3120, line: 620, baseType: !3348, size: 64, offset: 2112)
!3348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3349, size: 64)
!3349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pm_subsys_data", file: !3120, line: 536, size: 256, elements: !3350)
!3350 = !{!3351, !3352, !3353, !3354}
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3349, file: !3120, line: 537, baseType: !31)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "refcount", scope: !3349, file: !3120, line: 538, baseType: !70, size: 32)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "clock_list", scope: !3349, file: !3120, line: 540, baseType: !47, size: 128, offset: 64)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "domain_data", scope: !3349, file: !3120, line: 543, baseType: !3355, size: 64, offset: 192)
!3355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3356, size: 64)
!3356 = !DICompositeType(tag: DW_TAG_structure_type, name: "pm_domain_data", file: !3120, line: 534, flags: DIFlagFwdDecl)
!3357 = !DIDerivedType(tag: DW_TAG_member, name: "set_latency_tolerance", scope: !3247, file: !3120, line: 621, baseType: !3358, size: 64, offset: 2176)
!3358 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3359, size: 64)
!3359 = !DISubroutineType(types: !3360)
!3360 = !{null, !72, !1195}
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "qos", scope: !3247, file: !3120, line: 622, baseType: !3362, size: 64, offset: 2240)
!3362 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3363, size: 64)
!3363 = !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pm_qos", file: !3120, line: 622, flags: DIFlagFwdDecl)
!3364 = !DIDerivedType(tag: DW_TAG_member, name: "pm_domain", scope: !73, file: !74, line: 486, baseType: !3365, size: 64, offset: 4096)
!3365 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3366, size: 64)
!3366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_pm_domain", file: !3120, line: 642, size: 1792, elements: !3367)
!3367 = !{!3368, !3369, !3370, !3374, !3375, !3376}
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3366, file: !3120, line: 643, baseType: !3119, size: 1472)
!3369 = !DIDerivedType(tag: DW_TAG_member, name: "start", scope: !3366, file: !3120, line: 644, baseType: !3123, size: 64, offset: 1472)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "detach", scope: !3366, file: !3120, line: 645, baseType: !3371, size: 64, offset: 1536)
!3371 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3372, size: 64)
!3372 = !DISubroutineType(types: !3373)
!3373 = !{null, !72, !331}
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "activate", scope: !3366, file: !3120, line: 646, baseType: !3123, size: 64, offset: 1600)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "sync", scope: !3366, file: !3120, line: 647, baseType: !3113, size: 64, offset: 1664)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "dismiss", scope: !3366, file: !3120, line: 648, baseType: !3113, size: 64, offset: 1728)
!3377 = !DIDerivedType(tag: DW_TAG_member, name: "msi_domain", scope: !73, file: !74, line: 493, baseType: !3378, size: 64, offset: 4160)
!3378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3379, size: 64)
!3379 = !DICompositeType(tag: DW_TAG_structure_type, name: "irq_domain", file: !74, line: 493, flags: DIFlagFwdDecl)
!3380 = !DIDerivedType(tag: DW_TAG_member, name: "msi_list", scope: !73, file: !74, line: 499, baseType: !47, size: 128, offset: 4224)
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "dma_ops", scope: !73, file: !74, line: 502, baseType: !3382, size: 64, offset: 4352)
!3382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3383, size: 64)
!3383 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3384)
!3384 = !DICompositeType(tag: DW_TAG_structure_type, name: "dma_map_ops", file: !74, line: 502, flags: DIFlagFwdDecl)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "dma_mask", scope: !73, file: !74, line: 504, baseType: !3386, size: 64, offset: 4416)
!3386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !265, size: 64)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "coherent_dma_mask", scope: !73, file: !74, line: 505, baseType: !265, size: 64, offset: 4480)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "bus_dma_limit", scope: !73, file: !74, line: 510, baseType: !265, size: 64, offset: 4544)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "dma_range_map", scope: !73, file: !74, line: 511, baseType: !3390, size: 64, offset: 4608)
!3390 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3391, size: 64)
!3391 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3392)
!3392 = !DICompositeType(tag: DW_TAG_structure_type, name: "bus_dma_region", file: !74, line: 511, flags: DIFlagFwdDecl)
!3393 = !DIDerivedType(tag: DW_TAG_member, name: "dma_parms", scope: !73, file: !74, line: 513, baseType: !3394, size: 64, offset: 4672)
!3394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3395, size: 64)
!3395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "device_dma_parameters", file: !74, line: 288, size: 128, elements: !3396)
!3396 = !{!3397, !3398}
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "max_segment_size", scope: !3395, file: !74, line: 293, baseType: !70, size: 32)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "segment_boundary_mask", scope: !3395, file: !74, line: 294, baseType: !57, size: 64, offset: 64)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "dma_pools", scope: !73, file: !74, line: 515, baseType: !47, size: 128, offset: 4736)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "archdata", scope: !73, file: !74, line: 526, baseType: !3401, offset: 4864)
!3401 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "dev_archdata", file: !3402, line: 5, elements: !45)
!3402 = !DIFile(filename: "./arch/x86/include/asm/device.h", directory: "/home/lizy2001/genbc/linux")
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "of_node", scope: !73, file: !74, line: 528, baseType: !3404, size: 64, offset: 4864)
!3404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3405, size: 64)
!3405 = !DICompositeType(tag: DW_TAG_structure_type, name: "device_node", file: !3406, line: 14, flags: DIFlagFwdDecl)
!3406 = !DIFile(filename: "./include/linux/arch_topology.h", directory: "/home/lizy2001/genbc/linux")
!3407 = !DIDerivedType(tag: DW_TAG_member, name: "fwnode", scope: !73, file: !74, line: 529, baseType: !3408, size: 64, offset: 4928)
!3408 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3409, size: 64)
!3409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fwnode_handle", file: !3410, line: 17, size: 192, elements: !3411)
!3410 = !DIFile(filename: "./include/linux/fwnode.h", directory: "/home/lizy2001/genbc/linux")
!3411 = !{!3412, !3413, !3496}
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "secondary", scope: !3409, file: !3410, line: 18, baseType: !3408, size: 64)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3409, file: !3410, line: 19, baseType: !3414, size: 64, offset: 64)
!3414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3415, size: 64)
!3415 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3416)
!3416 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fwnode_operations", file: !3410, line: 110, size: 1152, elements: !3417)
!3417 = !{!3418, !3422, !3426, !3432, !3438, !3442, !3446, !3451, !3455, !3456, !3460, !3464, !3468, !3479, !3480, !3481, !3482, !3492}
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "get", scope: !3416, file: !3410, line: 111, baseType: !3419, size: 64)
!3419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3420, size: 64)
!3420 = !DISubroutineType(types: !3421)
!3421 = !{!3408, !3408}
!3422 = !DIDerivedType(tag: DW_TAG_member, name: "put", scope: !3416, file: !3410, line: 112, baseType: !3423, size: 64, offset: 64)
!3423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3424, size: 64)
!3424 = !DISubroutineType(types: !3425)
!3425 = !{null, !3408}
!3426 = !DIDerivedType(tag: DW_TAG_member, name: "device_is_available", scope: !3416, file: !3410, line: 113, baseType: !3427, size: 64, offset: 128)
!3427 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3428, size: 64)
!3428 = !DISubroutineType(types: !3429)
!3429 = !{!331, !3430}
!3430 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3431, size: 64)
!3431 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3409)
!3432 = !DIDerivedType(tag: DW_TAG_member, name: "device_get_match_data", scope: !3416, file: !3410, line: 114, baseType: !3433, size: 64, offset: 192)
!3433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3434, size: 64)
!3434 = !DISubroutineType(types: !3435)
!3435 = !{!1880, !3430, !3436}
!3436 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3437, size: 64)
!3437 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !73)
!3438 = !DIDerivedType(tag: DW_TAG_member, name: "property_present", scope: !3416, file: !3410, line: 116, baseType: !3439, size: 64, offset: 256)
!3439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3440, size: 64)
!3440 = !DISubroutineType(types: !3441)
!3441 = !{!331, !3430, !81}
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "property_read_int_array", scope: !3416, file: !3410, line: 118, baseType: !3443, size: 64, offset: 320)
!3443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3444, size: 64)
!3444 = !DISubroutineType(types: !3445)
!3445 = !{!104, !3430, !81, !70, !64, !167}
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "property_read_string_array", scope: !3416, file: !3410, line: 123, baseType: !3447, size: 64, offset: 384)
!3447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3448, size: 64)
!3448 = !DISubroutineType(types: !3449)
!3449 = !{!104, !3430, !81, !3450, !167}
!3450 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !81, size: 64)
!3451 = !DIDerivedType(tag: DW_TAG_member, name: "get_name", scope: !3416, file: !3410, line: 126, baseType: !3452, size: 64, offset: 448)
!3452 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3453, size: 64)
!3453 = !DISubroutineType(types: !3454)
!3454 = !{!81, !3430}
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "get_name_prefix", scope: !3416, file: !3410, line: 127, baseType: !3452, size: 64, offset: 512)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "get_parent", scope: !3416, file: !3410, line: 128, baseType: !3457, size: 64, offset: 576)
!3457 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3458, size: 64)
!3458 = !DISubroutineType(types: !3459)
!3459 = !{!3408, !3430}
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "get_next_child_node", scope: !3416, file: !3410, line: 130, baseType: !3461, size: 64, offset: 640)
!3461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3462, size: 64)
!3462 = !DISubroutineType(types: !3463)
!3463 = !{!3408, !3430, !3408}
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "get_named_child_node", scope: !3416, file: !3410, line: 133, baseType: !3465, size: 64, offset: 704)
!3465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3466, size: 64)
!3466 = !DISubroutineType(types: !3467)
!3467 = !{!3408, !3430, !81}
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "get_reference_args", scope: !3416, file: !3410, line: 135, baseType: !3469, size: 64, offset: 768)
!3469 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3470, size: 64)
!3470 = !DISubroutineType(types: !3471)
!3471 = !{!104, !3430, !81, !81, !70, !70, !3472}
!3472 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3473, size: 64)
!3473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fwnode_reference_args", file: !3410, line: 43, size: 640, elements: !3474)
!3474 = !{!3475, !3476, !3477}
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "fwnode", scope: !3473, file: !3410, line: 44, baseType: !3408, size: 64)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !3473, file: !3410, line: 45, baseType: !70, size: 32, offset: 64)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !3473, file: !3410, line: 46, baseType: !3478, size: 512, offset: 128)
!3478 = !DICompositeType(tag: DW_TAG_array_type, baseType: !265, size: 512, elements: !1075)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "graph_get_next_endpoint", scope: !3416, file: !3410, line: 140, baseType: !3461, size: 64, offset: 832)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "graph_get_remote_endpoint", scope: !3416, file: !3410, line: 143, baseType: !3457, size: 64, offset: 896)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "graph_get_port_parent", scope: !3416, file: !3410, line: 145, baseType: !3419, size: 64, offset: 960)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "graph_parse_endpoint", scope: !3416, file: !3410, line: 146, baseType: !3483, size: 64, offset: 1024)
!3483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3484, size: 64)
!3484 = !DISubroutineType(types: !3485)
!3485 = !{!104, !3430, !3486}
!3486 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3487, size: 64)
!3487 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fwnode_endpoint", file: !3410, line: 29, size: 128, elements: !3488)
!3488 = !{!3489, !3490, !3491}
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "port", scope: !3487, file: !3410, line: 30, baseType: !70, size: 32)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !3487, file: !3410, line: 31, baseType: !70, size: 32, offset: 32)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "local_fwnode", scope: !3487, file: !3410, line: 32, baseType: !3430, size: 64, offset: 64)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "add_links", scope: !3416, file: !3410, line: 148, baseType: !3493, size: 64, offset: 1088)
!3493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3494, size: 64)
!3494 = !DISubroutineType(types: !3495)
!3495 = !{!104, !3430, !72}
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "dev", scope: !3409, file: !3410, line: 20, baseType: !72, size: 64, offset: 128)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "devt", scope: !73, file: !74, line: 534, baseType: !354, size: 32, offset: 4992)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !73, file: !74, line: 535, baseType: !261, size: 32, offset: 5024)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "devres_lock", scope: !73, file: !74, line: 537, baseType: !31, offset: 5056)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "devres_head", scope: !73, file: !74, line: 538, baseType: !47, size: 128, offset: 5056)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "class", scope: !73, file: !74, line: 540, baseType: !3502, size: 64, offset: 5184)
!3502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3503, size: 64)
!3503 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "class", file: !3504, line: 54, size: 960, elements: !3505)
!3504 = !DIFile(filename: "./include/linux/device/class.h", directory: "/home/lizy2001/genbc/linux")
!3505 = !{!3506, !3507, !3508, !3509, !3510, !3511, !3512, !3516, !3520, !3521, !3522, !3523, !3527, !3531, !3532}
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3503, file: !3504, line: 55, baseType: !81, size: 64)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "owner", scope: !3503, file: !3504, line: 56, baseType: !472, size: 64, offset: 64)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "class_groups", scope: !3503, file: !3504, line: 58, baseType: !173, size: 64, offset: 128)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "dev_groups", scope: !3503, file: !3504, line: 59, baseType: !173, size: 64, offset: 192)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "dev_kobj", scope: !3503, file: !3504, line: 60, baseType: !86, size: 64, offset: 256)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "dev_uevent", scope: !3503, file: !3504, line: 62, baseType: !3104, size: 64, offset: 320)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "devnode", scope: !3503, file: !3504, line: 63, baseType: !3513, size: 64, offset: 384)
!3513 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3514, size: 64)
!3514 = !DISubroutineType(types: !3515)
!3515 = !{!120, !72, !3111}
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "class_release", scope: !3503, file: !3504, line: 65, baseType: !3517, size: 64, offset: 448)
!3517 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3518, size: 64)
!3518 = !DISubroutineType(types: !3519)
!3519 = !{null, !3502}
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "dev_release", scope: !3503, file: !3504, line: 66, baseType: !3113, size: 64, offset: 512)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "shutdown_pre", scope: !3503, file: !3504, line: 68, baseType: !3123, size: 64, offset: 576)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "ns_type", scope: !3503, file: !3504, line: 70, baseType: !2902, size: 64, offset: 640)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "namespace", scope: !3503, file: !3504, line: 71, baseType: !3524, size: 64, offset: 704)
!3524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3525, size: 64)
!3525 = !DISubroutineType(types: !3526)
!3526 = !{!1880, !72}
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "get_ownership", scope: !3503, file: !3504, line: 73, baseType: !3528, size: 64, offset: 768)
!3528 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3529, size: 64)
!3529 = !DISubroutineType(types: !3530)
!3530 = !{null, !72, !2940, !2941}
!3531 = !DIDerivedType(tag: DW_TAG_member, name: "pm", scope: !3503, file: !3504, line: 75, baseType: !3117, size: 64, offset: 832)
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "p", scope: !3503, file: !3504, line: 77, baseType: !3223, size: 64, offset: 896)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "groups", scope: !73, file: !74, line: 541, baseType: !173, size: 64, offset: 5248)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "release", scope: !73, file: !74, line: 543, baseType: !3113, size: 64, offset: 5312)
!3535 = !DIDerivedType(tag: DW_TAG_member, name: "iommu_group", scope: !73, file: !74, line: 544, baseType: !3536, size: 64, offset: 5376)
!3536 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3537, size: 64)
!3537 = !DICompositeType(tag: DW_TAG_structure_type, name: "iommu_group", file: !74, line: 45, flags: DIFlagFwdDecl)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "iommu", scope: !73, file: !74, line: 545, baseType: !3539, size: 64, offset: 5440)
!3539 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3540, size: 64)
!3540 = !DICompositeType(tag: DW_TAG_structure_type, name: "dev_iommu", file: !74, line: 47, flags: DIFlagFwdDecl)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "offline_disabled", scope: !73, file: !74, line: 547, baseType: !331, size: 1, offset: 5504, flags: DIFlagBitField, extraData: i64 5504)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "offline", scope: !73, file: !74, line: 548, baseType: !331, size: 1, offset: 5505, flags: DIFlagBitField, extraData: i64 5504)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "of_node_reused", scope: !73, file: !74, line: 549, baseType: !331, size: 1, offset: 5506, flags: DIFlagBitField, extraData: i64 5504)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "state_synced", scope: !73, file: !74, line: 550, baseType: !331, size: 1, offset: 5507, flags: DIFlagBitField, extraData: i64 5504)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "work_buf", scope: !7, file: !8, line: 63, baseType: !64, size: 64, offset: 512)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "format", scope: !7, file: !8, line: 64, baseType: !3547, size: 576, offset: 576)
!3547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap_format", file: !8, line: 30, size: 576, elements: !3548)
!3548 = !{!3549, !3550, !3551, !3552, !3553, !3557, !3561, !3562, !3566}
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "buf_size", scope: !3547, file: !8, line: 31, baseType: !167, size: 64)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "reg_bytes", scope: !3547, file: !8, line: 32, baseType: !167, size: 64, offset: 64)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "pad_bytes", scope: !3547, file: !8, line: 33, baseType: !167, size: 64, offset: 128)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "val_bytes", scope: !3547, file: !8, line: 34, baseType: !167, size: 64, offset: 192)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "format_write", scope: !3547, file: !8, line: 35, baseType: !3554, size: 64, offset: 256)
!3554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3555, size: 64)
!3555 = !DISubroutineType(types: !3556)
!3556 = !{null, !6, !70, !70}
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "format_reg", scope: !3547, file: !8, line: 37, baseType: !3558, size: 64, offset: 320)
!3558 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3559, size: 64)
!3559 = !DISubroutineType(types: !3560)
!3560 = !{null, !64, !70, !70}
!3561 = !DIDerivedType(tag: DW_TAG_member, name: "format_val", scope: !3547, file: !8, line: 38, baseType: !3558, size: 64, offset: 384)
!3562 = !DIDerivedType(tag: DW_TAG_member, name: "parse_val", scope: !3547, file: !8, line: 39, baseType: !3563, size: 64, offset: 448)
!3563 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3564, size: 64)
!3564 = !DISubroutineType(types: !3565)
!3565 = !{!70, !1880}
!3566 = !DIDerivedType(tag: DW_TAG_member, name: "parse_inplace", scope: !3547, file: !8, line: 40, baseType: !61, size: 64, offset: 512)
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "bus", scope: !7, file: !8, line: 65, baseType: !3568, size: 64, offset: 1152)
!3568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3569, size: 64)
!3569 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3570)
!3570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap_bus", file: !60, line: 501, size: 896, elements: !3571)
!3571 = !{!3572, !3573, !3578, !3583, !3594, !3599, !3604, !3609, !3614, !3616, !3621, !3622, !3629, !3630, !3631}
!3572 = !DIDerivedType(tag: DW_TAG_member, name: "fast_io", scope: !3570, file: !60, line: 502, baseType: !331, size: 8)
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !3570, file: !60, line: 503, baseType: !3574, size: 64, offset: 64)
!3574 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_hw_write", file: !60, line: 445, baseType: !3575)
!3575 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3576, size: 64)
!3576 = !DISubroutineType(types: !3577)
!3577 = !{!104, !64, !1880, !167}
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "gather_write", scope: !3570, file: !60, line: 504, baseType: !3579, size: 64, offset: 128)
!3579 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_hw_gather_write", file: !60, line: 447, baseType: !3580)
!3580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3581, size: 64)
!3581 = !DISubroutineType(types: !3582)
!3582 = !{!104, !64, !1880, !167, !1880, !167}
!3583 = !DIDerivedType(tag: DW_TAG_member, name: "async_write", scope: !3570, file: !60, line: 505, baseType: !3584, size: 64, offset: 192)
!3584 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_hw_async_write", file: !60, line: 450, baseType: !3585)
!3585 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3586, size: 64)
!3586 = !DISubroutineType(types: !3587)
!3587 = !{!104, !64, !1880, !167, !1880, !167, !3588}
!3588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3589, size: 64)
!3589 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap_async", file: !8, line: 43, size: 256, elements: !3590)
!3590 = !{!3591, !3592, !3593}
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !3589, file: !8, line: 44, baseType: !47, size: 128)
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !3589, file: !8, line: 45, baseType: !6, size: 64, offset: 128)
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "work_buf", scope: !3589, file: !8, line: 46, baseType: !64, size: 64, offset: 192)
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "reg_write", scope: !3570, file: !60, line: 506, baseType: !3595, size: 64, offset: 256)
!3595 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_hw_reg_write", file: !60, line: 459, baseType: !3596)
!3596 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3597, size: 64)
!3597 = !DISubroutineType(types: !3598)
!3598 = !{!104, !64, !70, !70}
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "reg_update_bits", scope: !3570, file: !60, line: 507, baseType: !3600, size: 64, offset: 320)
!3600 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_hw_reg_update_bits", file: !60, line: 461, baseType: !3601)
!3601 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3602, size: 64)
!3602 = !DISubroutineType(types: !3603)
!3603 = !{!104, !64, !70, !70, !70}
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "read", scope: !3570, file: !60, line: 508, baseType: !3605, size: 64, offset: 384)
!3605 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_hw_read", file: !60, line: 454, baseType: !3606)
!3606 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3607, size: 64)
!3607 = !DISubroutineType(types: !3608)
!3608 = !{!104, !64, !1880, !167, !64, !167}
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "reg_read", scope: !3570, file: !60, line: 509, baseType: !3610, size: 64, offset: 448)
!3610 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_hw_reg_read", file: !60, line: 457, baseType: !3611)
!3611 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3612, size: 64)
!3612 = !DISubroutineType(types: !3613)
!3613 = !{!104, !64, !70, !2381}
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "free_context", scope: !3570, file: !60, line: 510, baseType: !3615, size: 64, offset: 512)
!3615 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_hw_free_context", file: !60, line: 464, baseType: !61)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "async_alloc", scope: !3570, file: !60, line: 511, baseType: !3617, size: 64, offset: 576)
!3617 = !DIDerivedType(tag: DW_TAG_typedef, name: "regmap_hw_async_alloc", file: !60, line: 463, baseType: !3618)
!3618 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3619, size: 64)
!3619 = !DISubroutineType(types: !3620)
!3620 = !{!3588}
!3621 = !DIDerivedType(tag: DW_TAG_member, name: "read_flag_mask", scope: !3570, file: !60, line: 512, baseType: !1097, size: 8, offset: 640)
!3622 = !DIDerivedType(tag: DW_TAG_member, name: "reg_format_endian_default", scope: !3570, file: !60, line: 513, baseType: !3623, size: 32, offset: 672)
!3623 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "regmap_endian", file: !60, line: 184, baseType: !70, size: 32, elements: !3624)
!3624 = !{!3625, !3626, !3627, !3628}
!3625 = !DIEnumerator(name: "REGMAP_ENDIAN_DEFAULT", value: 0, isUnsigned: true)
!3626 = !DIEnumerator(name: "REGMAP_ENDIAN_BIG", value: 1, isUnsigned: true)
!3627 = !DIEnumerator(name: "REGMAP_ENDIAN_LITTLE", value: 2, isUnsigned: true)
!3628 = !DIEnumerator(name: "REGMAP_ENDIAN_NATIVE", value: 3, isUnsigned: true)
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "val_format_endian_default", scope: !3570, file: !60, line: 514, baseType: !3623, size: 32, offset: 704)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "max_raw_read", scope: !3570, file: !60, line: 515, baseType: !167, size: 64, offset: 768)
!3631 = !DIDerivedType(tag: DW_TAG_member, name: "max_raw_write", scope: !3570, file: !60, line: 516, baseType: !167, size: 64, offset: 832)
!3632 = !DIDerivedType(tag: DW_TAG_member, name: "bus_context", scope: !7, file: !8, line: 66, baseType: !64, size: 64, offset: 1216)
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !7, file: !8, line: 67, baseType: !81, size: 64, offset: 1280)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "async", scope: !7, file: !8, line: 69, baseType: !331, size: 8, offset: 1344)
!3635 = !DIDerivedType(tag: DW_TAG_member, name: "async_lock", scope: !7, file: !8, line: 70, baseType: !31, offset: 1352)
!3636 = !DIDerivedType(tag: DW_TAG_member, name: "async_waitq", scope: !7, file: !8, line: 71, baseType: !1233, size: 128, offset: 1408)
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "async_list", scope: !7, file: !8, line: 72, baseType: !47, size: 128, offset: 1536)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "async_free", scope: !7, file: !8, line: 73, baseType: !47, size: 128, offset: 1664)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "async_ret", scope: !7, file: !8, line: 74, baseType: !104, size: 32, offset: 1792)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "max_register", scope: !7, file: !8, line: 89, baseType: !70, size: 32, offset: 1824)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "writeable_reg", scope: !7, file: !8, line: 90, baseType: !3642, size: 64, offset: 1856)
!3642 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3643, size: 64)
!3643 = !DISubroutineType(types: !3644)
!3644 = !{!331, !72, !70}
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "readable_reg", scope: !7, file: !8, line: 91, baseType: !3642, size: 64, offset: 1920)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_reg", scope: !7, file: !8, line: 92, baseType: !3642, size: 64, offset: 1984)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "precious_reg", scope: !7, file: !8, line: 93, baseType: !3642, size: 64, offset: 2048)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "writeable_noinc_reg", scope: !7, file: !8, line: 94, baseType: !3642, size: 64, offset: 2112)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "readable_noinc_reg", scope: !7, file: !8, line: 95, baseType: !3642, size: 64, offset: 2176)
!3650 = !DIDerivedType(tag: DW_TAG_member, name: "wr_table", scope: !7, file: !8, line: 96, baseType: !3651, size: 64, offset: 2240)
!3651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3652, size: 64)
!3652 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3653)
!3653 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap_access_table", file: !60, line: 219, size: 256, elements: !3654)
!3654 = !{!3655, !3662, !3663, !3664}
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "yes_ranges", scope: !3653, file: !60, line: 220, baseType: !3656, size: 64)
!3656 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3657, size: 64)
!3657 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3658)
!3658 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap_range", file: !60, line: 199, size: 64, elements: !3659)
!3659 = !{!3660, !3661}
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "range_min", scope: !3658, file: !60, line: 200, baseType: !70, size: 32)
!3661 = !DIDerivedType(tag: DW_TAG_member, name: "range_max", scope: !3658, file: !60, line: 201, baseType: !70, size: 32, offset: 32)
!3662 = !DIDerivedType(tag: DW_TAG_member, name: "n_yes_ranges", scope: !3653, file: !60, line: 221, baseType: !70, size: 32, offset: 64)
!3663 = !DIDerivedType(tag: DW_TAG_member, name: "no_ranges", scope: !3653, file: !60, line: 222, baseType: !3656, size: 64, offset: 128)
!3664 = !DIDerivedType(tag: DW_TAG_member, name: "n_no_ranges", scope: !3653, file: !60, line: 223, baseType: !70, size: 32, offset: 192)
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "rd_table", scope: !7, file: !8, line: 97, baseType: !3651, size: 64, offset: 2304)
!3666 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_table", scope: !7, file: !8, line: 98, baseType: !3651, size: 64, offset: 2368)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "precious_table", scope: !7, file: !8, line: 99, baseType: !3651, size: 64, offset: 2432)
!3668 = !DIDerivedType(tag: DW_TAG_member, name: "wr_noinc_table", scope: !7, file: !8, line: 100, baseType: !3651, size: 64, offset: 2496)
!3669 = !DIDerivedType(tag: DW_TAG_member, name: "rd_noinc_table", scope: !7, file: !8, line: 101, baseType: !3651, size: 64, offset: 2560)
!3670 = !DIDerivedType(tag: DW_TAG_member, name: "reg_read", scope: !7, file: !8, line: 103, baseType: !3611, size: 64, offset: 2624)
!3671 = !DIDerivedType(tag: DW_TAG_member, name: "reg_write", scope: !7, file: !8, line: 104, baseType: !3596, size: 64, offset: 2688)
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "reg_update_bits", scope: !7, file: !8, line: 105, baseType: !3601, size: 64, offset: 2752)
!3673 = !DIDerivedType(tag: DW_TAG_member, name: "defer_caching", scope: !7, file: !8, line: 108, baseType: !331, size: 8, offset: 2816)
!3674 = !DIDerivedType(tag: DW_TAG_member, name: "read_flag_mask", scope: !7, file: !8, line: 110, baseType: !57, size: 64, offset: 2880)
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "write_flag_mask", scope: !7, file: !8, line: 111, baseType: !57, size: 64, offset: 2944)
!3676 = !DIDerivedType(tag: DW_TAG_member, name: "reg_shift", scope: !7, file: !8, line: 114, baseType: !104, size: 32, offset: 3008)
!3677 = !DIDerivedType(tag: DW_TAG_member, name: "reg_stride", scope: !7, file: !8, line: 115, baseType: !104, size: 32, offset: 3040)
!3678 = !DIDerivedType(tag: DW_TAG_member, name: "reg_stride_order", scope: !7, file: !8, line: 116, baseType: !104, size: 32, offset: 3072)
!3679 = !DIDerivedType(tag: DW_TAG_member, name: "cache_ops", scope: !7, file: !8, line: 119, baseType: !3680, size: 64, offset: 3136)
!3680 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3681, size: 64)
!3681 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3682)
!3682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regcache_ops", file: !8, line: 169, size: 512, elements: !3683)
!3683 = !{!3684, !3685, !3692, !3696, !3697, !3701, !3705, !3706}
!3684 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3682, file: !8, line: 170, baseType: !81, size: 64)
!3685 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3682, file: !8, line: 171, baseType: !3686, size: 32, offset: 64)
!3686 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "regcache_type", file: !60, line: 40, baseType: !70, size: 32, elements: !3687)
!3687 = !{!3688, !3689, !3690, !3691}
!3688 = !DIEnumerator(name: "REGCACHE_NONE", value: 0, isUnsigned: true)
!3689 = !DIEnumerator(name: "REGCACHE_RBTREE", value: 1, isUnsigned: true)
!3690 = !DIEnumerator(name: "REGCACHE_COMPRESSED", value: 2, isUnsigned: true)
!3691 = !DIEnumerator(name: "REGCACHE_FLAT", value: 3, isUnsigned: true)
!3692 = !DIDerivedType(tag: DW_TAG_member, name: "init", scope: !3682, file: !8, line: 172, baseType: !3693, size: 64, offset: 128)
!3693 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3694, size: 64)
!3694 = !DISubroutineType(types: !3695)
!3695 = !{!104, !6}
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "exit", scope: !3682, file: !8, line: 173, baseType: !3693, size: 64, offset: 192)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "read", scope: !3682, file: !8, line: 177, baseType: !3698, size: 64, offset: 256)
!3698 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3699, size: 64)
!3699 = !DISubroutineType(types: !3700)
!3700 = !{!104, !6, !70, !2381}
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "write", scope: !3682, file: !8, line: 178, baseType: !3702, size: 64, offset: 320)
!3702 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3703, size: 64)
!3703 = !DISubroutineType(types: !3704)
!3704 = !{!104, !6, !70, !70}
!3705 = !DIDerivedType(tag: DW_TAG_member, name: "sync", scope: !3682, file: !8, line: 179, baseType: !3702, size: 64, offset: 384)
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "drop", scope: !3682, file: !8, line: 180, baseType: !3702, size: 64, offset: 448)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "cache_type", scope: !7, file: !8, line: 120, baseType: !3686, size: 32, offset: 3200)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "cache_size_raw", scope: !7, file: !8, line: 123, baseType: !70, size: 32, offset: 3232)
!3709 = !DIDerivedType(tag: DW_TAG_member, name: "cache_word_size", scope: !7, file: !8, line: 125, baseType: !70, size: 32, offset: 3264)
!3710 = !DIDerivedType(tag: DW_TAG_member, name: "num_reg_defaults", scope: !7, file: !8, line: 127, baseType: !70, size: 32, offset: 3296)
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "num_reg_defaults_raw", scope: !7, file: !8, line: 129, baseType: !70, size: 32, offset: 3328)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "cache_only", scope: !7, file: !8, line: 132, baseType: !331, size: 8, offset: 3360)
!3713 = !DIDerivedType(tag: DW_TAG_member, name: "cache_bypass", scope: !7, file: !8, line: 134, baseType: !331, size: 8, offset: 3368)
!3714 = !DIDerivedType(tag: DW_TAG_member, name: "cache_free", scope: !7, file: !8, line: 136, baseType: !331, size: 8, offset: 3376)
!3715 = !DIDerivedType(tag: DW_TAG_member, name: "reg_defaults", scope: !7, file: !8, line: 138, baseType: !3716, size: 64, offset: 3392)
!3716 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3717, size: 64)
!3717 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_default", file: !60, line: 56, size: 64, elements: !3718)
!3718 = !{!3719, !3720}
!3719 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3717, file: !60, line: 57, baseType: !70, size: 32)
!3720 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !3717, file: !60, line: 58, baseType: !70, size: 32, offset: 32)
!3721 = !DIDerivedType(tag: DW_TAG_member, name: "reg_defaults_raw", scope: !7, file: !8, line: 139, baseType: !1880, size: 64, offset: 3456)
!3722 = !DIDerivedType(tag: DW_TAG_member, name: "cache", scope: !7, file: !8, line: 140, baseType: !64, size: 64, offset: 3520)
!3723 = !DIDerivedType(tag: DW_TAG_member, name: "cache_dirty", scope: !7, file: !8, line: 142, baseType: !331, size: 8, offset: 3584)
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "no_sync_defaults", scope: !7, file: !8, line: 144, baseType: !331, size: 8, offset: 3592)
!3725 = !DIDerivedType(tag: DW_TAG_member, name: "patch", scope: !7, file: !8, line: 146, baseType: !3726, size: 64, offset: 3648)
!3726 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3727, size: 64)
!3727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_sequence", file: !60, line: 71, size: 96, elements: !3728)
!3728 = !{!3729, !3730, !3731}
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3727, file: !60, line: 72, baseType: !70, size: 32)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !3727, file: !60, line: 73, baseType: !70, size: 32, offset: 32)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "delay_us", scope: !3727, file: !60, line: 74, baseType: !70, size: 32, offset: 64)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "patch_regs", scope: !7, file: !8, line: 147, baseType: !104, size: 32, offset: 3712)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "use_single_read", scope: !7, file: !8, line: 150, baseType: !331, size: 8, offset: 3744)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "use_single_write", scope: !7, file: !8, line: 152, baseType: !331, size: 8, offset: 3752)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "can_multi_write", scope: !7, file: !8, line: 154, baseType: !331, size: 8, offset: 3760)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "max_raw_read", scope: !7, file: !8, line: 157, baseType: !167, size: 64, offset: 3776)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "max_raw_write", scope: !7, file: !8, line: 158, baseType: !167, size: 64, offset: 3840)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "range_tree", scope: !7, file: !8, line: 160, baseType: !598, size: 64, offset: 3904)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "selector_work_buf", scope: !7, file: !8, line: 161, baseType: !64, size: 64, offset: 3968)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "hwlock", scope: !7, file: !8, line: 163, baseType: !3741, size: 64, offset: 4032)
!3741 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3742, size: 64)
!3742 = !DICompositeType(tag: DW_TAG_structure_type, name: "hwspinlock", file: !3743, line: 24, flags: DIFlagFwdDecl)
!3743 = !DIFile(filename: "./include/linux/hwspinlock.h", directory: "/home/lizy2001/genbc/linux")
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "can_sleep", scope: !7, file: !8, line: 166, baseType: !331, size: 8, offset: 4096)
!3745 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3746, size: 64)
!3746 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3747)
!3747 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap_config", file: !60, line: 347, size: 2176, elements: !3748)
!3748 = !{!3749, !3750, !3751, !3752, !3753, !3754, !3755, !3756, !3757, !3758, !3759, !3760, !3761, !3762, !3763, !3764, !3765, !3766, !3767, !3768, !3769, !3770, !3771, !3772, !3773, !3774, !3777, !3778, !3779, !3780, !3781, !3782, !3783, !3784, !3785, !3786, !3787, !3788, !3789, !3802, !3803, !3804, !3805, !3806}
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3747, file: !60, line: 348, baseType: !81, size: 64)
!3750 = !DIDerivedType(tag: DW_TAG_member, name: "reg_bits", scope: !3747, file: !60, line: 350, baseType: !104, size: 32, offset: 64)
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "reg_stride", scope: !3747, file: !60, line: 351, baseType: !104, size: 32, offset: 96)
!3752 = !DIDerivedType(tag: DW_TAG_member, name: "pad_bits", scope: !3747, file: !60, line: 352, baseType: !104, size: 32, offset: 128)
!3753 = !DIDerivedType(tag: DW_TAG_member, name: "val_bits", scope: !3747, file: !60, line: 353, baseType: !104, size: 32, offset: 160)
!3754 = !DIDerivedType(tag: DW_TAG_member, name: "writeable_reg", scope: !3747, file: !60, line: 355, baseType: !3642, size: 64, offset: 192)
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "readable_reg", scope: !3747, file: !60, line: 356, baseType: !3642, size: 64, offset: 256)
!3756 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_reg", scope: !3747, file: !60, line: 357, baseType: !3642, size: 64, offset: 320)
!3757 = !DIDerivedType(tag: DW_TAG_member, name: "precious_reg", scope: !3747, file: !60, line: 358, baseType: !3642, size: 64, offset: 384)
!3758 = !DIDerivedType(tag: DW_TAG_member, name: "writeable_noinc_reg", scope: !3747, file: !60, line: 359, baseType: !3642, size: 64, offset: 448)
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "readable_noinc_reg", scope: !3747, file: !60, line: 360, baseType: !3642, size: 64, offset: 512)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "disable_locking", scope: !3747, file: !60, line: 362, baseType: !331, size: 8, offset: 576)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "lock", scope: !3747, file: !60, line: 363, baseType: !59, size: 64, offset: 640)
!3762 = !DIDerivedType(tag: DW_TAG_member, name: "unlock", scope: !3747, file: !60, line: 364, baseType: !66, size: 64, offset: 704)
!3763 = !DIDerivedType(tag: DW_TAG_member, name: "lock_arg", scope: !3747, file: !60, line: 365, baseType: !64, size: 64, offset: 768)
!3764 = !DIDerivedType(tag: DW_TAG_member, name: "reg_read", scope: !3747, file: !60, line: 367, baseType: !3611, size: 64, offset: 832)
!3765 = !DIDerivedType(tag: DW_TAG_member, name: "reg_write", scope: !3747, file: !60, line: 368, baseType: !3596, size: 64, offset: 896)
!3766 = !DIDerivedType(tag: DW_TAG_member, name: "fast_io", scope: !3747, file: !60, line: 370, baseType: !331, size: 8, offset: 960)
!3767 = !DIDerivedType(tag: DW_TAG_member, name: "max_register", scope: !3747, file: !60, line: 372, baseType: !70, size: 32, offset: 992)
!3768 = !DIDerivedType(tag: DW_TAG_member, name: "wr_table", scope: !3747, file: !60, line: 373, baseType: !3651, size: 64, offset: 1024)
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "rd_table", scope: !3747, file: !60, line: 374, baseType: !3651, size: 64, offset: 1088)
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_table", scope: !3747, file: !60, line: 375, baseType: !3651, size: 64, offset: 1152)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "precious_table", scope: !3747, file: !60, line: 376, baseType: !3651, size: 64, offset: 1216)
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "wr_noinc_table", scope: !3747, file: !60, line: 377, baseType: !3651, size: 64, offset: 1280)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "rd_noinc_table", scope: !3747, file: !60, line: 378, baseType: !3651, size: 64, offset: 1344)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "reg_defaults", scope: !3747, file: !60, line: 379, baseType: !3775, size: 64, offset: 1408)
!3775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3776, size: 64)
!3776 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3717)
!3777 = !DIDerivedType(tag: DW_TAG_member, name: "num_reg_defaults", scope: !3747, file: !60, line: 380, baseType: !70, size: 32, offset: 1472)
!3778 = !DIDerivedType(tag: DW_TAG_member, name: "cache_type", scope: !3747, file: !60, line: 381, baseType: !3686, size: 32, offset: 1504)
!3779 = !DIDerivedType(tag: DW_TAG_member, name: "reg_defaults_raw", scope: !3747, file: !60, line: 382, baseType: !1880, size: 64, offset: 1536)
!3780 = !DIDerivedType(tag: DW_TAG_member, name: "num_reg_defaults_raw", scope: !3747, file: !60, line: 383, baseType: !70, size: 32, offset: 1600)
!3781 = !DIDerivedType(tag: DW_TAG_member, name: "read_flag_mask", scope: !3747, file: !60, line: 385, baseType: !57, size: 64, offset: 1664)
!3782 = !DIDerivedType(tag: DW_TAG_member, name: "write_flag_mask", scope: !3747, file: !60, line: 386, baseType: !57, size: 64, offset: 1728)
!3783 = !DIDerivedType(tag: DW_TAG_member, name: "zero_flag_mask", scope: !3747, file: !60, line: 387, baseType: !331, size: 8, offset: 1792)
!3784 = !DIDerivedType(tag: DW_TAG_member, name: "use_single_read", scope: !3747, file: !60, line: 389, baseType: !331, size: 8, offset: 1800)
!3785 = !DIDerivedType(tag: DW_TAG_member, name: "use_single_write", scope: !3747, file: !60, line: 390, baseType: !331, size: 8, offset: 1808)
!3786 = !DIDerivedType(tag: DW_TAG_member, name: "can_multi_write", scope: !3747, file: !60, line: 391, baseType: !331, size: 8, offset: 1816)
!3787 = !DIDerivedType(tag: DW_TAG_member, name: "reg_format_endian", scope: !3747, file: !60, line: 393, baseType: !3623, size: 32, offset: 1824)
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "val_format_endian", scope: !3747, file: !60, line: 394, baseType: !3623, size: 32, offset: 1856)
!3789 = !DIDerivedType(tag: DW_TAG_member, name: "ranges", scope: !3747, file: !60, line: 396, baseType: !3790, size: 64, offset: 1920)
!3790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3791, size: 64)
!3791 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3792)
!3792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap_range_cfg", file: !60, line: 426, size: 320, elements: !3793)
!3793 = !{!3794, !3795, !3796, !3797, !3798, !3799, !3800, !3801}
!3794 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3792, file: !60, line: 427, baseType: !81, size: 64)
!3795 = !DIDerivedType(tag: DW_TAG_member, name: "range_min", scope: !3792, file: !60, line: 430, baseType: !70, size: 32, offset: 64)
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "range_max", scope: !3792, file: !60, line: 431, baseType: !70, size: 32, offset: 96)
!3797 = !DIDerivedType(tag: DW_TAG_member, name: "selector_reg", scope: !3792, file: !60, line: 434, baseType: !70, size: 32, offset: 128)
!3798 = !DIDerivedType(tag: DW_TAG_member, name: "selector_mask", scope: !3792, file: !60, line: 435, baseType: !70, size: 32, offset: 160)
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "selector_shift", scope: !3792, file: !60, line: 436, baseType: !104, size: 32, offset: 192)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "window_start", scope: !3792, file: !60, line: 439, baseType: !70, size: 32, offset: 224)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "window_len", scope: !3792, file: !60, line: 440, baseType: !70, size: 32, offset: 256)
!3802 = !DIDerivedType(tag: DW_TAG_member, name: "num_ranges", scope: !3747, file: !60, line: 397, baseType: !70, size: 32, offset: 1984)
!3803 = !DIDerivedType(tag: DW_TAG_member, name: "use_hwlock", scope: !3747, file: !60, line: 399, baseType: !331, size: 8, offset: 2016)
!3804 = !DIDerivedType(tag: DW_TAG_member, name: "hwlock_id", scope: !3747, file: !60, line: 400, baseType: !70, size: 32, offset: 2048)
!3805 = !DIDerivedType(tag: DW_TAG_member, name: "hwlock_mode", scope: !3747, file: !60, line: 401, baseType: !70, size: 32, offset: 2080)
!3806 = !DIDerivedType(tag: DW_TAG_member, name: "can_sleep", scope: !3747, file: !60, line: 403, baseType: !331, size: 8, offset: 2112)
!3807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !487, size: 64)
!3808 = distinct !DICompileUnit(language: DW_LANG_C89, file: !3, producer: "clang version 10.0.1 (https://github.com/llvm/llvm-project.git ef32c611aa214dea855364efd7ba451ec5ec3f74)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !3809, retainedTypes: !3822, globals: !3858, splitDebugInlining: false, nameTableKind: None)
!3809 = !{!3810, !710, !1048, !1172, !2157, !2844, !2863, !2908, !3173, !3240, !3327, !3335, !3623, !3686, !3815}
!3810 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !3811, line: 10, baseType: !70, size: 32, elements: !3812)
!3811 = !DIFile(filename: "./include/linux/stddef.h", directory: "/home/lizy2001/genbc/linux")
!3812 = !{!3813, !3814}
!3813 = !DIEnumerator(name: "false", value: 0, isUnsigned: true)
!3814 = !DIEnumerator(name: "true", value: 1, isUnsigned: true)
!3815 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "kmalloc_cache_type", file: !3816, line: 305, baseType: !70, size: 32, elements: !3817)
!3816 = !DIFile(filename: "./include/linux/slab.h", directory: "/home/lizy2001/genbc/linux")
!3817 = !{!3818, !3819, !3820, !3821}
!3818 = !DIEnumerator(name: "KMALLOC_NORMAL", value: 0, isUnsigned: true)
!3819 = !DIEnumerator(name: "KMALLOC_RECLAIM", value: 1, isUnsigned: true)
!3820 = !DIEnumerator(name: "KMALLOC_DMA", value: 2, isUnsigned: true)
!3821 = !DIEnumerator(name: "NR_KMALLOC_TYPES", value: 3, isUnsigned: true)
!3822 = !{!69, !64, !3823, !3588, !70, !3826, !3827, !1161, !3386, !3828, !3829, !695, !3830, !3831, !3832, !3833, !262, !3834, !3835, !3836, !265, !3837, !266, !3838, !3839, !3840, !3841, !3842, !3843, !3844, !57, !3857, !104}
!3823 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3824, size: 64)
!3824 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3825)
!3825 = !DIDerivedType(tag: DW_TAG_volatile_type, baseType: !50)
!3826 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1097, size: 64)
!3827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !694, size: 64)
!3828 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3825, size: 64)
!3829 = !DIDerivedType(tag: DW_TAG_typedef, name: "__be16", file: !2604, line: 30, baseType: !695)
!3830 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3829, size: 64)
!3831 = !DIDerivedType(tag: DW_TAG_typedef, name: "__le16", file: !2604, line: 29, baseType: !695)
!3832 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3831, size: 64)
!3833 = !DIDerivedType(tag: DW_TAG_typedef, name: "__be32", file: !2604, line: 32, baseType: !262)
!3834 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3833, size: 64)
!3835 = !DIDerivedType(tag: DW_TAG_typedef, name: "__le32", file: !2604, line: 31, baseType: !262)
!3836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3835, size: 64)
!3837 = !DIDerivedType(tag: DW_TAG_typedef, name: "__be64", file: !2604, line: 34, baseType: !266)
!3838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3837, size: 64)
!3839 = !DIDerivedType(tag: DW_TAG_typedef, name: "__le64", file: !2604, line: 33, baseType: !266)
!3840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3839, size: 64)
!3841 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !695, size: 64)
!3842 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !262, size: 64)
!3843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !266, size: 64)
!3844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3845, size: 64)
!3845 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap_range_node", file: !8, line: 194, size: 576, elements: !3846)
!3846 = !{!3847, !3848, !3849, !3850, !3851, !3852, !3853, !3854, !3855, !3856}
!3847 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !3845, file: !8, line: 195, baseType: !602, size: 192, align: 64)
!3848 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3845, file: !8, line: 196, baseType: !81, size: 64, offset: 192)
!3849 = !DIDerivedType(tag: DW_TAG_member, name: "map", scope: !3845, file: !8, line: 197, baseType: !6, size: 64, offset: 256)
!3850 = !DIDerivedType(tag: DW_TAG_member, name: "range_min", scope: !3845, file: !8, line: 199, baseType: !70, size: 32, offset: 320)
!3851 = !DIDerivedType(tag: DW_TAG_member, name: "range_max", scope: !3845, file: !8, line: 200, baseType: !70, size: 32, offset: 352)
!3852 = !DIDerivedType(tag: DW_TAG_member, name: "selector_reg", scope: !3845, file: !8, line: 202, baseType: !70, size: 32, offset: 384)
!3853 = !DIDerivedType(tag: DW_TAG_member, name: "selector_mask", scope: !3845, file: !8, line: 203, baseType: !70, size: 32, offset: 416)
!3854 = !DIDerivedType(tag: DW_TAG_member, name: "selector_shift", scope: !3845, file: !8, line: 204, baseType: !104, size: 32, offset: 448)
!3855 = !DIDerivedType(tag: DW_TAG_member, name: "window_start", scope: !3845, file: !8, line: 206, baseType: !70, size: 32, offset: 480)
!3856 = !DIDerivedType(tag: DW_TAG_member, name: "window_len", scope: !3845, file: !8, line: 207, baseType: !70, size: 32, offset: 512)
!3857 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!3858 = !{!0, !3859, !3861, !3868}
!3859 = !DIGlobalVariableExpression(var: !3860, expr: !DIExpression())
!3860 = distinct !DIGlobalVariable(name: "__key", scope: !2, file: !3, line: 830, type: !487, isLocal: true, isDefinition: true)
!3861 = !DIGlobalVariableExpression(var: !3862, expr: !DIExpression())
!3862 = distinct !DIGlobalVariable(name: "__warned", scope: !3863, file: !3, line: 3200, type: !331, isLocal: true, isDefinition: true)
!3863 = distinct !DISubprogram(name: "regmap_register_patch", scope: !3, file: !3, line: 3193, type: !3864, scopeLine: 3195, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!3864 = !DISubroutineType(types: !3865)
!3865 = !{!104, !6, !3866, !104}
!3866 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3867, size: 64)
!3867 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3727)
!3868 = !DIGlobalVariableExpression(var: !3869, expr: !DIExpression())
!3869 = distinct !DIGlobalVariable(name: "__UNIQUE_ID___addressable_regmap_initcall214", scope: !3808, file: !3, line: 3298, type: !64, isLocal: true, isDefinition: true)
!3870 = !{!"rsp"}
!3871 = !{i32 7, !"Dwarf Version", i32 4}
!3872 = !{i32 2, !"Debug Info Version", i32 3}
!3873 = !{i32 1, !"wchar_size", i32 2}
!3874 = !{i32 1, !"Code Model", i32 2}
!3875 = !{!"clang version 10.0.1 (https://github.com/llvm/llvm-project.git ef32c611aa214dea855364efd7ba451ec5ec3f74)"}
!3876 = distinct !DISubprogram(name: "regmap_reg_in_ranges", scope: !3, file: !3, line: 60, type: !3877, scopeLine: 63, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!3877 = !DISubroutineType(types: !3878)
!3878 = !{!331, !70, !3656, !70}
!3879 = !DILocalVariable(name: "reg", arg: 1, scope: !3876, file: !3, line: 60, type: !70)
!3880 = !DILocation(line: 60, column: 40, scope: !3876)
!3881 = !DILocalVariable(name: "ranges", arg: 2, scope: !3876, file: !3, line: 61, type: !3656)
!3882 = !DILocation(line: 61, column: 33, scope: !3876)
!3883 = !DILocalVariable(name: "nranges", arg: 3, scope: !3876, file: !3, line: 62, type: !70)
!3884 = !DILocation(line: 62, column: 19, scope: !3876)
!3885 = !DILocalVariable(name: "r", scope: !3876, file: !3, line: 64, type: !3656)
!3886 = !DILocation(line: 64, column: 29, scope: !3876)
!3887 = !DILocalVariable(name: "i", scope: !3876, file: !3, line: 65, type: !104)
!3888 = !DILocation(line: 65, column: 6, scope: !3876)
!3889 = !DILocation(line: 67, column: 9, scope: !3890)
!3890 = distinct !DILexicalBlock(scope: !3876, file: !3, line: 67, column: 2)
!3891 = !DILocation(line: 67, column: 18, scope: !3890)
!3892 = !DILocation(line: 67, column: 16, scope: !3890)
!3893 = !DILocation(line: 67, column: 7, scope: !3890)
!3894 = !DILocation(line: 67, column: 26, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3890, file: !3, line: 67, column: 2)
!3896 = !DILocation(line: 67, column: 30, scope: !3895)
!3897 = !DILocation(line: 67, column: 28, scope: !3895)
!3898 = !DILocation(line: 67, column: 2, scope: !3890)
!3899 = !DILocation(line: 68, column: 27, scope: !3900)
!3900 = distinct !DILexicalBlock(scope: !3895, file: !3, line: 68, column: 7)
!3901 = !DILocation(line: 68, column: 32, scope: !3900)
!3902 = !DILocation(line: 68, column: 7, scope: !3900)
!3903 = !DILocation(line: 68, column: 7, scope: !3895)
!3904 = !DILocation(line: 69, column: 4, scope: !3900)
!3905 = !DILocation(line: 68, column: 33, scope: !3900)
!3906 = !DILocation(line: 67, column: 40, scope: !3895)
!3907 = !DILocation(line: 67, column: 45, scope: !3895)
!3908 = !DILocation(line: 67, column: 2, scope: !3895)
!3909 = distinct !{!3909, !3898, !3910}
!3910 = !DILocation(line: 69, column: 11, scope: !3890)
!3911 = !DILocation(line: 70, column: 2, scope: !3876)
!3912 = !DILocation(line: 71, column: 1, scope: !3876)
!3913 = distinct !DISubprogram(name: "regmap_reg_in_range", scope: !60, file: !60, line: 1128, type: !3914, scopeLine: 1130, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!3914 = !DISubroutineType(types: !3915)
!3915 = !{!331, !70, !3656}
!3916 = !DILocalVariable(name: "reg", arg: 1, scope: !3913, file: !60, line: 1128, type: !70)
!3917 = !DILocation(line: 1128, column: 53, scope: !3913)
!3918 = !DILocalVariable(name: "range", arg: 2, scope: !3913, file: !60, line: 1129, type: !3656)
!3919 = !DILocation(line: 1129, column: 39, scope: !3913)
!3920 = !DILocation(line: 1131, column: 9, scope: !3913)
!3921 = !DILocation(line: 1131, column: 16, scope: !3913)
!3922 = !DILocation(line: 1131, column: 23, scope: !3913)
!3923 = !DILocation(line: 1131, column: 13, scope: !3913)
!3924 = !DILocation(line: 1131, column: 33, scope: !3913)
!3925 = !DILocation(line: 1131, column: 36, scope: !3913)
!3926 = !DILocation(line: 1131, column: 43, scope: !3913)
!3927 = !DILocation(line: 1131, column: 50, scope: !3913)
!3928 = !DILocation(line: 1131, column: 40, scope: !3913)
!3929 = !DILocation(line: 0, scope: !3913)
!3930 = !DILocation(line: 1131, column: 2, scope: !3913)
!3931 = distinct !DISubprogram(name: "regmap_check_range_table", scope: !3, file: !3, line: 74, type: !3932, scopeLine: 76, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!3932 = !DISubroutineType(types: !3933)
!3933 = !{!331, !6, !70, !3651}
!3934 = !DILocalVariable(name: "map", arg: 1, scope: !3931, file: !3, line: 74, type: !6)
!3935 = !DILocation(line: 74, column: 46, scope: !3931)
!3936 = !DILocalVariable(name: "reg", arg: 2, scope: !3931, file: !3, line: 74, type: !70)
!3937 = !DILocation(line: 74, column: 64, scope: !3931)
!3938 = !DILocalVariable(name: "table", arg: 3, scope: !3931, file: !3, line: 75, type: !3651)
!3939 = !DILocation(line: 75, column: 44, scope: !3931)
!3940 = !DILocation(line: 78, column: 27, scope: !3941)
!3941 = distinct !DILexicalBlock(scope: !3931, file: !3, line: 78, column: 6)
!3942 = !DILocation(line: 78, column: 32, scope: !3941)
!3943 = !DILocation(line: 78, column: 39, scope: !3941)
!3944 = !DILocation(line: 78, column: 50, scope: !3941)
!3945 = !DILocation(line: 78, column: 57, scope: !3941)
!3946 = !DILocation(line: 78, column: 6, scope: !3941)
!3947 = !DILocation(line: 78, column: 6, scope: !3931)
!3948 = !DILocation(line: 79, column: 3, scope: !3941)
!3949 = !DILocation(line: 82, column: 7, scope: !3950)
!3950 = distinct !DILexicalBlock(scope: !3931, file: !3, line: 82, column: 6)
!3951 = !DILocation(line: 82, column: 14, scope: !3950)
!3952 = !DILocation(line: 82, column: 6, scope: !3931)
!3953 = !DILocation(line: 83, column: 3, scope: !3950)
!3954 = !DILocation(line: 85, column: 30, scope: !3931)
!3955 = !DILocation(line: 85, column: 35, scope: !3931)
!3956 = !DILocation(line: 85, column: 42, scope: !3931)
!3957 = !DILocation(line: 86, column: 9, scope: !3931)
!3958 = !DILocation(line: 86, column: 16, scope: !3931)
!3959 = !DILocation(line: 85, column: 9, scope: !3931)
!3960 = !DILocation(line: 85, column: 2, scope: !3931)
!3961 = !DILocation(line: 87, column: 1, scope: !3931)
!3962 = distinct !DISubprogram(name: "regmap_writeable", scope: !3, file: !3, line: 90, type: !3963, scopeLine: 91, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!3963 = !DISubroutineType(types: !3964)
!3964 = !{!331, !6, !70}
!3965 = !DILocalVariable(name: "map", arg: 1, scope: !3962, file: !3, line: 90, type: !6)
!3966 = !DILocation(line: 90, column: 38, scope: !3962)
!3967 = !DILocalVariable(name: "reg", arg: 2, scope: !3962, file: !3, line: 90, type: !70)
!3968 = !DILocation(line: 90, column: 56, scope: !3962)
!3969 = !DILocation(line: 92, column: 6, scope: !3970)
!3970 = distinct !DILexicalBlock(scope: !3962, file: !3, line: 92, column: 6)
!3971 = !DILocation(line: 92, column: 11, scope: !3970)
!3972 = !DILocation(line: 92, column: 24, scope: !3970)
!3973 = !DILocation(line: 92, column: 27, scope: !3970)
!3974 = !DILocation(line: 92, column: 33, scope: !3970)
!3975 = !DILocation(line: 92, column: 38, scope: !3970)
!3976 = !DILocation(line: 92, column: 31, scope: !3970)
!3977 = !DILocation(line: 92, column: 6, scope: !3962)
!3978 = !DILocation(line: 93, column: 3, scope: !3970)
!3979 = !DILocation(line: 95, column: 6, scope: !3980)
!3980 = distinct !DILexicalBlock(scope: !3962, file: !3, line: 95, column: 6)
!3981 = !DILocation(line: 95, column: 11, scope: !3980)
!3982 = !DILocation(line: 95, column: 6, scope: !3962)
!3983 = !DILocation(line: 96, column: 10, scope: !3980)
!3984 = !DILocation(line: 96, column: 15, scope: !3980)
!3985 = !DILocation(line: 96, column: 29, scope: !3980)
!3986 = !DILocation(line: 96, column: 34, scope: !3980)
!3987 = !DILocation(line: 96, column: 39, scope: !3980)
!3988 = !DILocation(line: 96, column: 3, scope: !3980)
!3989 = !DILocation(line: 98, column: 6, scope: !3990)
!3990 = distinct !DILexicalBlock(scope: !3962, file: !3, line: 98, column: 6)
!3991 = !DILocation(line: 98, column: 11, scope: !3990)
!3992 = !DILocation(line: 98, column: 6, scope: !3962)
!3993 = !DILocation(line: 99, column: 35, scope: !3990)
!3994 = !DILocation(line: 99, column: 40, scope: !3990)
!3995 = !DILocation(line: 99, column: 45, scope: !3990)
!3996 = !DILocation(line: 99, column: 50, scope: !3990)
!3997 = !DILocation(line: 99, column: 10, scope: !3990)
!3998 = !DILocation(line: 99, column: 3, scope: !3990)
!3999 = !DILocation(line: 101, column: 2, scope: !3962)
!4000 = !DILocation(line: 102, column: 1, scope: !3962)
!4001 = distinct !DISubprogram(name: "regmap_cached", scope: !3, file: !3, line: 104, type: !3963, scopeLine: 105, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4002 = !DILocalVariable(name: "map", arg: 1, scope: !4001, file: !3, line: 104, type: !6)
!4003 = !DILocation(line: 104, column: 35, scope: !4001)
!4004 = !DILocalVariable(name: "reg", arg: 2, scope: !4001, file: !3, line: 104, type: !70)
!4005 = !DILocation(line: 104, column: 53, scope: !4001)
!4006 = !DILocalVariable(name: "ret", scope: !4001, file: !3, line: 106, type: !104)
!4007 = !DILocation(line: 106, column: 6, scope: !4001)
!4008 = !DILocalVariable(name: "val", scope: !4001, file: !3, line: 107, type: !70)
!4009 = !DILocation(line: 107, column: 15, scope: !4001)
!4010 = !DILocation(line: 109, column: 6, scope: !4011)
!4011 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 109, column: 6)
!4012 = !DILocation(line: 109, column: 11, scope: !4011)
!4013 = !DILocation(line: 109, column: 22, scope: !4011)
!4014 = !DILocation(line: 109, column: 6, scope: !4001)
!4015 = !DILocation(line: 110, column: 3, scope: !4011)
!4016 = !DILocation(line: 112, column: 7, scope: !4017)
!4017 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 112, column: 6)
!4018 = !DILocation(line: 112, column: 12, scope: !4017)
!4019 = !DILocation(line: 112, column: 6, scope: !4001)
!4020 = !DILocation(line: 113, column: 3, scope: !4017)
!4021 = !DILocation(line: 115, column: 6, scope: !4022)
!4022 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 115, column: 6)
!4023 = !DILocation(line: 115, column: 11, scope: !4022)
!4024 = !DILocation(line: 115, column: 24, scope: !4022)
!4025 = !DILocation(line: 115, column: 27, scope: !4022)
!4026 = !DILocation(line: 115, column: 33, scope: !4022)
!4027 = !DILocation(line: 115, column: 38, scope: !4022)
!4028 = !DILocation(line: 115, column: 31, scope: !4022)
!4029 = !DILocation(line: 115, column: 6, scope: !4001)
!4030 = !DILocation(line: 116, column: 3, scope: !4022)
!4031 = !DILocation(line: 118, column: 2, scope: !4001)
!4032 = !DILocation(line: 118, column: 7, scope: !4001)
!4033 = !DILocation(line: 118, column: 12, scope: !4001)
!4034 = !DILocation(line: 118, column: 17, scope: !4001)
!4035 = !DILocation(line: 119, column: 22, scope: !4001)
!4036 = !DILocation(line: 119, column: 27, scope: !4001)
!4037 = !DILocation(line: 119, column: 8, scope: !4001)
!4038 = !DILocation(line: 119, column: 6, scope: !4001)
!4039 = !DILocation(line: 120, column: 2, scope: !4001)
!4040 = !DILocation(line: 120, column: 7, scope: !4001)
!4041 = !DILocation(line: 120, column: 14, scope: !4001)
!4042 = !DILocation(line: 120, column: 19, scope: !4001)
!4043 = !DILocation(line: 121, column: 6, scope: !4044)
!4044 = distinct !DILexicalBlock(scope: !4001, file: !3, line: 121, column: 6)
!4045 = !DILocation(line: 121, column: 6, scope: !4001)
!4046 = !DILocation(line: 122, column: 3, scope: !4044)
!4047 = !DILocation(line: 124, column: 2, scope: !4001)
!4048 = !DILocation(line: 125, column: 1, scope: !4001)
!4049 = distinct !DISubprogram(name: "regmap_readable", scope: !3, file: !3, line: 127, type: !3963, scopeLine: 128, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4050 = !DILocalVariable(name: "map", arg: 1, scope: !4049, file: !3, line: 127, type: !6)
!4051 = !DILocation(line: 127, column: 37, scope: !4049)
!4052 = !DILocalVariable(name: "reg", arg: 2, scope: !4049, file: !3, line: 127, type: !70)
!4053 = !DILocation(line: 127, column: 55, scope: !4049)
!4054 = !DILocation(line: 129, column: 7, scope: !4055)
!4055 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 129, column: 6)
!4056 = !DILocation(line: 129, column: 12, scope: !4055)
!4057 = !DILocation(line: 129, column: 6, scope: !4049)
!4058 = !DILocation(line: 130, column: 3, scope: !4055)
!4059 = !DILocation(line: 132, column: 6, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 132, column: 6)
!4061 = !DILocation(line: 132, column: 11, scope: !4060)
!4062 = !DILocation(line: 132, column: 24, scope: !4060)
!4063 = !DILocation(line: 132, column: 27, scope: !4060)
!4064 = !DILocation(line: 132, column: 33, scope: !4060)
!4065 = !DILocation(line: 132, column: 38, scope: !4060)
!4066 = !DILocation(line: 132, column: 31, scope: !4060)
!4067 = !DILocation(line: 132, column: 6, scope: !4049)
!4068 = !DILocation(line: 133, column: 3, scope: !4060)
!4069 = !DILocation(line: 135, column: 6, scope: !4070)
!4070 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 135, column: 6)
!4071 = !DILocation(line: 135, column: 11, scope: !4070)
!4072 = !DILocation(line: 135, column: 18, scope: !4070)
!4073 = !DILocation(line: 135, column: 6, scope: !4049)
!4074 = !DILocation(line: 136, column: 3, scope: !4070)
!4075 = !DILocation(line: 138, column: 6, scope: !4076)
!4076 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 138, column: 6)
!4077 = !DILocation(line: 138, column: 11, scope: !4076)
!4078 = !DILocation(line: 138, column: 6, scope: !4049)
!4079 = !DILocation(line: 139, column: 10, scope: !4076)
!4080 = !DILocation(line: 139, column: 15, scope: !4076)
!4081 = !DILocation(line: 139, column: 28, scope: !4076)
!4082 = !DILocation(line: 139, column: 33, scope: !4076)
!4083 = !DILocation(line: 139, column: 38, scope: !4076)
!4084 = !DILocation(line: 139, column: 3, scope: !4076)
!4085 = !DILocation(line: 141, column: 6, scope: !4086)
!4086 = distinct !DILexicalBlock(scope: !4049, file: !3, line: 141, column: 6)
!4087 = !DILocation(line: 141, column: 11, scope: !4086)
!4088 = !DILocation(line: 141, column: 6, scope: !4049)
!4089 = !DILocation(line: 142, column: 35, scope: !4086)
!4090 = !DILocation(line: 142, column: 40, scope: !4086)
!4091 = !DILocation(line: 142, column: 45, scope: !4086)
!4092 = !DILocation(line: 142, column: 50, scope: !4086)
!4093 = !DILocation(line: 142, column: 10, scope: !4086)
!4094 = !DILocation(line: 142, column: 3, scope: !4086)
!4095 = !DILocation(line: 144, column: 2, scope: !4049)
!4096 = !DILocation(line: 145, column: 1, scope: !4049)
!4097 = distinct !DISubprogram(name: "regmap_volatile", scope: !3, file: !3, line: 147, type: !3963, scopeLine: 148, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4098 = !DILocalVariable(name: "map", arg: 1, scope: !4097, file: !3, line: 147, type: !6)
!4099 = !DILocation(line: 147, column: 37, scope: !4097)
!4100 = !DILocalVariable(name: "reg", arg: 2, scope: !4097, file: !3, line: 147, type: !70)
!4101 = !DILocation(line: 147, column: 55, scope: !4097)
!4102 = !DILocation(line: 149, column: 7, scope: !4103)
!4103 = distinct !DILexicalBlock(scope: !4097, file: !3, line: 149, column: 6)
!4104 = !DILocation(line: 149, column: 12, scope: !4103)
!4105 = !DILocation(line: 149, column: 19, scope: !4103)
!4106 = !DILocation(line: 149, column: 32, scope: !4103)
!4107 = !DILocation(line: 149, column: 52, scope: !4103)
!4108 = !DILocation(line: 149, column: 57, scope: !4103)
!4109 = !DILocation(line: 149, column: 36, scope: !4103)
!4110 = !DILocation(line: 149, column: 6, scope: !4097)
!4111 = !DILocation(line: 150, column: 3, scope: !4103)
!4112 = !DILocation(line: 152, column: 6, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !4097, file: !3, line: 152, column: 6)
!4114 = !DILocation(line: 152, column: 11, scope: !4113)
!4115 = !DILocation(line: 152, column: 6, scope: !4097)
!4116 = !DILocation(line: 153, column: 10, scope: !4113)
!4117 = !DILocation(line: 153, column: 15, scope: !4113)
!4118 = !DILocation(line: 153, column: 28, scope: !4113)
!4119 = !DILocation(line: 153, column: 33, scope: !4113)
!4120 = !DILocation(line: 153, column: 38, scope: !4113)
!4121 = !DILocation(line: 153, column: 3, scope: !4113)
!4122 = !DILocation(line: 155, column: 6, scope: !4123)
!4123 = distinct !DILexicalBlock(scope: !4097, file: !3, line: 155, column: 6)
!4124 = !DILocation(line: 155, column: 11, scope: !4123)
!4125 = !DILocation(line: 155, column: 6, scope: !4097)
!4126 = !DILocation(line: 156, column: 35, scope: !4123)
!4127 = !DILocation(line: 156, column: 40, scope: !4123)
!4128 = !DILocation(line: 156, column: 45, scope: !4123)
!4129 = !DILocation(line: 156, column: 50, scope: !4123)
!4130 = !DILocation(line: 156, column: 10, scope: !4123)
!4131 = !DILocation(line: 156, column: 3, scope: !4123)
!4132 = !DILocation(line: 158, column: 6, scope: !4133)
!4133 = distinct !DILexicalBlock(scope: !4097, file: !3, line: 158, column: 6)
!4134 = !DILocation(line: 158, column: 11, scope: !4133)
!4135 = !DILocation(line: 158, column: 6, scope: !4097)
!4136 = !DILocation(line: 159, column: 3, scope: !4133)
!4137 = !DILocation(line: 161, column: 3, scope: !4133)
!4138 = !DILocation(line: 162, column: 1, scope: !4097)
!4139 = distinct !DISubprogram(name: "regmap_precious", scope: !3, file: !3, line: 164, type: !3963, scopeLine: 165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4140 = !DILocalVariable(name: "map", arg: 1, scope: !4139, file: !3, line: 164, type: !6)
!4141 = !DILocation(line: 164, column: 37, scope: !4139)
!4142 = !DILocalVariable(name: "reg", arg: 2, scope: !4139, file: !3, line: 164, type: !70)
!4143 = !DILocation(line: 164, column: 55, scope: !4139)
!4144 = !DILocation(line: 166, column: 23, scope: !4145)
!4145 = distinct !DILexicalBlock(scope: !4139, file: !3, line: 166, column: 6)
!4146 = !DILocation(line: 166, column: 28, scope: !4145)
!4147 = !DILocation(line: 166, column: 7, scope: !4145)
!4148 = !DILocation(line: 166, column: 6, scope: !4139)
!4149 = !DILocation(line: 167, column: 3, scope: !4145)
!4150 = !DILocation(line: 169, column: 6, scope: !4151)
!4151 = distinct !DILexicalBlock(scope: !4139, file: !3, line: 169, column: 6)
!4152 = !DILocation(line: 169, column: 11, scope: !4151)
!4153 = !DILocation(line: 169, column: 6, scope: !4139)
!4154 = !DILocation(line: 170, column: 10, scope: !4151)
!4155 = !DILocation(line: 170, column: 15, scope: !4151)
!4156 = !DILocation(line: 170, column: 28, scope: !4151)
!4157 = !DILocation(line: 170, column: 33, scope: !4151)
!4158 = !DILocation(line: 170, column: 38, scope: !4151)
!4159 = !DILocation(line: 170, column: 3, scope: !4151)
!4160 = !DILocation(line: 172, column: 6, scope: !4161)
!4161 = distinct !DILexicalBlock(scope: !4139, file: !3, line: 172, column: 6)
!4162 = !DILocation(line: 172, column: 11, scope: !4161)
!4163 = !DILocation(line: 172, column: 6, scope: !4139)
!4164 = !DILocation(line: 173, column: 35, scope: !4161)
!4165 = !DILocation(line: 173, column: 40, scope: !4161)
!4166 = !DILocation(line: 173, column: 45, scope: !4161)
!4167 = !DILocation(line: 173, column: 50, scope: !4161)
!4168 = !DILocation(line: 173, column: 10, scope: !4161)
!4169 = !DILocation(line: 173, column: 3, scope: !4161)
!4170 = !DILocation(line: 175, column: 2, scope: !4139)
!4171 = !DILocation(line: 176, column: 1, scope: !4139)
!4172 = distinct !DISubprogram(name: "regmap_writeable_noinc", scope: !3, file: !3, line: 178, type: !3963, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4173 = !DILocalVariable(name: "map", arg: 1, scope: !4172, file: !3, line: 178, type: !6)
!4174 = !DILocation(line: 178, column: 44, scope: !4172)
!4175 = !DILocalVariable(name: "reg", arg: 2, scope: !4172, file: !3, line: 178, type: !70)
!4176 = !DILocation(line: 178, column: 62, scope: !4172)
!4177 = !DILocation(line: 180, column: 6, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 180, column: 6)
!4179 = !DILocation(line: 180, column: 11, scope: !4178)
!4180 = !DILocation(line: 180, column: 6, scope: !4172)
!4181 = !DILocation(line: 181, column: 10, scope: !4178)
!4182 = !DILocation(line: 181, column: 15, scope: !4178)
!4183 = !DILocation(line: 181, column: 35, scope: !4178)
!4184 = !DILocation(line: 181, column: 40, scope: !4178)
!4185 = !DILocation(line: 181, column: 45, scope: !4178)
!4186 = !DILocation(line: 181, column: 3, scope: !4178)
!4187 = !DILocation(line: 183, column: 6, scope: !4188)
!4188 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 183, column: 6)
!4189 = !DILocation(line: 183, column: 11, scope: !4188)
!4190 = !DILocation(line: 183, column: 6, scope: !4172)
!4191 = !DILocation(line: 184, column: 35, scope: !4188)
!4192 = !DILocation(line: 184, column: 40, scope: !4188)
!4193 = !DILocation(line: 184, column: 45, scope: !4188)
!4194 = !DILocation(line: 184, column: 50, scope: !4188)
!4195 = !DILocation(line: 184, column: 10, scope: !4188)
!4196 = !DILocation(line: 184, column: 3, scope: !4188)
!4197 = !DILocation(line: 186, column: 2, scope: !4172)
!4198 = !DILocation(line: 187, column: 1, scope: !4172)
!4199 = distinct !DISubprogram(name: "regmap_readable_noinc", scope: !3, file: !3, line: 189, type: !3963, scopeLine: 190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4200 = !DILocalVariable(name: "map", arg: 1, scope: !4199, file: !3, line: 189, type: !6)
!4201 = !DILocation(line: 189, column: 43, scope: !4199)
!4202 = !DILocalVariable(name: "reg", arg: 2, scope: !4199, file: !3, line: 189, type: !70)
!4203 = !DILocation(line: 189, column: 61, scope: !4199)
!4204 = !DILocation(line: 191, column: 6, scope: !4205)
!4205 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 191, column: 6)
!4206 = !DILocation(line: 191, column: 11, scope: !4205)
!4207 = !DILocation(line: 191, column: 6, scope: !4199)
!4208 = !DILocation(line: 192, column: 10, scope: !4205)
!4209 = !DILocation(line: 192, column: 15, scope: !4205)
!4210 = !DILocation(line: 192, column: 34, scope: !4205)
!4211 = !DILocation(line: 192, column: 39, scope: !4205)
!4212 = !DILocation(line: 192, column: 44, scope: !4205)
!4213 = !DILocation(line: 192, column: 3, scope: !4205)
!4214 = !DILocation(line: 194, column: 6, scope: !4215)
!4215 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 194, column: 6)
!4216 = !DILocation(line: 194, column: 11, scope: !4215)
!4217 = !DILocation(line: 194, column: 6, scope: !4199)
!4218 = !DILocation(line: 195, column: 35, scope: !4215)
!4219 = !DILocation(line: 195, column: 40, scope: !4215)
!4220 = !DILocation(line: 195, column: 45, scope: !4215)
!4221 = !DILocation(line: 195, column: 50, scope: !4215)
!4222 = !DILocation(line: 195, column: 10, scope: !4215)
!4223 = !DILocation(line: 195, column: 3, scope: !4215)
!4224 = !DILocation(line: 197, column: 2, scope: !4199)
!4225 = !DILocation(line: 198, column: 1, scope: !4199)
!4226 = distinct !DISubprogram(name: "regmap_attach_dev", scope: !3, file: !3, line: 611, type: !4227, scopeLine: 613, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4227 = !DISubroutineType(types: !4228)
!4228 = !{!104, !72, !6, !3745}
!4229 = !DILocalVariable(name: "dev", arg: 1, scope: !4226, file: !3, line: 611, type: !72)
!4230 = !DILocation(line: 611, column: 38, scope: !4226)
!4231 = !DILocalVariable(name: "map", arg: 2, scope: !4226, file: !3, line: 611, type: !6)
!4232 = !DILocation(line: 611, column: 58, scope: !4226)
!4233 = !DILocalVariable(name: "config", arg: 3, scope: !4226, file: !3, line: 612, type: !3745)
!4234 = !DILocation(line: 612, column: 37, scope: !4226)
!4235 = !DILocalVariable(name: "m", scope: !4226, file: !3, line: 614, type: !3857)
!4236 = !DILocation(line: 614, column: 18, scope: !4226)
!4237 = !DILocalVariable(name: "ret", scope: !4226, file: !3, line: 615, type: !104)
!4238 = !DILocation(line: 615, column: 6, scope: !4226)
!4239 = !DILocation(line: 617, column: 13, scope: !4226)
!4240 = !DILocation(line: 617, column: 2, scope: !4226)
!4241 = !DILocation(line: 617, column: 7, scope: !4226)
!4242 = !DILocation(line: 617, column: 11, scope: !4226)
!4243 = !DILocation(line: 619, column: 24, scope: !4226)
!4244 = !DILocation(line: 619, column: 29, scope: !4226)
!4245 = !DILocation(line: 619, column: 8, scope: !4226)
!4246 = !DILocation(line: 619, column: 6, scope: !4226)
!4247 = !DILocation(line: 620, column: 6, scope: !4248)
!4248 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 620, column: 6)
!4249 = !DILocation(line: 620, column: 6, scope: !4226)
!4250 = !DILocation(line: 621, column: 10, scope: !4248)
!4251 = !DILocation(line: 621, column: 3, scope: !4248)
!4252 = !DILocation(line: 623, column: 22, scope: !4226)
!4253 = !DILocation(line: 623, column: 2, scope: !4226)
!4254 = !DILocation(line: 626, column: 6, scope: !4226)
!4255 = !DILocation(line: 626, column: 4, scope: !4226)
!4256 = !DILocation(line: 627, column: 7, scope: !4257)
!4257 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 627, column: 6)
!4258 = !DILocation(line: 627, column: 6, scope: !4226)
!4259 = !DILocation(line: 628, column: 23, scope: !4260)
!4260 = distinct !DILexicalBlock(scope: !4257, file: !3, line: 627, column: 10)
!4261 = !DILocation(line: 628, column: 3, scope: !4260)
!4262 = !DILocation(line: 629, column: 3, scope: !4260)
!4263 = !DILocation(line: 631, column: 7, scope: !4226)
!4264 = !DILocation(line: 631, column: 3, scope: !4226)
!4265 = !DILocation(line: 631, column: 5, scope: !4226)
!4266 = !DILocation(line: 632, column: 13, scope: !4226)
!4267 = !DILocation(line: 632, column: 18, scope: !4226)
!4268 = !DILocation(line: 632, column: 2, scope: !4226)
!4269 = !DILocation(line: 634, column: 2, scope: !4226)
!4270 = !DILocation(line: 635, column: 1, scope: !4226)
!4271 = distinct !DISubprogram(name: "regmap_set_name", scope: !3, file: !3, line: 596, type: !4272, scopeLine: 597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4272 = !DISubroutineType(types: !4273)
!4273 = !{!104, !6, !3745}
!4274 = !DILocalVariable(name: "map", arg: 1, scope: !4271, file: !3, line: 596, type: !6)
!4275 = !DILocation(line: 596, column: 43, scope: !4271)
!4276 = !DILocalVariable(name: "config", arg: 2, scope: !4271, file: !3, line: 596, type: !3745)
!4277 = !DILocation(line: 596, column: 76, scope: !4271)
!4278 = !DILocation(line: 598, column: 6, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4271, file: !3, line: 598, column: 6)
!4280 = !DILocation(line: 598, column: 14, scope: !4279)
!4281 = !DILocation(line: 598, column: 6, scope: !4271)
!4282 = !DILocalVariable(name: "name", scope: !4283, file: !3, line: 599, type: !81)
!4283 = distinct !DILexicalBlock(scope: !4279, file: !3, line: 598, column: 20)
!4284 = !DILocation(line: 599, column: 15, scope: !4283)
!4285 = !DILocation(line: 599, column: 36, scope: !4283)
!4286 = !DILocation(line: 599, column: 44, scope: !4283)
!4287 = !DILocation(line: 599, column: 22, scope: !4283)
!4288 = !DILocation(line: 601, column: 8, scope: !4289)
!4289 = distinct !DILexicalBlock(scope: !4283, file: !3, line: 601, column: 7)
!4290 = !DILocation(line: 601, column: 7, scope: !4283)
!4291 = !DILocation(line: 602, column: 4, scope: !4289)
!4292 = !DILocation(line: 604, column: 15, scope: !4283)
!4293 = !DILocation(line: 604, column: 20, scope: !4283)
!4294 = !DILocation(line: 604, column: 3, scope: !4283)
!4295 = !DILocation(line: 605, column: 15, scope: !4283)
!4296 = !DILocation(line: 605, column: 3, scope: !4283)
!4297 = !DILocation(line: 605, column: 8, scope: !4283)
!4298 = !DILocation(line: 605, column: 13, scope: !4283)
!4299 = !DILocation(line: 606, column: 2, scope: !4283)
!4300 = !DILocation(line: 608, column: 2, scope: !4271)
!4301 = !DILocation(line: 609, column: 1, scope: !4271)
!4302 = distinct !DISubprogram(name: "regmap_debugfs_init", scope: !8, file: !8, line: 233, type: !4303, scopeLine: 233, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4303 = !DISubroutineType(types: !4304)
!4304 = !{null, !6}
!4305 = !DILocalVariable(name: "map", arg: 1, scope: !4302, file: !8, line: 233, type: !6)
!4306 = !DILocation(line: 233, column: 55, scope: !4302)
!4307 = !DILocation(line: 233, column: 62, scope: !4302)
!4308 = distinct !DISubprogram(name: "devres_alloc", scope: !74, file: !74, line: 178, type: !4309, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4309 = !DISubroutineType(types: !4310)
!4310 = !{!64, !4311, !167, !69}
!4311 = !DIDerivedType(tag: DW_TAG_typedef, name: "dr_release_t", file: !74, line: 165, baseType: !4312)
!4312 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4313, size: 64)
!4313 = !DISubroutineType(types: !4314)
!4314 = !{null, !72, !64}
!4315 = !DILocalVariable(name: "release", arg: 1, scope: !4308, file: !74, line: 178, type: !4311)
!4316 = !DILocation(line: 178, column: 47, scope: !4308)
!4317 = !DILocalVariable(name: "size", arg: 2, scope: !4308, file: !74, line: 178, type: !167)
!4318 = !DILocation(line: 178, column: 63, scope: !4308)
!4319 = !DILocalVariable(name: "gfp", arg: 3, scope: !4308, file: !74, line: 178, type: !69)
!4320 = !DILocation(line: 178, column: 75, scope: !4308)
!4321 = !DILocation(line: 180, column: 27, scope: !4308)
!4322 = !DILocation(line: 180, column: 36, scope: !4308)
!4323 = !DILocation(line: 180, column: 42, scope: !4308)
!4324 = !DILocation(line: 180, column: 9, scope: !4308)
!4325 = !DILocation(line: 180, column: 2, scope: !4308)
!4326 = distinct !DISubprogram(name: "dev_get_regmap_release", scope: !3, file: !3, line: 526, type: !4313, scopeLine: 527, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4327 = !DILocalVariable(name: "dev", arg: 1, scope: !4326, file: !3, line: 526, type: !72)
!4328 = !DILocation(line: 526, column: 51, scope: !4326)
!4329 = !DILocalVariable(name: "res", arg: 2, scope: !4326, file: !3, line: 526, type: !64)
!4330 = !DILocation(line: 526, column: 62, scope: !4326)
!4331 = !DILocation(line: 533, column: 1, scope: !4326)
!4332 = distinct !DISubprogram(name: "regmap_debugfs_exit", scope: !8, file: !8, line: 234, type: !4303, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4333 = !DILocalVariable(name: "map", arg: 1, scope: !4332, file: !8, line: 234, type: !6)
!4334 = !DILocation(line: 234, column: 55, scope: !4332)
!4335 = !DILocation(line: 234, column: 62, scope: !4332)
!4336 = distinct !DISubprogram(name: "regmap_get_val_endian", scope: !3, file: !3, line: 662, type: !4337, scopeLine: 665, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4337 = !DISubroutineType(types: !4338)
!4338 = !{!3623, !72, !3568, !3745}
!4339 = !DILocalVariable(name: "dev", arg: 1, scope: !4336, file: !3, line: 662, type: !72)
!4340 = !DILocation(line: 662, column: 57, scope: !4336)
!4341 = !DILocalVariable(name: "bus", arg: 2, scope: !4336, file: !3, line: 663, type: !3568)
!4342 = !DILocation(line: 663, column: 32, scope: !4336)
!4343 = !DILocalVariable(name: "config", arg: 3, scope: !4336, file: !3, line: 664, type: !3745)
!4344 = !DILocation(line: 664, column: 35, scope: !4336)
!4345 = !DILocalVariable(name: "fwnode", scope: !4336, file: !3, line: 666, type: !3408)
!4346 = !DILocation(line: 666, column: 24, scope: !4336)
!4347 = !DILocation(line: 666, column: 33, scope: !4336)
!4348 = !DILocation(line: 666, column: 50, scope: !4336)
!4349 = !DILocation(line: 666, column: 39, scope: !4336)
!4350 = !DILocalVariable(name: "endian", scope: !4336, file: !3, line: 667, type: !3623)
!4351 = !DILocation(line: 667, column: 21, scope: !4336)
!4352 = !DILocation(line: 670, column: 11, scope: !4336)
!4353 = !DILocation(line: 670, column: 19, scope: !4336)
!4354 = !DILocation(line: 670, column: 9, scope: !4336)
!4355 = !DILocation(line: 673, column: 6, scope: !4356)
!4356 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 673, column: 6)
!4357 = !DILocation(line: 673, column: 13, scope: !4356)
!4358 = !DILocation(line: 673, column: 6, scope: !4336)
!4359 = !DILocation(line: 674, column: 10, scope: !4356)
!4360 = !DILocation(line: 674, column: 3, scope: !4356)
!4361 = !DILocation(line: 677, column: 32, scope: !4362)
!4362 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 677, column: 6)
!4363 = !DILocation(line: 677, column: 6, scope: !4362)
!4364 = !DILocation(line: 677, column: 6, scope: !4336)
!4365 = !DILocation(line: 678, column: 10, scope: !4362)
!4366 = !DILocation(line: 678, column: 3, scope: !4362)
!4367 = !DILocation(line: 679, column: 37, scope: !4368)
!4368 = distinct !DILexicalBlock(scope: !4362, file: !3, line: 679, column: 11)
!4369 = !DILocation(line: 679, column: 11, scope: !4368)
!4370 = !DILocation(line: 679, column: 11, scope: !4362)
!4371 = !DILocation(line: 680, column: 10, scope: !4368)
!4372 = !DILocation(line: 680, column: 3, scope: !4368)
!4373 = !DILocation(line: 681, column: 37, scope: !4374)
!4374 = distinct !DILexicalBlock(scope: !4368, file: !3, line: 681, column: 11)
!4375 = !DILocation(line: 681, column: 11, scope: !4374)
!4376 = !DILocation(line: 681, column: 11, scope: !4368)
!4377 = !DILocation(line: 682, column: 10, scope: !4374)
!4378 = !DILocation(line: 682, column: 3, scope: !4374)
!4379 = !DILocation(line: 685, column: 6, scope: !4380)
!4380 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 685, column: 6)
!4381 = !DILocation(line: 685, column: 13, scope: !4380)
!4382 = !DILocation(line: 685, column: 6, scope: !4336)
!4383 = !DILocation(line: 686, column: 10, scope: !4380)
!4384 = !DILocation(line: 686, column: 3, scope: !4380)
!4385 = !DILocation(line: 689, column: 6, scope: !4386)
!4386 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 689, column: 6)
!4387 = !DILocation(line: 689, column: 10, scope: !4386)
!4388 = !DILocation(line: 689, column: 13, scope: !4386)
!4389 = !DILocation(line: 689, column: 18, scope: !4386)
!4390 = !DILocation(line: 689, column: 6, scope: !4336)
!4391 = !DILocation(line: 690, column: 12, scope: !4386)
!4392 = !DILocation(line: 690, column: 17, scope: !4386)
!4393 = !DILocation(line: 690, column: 10, scope: !4386)
!4394 = !DILocation(line: 690, column: 3, scope: !4386)
!4395 = !DILocation(line: 693, column: 6, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4336, file: !3, line: 693, column: 6)
!4397 = !DILocation(line: 693, column: 13, scope: !4396)
!4398 = !DILocation(line: 693, column: 6, scope: !4336)
!4399 = !DILocation(line: 694, column: 10, scope: !4396)
!4400 = !DILocation(line: 694, column: 3, scope: !4396)
!4401 = !DILocation(line: 697, column: 2, scope: !4336)
!4402 = !DILocation(line: 698, column: 1, scope: !4336)
!4403 = distinct !DISubprogram(name: "fwnode_property_read_bool", scope: !4404, file: !4404, line: 179, type: !3440, scopeLine: 181, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4404 = !DIFile(filename: "./include/linux/property.h", directory: "/home/lizy2001/genbc/linux")
!4405 = !DILocalVariable(name: "fwnode", arg: 1, scope: !4403, file: !4404, line: 179, type: !3430)
!4406 = !DILocation(line: 179, column: 74, scope: !4403)
!4407 = !DILocalVariable(name: "propname", arg: 2, scope: !4403, file: !4404, line: 180, type: !81)
!4408 = !DILocation(line: 180, column: 23, scope: !4403)
!4409 = !DILocation(line: 182, column: 33, scope: !4403)
!4410 = !DILocation(line: 182, column: 41, scope: !4403)
!4411 = !DILocation(line: 182, column: 9, scope: !4403)
!4412 = !DILocation(line: 182, column: 2, scope: !4403)
!4413 = !DILocalVariable(name: "lock", arg: 1, scope: !4414, file: !4415, line: 327, type: !4419)
!4414 = distinct !DISubprogram(name: "spinlock_check", scope: !4415, file: !4415, line: 327, type: !4416, scopeLine: 328, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!4415 = !DIFile(filename: "./include/linux/spinlock.h", directory: "/home/lizy2001/genbc/linux")
!4416 = !DISubroutineType(types: !4417)
!4417 = !{!4418, !4419}
!4418 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !615, size: 64)
!4419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !31, size: 64)
!4420 = !DILocation(line: 327, column: 67, scope: !4414, inlinedAt: !4421)
!4421 = distinct !DILocation(line: 827, column: 2, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !2, file: !3, line: 827, column: 2)
!4423 = !DILocation(line: 327, column: 67, scope: !4414, inlinedAt: !4424)
!4424 = distinct !DILocation(line: 763, column: 4, scope: !4425)
!4425 = distinct !DILexicalBlock(scope: !4426, file: !3, line: 763, column: 4)
!4426 = distinct !DILexicalBlock(scope: !4427, file: !3, line: 762, column: 24)
!4427 = distinct !DILexicalBlock(scope: !4428, file: !3, line: 761, column: 7)
!4428 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 760, column: 9)
!4429 = distinct !DILexicalBlock(scope: !4430, file: !3, line: 737, column: 13)
!4430 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 732, column: 13)
!4431 = distinct !DILexicalBlock(scope: !2, file: !3, line: 728, column: 6)
!4432 = !DILocalVariable(name: "dev", arg: 1, scope: !2, file: !3, line: 701, type: !72)
!4433 = !DILocation(line: 701, column: 45, scope: !2)
!4434 = !DILocalVariable(name: "bus", arg: 2, scope: !2, file: !3, line: 702, type: !3568)
!4435 = !DILocation(line: 702, column: 34, scope: !2)
!4436 = !DILocalVariable(name: "bus_context", arg: 3, scope: !2, file: !3, line: 703, type: !64)
!4437 = !DILocation(line: 703, column: 15, scope: !2)
!4438 = !DILocalVariable(name: "config", arg: 4, scope: !2, file: !3, line: 704, type: !3745)
!4439 = !DILocation(line: 704, column: 37, scope: !2)
!4440 = !DILocalVariable(name: "lock_key", arg: 5, scope: !2, file: !3, line: 705, type: !3807)
!4441 = !DILocation(line: 705, column: 32, scope: !2)
!4442 = !DILocalVariable(name: "lock_name", arg: 6, scope: !2, file: !3, line: 706, type: !81)
!4443 = !DILocation(line: 706, column: 21, scope: !2)
!4444 = !DILocalVariable(name: "map", scope: !2, file: !3, line: 708, type: !6)
!4445 = !DILocation(line: 708, column: 17, scope: !2)
!4446 = !DILocalVariable(name: "ret", scope: !2, file: !3, line: 709, type: !104)
!4447 = !DILocation(line: 709, column: 6, scope: !2)
!4448 = !DILocalVariable(name: "reg_endian", scope: !2, file: !3, line: 710, type: !3623)
!4449 = !DILocation(line: 710, column: 21, scope: !2)
!4450 = !DILocalVariable(name: "val_endian", scope: !2, file: !3, line: 710, type: !3623)
!4451 = !DILocation(line: 710, column: 33, scope: !2)
!4452 = !DILocalVariable(name: "i", scope: !2, file: !3, line: 711, type: !104)
!4453 = !DILocation(line: 711, column: 6, scope: !2)
!4454 = !DILocalVariable(name: "j", scope: !2, file: !3, line: 711, type: !104)
!4455 = !DILocation(line: 711, column: 9, scope: !2)
!4456 = !DILocation(line: 713, column: 7, scope: !4457)
!4457 = distinct !DILexicalBlock(scope: !2, file: !3, line: 713, column: 6)
!4458 = !DILocation(line: 713, column: 6, scope: !2)
!4459 = !DILocation(line: 714, column: 3, scope: !4457)
!4460 = !DILocation(line: 716, column: 8, scope: !2)
!4461 = !DILocation(line: 716, column: 6, scope: !2)
!4462 = !DILocation(line: 717, column: 6, scope: !4463)
!4463 = distinct !DILexicalBlock(scope: !2, file: !3, line: 717, column: 6)
!4464 = !DILocation(line: 717, column: 10, scope: !4463)
!4465 = !DILocation(line: 717, column: 6, scope: !2)
!4466 = !DILocation(line: 718, column: 7, scope: !4467)
!4467 = distinct !DILexicalBlock(scope: !4463, file: !3, line: 717, column: 19)
!4468 = !DILocation(line: 719, column: 3, scope: !4467)
!4469 = !DILocation(line: 722, column: 24, scope: !2)
!4470 = !DILocation(line: 722, column: 29, scope: !2)
!4471 = !DILocation(line: 722, column: 8, scope: !2)
!4472 = !DILocation(line: 722, column: 6, scope: !2)
!4473 = !DILocation(line: 723, column: 6, scope: !4474)
!4474 = distinct !DILexicalBlock(scope: !2, file: !3, line: 723, column: 6)
!4475 = !DILocation(line: 723, column: 6, scope: !2)
!4476 = !DILocation(line: 724, column: 3, scope: !4474)
!4477 = !DILocation(line: 726, column: 6, scope: !2)
!4478 = !DILocation(line: 728, column: 6, scope: !4431)
!4479 = !DILocation(line: 728, column: 14, scope: !4431)
!4480 = !DILocation(line: 728, column: 6, scope: !2)
!4481 = !DILocation(line: 729, column: 15, scope: !4482)
!4482 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 728, column: 31)
!4483 = !DILocation(line: 729, column: 20, scope: !4482)
!4484 = !DILocation(line: 729, column: 27, scope: !4482)
!4485 = !DILocation(line: 729, column: 3, scope: !4482)
!4486 = !DILocation(line: 729, column: 8, scope: !4482)
!4487 = !DILocation(line: 729, column: 13, scope: !4482)
!4488 = !DILocation(line: 730, column: 20, scope: !4482)
!4489 = !DILocation(line: 730, column: 28, scope: !4482)
!4490 = !DILocation(line: 730, column: 3, scope: !4482)
!4491 = !DILocation(line: 730, column: 8, scope: !4482)
!4492 = !DILocation(line: 730, column: 18, scope: !4482)
!4493 = !DILocation(line: 731, column: 26, scope: !4482)
!4494 = !DILocation(line: 731, column: 3, scope: !4482)
!4495 = !DILocation(line: 732, column: 2, scope: !4482)
!4496 = !DILocation(line: 732, column: 13, scope: !4430)
!4497 = !DILocation(line: 732, column: 21, scope: !4430)
!4498 = !DILocation(line: 732, column: 26, scope: !4430)
!4499 = !DILocation(line: 732, column: 29, scope: !4430)
!4500 = !DILocation(line: 732, column: 37, scope: !4430)
!4501 = !DILocation(line: 732, column: 13, scope: !4431)
!4502 = !DILocation(line: 733, column: 15, scope: !4503)
!4503 = distinct !DILexicalBlock(scope: !4430, file: !3, line: 732, column: 45)
!4504 = !DILocation(line: 733, column: 23, scope: !4503)
!4505 = !DILocation(line: 733, column: 3, scope: !4503)
!4506 = !DILocation(line: 733, column: 8, scope: !4503)
!4507 = !DILocation(line: 733, column: 13, scope: !4503)
!4508 = !DILocation(line: 734, column: 17, scope: !4503)
!4509 = !DILocation(line: 734, column: 25, scope: !4503)
!4510 = !DILocation(line: 734, column: 3, scope: !4503)
!4511 = !DILocation(line: 734, column: 8, scope: !4503)
!4512 = !DILocation(line: 734, column: 15, scope: !4503)
!4513 = !DILocation(line: 735, column: 19, scope: !4503)
!4514 = !DILocation(line: 735, column: 27, scope: !4503)
!4515 = !DILocation(line: 735, column: 3, scope: !4503)
!4516 = !DILocation(line: 735, column: 8, scope: !4503)
!4517 = !DILocation(line: 735, column: 17, scope: !4503)
!4518 = !DILocation(line: 736, column: 20, scope: !4503)
!4519 = !DILocation(line: 736, column: 28, scope: !4503)
!4520 = !DILocation(line: 736, column: 3, scope: !4503)
!4521 = !DILocation(line: 736, column: 8, scope: !4503)
!4522 = !DILocation(line: 736, column: 18, scope: !4503)
!4523 = !DILocation(line: 737, column: 2, scope: !4503)
!4524 = !DILocation(line: 737, column: 13, scope: !4429)
!4525 = !DILocation(line: 737, column: 21, scope: !4429)
!4526 = !DILocation(line: 737, column: 13, scope: !4430)
!4527 = !DILocation(line: 738, column: 46, scope: !4528)
!4528 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 737, column: 33)
!4529 = !DILocation(line: 738, column: 54, scope: !4528)
!4530 = !DILocation(line: 738, column: 17, scope: !4528)
!4531 = !DILocation(line: 738, column: 3, scope: !4528)
!4532 = !DILocation(line: 738, column: 8, scope: !4528)
!4533 = !DILocation(line: 738, column: 15, scope: !4528)
!4534 = !DILocation(line: 739, column: 8, scope: !4535)
!4535 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 739, column: 7)
!4536 = !DILocation(line: 739, column: 13, scope: !4535)
!4537 = !DILocation(line: 739, column: 7, scope: !4528)
!4538 = !DILocation(line: 740, column: 8, scope: !4539)
!4539 = distinct !DILexicalBlock(scope: !4535, file: !3, line: 739, column: 21)
!4540 = !DILocation(line: 741, column: 4, scope: !4539)
!4541 = !DILocation(line: 744, column: 11, scope: !4528)
!4542 = !DILocation(line: 744, column: 19, scope: !4528)
!4543 = !DILocation(line: 744, column: 3, scope: !4528)
!4544 = !DILocation(line: 746, column: 4, scope: !4545)
!4545 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 744, column: 32)
!4546 = !DILocation(line: 746, column: 9, scope: !4545)
!4547 = !DILocation(line: 746, column: 14, scope: !4545)
!4548 = !DILocation(line: 747, column: 4, scope: !4545)
!4549 = !DILocation(line: 747, column: 9, scope: !4545)
!4550 = !DILocation(line: 747, column: 16, scope: !4545)
!4551 = !DILocation(line: 748, column: 4, scope: !4545)
!4552 = !DILocation(line: 750, column: 4, scope: !4545)
!4553 = !DILocation(line: 750, column: 9, scope: !4545)
!4554 = !DILocation(line: 750, column: 14, scope: !4545)
!4555 = !DILocation(line: 751, column: 4, scope: !4545)
!4556 = !DILocation(line: 751, column: 9, scope: !4545)
!4557 = !DILocation(line: 751, column: 16, scope: !4545)
!4558 = !DILocation(line: 752, column: 4, scope: !4545)
!4559 = !DILocation(line: 754, column: 4, scope: !4545)
!4560 = !DILocation(line: 754, column: 9, scope: !4545)
!4561 = !DILocation(line: 754, column: 14, scope: !4545)
!4562 = !DILocation(line: 755, column: 4, scope: !4545)
!4563 = !DILocation(line: 755, column: 9, scope: !4545)
!4564 = !DILocation(line: 755, column: 16, scope: !4545)
!4565 = !DILocation(line: 756, column: 4, scope: !4545)
!4566 = !DILocation(line: 759, column: 19, scope: !4528)
!4567 = !DILocation(line: 759, column: 3, scope: !4528)
!4568 = !DILocation(line: 759, column: 8, scope: !4528)
!4569 = !DILocation(line: 759, column: 17, scope: !4528)
!4570 = !DILocation(line: 760, column: 2, scope: !4528)
!4571 = !DILocation(line: 761, column: 8, scope: !4427)
!4572 = !DILocation(line: 761, column: 12, scope: !4427)
!4573 = !DILocation(line: 761, column: 15, scope: !4427)
!4574 = !DILocation(line: 761, column: 20, scope: !4427)
!4575 = !DILocation(line: 761, column: 29, scope: !4427)
!4576 = !DILocation(line: 762, column: 7, scope: !4427)
!4577 = !DILocation(line: 762, column: 15, scope: !4427)
!4578 = !DILocation(line: 761, column: 7, scope: !4428)
!4579 = !DILocation(line: 763, column: 4, scope: !4426)
!4580 = !DILocation(line: 763, column: 4, scope: !4425)
!4581 = !DILocation(line: 329, column: 10, scope: !4414, inlinedAt: !4424)
!4582 = !DILocation(line: 329, column: 16, scope: !4414, inlinedAt: !4424)
!4583 = !DILocation(line: 764, column: 4, scope: !4426)
!4584 = !DILocation(line: 764, column: 9, scope: !4426)
!4585 = !DILocation(line: 764, column: 14, scope: !4426)
!4586 = !DILocation(line: 765, column: 4, scope: !4426)
!4587 = !DILocation(line: 765, column: 9, scope: !4426)
!4588 = !DILocation(line: 765, column: 16, scope: !4426)
!4589 = !DILocation(line: 766, column: 4, scope: !4426)
!4590 = !DILocation(line: 766, column: 4, scope: !4591)
!4591 = distinct !DILexicalBlock(scope: !4426, file: !3, line: 766, column: 4)
!4592 = !DILocation(line: 768, column: 3, scope: !4426)
!4593 = !DILocation(line: 769, column: 4, scope: !4594)
!4594 = distinct !DILexicalBlock(scope: !4427, file: !3, line: 768, column: 10)
!4595 = !DILocation(line: 769, column: 4, scope: !4596)
!4596 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 769, column: 4)
!4597 = !DILocation(line: 770, column: 4, scope: !4594)
!4598 = !DILocation(line: 770, column: 9, scope: !4594)
!4599 = !DILocation(line: 770, column: 14, scope: !4594)
!4600 = !DILocation(line: 771, column: 4, scope: !4594)
!4601 = !DILocation(line: 771, column: 9, scope: !4594)
!4602 = !DILocation(line: 771, column: 16, scope: !4594)
!4603 = !DILocation(line: 772, column: 4, scope: !4594)
!4604 = !DILocation(line: 772, column: 9, scope: !4594)
!4605 = !DILocation(line: 772, column: 19, scope: !4594)
!4606 = !DILocation(line: 773, column: 4, scope: !4594)
!4607 = !DILocation(line: 773, column: 4, scope: !4608)
!4608 = distinct !DILexicalBlock(scope: !4594, file: !3, line: 773, column: 4)
!4609 = !DILocation(line: 776, column: 19, scope: !4428)
!4610 = !DILocation(line: 776, column: 3, scope: !4428)
!4611 = !DILocation(line: 776, column: 8, scope: !4428)
!4612 = !DILocation(line: 776, column: 17, scope: !4428)
!4613 = !DILocation(line: 783, column: 7, scope: !4614)
!4614 = distinct !DILexicalBlock(scope: !2, file: !3, line: 783, column: 6)
!4615 = !DILocation(line: 783, column: 11, scope: !4614)
!4616 = !DILocation(line: 783, column: 14, scope: !4614)
!4617 = !DILocation(line: 783, column: 19, scope: !4614)
!4618 = !DILocation(line: 783, column: 28, scope: !4614)
!4619 = !DILocation(line: 783, column: 31, scope: !4614)
!4620 = !DILocation(line: 783, column: 39, scope: !4614)
!4621 = !DILocation(line: 783, column: 6, scope: !2)
!4622 = !DILocation(line: 784, column: 3, scope: !4614)
!4623 = !DILocation(line: 784, column: 8, scope: !4614)
!4624 = !DILocation(line: 784, column: 20, scope: !4614)
!4625 = !DILocation(line: 786, column: 3, scope: !4614)
!4626 = !DILocation(line: 786, column: 8, scope: !4614)
!4627 = !DILocation(line: 786, column: 20, scope: !4614)
!4628 = !DILocation(line: 788, column: 26, scope: !2)
!4629 = !DILocation(line: 788, column: 2, scope: !2)
!4630 = !DILocation(line: 788, column: 7, scope: !2)
!4631 = !DILocation(line: 788, column: 14, scope: !2)
!4632 = !DILocation(line: 788, column: 24, scope: !2)
!4633 = !DILocation(line: 789, column: 26, scope: !2)
!4634 = !DILocation(line: 789, column: 34, scope: !2)
!4635 = !DILocation(line: 789, column: 43, scope: !2)
!4636 = !DILocation(line: 789, column: 2, scope: !2)
!4637 = !DILocation(line: 789, column: 7, scope: !2)
!4638 = !DILocation(line: 789, column: 14, scope: !2)
!4639 = !DILocation(line: 789, column: 24, scope: !2)
!4640 = !DILocation(line: 790, column: 26, scope: !2)
!4641 = !DILocation(line: 790, column: 2, scope: !2)
!4642 = !DILocation(line: 790, column: 7, scope: !2)
!4643 = !DILocation(line: 790, column: 14, scope: !2)
!4644 = !DILocation(line: 790, column: 24, scope: !2)
!4645 = !DILocation(line: 791, column: 25, scope: !2)
!4646 = !DILocation(line: 791, column: 2, scope: !2)
!4647 = !DILocation(line: 791, column: 7, scope: !2)
!4648 = !DILocation(line: 791, column: 14, scope: !2)
!4649 = !DILocation(line: 791, column: 23, scope: !2)
!4650 = !DILocation(line: 793, column: 19, scope: !2)
!4651 = !DILocation(line: 793, column: 27, scope: !2)
!4652 = !DILocation(line: 793, column: 36, scope: !2)
!4653 = !DILocation(line: 793, column: 2, scope: !2)
!4654 = !DILocation(line: 793, column: 7, scope: !2)
!4655 = !DILocation(line: 793, column: 17, scope: !2)
!4656 = !DILocation(line: 794, column: 6, scope: !4657)
!4657 = distinct !DILexicalBlock(scope: !2, file: !3, line: 794, column: 6)
!4658 = !DILocation(line: 794, column: 14, scope: !4657)
!4659 = !DILocation(line: 794, column: 6, scope: !2)
!4660 = !DILocation(line: 795, column: 21, scope: !4657)
!4661 = !DILocation(line: 795, column: 29, scope: !4657)
!4662 = !DILocation(line: 795, column: 3, scope: !4657)
!4663 = !DILocation(line: 795, column: 8, scope: !4657)
!4664 = !DILocation(line: 795, column: 19, scope: !4657)
!4665 = !DILocation(line: 797, column: 3, scope: !4657)
!4666 = !DILocation(line: 797, column: 8, scope: !4657)
!4667 = !DILocation(line: 797, column: 19, scope: !4657)
!4668 = !DILocation(line: 798, column: 20, scope: !4669)
!4669 = distinct !DILexicalBlock(scope: !2, file: !3, line: 798, column: 6)
!4670 = !DILocation(line: 798, column: 25, scope: !4669)
!4671 = !DILocation(line: 798, column: 6, scope: !4669)
!4672 = !DILocation(line: 798, column: 6, scope: !2)
!4673 = !DILocation(line: 799, column: 27, scope: !4669)
!4674 = !DILocation(line: 799, column: 3, scope: !4669)
!4675 = !DILocation(line: 799, column: 8, scope: !4669)
!4676 = !DILocation(line: 799, column: 25, scope: !4669)
!4677 = !DILocation(line: 801, column: 3, scope: !4669)
!4678 = !DILocation(line: 801, column: 8, scope: !4669)
!4679 = !DILocation(line: 801, column: 25, scope: !4669)
!4680 = !DILocation(line: 802, column: 25, scope: !2)
!4681 = !DILocation(line: 802, column: 33, scope: !2)
!4682 = !DILocation(line: 802, column: 49, scope: !2)
!4683 = !DILocation(line: 802, column: 53, scope: !2)
!4684 = !DILocation(line: 802, column: 57, scope: !2)
!4685 = !DILocation(line: 802, column: 61, scope: !2)
!4686 = !DILocation(line: 802, column: 66, scope: !2)
!4687 = !DILocation(line: 802, column: 60, scope: !2)
!4688 = !DILocation(line: 802, column: 2, scope: !2)
!4689 = !DILocation(line: 802, column: 7, scope: !2)
!4690 = !DILocation(line: 802, column: 23, scope: !2)
!4691 = !DILocation(line: 803, column: 26, scope: !2)
!4692 = !DILocation(line: 803, column: 34, scope: !2)
!4693 = !DILocation(line: 803, column: 51, scope: !2)
!4694 = !DILocation(line: 803, column: 55, scope: !2)
!4695 = !DILocation(line: 803, column: 59, scope: !2)
!4696 = !DILocation(line: 803, column: 63, scope: !2)
!4697 = !DILocation(line: 803, column: 68, scope: !2)
!4698 = !DILocation(line: 803, column: 62, scope: !2)
!4699 = !DILocation(line: 803, column: 2, scope: !2)
!4700 = !DILocation(line: 803, column: 7, scope: !2)
!4701 = !DILocation(line: 803, column: 24, scope: !2)
!4702 = !DILocation(line: 804, column: 25, scope: !2)
!4703 = !DILocation(line: 804, column: 33, scope: !2)
!4704 = !DILocation(line: 804, column: 49, scope: !2)
!4705 = !DILocation(line: 804, column: 52, scope: !2)
!4706 = !DILocation(line: 804, column: 56, scope: !2)
!4707 = !DILocation(line: 804, column: 59, scope: !2)
!4708 = !DILocation(line: 804, column: 64, scope: !2)
!4709 = !DILocation(line: 0, scope: !2)
!4710 = !DILocation(line: 804, column: 2, scope: !2)
!4711 = !DILocation(line: 804, column: 7, scope: !2)
!4712 = !DILocation(line: 804, column: 23, scope: !2)
!4713 = !DILocation(line: 805, column: 6, scope: !4714)
!4714 = distinct !DILexicalBlock(scope: !2, file: !3, line: 805, column: 6)
!4715 = !DILocation(line: 805, column: 6, scope: !2)
!4716 = !DILocation(line: 806, column: 23, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4714, file: !3, line: 805, column: 11)
!4718 = !DILocation(line: 806, column: 28, scope: !4717)
!4719 = !DILocation(line: 806, column: 3, scope: !4717)
!4720 = !DILocation(line: 806, column: 8, scope: !4717)
!4721 = !DILocation(line: 806, column: 21, scope: !4717)
!4722 = !DILocation(line: 807, column: 24, scope: !4717)
!4723 = !DILocation(line: 807, column: 29, scope: !4717)
!4724 = !DILocation(line: 807, column: 3, scope: !4717)
!4725 = !DILocation(line: 807, column: 8, scope: !4717)
!4726 = !DILocation(line: 807, column: 22, scope: !4717)
!4727 = !DILocation(line: 808, column: 2, scope: !4717)
!4728 = !DILocation(line: 809, column: 13, scope: !2)
!4729 = !DILocation(line: 809, column: 2, scope: !2)
!4730 = !DILocation(line: 809, column: 7, scope: !2)
!4731 = !DILocation(line: 809, column: 11, scope: !2)
!4732 = !DILocation(line: 810, column: 13, scope: !2)
!4733 = !DILocation(line: 810, column: 2, scope: !2)
!4734 = !DILocation(line: 810, column: 7, scope: !2)
!4735 = !DILocation(line: 810, column: 11, scope: !2)
!4736 = !DILocation(line: 811, column: 21, scope: !2)
!4737 = !DILocation(line: 811, column: 2, scope: !2)
!4738 = !DILocation(line: 811, column: 7, scope: !2)
!4739 = !DILocation(line: 811, column: 19, scope: !2)
!4740 = !DILocation(line: 812, column: 22, scope: !2)
!4741 = !DILocation(line: 812, column: 30, scope: !2)
!4742 = !DILocation(line: 812, column: 2, scope: !2)
!4743 = !DILocation(line: 812, column: 7, scope: !2)
!4744 = !DILocation(line: 812, column: 20, scope: !2)
!4745 = !DILocation(line: 813, column: 18, scope: !2)
!4746 = !DILocation(line: 813, column: 26, scope: !2)
!4747 = !DILocation(line: 813, column: 2, scope: !2)
!4748 = !DILocation(line: 813, column: 7, scope: !2)
!4749 = !DILocation(line: 813, column: 16, scope: !2)
!4750 = !DILocation(line: 814, column: 18, scope: !2)
!4751 = !DILocation(line: 814, column: 26, scope: !2)
!4752 = !DILocation(line: 814, column: 2, scope: !2)
!4753 = !DILocation(line: 814, column: 7, scope: !2)
!4754 = !DILocation(line: 814, column: 16, scope: !2)
!4755 = !DILocation(line: 815, column: 24, scope: !2)
!4756 = !DILocation(line: 815, column: 32, scope: !2)
!4757 = !DILocation(line: 815, column: 2, scope: !2)
!4758 = !DILocation(line: 815, column: 7, scope: !2)
!4759 = !DILocation(line: 815, column: 22, scope: !2)
!4760 = !DILocation(line: 816, column: 24, scope: !2)
!4761 = !DILocation(line: 816, column: 32, scope: !2)
!4762 = !DILocation(line: 816, column: 2, scope: !2)
!4763 = !DILocation(line: 816, column: 7, scope: !2)
!4764 = !DILocation(line: 816, column: 22, scope: !2)
!4765 = !DILocation(line: 817, column: 24, scope: !2)
!4766 = !DILocation(line: 817, column: 32, scope: !2)
!4767 = !DILocation(line: 817, column: 2, scope: !2)
!4768 = !DILocation(line: 817, column: 7, scope: !2)
!4769 = !DILocation(line: 817, column: 22, scope: !2)
!4770 = !DILocation(line: 818, column: 24, scope: !2)
!4771 = !DILocation(line: 818, column: 32, scope: !2)
!4772 = !DILocation(line: 818, column: 2, scope: !2)
!4773 = !DILocation(line: 818, column: 7, scope: !2)
!4774 = !DILocation(line: 818, column: 22, scope: !2)
!4775 = !DILocation(line: 819, column: 23, scope: !2)
!4776 = !DILocation(line: 819, column: 31, scope: !2)
!4777 = !DILocation(line: 819, column: 2, scope: !2)
!4778 = !DILocation(line: 819, column: 7, scope: !2)
!4779 = !DILocation(line: 819, column: 21, scope: !2)
!4780 = !DILocation(line: 820, column: 22, scope: !2)
!4781 = !DILocation(line: 820, column: 30, scope: !2)
!4782 = !DILocation(line: 820, column: 2, scope: !2)
!4783 = !DILocation(line: 820, column: 7, scope: !2)
!4784 = !DILocation(line: 820, column: 20, scope: !2)
!4785 = !DILocation(line: 821, column: 22, scope: !2)
!4786 = !DILocation(line: 821, column: 30, scope: !2)
!4787 = !DILocation(line: 821, column: 2, scope: !2)
!4788 = !DILocation(line: 821, column: 7, scope: !2)
!4789 = !DILocation(line: 821, column: 20, scope: !2)
!4790 = !DILocation(line: 822, column: 22, scope: !2)
!4791 = !DILocation(line: 822, column: 30, scope: !2)
!4792 = !DILocation(line: 822, column: 2, scope: !2)
!4793 = !DILocation(line: 822, column: 7, scope: !2)
!4794 = !DILocation(line: 822, column: 20, scope: !2)
!4795 = !DILocation(line: 823, column: 29, scope: !2)
!4796 = !DILocation(line: 823, column: 37, scope: !2)
!4797 = !DILocation(line: 823, column: 2, scope: !2)
!4798 = !DILocation(line: 823, column: 7, scope: !2)
!4799 = !DILocation(line: 823, column: 27, scope: !2)
!4800 = !DILocation(line: 824, column: 28, scope: !2)
!4801 = !DILocation(line: 824, column: 36, scope: !2)
!4802 = !DILocation(line: 824, column: 2, scope: !2)
!4803 = !DILocation(line: 824, column: 7, scope: !2)
!4804 = !DILocation(line: 824, column: 26, scope: !2)
!4805 = !DILocation(line: 825, column: 20, scope: !2)
!4806 = !DILocation(line: 825, column: 28, scope: !2)
!4807 = !DILocation(line: 825, column: 2, scope: !2)
!4808 = !DILocation(line: 825, column: 7, scope: !2)
!4809 = !DILocation(line: 825, column: 18, scope: !2)
!4810 = !DILocation(line: 827, column: 2, scope: !2)
!4811 = !DILocation(line: 827, column: 2, scope: !4422)
!4812 = !DILocation(line: 329, column: 10, scope: !4414, inlinedAt: !4421)
!4813 = !DILocation(line: 329, column: 16, scope: !4414, inlinedAt: !4421)
!4814 = !DILocation(line: 828, column: 18, scope: !2)
!4815 = !DILocation(line: 828, column: 23, scope: !2)
!4816 = !DILocation(line: 828, column: 2, scope: !2)
!4817 = !DILocation(line: 829, column: 18, scope: !2)
!4818 = !DILocation(line: 829, column: 23, scope: !2)
!4819 = !DILocation(line: 829, column: 2, scope: !2)
!4820 = !DILocation(line: 830, column: 2, scope: !2)
!4821 = !DILocation(line: 830, column: 2, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !2, file: !3, line: 830, column: 2)
!4823 = !DILocation(line: 832, column: 6, scope: !4824)
!4824 = distinct !DILexicalBlock(scope: !2, file: !3, line: 832, column: 6)
!4825 = !DILocation(line: 832, column: 14, scope: !4824)
!4826 = !DILocation(line: 832, column: 29, scope: !4824)
!4827 = !DILocation(line: 833, column: 6, scope: !4824)
!4828 = !DILocation(line: 833, column: 14, scope: !4824)
!4829 = !DILocation(line: 833, column: 30, scope: !4824)
!4830 = !DILocation(line: 834, column: 6, scope: !4824)
!4831 = !DILocation(line: 834, column: 14, scope: !4824)
!4832 = !DILocation(line: 832, column: 6, scope: !2)
!4833 = !DILocation(line: 835, column: 25, scope: !4834)
!4834 = distinct !DILexicalBlock(scope: !4824, file: !3, line: 834, column: 30)
!4835 = !DILocation(line: 835, column: 33, scope: !4834)
!4836 = !DILocation(line: 835, column: 3, scope: !4834)
!4837 = !DILocation(line: 835, column: 8, scope: !4834)
!4838 = !DILocation(line: 835, column: 23, scope: !4834)
!4839 = !DILocation(line: 836, column: 26, scope: !4834)
!4840 = !DILocation(line: 836, column: 34, scope: !4834)
!4841 = !DILocation(line: 836, column: 3, scope: !4834)
!4842 = !DILocation(line: 836, column: 8, scope: !4834)
!4843 = !DILocation(line: 836, column: 24, scope: !4834)
!4844 = !DILocation(line: 837, column: 2, scope: !4834)
!4845 = !DILocation(line: 837, column: 13, scope: !4846)
!4846 = distinct !DILexicalBlock(scope: !4824, file: !3, line: 837, column: 13)
!4847 = !DILocation(line: 837, column: 13, scope: !4824)
!4848 = !DILocation(line: 838, column: 25, scope: !4849)
!4849 = distinct !DILexicalBlock(scope: !4846, file: !3, line: 837, column: 18)
!4850 = !DILocation(line: 838, column: 30, scope: !4849)
!4851 = !DILocation(line: 838, column: 3, scope: !4849)
!4852 = !DILocation(line: 838, column: 8, scope: !4849)
!4853 = !DILocation(line: 838, column: 23, scope: !4849)
!4854 = !DILocation(line: 839, column: 2, scope: !4849)
!4855 = !DILocation(line: 841, column: 7, scope: !4856)
!4856 = distinct !DILexicalBlock(scope: !2, file: !3, line: 841, column: 6)
!4857 = !DILocation(line: 841, column: 6, scope: !2)
!4858 = !DILocation(line: 842, column: 20, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 841, column: 12)
!4860 = !DILocation(line: 842, column: 28, scope: !4859)
!4861 = !DILocation(line: 842, column: 3, scope: !4859)
!4862 = !DILocation(line: 842, column: 8, scope: !4859)
!4863 = !DILocation(line: 842, column: 18, scope: !4859)
!4864 = !DILocation(line: 843, column: 20, scope: !4859)
!4865 = !DILocation(line: 843, column: 28, scope: !4859)
!4866 = !DILocation(line: 843, column: 3, scope: !4859)
!4867 = !DILocation(line: 843, column: 8, scope: !4859)
!4868 = !DILocation(line: 843, column: 18, scope: !4859)
!4869 = !DILocation(line: 845, column: 3, scope: !4859)
!4870 = !DILocation(line: 845, column: 8, scope: !4859)
!4871 = !DILocation(line: 845, column: 22, scope: !4859)
!4872 = !DILocation(line: 846, column: 3, scope: !4859)
!4873 = !DILocation(line: 847, column: 14, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4856, file: !3, line: 847, column: 13)
!4875 = !DILocation(line: 847, column: 19, scope: !4874)
!4876 = !DILocation(line: 847, column: 24, scope: !4874)
!4877 = !DILocation(line: 847, column: 28, scope: !4874)
!4878 = !DILocation(line: 847, column: 33, scope: !4874)
!4879 = !DILocation(line: 847, column: 13, scope: !4856)
!4880 = !DILocation(line: 848, column: 3, scope: !4881)
!4881 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 847, column: 40)
!4882 = !DILocation(line: 848, column: 8, scope: !4881)
!4883 = !DILocation(line: 848, column: 17, scope: !4881)
!4884 = !DILocation(line: 849, column: 3, scope: !4881)
!4885 = !DILocation(line: 849, column: 8, scope: !4881)
!4886 = !DILocation(line: 849, column: 18, scope: !4881)
!4887 = !DILocation(line: 850, column: 26, scope: !4881)
!4888 = !DILocation(line: 850, column: 31, scope: !4881)
!4889 = !DILocation(line: 850, column: 3, scope: !4881)
!4890 = !DILocation(line: 850, column: 8, scope: !4881)
!4891 = !DILocation(line: 850, column: 24, scope: !4881)
!4892 = !DILocation(line: 852, column: 3, scope: !4881)
!4893 = !DILocation(line: 852, column: 8, scope: !4881)
!4894 = !DILocation(line: 852, column: 22, scope: !4881)
!4895 = !DILocation(line: 853, column: 3, scope: !4881)
!4896 = !DILocation(line: 855, column: 3, scope: !4897)
!4897 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 854, column: 9)
!4898 = !DILocation(line: 855, column: 8, scope: !4897)
!4899 = !DILocation(line: 855, column: 18, scope: !4897)
!4900 = !DILocation(line: 856, column: 26, scope: !4897)
!4901 = !DILocation(line: 856, column: 31, scope: !4897)
!4902 = !DILocation(line: 856, column: 3, scope: !4897)
!4903 = !DILocation(line: 856, column: 8, scope: !4897)
!4904 = !DILocation(line: 856, column: 24, scope: !4897)
!4905 = !DILocation(line: 859, column: 37, scope: !2)
!4906 = !DILocation(line: 859, column: 42, scope: !2)
!4907 = !DILocation(line: 859, column: 15, scope: !2)
!4908 = !DILocation(line: 859, column: 13, scope: !2)
!4909 = !DILocation(line: 860, column: 37, scope: !2)
!4910 = !DILocation(line: 860, column: 42, scope: !2)
!4911 = !DILocation(line: 860, column: 47, scope: !2)
!4912 = !DILocation(line: 860, column: 15, scope: !2)
!4913 = !DILocation(line: 860, column: 13, scope: !2)
!4914 = !DILocation(line: 862, column: 10, scope: !2)
!4915 = !DILocation(line: 862, column: 18, scope: !2)
!4916 = !DILocation(line: 862, column: 29, scope: !2)
!4917 = !DILocation(line: 862, column: 34, scope: !2)
!4918 = !DILocation(line: 862, column: 27, scope: !2)
!4919 = !DILocation(line: 862, column: 2, scope: !2)
!4920 = !DILocation(line: 864, column: 11, scope: !4921)
!4921 = distinct !DILexicalBlock(scope: !2, file: !3, line: 862, column: 45)
!4922 = !DILocation(line: 864, column: 19, scope: !4921)
!4923 = !DILocation(line: 864, column: 3, scope: !4921)
!4924 = !DILocation(line: 866, column: 4, scope: !4925)
!4925 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 864, column: 29)
!4926 = !DILocation(line: 866, column: 9, scope: !4925)
!4927 = !DILocation(line: 866, column: 16, scope: !4925)
!4928 = !DILocation(line: 866, column: 29, scope: !4925)
!4929 = !DILocation(line: 867, column: 4, scope: !4925)
!4930 = !DILocation(line: 869, column: 4, scope: !4925)
!4931 = !DILocation(line: 871, column: 3, scope: !4921)
!4932 = !DILocation(line: 874, column: 11, scope: !4921)
!4933 = !DILocation(line: 874, column: 19, scope: !4921)
!4934 = !DILocation(line: 874, column: 3, scope: !4921)
!4935 = !DILocation(line: 876, column: 4, scope: !4936)
!4936 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 874, column: 29)
!4937 = !DILocation(line: 876, column: 9, scope: !4936)
!4938 = !DILocation(line: 876, column: 16, scope: !4936)
!4939 = !DILocation(line: 876, column: 29, scope: !4936)
!4940 = !DILocation(line: 877, column: 4, scope: !4936)
!4941 = !DILocation(line: 879, column: 4, scope: !4936)
!4942 = !DILocation(line: 881, column: 3, scope: !4921)
!4943 = !DILocation(line: 884, column: 11, scope: !4921)
!4944 = !DILocation(line: 884, column: 19, scope: !4921)
!4945 = !DILocation(line: 884, column: 3, scope: !4921)
!4946 = !DILocation(line: 886, column: 4, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 884, column: 29)
!4948 = !DILocation(line: 886, column: 9, scope: !4947)
!4949 = !DILocation(line: 886, column: 16, scope: !4947)
!4950 = !DILocation(line: 886, column: 29, scope: !4947)
!4951 = !DILocation(line: 887, column: 4, scope: !4947)
!4952 = !DILocation(line: 889, column: 4, scope: !4947)
!4953 = !DILocation(line: 891, column: 3, scope: !4921)
!4954 = !DILocation(line: 894, column: 11, scope: !4921)
!4955 = !DILocation(line: 894, column: 19, scope: !4921)
!4956 = !DILocation(line: 894, column: 3, scope: !4921)
!4957 = !DILocation(line: 896, column: 4, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 894, column: 29)
!4959 = !DILocation(line: 896, column: 9, scope: !4958)
!4960 = !DILocation(line: 896, column: 16, scope: !4958)
!4961 = !DILocation(line: 896, column: 29, scope: !4958)
!4962 = !DILocation(line: 897, column: 4, scope: !4958)
!4963 = !DILocation(line: 899, column: 4, scope: !4958)
!4964 = !DILocation(line: 901, column: 3, scope: !4921)
!4965 = !DILocation(line: 904, column: 11, scope: !4921)
!4966 = !DILocation(line: 904, column: 19, scope: !4921)
!4967 = !DILocation(line: 904, column: 3, scope: !4921)
!4968 = !DILocation(line: 906, column: 4, scope: !4969)
!4969 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 904, column: 29)
!4970 = !DILocation(line: 906, column: 9, scope: !4969)
!4971 = !DILocation(line: 906, column: 16, scope: !4969)
!4972 = !DILocation(line: 906, column: 29, scope: !4969)
!4973 = !DILocation(line: 907, column: 4, scope: !4969)
!4974 = !DILocation(line: 909, column: 4, scope: !4969)
!4975 = !DILocation(line: 911, column: 3, scope: !4921)
!4976 = !DILocation(line: 914, column: 3, scope: !4921)
!4977 = !DILocation(line: 914, column: 8, scope: !4921)
!4978 = !DILocation(line: 914, column: 15, scope: !4921)
!4979 = !DILocation(line: 914, column: 26, scope: !4921)
!4980 = !DILocation(line: 915, column: 3, scope: !4921)
!4981 = !DILocation(line: 918, column: 11, scope: !4921)
!4982 = !DILocation(line: 918, column: 3, scope: !4921)
!4983 = !DILocation(line: 920, column: 4, scope: !4984)
!4984 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 918, column: 23)
!4985 = !DILocation(line: 920, column: 9, scope: !4984)
!4986 = !DILocation(line: 920, column: 16, scope: !4984)
!4987 = !DILocation(line: 920, column: 27, scope: !4984)
!4988 = !DILocation(line: 921, column: 4, scope: !4984)
!4989 = !DILocation(line: 923, column: 4, scope: !4984)
!4990 = !DILocation(line: 923, column: 9, scope: !4984)
!4991 = !DILocation(line: 923, column: 16, scope: !4984)
!4992 = !DILocation(line: 923, column: 27, scope: !4984)
!4993 = !DILocation(line: 924, column: 4, scope: !4984)
!4994 = !DILocation(line: 926, column: 4, scope: !4984)
!4995 = !DILocation(line: 926, column: 9, scope: !4984)
!4996 = !DILocation(line: 926, column: 16, scope: !4984)
!4997 = !DILocation(line: 926, column: 27, scope: !4984)
!4998 = !DILocation(line: 927, column: 4, scope: !4984)
!4999 = !DILocation(line: 929, column: 4, scope: !4984)
!5000 = !DILocation(line: 931, column: 3, scope: !4921)
!5001 = !DILocation(line: 934, column: 7, scope: !5002)
!5002 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 934, column: 7)
!5003 = !DILocation(line: 934, column: 18, scope: !5002)
!5004 = !DILocation(line: 934, column: 7, scope: !4921)
!5005 = !DILocation(line: 935, column: 4, scope: !5002)
!5006 = !DILocation(line: 936, column: 3, scope: !4921)
!5007 = !DILocation(line: 936, column: 8, scope: !4921)
!5008 = !DILocation(line: 936, column: 15, scope: !4921)
!5009 = !DILocation(line: 936, column: 26, scope: !4921)
!5010 = !DILocation(line: 937, column: 3, scope: !4921)
!5011 = !DILocation(line: 940, column: 11, scope: !4921)
!5012 = !DILocation(line: 940, column: 3, scope: !4921)
!5013 = !DILocation(line: 942, column: 4, scope: !5014)
!5014 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 940, column: 23)
!5015 = !DILocation(line: 942, column: 9, scope: !5014)
!5016 = !DILocation(line: 942, column: 16, scope: !5014)
!5017 = !DILocation(line: 942, column: 27, scope: !5014)
!5018 = !DILocation(line: 943, column: 4, scope: !5014)
!5019 = !DILocation(line: 945, column: 4, scope: !5014)
!5020 = !DILocation(line: 945, column: 9, scope: !5014)
!5021 = !DILocation(line: 945, column: 16, scope: !5014)
!5022 = !DILocation(line: 945, column: 27, scope: !5014)
!5023 = !DILocation(line: 946, column: 4, scope: !5014)
!5024 = !DILocation(line: 948, column: 4, scope: !5014)
!5025 = !DILocation(line: 948, column: 9, scope: !5014)
!5026 = !DILocation(line: 948, column: 16, scope: !5014)
!5027 = !DILocation(line: 948, column: 27, scope: !5014)
!5028 = !DILocation(line: 949, column: 4, scope: !5014)
!5029 = !DILocation(line: 951, column: 4, scope: !5014)
!5030 = !DILocation(line: 953, column: 3, scope: !4921)
!5031 = !DILocation(line: 957, column: 11, scope: !4921)
!5032 = !DILocation(line: 957, column: 3, scope: !4921)
!5033 = !DILocation(line: 959, column: 4, scope: !5034)
!5034 = distinct !DILexicalBlock(scope: !4921, file: !3, line: 957, column: 23)
!5035 = !DILocation(line: 959, column: 9, scope: !5034)
!5036 = !DILocation(line: 959, column: 16, scope: !5034)
!5037 = !DILocation(line: 959, column: 27, scope: !5034)
!5038 = !DILocation(line: 960, column: 4, scope: !5034)
!5039 = !DILocation(line: 962, column: 4, scope: !5034)
!5040 = !DILocation(line: 962, column: 9, scope: !5034)
!5041 = !DILocation(line: 962, column: 16, scope: !5034)
!5042 = !DILocation(line: 962, column: 27, scope: !5034)
!5043 = !DILocation(line: 963, column: 4, scope: !5034)
!5044 = !DILocation(line: 965, column: 4, scope: !5034)
!5045 = !DILocation(line: 965, column: 9, scope: !5034)
!5046 = !DILocation(line: 965, column: 16, scope: !5034)
!5047 = !DILocation(line: 965, column: 27, scope: !5034)
!5048 = !DILocation(line: 966, column: 4, scope: !5034)
!5049 = !DILocation(line: 968, column: 4, scope: !5034)
!5050 = !DILocation(line: 970, column: 3, scope: !4921)
!5051 = !DILocation(line: 974, column: 3, scope: !4921)
!5052 = !DILocation(line: 977, column: 6, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !2, file: !3, line: 977, column: 6)
!5054 = !DILocation(line: 977, column: 17, scope: !5053)
!5055 = !DILocation(line: 977, column: 6, scope: !2)
!5056 = !DILocation(line: 978, column: 3, scope: !5053)
!5057 = !DILocation(line: 978, column: 8, scope: !5053)
!5058 = !DILocation(line: 978, column: 15, scope: !5053)
!5059 = !DILocation(line: 978, column: 29, scope: !5053)
!5060 = !DILocation(line: 980, column: 10, scope: !2)
!5061 = !DILocation(line: 980, column: 18, scope: !2)
!5062 = !DILocation(line: 980, column: 2, scope: !2)
!5063 = !DILocation(line: 982, column: 3, scope: !5064)
!5064 = distinct !DILexicalBlock(scope: !2, file: !3, line: 980, column: 28)
!5065 = !DILocation(line: 982, column: 8, scope: !5064)
!5066 = !DILocation(line: 982, column: 15, scope: !5064)
!5067 = !DILocation(line: 982, column: 26, scope: !5064)
!5068 = !DILocation(line: 983, column: 3, scope: !5064)
!5069 = !DILocation(line: 983, column: 8, scope: !5064)
!5070 = !DILocation(line: 983, column: 15, scope: !5064)
!5071 = !DILocation(line: 983, column: 25, scope: !5064)
!5072 = !DILocation(line: 984, column: 3, scope: !5064)
!5073 = !DILocation(line: 984, column: 8, scope: !5064)
!5074 = !DILocation(line: 984, column: 15, scope: !5064)
!5075 = !DILocation(line: 984, column: 29, scope: !5064)
!5076 = !DILocation(line: 985, column: 3, scope: !5064)
!5077 = !DILocation(line: 987, column: 11, scope: !5064)
!5078 = !DILocation(line: 987, column: 3, scope: !5064)
!5079 = !DILocation(line: 989, column: 4, scope: !5080)
!5080 = distinct !DILexicalBlock(scope: !5064, file: !3, line: 987, column: 23)
!5081 = !DILocation(line: 989, column: 9, scope: !5080)
!5082 = !DILocation(line: 989, column: 16, scope: !5080)
!5083 = !DILocation(line: 989, column: 27, scope: !5080)
!5084 = !DILocation(line: 990, column: 4, scope: !5080)
!5085 = !DILocation(line: 990, column: 9, scope: !5080)
!5086 = !DILocation(line: 990, column: 16, scope: !5080)
!5087 = !DILocation(line: 990, column: 26, scope: !5080)
!5088 = !DILocation(line: 991, column: 4, scope: !5080)
!5089 = !DILocation(line: 991, column: 9, scope: !5080)
!5090 = !DILocation(line: 991, column: 16, scope: !5080)
!5091 = !DILocation(line: 991, column: 30, scope: !5080)
!5092 = !DILocation(line: 992, column: 4, scope: !5080)
!5093 = !DILocation(line: 994, column: 4, scope: !5080)
!5094 = !DILocation(line: 994, column: 9, scope: !5080)
!5095 = !DILocation(line: 994, column: 16, scope: !5080)
!5096 = !DILocation(line: 994, column: 27, scope: !5080)
!5097 = !DILocation(line: 995, column: 4, scope: !5080)
!5098 = !DILocation(line: 995, column: 9, scope: !5080)
!5099 = !DILocation(line: 995, column: 16, scope: !5080)
!5100 = !DILocation(line: 995, column: 26, scope: !5080)
!5101 = !DILocation(line: 996, column: 4, scope: !5080)
!5102 = !DILocation(line: 996, column: 9, scope: !5080)
!5103 = !DILocation(line: 996, column: 16, scope: !5080)
!5104 = !DILocation(line: 996, column: 30, scope: !5080)
!5105 = !DILocation(line: 997, column: 4, scope: !5080)
!5106 = !DILocation(line: 999, column: 4, scope: !5080)
!5107 = !DILocation(line: 999, column: 9, scope: !5080)
!5108 = !DILocation(line: 999, column: 16, scope: !5080)
!5109 = !DILocation(line: 999, column: 27, scope: !5080)
!5110 = !DILocation(line: 1000, column: 4, scope: !5080)
!5111 = !DILocation(line: 1000, column: 9, scope: !5080)
!5112 = !DILocation(line: 1000, column: 16, scope: !5080)
!5113 = !DILocation(line: 1000, column: 26, scope: !5080)
!5114 = !DILocation(line: 1001, column: 4, scope: !5080)
!5115 = !DILocation(line: 1003, column: 4, scope: !5080)
!5116 = !DILocation(line: 1005, column: 3, scope: !5064)
!5117 = !DILocation(line: 1007, column: 7, scope: !5118)
!5118 = distinct !DILexicalBlock(scope: !5064, file: !3, line: 1007, column: 7)
!5119 = !DILocation(line: 1007, column: 18, scope: !5118)
!5120 = !DILocation(line: 1007, column: 7, scope: !5064)
!5121 = !DILocation(line: 1008, column: 4, scope: !5118)
!5122 = !DILocation(line: 1009, column: 3, scope: !5064)
!5123 = !DILocation(line: 1009, column: 8, scope: !5064)
!5124 = !DILocation(line: 1009, column: 15, scope: !5064)
!5125 = !DILocation(line: 1009, column: 26, scope: !5064)
!5126 = !DILocation(line: 1010, column: 3, scope: !5064)
!5127 = !DILocation(line: 1010, column: 8, scope: !5064)
!5128 = !DILocation(line: 1010, column: 15, scope: !5064)
!5129 = !DILocation(line: 1010, column: 25, scope: !5064)
!5130 = !DILocation(line: 1011, column: 3, scope: !5064)
!5131 = !DILocation(line: 1013, column: 11, scope: !5064)
!5132 = !DILocation(line: 1013, column: 3, scope: !5064)
!5133 = !DILocation(line: 1015, column: 4, scope: !5134)
!5134 = distinct !DILexicalBlock(scope: !5064, file: !3, line: 1013, column: 23)
!5135 = !DILocation(line: 1015, column: 9, scope: !5134)
!5136 = !DILocation(line: 1015, column: 16, scope: !5134)
!5137 = !DILocation(line: 1015, column: 27, scope: !5134)
!5138 = !DILocation(line: 1016, column: 4, scope: !5134)
!5139 = !DILocation(line: 1016, column: 9, scope: !5134)
!5140 = !DILocation(line: 1016, column: 16, scope: !5134)
!5141 = !DILocation(line: 1016, column: 26, scope: !5134)
!5142 = !DILocation(line: 1017, column: 4, scope: !5134)
!5143 = !DILocation(line: 1017, column: 9, scope: !5134)
!5144 = !DILocation(line: 1017, column: 16, scope: !5134)
!5145 = !DILocation(line: 1017, column: 30, scope: !5134)
!5146 = !DILocation(line: 1018, column: 4, scope: !5134)
!5147 = !DILocation(line: 1020, column: 4, scope: !5134)
!5148 = !DILocation(line: 1020, column: 9, scope: !5134)
!5149 = !DILocation(line: 1020, column: 16, scope: !5134)
!5150 = !DILocation(line: 1020, column: 27, scope: !5134)
!5151 = !DILocation(line: 1021, column: 4, scope: !5134)
!5152 = !DILocation(line: 1021, column: 9, scope: !5134)
!5153 = !DILocation(line: 1021, column: 16, scope: !5134)
!5154 = !DILocation(line: 1021, column: 26, scope: !5134)
!5155 = !DILocation(line: 1022, column: 4, scope: !5134)
!5156 = !DILocation(line: 1022, column: 9, scope: !5134)
!5157 = !DILocation(line: 1022, column: 16, scope: !5134)
!5158 = !DILocation(line: 1022, column: 30, scope: !5134)
!5159 = !DILocation(line: 1023, column: 4, scope: !5134)
!5160 = !DILocation(line: 1025, column: 4, scope: !5134)
!5161 = !DILocation(line: 1025, column: 9, scope: !5134)
!5162 = !DILocation(line: 1025, column: 16, scope: !5134)
!5163 = !DILocation(line: 1025, column: 27, scope: !5134)
!5164 = !DILocation(line: 1026, column: 4, scope: !5134)
!5165 = !DILocation(line: 1026, column: 9, scope: !5134)
!5166 = !DILocation(line: 1026, column: 16, scope: !5134)
!5167 = !DILocation(line: 1026, column: 26, scope: !5134)
!5168 = !DILocation(line: 1027, column: 4, scope: !5134)
!5169 = !DILocation(line: 1029, column: 4, scope: !5134)
!5170 = !DILocation(line: 1031, column: 3, scope: !5064)
!5171 = !DILocation(line: 1034, column: 11, scope: !5064)
!5172 = !DILocation(line: 1034, column: 3, scope: !5064)
!5173 = !DILocation(line: 1036, column: 4, scope: !5174)
!5174 = distinct !DILexicalBlock(scope: !5064, file: !3, line: 1034, column: 23)
!5175 = !DILocation(line: 1036, column: 9, scope: !5174)
!5176 = !DILocation(line: 1036, column: 16, scope: !5174)
!5177 = !DILocation(line: 1036, column: 27, scope: !5174)
!5178 = !DILocation(line: 1037, column: 4, scope: !5174)
!5179 = !DILocation(line: 1037, column: 9, scope: !5174)
!5180 = !DILocation(line: 1037, column: 16, scope: !5174)
!5181 = !DILocation(line: 1037, column: 26, scope: !5174)
!5182 = !DILocation(line: 1038, column: 4, scope: !5174)
!5183 = !DILocation(line: 1038, column: 9, scope: !5174)
!5184 = !DILocation(line: 1038, column: 16, scope: !5174)
!5185 = !DILocation(line: 1038, column: 30, scope: !5174)
!5186 = !DILocation(line: 1039, column: 4, scope: !5174)
!5187 = !DILocation(line: 1041, column: 4, scope: !5174)
!5188 = !DILocation(line: 1041, column: 9, scope: !5174)
!5189 = !DILocation(line: 1041, column: 16, scope: !5174)
!5190 = !DILocation(line: 1041, column: 27, scope: !5174)
!5191 = !DILocation(line: 1042, column: 4, scope: !5174)
!5192 = !DILocation(line: 1042, column: 9, scope: !5174)
!5193 = !DILocation(line: 1042, column: 16, scope: !5174)
!5194 = !DILocation(line: 1042, column: 26, scope: !5174)
!5195 = !DILocation(line: 1043, column: 4, scope: !5174)
!5196 = !DILocation(line: 1043, column: 9, scope: !5174)
!5197 = !DILocation(line: 1043, column: 16, scope: !5174)
!5198 = !DILocation(line: 1043, column: 30, scope: !5174)
!5199 = !DILocation(line: 1044, column: 4, scope: !5174)
!5200 = !DILocation(line: 1046, column: 4, scope: !5174)
!5201 = !DILocation(line: 1046, column: 9, scope: !5174)
!5202 = !DILocation(line: 1046, column: 16, scope: !5174)
!5203 = !DILocation(line: 1046, column: 27, scope: !5174)
!5204 = !DILocation(line: 1047, column: 4, scope: !5174)
!5205 = !DILocation(line: 1047, column: 9, scope: !5174)
!5206 = !DILocation(line: 1047, column: 16, scope: !5174)
!5207 = !DILocation(line: 1047, column: 26, scope: !5174)
!5208 = !DILocation(line: 1048, column: 4, scope: !5174)
!5209 = !DILocation(line: 1050, column: 4, scope: !5174)
!5210 = !DILocation(line: 1052, column: 3, scope: !5064)
!5211 = !DILocation(line: 1056, column: 6, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1056, column: 6)
!5213 = !DILocation(line: 1056, column: 11, scope: !5212)
!5214 = !DILocation(line: 1056, column: 18, scope: !5212)
!5215 = !DILocation(line: 1056, column: 6, scope: !2)
!5216 = !DILocation(line: 1057, column: 8, scope: !5217)
!5217 = distinct !DILexicalBlock(scope: !5218, file: !3, line: 1057, column: 7)
!5218 = distinct !DILexicalBlock(scope: !5212, file: !3, line: 1056, column: 32)
!5219 = !DILocation(line: 1057, column: 19, scope: !5217)
!5220 = !DILocation(line: 1057, column: 41, scope: !5217)
!5221 = !DILocation(line: 1058, column: 8, scope: !5217)
!5222 = !DILocation(line: 1058, column: 19, scope: !5217)
!5223 = !DILocation(line: 1057, column: 7, scope: !5218)
!5224 = !DILocation(line: 1059, column: 4, scope: !5217)
!5225 = !DILocation(line: 1060, column: 3, scope: !5218)
!5226 = !DILocation(line: 1060, column: 8, scope: !5218)
!5227 = !DILocation(line: 1060, column: 25, scope: !5218)
!5228 = !DILocation(line: 1061, column: 2, scope: !5218)
!5229 = !DILocation(line: 1063, column: 7, scope: !5230)
!5230 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1063, column: 6)
!5231 = !DILocation(line: 1063, column: 12, scope: !5230)
!5232 = !DILocation(line: 1063, column: 19, scope: !5230)
!5233 = !DILocation(line: 1063, column: 32, scope: !5230)
!5234 = !DILocation(line: 1064, column: 8, scope: !5230)
!5235 = !DILocation(line: 1064, column: 13, scope: !5230)
!5236 = !DILocation(line: 1064, column: 20, scope: !5230)
!5237 = !DILocation(line: 1064, column: 31, scope: !5230)
!5238 = !DILocation(line: 1064, column: 34, scope: !5230)
!5239 = !DILocation(line: 1064, column: 39, scope: !5230)
!5240 = !DILocation(line: 1064, column: 46, scope: !5230)
!5241 = !DILocation(line: 1063, column: 6, scope: !2)
!5242 = !DILocation(line: 1065, column: 3, scope: !5230)
!5243 = !DILocation(line: 1067, column: 26, scope: !2)
!5244 = !DILocation(line: 1067, column: 31, scope: !2)
!5245 = !DILocation(line: 1067, column: 38, scope: !2)
!5246 = !DILocation(line: 1067, column: 18, scope: !2)
!5247 = !DILocation(line: 1067, column: 2, scope: !2)
!5248 = !DILocation(line: 1067, column: 7, scope: !2)
!5249 = !DILocation(line: 1067, column: 16, scope: !2)
!5250 = !DILocation(line: 1068, column: 6, scope: !5251)
!5251 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1068, column: 6)
!5252 = !DILocation(line: 1068, column: 11, scope: !5251)
!5253 = !DILocation(line: 1068, column: 20, scope: !5251)
!5254 = !DILocation(line: 1068, column: 6, scope: !2)
!5255 = !DILocation(line: 1069, column: 7, scope: !5256)
!5256 = distinct !DILexicalBlock(scope: !5251, file: !3, line: 1068, column: 29)
!5257 = !DILocation(line: 1070, column: 3, scope: !5256)
!5258 = !DILocation(line: 1073, column: 6, scope: !5259)
!5259 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1073, column: 6)
!5260 = !DILocation(line: 1073, column: 11, scope: !5259)
!5261 = !DILocation(line: 1073, column: 18, scope: !5259)
!5262 = !DILocation(line: 1073, column: 6, scope: !2)
!5263 = !DILocation(line: 1074, column: 3, scope: !5264)
!5264 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 1073, column: 32)
!5265 = !DILocation(line: 1074, column: 8, scope: !5264)
!5266 = !DILocation(line: 1074, column: 22, scope: !5264)
!5267 = !DILocation(line: 1075, column: 3, scope: !5264)
!5268 = !DILocation(line: 1075, column: 8, scope: !5264)
!5269 = !DILocation(line: 1075, column: 18, scope: !5264)
!5270 = !DILocation(line: 1076, column: 2, scope: !5264)
!5271 = !DILocation(line: 1076, column: 13, scope: !5272)
!5272 = distinct !DILexicalBlock(scope: !5259, file: !3, line: 1076, column: 13)
!5273 = !DILocation(line: 1076, column: 18, scope: !5272)
!5274 = !DILocation(line: 1076, column: 25, scope: !5272)
!5275 = !DILocation(line: 1076, column: 13, scope: !5259)
!5276 = !DILocation(line: 1077, column: 3, scope: !5277)
!5277 = distinct !DILexicalBlock(scope: !5272, file: !3, line: 1076, column: 37)
!5278 = !DILocation(line: 1077, column: 8, scope: !5277)
!5279 = !DILocation(line: 1077, column: 22, scope: !5277)
!5280 = !DILocation(line: 1078, column: 3, scope: !5277)
!5281 = !DILocation(line: 1078, column: 8, scope: !5277)
!5282 = !DILocation(line: 1078, column: 18, scope: !5277)
!5283 = !DILocation(line: 1079, column: 2, scope: !5277)
!5284 = !DILabel(scope: !2, name: "skip_format_initialization", file: !3, line: 1081)
!5285 = !DILocation(line: 1081, column: 1, scope: !2)
!5286 = !DILocation(line: 1083, column: 2, scope: !2)
!5287 = !DILocation(line: 1083, column: 7, scope: !2)
!5288 = !DILocation(line: 1083, column: 20, scope: !2)
!5289 = !DILocation(line: 1084, column: 9, scope: !5290)
!5290 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1084, column: 2)
!5291 = !DILocation(line: 1084, column: 7, scope: !5290)
!5292 = !DILocation(line: 1084, column: 14, scope: !5293)
!5293 = distinct !DILexicalBlock(scope: !5290, file: !3, line: 1084, column: 2)
!5294 = !DILocation(line: 1084, column: 18, scope: !5293)
!5295 = !DILocation(line: 1084, column: 26, scope: !5293)
!5296 = !DILocation(line: 1084, column: 16, scope: !5293)
!5297 = !DILocation(line: 1084, column: 2, scope: !5290)
!5298 = !DILocalVariable(name: "range_cfg", scope: !5299, file: !3, line: 1085, type: !3790)
!5299 = distinct !DILexicalBlock(scope: !5293, file: !3, line: 1084, column: 43)
!5300 = !DILocation(line: 1085, column: 34, scope: !5299)
!5301 = !DILocation(line: 1085, column: 47, scope: !5299)
!5302 = !DILocation(line: 1085, column: 55, scope: !5299)
!5303 = !DILocation(line: 1085, column: 62, scope: !5299)
!5304 = !DILocalVariable(name: "new", scope: !5299, file: !3, line: 1086, type: !3844)
!5305 = !DILocation(line: 1086, column: 29, scope: !5299)
!5306 = !DILocation(line: 1089, column: 7, scope: !5307)
!5307 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 1089, column: 7)
!5308 = !DILocation(line: 1089, column: 18, scope: !5307)
!5309 = !DILocation(line: 1089, column: 30, scope: !5307)
!5310 = !DILocation(line: 1089, column: 41, scope: !5307)
!5311 = !DILocation(line: 1089, column: 28, scope: !5307)
!5312 = !DILocation(line: 1089, column: 7, scope: !5299)
!5313 = !DILocation(line: 1090, column: 4, scope: !5314)
!5314 = distinct !DILexicalBlock(scope: !5307, file: !3, line: 1089, column: 52)
!5315 = !DILocation(line: 1092, column: 4, scope: !5314)
!5316 = !DILocation(line: 1095, column: 7, scope: !5317)
!5317 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 1095, column: 7)
!5318 = !DILocation(line: 1095, column: 18, scope: !5317)
!5319 = !DILocation(line: 1095, column: 30, scope: !5317)
!5320 = !DILocation(line: 1095, column: 35, scope: !5317)
!5321 = !DILocation(line: 1095, column: 28, scope: !5317)
!5322 = !DILocation(line: 1095, column: 7, scope: !5299)
!5323 = !DILocation(line: 1096, column: 4, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5317, file: !3, line: 1095, column: 49)
!5325 = !DILocation(line: 1098, column: 4, scope: !5324)
!5326 = !DILocation(line: 1101, column: 7, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 1101, column: 7)
!5328 = !DILocation(line: 1101, column: 18, scope: !5327)
!5329 = !DILocation(line: 1101, column: 33, scope: !5327)
!5330 = !DILocation(line: 1101, column: 38, scope: !5327)
!5331 = !DILocation(line: 1101, column: 31, scope: !5327)
!5332 = !DILocation(line: 1101, column: 7, scope: !5299)
!5333 = !DILocation(line: 1102, column: 4, scope: !5334)
!5334 = distinct !DILexicalBlock(scope: !5327, file: !3, line: 1101, column: 52)
!5335 = !DILocation(line: 1104, column: 4, scope: !5334)
!5336 = !DILocation(line: 1107, column: 7, scope: !5337)
!5337 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 1107, column: 7)
!5338 = !DILocation(line: 1107, column: 18, scope: !5337)
!5339 = !DILocation(line: 1107, column: 29, scope: !5337)
!5340 = !DILocation(line: 1107, column: 7, scope: !5299)
!5341 = !DILocation(line: 1108, column: 4, scope: !5342)
!5342 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 1107, column: 35)
!5343 = !DILocation(line: 1110, column: 4, scope: !5342)
!5344 = !DILocation(line: 1115, column: 10, scope: !5345)
!5345 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 1115, column: 3)
!5346 = !DILocation(line: 1115, column: 8, scope: !5345)
!5347 = !DILocation(line: 1115, column: 15, scope: !5348)
!5348 = distinct !DILexicalBlock(scope: !5345, file: !3, line: 1115, column: 3)
!5349 = !DILocation(line: 1115, column: 19, scope: !5348)
!5350 = !DILocation(line: 1115, column: 27, scope: !5348)
!5351 = !DILocation(line: 1115, column: 17, scope: !5348)
!5352 = !DILocation(line: 1115, column: 3, scope: !5345)
!5353 = !DILocalVariable(name: "sel_reg", scope: !5354, file: !3, line: 1116, type: !70)
!5354 = distinct !DILexicalBlock(scope: !5348, file: !3, line: 1115, column: 44)
!5355 = !DILocation(line: 1116, column: 13, scope: !5354)
!5356 = !DILocation(line: 1116, column: 23, scope: !5354)
!5357 = !DILocation(line: 1116, column: 31, scope: !5354)
!5358 = !DILocation(line: 1116, column: 38, scope: !5354)
!5359 = !DILocation(line: 1116, column: 41, scope: !5354)
!5360 = !DILocalVariable(name: "win_min", scope: !5354, file: !3, line: 1117, type: !70)
!5361 = !DILocation(line: 1117, column: 13, scope: !5354)
!5362 = !DILocation(line: 1117, column: 23, scope: !5354)
!5363 = !DILocation(line: 1117, column: 31, scope: !5354)
!5364 = !DILocation(line: 1117, column: 38, scope: !5354)
!5365 = !DILocation(line: 1117, column: 41, scope: !5354)
!5366 = !DILocalVariable(name: "win_max", scope: !5354, file: !3, line: 1118, type: !70)
!5367 = !DILocation(line: 1118, column: 13, scope: !5354)
!5368 = !DILocation(line: 1118, column: 23, scope: !5354)
!5369 = !DILocation(line: 1119, column: 9, scope: !5354)
!5370 = !DILocation(line: 1119, column: 17, scope: !5354)
!5371 = !DILocation(line: 1119, column: 24, scope: !5354)
!5372 = !DILocation(line: 1119, column: 27, scope: !5354)
!5373 = !DILocation(line: 1118, column: 31, scope: !5354)
!5374 = !DILocation(line: 1119, column: 38, scope: !5354)
!5375 = !DILocation(line: 1122, column: 8, scope: !5376)
!5376 = distinct !DILexicalBlock(scope: !5354, file: !3, line: 1122, column: 8)
!5377 = !DILocation(line: 1122, column: 13, scope: !5376)
!5378 = !DILocation(line: 1122, column: 10, scope: !5376)
!5379 = !DILocation(line: 1122, column: 8, scope: !5354)
!5380 = !DILocation(line: 1123, column: 5, scope: !5376)
!5381 = !DILocation(line: 1125, column: 8, scope: !5382)
!5382 = distinct !DILexicalBlock(scope: !5354, file: !3, line: 1125, column: 8)
!5383 = !DILocation(line: 1125, column: 19, scope: !5382)
!5384 = !DILocation(line: 1125, column: 32, scope: !5382)
!5385 = !DILocation(line: 1125, column: 29, scope: !5382)
!5386 = !DILocation(line: 1125, column: 40, scope: !5382)
!5387 = !DILocation(line: 1126, column: 8, scope: !5382)
!5388 = !DILocation(line: 1126, column: 19, scope: !5382)
!5389 = !DILocation(line: 1126, column: 30, scope: !5382)
!5390 = !DILocation(line: 1126, column: 16, scope: !5382)
!5391 = !DILocation(line: 1125, column: 8, scope: !5354)
!5392 = !DILocation(line: 1127, column: 5, scope: !5393)
!5393 = distinct !DILexicalBlock(scope: !5382, file: !3, line: 1126, column: 41)
!5394 = !DILocation(line: 1130, column: 5, scope: !5393)
!5395 = !DILocation(line: 1133, column: 10, scope: !5396)
!5396 = distinct !DILexicalBlock(scope: !5354, file: !3, line: 1133, column: 8)
!5397 = !DILocation(line: 1133, column: 20, scope: !5396)
!5398 = !DILocation(line: 1133, column: 31, scope: !5396)
!5399 = !DILocation(line: 1133, column: 18, scope: !5396)
!5400 = !DILocation(line: 1133, column: 41, scope: !5396)
!5401 = !DILocation(line: 1134, column: 10, scope: !5396)
!5402 = !DILocation(line: 1134, column: 20, scope: !5396)
!5403 = !DILocation(line: 1134, column: 31, scope: !5396)
!5404 = !DILocation(line: 1134, column: 18, scope: !5396)
!5405 = !DILocation(line: 1133, column: 8, scope: !5354)
!5406 = !DILocation(line: 1135, column: 5, scope: !5407)
!5407 = distinct !DILexicalBlock(scope: !5396, file: !3, line: 1134, column: 43)
!5408 = !DILocation(line: 1138, column: 5, scope: !5407)
!5409 = !DILocation(line: 1140, column: 3, scope: !5354)
!5410 = !DILocation(line: 1115, column: 40, scope: !5348)
!5411 = !DILocation(line: 1115, column: 3, scope: !5348)
!5412 = distinct !{!5412, !5352, !5413}
!5413 = !DILocation(line: 1140, column: 3, scope: !5345)
!5414 = !DILocation(line: 1142, column: 9, scope: !5299)
!5415 = !DILocation(line: 1142, column: 7, scope: !5299)
!5416 = !DILocation(line: 1143, column: 7, scope: !5417)
!5417 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 1143, column: 7)
!5418 = !DILocation(line: 1143, column: 11, scope: !5417)
!5419 = !DILocation(line: 1143, column: 7, scope: !5299)
!5420 = !DILocation(line: 1144, column: 8, scope: !5421)
!5421 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 1143, column: 20)
!5422 = !DILocation(line: 1145, column: 4, scope: !5421)
!5423 = !DILocation(line: 1148, column: 14, scope: !5299)
!5424 = !DILocation(line: 1148, column: 3, scope: !5299)
!5425 = !DILocation(line: 1148, column: 8, scope: !5299)
!5426 = !DILocation(line: 1148, column: 12, scope: !5299)
!5427 = !DILocation(line: 1149, column: 15, scope: !5299)
!5428 = !DILocation(line: 1149, column: 26, scope: !5299)
!5429 = !DILocation(line: 1149, column: 3, scope: !5299)
!5430 = !DILocation(line: 1149, column: 8, scope: !5299)
!5431 = !DILocation(line: 1149, column: 13, scope: !5299)
!5432 = !DILocation(line: 1150, column: 20, scope: !5299)
!5433 = !DILocation(line: 1150, column: 31, scope: !5299)
!5434 = !DILocation(line: 1150, column: 3, scope: !5299)
!5435 = !DILocation(line: 1150, column: 8, scope: !5299)
!5436 = !DILocation(line: 1150, column: 18, scope: !5299)
!5437 = !DILocation(line: 1151, column: 20, scope: !5299)
!5438 = !DILocation(line: 1151, column: 31, scope: !5299)
!5439 = !DILocation(line: 1151, column: 3, scope: !5299)
!5440 = !DILocation(line: 1151, column: 8, scope: !5299)
!5441 = !DILocation(line: 1151, column: 18, scope: !5299)
!5442 = !DILocation(line: 1152, column: 23, scope: !5299)
!5443 = !DILocation(line: 1152, column: 34, scope: !5299)
!5444 = !DILocation(line: 1152, column: 3, scope: !5299)
!5445 = !DILocation(line: 1152, column: 8, scope: !5299)
!5446 = !DILocation(line: 1152, column: 21, scope: !5299)
!5447 = !DILocation(line: 1153, column: 24, scope: !5299)
!5448 = !DILocation(line: 1153, column: 35, scope: !5299)
!5449 = !DILocation(line: 1153, column: 3, scope: !5299)
!5450 = !DILocation(line: 1153, column: 8, scope: !5299)
!5451 = !DILocation(line: 1153, column: 22, scope: !5299)
!5452 = !DILocation(line: 1154, column: 25, scope: !5299)
!5453 = !DILocation(line: 1154, column: 36, scope: !5299)
!5454 = !DILocation(line: 1154, column: 3, scope: !5299)
!5455 = !DILocation(line: 1154, column: 8, scope: !5299)
!5456 = !DILocation(line: 1154, column: 23, scope: !5299)
!5457 = !DILocation(line: 1155, column: 23, scope: !5299)
!5458 = !DILocation(line: 1155, column: 34, scope: !5299)
!5459 = !DILocation(line: 1155, column: 3, scope: !5299)
!5460 = !DILocation(line: 1155, column: 8, scope: !5299)
!5461 = !DILocation(line: 1155, column: 21, scope: !5299)
!5462 = !DILocation(line: 1156, column: 21, scope: !5299)
!5463 = !DILocation(line: 1156, column: 32, scope: !5299)
!5464 = !DILocation(line: 1156, column: 3, scope: !5299)
!5465 = !DILocation(line: 1156, column: 8, scope: !5299)
!5466 = !DILocation(line: 1156, column: 19, scope: !5299)
!5467 = !DILocation(line: 1158, column: 26, scope: !5468)
!5468 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 1158, column: 7)
!5469 = !DILocation(line: 1158, column: 31, scope: !5468)
!5470 = !DILocation(line: 1158, column: 8, scope: !5468)
!5471 = !DILocation(line: 1158, column: 7, scope: !5299)
!5472 = !DILocation(line: 1159, column: 4, scope: !5473)
!5473 = distinct !DILexicalBlock(scope: !5468, file: !3, line: 1158, column: 37)
!5474 = !DILocation(line: 1160, column: 10, scope: !5473)
!5475 = !DILocation(line: 1160, column: 4, scope: !5473)
!5476 = !DILocation(line: 1161, column: 4, scope: !5473)
!5477 = !DILocation(line: 1164, column: 7, scope: !5478)
!5478 = distinct !DILexicalBlock(scope: !5299, file: !3, line: 1164, column: 7)
!5479 = !DILocation(line: 1164, column: 12, scope: !5478)
!5480 = !DILocation(line: 1164, column: 30, scope: !5478)
!5481 = !DILocation(line: 1164, column: 7, scope: !5299)
!5482 = !DILocation(line: 1166, column: 13, scope: !5483)
!5483 = distinct !DILexicalBlock(scope: !5478, file: !3, line: 1164, column: 39)
!5484 = !DILocation(line: 1166, column: 18, scope: !5483)
!5485 = !DILocation(line: 1166, column: 25, scope: !5483)
!5486 = !DILocation(line: 1166, column: 5, scope: !5483)
!5487 = !DILocation(line: 1165, column: 4, scope: !5483)
!5488 = !DILocation(line: 1165, column: 9, scope: !5483)
!5489 = !DILocation(line: 1165, column: 27, scope: !5483)
!5490 = !DILocation(line: 1167, column: 8, scope: !5491)
!5491 = distinct !DILexicalBlock(scope: !5483, file: !3, line: 1167, column: 8)
!5492 = !DILocation(line: 1167, column: 13, scope: !5491)
!5493 = !DILocation(line: 1167, column: 31, scope: !5491)
!5494 = !DILocation(line: 1167, column: 8, scope: !5483)
!5495 = !DILocation(line: 1168, column: 9, scope: !5496)
!5496 = distinct !DILexicalBlock(scope: !5491, file: !3, line: 1167, column: 40)
!5497 = !DILocation(line: 1169, column: 5, scope: !5496)
!5498 = !DILocation(line: 1171, column: 3, scope: !5483)
!5499 = !DILocation(line: 1172, column: 2, scope: !5299)
!5500 = !DILocation(line: 1084, column: 39, scope: !5293)
!5501 = !DILocation(line: 1084, column: 2, scope: !5293)
!5502 = distinct !{!5502, !5297, !5503}
!5503 = !DILocation(line: 1172, column: 2, scope: !5290)
!5504 = !DILocation(line: 1174, column: 22, scope: !2)
!5505 = !DILocation(line: 1174, column: 27, scope: !2)
!5506 = !DILocation(line: 1174, column: 8, scope: !2)
!5507 = !DILocation(line: 1174, column: 6, scope: !2)
!5508 = !DILocation(line: 1175, column: 6, scope: !5509)
!5509 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1175, column: 6)
!5510 = !DILocation(line: 1175, column: 10, scope: !5509)
!5511 = !DILocation(line: 1175, column: 6, scope: !2)
!5512 = !DILocation(line: 1176, column: 3, scope: !5509)
!5513 = !DILocation(line: 1178, column: 6, scope: !5514)
!5514 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1178, column: 6)
!5515 = !DILocation(line: 1178, column: 6, scope: !2)
!5516 = !DILocation(line: 1179, column: 27, scope: !5517)
!5517 = distinct !DILexicalBlock(scope: !5514, file: !3, line: 1178, column: 11)
!5518 = !DILocation(line: 1179, column: 32, scope: !5517)
!5519 = !DILocation(line: 1179, column: 37, scope: !5517)
!5520 = !DILocation(line: 1179, column: 9, scope: !5517)
!5521 = !DILocation(line: 1179, column: 7, scope: !5517)
!5522 = !DILocation(line: 1180, column: 7, scope: !5523)
!5523 = distinct !DILexicalBlock(scope: !5517, file: !3, line: 1180, column: 7)
!5524 = !DILocation(line: 1180, column: 11, scope: !5523)
!5525 = !DILocation(line: 1180, column: 7, scope: !5517)
!5526 = !DILocation(line: 1181, column: 4, scope: !5523)
!5527 = !DILocation(line: 1182, column: 2, scope: !5517)
!5528 = !DILocation(line: 1183, column: 23, scope: !5529)
!5529 = distinct !DILexicalBlock(scope: !5514, file: !3, line: 1182, column: 9)
!5530 = !DILocation(line: 1183, column: 3, scope: !5529)
!5531 = !DILocation(line: 1186, column: 9, scope: !2)
!5532 = !DILocation(line: 1186, column: 2, scope: !2)
!5533 = !DILabel(scope: !2, name: "err_regcache", file: !3, line: 1188)
!5534 = !DILocation(line: 1188, column: 1, scope: !2)
!5535 = !DILocation(line: 1189, column: 16, scope: !2)
!5536 = !DILocation(line: 1189, column: 2, scope: !2)
!5537 = !DILabel(scope: !2, name: "err_range", file: !3, line: 1190)
!5538 = !DILocation(line: 1190, column: 1, scope: !2)
!5539 = !DILocation(line: 1191, column: 20, scope: !2)
!5540 = !DILocation(line: 1191, column: 2, scope: !2)
!5541 = !DILocation(line: 1192, column: 8, scope: !2)
!5542 = !DILocation(line: 1192, column: 13, scope: !2)
!5543 = !DILocation(line: 1192, column: 2, scope: !2)
!5544 = !DILabel(scope: !2, name: "err_hwlock", file: !3, line: 1193)
!5545 = !DILocation(line: 1193, column: 1, scope: !2)
!5546 = !DILocation(line: 1194, column: 6, scope: !5547)
!5547 = distinct !DILexicalBlock(scope: !2, file: !3, line: 1194, column: 6)
!5548 = !DILocation(line: 1194, column: 11, scope: !5547)
!5549 = !DILocation(line: 1194, column: 6, scope: !2)
!5550 = !DILocation(line: 1195, column: 20, scope: !5547)
!5551 = !DILocation(line: 1195, column: 25, scope: !5547)
!5552 = !DILocation(line: 1195, column: 3, scope: !5547)
!5553 = !DILabel(scope: !2, name: "err_name", file: !3, line: 1196)
!5554 = !DILocation(line: 1196, column: 1, scope: !2)
!5555 = !DILocation(line: 1197, column: 14, scope: !2)
!5556 = !DILocation(line: 1197, column: 19, scope: !2)
!5557 = !DILocation(line: 1197, column: 2, scope: !2)
!5558 = !DILabel(scope: !2, name: "err_map", file: !3, line: 1198)
!5559 = !DILocation(line: 1198, column: 1, scope: !2)
!5560 = !DILocation(line: 1199, column: 8, scope: !2)
!5561 = !DILocation(line: 1199, column: 2, scope: !2)
!5562 = !DILabel(scope: !2, name: "err", file: !3, line: 1200)
!5563 = !DILocation(line: 1200, column: 1, scope: !2)
!5564 = !DILocation(line: 1201, column: 17, scope: !2)
!5565 = !DILocation(line: 1201, column: 9, scope: !2)
!5566 = !DILocation(line: 1201, column: 2, scope: !2)
!5567 = !DILocation(line: 1202, column: 1, scope: !2)
!5568 = distinct !DISubprogram(name: "kzalloc", scope: !3816, file: !3816, line: 662, type: !5569, scopeLine: 663, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5569 = !DISubroutineType(types: !5570)
!5570 = !{!64, !167, !69}
!5571 = !DILocalVariable(name: "s", arg: 1, scope: !5572, file: !3816, line: 445, type: !777)
!5572 = distinct !DISubprogram(name: "kmem_cache_alloc_trace", scope: !3816, file: !3816, line: 445, type: !5573, scopeLine: 447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5573 = !DISubroutineType(types: !5574)
!5574 = !{!64, !777, !69, !167}
!5575 = !DILocation(line: 445, column: 72, scope: !5572, inlinedAt: !5576)
!5576 = distinct !DILocation(line: 552, column: 10, scope: !5577, inlinedAt: !5580)
!5577 = distinct !DILexicalBlock(scope: !5578, file: !3816, line: 540, column: 34)
!5578 = distinct !DILexicalBlock(scope: !5579, file: !3816, line: 540, column: 6)
!5579 = distinct !DISubprogram(name: "kmalloc", scope: !3816, file: !3816, line: 538, type: !5569, scopeLine: 539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5580 = distinct !DILocation(line: 664, column: 9, scope: !5568)
!5581 = !DILocalVariable(name: "flags", arg: 2, scope: !5572, file: !3816, line: 446, type: !69)
!5582 = !DILocation(line: 446, column: 9, scope: !5572, inlinedAt: !5576)
!5583 = !DILocalVariable(name: "size", arg: 3, scope: !5572, file: !3816, line: 446, type: !167)
!5584 = !DILocation(line: 446, column: 23, scope: !5572, inlinedAt: !5576)
!5585 = !DILocalVariable(name: "ret", scope: !5572, file: !3816, line: 448, type: !64)
!5586 = !DILocation(line: 448, column: 8, scope: !5572, inlinedAt: !5576)
!5587 = !DILocalVariable(name: "flags", arg: 1, scope: !5588, file: !3816, line: 318, type: !69)
!5588 = distinct !DISubprogram(name: "kmalloc_type", scope: !3816, file: !3816, line: 318, type: !5589, scopeLine: 319, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5589 = !DISubroutineType(types: !5590)
!5590 = !{!3815, !69}
!5591 = !DILocation(line: 318, column: 67, scope: !5588, inlinedAt: !5592)
!5592 = distinct !DILocation(line: 553, column: 20, scope: !5577, inlinedAt: !5580)
!5593 = !DILocalVariable(name: "size", arg: 1, scope: !5594, file: !3816, line: 346, type: !167)
!5594 = distinct !DISubprogram(name: "kmalloc_index", scope: !3816, file: !3816, line: 346, type: !5595, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5595 = !DISubroutineType(types: !5596)
!5596 = !{!70, !167}
!5597 = !DILocation(line: 346, column: 58, scope: !5594, inlinedAt: !5598)
!5598 = distinct !DILocation(line: 547, column: 11, scope: !5577, inlinedAt: !5580)
!5599 = !DILocalVariable(name: "size", arg: 1, scope: !5600, file: !3816, line: 472, type: !167)
!5600 = distinct !DISubprogram(name: "kmalloc_order_trace", scope: !3816, file: !3816, line: 472, type: !5601, scopeLine: 473, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5601 = !DISubroutineType(types: !5602)
!5602 = !{!64, !167, !69, !70}
!5603 = !DILocation(line: 472, column: 28, scope: !5600, inlinedAt: !5604)
!5604 = distinct !DILocation(line: 481, column: 9, scope: !5605, inlinedAt: !5606)
!5605 = distinct !DISubprogram(name: "kmalloc_large", scope: !3816, file: !3816, line: 478, type: !5569, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5606 = distinct !DILocation(line: 545, column: 11, scope: !5607, inlinedAt: !5580)
!5607 = distinct !DILexicalBlock(scope: !5577, file: !3816, line: 544, column: 7)
!5608 = !DILocalVariable(name: "flags", arg: 2, scope: !5600, file: !3816, line: 472, type: !69)
!5609 = !DILocation(line: 472, column: 40, scope: !5600, inlinedAt: !5604)
!5610 = !DILocalVariable(name: "order", arg: 3, scope: !5600, file: !3816, line: 472, type: !70)
!5611 = !DILocation(line: 472, column: 60, scope: !5600, inlinedAt: !5604)
!5612 = !DILocalVariable(name: "size", arg: 1, scope: !5605, file: !3816, line: 478, type: !167)
!5613 = !DILocation(line: 478, column: 51, scope: !5605, inlinedAt: !5606)
!5614 = !DILocalVariable(name: "flags", arg: 2, scope: !5605, file: !3816, line: 478, type: !69)
!5615 = !DILocation(line: 478, column: 63, scope: !5605, inlinedAt: !5606)
!5616 = !DILocalVariable(name: "order", scope: !5605, file: !3816, line: 480, type: !70)
!5617 = !DILocation(line: 480, column: 15, scope: !5605, inlinedAt: !5606)
!5618 = !DILocalVariable(name: "size", arg: 1, scope: !5579, file: !3816, line: 538, type: !167)
!5619 = !DILocation(line: 538, column: 45, scope: !5579, inlinedAt: !5580)
!5620 = !DILocalVariable(name: "flags", arg: 2, scope: !5579, file: !3816, line: 538, type: !69)
!5621 = !DILocation(line: 538, column: 57, scope: !5579, inlinedAt: !5580)
!5622 = !DILocalVariable(name: "index", scope: !5577, file: !3816, line: 542, type: !70)
!5623 = !DILocation(line: 542, column: 16, scope: !5577, inlinedAt: !5580)
!5624 = !DILocalVariable(name: "size", arg: 1, scope: !5568, file: !3816, line: 662, type: !167)
!5625 = !DILocation(line: 662, column: 36, scope: !5568)
!5626 = !DILocalVariable(name: "flags", arg: 2, scope: !5568, file: !3816, line: 662, type: !69)
!5627 = !DILocation(line: 662, column: 48, scope: !5568)
!5628 = !DILocation(line: 664, column: 17, scope: !5568)
!5629 = !DILocation(line: 664, column: 23, scope: !5568)
!5630 = !DILocation(line: 664, column: 29, scope: !5568)
!5631 = !DILocation(line: 540, column: 27, scope: !5578, inlinedAt: !5580)
!5632 = !DILocation(line: 540, column: 6, scope: !5578, inlinedAt: !5580)
!5633 = !DILocation(line: 540, column: 6, scope: !5579, inlinedAt: !5580)
!5634 = !DILocation(line: 544, column: 7, scope: !5607, inlinedAt: !5580)
!5635 = !DILocation(line: 544, column: 12, scope: !5607, inlinedAt: !5580)
!5636 = !DILocation(line: 544, column: 7, scope: !5577, inlinedAt: !5580)
!5637 = !DILocation(line: 545, column: 25, scope: !5607, inlinedAt: !5580)
!5638 = !DILocation(line: 545, column: 31, scope: !5607, inlinedAt: !5580)
!5639 = !DILocation(line: 480, column: 33, scope: !5605, inlinedAt: !5606)
!5640 = !DILocation(line: 480, column: 23, scope: !5605, inlinedAt: !5606)
!5641 = !DILocation(line: 481, column: 29, scope: !5605, inlinedAt: !5606)
!5642 = !DILocation(line: 481, column: 35, scope: !5605, inlinedAt: !5606)
!5643 = !DILocation(line: 481, column: 42, scope: !5605, inlinedAt: !5606)
!5644 = !DILocation(line: 474, column: 23, scope: !5600, inlinedAt: !5604)
!5645 = !DILocation(line: 474, column: 29, scope: !5600, inlinedAt: !5604)
!5646 = !DILocation(line: 474, column: 36, scope: !5600, inlinedAt: !5604)
!5647 = !DILocation(line: 474, column: 9, scope: !5600, inlinedAt: !5604)
!5648 = !DILocation(line: 545, column: 4, scope: !5607, inlinedAt: !5580)
!5649 = !DILocation(line: 547, column: 25, scope: !5577, inlinedAt: !5580)
!5650 = !DILocation(line: 348, column: 7, scope: !5651, inlinedAt: !5598)
!5651 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 348, column: 6)
!5652 = !DILocation(line: 348, column: 6, scope: !5594, inlinedAt: !5598)
!5653 = !DILocation(line: 349, column: 3, scope: !5651, inlinedAt: !5598)
!5654 = !DILocation(line: 351, column: 6, scope: !5655, inlinedAt: !5598)
!5655 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 351, column: 6)
!5656 = !DILocation(line: 351, column: 11, scope: !5655, inlinedAt: !5598)
!5657 = !DILocation(line: 351, column: 6, scope: !5594, inlinedAt: !5598)
!5658 = !DILocation(line: 352, column: 3, scope: !5655, inlinedAt: !5598)
!5659 = !DILocation(line: 354, column: 32, scope: !5660, inlinedAt: !5598)
!5660 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 354, column: 6)
!5661 = !DILocation(line: 354, column: 37, scope: !5660, inlinedAt: !5598)
!5662 = !DILocation(line: 354, column: 42, scope: !5660, inlinedAt: !5598)
!5663 = !DILocation(line: 354, column: 45, scope: !5660, inlinedAt: !5598)
!5664 = !DILocation(line: 354, column: 50, scope: !5660, inlinedAt: !5598)
!5665 = !DILocation(line: 354, column: 6, scope: !5594, inlinedAt: !5598)
!5666 = !DILocation(line: 355, column: 3, scope: !5660, inlinedAt: !5598)
!5667 = !DILocation(line: 356, column: 32, scope: !5668, inlinedAt: !5598)
!5668 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 356, column: 6)
!5669 = !DILocation(line: 356, column: 37, scope: !5668, inlinedAt: !5598)
!5670 = !DILocation(line: 356, column: 43, scope: !5668, inlinedAt: !5598)
!5671 = !DILocation(line: 356, column: 46, scope: !5668, inlinedAt: !5598)
!5672 = !DILocation(line: 356, column: 51, scope: !5668, inlinedAt: !5598)
!5673 = !DILocation(line: 356, column: 6, scope: !5594, inlinedAt: !5598)
!5674 = !DILocation(line: 357, column: 3, scope: !5668, inlinedAt: !5598)
!5675 = !DILocation(line: 358, column: 6, scope: !5676, inlinedAt: !5598)
!5676 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 358, column: 6)
!5677 = !DILocation(line: 358, column: 11, scope: !5676, inlinedAt: !5598)
!5678 = !DILocation(line: 358, column: 6, scope: !5594, inlinedAt: !5598)
!5679 = !DILocation(line: 358, column: 26, scope: !5676, inlinedAt: !5598)
!5680 = !DILocation(line: 359, column: 6, scope: !5681, inlinedAt: !5598)
!5681 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 359, column: 6)
!5682 = !DILocation(line: 359, column: 11, scope: !5681, inlinedAt: !5598)
!5683 = !DILocation(line: 359, column: 6, scope: !5594, inlinedAt: !5598)
!5684 = !DILocation(line: 359, column: 26, scope: !5681, inlinedAt: !5598)
!5685 = !DILocation(line: 360, column: 6, scope: !5686, inlinedAt: !5598)
!5686 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 360, column: 6)
!5687 = !DILocation(line: 360, column: 11, scope: !5686, inlinedAt: !5598)
!5688 = !DILocation(line: 360, column: 6, scope: !5594, inlinedAt: !5598)
!5689 = !DILocation(line: 360, column: 26, scope: !5686, inlinedAt: !5598)
!5690 = !DILocation(line: 361, column: 6, scope: !5691, inlinedAt: !5598)
!5691 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 361, column: 6)
!5692 = !DILocation(line: 361, column: 11, scope: !5691, inlinedAt: !5598)
!5693 = !DILocation(line: 361, column: 6, scope: !5594, inlinedAt: !5598)
!5694 = !DILocation(line: 361, column: 26, scope: !5691, inlinedAt: !5598)
!5695 = !DILocation(line: 362, column: 6, scope: !5696, inlinedAt: !5598)
!5696 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 362, column: 6)
!5697 = !DILocation(line: 362, column: 11, scope: !5696, inlinedAt: !5598)
!5698 = !DILocation(line: 362, column: 6, scope: !5594, inlinedAt: !5598)
!5699 = !DILocation(line: 362, column: 26, scope: !5696, inlinedAt: !5598)
!5700 = !DILocation(line: 363, column: 6, scope: !5701, inlinedAt: !5598)
!5701 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 363, column: 6)
!5702 = !DILocation(line: 363, column: 11, scope: !5701, inlinedAt: !5598)
!5703 = !DILocation(line: 363, column: 6, scope: !5594, inlinedAt: !5598)
!5704 = !DILocation(line: 363, column: 26, scope: !5701, inlinedAt: !5598)
!5705 = !DILocation(line: 364, column: 6, scope: !5706, inlinedAt: !5598)
!5706 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 364, column: 6)
!5707 = !DILocation(line: 364, column: 11, scope: !5706, inlinedAt: !5598)
!5708 = !DILocation(line: 364, column: 6, scope: !5594, inlinedAt: !5598)
!5709 = !DILocation(line: 364, column: 26, scope: !5706, inlinedAt: !5598)
!5710 = !DILocation(line: 365, column: 6, scope: !5711, inlinedAt: !5598)
!5711 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 365, column: 6)
!5712 = !DILocation(line: 365, column: 11, scope: !5711, inlinedAt: !5598)
!5713 = !DILocation(line: 365, column: 6, scope: !5594, inlinedAt: !5598)
!5714 = !DILocation(line: 365, column: 26, scope: !5711, inlinedAt: !5598)
!5715 = !DILocation(line: 366, column: 6, scope: !5716, inlinedAt: !5598)
!5716 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 366, column: 6)
!5717 = !DILocation(line: 366, column: 11, scope: !5716, inlinedAt: !5598)
!5718 = !DILocation(line: 366, column: 6, scope: !5594, inlinedAt: !5598)
!5719 = !DILocation(line: 366, column: 26, scope: !5716, inlinedAt: !5598)
!5720 = !DILocation(line: 367, column: 6, scope: !5721, inlinedAt: !5598)
!5721 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 367, column: 6)
!5722 = !DILocation(line: 367, column: 11, scope: !5721, inlinedAt: !5598)
!5723 = !DILocation(line: 367, column: 6, scope: !5594, inlinedAt: !5598)
!5724 = !DILocation(line: 367, column: 26, scope: !5721, inlinedAt: !5598)
!5725 = !DILocation(line: 368, column: 6, scope: !5726, inlinedAt: !5598)
!5726 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 368, column: 6)
!5727 = !DILocation(line: 368, column: 11, scope: !5726, inlinedAt: !5598)
!5728 = !DILocation(line: 368, column: 6, scope: !5594, inlinedAt: !5598)
!5729 = !DILocation(line: 368, column: 26, scope: !5726, inlinedAt: !5598)
!5730 = !DILocation(line: 369, column: 6, scope: !5731, inlinedAt: !5598)
!5731 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 369, column: 6)
!5732 = !DILocation(line: 369, column: 11, scope: !5731, inlinedAt: !5598)
!5733 = !DILocation(line: 369, column: 6, scope: !5594, inlinedAt: !5598)
!5734 = !DILocation(line: 369, column: 26, scope: !5731, inlinedAt: !5598)
!5735 = !DILocation(line: 370, column: 6, scope: !5736, inlinedAt: !5598)
!5736 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 370, column: 6)
!5737 = !DILocation(line: 370, column: 11, scope: !5736, inlinedAt: !5598)
!5738 = !DILocation(line: 370, column: 6, scope: !5594, inlinedAt: !5598)
!5739 = !DILocation(line: 370, column: 26, scope: !5736, inlinedAt: !5598)
!5740 = !DILocation(line: 371, column: 6, scope: !5741, inlinedAt: !5598)
!5741 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 371, column: 6)
!5742 = !DILocation(line: 371, column: 11, scope: !5741, inlinedAt: !5598)
!5743 = !DILocation(line: 371, column: 6, scope: !5594, inlinedAt: !5598)
!5744 = !DILocation(line: 371, column: 26, scope: !5741, inlinedAt: !5598)
!5745 = !DILocation(line: 372, column: 6, scope: !5746, inlinedAt: !5598)
!5746 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 372, column: 6)
!5747 = !DILocation(line: 372, column: 11, scope: !5746, inlinedAt: !5598)
!5748 = !DILocation(line: 372, column: 6, scope: !5594, inlinedAt: !5598)
!5749 = !DILocation(line: 372, column: 26, scope: !5746, inlinedAt: !5598)
!5750 = !DILocation(line: 373, column: 6, scope: !5751, inlinedAt: !5598)
!5751 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 373, column: 6)
!5752 = !DILocation(line: 373, column: 11, scope: !5751, inlinedAt: !5598)
!5753 = !DILocation(line: 373, column: 6, scope: !5594, inlinedAt: !5598)
!5754 = !DILocation(line: 373, column: 26, scope: !5751, inlinedAt: !5598)
!5755 = !DILocation(line: 374, column: 6, scope: !5756, inlinedAt: !5598)
!5756 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 374, column: 6)
!5757 = !DILocation(line: 374, column: 11, scope: !5756, inlinedAt: !5598)
!5758 = !DILocation(line: 374, column: 6, scope: !5594, inlinedAt: !5598)
!5759 = !DILocation(line: 374, column: 26, scope: !5756, inlinedAt: !5598)
!5760 = !DILocation(line: 375, column: 6, scope: !5761, inlinedAt: !5598)
!5761 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 375, column: 6)
!5762 = !DILocation(line: 375, column: 11, scope: !5761, inlinedAt: !5598)
!5763 = !DILocation(line: 375, column: 6, scope: !5594, inlinedAt: !5598)
!5764 = !DILocation(line: 375, column: 27, scope: !5761, inlinedAt: !5598)
!5765 = !DILocation(line: 376, column: 6, scope: !5766, inlinedAt: !5598)
!5766 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 376, column: 6)
!5767 = !DILocation(line: 376, column: 11, scope: !5766, inlinedAt: !5598)
!5768 = !DILocation(line: 376, column: 6, scope: !5594, inlinedAt: !5598)
!5769 = !DILocation(line: 376, column: 32, scope: !5766, inlinedAt: !5598)
!5770 = !DILocation(line: 377, column: 6, scope: !5771, inlinedAt: !5598)
!5771 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 377, column: 6)
!5772 = !DILocation(line: 377, column: 11, scope: !5771, inlinedAt: !5598)
!5773 = !DILocation(line: 377, column: 6, scope: !5594, inlinedAt: !5598)
!5774 = !DILocation(line: 377, column: 32, scope: !5771, inlinedAt: !5598)
!5775 = !DILocation(line: 378, column: 6, scope: !5776, inlinedAt: !5598)
!5776 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 378, column: 6)
!5777 = !DILocation(line: 378, column: 11, scope: !5776, inlinedAt: !5598)
!5778 = !DILocation(line: 378, column: 6, scope: !5594, inlinedAt: !5598)
!5779 = !DILocation(line: 378, column: 32, scope: !5776, inlinedAt: !5598)
!5780 = !DILocation(line: 379, column: 6, scope: !5781, inlinedAt: !5598)
!5781 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 379, column: 6)
!5782 = !DILocation(line: 379, column: 11, scope: !5781, inlinedAt: !5598)
!5783 = !DILocation(line: 379, column: 6, scope: !5594, inlinedAt: !5598)
!5784 = !DILocation(line: 379, column: 33, scope: !5781, inlinedAt: !5598)
!5785 = !DILocation(line: 380, column: 6, scope: !5786, inlinedAt: !5598)
!5786 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 380, column: 6)
!5787 = !DILocation(line: 380, column: 11, scope: !5786, inlinedAt: !5598)
!5788 = !DILocation(line: 380, column: 6, scope: !5594, inlinedAt: !5598)
!5789 = !DILocation(line: 380, column: 33, scope: !5786, inlinedAt: !5598)
!5790 = !DILocation(line: 381, column: 6, scope: !5791, inlinedAt: !5598)
!5791 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 381, column: 6)
!5792 = !DILocation(line: 381, column: 11, scope: !5791, inlinedAt: !5598)
!5793 = !DILocation(line: 381, column: 6, scope: !5594, inlinedAt: !5598)
!5794 = !DILocation(line: 381, column: 33, scope: !5791, inlinedAt: !5598)
!5795 = !DILocation(line: 382, column: 2, scope: !5796, inlinedAt: !5598)
!5796 = distinct !DILexicalBlock(scope: !5797, file: !3816, line: 382, column: 2)
!5797 = distinct !DILexicalBlock(scope: !5594, file: !3816, line: 382, column: 2)
!5798 = !{i32 -2143657860, i32 -2143657831, i32 -2143657785, i32 -2143657727, i32 -2143657673, i32 -2143657619, i32 -2143657564, i32 -2143657533}
!5799 = !DILocation(line: 382, column: 2, scope: !5800, inlinedAt: !5598)
!5800 = distinct !DILexicalBlock(scope: !5801, file: !3816, line: 382, column: 2)
!5801 = distinct !DILexicalBlock(scope: !5797, file: !3816, line: 382, column: 2)
!5802 = !{i32 -2143657090, i32 -2143657083, i32 -2143657029, i32 -2143656998, i32 -2143656968}
!5803 = !DILocation(line: 382, column: 2, scope: !5801, inlinedAt: !5598)
!5804 = !DILocation(line: 386, column: 1, scope: !5594, inlinedAt: !5598)
!5805 = !DILocation(line: 547, column: 9, scope: !5577, inlinedAt: !5580)
!5806 = !DILocation(line: 549, column: 8, scope: !5807, inlinedAt: !5580)
!5807 = distinct !DILexicalBlock(scope: !5577, file: !3816, line: 549, column: 7)
!5808 = !DILocation(line: 549, column: 7, scope: !5577, inlinedAt: !5580)
!5809 = !DILocation(line: 550, column: 4, scope: !5807, inlinedAt: !5580)
!5810 = !DILocation(line: 553, column: 33, scope: !5577, inlinedAt: !5580)
!5811 = !DILocation(line: 325, column: 6, scope: !5812, inlinedAt: !5592)
!5812 = distinct !DILexicalBlock(scope: !5588, file: !3816, line: 325, column: 6)
!5813 = !DILocation(line: 325, column: 6, scope: !5588, inlinedAt: !5592)
!5814 = !DILocation(line: 326, column: 3, scope: !5812, inlinedAt: !5592)
!5815 = !DILocation(line: 332, column: 9, scope: !5588, inlinedAt: !5592)
!5816 = !DILocation(line: 332, column: 15, scope: !5588, inlinedAt: !5592)
!5817 = !DILocation(line: 332, column: 2, scope: !5588, inlinedAt: !5592)
!5818 = !DILocation(line: 336, column: 1, scope: !5588, inlinedAt: !5592)
!5819 = !DILocation(line: 553, column: 5, scope: !5577, inlinedAt: !5580)
!5820 = !DILocation(line: 553, column: 41, scope: !5577, inlinedAt: !5580)
!5821 = !DILocation(line: 554, column: 5, scope: !5577, inlinedAt: !5580)
!5822 = !DILocation(line: 554, column: 12, scope: !5577, inlinedAt: !5580)
!5823 = !DILocation(line: 448, column: 31, scope: !5572, inlinedAt: !5576)
!5824 = !DILocation(line: 448, column: 34, scope: !5572, inlinedAt: !5576)
!5825 = !DILocation(line: 448, column: 14, scope: !5572, inlinedAt: !5576)
!5826 = !DILocation(line: 450, column: 22, scope: !5572, inlinedAt: !5576)
!5827 = !DILocation(line: 450, column: 25, scope: !5572, inlinedAt: !5576)
!5828 = !DILocation(line: 450, column: 30, scope: !5572, inlinedAt: !5576)
!5829 = !DILocation(line: 450, column: 36, scope: !5572, inlinedAt: !5576)
!5830 = !DILocation(line: 450, column: 8, scope: !5572, inlinedAt: !5576)
!5831 = !DILocation(line: 450, column: 6, scope: !5572, inlinedAt: !5576)
!5832 = !DILocation(line: 451, column: 9, scope: !5572, inlinedAt: !5576)
!5833 = !DILocation(line: 552, column: 3, scope: !5577, inlinedAt: !5580)
!5834 = !DILocation(line: 557, column: 19, scope: !5579, inlinedAt: !5580)
!5835 = !DILocation(line: 557, column: 25, scope: !5579, inlinedAt: !5580)
!5836 = !DILocation(line: 557, column: 9, scope: !5579, inlinedAt: !5580)
!5837 = !DILocation(line: 557, column: 2, scope: !5579, inlinedAt: !5580)
!5838 = !DILocation(line: 558, column: 1, scope: !5579, inlinedAt: !5580)
!5839 = !DILocation(line: 664, column: 2, scope: !5568)
!5840 = distinct !DISubprogram(name: "regmap_lock_unlock_none", scope: !3, file: !3, line: 492, type: !62, scopeLine: 493, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5841 = !DILocalVariable(name: "__map", arg: 1, scope: !5840, file: !3, line: 492, type: !64)
!5842 = !DILocation(line: 492, column: 43, scope: !5840)
!5843 = !DILocation(line: 495, column: 1, scope: !5840)
!5844 = distinct !DISubprogram(name: "regmap_debugfs_disable", scope: !8, file: !8, line: 235, type: !4303, scopeLine: 235, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5845 = !DILocalVariable(name: "map", arg: 1, scope: !5844, file: !8, line: 235, type: !6)
!5846 = !DILocation(line: 235, column: 58, scope: !5844)
!5847 = !DILocation(line: 235, column: 65, scope: !5844)
!5848 = distinct !DISubprogram(name: "hwspin_lock_request_specific", scope: !3743, file: !3743, line: 102, type: !5849, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5849 = !DISubroutineType(types: !5850)
!5850 = !{!3741, !70}
!5851 = !DILocalVariable(name: "id", arg: 1, scope: !5848, file: !3743, line: 102, type: !70)
!5852 = !DILocation(line: 102, column: 76, scope: !5848)
!5853 = !DILocation(line: 104, column: 9, scope: !5848)
!5854 = !DILocation(line: 104, column: 2, scope: !5848)
!5855 = distinct !DISubprogram(name: "regmap_lock_hwlock_irqsave", scope: !3, file: !3, line: 463, type: !62, scopeLine: 464, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5856 = !DILocalVariable(name: "__map", arg: 1, scope: !5855, file: !3, line: 463, type: !64)
!5857 = !DILocation(line: 463, column: 46, scope: !5855)
!5858 = !DILocalVariable(name: "map", scope: !5855, file: !3, line: 465, type: !6)
!5859 = !DILocation(line: 465, column: 17, scope: !5855)
!5860 = !DILocation(line: 465, column: 23, scope: !5855)
!5861 = !DILocation(line: 467, column: 30, scope: !5855)
!5862 = !DILocation(line: 467, column: 35, scope: !5855)
!5863 = !DILocation(line: 468, column: 10, scope: !5855)
!5864 = !DILocation(line: 468, column: 15, scope: !5855)
!5865 = !DILocation(line: 467, column: 2, scope: !5855)
!5866 = !DILocation(line: 469, column: 1, scope: !5855)
!5867 = distinct !DISubprogram(name: "regmap_unlock_hwlock_irqrestore", scope: !3, file: !3, line: 485, type: !62, scopeLine: 486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5868 = !DILocalVariable(name: "__map", arg: 1, scope: !5867, file: !3, line: 485, type: !64)
!5869 = !DILocation(line: 485, column: 51, scope: !5867)
!5870 = !DILocalVariable(name: "map", scope: !5867, file: !3, line: 487, type: !6)
!5871 = !DILocation(line: 487, column: 17, scope: !5867)
!5872 = !DILocation(line: 487, column: 23, scope: !5867)
!5873 = !DILocation(line: 489, column: 27, scope: !5867)
!5874 = !DILocation(line: 489, column: 32, scope: !5867)
!5875 = !DILocation(line: 489, column: 41, scope: !5867)
!5876 = !DILocation(line: 489, column: 46, scope: !5867)
!5877 = !DILocation(line: 489, column: 2, scope: !5867)
!5878 = !DILocation(line: 490, column: 1, scope: !5867)
!5879 = distinct !DISubprogram(name: "regmap_lock_hwlock_irq", scope: !3, file: !3, line: 456, type: !62, scopeLine: 457, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5880 = !DILocalVariable(name: "__map", arg: 1, scope: !5879, file: !3, line: 456, type: !64)
!5881 = !DILocation(line: 456, column: 42, scope: !5879)
!5882 = !DILocalVariable(name: "map", scope: !5879, file: !3, line: 458, type: !6)
!5883 = !DILocation(line: 458, column: 17, scope: !5879)
!5884 = !DILocation(line: 458, column: 23, scope: !5879)
!5885 = !DILocation(line: 460, column: 26, scope: !5879)
!5886 = !DILocation(line: 460, column: 31, scope: !5879)
!5887 = !DILocation(line: 460, column: 2, scope: !5879)
!5888 = !DILocation(line: 461, column: 1, scope: !5879)
!5889 = distinct !DISubprogram(name: "regmap_unlock_hwlock_irq", scope: !3, file: !3, line: 478, type: !62, scopeLine: 479, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5890 = !DILocalVariable(name: "__map", arg: 1, scope: !5889, file: !3, line: 478, type: !64)
!5891 = !DILocation(line: 478, column: 44, scope: !5889)
!5892 = !DILocalVariable(name: "map", scope: !5889, file: !3, line: 480, type: !6)
!5893 = !DILocation(line: 480, column: 17, scope: !5889)
!5894 = !DILocation(line: 480, column: 23, scope: !5889)
!5895 = !DILocation(line: 482, column: 20, scope: !5889)
!5896 = !DILocation(line: 482, column: 25, scope: !5889)
!5897 = !DILocation(line: 482, column: 2, scope: !5889)
!5898 = !DILocation(line: 483, column: 1, scope: !5889)
!5899 = distinct !DISubprogram(name: "regmap_lock_hwlock", scope: !3, file: !3, line: 449, type: !62, scopeLine: 450, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5900 = !DILocalVariable(name: "__map", arg: 1, scope: !5899, file: !3, line: 449, type: !64)
!5901 = !DILocation(line: 449, column: 38, scope: !5899)
!5902 = !DILocalVariable(name: "map", scope: !5899, file: !3, line: 451, type: !6)
!5903 = !DILocation(line: 451, column: 17, scope: !5899)
!5904 = !DILocation(line: 451, column: 23, scope: !5899)
!5905 = !DILocation(line: 453, column: 22, scope: !5899)
!5906 = !DILocation(line: 453, column: 27, scope: !5899)
!5907 = !DILocation(line: 453, column: 2, scope: !5899)
!5908 = !DILocation(line: 454, column: 1, scope: !5899)
!5909 = distinct !DISubprogram(name: "regmap_unlock_hwlock", scope: !3, file: !3, line: 471, type: !62, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5910 = !DILocalVariable(name: "__map", arg: 1, scope: !5909, file: !3, line: 471, type: !64)
!5911 = !DILocation(line: 471, column: 40, scope: !5909)
!5912 = !DILocalVariable(name: "map", scope: !5909, file: !3, line: 473, type: !6)
!5913 = !DILocation(line: 473, column: 17, scope: !5909)
!5914 = !DILocation(line: 473, column: 23, scope: !5909)
!5915 = !DILocation(line: 475, column: 16, scope: !5909)
!5916 = !DILocation(line: 475, column: 21, scope: !5909)
!5917 = !DILocation(line: 475, column: 2, scope: !5909)
!5918 = !DILocation(line: 476, column: 1, scope: !5909)
!5919 = distinct !DISubprogram(name: "regmap_lock_spinlock", scope: !3, file: !3, line: 509, type: !62, scopeLine: 511, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5920 = !DILocation(line: 327, column: 67, scope: !4414, inlinedAt: !5921)
!5921 = distinct !DILocation(line: 515, column: 2, scope: !5922)
!5922 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 515, column: 2)
!5923 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 515, column: 2)
!5924 = distinct !DILexicalBlock(scope: !5925, file: !3, line: 515, column: 2)
!5925 = distinct !DILexicalBlock(scope: !5926, file: !3, line: 515, column: 2)
!5926 = distinct !DILexicalBlock(scope: !5919, file: !3, line: 515, column: 2)
!5927 = !DILocalVariable(name: "__map", arg: 1, scope: !5919, file: !3, line: 509, type: !64)
!5928 = !DILocation(line: 509, column: 40, scope: !5919)
!5929 = !DILocalVariable(name: "map", scope: !5919, file: !3, line: 512, type: !6)
!5930 = !DILocation(line: 512, column: 17, scope: !5919)
!5931 = !DILocation(line: 512, column: 23, scope: !5919)
!5932 = !DILocalVariable(name: "flags", scope: !5919, file: !3, line: 513, type: !57)
!5933 = !DILocation(line: 513, column: 16, scope: !5919)
!5934 = !DILocation(line: 515, column: 2, scope: !5919)
!5935 = !DILocation(line: 515, column: 2, scope: !5926)
!5936 = !DILocalVariable(name: "__dummy", scope: !5937, file: !3, line: 515, type: !57)
!5937 = distinct !DILexicalBlock(scope: !5925, file: !3, line: 515, column: 2)
!5938 = !DILocation(line: 515, column: 2, scope: !5937)
!5939 = !DILocalVariable(name: "__dummy2", scope: !5937, file: !3, line: 515, type: !57)
!5940 = !DILocation(line: 515, column: 2, scope: !5925)
!5941 = !DILocation(line: 515, column: 2, scope: !5924)
!5942 = !DILocation(line: 515, column: 2, scope: !5943)
!5943 = distinct !DILexicalBlock(scope: !5924, file: !3, line: 515, column: 2)
!5944 = !DILocalVariable(name: "__dummy", scope: !5945, file: !3, line: 515, type: !57)
!5945 = distinct !DILexicalBlock(scope: !5946, file: !3, line: 515, column: 2)
!5946 = distinct !DILexicalBlock(scope: !5943, file: !3, line: 515, column: 2)
!5947 = !DILocation(line: 515, column: 2, scope: !5945)
!5948 = !DILocalVariable(name: "__dummy2", scope: !5945, file: !3, line: 515, type: !57)
!5949 = !DILocation(line: 515, column: 2, scope: !5946)
!5950 = !DILocation(line: 515, column: 2, scope: !5923)
!5951 = !{i32 -2142582623}
!5952 = !DILocation(line: 515, column: 2, scope: !5922)
!5953 = !DILocation(line: 329, column: 10, scope: !4414, inlinedAt: !5921)
!5954 = !DILocation(line: 329, column: 16, scope: !4414, inlinedAt: !5921)
!5955 = !DILocation(line: 516, column: 24, scope: !5919)
!5956 = !DILocation(line: 516, column: 2, scope: !5919)
!5957 = !DILocation(line: 516, column: 7, scope: !5919)
!5958 = !DILocation(line: 516, column: 22, scope: !5919)
!5959 = !DILocation(line: 517, column: 1, scope: !5919)
!5960 = distinct !DISubprogram(name: "regmap_unlock_spinlock", scope: !3, file: !3, line: 519, type: !62, scopeLine: 521, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5961 = !DILocalVariable(name: "lock", arg: 1, scope: !5962, file: !4415, line: 407, type: !4419)
!5962 = distinct !DISubprogram(name: "spin_unlock_irqrestore", scope: !4415, file: !4415, line: 407, type: !5963, scopeLine: 408, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5963 = !DISubroutineType(types: !5964)
!5964 = !{null, !4419, !57}
!5965 = !DILocation(line: 407, column: 64, scope: !5962, inlinedAt: !5966)
!5966 = distinct !DILocation(line: 523, column: 2, scope: !5960)
!5967 = !DILocalVariable(name: "flags", arg: 2, scope: !5962, file: !4415, line: 407, type: !57)
!5968 = !DILocation(line: 407, column: 84, scope: !5962, inlinedAt: !5966)
!5969 = !DILocalVariable(name: "__map", arg: 1, scope: !5960, file: !3, line: 519, type: !64)
!5970 = !DILocation(line: 519, column: 42, scope: !5960)
!5971 = !DILocalVariable(name: "map", scope: !5960, file: !3, line: 522, type: !6)
!5972 = !DILocation(line: 522, column: 17, scope: !5960)
!5973 = !DILocation(line: 522, column: 23, scope: !5960)
!5974 = !DILocation(line: 523, column: 26, scope: !5960)
!5975 = !DILocation(line: 523, column: 31, scope: !5960)
!5976 = !DILocation(line: 523, column: 41, scope: !5960)
!5977 = !DILocation(line: 523, column: 46, scope: !5960)
!5978 = !DILocalVariable(name: "__dummy", scope: !5979, file: !4415, line: 409, type: !57)
!5979 = distinct !DILexicalBlock(scope: !5980, file: !4415, line: 409, column: 2)
!5980 = distinct !DILexicalBlock(scope: !5962, file: !4415, line: 409, column: 2)
!5981 = !DILocation(line: 409, column: 2, scope: !5979, inlinedAt: !5966)
!5982 = !DILocalVariable(name: "__dummy2", scope: !5979, file: !4415, line: 409, type: !57)
!5983 = !DILocalVariable(name: "__dummy", scope: !5984, file: !4415, line: 409, type: !57)
!5984 = distinct !DILexicalBlock(scope: !5985, file: !4415, line: 409, column: 2)
!5985 = distinct !DILexicalBlock(scope: !5986, file: !4415, line: 409, column: 2)
!5986 = distinct !DILexicalBlock(scope: !5987, file: !4415, line: 409, column: 2)
!5987 = distinct !DILexicalBlock(scope: !5980, file: !4415, line: 409, column: 2)
!5988 = !DILocation(line: 409, column: 2, scope: !5984, inlinedAt: !5966)
!5989 = !DILocalVariable(name: "__dummy2", scope: !5984, file: !4415, line: 409, type: !57)
!5990 = !DILocation(line: 409, column: 2, scope: !5985, inlinedAt: !5966)
!5991 = !DILocation(line: 409, column: 2, scope: !5992, inlinedAt: !5966)
!5992 = distinct !DILexicalBlock(scope: !5987, file: !4415, line: 409, column: 2)
!5993 = !{i32 -2145217566}
!5994 = !DILocation(line: 409, column: 2, scope: !5995, inlinedAt: !5966)
!5995 = distinct !DILexicalBlock(scope: !5992, file: !4415, line: 409, column: 2)
!5996 = !DILocation(line: 524, column: 1, scope: !5960)
!5997 = distinct !DISubprogram(name: "regmap_lock_mutex", scope: !3, file: !3, line: 497, type: !62, scopeLine: 498, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!5998 = !DILocalVariable(name: "__map", arg: 1, scope: !5997, file: !3, line: 497, type: !64)
!5999 = !DILocation(line: 497, column: 37, scope: !5997)
!6000 = !DILocalVariable(name: "map", scope: !5997, file: !3, line: 499, type: !6)
!6001 = !DILocation(line: 499, column: 17, scope: !5997)
!6002 = !DILocation(line: 499, column: 23, scope: !5997)
!6003 = !DILocation(line: 500, column: 14, scope: !5997)
!6004 = !DILocation(line: 500, column: 19, scope: !5997)
!6005 = !DILocation(line: 500, column: 2, scope: !5997)
!6006 = !DILocation(line: 501, column: 1, scope: !5997)
!6007 = distinct !DISubprogram(name: "regmap_unlock_mutex", scope: !3, file: !3, line: 503, type: !62, scopeLine: 504, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6008 = !DILocalVariable(name: "__map", arg: 1, scope: !6007, file: !3, line: 503, type: !64)
!6009 = !DILocation(line: 503, column: 39, scope: !6007)
!6010 = !DILocalVariable(name: "map", scope: !6007, file: !3, line: 505, type: !6)
!6011 = !DILocation(line: 505, column: 17, scope: !6007)
!6012 = !DILocation(line: 505, column: 23, scope: !6007)
!6013 = !DILocation(line: 506, column: 16, scope: !6007)
!6014 = !DILocation(line: 506, column: 21, scope: !6007)
!6015 = !DILocation(line: 506, column: 2, scope: !6007)
!6016 = !DILocation(line: 507, column: 1, scope: !6007)
!6017 = distinct !DISubprogram(name: "is_power_of_2", scope: !6018, file: !6018, line: 45, type: !6019, scopeLine: 46, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6018 = !DIFile(filename: "./include/linux/log2.h", directory: "/home/lizy2001/genbc/linux")
!6019 = !DISubroutineType(types: !6020)
!6020 = !{!331, !57}
!6021 = !DILocalVariable(name: "n", arg: 1, scope: !6017, file: !6018, line: 45, type: !57)
!6022 = !DILocation(line: 45, column: 34, scope: !6017)
!6023 = !DILocation(line: 47, column: 10, scope: !6017)
!6024 = !DILocation(line: 47, column: 12, scope: !6017)
!6025 = !DILocation(line: 47, column: 17, scope: !6017)
!6026 = !DILocation(line: 47, column: 22, scope: !6017)
!6027 = !DILocation(line: 47, column: 27, scope: !6017)
!6028 = !DILocation(line: 47, column: 29, scope: !6017)
!6029 = !DILocation(line: 47, column: 24, scope: !6017)
!6030 = !DILocation(line: 47, column: 35, scope: !6017)
!6031 = !DILocation(line: 0, scope: !6017)
!6032 = !DILocation(line: 47, column: 2, scope: !6017)
!6033 = distinct !DISubprogram(name: "__ilog2_u32", scope: !6018, file: !6018, line: 22, type: !6034, scopeLine: 23, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6034 = !DISubroutineType(types: !6035)
!6035 = !{!104, !261}
!6036 = !DILocalVariable(name: "x", arg: 1, scope: !6037, file: !6038, line: 324, type: !70)
!6037 = distinct !DISubprogram(name: "fls", scope: !6038, file: !6038, line: 324, type: !6039, scopeLine: 325, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6038 = !DIFile(filename: "./arch/x86/include/asm/bitops.h", directory: "/home/lizy2001/genbc/linux")
!6039 = !DISubroutineType(types: !6040)
!6040 = !{!104, !70}
!6041 = !DILocation(line: 324, column: 45, scope: !6037, inlinedAt: !6042)
!6042 = distinct !DILocation(line: 24, column: 9, scope: !6033)
!6043 = !DILocalVariable(name: "r", scope: !6037, file: !6038, line: 326, type: !104)
!6044 = !DILocation(line: 326, column: 6, scope: !6037, inlinedAt: !6042)
!6045 = !DILocalVariable(name: "n", arg: 1, scope: !6033, file: !6018, line: 22, type: !261)
!6046 = !DILocation(line: 22, column: 21, scope: !6033)
!6047 = !DILocation(line: 24, column: 13, scope: !6033)
!6048 = !DILocation(line: 340, column: 14, scope: !6037, inlinedAt: !6042)
!6049 = !DILocation(line: 338, column: 2, scope: !6037, inlinedAt: !6042)
!6050 = !{i32 455073}
!6051 = !DILocation(line: 351, column: 9, scope: !6037, inlinedAt: !6042)
!6052 = !DILocation(line: 351, column: 11, scope: !6037, inlinedAt: !6042)
!6053 = !DILocation(line: 24, column: 16, scope: !6033)
!6054 = !DILocation(line: 24, column: 2, scope: !6033)
!6055 = distinct !DISubprogram(name: "INIT_LIST_HEAD", scope: !6056, file: !6056, line: 33, type: !6057, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6056 = !DIFile(filename: "./include/linux/list.h", directory: "/home/lizy2001/genbc/linux")
!6057 = !DISubroutineType(types: !6058)
!6058 = !{null, !50}
!6059 = !DILocalVariable(name: "list", arg: 1, scope: !6055, file: !6056, line: 33, type: !50)
!6060 = !DILocation(line: 33, column: 53, scope: !6055)
!6061 = !DILocation(line: 35, column: 2, scope: !6055)
!6062 = !DILocation(line: 35, column: 2, scope: !6063)
!6063 = distinct !DILexicalBlock(scope: !6055, file: !6056, line: 35, column: 2)
!6064 = !DILocation(line: 35, column: 2, scope: !6065)
!6065 = distinct !DILexicalBlock(scope: !6063, file: !6056, line: 35, column: 2)
!6066 = !DILocation(line: 35, column: 2, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !6063, file: !6056, line: 35, column: 2)
!6068 = !DILocation(line: 36, column: 15, scope: !6055)
!6069 = !DILocation(line: 36, column: 2, scope: !6055)
!6070 = !DILocation(line: 36, column: 8, scope: !6055)
!6071 = !DILocation(line: 36, column: 13, scope: !6055)
!6072 = !DILocation(line: 37, column: 1, scope: !6055)
!6073 = distinct !DISubprogram(name: "_regmap_bus_reg_read", scope: !3, file: !3, line: 2645, type: !3612, scopeLine: 2647, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6074 = !DILocalVariable(name: "context", arg: 1, scope: !6073, file: !3, line: 2645, type: !64)
!6075 = !DILocation(line: 2645, column: 39, scope: !6073)
!6076 = !DILocalVariable(name: "reg", arg: 2, scope: !6073, file: !3, line: 2645, type: !70)
!6077 = !DILocation(line: 2645, column: 61, scope: !6073)
!6078 = !DILocalVariable(name: "val", arg: 3, scope: !6073, file: !3, line: 2646, type: !2381)
!6079 = !DILocation(line: 2646, column: 19, scope: !6073)
!6080 = !DILocalVariable(name: "map", scope: !6073, file: !3, line: 2648, type: !6)
!6081 = !DILocation(line: 2648, column: 17, scope: !6073)
!6082 = !DILocation(line: 2648, column: 23, scope: !6073)
!6083 = !DILocation(line: 2650, column: 9, scope: !6073)
!6084 = !DILocation(line: 2650, column: 14, scope: !6073)
!6085 = !DILocation(line: 2650, column: 19, scope: !6073)
!6086 = !DILocation(line: 2650, column: 28, scope: !6073)
!6087 = !DILocation(line: 2650, column: 33, scope: !6073)
!6088 = !DILocation(line: 2650, column: 46, scope: !6073)
!6089 = !DILocation(line: 2650, column: 51, scope: !6073)
!6090 = !DILocation(line: 2650, column: 2, scope: !6073)
!6091 = distinct !DISubprogram(name: "_regmap_bus_reg_write", scope: !3, file: !3, line: 1878, type: !3597, scopeLine: 1880, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6092 = !DILocalVariable(name: "context", arg: 1, scope: !6091, file: !3, line: 1878, type: !64)
!6093 = !DILocation(line: 1878, column: 40, scope: !6091)
!6094 = !DILocalVariable(name: "reg", arg: 2, scope: !6091, file: !3, line: 1878, type: !70)
!6095 = !DILocation(line: 1878, column: 62, scope: !6091)
!6096 = !DILocalVariable(name: "val", arg: 3, scope: !6091, file: !3, line: 1879, type: !70)
!6097 = !DILocation(line: 1879, column: 19, scope: !6091)
!6098 = !DILocalVariable(name: "map", scope: !6091, file: !3, line: 1881, type: !6)
!6099 = !DILocation(line: 1881, column: 17, scope: !6091)
!6100 = !DILocation(line: 1881, column: 23, scope: !6091)
!6101 = !DILocation(line: 1883, column: 9, scope: !6091)
!6102 = !DILocation(line: 1883, column: 14, scope: !6091)
!6103 = !DILocation(line: 1883, column: 19, scope: !6091)
!6104 = !DILocation(line: 1883, column: 29, scope: !6091)
!6105 = !DILocation(line: 1883, column: 34, scope: !6091)
!6106 = !DILocation(line: 1883, column: 47, scope: !6091)
!6107 = !DILocation(line: 1883, column: 52, scope: !6091)
!6108 = !DILocation(line: 1883, column: 2, scope: !6091)
!6109 = distinct !DISubprogram(name: "_regmap_bus_read", scope: !3, file: !3, line: 2653, type: !3612, scopeLine: 2655, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6110 = !DILocalVariable(name: "context", arg: 1, scope: !6109, file: !3, line: 2653, type: !64)
!6111 = !DILocation(line: 2653, column: 35, scope: !6109)
!6112 = !DILocalVariable(name: "reg", arg: 2, scope: !6109, file: !3, line: 2653, type: !70)
!6113 = !DILocation(line: 2653, column: 57, scope: !6109)
!6114 = !DILocalVariable(name: "val", arg: 3, scope: !6109, file: !3, line: 2654, type: !2381)
!6115 = !DILocation(line: 2654, column: 22, scope: !6109)
!6116 = !DILocalVariable(name: "ret", scope: !6109, file: !3, line: 2656, type: !104)
!6117 = !DILocation(line: 2656, column: 6, scope: !6109)
!6118 = !DILocalVariable(name: "map", scope: !6109, file: !3, line: 2657, type: !6)
!6119 = !DILocation(line: 2657, column: 17, scope: !6109)
!6120 = !DILocation(line: 2657, column: 23, scope: !6109)
!6121 = !DILocalVariable(name: "work_val", scope: !6109, file: !3, line: 2658, type: !64)
!6122 = !DILocation(line: 2658, column: 8, scope: !6109)
!6123 = !DILocation(line: 2658, column: 19, scope: !6109)
!6124 = !DILocation(line: 2658, column: 24, scope: !6109)
!6125 = !DILocation(line: 2658, column: 35, scope: !6109)
!6126 = !DILocation(line: 2658, column: 40, scope: !6109)
!6127 = !DILocation(line: 2658, column: 47, scope: !6109)
!6128 = !DILocation(line: 2658, column: 33, scope: !6109)
!6129 = !DILocation(line: 2659, column: 3, scope: !6109)
!6130 = !DILocation(line: 2659, column: 8, scope: !6109)
!6131 = !DILocation(line: 2659, column: 15, scope: !6109)
!6132 = !DILocation(line: 2658, column: 57, scope: !6109)
!6133 = !DILocation(line: 2661, column: 7, scope: !6134)
!6134 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 2661, column: 6)
!6135 = !DILocation(line: 2661, column: 12, scope: !6134)
!6136 = !DILocation(line: 2661, column: 19, scope: !6134)
!6137 = !DILocation(line: 2661, column: 6, scope: !6109)
!6138 = !DILocation(line: 2662, column: 3, scope: !6134)
!6139 = !DILocation(line: 2664, column: 25, scope: !6109)
!6140 = !DILocation(line: 2664, column: 30, scope: !6109)
!6141 = !DILocation(line: 2664, column: 35, scope: !6109)
!6142 = !DILocation(line: 2664, column: 45, scope: !6109)
!6143 = !DILocation(line: 2664, column: 50, scope: !6109)
!6144 = !DILocation(line: 2664, column: 57, scope: !6109)
!6145 = !DILocation(line: 2664, column: 8, scope: !6109)
!6146 = !DILocation(line: 2664, column: 6, scope: !6109)
!6147 = !DILocation(line: 2665, column: 6, scope: !6148)
!6148 = distinct !DILexicalBlock(scope: !6109, file: !3, line: 2665, column: 6)
!6149 = !DILocation(line: 2665, column: 10, scope: !6148)
!6150 = !DILocation(line: 2665, column: 6, scope: !6109)
!6151 = !DILocation(line: 2666, column: 10, scope: !6148)
!6152 = !DILocation(line: 2666, column: 15, scope: !6148)
!6153 = !DILocation(line: 2666, column: 22, scope: !6148)
!6154 = !DILocation(line: 2666, column: 32, scope: !6148)
!6155 = !DILocation(line: 2666, column: 4, scope: !6148)
!6156 = !DILocation(line: 2666, column: 8, scope: !6148)
!6157 = !DILocation(line: 2666, column: 3, scope: !6148)
!6158 = !DILocation(line: 2668, column: 9, scope: !6109)
!6159 = !DILocation(line: 2668, column: 2, scope: !6109)
!6160 = !DILocation(line: 2669, column: 1, scope: !6109)
!6161 = distinct !DISubprogram(name: "regmap_get_reg_endian", scope: !3, file: !3, line: 638, type: !6162, scopeLine: 640, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6162 = !DISubroutineType(types: !6163)
!6163 = !{!3623, !3568, !3745}
!6164 = !DILocalVariable(name: "bus", arg: 1, scope: !6161, file: !3, line: 638, type: !3568)
!6165 = !DILocation(line: 638, column: 74, scope: !6161)
!6166 = !DILocalVariable(name: "config", arg: 2, scope: !6161, file: !3, line: 639, type: !3745)
!6167 = !DILocation(line: 639, column: 34, scope: !6161)
!6168 = !DILocalVariable(name: "endian", scope: !6161, file: !3, line: 641, type: !3623)
!6169 = !DILocation(line: 641, column: 21, scope: !6161)
!6170 = !DILocation(line: 644, column: 11, scope: !6161)
!6171 = !DILocation(line: 644, column: 19, scope: !6161)
!6172 = !DILocation(line: 644, column: 9, scope: !6161)
!6173 = !DILocation(line: 647, column: 6, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6161, file: !3, line: 647, column: 6)
!6175 = !DILocation(line: 647, column: 13, scope: !6174)
!6176 = !DILocation(line: 647, column: 6, scope: !6161)
!6177 = !DILocation(line: 648, column: 10, scope: !6174)
!6178 = !DILocation(line: 648, column: 3, scope: !6174)
!6179 = !DILocation(line: 651, column: 6, scope: !6180)
!6180 = distinct !DILexicalBlock(scope: !6161, file: !3, line: 651, column: 6)
!6181 = !DILocation(line: 651, column: 10, scope: !6180)
!6182 = !DILocation(line: 651, column: 13, scope: !6180)
!6183 = !DILocation(line: 651, column: 18, scope: !6180)
!6184 = !DILocation(line: 651, column: 6, scope: !6161)
!6185 = !DILocation(line: 652, column: 12, scope: !6180)
!6186 = !DILocation(line: 652, column: 17, scope: !6180)
!6187 = !DILocation(line: 652, column: 10, scope: !6180)
!6188 = !DILocation(line: 652, column: 3, scope: !6180)
!6189 = !DILocation(line: 655, column: 6, scope: !6190)
!6190 = distinct !DILexicalBlock(scope: !6161, file: !3, line: 655, column: 6)
!6191 = !DILocation(line: 655, column: 13, scope: !6190)
!6192 = !DILocation(line: 655, column: 6, scope: !6161)
!6193 = !DILocation(line: 656, column: 10, scope: !6190)
!6194 = !DILocation(line: 656, column: 3, scope: !6190)
!6195 = !DILocation(line: 659, column: 2, scope: !6161)
!6196 = !DILocation(line: 660, column: 1, scope: !6161)
!6197 = distinct !DISubprogram(name: "regmap_format_2_6_write", scope: !3, file: !3, line: 224, type: !3555, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6198 = !DILocalVariable(name: "map", arg: 1, scope: !6197, file: !3, line: 224, type: !6)
!6199 = !DILocation(line: 224, column: 52, scope: !6197)
!6200 = !DILocalVariable(name: "reg", arg: 2, scope: !6197, file: !3, line: 225, type: !70)
!6201 = !DILocation(line: 225, column: 23, scope: !6197)
!6202 = !DILocalVariable(name: "val", arg: 3, scope: !6197, file: !3, line: 225, type: !70)
!6203 = !DILocation(line: 225, column: 41, scope: !6197)
!6204 = !DILocalVariable(name: "out", scope: !6197, file: !3, line: 227, type: !3826)
!6205 = !DILocation(line: 227, column: 6, scope: !6197)
!6206 = !DILocation(line: 227, column: 12, scope: !6197)
!6207 = !DILocation(line: 227, column: 17, scope: !6197)
!6208 = !DILocation(line: 229, column: 10, scope: !6197)
!6209 = !DILocation(line: 229, column: 14, scope: !6197)
!6210 = !DILocation(line: 229, column: 22, scope: !6197)
!6211 = !DILocation(line: 229, column: 20, scope: !6197)
!6212 = !DILocation(line: 229, column: 9, scope: !6197)
!6213 = !DILocation(line: 229, column: 3, scope: !6197)
!6214 = !DILocation(line: 229, column: 7, scope: !6197)
!6215 = !DILocation(line: 230, column: 1, scope: !6197)
!6216 = distinct !DISubprogram(name: "regmap_format_4_12_write", scope: !3, file: !3, line: 232, type: !3555, scopeLine: 234, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6217 = !DILocalVariable(name: "map", arg: 1, scope: !6216, file: !3, line: 232, type: !6)
!6218 = !DILocation(line: 232, column: 53, scope: !6216)
!6219 = !DILocalVariable(name: "reg", arg: 2, scope: !6216, file: !3, line: 233, type: !70)
!6220 = !DILocation(line: 233, column: 23, scope: !6216)
!6221 = !DILocalVariable(name: "val", arg: 3, scope: !6216, file: !3, line: 233, type: !70)
!6222 = !DILocation(line: 233, column: 41, scope: !6216)
!6223 = !DILocalVariable(name: "out", scope: !6216, file: !3, line: 235, type: !3830)
!6224 = !DILocation(line: 235, column: 10, scope: !6216)
!6225 = !DILocation(line: 235, column: 16, scope: !6216)
!6226 = !DILocation(line: 235, column: 21, scope: !6216)
!6227 = !DILocation(line: 236, column: 9, scope: !6216)
!6228 = !DILocation(line: 236, column: 3, scope: !6216)
!6229 = !DILocation(line: 236, column: 7, scope: !6216)
!6230 = !DILocation(line: 237, column: 1, scope: !6216)
!6231 = distinct !DISubprogram(name: "regmap_format_7_9_write", scope: !3, file: !3, line: 239, type: !3555, scopeLine: 241, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6232 = !DILocalVariable(name: "map", arg: 1, scope: !6231, file: !3, line: 239, type: !6)
!6233 = !DILocation(line: 239, column: 52, scope: !6231)
!6234 = !DILocalVariable(name: "reg", arg: 2, scope: !6231, file: !3, line: 240, type: !70)
!6235 = !DILocation(line: 240, column: 22, scope: !6231)
!6236 = !DILocalVariable(name: "val", arg: 3, scope: !6231, file: !3, line: 240, type: !70)
!6237 = !DILocation(line: 240, column: 40, scope: !6231)
!6238 = !DILocalVariable(name: "out", scope: !6231, file: !3, line: 242, type: !3830)
!6239 = !DILocation(line: 242, column: 10, scope: !6231)
!6240 = !DILocation(line: 242, column: 16, scope: !6231)
!6241 = !DILocation(line: 242, column: 21, scope: !6231)
!6242 = !DILocation(line: 243, column: 9, scope: !6231)
!6243 = !DILocation(line: 243, column: 3, scope: !6231)
!6244 = !DILocation(line: 243, column: 7, scope: !6231)
!6245 = !DILocation(line: 244, column: 1, scope: !6231)
!6246 = distinct !DISubprogram(name: "regmap_format_10_14_write", scope: !3, file: !3, line: 246, type: !3555, scopeLine: 248, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6247 = !DILocalVariable(name: "map", arg: 1, scope: !6246, file: !3, line: 246, type: !6)
!6248 = !DILocation(line: 246, column: 54, scope: !6246)
!6249 = !DILocalVariable(name: "reg", arg: 2, scope: !6246, file: !3, line: 247, type: !70)
!6250 = !DILocation(line: 247, column: 22, scope: !6246)
!6251 = !DILocalVariable(name: "val", arg: 3, scope: !6246, file: !3, line: 247, type: !70)
!6252 = !DILocation(line: 247, column: 40, scope: !6246)
!6253 = !DILocalVariable(name: "out", scope: !6246, file: !3, line: 249, type: !3826)
!6254 = !DILocation(line: 249, column: 6, scope: !6246)
!6255 = !DILocation(line: 249, column: 12, scope: !6246)
!6256 = !DILocation(line: 249, column: 17, scope: !6246)
!6257 = !DILocation(line: 251, column: 11, scope: !6246)
!6258 = !DILocation(line: 251, column: 2, scope: !6246)
!6259 = !DILocation(line: 251, column: 9, scope: !6246)
!6260 = !DILocation(line: 252, column: 12, scope: !6246)
!6261 = !DILocation(line: 252, column: 16, scope: !6246)
!6262 = !DILocation(line: 252, column: 25, scope: !6246)
!6263 = !DILocation(line: 252, column: 29, scope: !6246)
!6264 = !DILocation(line: 252, column: 22, scope: !6246)
!6265 = !DILocation(line: 252, column: 11, scope: !6246)
!6266 = !DILocation(line: 252, column: 2, scope: !6246)
!6267 = !DILocation(line: 252, column: 9, scope: !6246)
!6268 = !DILocation(line: 253, column: 11, scope: !6246)
!6269 = !DILocation(line: 253, column: 15, scope: !6246)
!6270 = !DILocation(line: 253, column: 2, scope: !6246)
!6271 = !DILocation(line: 253, column: 9, scope: !6246)
!6272 = !DILocation(line: 254, column: 1, scope: !6246)
!6273 = distinct !DISubprogram(name: "regmap_format_12_20_write", scope: !3, file: !3, line: 212, type: !3555, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6274 = !DILocalVariable(name: "map", arg: 1, scope: !6273, file: !3, line: 212, type: !6)
!6275 = !DILocation(line: 212, column: 54, scope: !6273)
!6276 = !DILocalVariable(name: "reg", arg: 2, scope: !6273, file: !3, line: 213, type: !70)
!6277 = !DILocation(line: 213, column: 23, scope: !6273)
!6278 = !DILocalVariable(name: "val", arg: 3, scope: !6273, file: !3, line: 213, type: !70)
!6279 = !DILocation(line: 213, column: 41, scope: !6273)
!6280 = !DILocalVariable(name: "out", scope: !6273, file: !3, line: 215, type: !3826)
!6281 = !DILocation(line: 215, column: 6, scope: !6273)
!6282 = !DILocation(line: 215, column: 12, scope: !6273)
!6283 = !DILocation(line: 215, column: 17, scope: !6273)
!6284 = !DILocation(line: 217, column: 11, scope: !6273)
!6285 = !DILocation(line: 217, column: 15, scope: !6273)
!6286 = !DILocation(line: 217, column: 2, scope: !6273)
!6287 = !DILocation(line: 217, column: 9, scope: !6273)
!6288 = !DILocation(line: 218, column: 12, scope: !6273)
!6289 = !DILocation(line: 218, column: 16, scope: !6273)
!6290 = !DILocation(line: 218, column: 25, scope: !6273)
!6291 = !DILocation(line: 218, column: 29, scope: !6273)
!6292 = !DILocation(line: 218, column: 22, scope: !6273)
!6293 = !DILocation(line: 218, column: 11, scope: !6273)
!6294 = !DILocation(line: 218, column: 2, scope: !6273)
!6295 = !DILocation(line: 218, column: 9, scope: !6273)
!6296 = !DILocation(line: 219, column: 11, scope: !6273)
!6297 = !DILocation(line: 219, column: 15, scope: !6273)
!6298 = !DILocation(line: 219, column: 2, scope: !6273)
!6299 = !DILocation(line: 219, column: 9, scope: !6273)
!6300 = !DILocation(line: 220, column: 11, scope: !6273)
!6301 = !DILocation(line: 220, column: 2, scope: !6273)
!6302 = !DILocation(line: 220, column: 9, scope: !6273)
!6303 = !DILocation(line: 221, column: 1, scope: !6273)
!6304 = distinct !DISubprogram(name: "regmap_format_8", scope: !3, file: !3, line: 256, type: !3559, scopeLine: 257, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6305 = !DILocalVariable(name: "buf", arg: 1, scope: !6304, file: !3, line: 256, type: !64)
!6306 = !DILocation(line: 256, column: 35, scope: !6304)
!6307 = !DILocalVariable(name: "val", arg: 2, scope: !6304, file: !3, line: 256, type: !70)
!6308 = !DILocation(line: 256, column: 53, scope: !6304)
!6309 = !DILocalVariable(name: "shift", arg: 3, scope: !6304, file: !3, line: 256, type: !70)
!6310 = !DILocation(line: 256, column: 71, scope: !6304)
!6311 = !DILocalVariable(name: "b", scope: !6304, file: !3, line: 258, type: !3826)
!6312 = !DILocation(line: 258, column: 6, scope: !6304)
!6313 = !DILocation(line: 258, column: 10, scope: !6304)
!6314 = !DILocation(line: 260, column: 9, scope: !6304)
!6315 = !DILocation(line: 260, column: 16, scope: !6304)
!6316 = !DILocation(line: 260, column: 13, scope: !6304)
!6317 = !DILocation(line: 260, column: 2, scope: !6304)
!6318 = !DILocation(line: 260, column: 7, scope: !6304)
!6319 = !DILocation(line: 261, column: 1, scope: !6304)
!6320 = distinct !DISubprogram(name: "regmap_format_16_be", scope: !3, file: !3, line: 263, type: !3559, scopeLine: 264, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6321 = !DILocalVariable(name: "val", arg: 1, scope: !6322, file: !6323, line: 53, type: !694)
!6322 = distinct !DISubprogram(name: "put_unaligned_be16", scope: !6323, file: !6323, line: 53, type: !6324, scopeLine: 54, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6323 = !DIFile(filename: "./include/linux/unaligned/access_ok.h", directory: "/home/lizy2001/genbc/linux")
!6324 = !DISubroutineType(types: !6325)
!6325 = !{null, !694, !64}
!6326 = !DILocation(line: 53, column: 52, scope: !6322, inlinedAt: !6327)
!6327 = distinct !DILocation(line: 265, column: 2, scope: !6320)
!6328 = !DILocalVariable(name: "p", arg: 2, scope: !6322, file: !6323, line: 53, type: !64)
!6329 = !DILocation(line: 53, column: 63, scope: !6322, inlinedAt: !6327)
!6330 = !DILocalVariable(name: "buf", arg: 1, scope: !6320, file: !3, line: 263, type: !64)
!6331 = !DILocation(line: 263, column: 39, scope: !6320)
!6332 = !DILocalVariable(name: "val", arg: 2, scope: !6320, file: !3, line: 263, type: !70)
!6333 = !DILocation(line: 263, column: 57, scope: !6320)
!6334 = !DILocalVariable(name: "shift", arg: 3, scope: !6320, file: !3, line: 263, type: !70)
!6335 = !DILocation(line: 263, column: 75, scope: !6320)
!6336 = !DILocation(line: 265, column: 21, scope: !6320)
!6337 = !DILocation(line: 265, column: 28, scope: !6320)
!6338 = !DILocation(line: 265, column: 25, scope: !6320)
!6339 = !DILocation(line: 265, column: 35, scope: !6320)
!6340 = !DILocation(line: 55, column: 19, scope: !6322, inlinedAt: !6327)
!6341 = !DILocation(line: 55, column: 14, scope: !6322, inlinedAt: !6327)
!6342 = !DILocation(line: 55, column: 4, scope: !6322, inlinedAt: !6327)
!6343 = !DILocation(line: 55, column: 17, scope: !6322, inlinedAt: !6327)
!6344 = !DILocation(line: 266, column: 1, scope: !6320)
!6345 = distinct !DISubprogram(name: "regmap_format_16_le", scope: !3, file: !3, line: 268, type: !3559, scopeLine: 269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6346 = !DILocalVariable(name: "val", arg: 1, scope: !6347, file: !6323, line: 38, type: !694)
!6347 = distinct !DISubprogram(name: "put_unaligned_le16", scope: !6323, file: !6323, line: 38, type: !6324, scopeLine: 39, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6348 = !DILocation(line: 38, column: 52, scope: !6347, inlinedAt: !6349)
!6349 = distinct !DILocation(line: 270, column: 2, scope: !6345)
!6350 = !DILocalVariable(name: "p", arg: 2, scope: !6347, file: !6323, line: 38, type: !64)
!6351 = !DILocation(line: 38, column: 63, scope: !6347, inlinedAt: !6349)
!6352 = !DILocalVariable(name: "buf", arg: 1, scope: !6345, file: !3, line: 268, type: !64)
!6353 = !DILocation(line: 268, column: 39, scope: !6345)
!6354 = !DILocalVariable(name: "val", arg: 2, scope: !6345, file: !3, line: 268, type: !70)
!6355 = !DILocation(line: 268, column: 57, scope: !6345)
!6356 = !DILocalVariable(name: "shift", arg: 3, scope: !6345, file: !3, line: 268, type: !70)
!6357 = !DILocation(line: 268, column: 75, scope: !6345)
!6358 = !DILocation(line: 270, column: 21, scope: !6345)
!6359 = !DILocation(line: 270, column: 28, scope: !6345)
!6360 = !DILocation(line: 270, column: 25, scope: !6345)
!6361 = !DILocation(line: 270, column: 35, scope: !6345)
!6362 = !DILocation(line: 40, column: 19, scope: !6347, inlinedAt: !6349)
!6363 = !DILocation(line: 40, column: 14, scope: !6347, inlinedAt: !6349)
!6364 = !DILocation(line: 40, column: 4, scope: !6347, inlinedAt: !6349)
!6365 = !DILocation(line: 40, column: 17, scope: !6347, inlinedAt: !6349)
!6366 = !DILocation(line: 271, column: 1, scope: !6345)
!6367 = distinct !DISubprogram(name: "regmap_format_16_native", scope: !3, file: !3, line: 273, type: !3559, scopeLine: 275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6368 = !DILocalVariable(name: "buf", arg: 1, scope: !6367, file: !3, line: 273, type: !64)
!6369 = !DILocation(line: 273, column: 43, scope: !6367)
!6370 = !DILocalVariable(name: "val", arg: 2, scope: !6367, file: !3, line: 273, type: !70)
!6371 = !DILocation(line: 273, column: 61, scope: !6367)
!6372 = !DILocalVariable(name: "shift", arg: 3, scope: !6367, file: !3, line: 274, type: !70)
!6373 = !DILocation(line: 274, column: 22, scope: !6367)
!6374 = !DILocalVariable(name: "v", scope: !6367, file: !3, line: 276, type: !694)
!6375 = !DILocation(line: 276, column: 6, scope: !6367)
!6376 = !DILocation(line: 276, column: 10, scope: !6367)
!6377 = !DILocation(line: 276, column: 17, scope: !6367)
!6378 = !DILocation(line: 276, column: 14, scope: !6367)
!6379 = !DILocation(line: 278, column: 9, scope: !6367)
!6380 = !DILocation(line: 278, column: 2, scope: !6367)
!6381 = !DILocation(line: 279, column: 1, scope: !6367)
!6382 = distinct !DISubprogram(name: "regmap_format_24", scope: !3, file: !3, line: 281, type: !3559, scopeLine: 282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6383 = !DILocalVariable(name: "buf", arg: 1, scope: !6382, file: !3, line: 281, type: !64)
!6384 = !DILocation(line: 281, column: 36, scope: !6382)
!6385 = !DILocalVariable(name: "val", arg: 2, scope: !6382, file: !3, line: 281, type: !70)
!6386 = !DILocation(line: 281, column: 54, scope: !6382)
!6387 = !DILocalVariable(name: "shift", arg: 3, scope: !6382, file: !3, line: 281, type: !70)
!6388 = !DILocation(line: 281, column: 72, scope: !6382)
!6389 = !DILocalVariable(name: "b", scope: !6382, file: !3, line: 283, type: !3826)
!6390 = !DILocation(line: 283, column: 6, scope: !6382)
!6391 = !DILocation(line: 283, column: 10, scope: !6382)
!6392 = !DILocation(line: 285, column: 10, scope: !6382)
!6393 = !DILocation(line: 285, column: 6, scope: !6382)
!6394 = !DILocation(line: 287, column: 9, scope: !6382)
!6395 = !DILocation(line: 287, column: 13, scope: !6382)
!6396 = !DILocation(line: 287, column: 2, scope: !6382)
!6397 = !DILocation(line: 287, column: 7, scope: !6382)
!6398 = !DILocation(line: 288, column: 9, scope: !6382)
!6399 = !DILocation(line: 288, column: 13, scope: !6382)
!6400 = !DILocation(line: 288, column: 2, scope: !6382)
!6401 = !DILocation(line: 288, column: 7, scope: !6382)
!6402 = !DILocation(line: 289, column: 9, scope: !6382)
!6403 = !DILocation(line: 289, column: 2, scope: !6382)
!6404 = !DILocation(line: 289, column: 7, scope: !6382)
!6405 = !DILocation(line: 290, column: 1, scope: !6382)
!6406 = distinct !DISubprogram(name: "regmap_format_32_be", scope: !3, file: !3, line: 292, type: !3559, scopeLine: 293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6407 = !DILocalVariable(name: "val", arg: 1, scope: !6408, file: !6323, line: 58, type: !261)
!6408 = distinct !DISubprogram(name: "put_unaligned_be32", scope: !6323, file: !6323, line: 58, type: !6409, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6409 = !DISubroutineType(types: !6410)
!6410 = !{null, !261, !64}
!6411 = !DILocation(line: 58, column: 52, scope: !6408, inlinedAt: !6412)
!6412 = distinct !DILocation(line: 294, column: 2, scope: !6406)
!6413 = !DILocalVariable(name: "p", arg: 2, scope: !6408, file: !6323, line: 58, type: !64)
!6414 = !DILocation(line: 58, column: 63, scope: !6408, inlinedAt: !6412)
!6415 = !DILocalVariable(name: "buf", arg: 1, scope: !6406, file: !3, line: 292, type: !64)
!6416 = !DILocation(line: 292, column: 39, scope: !6406)
!6417 = !DILocalVariable(name: "val", arg: 2, scope: !6406, file: !3, line: 292, type: !70)
!6418 = !DILocation(line: 292, column: 57, scope: !6406)
!6419 = !DILocalVariable(name: "shift", arg: 3, scope: !6406, file: !3, line: 292, type: !70)
!6420 = !DILocation(line: 292, column: 75, scope: !6406)
!6421 = !DILocation(line: 294, column: 21, scope: !6406)
!6422 = !DILocation(line: 294, column: 28, scope: !6406)
!6423 = !DILocation(line: 294, column: 25, scope: !6406)
!6424 = !DILocation(line: 294, column: 35, scope: !6406)
!6425 = !DILocation(line: 60, column: 19, scope: !6408, inlinedAt: !6412)
!6426 = !DILocation(line: 60, column: 14, scope: !6408, inlinedAt: !6412)
!6427 = !DILocation(line: 60, column: 4, scope: !6408, inlinedAt: !6412)
!6428 = !DILocation(line: 60, column: 17, scope: !6408, inlinedAt: !6412)
!6429 = !DILocation(line: 295, column: 1, scope: !6406)
!6430 = distinct !DISubprogram(name: "regmap_format_32_le", scope: !3, file: !3, line: 297, type: !3559, scopeLine: 298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6431 = !DILocalVariable(name: "val", arg: 1, scope: !6432, file: !6323, line: 43, type: !261)
!6432 = distinct !DISubprogram(name: "put_unaligned_le32", scope: !6323, file: !6323, line: 43, type: !6409, scopeLine: 44, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6433 = !DILocation(line: 43, column: 52, scope: !6432, inlinedAt: !6434)
!6434 = distinct !DILocation(line: 299, column: 2, scope: !6430)
!6435 = !DILocalVariable(name: "p", arg: 2, scope: !6432, file: !6323, line: 43, type: !64)
!6436 = !DILocation(line: 43, column: 63, scope: !6432, inlinedAt: !6434)
!6437 = !DILocalVariable(name: "buf", arg: 1, scope: !6430, file: !3, line: 297, type: !64)
!6438 = !DILocation(line: 297, column: 39, scope: !6430)
!6439 = !DILocalVariable(name: "val", arg: 2, scope: !6430, file: !3, line: 297, type: !70)
!6440 = !DILocation(line: 297, column: 57, scope: !6430)
!6441 = !DILocalVariable(name: "shift", arg: 3, scope: !6430, file: !3, line: 297, type: !70)
!6442 = !DILocation(line: 297, column: 75, scope: !6430)
!6443 = !DILocation(line: 299, column: 21, scope: !6430)
!6444 = !DILocation(line: 299, column: 28, scope: !6430)
!6445 = !DILocation(line: 299, column: 25, scope: !6430)
!6446 = !DILocation(line: 299, column: 35, scope: !6430)
!6447 = !DILocation(line: 45, column: 19, scope: !6432, inlinedAt: !6434)
!6448 = !DILocation(line: 45, column: 14, scope: !6432, inlinedAt: !6434)
!6449 = !DILocation(line: 45, column: 4, scope: !6432, inlinedAt: !6434)
!6450 = !DILocation(line: 45, column: 17, scope: !6432, inlinedAt: !6434)
!6451 = !DILocation(line: 300, column: 1, scope: !6430)
!6452 = distinct !DISubprogram(name: "regmap_format_32_native", scope: !3, file: !3, line: 302, type: !3559, scopeLine: 304, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6453 = !DILocalVariable(name: "buf", arg: 1, scope: !6452, file: !3, line: 302, type: !64)
!6454 = !DILocation(line: 302, column: 43, scope: !6452)
!6455 = !DILocalVariable(name: "val", arg: 2, scope: !6452, file: !3, line: 302, type: !70)
!6456 = !DILocation(line: 302, column: 61, scope: !6452)
!6457 = !DILocalVariable(name: "shift", arg: 3, scope: !6452, file: !3, line: 303, type: !70)
!6458 = !DILocation(line: 303, column: 22, scope: !6452)
!6459 = !DILocalVariable(name: "v", scope: !6452, file: !3, line: 305, type: !261)
!6460 = !DILocation(line: 305, column: 6, scope: !6452)
!6461 = !DILocation(line: 305, column: 10, scope: !6452)
!6462 = !DILocation(line: 305, column: 17, scope: !6452)
!6463 = !DILocation(line: 305, column: 14, scope: !6452)
!6464 = !DILocation(line: 307, column: 9, scope: !6452)
!6465 = !DILocation(line: 307, column: 2, scope: !6452)
!6466 = !DILocation(line: 308, column: 1, scope: !6452)
!6467 = distinct !DISubprogram(name: "regmap_format_64_be", scope: !3, file: !3, line: 311, type: !3559, scopeLine: 312, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6468 = !DILocalVariable(name: "val", arg: 1, scope: !6469, file: !6323, line: 63, type: !265)
!6469 = distinct !DISubprogram(name: "put_unaligned_be64", scope: !6323, file: !6323, line: 63, type: !6470, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6470 = !DISubroutineType(types: !6471)
!6471 = !{null, !265, !64}
!6472 = !DILocation(line: 63, column: 52, scope: !6469, inlinedAt: !6473)
!6473 = distinct !DILocation(line: 313, column: 2, scope: !6467)
!6474 = !DILocalVariable(name: "p", arg: 2, scope: !6469, file: !6323, line: 63, type: !64)
!6475 = !DILocation(line: 63, column: 63, scope: !6469, inlinedAt: !6473)
!6476 = !DILocalVariable(name: "buf", arg: 1, scope: !6467, file: !3, line: 311, type: !64)
!6477 = !DILocation(line: 311, column: 39, scope: !6467)
!6478 = !DILocalVariable(name: "val", arg: 2, scope: !6467, file: !3, line: 311, type: !70)
!6479 = !DILocation(line: 311, column: 57, scope: !6467)
!6480 = !DILocalVariable(name: "shift", arg: 3, scope: !6467, file: !3, line: 311, type: !70)
!6481 = !DILocation(line: 311, column: 75, scope: !6467)
!6482 = !DILocation(line: 313, column: 27, scope: !6467)
!6483 = !DILocation(line: 313, column: 21, scope: !6467)
!6484 = !DILocation(line: 313, column: 34, scope: !6467)
!6485 = !DILocation(line: 313, column: 31, scope: !6467)
!6486 = !DILocation(line: 313, column: 41, scope: !6467)
!6487 = !DILocation(line: 65, column: 19, scope: !6469, inlinedAt: !6473)
!6488 = !DILocation(line: 65, column: 14, scope: !6469, inlinedAt: !6473)
!6489 = !DILocation(line: 65, column: 4, scope: !6469, inlinedAt: !6473)
!6490 = !DILocation(line: 65, column: 17, scope: !6469, inlinedAt: !6473)
!6491 = !DILocation(line: 314, column: 1, scope: !6467)
!6492 = distinct !DISubprogram(name: "regmap_format_64_le", scope: !3, file: !3, line: 316, type: !3559, scopeLine: 317, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6493 = !DILocalVariable(name: "val", arg: 1, scope: !6494, file: !6323, line: 48, type: !265)
!6494 = distinct !DISubprogram(name: "put_unaligned_le64", scope: !6323, file: !6323, line: 48, type: !6470, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6495 = !DILocation(line: 48, column: 52, scope: !6494, inlinedAt: !6496)
!6496 = distinct !DILocation(line: 318, column: 2, scope: !6492)
!6497 = !DILocalVariable(name: "p", arg: 2, scope: !6494, file: !6323, line: 48, type: !64)
!6498 = !DILocation(line: 48, column: 63, scope: !6494, inlinedAt: !6496)
!6499 = !DILocalVariable(name: "buf", arg: 1, scope: !6492, file: !3, line: 316, type: !64)
!6500 = !DILocation(line: 316, column: 39, scope: !6492)
!6501 = !DILocalVariable(name: "val", arg: 2, scope: !6492, file: !3, line: 316, type: !70)
!6502 = !DILocation(line: 316, column: 57, scope: !6492)
!6503 = !DILocalVariable(name: "shift", arg: 3, scope: !6492, file: !3, line: 316, type: !70)
!6504 = !DILocation(line: 316, column: 75, scope: !6492)
!6505 = !DILocation(line: 318, column: 27, scope: !6492)
!6506 = !DILocation(line: 318, column: 21, scope: !6492)
!6507 = !DILocation(line: 318, column: 34, scope: !6492)
!6508 = !DILocation(line: 318, column: 31, scope: !6492)
!6509 = !DILocation(line: 318, column: 41, scope: !6492)
!6510 = !DILocation(line: 50, column: 19, scope: !6494, inlinedAt: !6496)
!6511 = !DILocation(line: 50, column: 14, scope: !6494, inlinedAt: !6496)
!6512 = !DILocation(line: 50, column: 4, scope: !6494, inlinedAt: !6496)
!6513 = !DILocation(line: 50, column: 17, scope: !6494, inlinedAt: !6496)
!6514 = !DILocation(line: 319, column: 1, scope: !6492)
!6515 = distinct !DISubprogram(name: "regmap_format_64_native", scope: !3, file: !3, line: 321, type: !3559, scopeLine: 323, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6516 = !DILocalVariable(name: "buf", arg: 1, scope: !6515, file: !3, line: 321, type: !64)
!6517 = !DILocation(line: 321, column: 43, scope: !6515)
!6518 = !DILocalVariable(name: "val", arg: 2, scope: !6515, file: !3, line: 321, type: !70)
!6519 = !DILocation(line: 321, column: 61, scope: !6515)
!6520 = !DILocalVariable(name: "shift", arg: 3, scope: !6515, file: !3, line: 322, type: !70)
!6521 = !DILocation(line: 322, column: 22, scope: !6515)
!6522 = !DILocalVariable(name: "v", scope: !6515, file: !3, line: 324, type: !265)
!6523 = !DILocation(line: 324, column: 6, scope: !6515)
!6524 = !DILocation(line: 324, column: 16, scope: !6515)
!6525 = !DILocation(line: 324, column: 10, scope: !6515)
!6526 = !DILocation(line: 324, column: 23, scope: !6515)
!6527 = !DILocation(line: 324, column: 20, scope: !6515)
!6528 = !DILocation(line: 326, column: 9, scope: !6515)
!6529 = !DILocation(line: 326, column: 2, scope: !6515)
!6530 = !DILocation(line: 327, column: 1, scope: !6515)
!6531 = distinct !DISubprogram(name: "regmap_parse_inplace_noop", scope: !3, file: !3, line: 330, type: !62, scopeLine: 331, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6532 = !DILocalVariable(name: "buf", arg: 1, scope: !6531, file: !3, line: 330, type: !64)
!6533 = !DILocation(line: 330, column: 45, scope: !6531)
!6534 = !DILocation(line: 332, column: 1, scope: !6531)
!6535 = distinct !DISubprogram(name: "regmap_parse_8", scope: !3, file: !3, line: 334, type: !3564, scopeLine: 335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6536 = !DILocalVariable(name: "buf", arg: 1, scope: !6535, file: !3, line: 334, type: !1880)
!6537 = !DILocation(line: 334, column: 48, scope: !6535)
!6538 = !DILocalVariable(name: "b", scope: !6535, file: !3, line: 336, type: !6539)
!6539 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6540, size: 64)
!6540 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1097)
!6541 = !DILocation(line: 336, column: 12, scope: !6535)
!6542 = !DILocation(line: 336, column: 16, scope: !6535)
!6543 = !DILocation(line: 338, column: 9, scope: !6535)
!6544 = !DILocation(line: 338, column: 2, scope: !6535)
!6545 = distinct !DISubprogram(name: "regmap_parse_16_be", scope: !3, file: !3, line: 341, type: !3564, scopeLine: 342, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6546 = !DILocalVariable(name: "p", arg: 1, scope: !6547, file: !6548, line: 171, type: !6551)
!6547 = distinct !DISubprogram(name: "__swab16p", scope: !6548, file: !6548, line: 171, type: !6549, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6548 = !DIFile(filename: "./include/uapi/linux/swab.h", directory: "/home/lizy2001/genbc/linux")
!6549 = !DISubroutineType(types: !6550)
!6550 = !{!695, !6551}
!6551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6552, size: 64)
!6552 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !695)
!6553 = !DILocation(line: 171, column: 53, scope: !6547, inlinedAt: !6554)
!6554 = distinct !DILocation(line: 90, column: 9, scope: !6555, inlinedAt: !6561)
!6555 = distinct !DISubprogram(name: "__be16_to_cpup", scope: !6556, file: !6556, line: 88, type: !6557, scopeLine: 89, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6556 = !DIFile(filename: "./include/uapi/linux/byteorder/little_endian.h", directory: "/home/lizy2001/genbc/linux")
!6557 = !DISubroutineType(types: !6558)
!6558 = !{!695, !6559}
!6559 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6560, size: 64)
!6560 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3829)
!6561 = distinct !DILocation(line: 25, column: 9, scope: !6562, inlinedAt: !6565)
!6562 = distinct !DISubprogram(name: "get_unaligned_be16", scope: !6323, file: !6323, line: 23, type: !6563, scopeLine: 24, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6563 = !DISubroutineType(types: !6564)
!6564 = !{!694, !1880}
!6565 = distinct !DILocation(line: 343, column: 9, scope: !6545)
!6566 = !DILocalVariable(name: "p", arg: 1, scope: !6555, file: !6556, line: 88, type: !6559)
!6567 = !DILocation(line: 88, column: 59, scope: !6555, inlinedAt: !6561)
!6568 = !DILocalVariable(name: "p", arg: 1, scope: !6562, file: !6323, line: 23, type: !1880)
!6569 = !DILocation(line: 23, column: 59, scope: !6562, inlinedAt: !6565)
!6570 = !DILocalVariable(name: "buf", arg: 1, scope: !6545, file: !3, line: 341, type: !1880)
!6571 = !DILocation(line: 341, column: 52, scope: !6545)
!6572 = !DILocation(line: 343, column: 28, scope: !6545)
!6573 = !DILocation(line: 25, column: 32, scope: !6562, inlinedAt: !6565)
!6574 = !DILocation(line: 25, column: 22, scope: !6562, inlinedAt: !6565)
!6575 = !DILocation(line: 90, column: 28, scope: !6555, inlinedAt: !6561)
!6576 = !DILocation(line: 176, column: 9, scope: !6547, inlinedAt: !6554)
!6577 = !DILocation(line: 343, column: 9, scope: !6545)
!6578 = !DILocation(line: 343, column: 2, scope: !6545)
!6579 = distinct !DISubprogram(name: "regmap_parse_16_be_inplace", scope: !3, file: !3, line: 351, type: !62, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6580 = !DILocation(line: 171, column: 53, scope: !6547, inlinedAt: !6581)
!6581 = distinct !DILocation(line: 90, column: 9, scope: !6555, inlinedAt: !6582)
!6582 = distinct !DILocation(line: 25, column: 9, scope: !6562, inlinedAt: !6583)
!6583 = distinct !DILocation(line: 353, column: 10, scope: !6579)
!6584 = !DILocation(line: 88, column: 59, scope: !6555, inlinedAt: !6582)
!6585 = !DILocation(line: 23, column: 59, scope: !6562, inlinedAt: !6583)
!6586 = !DILocalVariable(name: "buf", arg: 1, scope: !6579, file: !3, line: 351, type: !64)
!6587 = !DILocation(line: 351, column: 46, scope: !6579)
!6588 = !DILocalVariable(name: "v", scope: !6579, file: !3, line: 353, type: !694)
!6589 = !DILocation(line: 353, column: 6, scope: !6579)
!6590 = !DILocation(line: 353, column: 29, scope: !6579)
!6591 = !DILocation(line: 25, column: 32, scope: !6562, inlinedAt: !6583)
!6592 = !DILocation(line: 25, column: 22, scope: !6562, inlinedAt: !6583)
!6593 = !DILocation(line: 90, column: 28, scope: !6555, inlinedAt: !6582)
!6594 = !DILocation(line: 176, column: 9, scope: !6547, inlinedAt: !6581)
!6595 = !DILocation(line: 355, column: 9, scope: !6579)
!6596 = !DILocation(line: 355, column: 2, scope: !6579)
!6597 = !DILocation(line: 356, column: 1, scope: !6579)
!6598 = distinct !DISubprogram(name: "regmap_parse_16_le", scope: !3, file: !3, line: 346, type: !3564, scopeLine: 347, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6599 = !DILocalVariable(name: "p", arg: 1, scope: !6600, file: !6556, line: 64, type: !6603)
!6600 = distinct !DISubprogram(name: "__le16_to_cpup", scope: !6556, file: !6556, line: 64, type: !6601, scopeLine: 65, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6601 = !DISubroutineType(types: !6602)
!6602 = !{!695, !6603}
!6603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6604, size: 64)
!6604 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3831)
!6605 = !DILocation(line: 64, column: 59, scope: !6600, inlinedAt: !6606)
!6606 = distinct !DILocation(line: 10, column: 9, scope: !6607, inlinedAt: !6608)
!6607 = distinct !DISubprogram(name: "get_unaligned_le16", scope: !6323, file: !6323, line: 8, type: !6563, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6608 = distinct !DILocation(line: 348, column: 9, scope: !6598)
!6609 = !DILocalVariable(name: "p", arg: 1, scope: !6607, file: !6323, line: 8, type: !1880)
!6610 = !DILocation(line: 8, column: 59, scope: !6607, inlinedAt: !6608)
!6611 = !DILocalVariable(name: "buf", arg: 1, scope: !6598, file: !3, line: 346, type: !1880)
!6612 = !DILocation(line: 346, column: 52, scope: !6598)
!6613 = !DILocation(line: 348, column: 28, scope: !6598)
!6614 = !DILocation(line: 10, column: 32, scope: !6607, inlinedAt: !6608)
!6615 = !DILocation(line: 10, column: 22, scope: !6607, inlinedAt: !6608)
!6616 = !DILocation(line: 66, column: 25, scope: !6600, inlinedAt: !6606)
!6617 = !DILocation(line: 66, column: 24, scope: !6600, inlinedAt: !6606)
!6618 = !DILocation(line: 348, column: 9, scope: !6598)
!6619 = !DILocation(line: 348, column: 2, scope: !6598)
!6620 = distinct !DISubprogram(name: "regmap_parse_16_le_inplace", scope: !3, file: !3, line: 358, type: !62, scopeLine: 359, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6621 = !DILocation(line: 64, column: 59, scope: !6600, inlinedAt: !6622)
!6622 = distinct !DILocation(line: 10, column: 9, scope: !6607, inlinedAt: !6623)
!6623 = distinct !DILocation(line: 360, column: 10, scope: !6620)
!6624 = !DILocation(line: 8, column: 59, scope: !6607, inlinedAt: !6623)
!6625 = !DILocalVariable(name: "buf", arg: 1, scope: !6620, file: !3, line: 358, type: !64)
!6626 = !DILocation(line: 358, column: 46, scope: !6620)
!6627 = !DILocalVariable(name: "v", scope: !6620, file: !3, line: 360, type: !694)
!6628 = !DILocation(line: 360, column: 6, scope: !6620)
!6629 = !DILocation(line: 360, column: 29, scope: !6620)
!6630 = !DILocation(line: 10, column: 32, scope: !6607, inlinedAt: !6623)
!6631 = !DILocation(line: 10, column: 22, scope: !6607, inlinedAt: !6623)
!6632 = !DILocation(line: 66, column: 25, scope: !6600, inlinedAt: !6622)
!6633 = !DILocation(line: 66, column: 24, scope: !6600, inlinedAt: !6622)
!6634 = !DILocation(line: 362, column: 9, scope: !6620)
!6635 = !DILocation(line: 362, column: 2, scope: !6620)
!6636 = !DILocation(line: 363, column: 1, scope: !6620)
!6637 = distinct !DISubprogram(name: "regmap_parse_16_native", scope: !3, file: !3, line: 365, type: !3564, scopeLine: 366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6638 = !DILocalVariable(name: "buf", arg: 1, scope: !6637, file: !3, line: 365, type: !1880)
!6639 = !DILocation(line: 365, column: 56, scope: !6637)
!6640 = !DILocalVariable(name: "v", scope: !6637, file: !3, line: 367, type: !694)
!6641 = !DILocation(line: 367, column: 6, scope: !6637)
!6642 = !DILocation(line: 369, column: 2, scope: !6637)
!6643 = !DILocation(line: 369, column: 13, scope: !6637)
!6644 = !DILocation(line: 370, column: 9, scope: !6637)
!6645 = !DILocation(line: 370, column: 2, scope: !6637)
!6646 = distinct !DISubprogram(name: "regmap_parse_24", scope: !3, file: !3, line: 373, type: !3564, scopeLine: 374, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6647 = !DILocalVariable(name: "buf", arg: 1, scope: !6646, file: !3, line: 373, type: !1880)
!6648 = !DILocation(line: 373, column: 49, scope: !6646)
!6649 = !DILocalVariable(name: "b", scope: !6646, file: !3, line: 375, type: !6539)
!6650 = !DILocation(line: 375, column: 12, scope: !6646)
!6651 = !DILocation(line: 375, column: 16, scope: !6646)
!6652 = !DILocalVariable(name: "ret", scope: !6646, file: !3, line: 376, type: !70)
!6653 = !DILocation(line: 376, column: 15, scope: !6646)
!6654 = !DILocation(line: 376, column: 21, scope: !6646)
!6655 = !DILocation(line: 377, column: 24, scope: !6646)
!6656 = !DILocation(line: 377, column: 10, scope: !6646)
!6657 = !DILocation(line: 377, column: 30, scope: !6646)
!6658 = !DILocation(line: 377, column: 6, scope: !6646)
!6659 = !DILocation(line: 378, column: 24, scope: !6646)
!6660 = !DILocation(line: 378, column: 10, scope: !6646)
!6661 = !DILocation(line: 378, column: 30, scope: !6646)
!6662 = !DILocation(line: 378, column: 6, scope: !6646)
!6663 = !DILocation(line: 380, column: 9, scope: !6646)
!6664 = !DILocation(line: 380, column: 2, scope: !6646)
!6665 = distinct !DISubprogram(name: "regmap_parse_32_be", scope: !3, file: !3, line: 383, type: !3564, scopeLine: 384, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6666 = !DILocalVariable(name: "p", arg: 1, scope: !6667, file: !6548, line: 184, type: !6670)
!6667 = distinct !DISubprogram(name: "__swab32p", scope: !6548, file: !6548, line: 184, type: !6668, scopeLine: 185, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6668 = !DISubroutineType(types: !6669)
!6669 = !{!262, !6670}
!6670 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6671, size: 64)
!6671 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !262)
!6672 = !DILocation(line: 184, column: 53, scope: !6667, inlinedAt: !6673)
!6673 = distinct !DILocation(line: 82, column: 9, scope: !6674, inlinedAt: !6679)
!6674 = distinct !DISubprogram(name: "__be32_to_cpup", scope: !6556, file: !6556, line: 80, type: !6675, scopeLine: 81, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6675 = !DISubroutineType(types: !6676)
!6676 = !{!262, !6677}
!6677 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6678, size: 64)
!6678 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3833)
!6679 = distinct !DILocation(line: 30, column: 9, scope: !6680, inlinedAt: !6683)
!6680 = distinct !DISubprogram(name: "get_unaligned_be32", scope: !6323, file: !6323, line: 28, type: !6681, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6681 = !DISubroutineType(types: !6682)
!6682 = !{!261, !1880}
!6683 = distinct !DILocation(line: 385, column: 9, scope: !6665)
!6684 = !DILocalVariable(name: "p", arg: 1, scope: !6674, file: !6556, line: 80, type: !6677)
!6685 = !DILocation(line: 80, column: 59, scope: !6674, inlinedAt: !6679)
!6686 = !DILocalVariable(name: "p", arg: 1, scope: !6680, file: !6323, line: 28, type: !1880)
!6687 = !DILocation(line: 28, column: 59, scope: !6680, inlinedAt: !6683)
!6688 = !DILocalVariable(name: "buf", arg: 1, scope: !6665, file: !3, line: 383, type: !1880)
!6689 = !DILocation(line: 383, column: 52, scope: !6665)
!6690 = !DILocation(line: 385, column: 28, scope: !6665)
!6691 = !DILocation(line: 30, column: 32, scope: !6680, inlinedAt: !6683)
!6692 = !DILocation(line: 30, column: 22, scope: !6680, inlinedAt: !6683)
!6693 = !DILocation(line: 82, column: 28, scope: !6674, inlinedAt: !6679)
!6694 = !DILocation(line: 189, column: 9, scope: !6667, inlinedAt: !6673)
!6695 = !DILocation(line: 385, column: 2, scope: !6665)
!6696 = distinct !DISubprogram(name: "regmap_parse_32_be_inplace", scope: !3, file: !3, line: 393, type: !62, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6697 = !DILocation(line: 184, column: 53, scope: !6667, inlinedAt: !6698)
!6698 = distinct !DILocation(line: 82, column: 9, scope: !6674, inlinedAt: !6699)
!6699 = distinct !DILocation(line: 30, column: 9, scope: !6680, inlinedAt: !6700)
!6700 = distinct !DILocation(line: 395, column: 10, scope: !6696)
!6701 = !DILocation(line: 80, column: 59, scope: !6674, inlinedAt: !6699)
!6702 = !DILocation(line: 28, column: 59, scope: !6680, inlinedAt: !6700)
!6703 = !DILocalVariable(name: "buf", arg: 1, scope: !6696, file: !3, line: 393, type: !64)
!6704 = !DILocation(line: 393, column: 46, scope: !6696)
!6705 = !DILocalVariable(name: "v", scope: !6696, file: !3, line: 395, type: !261)
!6706 = !DILocation(line: 395, column: 6, scope: !6696)
!6707 = !DILocation(line: 395, column: 29, scope: !6696)
!6708 = !DILocation(line: 30, column: 32, scope: !6680, inlinedAt: !6700)
!6709 = !DILocation(line: 30, column: 22, scope: !6680, inlinedAt: !6700)
!6710 = !DILocation(line: 82, column: 28, scope: !6674, inlinedAt: !6699)
!6711 = !DILocation(line: 189, column: 9, scope: !6667, inlinedAt: !6698)
!6712 = !DILocation(line: 397, column: 9, scope: !6696)
!6713 = !DILocation(line: 397, column: 2, scope: !6696)
!6714 = !DILocation(line: 398, column: 1, scope: !6696)
!6715 = distinct !DISubprogram(name: "regmap_parse_32_le", scope: !3, file: !3, line: 388, type: !3564, scopeLine: 389, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6716 = !DILocalVariable(name: "p", arg: 1, scope: !6717, file: !6556, line: 56, type: !6720)
!6717 = distinct !DISubprogram(name: "__le32_to_cpup", scope: !6556, file: !6556, line: 56, type: !6718, scopeLine: 57, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6718 = !DISubroutineType(types: !6719)
!6719 = !{!262, !6720}
!6720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6721, size: 64)
!6721 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3835)
!6722 = !DILocation(line: 56, column: 59, scope: !6717, inlinedAt: !6723)
!6723 = distinct !DILocation(line: 15, column: 9, scope: !6724, inlinedAt: !6725)
!6724 = distinct !DISubprogram(name: "get_unaligned_le32", scope: !6323, file: !6323, line: 13, type: !6681, scopeLine: 14, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6725 = distinct !DILocation(line: 390, column: 9, scope: !6715)
!6726 = !DILocalVariable(name: "p", arg: 1, scope: !6724, file: !6323, line: 13, type: !1880)
!6727 = !DILocation(line: 13, column: 59, scope: !6724, inlinedAt: !6725)
!6728 = !DILocalVariable(name: "buf", arg: 1, scope: !6715, file: !3, line: 388, type: !1880)
!6729 = !DILocation(line: 388, column: 52, scope: !6715)
!6730 = !DILocation(line: 390, column: 28, scope: !6715)
!6731 = !DILocation(line: 15, column: 32, scope: !6724, inlinedAt: !6725)
!6732 = !DILocation(line: 15, column: 22, scope: !6724, inlinedAt: !6725)
!6733 = !DILocation(line: 58, column: 25, scope: !6717, inlinedAt: !6723)
!6734 = !DILocation(line: 58, column: 24, scope: !6717, inlinedAt: !6723)
!6735 = !DILocation(line: 390, column: 2, scope: !6715)
!6736 = distinct !DISubprogram(name: "regmap_parse_32_le_inplace", scope: !3, file: !3, line: 400, type: !62, scopeLine: 401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6737 = !DILocation(line: 56, column: 59, scope: !6717, inlinedAt: !6738)
!6738 = distinct !DILocation(line: 15, column: 9, scope: !6724, inlinedAt: !6739)
!6739 = distinct !DILocation(line: 402, column: 10, scope: !6736)
!6740 = !DILocation(line: 13, column: 59, scope: !6724, inlinedAt: !6739)
!6741 = !DILocalVariable(name: "buf", arg: 1, scope: !6736, file: !3, line: 400, type: !64)
!6742 = !DILocation(line: 400, column: 46, scope: !6736)
!6743 = !DILocalVariable(name: "v", scope: !6736, file: !3, line: 402, type: !261)
!6744 = !DILocation(line: 402, column: 6, scope: !6736)
!6745 = !DILocation(line: 402, column: 29, scope: !6736)
!6746 = !DILocation(line: 15, column: 32, scope: !6724, inlinedAt: !6739)
!6747 = !DILocation(line: 15, column: 22, scope: !6724, inlinedAt: !6739)
!6748 = !DILocation(line: 58, column: 25, scope: !6717, inlinedAt: !6738)
!6749 = !DILocation(line: 58, column: 24, scope: !6717, inlinedAt: !6738)
!6750 = !DILocation(line: 404, column: 9, scope: !6736)
!6751 = !DILocation(line: 404, column: 2, scope: !6736)
!6752 = !DILocation(line: 405, column: 1, scope: !6736)
!6753 = distinct !DISubprogram(name: "regmap_parse_32_native", scope: !3, file: !3, line: 407, type: !3564, scopeLine: 408, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6754 = !DILocalVariable(name: "buf", arg: 1, scope: !6753, file: !3, line: 407, type: !1880)
!6755 = !DILocation(line: 407, column: 56, scope: !6753)
!6756 = !DILocalVariable(name: "v", scope: !6753, file: !3, line: 409, type: !261)
!6757 = !DILocation(line: 409, column: 6, scope: !6753)
!6758 = !DILocation(line: 411, column: 2, scope: !6753)
!6759 = !DILocation(line: 411, column: 13, scope: !6753)
!6760 = !DILocation(line: 412, column: 9, scope: !6753)
!6761 = !DILocation(line: 412, column: 2, scope: !6753)
!6762 = distinct !DISubprogram(name: "regmap_parse_64_be", scope: !3, file: !3, line: 416, type: !3564, scopeLine: 417, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6763 = !DILocalVariable(name: "p", arg: 1, scope: !6764, file: !6548, line: 197, type: !6767)
!6764 = distinct !DISubprogram(name: "__swab64p", scope: !6548, file: !6548, line: 197, type: !6765, scopeLine: 198, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6765 = !DISubroutineType(types: !6766)
!6766 = !{!266, !6767}
!6767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6768, size: 64)
!6768 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !266)
!6769 = !DILocation(line: 197, column: 53, scope: !6764, inlinedAt: !6770)
!6770 = distinct !DILocation(line: 74, column: 9, scope: !6771, inlinedAt: !6776)
!6771 = distinct !DISubprogram(name: "__be64_to_cpup", scope: !6556, file: !6556, line: 72, type: !6772, scopeLine: 73, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6772 = !DISubroutineType(types: !6773)
!6773 = !{!266, !6774}
!6774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6775, size: 64)
!6775 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3837)
!6776 = distinct !DILocation(line: 35, column: 9, scope: !6777, inlinedAt: !6780)
!6777 = distinct !DISubprogram(name: "get_unaligned_be64", scope: !6323, file: !6323, line: 33, type: !6778, scopeLine: 34, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6778 = !DISubroutineType(types: !6779)
!6779 = !{!265, !1880}
!6780 = distinct !DILocation(line: 418, column: 9, scope: !6762)
!6781 = !DILocalVariable(name: "p", arg: 1, scope: !6771, file: !6556, line: 72, type: !6774)
!6782 = !DILocation(line: 72, column: 59, scope: !6771, inlinedAt: !6776)
!6783 = !DILocalVariable(name: "p", arg: 1, scope: !6777, file: !6323, line: 33, type: !1880)
!6784 = !DILocation(line: 33, column: 59, scope: !6777, inlinedAt: !6780)
!6785 = !DILocalVariable(name: "buf", arg: 1, scope: !6762, file: !3, line: 416, type: !1880)
!6786 = !DILocation(line: 416, column: 52, scope: !6762)
!6787 = !DILocation(line: 418, column: 28, scope: !6762)
!6788 = !DILocation(line: 35, column: 32, scope: !6777, inlinedAt: !6780)
!6789 = !DILocation(line: 35, column: 22, scope: !6777, inlinedAt: !6780)
!6790 = !DILocation(line: 74, column: 28, scope: !6771, inlinedAt: !6776)
!6791 = !DILocation(line: 202, column: 9, scope: !6764, inlinedAt: !6770)
!6792 = !DILocation(line: 418, column: 9, scope: !6762)
!6793 = !DILocation(line: 418, column: 2, scope: !6762)
!6794 = distinct !DISubprogram(name: "regmap_parse_64_be_inplace", scope: !3, file: !3, line: 426, type: !62, scopeLine: 427, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6795 = !DILocation(line: 197, column: 53, scope: !6764, inlinedAt: !6796)
!6796 = distinct !DILocation(line: 74, column: 9, scope: !6771, inlinedAt: !6797)
!6797 = distinct !DILocation(line: 35, column: 9, scope: !6777, inlinedAt: !6798)
!6798 = distinct !DILocation(line: 428, column: 11, scope: !6794)
!6799 = !DILocation(line: 72, column: 59, scope: !6771, inlinedAt: !6797)
!6800 = !DILocation(line: 33, column: 59, scope: !6777, inlinedAt: !6798)
!6801 = !DILocalVariable(name: "buf", arg: 1, scope: !6794, file: !3, line: 426, type: !64)
!6802 = !DILocation(line: 426, column: 46, scope: !6794)
!6803 = !DILocalVariable(name: "v", scope: !6794, file: !3, line: 428, type: !265)
!6804 = !DILocation(line: 428, column: 6, scope: !6794)
!6805 = !DILocation(line: 428, column: 30, scope: !6794)
!6806 = !DILocation(line: 35, column: 32, scope: !6777, inlinedAt: !6798)
!6807 = !DILocation(line: 35, column: 22, scope: !6777, inlinedAt: !6798)
!6808 = !DILocation(line: 74, column: 28, scope: !6771, inlinedAt: !6797)
!6809 = !DILocation(line: 202, column: 9, scope: !6764, inlinedAt: !6796)
!6810 = !DILocation(line: 430, column: 9, scope: !6794)
!6811 = !DILocation(line: 430, column: 2, scope: !6794)
!6812 = !DILocation(line: 431, column: 1, scope: !6794)
!6813 = distinct !DISubprogram(name: "regmap_parse_64_le", scope: !3, file: !3, line: 421, type: !3564, scopeLine: 422, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6814 = !DILocalVariable(name: "p", arg: 1, scope: !6815, file: !6556, line: 48, type: !6818)
!6815 = distinct !DISubprogram(name: "__le64_to_cpup", scope: !6556, file: !6556, line: 48, type: !6816, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6816 = !DISubroutineType(types: !6817)
!6817 = !{!266, !6818}
!6818 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6819, size: 64)
!6819 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3839)
!6820 = !DILocation(line: 48, column: 59, scope: !6815, inlinedAt: !6821)
!6821 = distinct !DILocation(line: 20, column: 9, scope: !6822, inlinedAt: !6823)
!6822 = distinct !DISubprogram(name: "get_unaligned_le64", scope: !6323, file: !6323, line: 18, type: !6778, scopeLine: 19, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6823 = distinct !DILocation(line: 423, column: 9, scope: !6813)
!6824 = !DILocalVariable(name: "p", arg: 1, scope: !6822, file: !6323, line: 18, type: !1880)
!6825 = !DILocation(line: 18, column: 59, scope: !6822, inlinedAt: !6823)
!6826 = !DILocalVariable(name: "buf", arg: 1, scope: !6813, file: !3, line: 421, type: !1880)
!6827 = !DILocation(line: 421, column: 52, scope: !6813)
!6828 = !DILocation(line: 423, column: 28, scope: !6813)
!6829 = !DILocation(line: 20, column: 32, scope: !6822, inlinedAt: !6823)
!6830 = !DILocation(line: 20, column: 22, scope: !6822, inlinedAt: !6823)
!6831 = !DILocation(line: 50, column: 25, scope: !6815, inlinedAt: !6821)
!6832 = !DILocation(line: 50, column: 24, scope: !6815, inlinedAt: !6821)
!6833 = !DILocation(line: 423, column: 9, scope: !6813)
!6834 = !DILocation(line: 423, column: 2, scope: !6813)
!6835 = distinct !DISubprogram(name: "regmap_parse_64_le_inplace", scope: !3, file: !3, line: 433, type: !62, scopeLine: 434, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6836 = !DILocation(line: 48, column: 59, scope: !6815, inlinedAt: !6837)
!6837 = distinct !DILocation(line: 20, column: 9, scope: !6822, inlinedAt: !6838)
!6838 = distinct !DILocation(line: 435, column: 10, scope: !6835)
!6839 = !DILocation(line: 18, column: 59, scope: !6822, inlinedAt: !6838)
!6840 = !DILocalVariable(name: "buf", arg: 1, scope: !6835, file: !3, line: 433, type: !64)
!6841 = !DILocation(line: 433, column: 46, scope: !6835)
!6842 = !DILocalVariable(name: "v", scope: !6835, file: !3, line: 435, type: !265)
!6843 = !DILocation(line: 435, column: 6, scope: !6835)
!6844 = !DILocation(line: 435, column: 29, scope: !6835)
!6845 = !DILocation(line: 20, column: 32, scope: !6822, inlinedAt: !6838)
!6846 = !DILocation(line: 20, column: 22, scope: !6822, inlinedAt: !6838)
!6847 = !DILocation(line: 50, column: 25, scope: !6815, inlinedAt: !6837)
!6848 = !DILocation(line: 50, column: 24, scope: !6815, inlinedAt: !6837)
!6849 = !DILocation(line: 437, column: 9, scope: !6835)
!6850 = !DILocation(line: 437, column: 2, scope: !6835)
!6851 = !DILocation(line: 438, column: 1, scope: !6835)
!6852 = distinct !DISubprogram(name: "regmap_parse_64_native", scope: !3, file: !3, line: 440, type: !3564, scopeLine: 441, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6853 = !DILocalVariable(name: "buf", arg: 1, scope: !6852, file: !3, line: 440, type: !1880)
!6854 = !DILocation(line: 440, column: 56, scope: !6852)
!6855 = !DILocalVariable(name: "v", scope: !6852, file: !3, line: 442, type: !265)
!6856 = !DILocation(line: 442, column: 6, scope: !6852)
!6857 = !DILocation(line: 444, column: 2, scope: !6852)
!6858 = !DILocation(line: 444, column: 13, scope: !6852)
!6859 = !DILocation(line: 445, column: 9, scope: !6852)
!6860 = !DILocation(line: 445, column: 2, scope: !6852)
!6861 = distinct !DISubprogram(name: "_regmap_bus_formatted_write", scope: !3, file: !3, line: 1850, type: !3597, scopeLine: 1852, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6862 = !DILocalVariable(name: "context", arg: 1, scope: !6861, file: !3, line: 1850, type: !64)
!6863 = !DILocation(line: 1850, column: 46, scope: !6861)
!6864 = !DILocalVariable(name: "reg", arg: 2, scope: !6861, file: !3, line: 1850, type: !70)
!6865 = !DILocation(line: 1850, column: 68, scope: !6861)
!6866 = !DILocalVariable(name: "val", arg: 3, scope: !6861, file: !3, line: 1851, type: !70)
!6867 = !DILocation(line: 1851, column: 25, scope: !6861)
!6868 = !DILocalVariable(name: "ret", scope: !6861, file: !3, line: 1853, type: !104)
!6869 = !DILocation(line: 1853, column: 6, scope: !6861)
!6870 = !DILocalVariable(name: "range", scope: !6861, file: !3, line: 1854, type: !3844)
!6871 = !DILocation(line: 1854, column: 28, scope: !6861)
!6872 = !DILocalVariable(name: "map", scope: !6861, file: !3, line: 1855, type: !6)
!6873 = !DILocation(line: 1855, column: 17, scope: !6861)
!6874 = !DILocation(line: 1855, column: 23, scope: !6861)
!6875 = !DILocalVariable(name: "__ret_warn_on", scope: !6876, file: !3, line: 1857, type: !104)
!6876 = distinct !DILexicalBlock(scope: !6861, file: !3, line: 1857, column: 2)
!6877 = !DILocation(line: 1857, column: 2, scope: !6876)
!6878 = !DILocation(line: 1857, column: 2, scope: !6879)
!6879 = distinct !DILexicalBlock(scope: !6876, file: !3, line: 1857, column: 2)
!6880 = !DILocation(line: 1857, column: 2, scope: !6881)
!6881 = distinct !DILexicalBlock(scope: !6879, file: !3, line: 1857, column: 2)
!6882 = !DILocation(line: 1857, column: 2, scope: !6883)
!6883 = distinct !DILexicalBlock(scope: !6881, file: !3, line: 1857, column: 2)
!6884 = !DILocation(line: 1857, column: 2, scope: !6885)
!6885 = distinct !DILexicalBlock(scope: !6881, file: !3, line: 1857, column: 2)
!6886 = !{i32 -2142551761, i32 -2142551732, i32 -2142551686, i32 -2142551628, i32 -2142551574, i32 -2142551520, i32 -2142551465, i32 -2142551434}
!6887 = !DILocation(line: 1857, column: 2, scope: !6888)
!6888 = distinct !DILexicalBlock(scope: !6881, file: !3, line: 1857, column: 2)
!6889 = !{i32 -2142551023, i32 -2142551016, i32 -2142550964, i32 -2142550933, i32 -2142550903}
!6890 = !DILocation(line: 1857, column: 2, scope: !6891)
!6891 = distinct !DILexicalBlock(scope: !6881, file: !3, line: 1857, column: 2)
!6892 = !DILocation(line: 1859, column: 31, scope: !6861)
!6893 = !DILocation(line: 1859, column: 36, scope: !6861)
!6894 = !DILocation(line: 1859, column: 10, scope: !6861)
!6895 = !DILocation(line: 1859, column: 8, scope: !6861)
!6896 = !DILocation(line: 1860, column: 6, scope: !6897)
!6897 = distinct !DILexicalBlock(scope: !6861, file: !3, line: 1860, column: 6)
!6898 = !DILocation(line: 1860, column: 6, scope: !6861)
!6899 = !DILocation(line: 1861, column: 29, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 1860, column: 13)
!6901 = !DILocation(line: 1861, column: 40, scope: !6900)
!6902 = !DILocation(line: 1861, column: 9, scope: !6900)
!6903 = !DILocation(line: 1861, column: 7, scope: !6900)
!6904 = !DILocation(line: 1862, column: 7, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6900, file: !3, line: 1862, column: 7)
!6906 = !DILocation(line: 1862, column: 11, scope: !6905)
!6907 = !DILocation(line: 1862, column: 7, scope: !6900)
!6908 = !DILocation(line: 1863, column: 11, scope: !6905)
!6909 = !DILocation(line: 1863, column: 4, scope: !6905)
!6910 = !DILocation(line: 1864, column: 2, scope: !6900)
!6911 = !DILocation(line: 1866, column: 2, scope: !6861)
!6912 = !DILocation(line: 1866, column: 7, scope: !6861)
!6913 = !DILocation(line: 1866, column: 14, scope: !6861)
!6914 = !DILocation(line: 1866, column: 27, scope: !6861)
!6915 = !DILocation(line: 1866, column: 32, scope: !6861)
!6916 = !DILocation(line: 1866, column: 37, scope: !6861)
!6917 = !DILocation(line: 1868, column: 30, scope: !6861)
!6918 = !DILocation(line: 1868, column: 35, scope: !6861)
!6919 = !DILocation(line: 1868, column: 2, scope: !6861)
!6920 = !DILocation(line: 1870, column: 8, scope: !6861)
!6921 = !DILocation(line: 1870, column: 13, scope: !6861)
!6922 = !DILocation(line: 1870, column: 18, scope: !6861)
!6923 = !DILocation(line: 1870, column: 24, scope: !6861)
!6924 = !DILocation(line: 1870, column: 29, scope: !6861)
!6925 = !DILocation(line: 1870, column: 42, scope: !6861)
!6926 = !DILocation(line: 1870, column: 47, scope: !6861)
!6927 = !DILocation(line: 1871, column: 10, scope: !6861)
!6928 = !DILocation(line: 1871, column: 15, scope: !6861)
!6929 = !DILocation(line: 1871, column: 22, scope: !6861)
!6930 = !DILocation(line: 1870, column: 6, scope: !6861)
!6931 = !DILocation(line: 1873, column: 29, scope: !6861)
!6932 = !DILocation(line: 1873, column: 34, scope: !6861)
!6933 = !DILocation(line: 1873, column: 2, scope: !6861)
!6934 = !DILocation(line: 1875, column: 9, scope: !6861)
!6935 = !DILocation(line: 1875, column: 2, scope: !6861)
!6936 = !DILocation(line: 1876, column: 1, scope: !6861)
!6937 = distinct !DISubprogram(name: "_regmap_bus_raw_write", scope: !3, file: !3, line: 1886, type: !3597, scopeLine: 1888, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6938 = !DILocalVariable(name: "context", arg: 1, scope: !6937, file: !3, line: 1886, type: !64)
!6939 = !DILocation(line: 1886, column: 40, scope: !6937)
!6940 = !DILocalVariable(name: "reg", arg: 2, scope: !6937, file: !3, line: 1886, type: !70)
!6941 = !DILocation(line: 1886, column: 62, scope: !6937)
!6942 = !DILocalVariable(name: "val", arg: 3, scope: !6937, file: !3, line: 1887, type: !70)
!6943 = !DILocation(line: 1887, column: 19, scope: !6937)
!6944 = !DILocalVariable(name: "map", scope: !6937, file: !3, line: 1889, type: !6)
!6945 = !DILocation(line: 1889, column: 17, scope: !6937)
!6946 = !DILocation(line: 1889, column: 23, scope: !6937)
!6947 = !DILocalVariable(name: "__ret_warn_on", scope: !6948, file: !3, line: 1891, type: !104)
!6948 = distinct !DILexicalBlock(scope: !6937, file: !3, line: 1891, column: 2)
!6949 = !DILocation(line: 1891, column: 2, scope: !6948)
!6950 = !DILocation(line: 1891, column: 2, scope: !6951)
!6951 = distinct !DILexicalBlock(scope: !6948, file: !3, line: 1891, column: 2)
!6952 = !DILocation(line: 1891, column: 2, scope: !6953)
!6953 = distinct !DILexicalBlock(scope: !6951, file: !3, line: 1891, column: 2)
!6954 = !DILocation(line: 1891, column: 2, scope: !6955)
!6955 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 1891, column: 2)
!6956 = !DILocation(line: 1891, column: 2, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 1891, column: 2)
!6958 = !{i32 -2142550295, i32 -2142550266, i32 -2142550220, i32 -2142550162, i32 -2142550108, i32 -2142550054, i32 -2142549999, i32 -2142549968}
!6959 = !DILocation(line: 1891, column: 2, scope: !6960)
!6960 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 1891, column: 2)
!6961 = !{i32 -2142549557, i32 -2142549550, i32 -2142549498, i32 -2142549467, i32 -2142549437}
!6962 = !DILocation(line: 1891, column: 2, scope: !6963)
!6963 = distinct !DILexicalBlock(scope: !6953, file: !3, line: 1891, column: 2)
!6964 = !DILocation(line: 1893, column: 2, scope: !6937)
!6965 = !DILocation(line: 1893, column: 7, scope: !6937)
!6966 = !DILocation(line: 1893, column: 14, scope: !6937)
!6967 = !DILocation(line: 1893, column: 25, scope: !6937)
!6968 = !DILocation(line: 1893, column: 30, scope: !6937)
!6969 = !DILocation(line: 1893, column: 41, scope: !6937)
!6970 = !DILocation(line: 1893, column: 46, scope: !6937)
!6971 = !DILocation(line: 1893, column: 53, scope: !6937)
!6972 = !DILocation(line: 1893, column: 39, scope: !6937)
!6973 = !DILocation(line: 1894, column: 13, scope: !6937)
!6974 = !DILocation(line: 1894, column: 18, scope: !6937)
!6975 = !DILocation(line: 1894, column: 25, scope: !6937)
!6976 = !DILocation(line: 1894, column: 11, scope: !6937)
!6977 = !DILocation(line: 1894, column: 36, scope: !6937)
!6978 = !DILocation(line: 1895, column: 32, scope: !6937)
!6979 = !DILocation(line: 1895, column: 37, scope: !6937)
!6980 = !DILocation(line: 1896, column: 11, scope: !6937)
!6981 = !DILocation(line: 1896, column: 16, scope: !6937)
!6982 = !DILocation(line: 1897, column: 11, scope: !6937)
!6983 = !DILocation(line: 1897, column: 16, scope: !6937)
!6984 = !DILocation(line: 1897, column: 23, scope: !6937)
!6985 = !DILocation(line: 1896, column: 25, scope: !6937)
!6986 = !DILocation(line: 1898, column: 11, scope: !6937)
!6987 = !DILocation(line: 1898, column: 16, scope: !6937)
!6988 = !DILocation(line: 1898, column: 23, scope: !6937)
!6989 = !DILocation(line: 1897, column: 33, scope: !6937)
!6990 = !DILocation(line: 1899, column: 11, scope: !6937)
!6991 = !DILocation(line: 1899, column: 16, scope: !6937)
!6992 = !DILocation(line: 1899, column: 23, scope: !6937)
!6993 = !DILocation(line: 1895, column: 9, scope: !6937)
!6994 = !DILocation(line: 1895, column: 2, scope: !6937)
!6995 = distinct !DISubprogram(name: "_regmap_range_add", scope: !3, file: !3, line: 535, type: !6996, scopeLine: 537, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!6996 = !DISubroutineType(types: !6997)
!6997 = !{!331, !6, !3844}
!6998 = !DILocalVariable(name: "map", arg: 1, scope: !6995, file: !3, line: 535, type: !6)
!6999 = !DILocation(line: 535, column: 46, scope: !6995)
!7000 = !DILocalVariable(name: "data", arg: 2, scope: !6995, file: !3, line: 536, type: !3844)
!7001 = !DILocation(line: 536, column: 36, scope: !6995)
!7002 = !DILocalVariable(name: "root", scope: !6995, file: !3, line: 538, type: !7003)
!7003 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !598, size: 64)
!7004 = !DILocation(line: 538, column: 18, scope: !6995)
!7005 = !DILocation(line: 538, column: 26, scope: !6995)
!7006 = !DILocation(line: 538, column: 31, scope: !6995)
!7007 = !DILocalVariable(name: "new", scope: !6995, file: !3, line: 539, type: !7008)
!7008 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !601, size: 64)
!7009 = !DILocation(line: 539, column: 19, scope: !6995)
!7010 = !DILocation(line: 539, column: 27, scope: !6995)
!7011 = !DILocation(line: 539, column: 33, scope: !6995)
!7012 = !DILocalVariable(name: "parent", scope: !6995, file: !3, line: 539, type: !601)
!7013 = !DILocation(line: 539, column: 44, scope: !6995)
!7014 = !DILocation(line: 541, column: 2, scope: !6995)
!7015 = !DILocation(line: 541, column: 10, scope: !6995)
!7016 = !DILocation(line: 541, column: 9, scope: !6995)
!7017 = !DILocalVariable(name: "this", scope: !7018, file: !3, line: 542, type: !3844)
!7018 = distinct !DILexicalBlock(scope: !6995, file: !3, line: 541, column: 15)
!7019 = !DILocation(line: 542, column: 29, scope: !7018)
!7020 = !DILocalVariable(name: "__mptr", scope: !7021, file: !3, line: 543, type: !64)
!7021 = distinct !DILexicalBlock(scope: !7018, file: !3, line: 543, column: 4)
!7022 = !DILocation(line: 543, column: 4, scope: !7021)
!7023 = !DILocation(line: 543, column: 4, scope: !7024)
!7024 = distinct !DILexicalBlock(scope: !7021, file: !3, line: 543, column: 4)
!7025 = !DILocation(line: 545, column: 13, scope: !7018)
!7026 = !DILocation(line: 545, column: 12, scope: !7018)
!7027 = !DILocation(line: 545, column: 10, scope: !7018)
!7028 = !DILocation(line: 546, column: 7, scope: !7029)
!7029 = distinct !DILexicalBlock(scope: !7018, file: !3, line: 546, column: 7)
!7030 = !DILocation(line: 546, column: 13, scope: !7029)
!7031 = !DILocation(line: 546, column: 25, scope: !7029)
!7032 = !DILocation(line: 546, column: 31, scope: !7029)
!7033 = !DILocation(line: 546, column: 23, scope: !7029)
!7034 = !DILocation(line: 546, column: 7, scope: !7018)
!7035 = !DILocation(line: 547, column: 14, scope: !7029)
!7036 = !DILocation(line: 547, column: 13, scope: !7029)
!7037 = !DILocation(line: 547, column: 20, scope: !7029)
!7038 = !DILocation(line: 547, column: 8, scope: !7029)
!7039 = !DILocation(line: 547, column: 4, scope: !7029)
!7040 = !DILocation(line: 548, column: 12, scope: !7041)
!7041 = distinct !DILexicalBlock(scope: !7029, file: !3, line: 548, column: 12)
!7042 = !DILocation(line: 548, column: 18, scope: !7041)
!7043 = !DILocation(line: 548, column: 30, scope: !7041)
!7044 = !DILocation(line: 548, column: 36, scope: !7041)
!7045 = !DILocation(line: 548, column: 28, scope: !7041)
!7046 = !DILocation(line: 548, column: 12, scope: !7029)
!7047 = !DILocation(line: 549, column: 14, scope: !7041)
!7048 = !DILocation(line: 549, column: 13, scope: !7041)
!7049 = !DILocation(line: 549, column: 20, scope: !7041)
!7050 = !DILocation(line: 549, column: 8, scope: !7041)
!7051 = !DILocation(line: 549, column: 4, scope: !7041)
!7052 = !DILocation(line: 551, column: 4, scope: !7041)
!7053 = distinct !{!7053, !7014, !7054}
!7054 = !DILocation(line: 552, column: 2, scope: !6995)
!7055 = !DILocation(line: 554, column: 16, scope: !6995)
!7056 = !DILocation(line: 554, column: 22, scope: !6995)
!7057 = !DILocation(line: 554, column: 28, scope: !6995)
!7058 = !DILocation(line: 554, column: 36, scope: !6995)
!7059 = !DILocation(line: 554, column: 2, scope: !6995)
!7060 = !DILocation(line: 555, column: 19, scope: !6995)
!7061 = !DILocation(line: 555, column: 25, scope: !6995)
!7062 = !DILocation(line: 555, column: 31, scope: !6995)
!7063 = !DILocation(line: 555, column: 2, scope: !6995)
!7064 = !DILocation(line: 557, column: 2, scope: !6995)
!7065 = !DILocation(line: 558, column: 1, scope: !6995)
!7066 = distinct !DISubprogram(name: "regmap_range_exit", scope: !3, file: !3, line: 580, type: !4303, scopeLine: 581, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7067 = !DILocalVariable(name: "map", arg: 1, scope: !7066, file: !3, line: 580, type: !6)
!7068 = !DILocation(line: 580, column: 46, scope: !7066)
!7069 = !DILocalVariable(name: "next", scope: !7066, file: !3, line: 582, type: !601)
!7070 = !DILocation(line: 582, column: 18, scope: !7066)
!7071 = !DILocalVariable(name: "range_node", scope: !7066, file: !3, line: 583, type: !3844)
!7072 = !DILocation(line: 583, column: 28, scope: !7066)
!7073 = !DILocation(line: 585, column: 19, scope: !7066)
!7074 = !DILocation(line: 585, column: 24, scope: !7066)
!7075 = !DILocation(line: 585, column: 9, scope: !7066)
!7076 = !DILocation(line: 585, column: 7, scope: !7066)
!7077 = !DILocation(line: 586, column: 2, scope: !7066)
!7078 = !DILocation(line: 586, column: 9, scope: !7066)
!7079 = !DILocalVariable(name: "__mptr", scope: !7080, file: !3, line: 587, type: !64)
!7080 = distinct !DILexicalBlock(scope: !7081, file: !3, line: 587, column: 16)
!7081 = distinct !DILexicalBlock(scope: !7066, file: !3, line: 586, column: 15)
!7082 = !DILocation(line: 587, column: 16, scope: !7080)
!7083 = !DILocation(line: 587, column: 16, scope: !7084)
!7084 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 587, column: 16)
!7085 = !DILocation(line: 587, column: 14, scope: !7081)
!7086 = !DILocation(line: 588, column: 19, scope: !7081)
!7087 = !DILocation(line: 588, column: 31, scope: !7081)
!7088 = !DILocation(line: 588, column: 10, scope: !7081)
!7089 = !DILocation(line: 588, column: 8, scope: !7081)
!7090 = !DILocation(line: 589, column: 13, scope: !7081)
!7091 = !DILocation(line: 589, column: 25, scope: !7081)
!7092 = !DILocation(line: 589, column: 32, scope: !7081)
!7093 = !DILocation(line: 589, column: 37, scope: !7081)
!7094 = !DILocation(line: 589, column: 3, scope: !7081)
!7095 = !DILocation(line: 590, column: 9, scope: !7081)
!7096 = !DILocation(line: 590, column: 3, scope: !7081)
!7097 = distinct !{!7097, !7077, !7098}
!7098 = !DILocation(line: 591, column: 2, scope: !7066)
!7099 = !DILocation(line: 593, column: 8, scope: !7066)
!7100 = !DILocation(line: 593, column: 13, scope: !7066)
!7101 = !DILocation(line: 593, column: 2, scope: !7066)
!7102 = !DILocation(line: 594, column: 1, scope: !7066)
!7103 = distinct !DISubprogram(name: "hwspin_lock_free", scope: !3743, file: !3743, line: 107, type: !7104, scopeLine: 108, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7104 = !DISubroutineType(types: !7105)
!7105 = !{!104, !3741}
!7106 = !DILocalVariable(name: "hwlock", arg: 1, scope: !7103, file: !3743, line: 107, type: !3741)
!7107 = !DILocation(line: 107, column: 55, scope: !7103)
!7108 = !DILocation(line: 109, column: 2, scope: !7103)
!7109 = distinct !DISubprogram(name: "ERR_PTR", scope: !7110, file: !7110, line: 24, type: !7111, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7110 = !DIFile(filename: "./include/linux/err.h", directory: "/home/lizy2001/genbc/linux")
!7111 = !DISubroutineType(types: !7112)
!7112 = !{!64, !155}
!7113 = !DILocalVariable(name: "error", arg: 1, scope: !7109, file: !7110, line: 24, type: !155)
!7114 = !DILocation(line: 24, column: 48, scope: !7109)
!7115 = !DILocation(line: 26, column: 18, scope: !7109)
!7116 = !DILocation(line: 26, column: 9, scope: !7109)
!7117 = !DILocation(line: 26, column: 2, scope: !7109)
!7118 = distinct !DISubprogram(name: "__devm_regmap_init", scope: !3, file: !3, line: 1210, type: !4, scopeLine: 1216, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7119 = !DILocalVariable(name: "dev", arg: 1, scope: !7118, file: !3, line: 1210, type: !72)
!7120 = !DILocation(line: 1210, column: 50, scope: !7118)
!7121 = !DILocalVariable(name: "bus", arg: 2, scope: !7118, file: !3, line: 1211, type: !3568)
!7122 = !DILocation(line: 1211, column: 32, scope: !7118)
!7123 = !DILocalVariable(name: "bus_context", arg: 3, scope: !7118, file: !3, line: 1212, type: !64)
!7124 = !DILocation(line: 1212, column: 13, scope: !7118)
!7125 = !DILocalVariable(name: "config", arg: 4, scope: !7118, file: !3, line: 1213, type: !3745)
!7126 = !DILocation(line: 1213, column: 35, scope: !7118)
!7127 = !DILocalVariable(name: "lock_key", arg: 5, scope: !7118, file: !3, line: 1214, type: !3807)
!7128 = !DILocation(line: 1214, column: 30, scope: !7118)
!7129 = !DILocalVariable(name: "lock_name", arg: 6, scope: !7118, file: !3, line: 1215, type: !81)
!7130 = !DILocation(line: 1215, column: 19, scope: !7118)
!7131 = !DILocalVariable(name: "ptr", scope: !7118, file: !3, line: 1217, type: !3857)
!7132 = !DILocation(line: 1217, column: 18, scope: !7118)
!7133 = !DILocalVariable(name: "regmap", scope: !7118, file: !3, line: 1217, type: !6)
!7134 = !DILocation(line: 1217, column: 24, scope: !7118)
!7135 = !DILocation(line: 1219, column: 8, scope: !7118)
!7136 = !DILocation(line: 1219, column: 6, scope: !7118)
!7137 = !DILocation(line: 1220, column: 7, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 1220, column: 6)
!7139 = !DILocation(line: 1220, column: 6, scope: !7118)
!7140 = !DILocation(line: 1221, column: 10, scope: !7138)
!7141 = !DILocation(line: 1221, column: 3, scope: !7138)
!7142 = !DILocation(line: 1223, column: 25, scope: !7118)
!7143 = !DILocation(line: 1223, column: 30, scope: !7118)
!7144 = !DILocation(line: 1223, column: 35, scope: !7118)
!7145 = !DILocation(line: 1223, column: 48, scope: !7118)
!7146 = !DILocation(line: 1224, column: 11, scope: !7118)
!7147 = !DILocation(line: 1224, column: 21, scope: !7118)
!7148 = !DILocation(line: 1223, column: 11, scope: !7118)
!7149 = !DILocation(line: 1223, column: 9, scope: !7118)
!7150 = !DILocation(line: 1225, column: 14, scope: !7151)
!7151 = distinct !DILexicalBlock(scope: !7118, file: !3, line: 1225, column: 6)
!7152 = !DILocation(line: 1225, column: 7, scope: !7151)
!7153 = !DILocation(line: 1225, column: 6, scope: !7118)
!7154 = !DILocation(line: 1226, column: 10, scope: !7155)
!7155 = distinct !DILexicalBlock(scope: !7151, file: !3, line: 1225, column: 23)
!7156 = !DILocation(line: 1226, column: 4, scope: !7155)
!7157 = !DILocation(line: 1226, column: 8, scope: !7155)
!7158 = !DILocation(line: 1227, column: 14, scope: !7155)
!7159 = !DILocation(line: 1227, column: 19, scope: !7155)
!7160 = !DILocation(line: 1227, column: 3, scope: !7155)
!7161 = !DILocation(line: 1228, column: 2, scope: !7155)
!7162 = !DILocation(line: 1229, column: 15, scope: !7163)
!7163 = distinct !DILexicalBlock(scope: !7151, file: !3, line: 1228, column: 9)
!7164 = !DILocation(line: 1229, column: 3, scope: !7163)
!7165 = !DILocation(line: 1232, column: 9, scope: !7118)
!7166 = !DILocation(line: 1232, column: 2, scope: !7118)
!7167 = !DILocation(line: 1233, column: 1, scope: !7118)
!7168 = distinct !DISubprogram(name: "devm_regmap_release", scope: !3, file: !3, line: 1205, type: !4313, scopeLine: 1206, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7169 = !DILocalVariable(name: "dev", arg: 1, scope: !7168, file: !3, line: 1205, type: !72)
!7170 = !DILocation(line: 1205, column: 48, scope: !7168)
!7171 = !DILocalVariable(name: "res", arg: 2, scope: !7168, file: !3, line: 1205, type: !64)
!7172 = !DILocation(line: 1205, column: 59, scope: !7168)
!7173 = !DILocation(line: 1207, column: 33, scope: !7168)
!7174 = !DILocation(line: 1207, column: 15, scope: !7168)
!7175 = !DILocation(line: 1207, column: 14, scope: !7168)
!7176 = !DILocation(line: 1207, column: 2, scope: !7168)
!7177 = !DILocation(line: 1208, column: 1, scope: !7168)
!7178 = distinct !DISubprogram(name: "IS_ERR", scope: !7110, file: !7110, line: 34, type: !7179, scopeLine: 35, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7179 = !DISubroutineType(types: !7180)
!7180 = !{!331, !1880}
!7181 = !DILocalVariable(name: "ptr", arg: 1, scope: !7178, file: !7110, line: 34, type: !1880)
!7182 = !DILocation(line: 34, column: 60, scope: !7178)
!7183 = !DILocation(line: 36, column: 9, scope: !7178)
!7184 = !DILocation(line: 36, column: 2, scope: !7178)
!7185 = distinct !DISubprogram(name: "devm_regmap_field_alloc", scope: !3, file: !3, line: 1258, type: !7186, scopeLine: 1260, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7186 = !DISubroutineType(types: !7187)
!7187 = !{!7188, !72, !6, !7197}
!7188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7189, size: 64)
!7189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "regmap_field", file: !8, line: 210, size: 256, elements: !7190)
!7190 = !{!7191, !7192, !7193, !7194, !7195, !7196}
!7191 = !DIDerivedType(tag: DW_TAG_member, name: "regmap", scope: !7189, file: !8, line: 211, baseType: !6, size: 64)
!7192 = !DIDerivedType(tag: DW_TAG_member, name: "mask", scope: !7189, file: !8, line: 212, baseType: !70, size: 32, offset: 64)
!7193 = !DIDerivedType(tag: DW_TAG_member, name: "shift", scope: !7189, file: !8, line: 214, baseType: !70, size: 32, offset: 96)
!7194 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !7189, file: !8, line: 215, baseType: !70, size: 32, offset: 128)
!7195 = !DIDerivedType(tag: DW_TAG_member, name: "id_size", scope: !7189, file: !8, line: 217, baseType: !70, size: 32, offset: 160)
!7196 = !DIDerivedType(tag: DW_TAG_member, name: "id_offset", scope: !7189, file: !8, line: 218, baseType: !70, size: 32, offset: 192)
!7197 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_field", file: !60, line: 1162, size: 160, elements: !7198)
!7198 = !{!7199, !7200, !7201, !7202, !7203}
!7199 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !7197, file: !60, line: 1163, baseType: !70, size: 32)
!7200 = !DIDerivedType(tag: DW_TAG_member, name: "lsb", scope: !7197, file: !60, line: 1164, baseType: !70, size: 32, offset: 32)
!7201 = !DIDerivedType(tag: DW_TAG_member, name: "msb", scope: !7197, file: !60, line: 1165, baseType: !70, size: 32, offset: 64)
!7202 = !DIDerivedType(tag: DW_TAG_member, name: "id_size", scope: !7197, file: !60, line: 1166, baseType: !70, size: 32, offset: 96)
!7203 = !DIDerivedType(tag: DW_TAG_member, name: "id_offset", scope: !7197, file: !60, line: 1167, baseType: !70, size: 32, offset: 128)
!7204 = !DILocalVariable(name: "dev", arg: 1, scope: !7185, file: !3, line: 1258, type: !72)
!7205 = !DILocation(line: 1258, column: 61, scope: !7185)
!7206 = !DILocalVariable(name: "regmap", arg: 2, scope: !7185, file: !3, line: 1259, type: !6)
!7207 = !DILocation(line: 1259, column: 18, scope: !7185)
!7208 = !DILocalVariable(name: "reg_field", arg: 3, scope: !7185, file: !3, line: 1259, type: !7197)
!7209 = !DILocation(line: 1259, column: 43, scope: !7185)
!7210 = !DILocalVariable(name: "rm_field", scope: !7185, file: !3, line: 1261, type: !7188)
!7211 = !DILocation(line: 1261, column: 23, scope: !7185)
!7212 = !DILocation(line: 1261, column: 47, scope: !7185)
!7213 = !DILocation(line: 1261, column: 34, scope: !7185)
!7214 = !DILocation(line: 1263, column: 7, scope: !7215)
!7215 = distinct !DILexicalBlock(scope: !7185, file: !3, line: 1263, column: 6)
!7216 = !DILocation(line: 1263, column: 6, scope: !7185)
!7217 = !DILocation(line: 1264, column: 10, scope: !7215)
!7218 = !DILocation(line: 1264, column: 3, scope: !7215)
!7219 = !DILocation(line: 1266, column: 20, scope: !7185)
!7220 = !DILocation(line: 1266, column: 30, scope: !7185)
!7221 = !DILocation(line: 1266, column: 2, scope: !7185)
!7222 = !DILocation(line: 1268, column: 9, scope: !7185)
!7223 = !DILocation(line: 1268, column: 2, scope: !7185)
!7224 = !DILocation(line: 1270, column: 1, scope: !7185)
!7225 = distinct !DISubprogram(name: "devm_kzalloc", scope: !74, file: !74, line: 215, type: !7226, scopeLine: 216, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7226 = !DISubroutineType(types: !7227)
!7227 = !{!64, !72, !167, !69}
!7228 = !DILocalVariable(name: "dev", arg: 1, scope: !7225, file: !74, line: 215, type: !72)
!7229 = !DILocation(line: 215, column: 49, scope: !7225)
!7230 = !DILocalVariable(name: "size", arg: 2, scope: !7225, file: !74, line: 215, type: !167)
!7231 = !DILocation(line: 215, column: 61, scope: !7225)
!7232 = !DILocalVariable(name: "gfp", arg: 3, scope: !7225, file: !74, line: 215, type: !69)
!7233 = !DILocation(line: 215, column: 73, scope: !7225)
!7234 = !DILocation(line: 217, column: 22, scope: !7225)
!7235 = !DILocation(line: 217, column: 27, scope: !7225)
!7236 = !DILocation(line: 217, column: 33, scope: !7225)
!7237 = !DILocation(line: 217, column: 37, scope: !7225)
!7238 = !DILocation(line: 217, column: 9, scope: !7225)
!7239 = !DILocation(line: 217, column: 2, scope: !7225)
!7240 = distinct !DISubprogram(name: "regmap_field_init", scope: !3, file: !3, line: 1236, type: !7241, scopeLine: 1238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7241 = !DISubroutineType(types: !7242)
!7242 = !{null, !7188, !6, !7197}
!7243 = !DILocalVariable(name: "rm_field", arg: 1, scope: !7240, file: !3, line: 1236, type: !7188)
!7244 = !DILocation(line: 1236, column: 52, scope: !7240)
!7245 = !DILocalVariable(name: "regmap", arg: 2, scope: !7240, file: !3, line: 1237, type: !6)
!7246 = !DILocation(line: 1237, column: 17, scope: !7240)
!7247 = !DILocalVariable(name: "reg_field", arg: 3, scope: !7240, file: !3, line: 1237, type: !7197)
!7248 = !DILocation(line: 1237, column: 42, scope: !7240)
!7249 = !DILocation(line: 1239, column: 21, scope: !7240)
!7250 = !DILocation(line: 1239, column: 2, scope: !7240)
!7251 = !DILocation(line: 1239, column: 12, scope: !7240)
!7252 = !DILocation(line: 1239, column: 19, scope: !7240)
!7253 = !DILocation(line: 1240, column: 28, scope: !7240)
!7254 = !DILocation(line: 1240, column: 2, scope: !7240)
!7255 = !DILocation(line: 1240, column: 12, scope: !7240)
!7256 = !DILocation(line: 1240, column: 16, scope: !7240)
!7257 = !DILocation(line: 1241, column: 30, scope: !7240)
!7258 = !DILocation(line: 1241, column: 2, scope: !7240)
!7259 = !DILocation(line: 1241, column: 12, scope: !7240)
!7260 = !DILocation(line: 1241, column: 18, scope: !7240)
!7261 = !DILocation(line: 1242, column: 19, scope: !7240)
!7262 = !DILocation(line: 1242, column: 2, scope: !7240)
!7263 = !DILocation(line: 1242, column: 12, scope: !7240)
!7264 = !DILocation(line: 1242, column: 17, scope: !7240)
!7265 = !DILocation(line: 1243, column: 32, scope: !7240)
!7266 = !DILocation(line: 1243, column: 2, scope: !7240)
!7267 = !DILocation(line: 1243, column: 12, scope: !7240)
!7268 = !DILocation(line: 1243, column: 20, scope: !7240)
!7269 = !DILocation(line: 1244, column: 34, scope: !7240)
!7270 = !DILocation(line: 1244, column: 2, scope: !7240)
!7271 = !DILocation(line: 1244, column: 12, scope: !7240)
!7272 = !DILocation(line: 1244, column: 22, scope: !7240)
!7273 = !DILocation(line: 1245, column: 1, scope: !7240)
!7274 = distinct !DISubprogram(name: "regmap_field_bulk_alloc", scope: !3, file: !3, line: 1286, type: !7275, scopeLine: 1290, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7275 = !DISubroutineType(types: !7276)
!7276 = !{!104, !6, !7277, !7278, !104}
!7277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7188, size: 64)
!7278 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7197, size: 64)
!7279 = !DILocalVariable(name: "regmap", arg: 1, scope: !7274, file: !3, line: 1286, type: !6)
!7280 = !DILocation(line: 1286, column: 44, scope: !7274)
!7281 = !DILocalVariable(name: "rm_field", arg: 2, scope: !7274, file: !3, line: 1287, type: !7277)
!7282 = !DILocation(line: 1287, column: 30, scope: !7274)
!7283 = !DILocalVariable(name: "reg_field", arg: 3, scope: !7274, file: !3, line: 1288, type: !7278)
!7284 = !DILocation(line: 1288, column: 26, scope: !7274)
!7285 = !DILocalVariable(name: "num_fields", arg: 4, scope: !7274, file: !3, line: 1289, type: !104)
!7286 = !DILocation(line: 1289, column: 12, scope: !7274)
!7287 = !DILocalVariable(name: "rf", scope: !7274, file: !3, line: 1291, type: !7188)
!7288 = !DILocation(line: 1291, column: 23, scope: !7274)
!7289 = !DILocalVariable(name: "i", scope: !7274, file: !3, line: 1292, type: !104)
!7290 = !DILocation(line: 1292, column: 6, scope: !7274)
!7291 = !DILocation(line: 1294, column: 15, scope: !7274)
!7292 = !DILocation(line: 1294, column: 7, scope: !7274)
!7293 = !DILocation(line: 1294, column: 5, scope: !7274)
!7294 = !DILocation(line: 1295, column: 7, scope: !7295)
!7295 = distinct !DILexicalBlock(scope: !7274, file: !3, line: 1295, column: 6)
!7296 = !DILocation(line: 1295, column: 6, scope: !7274)
!7297 = !DILocation(line: 1296, column: 3, scope: !7295)
!7298 = !DILocation(line: 1298, column: 9, scope: !7299)
!7299 = distinct !DILexicalBlock(scope: !7274, file: !3, line: 1298, column: 2)
!7300 = !DILocation(line: 1298, column: 7, scope: !7299)
!7301 = !DILocation(line: 1298, column: 14, scope: !7302)
!7302 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 1298, column: 2)
!7303 = !DILocation(line: 1298, column: 18, scope: !7302)
!7304 = !DILocation(line: 1298, column: 16, scope: !7302)
!7305 = !DILocation(line: 1298, column: 2, scope: !7299)
!7306 = !DILocation(line: 1299, column: 22, scope: !7307)
!7307 = distinct !DILexicalBlock(scope: !7302, file: !3, line: 1298, column: 35)
!7308 = !DILocation(line: 1299, column: 25, scope: !7307)
!7309 = !DILocation(line: 1299, column: 29, scope: !7307)
!7310 = !DILocation(line: 1299, column: 37, scope: !7307)
!7311 = !DILocation(line: 1299, column: 47, scope: !7307)
!7312 = !DILocation(line: 1299, column: 3, scope: !7307)
!7313 = !DILocation(line: 1300, column: 18, scope: !7307)
!7314 = !DILocation(line: 1300, column: 21, scope: !7307)
!7315 = !DILocation(line: 1300, column: 3, scope: !7307)
!7316 = !DILocation(line: 1300, column: 12, scope: !7307)
!7317 = !DILocation(line: 1300, column: 15, scope: !7307)
!7318 = !DILocation(line: 1301, column: 2, scope: !7307)
!7319 = !DILocation(line: 1298, column: 31, scope: !7302)
!7320 = !DILocation(line: 1298, column: 2, scope: !7302)
!7321 = distinct !{!7321, !7305, !7322}
!7322 = !DILocation(line: 1301, column: 2, scope: !7299)
!7323 = !DILocation(line: 1303, column: 2, scope: !7274)
!7324 = !DILocation(line: 1304, column: 1, scope: !7274)
!7325 = distinct !DISubprogram(name: "kcalloc", scope: !3816, file: !3816, line: 601, type: !7326, scopeLine: 602, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7326 = !DISubroutineType(types: !7327)
!7327 = !{!64, !167, !167, !69}
!7328 = !DILocalVariable(name: "n", arg: 1, scope: !7325, file: !3816, line: 601, type: !167)
!7329 = !DILocation(line: 601, column: 36, scope: !7325)
!7330 = !DILocalVariable(name: "size", arg: 2, scope: !7325, file: !3816, line: 601, type: !167)
!7331 = !DILocation(line: 601, column: 46, scope: !7325)
!7332 = !DILocalVariable(name: "flags", arg: 3, scope: !7325, file: !3816, line: 601, type: !69)
!7333 = !DILocation(line: 601, column: 58, scope: !7325)
!7334 = !DILocation(line: 603, column: 23, scope: !7325)
!7335 = !DILocation(line: 603, column: 26, scope: !7325)
!7336 = !DILocation(line: 603, column: 32, scope: !7325)
!7337 = !DILocation(line: 603, column: 38, scope: !7325)
!7338 = !DILocation(line: 603, column: 9, scope: !7325)
!7339 = !DILocation(line: 603, column: 2, scope: !7325)
!7340 = distinct !DISubprogram(name: "devm_regmap_field_bulk_alloc", scope: !3, file: !3, line: 1321, type: !7341, scopeLine: 1326, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7341 = !DISubroutineType(types: !7342)
!7342 = !{!104, !72, !6, !7277, !7278, !104}
!7343 = !DILocalVariable(name: "dev", arg: 1, scope: !7340, file: !3, line: 1321, type: !72)
!7344 = !DILocation(line: 1321, column: 49, scope: !7340)
!7345 = !DILocalVariable(name: "regmap", arg: 2, scope: !7340, file: !3, line: 1322, type: !6)
!7346 = !DILocation(line: 1322, column: 21, scope: !7340)
!7347 = !DILocalVariable(name: "rm_field", arg: 3, scope: !7340, file: !3, line: 1323, type: !7277)
!7348 = !DILocation(line: 1323, column: 28, scope: !7340)
!7349 = !DILocalVariable(name: "reg_field", arg: 4, scope: !7340, file: !3, line: 1324, type: !7278)
!7350 = !DILocation(line: 1324, column: 24, scope: !7340)
!7351 = !DILocalVariable(name: "num_fields", arg: 5, scope: !7340, file: !3, line: 1325, type: !104)
!7352 = !DILocation(line: 1325, column: 10, scope: !7340)
!7353 = !DILocalVariable(name: "rf", scope: !7340, file: !3, line: 1327, type: !7188)
!7354 = !DILocation(line: 1327, column: 23, scope: !7340)
!7355 = !DILocalVariable(name: "i", scope: !7340, file: !3, line: 1328, type: !104)
!7356 = !DILocation(line: 1328, column: 6, scope: !7340)
!7357 = !DILocation(line: 1330, column: 20, scope: !7340)
!7358 = !DILocation(line: 1330, column: 25, scope: !7340)
!7359 = !DILocation(line: 1330, column: 7, scope: !7340)
!7360 = !DILocation(line: 1330, column: 5, scope: !7340)
!7361 = !DILocation(line: 1331, column: 7, scope: !7362)
!7362 = distinct !DILexicalBlock(scope: !7340, file: !3, line: 1331, column: 6)
!7363 = !DILocation(line: 1331, column: 6, scope: !7340)
!7364 = !DILocation(line: 1332, column: 3, scope: !7362)
!7365 = !DILocation(line: 1334, column: 9, scope: !7366)
!7366 = distinct !DILexicalBlock(scope: !7340, file: !3, line: 1334, column: 2)
!7367 = !DILocation(line: 1334, column: 7, scope: !7366)
!7368 = !DILocation(line: 1334, column: 14, scope: !7369)
!7369 = distinct !DILexicalBlock(scope: !7366, file: !3, line: 1334, column: 2)
!7370 = !DILocation(line: 1334, column: 18, scope: !7369)
!7371 = !DILocation(line: 1334, column: 16, scope: !7369)
!7372 = !DILocation(line: 1334, column: 2, scope: !7366)
!7373 = !DILocation(line: 1335, column: 22, scope: !7374)
!7374 = distinct !DILexicalBlock(scope: !7369, file: !3, line: 1334, column: 35)
!7375 = !DILocation(line: 1335, column: 25, scope: !7374)
!7376 = !DILocation(line: 1335, column: 29, scope: !7374)
!7377 = !DILocation(line: 1335, column: 37, scope: !7374)
!7378 = !DILocation(line: 1335, column: 47, scope: !7374)
!7379 = !DILocation(line: 1335, column: 3, scope: !7374)
!7380 = !DILocation(line: 1336, column: 18, scope: !7374)
!7381 = !DILocation(line: 1336, column: 21, scope: !7374)
!7382 = !DILocation(line: 1336, column: 3, scope: !7374)
!7383 = !DILocation(line: 1336, column: 12, scope: !7374)
!7384 = !DILocation(line: 1336, column: 15, scope: !7374)
!7385 = !DILocation(line: 1337, column: 2, scope: !7374)
!7386 = !DILocation(line: 1334, column: 31, scope: !7369)
!7387 = !DILocation(line: 1334, column: 2, scope: !7369)
!7388 = distinct !{!7388, !7372, !7389}
!7389 = !DILocation(line: 1337, column: 2, scope: !7366)
!7390 = !DILocation(line: 1339, column: 2, scope: !7340)
!7391 = !DILocation(line: 1340, column: 1, scope: !7340)
!7392 = distinct !DISubprogram(name: "devm_kcalloc", scope: !74, file: !74, line: 229, type: !7393, scopeLine: 231, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7393 = !DISubroutineType(types: !7394)
!7394 = !{!64, !72, !167, !167, !69}
!7395 = !DILocalVariable(name: "dev", arg: 1, scope: !7392, file: !74, line: 229, type: !72)
!7396 = !DILocation(line: 229, column: 49, scope: !7392)
!7397 = !DILocalVariable(name: "n", arg: 2, scope: !7392, file: !74, line: 230, type: !167)
!7398 = !DILocation(line: 230, column: 13, scope: !7392)
!7399 = !DILocalVariable(name: "size", arg: 3, scope: !7392, file: !74, line: 230, type: !167)
!7400 = !DILocation(line: 230, column: 23, scope: !7392)
!7401 = !DILocalVariable(name: "flags", arg: 4, scope: !7392, file: !74, line: 230, type: !69)
!7402 = !DILocation(line: 230, column: 35, scope: !7392)
!7403 = !DILocation(line: 232, column: 28, scope: !7392)
!7404 = !DILocation(line: 232, column: 33, scope: !7392)
!7405 = !DILocation(line: 232, column: 36, scope: !7392)
!7406 = !DILocation(line: 232, column: 42, scope: !7392)
!7407 = !DILocation(line: 232, column: 48, scope: !7392)
!7408 = !DILocation(line: 232, column: 9, scope: !7392)
!7409 = !DILocation(line: 232, column: 2, scope: !7392)
!7410 = distinct !DISubprogram(name: "regmap_field_bulk_free", scope: !3, file: !3, line: 1349, type: !7411, scopeLine: 1350, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7411 = !DISubroutineType(types: !7412)
!7412 = !{null, !7188}
!7413 = !DILocalVariable(name: "field", arg: 1, scope: !7410, file: !3, line: 1349, type: !7188)
!7414 = !DILocation(line: 1349, column: 50, scope: !7410)
!7415 = !DILocation(line: 1351, column: 8, scope: !7410)
!7416 = !DILocation(line: 1351, column: 2, scope: !7410)
!7417 = !DILocation(line: 1352, column: 1, scope: !7410)
!7418 = distinct !DISubprogram(name: "devm_regmap_field_bulk_free", scope: !3, file: !3, line: 1366, type: !7419, scopeLine: 1368, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7419 = !DISubroutineType(types: !7420)
!7420 = !{null, !72, !7188}
!7421 = !DILocalVariable(name: "dev", arg: 1, scope: !7418, file: !3, line: 1366, type: !72)
!7422 = !DILocation(line: 1366, column: 49, scope: !7418)
!7423 = !DILocalVariable(name: "field", arg: 2, scope: !7418, file: !3, line: 1367, type: !7188)
!7424 = !DILocation(line: 1367, column: 27, scope: !7418)
!7425 = !DILocation(line: 1369, column: 13, scope: !7418)
!7426 = !DILocation(line: 1369, column: 18, scope: !7418)
!7427 = !DILocation(line: 1369, column: 2, scope: !7418)
!7428 = !DILocation(line: 1370, column: 1, scope: !7418)
!7429 = distinct !DISubprogram(name: "devm_regmap_field_free", scope: !3, file: !3, line: 1384, type: !7419, scopeLine: 1386, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7430 = !DILocalVariable(name: "dev", arg: 1, scope: !7429, file: !3, line: 1384, type: !72)
!7431 = !DILocation(line: 1384, column: 44, scope: !7429)
!7432 = !DILocalVariable(name: "field", arg: 2, scope: !7429, file: !3, line: 1385, type: !7188)
!7433 = !DILocation(line: 1385, column: 23, scope: !7429)
!7434 = !DILocation(line: 1387, column: 13, scope: !7429)
!7435 = !DILocation(line: 1387, column: 18, scope: !7429)
!7436 = !DILocation(line: 1387, column: 2, scope: !7429)
!7437 = !DILocation(line: 1388, column: 1, scope: !7429)
!7438 = distinct !DISubprogram(name: "regmap_field_alloc", scope: !3, file: !3, line: 1401, type: !7439, scopeLine: 1403, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7439 = !DISubroutineType(types: !7440)
!7440 = !{!7188, !6, !7197}
!7441 = !DILocalVariable(name: "regmap", arg: 1, scope: !7438, file: !3, line: 1401, type: !6)
!7442 = !DILocation(line: 1401, column: 56, scope: !7438)
!7443 = !DILocalVariable(name: "reg_field", arg: 2, scope: !7438, file: !3, line: 1402, type: !7197)
!7444 = !DILocation(line: 1402, column: 20, scope: !7438)
!7445 = !DILocalVariable(name: "rm_field", scope: !7438, file: !3, line: 1404, type: !7188)
!7446 = !DILocation(line: 1404, column: 23, scope: !7438)
!7447 = !DILocation(line: 1404, column: 34, scope: !7438)
!7448 = !DILocation(line: 1406, column: 7, scope: !7449)
!7449 = distinct !DILexicalBlock(scope: !7438, file: !3, line: 1406, column: 6)
!7450 = !DILocation(line: 1406, column: 6, scope: !7438)
!7451 = !DILocation(line: 1407, column: 10, scope: !7449)
!7452 = !DILocation(line: 1407, column: 3, scope: !7449)
!7453 = !DILocation(line: 1409, column: 20, scope: !7438)
!7454 = !DILocation(line: 1409, column: 30, scope: !7438)
!7455 = !DILocation(line: 1409, column: 2, scope: !7438)
!7456 = !DILocation(line: 1411, column: 9, scope: !7438)
!7457 = !DILocation(line: 1411, column: 2, scope: !7438)
!7458 = !DILocation(line: 1412, column: 1, scope: !7438)
!7459 = distinct !DISubprogram(name: "regmap_field_free", scope: !3, file: !3, line: 1421, type: !7411, scopeLine: 1422, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7460 = !DILocalVariable(name: "field", arg: 1, scope: !7459, file: !3, line: 1421, type: !7188)
!7461 = !DILocation(line: 1421, column: 45, scope: !7459)
!7462 = !DILocation(line: 1423, column: 8, scope: !7459)
!7463 = !DILocation(line: 1423, column: 2, scope: !7459)
!7464 = !DILocation(line: 1424, column: 1, scope: !7459)
!7465 = distinct !DISubprogram(name: "regmap_reinit_cache", scope: !3, file: !3, line: 1441, type: !4272, scopeLine: 1442, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7466 = !DILocalVariable(name: "map", arg: 1, scope: !7465, file: !3, line: 1441, type: !6)
!7467 = !DILocation(line: 1441, column: 40, scope: !7465)
!7468 = !DILocalVariable(name: "config", arg: 2, scope: !7465, file: !3, line: 1441, type: !3745)
!7469 = !DILocation(line: 1441, column: 73, scope: !7465)
!7470 = !DILocalVariable(name: "ret", scope: !7465, file: !3, line: 1443, type: !104)
!7471 = !DILocation(line: 1443, column: 6, scope: !7465)
!7472 = !DILocation(line: 1445, column: 16, scope: !7465)
!7473 = !DILocation(line: 1445, column: 2, scope: !7465)
!7474 = !DILocation(line: 1446, column: 22, scope: !7465)
!7475 = !DILocation(line: 1446, column: 2, scope: !7465)
!7476 = !DILocation(line: 1448, column: 22, scope: !7465)
!7477 = !DILocation(line: 1448, column: 30, scope: !7465)
!7478 = !DILocation(line: 1448, column: 2, scope: !7465)
!7479 = !DILocation(line: 1448, column: 7, scope: !7465)
!7480 = !DILocation(line: 1448, column: 20, scope: !7465)
!7481 = !DILocation(line: 1449, column: 23, scope: !7465)
!7482 = !DILocation(line: 1449, column: 31, scope: !7465)
!7483 = !DILocation(line: 1449, column: 2, scope: !7465)
!7484 = !DILocation(line: 1449, column: 7, scope: !7465)
!7485 = !DILocation(line: 1449, column: 21, scope: !7465)
!7486 = !DILocation(line: 1450, column: 22, scope: !7465)
!7487 = !DILocation(line: 1450, column: 30, scope: !7465)
!7488 = !DILocation(line: 1450, column: 2, scope: !7465)
!7489 = !DILocation(line: 1450, column: 7, scope: !7465)
!7490 = !DILocation(line: 1450, column: 20, scope: !7465)
!7491 = !DILocation(line: 1451, column: 22, scope: !7465)
!7492 = !DILocation(line: 1451, column: 30, scope: !7465)
!7493 = !DILocation(line: 1451, column: 2, scope: !7465)
!7494 = !DILocation(line: 1451, column: 7, scope: !7465)
!7495 = !DILocation(line: 1451, column: 20, scope: !7465)
!7496 = !DILocation(line: 1452, column: 22, scope: !7465)
!7497 = !DILocation(line: 1452, column: 30, scope: !7465)
!7498 = !DILocation(line: 1452, column: 2, scope: !7465)
!7499 = !DILocation(line: 1452, column: 7, scope: !7465)
!7500 = !DILocation(line: 1452, column: 20, scope: !7465)
!7501 = !DILocation(line: 1453, column: 29, scope: !7465)
!7502 = !DILocation(line: 1453, column: 37, scope: !7465)
!7503 = !DILocation(line: 1453, column: 2, scope: !7465)
!7504 = !DILocation(line: 1453, column: 7, scope: !7465)
!7505 = !DILocation(line: 1453, column: 27, scope: !7465)
!7506 = !DILocation(line: 1454, column: 28, scope: !7465)
!7507 = !DILocation(line: 1454, column: 36, scope: !7465)
!7508 = !DILocation(line: 1454, column: 2, scope: !7465)
!7509 = !DILocation(line: 1454, column: 7, scope: !7465)
!7510 = !DILocation(line: 1454, column: 26, scope: !7465)
!7511 = !DILocation(line: 1455, column: 20, scope: !7465)
!7512 = !DILocation(line: 1455, column: 28, scope: !7465)
!7513 = !DILocation(line: 1455, column: 2, scope: !7465)
!7514 = !DILocation(line: 1455, column: 7, scope: !7465)
!7515 = !DILocation(line: 1455, column: 18, scope: !7465)
!7516 = !DILocation(line: 1457, column: 24, scope: !7465)
!7517 = !DILocation(line: 1457, column: 29, scope: !7465)
!7518 = !DILocation(line: 1457, column: 8, scope: !7465)
!7519 = !DILocation(line: 1457, column: 6, scope: !7465)
!7520 = !DILocation(line: 1458, column: 6, scope: !7521)
!7521 = distinct !DILexicalBlock(scope: !7465, file: !3, line: 1458, column: 6)
!7522 = !DILocation(line: 1458, column: 6, scope: !7465)
!7523 = !DILocation(line: 1459, column: 10, scope: !7521)
!7524 = !DILocation(line: 1459, column: 3, scope: !7521)
!7525 = !DILocation(line: 1461, column: 22, scope: !7465)
!7526 = !DILocation(line: 1461, column: 2, scope: !7465)
!7527 = !DILocation(line: 1463, column: 2, scope: !7465)
!7528 = !DILocation(line: 1463, column: 7, scope: !7465)
!7529 = !DILocation(line: 1463, column: 20, scope: !7465)
!7530 = !DILocation(line: 1464, column: 2, scope: !7465)
!7531 = !DILocation(line: 1464, column: 7, scope: !7465)
!7532 = !DILocation(line: 1464, column: 18, scope: !7465)
!7533 = !DILocation(line: 1466, column: 23, scope: !7465)
!7534 = !DILocation(line: 1466, column: 28, scope: !7465)
!7535 = !DILocation(line: 1466, column: 9, scope: !7465)
!7536 = !DILocation(line: 1466, column: 2, scope: !7465)
!7537 = !DILocation(line: 1467, column: 1, scope: !7465)
!7538 = distinct !DISubprogram(name: "regmap_exit", scope: !3, file: !3, line: 1475, type: !4303, scopeLine: 1476, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7539 = !DILocalVariable(name: "map", arg: 1, scope: !7538, file: !3, line: 1475, type: !6)
!7540 = !DILocation(line: 1475, column: 33, scope: !7538)
!7541 = !DILocalVariable(name: "async", scope: !7538, file: !3, line: 1477, type: !3588)
!7542 = !DILocation(line: 1477, column: 23, scope: !7538)
!7543 = !DILocation(line: 1479, column: 16, scope: !7538)
!7544 = !DILocation(line: 1479, column: 2, scope: !7538)
!7545 = !DILocation(line: 1480, column: 22, scope: !7538)
!7546 = !DILocation(line: 1480, column: 2, scope: !7538)
!7547 = !DILocation(line: 1481, column: 20, scope: !7538)
!7548 = !DILocation(line: 1481, column: 2, scope: !7538)
!7549 = !DILocation(line: 1482, column: 6, scope: !7550)
!7550 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 1482, column: 6)
!7551 = !DILocation(line: 1482, column: 11, scope: !7550)
!7552 = !DILocation(line: 1482, column: 15, scope: !7550)
!7553 = !DILocation(line: 1482, column: 18, scope: !7550)
!7554 = !DILocation(line: 1482, column: 23, scope: !7550)
!7555 = !DILocation(line: 1482, column: 28, scope: !7550)
!7556 = !DILocation(line: 1482, column: 6, scope: !7538)
!7557 = !DILocation(line: 1483, column: 3, scope: !7550)
!7558 = !DILocation(line: 1483, column: 8, scope: !7550)
!7559 = !DILocation(line: 1483, column: 13, scope: !7550)
!7560 = !DILocation(line: 1483, column: 26, scope: !7550)
!7561 = !DILocation(line: 1483, column: 31, scope: !7550)
!7562 = !DILocation(line: 1484, column: 8, scope: !7538)
!7563 = !DILocation(line: 1484, column: 13, scope: !7538)
!7564 = !DILocation(line: 1484, column: 2, scope: !7538)
!7565 = !DILocation(line: 1485, column: 2, scope: !7538)
!7566 = !DILocation(line: 1485, column: 22, scope: !7538)
!7567 = !DILocation(line: 1485, column: 27, scope: !7538)
!7568 = !DILocation(line: 1485, column: 10, scope: !7538)
!7569 = !DILocation(line: 1485, column: 9, scope: !7538)
!7570 = !DILocalVariable(name: "head__", scope: !7571, file: !3, line: 1486, type: !50)
!7571 = distinct !DILexicalBlock(scope: !7572, file: !3, line: 1486, column: 11)
!7572 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 1485, column: 40)
!7573 = !DILocation(line: 1486, column: 11, scope: !7571)
!7574 = !DILocalVariable(name: "pos__", scope: !7571, file: !3, line: 1486, type: !50)
!7575 = !DILocation(line: 1486, column: 11, scope: !7576)
!7576 = distinct !DILexicalBlock(scope: !7571, file: !3, line: 1486, column: 11)
!7577 = !DILocation(line: 1486, column: 11, scope: !7578)
!7578 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 1486, column: 11)
!7579 = !DILocalVariable(name: "__mptr", scope: !7580, file: !3, line: 1486, type: !64)
!7580 = distinct !DILexicalBlock(scope: !7571, file: !3, line: 1486, column: 11)
!7581 = !DILocation(line: 1486, column: 11, scope: !7580)
!7582 = !DILocation(line: 1486, column: 11, scope: !7583)
!7583 = distinct !DILexicalBlock(scope: !7580, file: !3, line: 1486, column: 11)
!7584 = !DILocation(line: 1486, column: 9, scope: !7572)
!7585 = !DILocation(line: 1489, column: 13, scope: !7572)
!7586 = !DILocation(line: 1489, column: 20, scope: !7572)
!7587 = !DILocation(line: 1489, column: 3, scope: !7572)
!7588 = !DILocation(line: 1490, column: 9, scope: !7572)
!7589 = !DILocation(line: 1490, column: 16, scope: !7572)
!7590 = !DILocation(line: 1490, column: 3, scope: !7572)
!7591 = !DILocation(line: 1491, column: 9, scope: !7572)
!7592 = !DILocation(line: 1491, column: 3, scope: !7572)
!7593 = distinct !{!7593, !7565, !7594}
!7594 = !DILocation(line: 1492, column: 2, scope: !7538)
!7595 = !DILocation(line: 1493, column: 6, scope: !7596)
!7596 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 1493, column: 6)
!7597 = !DILocation(line: 1493, column: 11, scope: !7596)
!7598 = !DILocation(line: 1493, column: 6, scope: !7538)
!7599 = !DILocation(line: 1494, column: 20, scope: !7596)
!7600 = !DILocation(line: 1494, column: 25, scope: !7596)
!7601 = !DILocation(line: 1494, column: 3, scope: !7596)
!7602 = !DILocation(line: 1495, column: 6, scope: !7603)
!7603 = distinct !DILexicalBlock(scope: !7538, file: !3, line: 1495, column: 6)
!7604 = !DILocation(line: 1495, column: 11, scope: !7603)
!7605 = !DILocation(line: 1495, column: 16, scope: !7603)
!7606 = !DILocation(line: 1495, column: 6, scope: !7538)
!7607 = !DILocation(line: 1496, column: 18, scope: !7603)
!7608 = !DILocation(line: 1496, column: 23, scope: !7603)
!7609 = !DILocation(line: 1496, column: 3, scope: !7603)
!7610 = !DILocation(line: 1497, column: 14, scope: !7538)
!7611 = !DILocation(line: 1497, column: 19, scope: !7538)
!7612 = !DILocation(line: 1497, column: 2, scope: !7538)
!7613 = !DILocation(line: 1498, column: 8, scope: !7538)
!7614 = !DILocation(line: 1498, column: 13, scope: !7538)
!7615 = !DILocation(line: 1498, column: 2, scope: !7538)
!7616 = !DILocation(line: 1499, column: 8, scope: !7538)
!7617 = !DILocation(line: 1499, column: 2, scope: !7538)
!7618 = !DILocation(line: 1500, column: 1, scope: !7538)
!7619 = distinct !DISubprogram(name: "list_empty", scope: !6056, file: !6056, line: 280, type: !7620, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7620 = !DISubroutineType(types: !7621)
!7621 = !{!104, !7622}
!7622 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7623, size: 64)
!7623 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !47)
!7624 = !DILocalVariable(name: "head", arg: 1, scope: !7619, file: !6056, line: 280, type: !7622)
!7625 = !DILocation(line: 280, column: 54, scope: !7619)
!7626 = !DILocation(line: 282, column: 9, scope: !7627)
!7627 = distinct !DILexicalBlock(scope: !7619, file: !6056, line: 282, column: 9)
!7628 = !DILocation(line: 282, column: 9, scope: !7629)
!7629 = distinct !DILexicalBlock(scope: !7627, file: !6056, line: 282, column: 9)
!7630 = !DILocation(line: 282, column: 34, scope: !7619)
!7631 = !DILocation(line: 282, column: 31, scope: !7619)
!7632 = !DILocation(line: 282, column: 2, scope: !7619)
!7633 = distinct !DISubprogram(name: "list_del", scope: !6056, file: !6056, line: 144, type: !6057, scopeLine: 145, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7634 = !DILocalVariable(name: "entry", arg: 1, scope: !7633, file: !6056, line: 144, type: !50)
!7635 = !DILocation(line: 144, column: 47, scope: !7633)
!7636 = !DILocation(line: 146, column: 19, scope: !7633)
!7637 = !DILocation(line: 146, column: 2, scope: !7633)
!7638 = !DILocation(line: 147, column: 2, scope: !7633)
!7639 = !DILocation(line: 147, column: 9, scope: !7633)
!7640 = !DILocation(line: 147, column: 14, scope: !7633)
!7641 = !DILocation(line: 148, column: 2, scope: !7633)
!7642 = !DILocation(line: 148, column: 9, scope: !7633)
!7643 = !DILocation(line: 148, column: 14, scope: !7633)
!7644 = !DILocation(line: 149, column: 1, scope: !7633)
!7645 = distinct !DISubprogram(name: "mutex_destroy", scope: !15, file: !15, line: 103, type: !7646, scopeLine: 103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7646 = !DISubroutineType(types: !7647)
!7647 = !{null, !7648}
!7648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !14, size: 64)
!7649 = !DILocalVariable(name: "lock", arg: 1, scope: !7645, file: !15, line: 103, type: !7648)
!7650 = !DILocation(line: 103, column: 48, scope: !7645)
!7651 = !DILocation(line: 103, column: 55, scope: !7645)
!7652 = distinct !DISubprogram(name: "dev_get_regmap", scope: !3, file: !3, line: 1530, type: !7653, scopeLine: 1531, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7653 = !DISubroutineType(types: !7654)
!7654 = !{!6, !72, !81}
!7655 = !DILocalVariable(name: "dev", arg: 1, scope: !7652, file: !3, line: 1530, type: !72)
!7656 = !DILocation(line: 1530, column: 46, scope: !7652)
!7657 = !DILocalVariable(name: "name", arg: 2, scope: !7652, file: !3, line: 1530, type: !81)
!7658 = !DILocation(line: 1530, column: 63, scope: !7652)
!7659 = !DILocalVariable(name: "r", scope: !7652, file: !3, line: 1532, type: !3857)
!7660 = !DILocation(line: 1532, column: 18, scope: !7652)
!7661 = !DILocation(line: 1532, column: 34, scope: !7652)
!7662 = !DILocation(line: 1533, column: 36, scope: !7652)
!7663 = !DILocation(line: 1532, column: 22, scope: !7652)
!7664 = !DILocation(line: 1535, column: 7, scope: !7665)
!7665 = distinct !DILexicalBlock(scope: !7652, file: !3, line: 1535, column: 6)
!7666 = !DILocation(line: 1535, column: 6, scope: !7652)
!7667 = !DILocation(line: 1536, column: 3, scope: !7665)
!7668 = !DILocation(line: 1537, column: 10, scope: !7652)
!7669 = !DILocation(line: 1537, column: 9, scope: !7652)
!7670 = !DILocation(line: 1537, column: 2, scope: !7652)
!7671 = !DILocation(line: 1538, column: 1, scope: !7652)
!7672 = distinct !DISubprogram(name: "dev_get_regmap_match", scope: !3, file: !3, line: 1503, type: !7673, scopeLine: 1504, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7673 = !DISubroutineType(types: !7674)
!7674 = !{!104, !72, !64, !64}
!7675 = !DILocalVariable(name: "dev", arg: 1, scope: !7672, file: !3, line: 1503, type: !72)
!7676 = !DILocation(line: 1503, column: 48, scope: !7672)
!7677 = !DILocalVariable(name: "res", arg: 2, scope: !7672, file: !3, line: 1503, type: !64)
!7678 = !DILocation(line: 1503, column: 59, scope: !7672)
!7679 = !DILocalVariable(name: "data", arg: 3, scope: !7672, file: !3, line: 1503, type: !64)
!7680 = !DILocation(line: 1503, column: 70, scope: !7672)
!7681 = !DILocalVariable(name: "r", scope: !7672, file: !3, line: 1505, type: !3857)
!7682 = !DILocation(line: 1505, column: 18, scope: !7672)
!7683 = !DILocation(line: 1505, column: 22, scope: !7672)
!7684 = !DILocation(line: 1506, column: 7, scope: !7685)
!7685 = distinct !DILexicalBlock(scope: !7672, file: !3, line: 1506, column: 6)
!7686 = !DILocation(line: 1506, column: 9, scope: !7685)
!7687 = !DILocation(line: 1506, column: 14, scope: !7685)
!7688 = !DILocation(line: 1506, column: 13, scope: !7685)
!7689 = !DILocation(line: 1506, column: 6, scope: !7672)
!7690 = !DILocalVariable(name: "__ret_warn_on", scope: !7691, file: !3, line: 1507, type: !104)
!7691 = distinct !DILexicalBlock(scope: !7692, file: !3, line: 1507, column: 3)
!7692 = distinct !DILexicalBlock(scope: !7685, file: !3, line: 1506, column: 17)
!7693 = !DILocation(line: 1507, column: 3, scope: !7691)
!7694 = !DILocation(line: 1507, column: 3, scope: !7695)
!7695 = distinct !DILexicalBlock(scope: !7691, file: !3, line: 1507, column: 3)
!7696 = !DILocation(line: 1507, column: 3, scope: !7697)
!7697 = distinct !DILexicalBlock(scope: !7695, file: !3, line: 1507, column: 3)
!7698 = !DILocation(line: 1507, column: 3, scope: !7699)
!7699 = distinct !DILexicalBlock(scope: !7697, file: !3, line: 1507, column: 3)
!7700 = !DILocation(line: 1507, column: 3, scope: !7701)
!7701 = distinct !DILexicalBlock(scope: !7697, file: !3, line: 1507, column: 3)
!7702 = !{i32 -2142563084, i32 -2142563055, i32 -2142563009, i32 -2142562951, i32 -2142562897, i32 -2142562843, i32 -2142562788, i32 -2142562757}
!7703 = !DILocation(line: 1507, column: 3, scope: !7704)
!7704 = distinct !DILexicalBlock(scope: !7697, file: !3, line: 1507, column: 3)
!7705 = !{i32 -2142562346, i32 -2142562339, i32 -2142562287, i32 -2142562256, i32 -2142562226}
!7706 = !DILocation(line: 1507, column: 3, scope: !7707)
!7707 = distinct !DILexicalBlock(scope: !7697, file: !3, line: 1507, column: 3)
!7708 = !DILocation(line: 1508, column: 3, scope: !7692)
!7709 = !DILocation(line: 1512, column: 6, scope: !7710)
!7710 = distinct !DILexicalBlock(scope: !7672, file: !3, line: 1512, column: 6)
!7711 = !DILocation(line: 1512, column: 6, scope: !7672)
!7712 = !DILocation(line: 1513, column: 20, scope: !7710)
!7713 = !DILocation(line: 1513, column: 19, scope: !7710)
!7714 = !DILocation(line: 1513, column: 24, scope: !7710)
!7715 = !DILocation(line: 1513, column: 30, scope: !7710)
!7716 = !DILocation(line: 1513, column: 11, scope: !7710)
!7717 = !DILocation(line: 1513, column: 10, scope: !7710)
!7718 = !DILocation(line: 1513, column: 3, scope: !7710)
!7719 = !DILocation(line: 1515, column: 3, scope: !7710)
!7720 = !DILocation(line: 1516, column: 1, scope: !7672)
!7721 = distinct !DISubprogram(name: "regmap_get_device", scope: !3, file: !3, line: 1548, type: !7722, scopeLine: 1549, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7722 = !DISubroutineType(types: !7723)
!7723 = !{!72, !6}
!7724 = !DILocalVariable(name: "map", arg: 1, scope: !7721, file: !3, line: 1548, type: !6)
!7725 = !DILocation(line: 1548, column: 49, scope: !7721)
!7726 = !DILocation(line: 1550, column: 9, scope: !7721)
!7727 = !DILocation(line: 1550, column: 14, scope: !7721)
!7728 = !DILocation(line: 1550, column: 2, scope: !7721)
!7729 = distinct !DISubprogram(name: "regmap_can_raw_write", scope: !3, file: !3, line: 1821, type: !7730, scopeLine: 1822, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7730 = !DISubroutineType(types: !7731)
!7731 = !{!331, !6}
!7732 = !DILocalVariable(name: "map", arg: 1, scope: !7729, file: !3, line: 1821, type: !6)
!7733 = !DILocation(line: 1821, column: 42, scope: !7729)
!7734 = !DILocation(line: 1823, column: 9, scope: !7729)
!7735 = !DILocation(line: 1823, column: 14, scope: !7729)
!7736 = !DILocation(line: 1823, column: 18, scope: !7729)
!7737 = !DILocation(line: 1823, column: 21, scope: !7729)
!7738 = !DILocation(line: 1823, column: 26, scope: !7729)
!7739 = !DILocation(line: 1823, column: 31, scope: !7729)
!7740 = !DILocation(line: 1823, column: 37, scope: !7729)
!7741 = !DILocation(line: 1823, column: 40, scope: !7729)
!7742 = !DILocation(line: 1823, column: 45, scope: !7729)
!7743 = !DILocation(line: 1823, column: 52, scope: !7729)
!7744 = !DILocation(line: 1823, column: 63, scope: !7729)
!7745 = !DILocation(line: 1824, column: 3, scope: !7729)
!7746 = !DILocation(line: 1824, column: 8, scope: !7729)
!7747 = !DILocation(line: 1824, column: 15, scope: !7729)
!7748 = !DILocation(line: 0, scope: !7729)
!7749 = !DILocation(line: 1823, column: 2, scope: !7729)
!7750 = distinct !DISubprogram(name: "regmap_get_raw_read_max", scope: !3, file: !3, line: 1833, type: !7751, scopeLine: 1834, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7751 = !DISubroutineType(types: !7752)
!7752 = !{!167, !6}
!7753 = !DILocalVariable(name: "map", arg: 1, scope: !7750, file: !3, line: 1833, type: !6)
!7754 = !DILocation(line: 1833, column: 47, scope: !7750)
!7755 = !DILocation(line: 1835, column: 9, scope: !7750)
!7756 = !DILocation(line: 1835, column: 14, scope: !7750)
!7757 = !DILocation(line: 1835, column: 2, scope: !7750)
!7758 = distinct !DISubprogram(name: "regmap_get_raw_write_max", scope: !3, file: !3, line: 1844, type: !7751, scopeLine: 1845, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7759 = !DILocalVariable(name: "map", arg: 1, scope: !7758, file: !3, line: 1844, type: !6)
!7760 = !DILocation(line: 1844, column: 48, scope: !7758)
!7761 = !DILocation(line: 1846, column: 9, scope: !7758)
!7762 = !DILocation(line: 1846, column: 14, scope: !7758)
!7763 = !DILocation(line: 1846, column: 2, scope: !7758)
!7764 = distinct !DISubprogram(name: "_regmap_write", scope: !3, file: !3, line: 1908, type: !3703, scopeLine: 1910, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7765 = !DILocalVariable(name: "map", arg: 1, scope: !7764, file: !3, line: 1908, type: !6)
!7766 = !DILocation(line: 1908, column: 34, scope: !7764)
!7767 = !DILocalVariable(name: "reg", arg: 2, scope: !7764, file: !3, line: 1908, type: !70)
!7768 = !DILocation(line: 1908, column: 52, scope: !7764)
!7769 = !DILocalVariable(name: "val", arg: 3, scope: !7764, file: !3, line: 1909, type: !70)
!7770 = !DILocation(line: 1909, column: 18, scope: !7764)
!7771 = !DILocalVariable(name: "ret", scope: !7764, file: !3, line: 1911, type: !104)
!7772 = !DILocation(line: 1911, column: 6, scope: !7764)
!7773 = !DILocalVariable(name: "context", scope: !7764, file: !3, line: 1912, type: !64)
!7774 = !DILocation(line: 1912, column: 8, scope: !7764)
!7775 = !DILocation(line: 1912, column: 42, scope: !7764)
!7776 = !DILocation(line: 1912, column: 18, scope: !7764)
!7777 = !DILocation(line: 1914, column: 24, scope: !7778)
!7778 = distinct !DILexicalBlock(scope: !7764, file: !3, line: 1914, column: 6)
!7779 = !DILocation(line: 1914, column: 29, scope: !7778)
!7780 = !DILocation(line: 1914, column: 7, scope: !7778)
!7781 = !DILocation(line: 1914, column: 6, scope: !7764)
!7782 = !DILocation(line: 1915, column: 3, scope: !7778)
!7783 = !DILocation(line: 1917, column: 7, scope: !7784)
!7784 = distinct !DILexicalBlock(scope: !7764, file: !3, line: 1917, column: 6)
!7785 = !DILocation(line: 1917, column: 12, scope: !7784)
!7786 = !DILocation(line: 1917, column: 25, scope: !7784)
!7787 = !DILocation(line: 1917, column: 29, scope: !7784)
!7788 = !DILocation(line: 1917, column: 34, scope: !7784)
!7789 = !DILocation(line: 1917, column: 6, scope: !7764)
!7790 = !DILocation(line: 1918, column: 24, scope: !7791)
!7791 = distinct !DILexicalBlock(scope: !7784, file: !3, line: 1917, column: 49)
!7792 = !DILocation(line: 1918, column: 29, scope: !7791)
!7793 = !DILocation(line: 1918, column: 34, scope: !7791)
!7794 = !DILocation(line: 1918, column: 9, scope: !7791)
!7795 = !DILocation(line: 1918, column: 7, scope: !7791)
!7796 = !DILocation(line: 1919, column: 7, scope: !7797)
!7797 = distinct !DILexicalBlock(scope: !7791, file: !3, line: 1919, column: 7)
!7798 = !DILocation(line: 1919, column: 11, scope: !7797)
!7799 = !DILocation(line: 1919, column: 7, scope: !7791)
!7800 = !DILocation(line: 1920, column: 11, scope: !7797)
!7801 = !DILocation(line: 1920, column: 4, scope: !7797)
!7802 = !DILocation(line: 1921, column: 7, scope: !7803)
!7803 = distinct !DILexicalBlock(scope: !7791, file: !3, line: 1921, column: 7)
!7804 = !DILocation(line: 1921, column: 12, scope: !7803)
!7805 = !DILocation(line: 1921, column: 7, scope: !7791)
!7806 = !DILocation(line: 1922, column: 4, scope: !7807)
!7807 = distinct !DILexicalBlock(scope: !7803, file: !3, line: 1921, column: 24)
!7808 = !DILocation(line: 1922, column: 9, scope: !7807)
!7809 = !DILocation(line: 1922, column: 21, scope: !7807)
!7810 = !DILocation(line: 1923, column: 4, scope: !7807)
!7811 = !DILocation(line: 1925, column: 2, scope: !7791)
!7812 = !DILocation(line: 1927, column: 24, scope: !7813)
!7813 = distinct !DILexicalBlock(scope: !7764, file: !3, line: 1927, column: 6)
!7814 = !DILocation(line: 1927, column: 6, scope: !7813)
!7815 = !DILocation(line: 1927, column: 6, scope: !7764)
!7816 = !DILocation(line: 1928, column: 3, scope: !7813)
!7817 = !DILocation(line: 1930, column: 25, scope: !7764)
!7818 = !DILocation(line: 1930, column: 30, scope: !7764)
!7819 = !DILocation(line: 1930, column: 35, scope: !7764)
!7820 = !DILocation(line: 1930, column: 2, scope: !7764)
!7821 = !DILocation(line: 1932, column: 9, scope: !7764)
!7822 = !DILocation(line: 1932, column: 14, scope: !7764)
!7823 = !DILocation(line: 1932, column: 24, scope: !7764)
!7824 = !DILocation(line: 1932, column: 33, scope: !7764)
!7825 = !DILocation(line: 1932, column: 38, scope: !7764)
!7826 = !DILocation(line: 1932, column: 2, scope: !7764)
!7827 = !DILocation(line: 1933, column: 1, scope: !7764)
!7828 = distinct !DISubprogram(name: "_regmap_map_get_context", scope: !3, file: !3, line: 1903, type: !7829, scopeLine: 1904, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7829 = !DISubroutineType(types: !7830)
!7830 = !{!64, !6}
!7831 = !DILocalVariable(name: "map", arg: 1, scope: !7828, file: !3, line: 1903, type: !6)
!7832 = !DILocation(line: 1903, column: 60, scope: !7828)
!7833 = !DILocation(line: 1905, column: 10, scope: !7828)
!7834 = !DILocation(line: 1905, column: 15, scope: !7828)
!7835 = !DILocation(line: 1905, column: 9, scope: !7828)
!7836 = !DILocation(line: 1905, column: 22, scope: !7828)
!7837 = !DILocation(line: 1905, column: 28, scope: !7828)
!7838 = !DILocation(line: 1905, column: 33, scope: !7828)
!7839 = !DILocation(line: 1905, column: 2, scope: !7828)
!7840 = distinct !DISubprogram(name: "regmap_should_log", scope: !3, file: !3, line: 41, type: !7730, scopeLine: 41, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7841 = !DILocalVariable(name: "map", arg: 1, scope: !7840, file: !3, line: 41, type: !6)
!7842 = !DILocation(line: 41, column: 53, scope: !7840)
!7843 = !DILocation(line: 41, column: 60, scope: !7840)
!7844 = distinct !DISubprogram(name: "trace_regmap_reg_write", scope: !7845, file: !7845, line: 40, type: !3555, scopeLine: 40, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7845 = !DIFile(filename: "drivers/base/regmap/./trace.h", directory: "/home/lizy2001/genbc/linux")
!7846 = !DILocalVariable(name: "map", arg: 1, scope: !7844, file: !7845, line: 40, type: !6)
!7847 = !DILocation(line: 40, column: 1, scope: !7844)
!7848 = !DILocalVariable(name: "reg", arg: 2, scope: !7844, file: !7845, line: 40, type: !70)
!7849 = !DILocalVariable(name: "val", arg: 3, scope: !7844, file: !7845, line: 40, type: !70)
!7850 = distinct !DISubprogram(name: "regmap_write", scope: !3, file: !3, line: 1945, type: !3703, scopeLine: 1946, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7851 = !DILocalVariable(name: "map", arg: 1, scope: !7850, file: !3, line: 1945, type: !6)
!7852 = !DILocation(line: 1945, column: 33, scope: !7850)
!7853 = !DILocalVariable(name: "reg", arg: 2, scope: !7850, file: !3, line: 1945, type: !70)
!7854 = !DILocation(line: 1945, column: 51, scope: !7850)
!7855 = !DILocalVariable(name: "val", arg: 3, scope: !7850, file: !3, line: 1945, type: !70)
!7856 = !DILocation(line: 1945, column: 69, scope: !7850)
!7857 = !DILocalVariable(name: "ret", scope: !7850, file: !3, line: 1947, type: !104)
!7858 = !DILocation(line: 1947, column: 6, scope: !7850)
!7859 = !DILocation(line: 1949, column: 7, scope: !7860)
!7860 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 1949, column: 6)
!7861 = !DILocation(line: 1949, column: 6, scope: !7850)
!7862 = !DILocation(line: 1950, column: 3, scope: !7860)
!7863 = !DILocation(line: 1952, column: 2, scope: !7850)
!7864 = !DILocation(line: 1952, column: 7, scope: !7850)
!7865 = !DILocation(line: 1952, column: 12, scope: !7850)
!7866 = !DILocation(line: 1952, column: 17, scope: !7850)
!7867 = !DILocation(line: 1954, column: 22, scope: !7850)
!7868 = !DILocation(line: 1954, column: 27, scope: !7850)
!7869 = !DILocation(line: 1954, column: 32, scope: !7850)
!7870 = !DILocation(line: 1954, column: 8, scope: !7850)
!7871 = !DILocation(line: 1954, column: 6, scope: !7850)
!7872 = !DILocation(line: 1956, column: 2, scope: !7850)
!7873 = !DILocation(line: 1956, column: 7, scope: !7850)
!7874 = !DILocation(line: 1956, column: 14, scope: !7850)
!7875 = !DILocation(line: 1956, column: 19, scope: !7850)
!7876 = !DILocation(line: 1958, column: 9, scope: !7850)
!7877 = !DILocation(line: 1958, column: 2, scope: !7850)
!7878 = !DILocation(line: 1959, column: 1, scope: !7850)
!7879 = distinct !DISubprogram(name: "regmap_write_async", scope: !3, file: !3, line: 1972, type: !3703, scopeLine: 1973, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7880 = !DILocalVariable(name: "map", arg: 1, scope: !7879, file: !3, line: 1972, type: !6)
!7881 = !DILocation(line: 1972, column: 39, scope: !7879)
!7882 = !DILocalVariable(name: "reg", arg: 2, scope: !7879, file: !3, line: 1972, type: !70)
!7883 = !DILocation(line: 1972, column: 57, scope: !7879)
!7884 = !DILocalVariable(name: "val", arg: 3, scope: !7879, file: !3, line: 1972, type: !70)
!7885 = !DILocation(line: 1972, column: 75, scope: !7879)
!7886 = !DILocalVariable(name: "ret", scope: !7879, file: !3, line: 1974, type: !104)
!7887 = !DILocation(line: 1974, column: 6, scope: !7879)
!7888 = !DILocation(line: 1976, column: 7, scope: !7889)
!7889 = distinct !DILexicalBlock(scope: !7879, file: !3, line: 1976, column: 6)
!7890 = !DILocation(line: 1976, column: 6, scope: !7879)
!7891 = !DILocation(line: 1977, column: 3, scope: !7889)
!7892 = !DILocation(line: 1979, column: 2, scope: !7879)
!7893 = !DILocation(line: 1979, column: 7, scope: !7879)
!7894 = !DILocation(line: 1979, column: 12, scope: !7879)
!7895 = !DILocation(line: 1979, column: 17, scope: !7879)
!7896 = !DILocation(line: 1981, column: 2, scope: !7879)
!7897 = !DILocation(line: 1981, column: 7, scope: !7879)
!7898 = !DILocation(line: 1981, column: 13, scope: !7879)
!7899 = !DILocation(line: 1983, column: 22, scope: !7879)
!7900 = !DILocation(line: 1983, column: 27, scope: !7879)
!7901 = !DILocation(line: 1983, column: 32, scope: !7879)
!7902 = !DILocation(line: 1983, column: 8, scope: !7879)
!7903 = !DILocation(line: 1983, column: 6, scope: !7879)
!7904 = !DILocation(line: 1985, column: 2, scope: !7879)
!7905 = !DILocation(line: 1985, column: 7, scope: !7879)
!7906 = !DILocation(line: 1985, column: 13, scope: !7879)
!7907 = !DILocation(line: 1987, column: 2, scope: !7879)
!7908 = !DILocation(line: 1987, column: 7, scope: !7879)
!7909 = !DILocation(line: 1987, column: 14, scope: !7879)
!7910 = !DILocation(line: 1987, column: 19, scope: !7879)
!7911 = !DILocation(line: 1989, column: 9, scope: !7879)
!7912 = !DILocation(line: 1989, column: 2, scope: !7879)
!7913 = !DILocation(line: 1990, column: 1, scope: !7879)
!7914 = distinct !DISubprogram(name: "_regmap_raw_write", scope: !3, file: !3, line: 1993, type: !7915, scopeLine: 1995, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!7915 = !DISubroutineType(types: !7916)
!7916 = !{!104, !6, !70, !1880, !167, !331}
!7917 = !DILocalVariable(name: "map", arg: 1, scope: !7914, file: !3, line: 1993, type: !6)
!7918 = !DILocation(line: 1993, column: 38, scope: !7914)
!7919 = !DILocalVariable(name: "reg", arg: 2, scope: !7914, file: !3, line: 1993, type: !70)
!7920 = !DILocation(line: 1993, column: 56, scope: !7914)
!7921 = !DILocalVariable(name: "val", arg: 3, scope: !7914, file: !3, line: 1994, type: !1880)
!7922 = !DILocation(line: 1994, column: 21, scope: !7914)
!7923 = !DILocalVariable(name: "val_len", arg: 4, scope: !7914, file: !3, line: 1994, type: !167)
!7924 = !DILocation(line: 1994, column: 33, scope: !7914)
!7925 = !DILocalVariable(name: "noinc", arg: 5, scope: !7914, file: !3, line: 1994, type: !331)
!7926 = !DILocation(line: 1994, column: 47, scope: !7914)
!7927 = !DILocalVariable(name: "val_bytes", scope: !7914, file: !3, line: 1996, type: !167)
!7928 = !DILocation(line: 1996, column: 9, scope: !7914)
!7929 = !DILocation(line: 1996, column: 21, scope: !7914)
!7930 = !DILocation(line: 1996, column: 26, scope: !7914)
!7931 = !DILocation(line: 1996, column: 33, scope: !7914)
!7932 = !DILocalVariable(name: "val_count", scope: !7914, file: !3, line: 1997, type: !167)
!7933 = !DILocation(line: 1997, column: 9, scope: !7914)
!7934 = !DILocation(line: 1997, column: 21, scope: !7914)
!7935 = !DILocation(line: 1997, column: 31, scope: !7914)
!7936 = !DILocation(line: 1997, column: 29, scope: !7914)
!7937 = !DILocalVariable(name: "chunk_count", scope: !7914, file: !3, line: 1998, type: !167)
!7938 = !DILocation(line: 1998, column: 9, scope: !7914)
!7939 = !DILocalVariable(name: "chunk_bytes", scope: !7914, file: !3, line: 1998, type: !167)
!7940 = !DILocation(line: 1998, column: 22, scope: !7914)
!7941 = !DILocalVariable(name: "chunk_regs", scope: !7914, file: !3, line: 1999, type: !167)
!7942 = !DILocation(line: 1999, column: 9, scope: !7914)
!7943 = !DILocation(line: 1999, column: 22, scope: !7914)
!7944 = !DILocalVariable(name: "ret", scope: !7914, file: !3, line: 2000, type: !104)
!7945 = !DILocation(line: 2000, column: 6, scope: !7914)
!7946 = !DILocalVariable(name: "i", scope: !7914, file: !3, line: 2000, type: !104)
!7947 = !DILocation(line: 2000, column: 11, scope: !7914)
!7948 = !DILocation(line: 2002, column: 7, scope: !7949)
!7949 = distinct !DILexicalBlock(scope: !7914, file: !3, line: 2002, column: 6)
!7950 = !DILocation(line: 2002, column: 6, scope: !7914)
!7951 = !DILocation(line: 2003, column: 3, scope: !7949)
!7952 = !DILocation(line: 2005, column: 6, scope: !7953)
!7953 = distinct !DILexicalBlock(scope: !7914, file: !3, line: 2005, column: 6)
!7954 = !DILocation(line: 2005, column: 11, scope: !7953)
!7955 = !DILocation(line: 2005, column: 6, scope: !7914)
!7956 = !DILocation(line: 2006, column: 14, scope: !7953)
!7957 = !DILocation(line: 2006, column: 3, scope: !7953)
!7958 = !DILocation(line: 2007, column: 11, scope: !7959)
!7959 = distinct !DILexicalBlock(scope: !7953, file: !3, line: 2007, column: 11)
!7960 = !DILocation(line: 2007, column: 16, scope: !7959)
!7961 = !DILocation(line: 2007, column: 30, scope: !7959)
!7962 = !DILocation(line: 2007, column: 33, scope: !7959)
!7963 = !DILocation(line: 2007, column: 43, scope: !7959)
!7964 = !DILocation(line: 2007, column: 48, scope: !7959)
!7965 = !DILocation(line: 2007, column: 41, scope: !7959)
!7966 = !DILocation(line: 2007, column: 11, scope: !7953)
!7967 = !DILocation(line: 2008, column: 16, scope: !7959)
!7968 = !DILocation(line: 2008, column: 21, scope: !7959)
!7969 = !DILocation(line: 2008, column: 37, scope: !7959)
!7970 = !DILocation(line: 2008, column: 35, scope: !7959)
!7971 = !DILocation(line: 2008, column: 14, scope: !7959)
!7972 = !DILocation(line: 2008, column: 3, scope: !7959)
!7973 = !DILocation(line: 2010, column: 16, scope: !7914)
!7974 = !DILocation(line: 2010, column: 28, scope: !7914)
!7975 = !DILocation(line: 2010, column: 26, scope: !7914)
!7976 = !DILocation(line: 2010, column: 14, scope: !7914)
!7977 = !DILocation(line: 2011, column: 16, scope: !7914)
!7978 = !DILocation(line: 2011, column: 29, scope: !7914)
!7979 = !DILocation(line: 2011, column: 27, scope: !7914)
!7980 = !DILocation(line: 2011, column: 14, scope: !7914)
!7981 = !DILocation(line: 2014, column: 9, scope: !7982)
!7982 = distinct !DILexicalBlock(scope: !7914, file: !3, line: 2014, column: 2)
!7983 = !DILocation(line: 2014, column: 7, scope: !7982)
!7984 = !DILocation(line: 2014, column: 14, scope: !7985)
!7985 = distinct !DILexicalBlock(scope: !7982, file: !3, line: 2014, column: 2)
!7986 = !DILocation(line: 2014, column: 18, scope: !7985)
!7987 = !DILocation(line: 2014, column: 16, scope: !7985)
!7988 = !DILocation(line: 2014, column: 2, scope: !7982)
!7989 = !DILocation(line: 2015, column: 32, scope: !7990)
!7990 = distinct !DILexicalBlock(scope: !7985, file: !3, line: 2014, column: 36)
!7991 = !DILocation(line: 2015, column: 37, scope: !7990)
!7992 = !DILocation(line: 2015, column: 42, scope: !7990)
!7993 = !DILocation(line: 2015, column: 47, scope: !7990)
!7994 = !DILocation(line: 2015, column: 60, scope: !7990)
!7995 = !DILocation(line: 2015, column: 9, scope: !7990)
!7996 = !DILocation(line: 2015, column: 7, scope: !7990)
!7997 = !DILocation(line: 2016, column: 7, scope: !7998)
!7998 = distinct !DILexicalBlock(scope: !7990, file: !3, line: 2016, column: 7)
!7999 = !DILocation(line: 2016, column: 7, scope: !7990)
!8000 = !DILocation(line: 2017, column: 11, scope: !7998)
!8001 = !DILocation(line: 2017, column: 4, scope: !7998)
!8002 = !DILocation(line: 2019, column: 28, scope: !7990)
!8003 = !DILocation(line: 2019, column: 33, scope: !7990)
!8004 = !DILocation(line: 2019, column: 10, scope: !7990)
!8005 = !DILocation(line: 2019, column: 7, scope: !7990)
!8006 = !DILocation(line: 2020, column: 10, scope: !7990)
!8007 = !DILocation(line: 2020, column: 7, scope: !7990)
!8008 = !DILocation(line: 2021, column: 14, scope: !7990)
!8009 = !DILocation(line: 2021, column: 11, scope: !7990)
!8010 = !DILocation(line: 2022, column: 2, scope: !7990)
!8011 = !DILocation(line: 2014, column: 32, scope: !7985)
!8012 = !DILocation(line: 2014, column: 2, scope: !7985)
!8013 = distinct !{!8013, !7988, !8014}
!8014 = !DILocation(line: 2022, column: 2, scope: !7982)
!8015 = !DILocation(line: 2025, column: 6, scope: !8016)
!8016 = distinct !DILexicalBlock(scope: !7914, file: !3, line: 2025, column: 6)
!8017 = !DILocation(line: 2025, column: 6, scope: !7914)
!8018 = !DILocation(line: 2026, column: 32, scope: !8016)
!8019 = !DILocation(line: 2026, column: 37, scope: !8016)
!8020 = !DILocation(line: 2026, column: 42, scope: !8016)
!8021 = !DILocation(line: 2026, column: 47, scope: !8016)
!8022 = !DILocation(line: 2026, column: 56, scope: !8016)
!8023 = !DILocation(line: 2026, column: 9, scope: !8016)
!8024 = !DILocation(line: 2026, column: 7, scope: !8016)
!8025 = !DILocation(line: 2026, column: 3, scope: !8016)
!8026 = !DILocation(line: 2028, column: 9, scope: !7914)
!8027 = !DILocation(line: 2028, column: 2, scope: !7914)
!8028 = !DILocation(line: 2029, column: 1, scope: !7914)
!8029 = distinct !DISubprogram(name: "_regmap_raw_write_impl", scope: !3, file: !3, line: 1617, type: !7915, scopeLine: 1619, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!8030 = !DILocation(line: 407, column: 64, scope: !5962, inlinedAt: !8031)
!8031 = distinct !DILocation(line: 1765, column: 4, scope: !8032)
!8032 = distinct !DILexicalBlock(scope: !8033, file: !3, line: 1759, column: 17)
!8033 = distinct !DILexicalBlock(scope: !8034, file: !3, line: 1759, column: 7)
!8034 = distinct !DILexicalBlock(scope: !8035, file: !3, line: 1710, column: 43)
!8035 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 1710, column: 6)
!8036 = !DILocation(line: 407, column: 84, scope: !5962, inlinedAt: !8031)
!8037 = !DILocation(line: 327, column: 67, scope: !4414, inlinedAt: !8038)
!8038 = distinct !DILocation(line: 1763, column: 4, scope: !8039)
!8039 = distinct !DILexicalBlock(scope: !8040, file: !3, line: 1763, column: 4)
!8040 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 1763, column: 4)
!8041 = distinct !DILexicalBlock(scope: !8042, file: !3, line: 1763, column: 4)
!8042 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 1763, column: 4)
!8043 = distinct !DILexicalBlock(scope: !8032, file: !3, line: 1763, column: 4)
!8044 = !DILocation(line: 407, column: 64, scope: !5962, inlinedAt: !8045)
!8045 = distinct !DILocation(line: 1744, column: 3, scope: !8034)
!8046 = !DILocation(line: 407, column: 84, scope: !5962, inlinedAt: !8045)
!8047 = !DILocation(line: 327, column: 67, scope: !4414, inlinedAt: !8048)
!8048 = distinct !DILocation(line: 1742, column: 3, scope: !8049)
!8049 = distinct !DILexicalBlock(scope: !8050, file: !3, line: 1742, column: 3)
!8050 = distinct !DILexicalBlock(scope: !8051, file: !3, line: 1742, column: 3)
!8051 = distinct !DILexicalBlock(scope: !8052, file: !3, line: 1742, column: 3)
!8052 = distinct !DILexicalBlock(scope: !8053, file: !3, line: 1742, column: 3)
!8053 = distinct !DILexicalBlock(scope: !8034, file: !3, line: 1742, column: 3)
!8054 = !DILocation(line: 407, column: 64, scope: !5962, inlinedAt: !8055)
!8055 = distinct !DILocation(line: 1721, column: 3, scope: !8034)
!8056 = !DILocation(line: 407, column: 84, scope: !5962, inlinedAt: !8055)
!8057 = !DILocation(line: 327, column: 67, scope: !4414, inlinedAt: !8058)
!8058 = distinct !DILocation(line: 1715, column: 3, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !8060, file: !3, line: 1715, column: 3)
!8060 = distinct !DILexicalBlock(scope: !8061, file: !3, line: 1715, column: 3)
!8061 = distinct !DILexicalBlock(scope: !8062, file: !3, line: 1715, column: 3)
!8062 = distinct !DILexicalBlock(scope: !8063, file: !3, line: 1715, column: 3)
!8063 = distinct !DILexicalBlock(scope: !8034, file: !3, line: 1715, column: 3)
!8064 = !DILocalVariable(name: "map", arg: 1, scope: !8029, file: !3, line: 1617, type: !6)
!8065 = !DILocation(line: 1617, column: 50, scope: !8029)
!8066 = !DILocalVariable(name: "reg", arg: 2, scope: !8029, file: !3, line: 1617, type: !70)
!8067 = !DILocation(line: 1617, column: 68, scope: !8029)
!8068 = !DILocalVariable(name: "val", arg: 3, scope: !8029, file: !3, line: 1618, type: !1880)
!8069 = !DILocation(line: 1618, column: 19, scope: !8029)
!8070 = !DILocalVariable(name: "val_len", arg: 4, scope: !8029, file: !3, line: 1618, type: !167)
!8071 = !DILocation(line: 1618, column: 31, scope: !8029)
!8072 = !DILocalVariable(name: "noinc", arg: 5, scope: !8029, file: !3, line: 1618, type: !331)
!8073 = !DILocation(line: 1618, column: 45, scope: !8029)
!8074 = !DILocalVariable(name: "range", scope: !8029, file: !3, line: 1620, type: !3844)
!8075 = !DILocation(line: 1620, column: 28, scope: !8029)
!8076 = !DILocalVariable(name: "flags", scope: !8029, file: !3, line: 1621, type: !57)
!8077 = !DILocation(line: 1621, column: 16, scope: !8029)
!8078 = !DILocalVariable(name: "work_val", scope: !8029, file: !3, line: 1622, type: !64)
!8079 = !DILocation(line: 1622, column: 8, scope: !8029)
!8080 = !DILocation(line: 1622, column: 19, scope: !8029)
!8081 = !DILocation(line: 1622, column: 24, scope: !8029)
!8082 = !DILocation(line: 1622, column: 35, scope: !8029)
!8083 = !DILocation(line: 1622, column: 40, scope: !8029)
!8084 = !DILocation(line: 1622, column: 47, scope: !8029)
!8085 = !DILocation(line: 1622, column: 33, scope: !8029)
!8086 = !DILocation(line: 1623, column: 3, scope: !8029)
!8087 = !DILocation(line: 1623, column: 8, scope: !8029)
!8088 = !DILocation(line: 1623, column: 15, scope: !8029)
!8089 = !DILocation(line: 1622, column: 57, scope: !8029)
!8090 = !DILocalVariable(name: "buf", scope: !8029, file: !3, line: 1624, type: !64)
!8091 = !DILocation(line: 1624, column: 8, scope: !8029)
!8092 = !DILocalVariable(name: "ret", scope: !8029, file: !3, line: 1625, type: !104)
!8093 = !DILocation(line: 1625, column: 6, scope: !8029)
!8094 = !DILocalVariable(name: "len", scope: !8029, file: !3, line: 1626, type: !167)
!8095 = !DILocation(line: 1626, column: 9, scope: !8029)
!8096 = !DILocalVariable(name: "i", scope: !8029, file: !3, line: 1627, type: !104)
!8097 = !DILocation(line: 1627, column: 6, scope: !8029)
!8098 = !DILocalVariable(name: "__ret_warn_on", scope: !8099, file: !3, line: 1629, type: !104)
!8099 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 1629, column: 2)
!8100 = !DILocation(line: 1629, column: 2, scope: !8099)
!8101 = !DILocation(line: 1629, column: 2, scope: !8102)
!8102 = distinct !DILexicalBlock(scope: !8099, file: !3, line: 1629, column: 2)
!8103 = !DILocation(line: 1629, column: 2, scope: !8104)
!8104 = distinct !DILexicalBlock(scope: !8102, file: !3, line: 1629, column: 2)
!8105 = !DILocation(line: 1629, column: 2, scope: !8106)
!8106 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 1629, column: 2)
!8107 = !DILocation(line: 1629, column: 2, scope: !8108)
!8108 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 1629, column: 2)
!8109 = !{i32 -2142561427, i32 -2142561398, i32 -2142561352, i32 -2142561294, i32 -2142561240, i32 -2142561186, i32 -2142561131, i32 -2142561100}
!8110 = !DILocation(line: 1629, column: 2, scope: !8111)
!8111 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 1629, column: 2)
!8112 = !{i32 -2142560689, i32 -2142560682, i32 -2142560630, i32 -2142560599, i32 -2142560569}
!8113 = !DILocation(line: 1629, column: 2, scope: !8114)
!8114 = distinct !DILexicalBlock(scope: !8104, file: !3, line: 1629, column: 2)
!8115 = !DILocation(line: 1634, column: 30, scope: !8116)
!8116 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 1634, column: 6)
!8117 = !DILocation(line: 1634, column: 35, scope: !8116)
!8118 = !DILocation(line: 1634, column: 7, scope: !8116)
!8119 = !DILocation(line: 1634, column: 6, scope: !8029)
!8120 = !DILocation(line: 1635, column: 10, scope: !8121)
!8121 = distinct !DILexicalBlock(scope: !8122, file: !3, line: 1635, column: 3)
!8122 = distinct !DILexicalBlock(scope: !8116, file: !3, line: 1634, column: 41)
!8123 = !DILocation(line: 1635, column: 8, scope: !8121)
!8124 = !DILocation(line: 1635, column: 15, scope: !8125)
!8125 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 1635, column: 3)
!8126 = !DILocation(line: 1635, column: 19, scope: !8125)
!8127 = !DILocation(line: 1635, column: 29, scope: !8125)
!8128 = !DILocation(line: 1635, column: 34, scope: !8125)
!8129 = !DILocation(line: 1635, column: 41, scope: !8125)
!8130 = !DILocation(line: 1635, column: 27, scope: !8125)
!8131 = !DILocation(line: 1635, column: 17, scope: !8125)
!8132 = !DILocation(line: 1635, column: 3, scope: !8121)
!8133 = !DILocalVariable(name: "element", scope: !8134, file: !3, line: 1636, type: !70)
!8134 = distinct !DILexicalBlock(scope: !8125, file: !3, line: 1635, column: 57)
!8135 = !DILocation(line: 1636, column: 17, scope: !8134)
!8136 = !DILocation(line: 1637, column: 5, scope: !8134)
!8137 = !DILocation(line: 1637, column: 29, scope: !8134)
!8138 = !DILocation(line: 1637, column: 34, scope: !8134)
!8139 = !DILocation(line: 1637, column: 11, scope: !8134)
!8140 = !DILocation(line: 1637, column: 9, scope: !8134)
!8141 = !DILocation(line: 1638, column: 26, scope: !8142)
!8142 = distinct !DILexicalBlock(scope: !8134, file: !3, line: 1638, column: 8)
!8143 = !DILocation(line: 1638, column: 31, scope: !8142)
!8144 = !DILocation(line: 1638, column: 9, scope: !8142)
!8145 = !DILocation(line: 1638, column: 40, scope: !8142)
!8146 = !DILocation(line: 1639, column: 28, scope: !8142)
!8147 = !DILocation(line: 1639, column: 33, scope: !8142)
!8148 = !DILocation(line: 1639, column: 5, scope: !8142)
!8149 = !DILocation(line: 1638, column: 8, scope: !8134)
!8150 = !DILocation(line: 1640, column: 5, scope: !8142)
!8151 = !DILocation(line: 1641, column: 3, scope: !8134)
!8152 = !DILocation(line: 1635, column: 53, scope: !8125)
!8153 = !DILocation(line: 1635, column: 3, scope: !8125)
!8154 = distinct !{!8154, !8132, !8155}
!8155 = !DILocation(line: 1641, column: 3, scope: !8121)
!8156 = !DILocation(line: 1642, column: 2, scope: !8122)
!8157 = !DILocation(line: 1644, column: 7, scope: !8158)
!8158 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 1644, column: 6)
!8159 = !DILocation(line: 1644, column: 12, scope: !8158)
!8160 = !DILocation(line: 1644, column: 25, scope: !8158)
!8161 = !DILocation(line: 1644, column: 28, scope: !8158)
!8162 = !DILocation(line: 1644, column: 33, scope: !8158)
!8163 = !DILocation(line: 1644, column: 40, scope: !8158)
!8164 = !DILocation(line: 1644, column: 6, scope: !8029)
!8165 = !DILocalVariable(name: "ival", scope: !8166, file: !3, line: 1645, type: !70)
!8166 = distinct !DILexicalBlock(scope: !8158, file: !3, line: 1644, column: 51)
!8167 = !DILocation(line: 1645, column: 16, scope: !8166)
!8168 = !DILocalVariable(name: "val_bytes", scope: !8166, file: !3, line: 1646, type: !104)
!8169 = !DILocation(line: 1646, column: 7, scope: !8166)
!8170 = !DILocation(line: 1646, column: 19, scope: !8166)
!8171 = !DILocation(line: 1646, column: 24, scope: !8166)
!8172 = !DILocation(line: 1646, column: 31, scope: !8166)
!8173 = !DILocation(line: 1647, column: 10, scope: !8174)
!8174 = distinct !DILexicalBlock(scope: !8166, file: !3, line: 1647, column: 3)
!8175 = !DILocation(line: 1647, column: 8, scope: !8174)
!8176 = !DILocation(line: 1647, column: 15, scope: !8177)
!8177 = distinct !DILexicalBlock(scope: !8174, file: !3, line: 1647, column: 3)
!8178 = !DILocation(line: 1647, column: 19, scope: !8177)
!8179 = !DILocation(line: 1647, column: 29, scope: !8177)
!8180 = !DILocation(line: 1647, column: 27, scope: !8177)
!8181 = !DILocation(line: 1647, column: 17, scope: !8177)
!8182 = !DILocation(line: 1647, column: 3, scope: !8174)
!8183 = !DILocation(line: 1648, column: 11, scope: !8184)
!8184 = distinct !DILexicalBlock(scope: !8177, file: !3, line: 1647, column: 45)
!8185 = !DILocation(line: 1648, column: 16, scope: !8184)
!8186 = !DILocation(line: 1648, column: 23, scope: !8184)
!8187 = !DILocation(line: 1648, column: 33, scope: !8184)
!8188 = !DILocation(line: 1648, column: 40, scope: !8184)
!8189 = !DILocation(line: 1648, column: 44, scope: !8184)
!8190 = !DILocation(line: 1648, column: 42, scope: !8184)
!8191 = !DILocation(line: 1648, column: 37, scope: !8184)
!8192 = !DILocation(line: 1648, column: 9, scope: !8184)
!8193 = !DILocation(line: 1649, column: 25, scope: !8184)
!8194 = !DILocation(line: 1650, column: 11, scope: !8184)
!8195 = !DILocation(line: 1650, column: 35, scope: !8184)
!8196 = !DILocation(line: 1650, column: 40, scope: !8184)
!8197 = !DILocation(line: 1650, column: 17, scope: !8184)
!8198 = !DILocation(line: 1650, column: 15, scope: !8184)
!8199 = !DILocation(line: 1651, column: 11, scope: !8184)
!8200 = !DILocation(line: 1649, column: 10, scope: !8184)
!8201 = !DILocation(line: 1649, column: 8, scope: !8184)
!8202 = !DILocation(line: 1652, column: 8, scope: !8203)
!8203 = distinct !DILexicalBlock(scope: !8184, file: !3, line: 1652, column: 8)
!8204 = !DILocation(line: 1652, column: 8, scope: !8184)
!8205 = !DILocation(line: 1653, column: 5, scope: !8206)
!8206 = distinct !DILexicalBlock(scope: !8203, file: !3, line: 1652, column: 13)
!8207 = !DILocation(line: 1656, column: 12, scope: !8206)
!8208 = !DILocation(line: 1656, column: 5, scope: !8206)
!8209 = !DILocation(line: 1658, column: 3, scope: !8184)
!8210 = !DILocation(line: 1647, column: 41, scope: !8177)
!8211 = !DILocation(line: 1647, column: 3, scope: !8177)
!8212 = distinct !{!8212, !8182, !8213}
!8213 = !DILocation(line: 1658, column: 3, scope: !8174)
!8214 = !DILocation(line: 1659, column: 7, scope: !8215)
!8215 = distinct !DILexicalBlock(scope: !8166, file: !3, line: 1659, column: 7)
!8216 = !DILocation(line: 1659, column: 12, scope: !8215)
!8217 = !DILocation(line: 1659, column: 7, scope: !8166)
!8218 = !DILocation(line: 1660, column: 4, scope: !8219)
!8219 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 1659, column: 24)
!8220 = !DILocation(line: 1660, column: 9, scope: !8219)
!8221 = !DILocation(line: 1660, column: 21, scope: !8219)
!8222 = !DILocation(line: 1661, column: 4, scope: !8219)
!8223 = !DILocation(line: 1663, column: 2, scope: !8166)
!8224 = !DILocation(line: 1665, column: 31, scope: !8029)
!8225 = !DILocation(line: 1665, column: 36, scope: !8029)
!8226 = !DILocation(line: 1665, column: 10, scope: !8029)
!8227 = !DILocation(line: 1665, column: 8, scope: !8029)
!8228 = !DILocation(line: 1666, column: 6, scope: !8229)
!8229 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 1666, column: 6)
!8230 = !DILocation(line: 1666, column: 6, scope: !8029)
!8231 = !DILocalVariable(name: "val_num", scope: !8232, file: !3, line: 1667, type: !104)
!8232 = distinct !DILexicalBlock(scope: !8229, file: !3, line: 1666, column: 13)
!8233 = !DILocation(line: 1667, column: 7, scope: !8232)
!8234 = !DILocation(line: 1667, column: 17, scope: !8232)
!8235 = !DILocation(line: 1667, column: 27, scope: !8232)
!8236 = !DILocation(line: 1667, column: 32, scope: !8232)
!8237 = !DILocation(line: 1667, column: 39, scope: !8232)
!8238 = !DILocation(line: 1667, column: 25, scope: !8232)
!8239 = !DILocalVariable(name: "win_offset", scope: !8232, file: !3, line: 1668, type: !104)
!8240 = !DILocation(line: 1668, column: 7, scope: !8232)
!8241 = !DILocation(line: 1668, column: 21, scope: !8232)
!8242 = !DILocation(line: 1668, column: 27, scope: !8232)
!8243 = !DILocation(line: 1668, column: 34, scope: !8232)
!8244 = !DILocation(line: 1668, column: 25, scope: !8232)
!8245 = !DILocation(line: 1668, column: 47, scope: !8232)
!8246 = !DILocation(line: 1668, column: 54, scope: !8232)
!8247 = !DILocation(line: 1668, column: 45, scope: !8232)
!8248 = !DILocalVariable(name: "win_residue", scope: !8232, file: !3, line: 1669, type: !104)
!8249 = !DILocation(line: 1669, column: 7, scope: !8232)
!8250 = !DILocation(line: 1669, column: 21, scope: !8232)
!8251 = !DILocation(line: 1669, column: 28, scope: !8232)
!8252 = !DILocation(line: 1669, column: 41, scope: !8232)
!8253 = !DILocation(line: 1669, column: 39, scope: !8232)
!8254 = !DILocation(line: 1672, column: 3, scope: !8232)
!8255 = !DILocation(line: 1672, column: 10, scope: !8232)
!8256 = !DILocation(line: 1672, column: 20, scope: !8232)
!8257 = !DILocation(line: 1672, column: 18, scope: !8232)
!8258 = !DILocation(line: 1675, column: 33, scope: !8259)
!8259 = distinct !DILexicalBlock(scope: !8232, file: !3, line: 1672, column: 33)
!8260 = !DILocation(line: 1675, column: 38, scope: !8259)
!8261 = !DILocation(line: 1675, column: 43, scope: !8259)
!8262 = !DILocation(line: 1676, column: 12, scope: !8259)
!8263 = !DILocation(line: 1677, column: 12, scope: !8259)
!8264 = !DILocation(line: 1677, column: 17, scope: !8259)
!8265 = !DILocation(line: 1677, column: 24, scope: !8259)
!8266 = !DILocation(line: 1676, column: 24, scope: !8259)
!8267 = !DILocation(line: 1677, column: 35, scope: !8259)
!8268 = !DILocation(line: 1675, column: 10, scope: !8259)
!8269 = !DILocation(line: 1675, column: 8, scope: !8259)
!8270 = !DILocation(line: 1678, column: 8, scope: !8271)
!8271 = distinct !DILexicalBlock(scope: !8259, file: !3, line: 1678, column: 8)
!8272 = !DILocation(line: 1678, column: 12, scope: !8271)
!8273 = !DILocation(line: 1678, column: 8, scope: !8259)
!8274 = !DILocation(line: 1679, column: 12, scope: !8271)
!8275 = !DILocation(line: 1679, column: 5, scope: !8271)
!8276 = !DILocation(line: 1681, column: 11, scope: !8259)
!8277 = !DILocation(line: 1681, column: 8, scope: !8259)
!8278 = !DILocation(line: 1682, column: 15, scope: !8259)
!8279 = !DILocation(line: 1682, column: 12, scope: !8259)
!8280 = !DILocation(line: 1683, column: 11, scope: !8259)
!8281 = !DILocation(line: 1683, column: 25, scope: !8259)
!8282 = !DILocation(line: 1683, column: 30, scope: !8259)
!8283 = !DILocation(line: 1683, column: 37, scope: !8259)
!8284 = !DILocation(line: 1683, column: 23, scope: !8259)
!8285 = !DILocation(line: 1683, column: 8, scope: !8259)
!8286 = !DILocation(line: 1684, column: 15, scope: !8259)
!8287 = !DILocation(line: 1684, column: 29, scope: !8259)
!8288 = !DILocation(line: 1684, column: 34, scope: !8259)
!8289 = !DILocation(line: 1684, column: 41, scope: !8259)
!8290 = !DILocation(line: 1684, column: 27, scope: !8259)
!8291 = !DILocation(line: 1684, column: 12, scope: !8259)
!8292 = !DILocation(line: 1686, column: 18, scope: !8259)
!8293 = !DILocation(line: 1686, column: 24, scope: !8259)
!8294 = !DILocation(line: 1686, column: 31, scope: !8259)
!8295 = !DILocation(line: 1686, column: 22, scope: !8259)
!8296 = !DILocation(line: 1687, column: 5, scope: !8259)
!8297 = !DILocation(line: 1687, column: 12, scope: !8259)
!8298 = !DILocation(line: 1686, column: 42, scope: !8259)
!8299 = !DILocation(line: 1686, column: 15, scope: !8259)
!8300 = !DILocation(line: 1688, column: 18, scope: !8259)
!8301 = !DILocation(line: 1688, column: 25, scope: !8259)
!8302 = !DILocation(line: 1688, column: 38, scope: !8259)
!8303 = !DILocation(line: 1688, column: 36, scope: !8259)
!8304 = !DILocation(line: 1688, column: 16, scope: !8259)
!8305 = distinct !{!8305, !8254, !8306}
!8306 = !DILocation(line: 1689, column: 3, scope: !8232)
!8307 = !DILocation(line: 1691, column: 29, scope: !8232)
!8308 = !DILocation(line: 1691, column: 40, scope: !8232)
!8309 = !DILocation(line: 1691, column: 47, scope: !8232)
!8310 = !DILocation(line: 1691, column: 59, scope: !8232)
!8311 = !DILocation(line: 1691, column: 9, scope: !8232)
!8312 = !DILocation(line: 1691, column: 7, scope: !8232)
!8313 = !DILocation(line: 1692, column: 7, scope: !8314)
!8314 = distinct !DILexicalBlock(scope: !8232, file: !3, line: 1692, column: 7)
!8315 = !DILocation(line: 1692, column: 11, scope: !8314)
!8316 = !DILocation(line: 1692, column: 7, scope: !8232)
!8317 = !DILocation(line: 1693, column: 11, scope: !8314)
!8318 = !DILocation(line: 1693, column: 4, scope: !8314)
!8319 = !DILocation(line: 1694, column: 2, scope: !8232)
!8320 = !DILocation(line: 1696, column: 2, scope: !8029)
!8321 = !DILocation(line: 1696, column: 7, scope: !8029)
!8322 = !DILocation(line: 1696, column: 14, scope: !8029)
!8323 = !DILocation(line: 1696, column: 25, scope: !8029)
!8324 = !DILocation(line: 1696, column: 30, scope: !8029)
!8325 = !DILocation(line: 1696, column: 40, scope: !8029)
!8326 = !DILocation(line: 1696, column: 45, scope: !8029)
!8327 = !DILocation(line: 1696, column: 50, scope: !8029)
!8328 = !DILocation(line: 1697, column: 32, scope: !8029)
!8329 = !DILocation(line: 1697, column: 37, scope: !8029)
!8330 = !DILocation(line: 1697, column: 42, scope: !8029)
!8331 = !DILocation(line: 1697, column: 49, scope: !8029)
!8332 = !DILocation(line: 1698, column: 11, scope: !8029)
!8333 = !DILocation(line: 1698, column: 16, scope: !8029)
!8334 = !DILocation(line: 1697, column: 2, scope: !8029)
!8335 = !DILocation(line: 1705, column: 6, scope: !8336)
!8336 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 1705, column: 6)
!8337 = !DILocation(line: 1705, column: 13, scope: !8336)
!8338 = !DILocation(line: 1705, column: 10, scope: !8336)
!8339 = !DILocation(line: 1705, column: 22, scope: !8336)
!8340 = !DILocation(line: 1705, column: 25, scope: !8336)
!8341 = !DILocation(line: 1705, column: 36, scope: !8336)
!8342 = !DILocation(line: 1705, column: 41, scope: !8336)
!8343 = !DILocation(line: 1705, column: 48, scope: !8336)
!8344 = !DILocation(line: 1705, column: 33, scope: !8336)
!8345 = !DILocation(line: 1705, column: 6, scope: !8029)
!8346 = !DILocation(line: 1706, column: 10, scope: !8347)
!8347 = distinct !DILexicalBlock(scope: !8336, file: !3, line: 1705, column: 59)
!8348 = !DILocation(line: 1706, column: 20, scope: !8347)
!8349 = !DILocation(line: 1706, column: 25, scope: !8347)
!8350 = !DILocation(line: 1706, column: 30, scope: !8347)
!8351 = !DILocation(line: 1706, column: 37, scope: !8347)
!8352 = !DILocation(line: 1706, column: 3, scope: !8347)
!8353 = !DILocation(line: 1707, column: 9, scope: !8347)
!8354 = !DILocation(line: 1707, column: 7, scope: !8347)
!8355 = !DILocation(line: 1708, column: 2, scope: !8347)
!8356 = !DILocation(line: 1710, column: 6, scope: !8035)
!8357 = !DILocation(line: 1710, column: 11, scope: !8035)
!8358 = !DILocation(line: 1710, column: 17, scope: !8035)
!8359 = !DILocation(line: 1710, column: 20, scope: !8035)
!8360 = !DILocation(line: 1710, column: 25, scope: !8035)
!8361 = !DILocation(line: 1710, column: 30, scope: !8035)
!8362 = !DILocation(line: 1710, column: 6, scope: !8029)
!8363 = !DILocalVariable(name: "async", scope: !8034, file: !3, line: 1711, type: !3588)
!8364 = !DILocation(line: 1711, column: 24, scope: !8034)
!8365 = !DILocation(line: 1713, column: 34, scope: !8034)
!8366 = !DILocation(line: 1713, column: 39, scope: !8034)
!8367 = !DILocation(line: 1713, column: 44, scope: !8034)
!8368 = !DILocation(line: 1713, column: 3, scope: !8034)
!8369 = !DILocation(line: 1715, column: 3, scope: !8034)
!8370 = !DILocation(line: 1715, column: 3, scope: !8063)
!8371 = !DILocalVariable(name: "__dummy", scope: !8372, file: !3, line: 1715, type: !57)
!8372 = distinct !DILexicalBlock(scope: !8062, file: !3, line: 1715, column: 3)
!8373 = !DILocation(line: 1715, column: 3, scope: !8372)
!8374 = !DILocalVariable(name: "__dummy2", scope: !8372, file: !3, line: 1715, type: !57)
!8375 = !DILocation(line: 1715, column: 3, scope: !8062)
!8376 = !DILocation(line: 1715, column: 3, scope: !8061)
!8377 = !DILocation(line: 1715, column: 3, scope: !8378)
!8378 = distinct !DILexicalBlock(scope: !8061, file: !3, line: 1715, column: 3)
!8379 = !DILocalVariable(name: "__dummy", scope: !8380, file: !3, line: 1715, type: !57)
!8380 = distinct !DILexicalBlock(scope: !8381, file: !3, line: 1715, column: 3)
!8381 = distinct !DILexicalBlock(scope: !8378, file: !3, line: 1715, column: 3)
!8382 = !DILocation(line: 1715, column: 3, scope: !8380)
!8383 = !DILocalVariable(name: "__dummy2", scope: !8380, file: !3, line: 1715, type: !57)
!8384 = !DILocation(line: 1715, column: 3, scope: !8381)
!8385 = !DILocation(line: 1715, column: 3, scope: !8060)
!8386 = !{i32 -2142559174}
!8387 = !DILocation(line: 1715, column: 3, scope: !8059)
!8388 = !DILocation(line: 329, column: 10, scope: !4414, inlinedAt: !8058)
!8389 = !DILocation(line: 329, column: 16, scope: !4414, inlinedAt: !8058)
!8390 = !DILocalVariable(name: "head__", scope: !8391, file: !3, line: 1716, type: !50)
!8391 = distinct !DILexicalBlock(scope: !8034, file: !3, line: 1716, column: 11)
!8392 = !DILocation(line: 1716, column: 11, scope: !8391)
!8393 = !DILocalVariable(name: "pos__", scope: !8391, file: !3, line: 1716, type: !50)
!8394 = !DILocation(line: 1716, column: 11, scope: !8395)
!8395 = distinct !DILexicalBlock(scope: !8391, file: !3, line: 1716, column: 11)
!8396 = !DILocation(line: 1716, column: 11, scope: !8397)
!8397 = distinct !DILexicalBlock(scope: !8395, file: !3, line: 1716, column: 11)
!8398 = !DILocalVariable(name: "__mptr", scope: !8399, file: !3, line: 1716, type: !64)
!8399 = distinct !DILexicalBlock(scope: !8391, file: !3, line: 1716, column: 11)
!8400 = !DILocation(line: 1716, column: 11, scope: !8399)
!8401 = !DILocation(line: 1716, column: 11, scope: !8402)
!8402 = distinct !DILexicalBlock(scope: !8399, file: !3, line: 1716, column: 11)
!8403 = !DILocation(line: 1716, column: 9, scope: !8034)
!8404 = !DILocation(line: 1719, column: 7, scope: !8405)
!8405 = distinct !DILexicalBlock(scope: !8034, file: !3, line: 1719, column: 7)
!8406 = !DILocation(line: 1719, column: 7, scope: !8034)
!8407 = !DILocation(line: 1720, column: 14, scope: !8405)
!8408 = !DILocation(line: 1720, column: 21, scope: !8405)
!8409 = !DILocation(line: 1720, column: 4, scope: !8405)
!8410 = !DILocation(line: 1721, column: 27, scope: !8034)
!8411 = !DILocation(line: 1721, column: 32, scope: !8034)
!8412 = !DILocation(line: 1721, column: 44, scope: !8034)
!8413 = !DILocation(line: 409, column: 2, scope: !5979, inlinedAt: !8055)
!8414 = !DILocation(line: 409, column: 2, scope: !5984, inlinedAt: !8055)
!8415 = !DILocation(line: 409, column: 2, scope: !5985, inlinedAt: !8055)
!8416 = !DILocation(line: 409, column: 2, scope: !5992, inlinedAt: !8055)
!8417 = !DILocation(line: 409, column: 2, scope: !5995, inlinedAt: !8055)
!8418 = !DILocation(line: 1723, column: 8, scope: !8419)
!8419 = distinct !DILexicalBlock(scope: !8034, file: !3, line: 1723, column: 7)
!8420 = !DILocation(line: 1723, column: 7, scope: !8034)
!8421 = !DILocation(line: 1724, column: 12, scope: !8422)
!8422 = distinct !DILexicalBlock(scope: !8419, file: !3, line: 1723, column: 15)
!8423 = !DILocation(line: 1724, column: 17, scope: !8422)
!8424 = !DILocation(line: 1724, column: 22, scope: !8422)
!8425 = !DILocation(line: 1724, column: 10, scope: !8422)
!8426 = !DILocation(line: 1725, column: 9, scope: !8427)
!8427 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 1725, column: 8)
!8428 = !DILocation(line: 1725, column: 8, scope: !8422)
!8429 = !DILocation(line: 1726, column: 5, scope: !8427)
!8430 = !DILocation(line: 1728, column: 30, scope: !8422)
!8431 = !DILocation(line: 1728, column: 35, scope: !8422)
!8432 = !DILocation(line: 1728, column: 42, scope: !8422)
!8433 = !DILocation(line: 1728, column: 22, scope: !8422)
!8434 = !DILocation(line: 1728, column: 4, scope: !8422)
!8435 = !DILocation(line: 1728, column: 11, scope: !8422)
!8436 = !DILocation(line: 1728, column: 20, scope: !8422)
!8437 = !DILocation(line: 1730, column: 9, scope: !8438)
!8438 = distinct !DILexicalBlock(scope: !8422, file: !3, line: 1730, column: 8)
!8439 = !DILocation(line: 1730, column: 16, scope: !8438)
!8440 = !DILocation(line: 1730, column: 8, scope: !8422)
!8441 = !DILocation(line: 1731, column: 11, scope: !8442)
!8442 = distinct !DILexicalBlock(scope: !8438, file: !3, line: 1730, column: 26)
!8443 = !DILocation(line: 1731, column: 5, scope: !8442)
!8444 = !DILocation(line: 1732, column: 5, scope: !8442)
!8445 = !DILocation(line: 1734, column: 3, scope: !8422)
!8446 = !DILocation(line: 1736, column: 16, scope: !8034)
!8447 = !DILocation(line: 1736, column: 3, scope: !8034)
!8448 = !DILocation(line: 1736, column: 10, scope: !8034)
!8449 = !DILocation(line: 1736, column: 14, scope: !8034)
!8450 = !DILocation(line: 1739, column: 10, scope: !8034)
!8451 = !DILocation(line: 1739, column: 17, scope: !8034)
!8452 = !DILocation(line: 1739, column: 27, scope: !8034)
!8453 = !DILocation(line: 1739, column: 32, scope: !8034)
!8454 = !DILocation(line: 1739, column: 42, scope: !8034)
!8455 = !DILocation(line: 1739, column: 47, scope: !8034)
!8456 = !DILocation(line: 1739, column: 54, scope: !8034)
!8457 = !DILocation(line: 1740, column: 10, scope: !8034)
!8458 = !DILocation(line: 1740, column: 15, scope: !8034)
!8459 = !DILocation(line: 1740, column: 22, scope: !8034)
!8460 = !DILocation(line: 1739, column: 64, scope: !8034)
!8461 = !DILocation(line: 1740, column: 34, scope: !8034)
!8462 = !DILocation(line: 1740, column: 39, scope: !8034)
!8463 = !DILocation(line: 1740, column: 46, scope: !8034)
!8464 = !DILocation(line: 1740, column: 32, scope: !8034)
!8465 = !DILocation(line: 1739, column: 3, scope: !8034)
!8466 = !DILocation(line: 1742, column: 3, scope: !8034)
!8467 = !DILocation(line: 1742, column: 3, scope: !8053)
!8468 = !DILocalVariable(name: "__dummy", scope: !8469, file: !3, line: 1742, type: !57)
!8469 = distinct !DILexicalBlock(scope: !8052, file: !3, line: 1742, column: 3)
!8470 = !DILocation(line: 1742, column: 3, scope: !8469)
!8471 = !DILocalVariable(name: "__dummy2", scope: !8469, file: !3, line: 1742, type: !57)
!8472 = !DILocation(line: 1742, column: 3, scope: !8052)
!8473 = !DILocation(line: 1742, column: 3, scope: !8051)
!8474 = !DILocation(line: 1742, column: 3, scope: !8475)
!8475 = distinct !DILexicalBlock(scope: !8051, file: !3, line: 1742, column: 3)
!8476 = !DILocalVariable(name: "__dummy", scope: !8477, file: !3, line: 1742, type: !57)
!8477 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 1742, column: 3)
!8478 = distinct !DILexicalBlock(scope: !8475, file: !3, line: 1742, column: 3)
!8479 = !DILocation(line: 1742, column: 3, scope: !8477)
!8480 = !DILocalVariable(name: "__dummy2", scope: !8477, file: !3, line: 1742, type: !57)
!8481 = !DILocation(line: 1742, column: 3, scope: !8478)
!8482 = !DILocation(line: 1742, column: 3, scope: !8050)
!8483 = !{i32 -2142554138}
!8484 = !DILocation(line: 1742, column: 3, scope: !8049)
!8485 = !DILocation(line: 329, column: 10, scope: !4414, inlinedAt: !8048)
!8486 = !DILocation(line: 329, column: 16, scope: !4414, inlinedAt: !8048)
!8487 = !DILocation(line: 1743, column: 18, scope: !8034)
!8488 = !DILocation(line: 1743, column: 25, scope: !8034)
!8489 = !DILocation(line: 1743, column: 32, scope: !8034)
!8490 = !DILocation(line: 1743, column: 37, scope: !8034)
!8491 = !DILocation(line: 1743, column: 3, scope: !8034)
!8492 = !DILocation(line: 1744, column: 27, scope: !8034)
!8493 = !DILocation(line: 1744, column: 32, scope: !8034)
!8494 = !DILocation(line: 1744, column: 44, scope: !8034)
!8495 = !DILocation(line: 409, column: 2, scope: !5979, inlinedAt: !8045)
!8496 = !DILocation(line: 409, column: 2, scope: !5984, inlinedAt: !8045)
!8497 = !DILocation(line: 409, column: 2, scope: !5985, inlinedAt: !8045)
!8498 = !DILocation(line: 409, column: 2, scope: !5992, inlinedAt: !8045)
!8499 = !DILocation(line: 409, column: 2, scope: !5995, inlinedAt: !8045)
!8500 = !DILocation(line: 1746, column: 7, scope: !8501)
!8501 = distinct !DILexicalBlock(scope: !8034, file: !3, line: 1746, column: 7)
!8502 = !DILocation(line: 1746, column: 14, scope: !8501)
!8503 = !DILocation(line: 1746, column: 11, scope: !8501)
!8504 = !DILocation(line: 1746, column: 7, scope: !8034)
!8505 = !DILocation(line: 1747, column: 10, scope: !8501)
!8506 = !DILocation(line: 1747, column: 15, scope: !8501)
!8507 = !DILocation(line: 1747, column: 20, scope: !8501)
!8508 = !DILocation(line: 1747, column: 32, scope: !8501)
!8509 = !DILocation(line: 1747, column: 37, scope: !8501)
!8510 = !DILocation(line: 1748, column: 11, scope: !8501)
!8511 = !DILocation(line: 1748, column: 18, scope: !8501)
!8512 = !DILocation(line: 1749, column: 11, scope: !8501)
!8513 = !DILocation(line: 1749, column: 16, scope: !8501)
!8514 = !DILocation(line: 1749, column: 23, scope: !8501)
!8515 = !DILocation(line: 1750, column: 11, scope: !8501)
!8516 = !DILocation(line: 1750, column: 16, scope: !8501)
!8517 = !DILocation(line: 1750, column: 23, scope: !8501)
!8518 = !DILocation(line: 1749, column: 33, scope: !8501)
!8519 = !DILocation(line: 1751, column: 11, scope: !8501)
!8520 = !DILocation(line: 1751, column: 16, scope: !8501)
!8521 = !DILocation(line: 1751, column: 25, scope: !8501)
!8522 = !DILocation(line: 1747, column: 8, scope: !8501)
!8523 = !DILocation(line: 1747, column: 4, scope: !8501)
!8524 = !DILocation(line: 1753, column: 10, scope: !8501)
!8525 = !DILocation(line: 1753, column: 15, scope: !8501)
!8526 = !DILocation(line: 1753, column: 20, scope: !8501)
!8527 = !DILocation(line: 1753, column: 32, scope: !8501)
!8528 = !DILocation(line: 1753, column: 37, scope: !8501)
!8529 = !DILocation(line: 1754, column: 11, scope: !8501)
!8530 = !DILocation(line: 1754, column: 18, scope: !8501)
!8531 = !DILocation(line: 1755, column: 11, scope: !8501)
!8532 = !DILocation(line: 1755, column: 16, scope: !8501)
!8533 = !DILocation(line: 1755, column: 23, scope: !8501)
!8534 = !DILocation(line: 1756, column: 11, scope: !8501)
!8535 = !DILocation(line: 1756, column: 16, scope: !8501)
!8536 = !DILocation(line: 1756, column: 23, scope: !8501)
!8537 = !DILocation(line: 1755, column: 33, scope: !8501)
!8538 = !DILocation(line: 1757, column: 11, scope: !8501)
!8539 = !DILocation(line: 1756, column: 33, scope: !8501)
!8540 = !DILocation(line: 1757, column: 29, scope: !8501)
!8541 = !DILocation(line: 1753, column: 8, scope: !8501)
!8542 = !DILocation(line: 1759, column: 7, scope: !8033)
!8543 = !DILocation(line: 1759, column: 11, scope: !8033)
!8544 = !DILocation(line: 1759, column: 7, scope: !8034)
!8545 = !DILocation(line: 1760, column: 4, scope: !8032)
!8546 = !DILocation(line: 1763, column: 4, scope: !8032)
!8547 = !DILocation(line: 1763, column: 4, scope: !8043)
!8548 = !DILocalVariable(name: "__dummy", scope: !8549, file: !3, line: 1763, type: !57)
!8549 = distinct !DILexicalBlock(scope: !8042, file: !3, line: 1763, column: 4)
!8550 = !DILocation(line: 1763, column: 4, scope: !8549)
!8551 = !DILocalVariable(name: "__dummy2", scope: !8549, file: !3, line: 1763, type: !57)
!8552 = !DILocation(line: 1763, column: 4, scope: !8042)
!8553 = !DILocation(line: 1763, column: 4, scope: !8041)
!8554 = !DILocation(line: 1763, column: 4, scope: !8555)
!8555 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 1763, column: 4)
!8556 = !DILocalVariable(name: "__dummy", scope: !8557, file: !3, line: 1763, type: !57)
!8557 = distinct !DILexicalBlock(scope: !8558, file: !3, line: 1763, column: 4)
!8558 = distinct !DILexicalBlock(scope: !8555, file: !3, line: 1763, column: 4)
!8559 = !DILocation(line: 1763, column: 4, scope: !8557)
!8560 = !DILocalVariable(name: "__dummy2", scope: !8557, file: !3, line: 1763, type: !57)
!8561 = !DILocation(line: 1763, column: 4, scope: !8558)
!8562 = !DILocation(line: 1763, column: 4, scope: !8040)
!8563 = !{i32 -2142552946}
!8564 = !DILocation(line: 1763, column: 4, scope: !8039)
!8565 = !DILocation(line: 329, column: 10, scope: !4414, inlinedAt: !8038)
!8566 = !DILocation(line: 329, column: 16, scope: !4414, inlinedAt: !8038)
!8567 = !DILocation(line: 1764, column: 15, scope: !8032)
!8568 = !DILocation(line: 1764, column: 22, scope: !8032)
!8569 = !DILocation(line: 1764, column: 29, scope: !8032)
!8570 = !DILocation(line: 1764, column: 34, scope: !8032)
!8571 = !DILocation(line: 1764, column: 4, scope: !8032)
!8572 = !DILocation(line: 1765, column: 28, scope: !8032)
!8573 = !DILocation(line: 1765, column: 33, scope: !8032)
!8574 = !DILocation(line: 1765, column: 45, scope: !8032)
!8575 = !DILocation(line: 409, column: 2, scope: !5979, inlinedAt: !8031)
!8576 = !DILocation(line: 409, column: 2, scope: !5984, inlinedAt: !8031)
!8577 = !DILocation(line: 409, column: 2, scope: !5985, inlinedAt: !8031)
!8578 = !DILocation(line: 409, column: 2, scope: !5992, inlinedAt: !8031)
!8579 = !DILocation(line: 409, column: 2, scope: !5995, inlinedAt: !8031)
!8580 = !DILocation(line: 1766, column: 3, scope: !8032)
!8581 = !DILocation(line: 1768, column: 10, scope: !8034)
!8582 = !DILocation(line: 1768, column: 3, scope: !8034)
!8583 = !DILocation(line: 1771, column: 30, scope: !8029)
!8584 = !DILocation(line: 1771, column: 35, scope: !8029)
!8585 = !DILocation(line: 1771, column: 40, scope: !8029)
!8586 = !DILocation(line: 1771, column: 50, scope: !8029)
!8587 = !DILocation(line: 1771, column: 55, scope: !8029)
!8588 = !DILocation(line: 1771, column: 62, scope: !8029)
!8589 = !DILocation(line: 1771, column: 48, scope: !8029)
!8590 = !DILocation(line: 1771, column: 2, scope: !8029)
!8591 = !DILocation(line: 1777, column: 6, scope: !8592)
!8592 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 1777, column: 6)
!8593 = !DILocation(line: 1777, column: 13, scope: !8592)
!8594 = !DILocation(line: 1777, column: 10, scope: !8592)
!8595 = !DILocation(line: 1777, column: 6, scope: !8029)
!8596 = !DILocation(line: 1778, column: 9, scope: !8592)
!8597 = !DILocation(line: 1778, column: 14, scope: !8592)
!8598 = !DILocation(line: 1778, column: 19, scope: !8592)
!8599 = !DILocation(line: 1778, column: 25, scope: !8592)
!8600 = !DILocation(line: 1778, column: 30, scope: !8592)
!8601 = !DILocation(line: 1778, column: 43, scope: !8592)
!8602 = !DILocation(line: 1778, column: 48, scope: !8592)
!8603 = !DILocation(line: 1779, column: 11, scope: !8592)
!8604 = !DILocation(line: 1779, column: 16, scope: !8592)
!8605 = !DILocation(line: 1779, column: 23, scope: !8592)
!8606 = !DILocation(line: 1780, column: 11, scope: !8592)
!8607 = !DILocation(line: 1780, column: 16, scope: !8592)
!8608 = !DILocation(line: 1780, column: 23, scope: !8592)
!8609 = !DILocation(line: 1779, column: 33, scope: !8592)
!8610 = !DILocation(line: 1781, column: 11, scope: !8592)
!8611 = !DILocation(line: 1780, column: 33, scope: !8592)
!8612 = !DILocation(line: 1778, column: 7, scope: !8592)
!8613 = !DILocation(line: 1778, column: 3, scope: !8592)
!8614 = !DILocation(line: 1782, column: 11, scope: !8615)
!8615 = distinct !DILexicalBlock(scope: !8592, file: !3, line: 1782, column: 11)
!8616 = !DILocation(line: 1782, column: 16, scope: !8615)
!8617 = !DILocation(line: 1782, column: 21, scope: !8615)
!8618 = !DILocation(line: 1782, column: 11, scope: !8592)
!8619 = !DILocation(line: 1783, column: 9, scope: !8615)
!8620 = !DILocation(line: 1783, column: 14, scope: !8615)
!8621 = !DILocation(line: 1783, column: 19, scope: !8615)
!8622 = !DILocation(line: 1783, column: 32, scope: !8615)
!8623 = !DILocation(line: 1783, column: 37, scope: !8615)
!8624 = !DILocation(line: 1783, column: 50, scope: !8615)
!8625 = !DILocation(line: 1783, column: 55, scope: !8615)
!8626 = !DILocation(line: 1784, column: 11, scope: !8615)
!8627 = !DILocation(line: 1784, column: 16, scope: !8615)
!8628 = !DILocation(line: 1784, column: 23, scope: !8615)
!8629 = !DILocation(line: 1785, column: 11, scope: !8615)
!8630 = !DILocation(line: 1785, column: 16, scope: !8615)
!8631 = !DILocation(line: 1785, column: 23, scope: !8615)
!8632 = !DILocation(line: 1784, column: 33, scope: !8615)
!8633 = !DILocation(line: 1786, column: 11, scope: !8615)
!8634 = !DILocation(line: 1786, column: 16, scope: !8615)
!8635 = !DILocation(line: 1783, column: 7, scope: !8615)
!8636 = !DILocation(line: 1783, column: 3, scope: !8615)
!8637 = !DILocation(line: 1788, column: 7, scope: !8615)
!8638 = !DILocation(line: 1791, column: 6, scope: !8639)
!8639 = distinct !DILexicalBlock(scope: !8029, file: !3, line: 1791, column: 6)
!8640 = !DILocation(line: 1791, column: 10, scope: !8639)
!8641 = !DILocation(line: 1791, column: 6, scope: !8029)
!8642 = !DILocation(line: 1792, column: 9, scope: !8643)
!8643 = distinct !DILexicalBlock(scope: !8639, file: !3, line: 1791, column: 24)
!8644 = !DILocation(line: 1792, column: 14, scope: !8643)
!8645 = !DILocation(line: 1792, column: 21, scope: !8643)
!8646 = !DILocation(line: 1792, column: 33, scope: !8643)
!8647 = !DILocation(line: 1792, column: 38, scope: !8643)
!8648 = !DILocation(line: 1792, column: 45, scope: !8643)
!8649 = !DILocation(line: 1792, column: 31, scope: !8643)
!8650 = !DILocation(line: 1792, column: 57, scope: !8643)
!8651 = !DILocation(line: 1792, column: 55, scope: !8643)
!8652 = !DILocation(line: 1792, column: 7, scope: !8643)
!8653 = !DILocation(line: 1793, column: 17, scope: !8643)
!8654 = !DILocation(line: 1793, column: 9, scope: !8643)
!8655 = !DILocation(line: 1793, column: 7, scope: !8643)
!8656 = !DILocation(line: 1794, column: 8, scope: !8657)
!8657 = distinct !DILexicalBlock(scope: !8643, file: !3, line: 1794, column: 7)
!8658 = !DILocation(line: 1794, column: 7, scope: !8643)
!8659 = !DILocation(line: 1795, column: 4, scope: !8657)
!8660 = !DILocation(line: 1797, column: 10, scope: !8643)
!8661 = !DILocation(line: 1797, column: 15, scope: !8643)
!8662 = !DILocation(line: 1797, column: 20, scope: !8643)
!8663 = !DILocation(line: 1797, column: 30, scope: !8643)
!8664 = !DILocation(line: 1797, column: 35, scope: !8643)
!8665 = !DILocation(line: 1797, column: 42, scope: !8643)
!8666 = !DILocation(line: 1797, column: 3, scope: !8643)
!8667 = !DILocation(line: 1798, column: 10, scope: !8643)
!8668 = !DILocation(line: 1798, column: 16, scope: !8643)
!8669 = !DILocation(line: 1798, column: 21, scope: !8643)
!8670 = !DILocation(line: 1798, column: 28, scope: !8643)
!8671 = !DILocation(line: 1798, column: 14, scope: !8643)
!8672 = !DILocation(line: 1798, column: 40, scope: !8643)
!8673 = !DILocation(line: 1798, column: 45, scope: !8643)
!8674 = !DILocation(line: 1798, column: 52, scope: !8643)
!8675 = !DILocation(line: 1798, column: 38, scope: !8643)
!8676 = !DILocation(line: 1799, column: 10, scope: !8643)
!8677 = !DILocation(line: 1799, column: 15, scope: !8643)
!8678 = !DILocation(line: 1798, column: 3, scope: !8643)
!8679 = !DILocation(line: 1800, column: 9, scope: !8643)
!8680 = !DILocation(line: 1800, column: 14, scope: !8643)
!8681 = !DILocation(line: 1800, column: 19, scope: !8643)
!8682 = !DILocation(line: 1800, column: 25, scope: !8643)
!8683 = !DILocation(line: 1800, column: 30, scope: !8643)
!8684 = !DILocation(line: 1800, column: 43, scope: !8643)
!8685 = !DILocation(line: 1800, column: 48, scope: !8643)
!8686 = !DILocation(line: 1800, column: 7, scope: !8643)
!8687 = !DILocation(line: 1802, column: 9, scope: !8643)
!8688 = !DILocation(line: 1802, column: 3, scope: !8643)
!8689 = !DILocation(line: 1803, column: 2, scope: !8643)
!8690 = !DILocation(line: 1803, column: 13, scope: !8691)
!8691 = distinct !DILexicalBlock(scope: !8639, file: !3, line: 1803, column: 13)
!8692 = !DILocation(line: 1803, column: 17, scope: !8691)
!8693 = !DILocation(line: 1803, column: 22, scope: !8691)
!8694 = !DILocation(line: 1803, column: 26, scope: !8691)
!8695 = !DILocation(line: 1803, column: 31, scope: !8691)
!8696 = !DILocation(line: 1803, column: 44, scope: !8691)
!8697 = !DILocation(line: 1803, column: 47, scope: !8691)
!8698 = !DILocation(line: 1803, column: 52, scope: !8691)
!8699 = !DILocation(line: 1803, column: 59, scope: !8691)
!8700 = !DILocation(line: 1803, column: 13, scope: !8639)
!8701 = !DILocation(line: 1807, column: 7, scope: !8702)
!8702 = distinct !DILexicalBlock(scope: !8703, file: !3, line: 1807, column: 7)
!8703 = distinct !DILexicalBlock(scope: !8691, file: !3, line: 1803, column: 70)
!8704 = !DILocation(line: 1807, column: 12, scope: !8702)
!8705 = !DILocation(line: 1807, column: 22, scope: !8702)
!8706 = !DILocation(line: 1807, column: 25, scope: !8702)
!8707 = !DILocation(line: 1807, column: 30, scope: !8702)
!8708 = !DILocation(line: 1807, column: 41, scope: !8702)
!8709 = !DILocation(line: 1807, column: 7, scope: !8703)
!8710 = !DILocation(line: 1808, column: 4, scope: !8702)
!8711 = !DILocation(line: 1808, column: 9, scope: !8702)
!8712 = !DILocation(line: 1808, column: 20, scope: !8702)
!8713 = !DILocation(line: 1808, column: 25, scope: !8702)
!8714 = !DILocation(line: 1808, column: 30, scope: !8702)
!8715 = !DILocation(line: 1808, column: 35, scope: !8702)
!8716 = !DILocation(line: 1808, column: 39, scope: !8702)
!8717 = !DILocation(line: 1809, column: 2, scope: !8703)
!8718 = !DILocation(line: 1811, column: 29, scope: !8029)
!8719 = !DILocation(line: 1811, column: 34, scope: !8029)
!8720 = !DILocation(line: 1811, column: 39, scope: !8029)
!8721 = !DILocation(line: 1811, column: 49, scope: !8029)
!8722 = !DILocation(line: 1811, column: 54, scope: !8029)
!8723 = !DILocation(line: 1811, column: 61, scope: !8029)
!8724 = !DILocation(line: 1811, column: 47, scope: !8029)
!8725 = !DILocation(line: 1811, column: 2, scope: !8029)
!8726 = !DILocation(line: 1813, column: 9, scope: !8029)
!8727 = !DILocation(line: 1813, column: 2, scope: !8029)
!8728 = !DILocation(line: 1814, column: 1, scope: !8029)
!8729 = distinct !DISubprogram(name: "regmap_get_offset", scope: !8, file: !8, line: 285, type: !8730, scopeLine: 287, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!8730 = !DISubroutineType(types: !8731)
!8731 = !{!70, !8732, !70}
!8732 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8733, size: 64)
!8733 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !7)
!8734 = !DILocalVariable(name: "map", arg: 1, scope: !8729, file: !8, line: 285, type: !8732)
!8735 = !DILocation(line: 285, column: 67, scope: !8729)
!8736 = !DILocalVariable(name: "index", arg: 2, scope: !8729, file: !8, line: 286, type: !70)
!8737 = !DILocation(line: 286, column: 24, scope: !8729)
!8738 = !DILocation(line: 288, column: 6, scope: !8739)
!8739 = distinct !DILexicalBlock(scope: !8729, file: !8, line: 288, column: 6)
!8740 = !DILocation(line: 288, column: 11, scope: !8739)
!8741 = !DILocation(line: 288, column: 28, scope: !8739)
!8742 = !DILocation(line: 288, column: 6, scope: !8729)
!8743 = !DILocation(line: 289, column: 10, scope: !8739)
!8744 = !DILocation(line: 289, column: 19, scope: !8739)
!8745 = !DILocation(line: 289, column: 24, scope: !8739)
!8746 = !DILocation(line: 289, column: 16, scope: !8739)
!8747 = !DILocation(line: 289, column: 3, scope: !8739)
!8748 = !DILocation(line: 291, column: 10, scope: !8739)
!8749 = !DILocation(line: 291, column: 18, scope: !8739)
!8750 = !DILocation(line: 291, column: 23, scope: !8739)
!8751 = !DILocation(line: 291, column: 16, scope: !8739)
!8752 = !DILocation(line: 291, column: 3, scope: !8739)
!8753 = !DILocation(line: 292, column: 1, scope: !8729)
!8754 = distinct !DISubprogram(name: "regmap_raw_write", scope: !3, file: !3, line: 2047, type: !8755, scopeLine: 2049, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!8755 = !DISubroutineType(types: !8756)
!8756 = !{!104, !6, !70, !1880, !167}
!8757 = !DILocalVariable(name: "map", arg: 1, scope: !8754, file: !3, line: 2047, type: !6)
!8758 = !DILocation(line: 2047, column: 37, scope: !8754)
!8759 = !DILocalVariable(name: "reg", arg: 2, scope: !8754, file: !3, line: 2047, type: !70)
!8760 = !DILocation(line: 2047, column: 55, scope: !8754)
!8761 = !DILocalVariable(name: "val", arg: 3, scope: !8754, file: !3, line: 2048, type: !1880)
!8762 = !DILocation(line: 2048, column: 20, scope: !8754)
!8763 = !DILocalVariable(name: "val_len", arg: 4, scope: !8754, file: !3, line: 2048, type: !167)
!8764 = !DILocation(line: 2048, column: 32, scope: !8754)
!8765 = !DILocalVariable(name: "ret", scope: !8754, file: !3, line: 2050, type: !104)
!8766 = !DILocation(line: 2050, column: 6, scope: !8754)
!8767 = !DILocation(line: 2052, column: 28, scope: !8768)
!8768 = distinct !DILexicalBlock(scope: !8754, file: !3, line: 2052, column: 6)
!8769 = !DILocation(line: 2052, column: 7, scope: !8768)
!8770 = !DILocation(line: 2052, column: 6, scope: !8754)
!8771 = !DILocation(line: 2053, column: 3, scope: !8768)
!8772 = !DILocation(line: 2054, column: 6, scope: !8773)
!8773 = distinct !DILexicalBlock(scope: !8754, file: !3, line: 2054, column: 6)
!8774 = !DILocation(line: 2054, column: 16, scope: !8773)
!8775 = !DILocation(line: 2054, column: 21, scope: !8773)
!8776 = !DILocation(line: 2054, column: 28, scope: !8773)
!8777 = !DILocation(line: 2054, column: 14, scope: !8773)
!8778 = !DILocation(line: 2054, column: 6, scope: !8754)
!8779 = !DILocation(line: 2055, column: 3, scope: !8773)
!8780 = !DILocation(line: 2057, column: 2, scope: !8754)
!8781 = !DILocation(line: 2057, column: 7, scope: !8754)
!8782 = !DILocation(line: 2057, column: 12, scope: !8754)
!8783 = !DILocation(line: 2057, column: 17, scope: !8754)
!8784 = !DILocation(line: 2059, column: 26, scope: !8754)
!8785 = !DILocation(line: 2059, column: 31, scope: !8754)
!8786 = !DILocation(line: 2059, column: 36, scope: !8754)
!8787 = !DILocation(line: 2059, column: 41, scope: !8754)
!8788 = !DILocation(line: 2059, column: 8, scope: !8754)
!8789 = !DILocation(line: 2059, column: 6, scope: !8754)
!8790 = !DILocation(line: 2061, column: 2, scope: !8754)
!8791 = !DILocation(line: 2061, column: 7, scope: !8754)
!8792 = !DILocation(line: 2061, column: 14, scope: !8754)
!8793 = !DILocation(line: 2061, column: 19, scope: !8754)
!8794 = !DILocation(line: 2063, column: 9, scope: !8754)
!8795 = !DILocation(line: 2063, column: 2, scope: !8754)
!8796 = !DILocation(line: 2064, column: 1, scope: !8754)
!8797 = distinct !DISubprogram(name: "regmap_noinc_write", scope: !3, file: !3, line: 2088, type: !8755, scopeLine: 2090, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!8798 = !DILocalVariable(name: "map", arg: 1, scope: !8797, file: !3, line: 2088, type: !6)
!8799 = !DILocation(line: 2088, column: 39, scope: !8797)
!8800 = !DILocalVariable(name: "reg", arg: 2, scope: !8797, file: !3, line: 2088, type: !70)
!8801 = !DILocation(line: 2088, column: 57, scope: !8797)
!8802 = !DILocalVariable(name: "val", arg: 3, scope: !8797, file: !3, line: 2089, type: !1880)
!8803 = !DILocation(line: 2089, column: 21, scope: !8797)
!8804 = !DILocalVariable(name: "val_len", arg: 4, scope: !8797, file: !3, line: 2089, type: !167)
!8805 = !DILocation(line: 2089, column: 33, scope: !8797)
!8806 = !DILocalVariable(name: "write_len", scope: !8797, file: !3, line: 2091, type: !167)
!8807 = !DILocation(line: 2091, column: 9, scope: !8797)
!8808 = !DILocalVariable(name: "ret", scope: !8797, file: !3, line: 2092, type: !104)
!8809 = !DILocation(line: 2092, column: 6, scope: !8797)
!8810 = !DILocation(line: 2094, column: 7, scope: !8811)
!8811 = distinct !DILexicalBlock(scope: !8797, file: !3, line: 2094, column: 6)
!8812 = !DILocation(line: 2094, column: 12, scope: !8811)
!8813 = !DILocation(line: 2094, column: 6, scope: !8797)
!8814 = !DILocation(line: 2095, column: 3, scope: !8811)
!8815 = !DILocation(line: 2096, column: 7, scope: !8816)
!8816 = distinct !DILexicalBlock(scope: !8797, file: !3, line: 2096, column: 6)
!8817 = !DILocation(line: 2096, column: 12, scope: !8816)
!8818 = !DILocation(line: 2096, column: 17, scope: !8816)
!8819 = !DILocation(line: 2096, column: 6, scope: !8797)
!8820 = !DILocation(line: 2097, column: 3, scope: !8816)
!8821 = !DILocation(line: 2098, column: 6, scope: !8822)
!8822 = distinct !DILexicalBlock(scope: !8797, file: !3, line: 2098, column: 6)
!8823 = !DILocation(line: 2098, column: 16, scope: !8822)
!8824 = !DILocation(line: 2098, column: 21, scope: !8822)
!8825 = !DILocation(line: 2098, column: 28, scope: !8822)
!8826 = !DILocation(line: 2098, column: 14, scope: !8822)
!8827 = !DILocation(line: 2098, column: 6, scope: !8797)
!8828 = !DILocation(line: 2099, column: 3, scope: !8822)
!8829 = !DILocation(line: 2100, column: 7, scope: !8830)
!8830 = distinct !DILexicalBlock(scope: !8797, file: !3, line: 2100, column: 6)
!8831 = !DILocation(line: 2100, column: 6, scope: !8797)
!8832 = !DILocation(line: 2101, column: 3, scope: !8830)
!8833 = !DILocation(line: 2102, column: 6, scope: !8834)
!8834 = distinct !DILexicalBlock(scope: !8797, file: !3, line: 2102, column: 6)
!8835 = !DILocation(line: 2102, column: 14, scope: !8834)
!8836 = !DILocation(line: 2102, column: 6, scope: !8797)
!8837 = !DILocation(line: 2103, column: 3, scope: !8834)
!8838 = !DILocation(line: 2105, column: 2, scope: !8797)
!8839 = !DILocation(line: 2105, column: 7, scope: !8797)
!8840 = !DILocation(line: 2105, column: 12, scope: !8797)
!8841 = !DILocation(line: 2105, column: 17, scope: !8797)
!8842 = !DILocation(line: 2107, column: 23, scope: !8843)
!8843 = distinct !DILexicalBlock(scope: !8797, file: !3, line: 2107, column: 6)
!8844 = !DILocation(line: 2107, column: 28, scope: !8843)
!8845 = !DILocation(line: 2107, column: 7, scope: !8843)
!8846 = !DILocation(line: 2107, column: 33, scope: !8843)
!8847 = !DILocation(line: 2107, column: 60, scope: !8843)
!8848 = !DILocation(line: 2107, column: 65, scope: !8843)
!8849 = !DILocation(line: 2107, column: 37, scope: !8843)
!8850 = !DILocation(line: 2107, column: 6, scope: !8797)
!8851 = !DILocation(line: 2108, column: 7, scope: !8852)
!8852 = distinct !DILexicalBlock(scope: !8843, file: !3, line: 2107, column: 71)
!8853 = !DILocation(line: 2109, column: 3, scope: !8852)
!8854 = !DILocation(line: 2112, column: 2, scope: !8797)
!8855 = !DILocation(line: 2112, column: 9, scope: !8797)
!8856 = !DILocation(line: 2113, column: 7, scope: !8857)
!8857 = distinct !DILexicalBlock(scope: !8858, file: !3, line: 2113, column: 7)
!8858 = distinct !DILexicalBlock(scope: !8797, file: !3, line: 2112, column: 18)
!8859 = !DILocation(line: 2113, column: 12, scope: !8857)
!8860 = !DILocation(line: 2113, column: 26, scope: !8857)
!8861 = !DILocation(line: 2113, column: 29, scope: !8857)
!8862 = !DILocation(line: 2113, column: 34, scope: !8857)
!8863 = !DILocation(line: 2113, column: 50, scope: !8857)
!8864 = !DILocation(line: 2113, column: 48, scope: !8857)
!8865 = !DILocation(line: 2113, column: 7, scope: !8858)
!8866 = !DILocation(line: 2114, column: 16, scope: !8857)
!8867 = !DILocation(line: 2114, column: 21, scope: !8857)
!8868 = !DILocation(line: 2114, column: 14, scope: !8857)
!8869 = !DILocation(line: 2114, column: 4, scope: !8857)
!8870 = !DILocation(line: 2116, column: 16, scope: !8857)
!8871 = !DILocation(line: 2116, column: 14, scope: !8857)
!8872 = !DILocation(line: 2117, column: 27, scope: !8858)
!8873 = !DILocation(line: 2117, column: 32, scope: !8858)
!8874 = !DILocation(line: 2117, column: 37, scope: !8858)
!8875 = !DILocation(line: 2117, column: 42, scope: !8858)
!8876 = !DILocation(line: 2117, column: 9, scope: !8858)
!8877 = !DILocation(line: 2117, column: 7, scope: !8858)
!8878 = !DILocation(line: 2118, column: 7, scope: !8879)
!8879 = distinct !DILexicalBlock(scope: !8858, file: !3, line: 2118, column: 7)
!8880 = !DILocation(line: 2118, column: 7, scope: !8858)
!8881 = !DILocation(line: 2119, column: 4, scope: !8879)
!8882 = !DILocation(line: 2120, column: 16, scope: !8858)
!8883 = !DILocation(line: 2120, column: 23, scope: !8858)
!8884 = !DILocation(line: 2120, column: 21, scope: !8858)
!8885 = !DILocation(line: 2120, column: 7, scope: !8858)
!8886 = !DILocation(line: 2121, column: 14, scope: !8858)
!8887 = !DILocation(line: 2121, column: 11, scope: !8858)
!8888 = distinct !{!8888, !8854, !8889}
!8889 = !DILocation(line: 2122, column: 2, scope: !8797)
!8890 = !DILabel(scope: !8797, name: "out_unlock", file: !3, line: 2124)
!8891 = !DILocation(line: 2124, column: 1, scope: !8797)
!8892 = !DILocation(line: 2125, column: 2, scope: !8797)
!8893 = !DILocation(line: 2125, column: 7, scope: !8797)
!8894 = !DILocation(line: 2125, column: 14, scope: !8797)
!8895 = !DILocation(line: 2125, column: 19, scope: !8797)
!8896 = !DILocation(line: 2126, column: 9, scope: !8797)
!8897 = !DILocation(line: 2126, column: 2, scope: !8797)
!8898 = !DILocation(line: 2127, column: 1, scope: !8797)
!8899 = distinct !DISubprogram(name: "regmap_field_update_bits_base", scope: !3, file: !3, line: 2147, type: !8900, scopeLine: 2150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!8900 = !DISubroutineType(types: !8901)
!8901 = !{!104, !7188, !70, !70, !733, !331, !331}
!8902 = !DILocalVariable(name: "field", arg: 1, scope: !8899, file: !3, line: 2147, type: !7188)
!8903 = !DILocation(line: 2147, column: 56, scope: !8899)
!8904 = !DILocalVariable(name: "mask", arg: 2, scope: !8899, file: !3, line: 2148, type: !70)
!8905 = !DILocation(line: 2148, column: 20, scope: !8899)
!8906 = !DILocalVariable(name: "val", arg: 3, scope: !8899, file: !3, line: 2148, type: !70)
!8907 = !DILocation(line: 2148, column: 39, scope: !8899)
!8908 = !DILocalVariable(name: "change", arg: 4, scope: !8899, file: !3, line: 2149, type: !733)
!8909 = !DILocation(line: 2149, column: 13, scope: !8899)
!8910 = !DILocalVariable(name: "async", arg: 5, scope: !8899, file: !3, line: 2149, type: !331)
!8911 = !DILocation(line: 2149, column: 26, scope: !8899)
!8912 = !DILocalVariable(name: "force", arg: 6, scope: !8899, file: !3, line: 2149, type: !331)
!8913 = !DILocation(line: 2149, column: 38, scope: !8899)
!8914 = !DILocation(line: 2151, column: 10, scope: !8899)
!8915 = !DILocation(line: 2151, column: 18, scope: !8899)
!8916 = !DILocation(line: 2151, column: 25, scope: !8899)
!8917 = !DILocation(line: 2151, column: 15, scope: !8899)
!8918 = !DILocation(line: 2151, column: 34, scope: !8899)
!8919 = !DILocation(line: 2151, column: 41, scope: !8899)
!8920 = !DILocation(line: 2151, column: 32, scope: !8899)
!8921 = !DILocation(line: 2151, column: 7, scope: !8899)
!8922 = !DILocation(line: 2153, column: 33, scope: !8899)
!8923 = !DILocation(line: 2153, column: 40, scope: !8899)
!8924 = !DILocation(line: 2153, column: 48, scope: !8899)
!8925 = !DILocation(line: 2153, column: 55, scope: !8899)
!8926 = !DILocation(line: 2154, column: 12, scope: !8899)
!8927 = !DILocation(line: 2154, column: 18, scope: !8899)
!8928 = !DILocation(line: 2154, column: 25, scope: !8899)
!8929 = !DILocation(line: 2154, column: 32, scope: !8899)
!8930 = !DILocation(line: 2154, column: 22, scope: !8899)
!8931 = !DILocation(line: 2155, column: 12, scope: !8899)
!8932 = !DILocation(line: 2155, column: 20, scope: !8899)
!8933 = !DILocation(line: 2155, column: 27, scope: !8899)
!8934 = !DILocation(line: 2153, column: 9, scope: !8899)
!8935 = !DILocation(line: 2153, column: 2, scope: !8899)
!8936 = distinct !DISubprogram(name: "regmap_update_bits_base", scope: !3, file: !3, line: 3068, type: !8937, scopeLine: 3071, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!8937 = !DISubroutineType(types: !8938)
!8938 = !{!104, !6, !70, !70, !70, !733, !331, !331}
!8939 = !DILocalVariable(name: "map", arg: 1, scope: !8936, file: !3, line: 3068, type: !6)
!8940 = !DILocation(line: 3068, column: 44, scope: !8936)
!8941 = !DILocalVariable(name: "reg", arg: 2, scope: !8936, file: !3, line: 3068, type: !70)
!8942 = !DILocation(line: 3068, column: 62, scope: !8936)
!8943 = !DILocalVariable(name: "mask", arg: 3, scope: !8936, file: !3, line: 3069, type: !70)
!8944 = !DILocation(line: 3069, column: 21, scope: !8936)
!8945 = !DILocalVariable(name: "val", arg: 4, scope: !8936, file: !3, line: 3069, type: !70)
!8946 = !DILocation(line: 3069, column: 40, scope: !8936)
!8947 = !DILocalVariable(name: "change", arg: 5, scope: !8936, file: !3, line: 3070, type: !733)
!8948 = !DILocation(line: 3070, column: 14, scope: !8936)
!8949 = !DILocalVariable(name: "async", arg: 6, scope: !8936, file: !3, line: 3070, type: !331)
!8950 = !DILocation(line: 3070, column: 27, scope: !8936)
!8951 = !DILocalVariable(name: "force", arg: 7, scope: !8936, file: !3, line: 3070, type: !331)
!8952 = !DILocation(line: 3070, column: 39, scope: !8936)
!8953 = !DILocalVariable(name: "ret", scope: !8936, file: !3, line: 3072, type: !104)
!8954 = !DILocation(line: 3072, column: 6, scope: !8936)
!8955 = !DILocation(line: 3074, column: 2, scope: !8936)
!8956 = !DILocation(line: 3074, column: 7, scope: !8936)
!8957 = !DILocation(line: 3074, column: 12, scope: !8936)
!8958 = !DILocation(line: 3074, column: 17, scope: !8936)
!8959 = !DILocation(line: 3076, column: 15, scope: !8936)
!8960 = !DILocation(line: 3076, column: 2, scope: !8936)
!8961 = !DILocation(line: 3076, column: 7, scope: !8936)
!8962 = !DILocation(line: 3076, column: 13, scope: !8936)
!8963 = !DILocation(line: 3078, column: 28, scope: !8936)
!8964 = !DILocation(line: 3078, column: 33, scope: !8936)
!8965 = !DILocation(line: 3078, column: 38, scope: !8936)
!8966 = !DILocation(line: 3078, column: 44, scope: !8936)
!8967 = !DILocation(line: 3078, column: 49, scope: !8936)
!8968 = !DILocation(line: 3078, column: 57, scope: !8936)
!8969 = !DILocation(line: 3078, column: 8, scope: !8936)
!8970 = !DILocation(line: 3078, column: 6, scope: !8936)
!8971 = !DILocation(line: 3080, column: 2, scope: !8936)
!8972 = !DILocation(line: 3080, column: 7, scope: !8936)
!8973 = !DILocation(line: 3080, column: 13, scope: !8936)
!8974 = !DILocation(line: 3082, column: 2, scope: !8936)
!8975 = !DILocation(line: 3082, column: 7, scope: !8936)
!8976 = !DILocation(line: 3082, column: 14, scope: !8936)
!8977 = !DILocation(line: 3082, column: 19, scope: !8936)
!8978 = !DILocation(line: 3084, column: 9, scope: !8936)
!8979 = !DILocation(line: 3084, column: 2, scope: !8936)
!8980 = distinct !DISubprogram(name: "regmap_fields_update_bits_base", scope: !3, file: !3, line: 2174, type: !8981, scopeLine: 2177, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!8981 = !DISubroutineType(types: !8982)
!8982 = !{!104, !7188, !70, !70, !70, !733, !331, !331}
!8983 = !DILocalVariable(name: "field", arg: 1, scope: !8980, file: !3, line: 2174, type: !7188)
!8984 = !DILocation(line: 2174, column: 57, scope: !8980)
!8985 = !DILocalVariable(name: "id", arg: 2, scope: !8980, file: !3, line: 2174, type: !70)
!8986 = !DILocation(line: 2174, column: 77, scope: !8980)
!8987 = !DILocalVariable(name: "mask", arg: 3, scope: !8980, file: !3, line: 2175, type: !70)
!8988 = !DILocation(line: 2175, column: 21, scope: !8980)
!8989 = !DILocalVariable(name: "val", arg: 4, scope: !8980, file: !3, line: 2175, type: !70)
!8990 = !DILocation(line: 2175, column: 40, scope: !8980)
!8991 = !DILocalVariable(name: "change", arg: 5, scope: !8980, file: !3, line: 2176, type: !733)
!8992 = !DILocation(line: 2176, column: 14, scope: !8980)
!8993 = !DILocalVariable(name: "async", arg: 6, scope: !8980, file: !3, line: 2176, type: !331)
!8994 = !DILocation(line: 2176, column: 27, scope: !8980)
!8995 = !DILocalVariable(name: "force", arg: 7, scope: !8980, file: !3, line: 2176, type: !331)
!8996 = !DILocation(line: 2176, column: 39, scope: !8980)
!8997 = !DILocation(line: 2178, column: 6, scope: !8998)
!8998 = distinct !DILexicalBlock(scope: !8980, file: !3, line: 2178, column: 6)
!8999 = !DILocation(line: 2178, column: 12, scope: !8998)
!9000 = !DILocation(line: 2178, column: 19, scope: !8998)
!9001 = !DILocation(line: 2178, column: 9, scope: !8998)
!9002 = !DILocation(line: 2178, column: 6, scope: !8980)
!9003 = !DILocation(line: 2179, column: 3, scope: !8998)
!9004 = !DILocation(line: 2181, column: 10, scope: !8980)
!9005 = !DILocation(line: 2181, column: 18, scope: !8980)
!9006 = !DILocation(line: 2181, column: 25, scope: !8980)
!9007 = !DILocation(line: 2181, column: 15, scope: !8980)
!9008 = !DILocation(line: 2181, column: 34, scope: !8980)
!9009 = !DILocation(line: 2181, column: 41, scope: !8980)
!9010 = !DILocation(line: 2181, column: 32, scope: !8980)
!9011 = !DILocation(line: 2181, column: 7, scope: !8980)
!9012 = !DILocation(line: 2183, column: 33, scope: !8980)
!9013 = !DILocation(line: 2183, column: 40, scope: !8980)
!9014 = !DILocation(line: 2184, column: 12, scope: !8980)
!9015 = !DILocation(line: 2184, column: 19, scope: !8980)
!9016 = !DILocation(line: 2184, column: 26, scope: !8980)
!9017 = !DILocation(line: 2184, column: 33, scope: !8980)
!9018 = !DILocation(line: 2184, column: 45, scope: !8980)
!9019 = !DILocation(line: 2184, column: 43, scope: !8980)
!9020 = !DILocation(line: 2184, column: 23, scope: !8980)
!9021 = !DILocation(line: 2185, column: 12, scope: !8980)
!9022 = !DILocation(line: 2185, column: 18, scope: !8980)
!9023 = !DILocation(line: 2185, column: 25, scope: !8980)
!9024 = !DILocation(line: 2185, column: 32, scope: !8980)
!9025 = !DILocation(line: 2185, column: 22, scope: !8980)
!9026 = !DILocation(line: 2186, column: 12, scope: !8980)
!9027 = !DILocation(line: 2186, column: 20, scope: !8980)
!9028 = !DILocation(line: 2186, column: 27, scope: !8980)
!9029 = !DILocation(line: 2183, column: 9, scope: !8980)
!9030 = !DILocation(line: 2183, column: 2, scope: !8980)
!9031 = !DILocation(line: 2187, column: 1, scope: !8980)
!9032 = distinct !DISubprogram(name: "regmap_bulk_write", scope: !3, file: !3, line: 2204, type: !8755, scopeLine: 2206, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9033 = !DILocalVariable(name: "map", arg: 1, scope: !9032, file: !3, line: 2204, type: !6)
!9034 = !DILocation(line: 2204, column: 38, scope: !9032)
!9035 = !DILocalVariable(name: "reg", arg: 2, scope: !9032, file: !3, line: 2204, type: !70)
!9036 = !DILocation(line: 2204, column: 56, scope: !9032)
!9037 = !DILocalVariable(name: "val", arg: 3, scope: !9032, file: !3, line: 2204, type: !1880)
!9038 = !DILocation(line: 2204, column: 73, scope: !9032)
!9039 = !DILocalVariable(name: "val_count", arg: 4, scope: !9032, file: !3, line: 2205, type: !167)
!9040 = !DILocation(line: 2205, column: 15, scope: !9032)
!9041 = !DILocalVariable(name: "ret", scope: !9032, file: !3, line: 2207, type: !104)
!9042 = !DILocation(line: 2207, column: 6, scope: !9032)
!9043 = !DILocalVariable(name: "i", scope: !9032, file: !3, line: 2207, type: !104)
!9044 = !DILocation(line: 2207, column: 15, scope: !9032)
!9045 = !DILocalVariable(name: "val_bytes", scope: !9032, file: !3, line: 2208, type: !167)
!9046 = !DILocation(line: 2208, column: 9, scope: !9032)
!9047 = !DILocation(line: 2208, column: 21, scope: !9032)
!9048 = !DILocation(line: 2208, column: 26, scope: !9032)
!9049 = !DILocation(line: 2208, column: 33, scope: !9032)
!9050 = !DILocation(line: 2210, column: 7, scope: !9051)
!9051 = distinct !DILexicalBlock(scope: !9032, file: !3, line: 2210, column: 6)
!9052 = !DILocation(line: 2210, column: 6, scope: !9032)
!9053 = !DILocation(line: 2211, column: 3, scope: !9051)
!9054 = !DILocation(line: 2217, column: 7, scope: !9055)
!9055 = distinct !DILexicalBlock(scope: !9032, file: !3, line: 2217, column: 6)
!9056 = !DILocation(line: 2217, column: 12, scope: !9055)
!9057 = !DILocation(line: 2217, column: 16, scope: !9055)
!9058 = !DILocation(line: 2217, column: 20, scope: !9055)
!9059 = !DILocation(line: 2217, column: 25, scope: !9055)
!9060 = !DILocation(line: 2217, column: 32, scope: !9055)
!9061 = !DILocation(line: 2217, column: 6, scope: !9032)
!9062 = !DILocation(line: 2218, column: 3, scope: !9063)
!9063 = distinct !DILexicalBlock(scope: !9055, file: !3, line: 2217, column: 47)
!9064 = !DILocation(line: 2218, column: 8, scope: !9063)
!9065 = !DILocation(line: 2218, column: 13, scope: !9063)
!9066 = !DILocation(line: 2218, column: 18, scope: !9063)
!9067 = !DILocation(line: 2219, column: 10, scope: !9068)
!9068 = distinct !DILexicalBlock(scope: !9063, file: !3, line: 2219, column: 3)
!9069 = !DILocation(line: 2219, column: 8, scope: !9068)
!9070 = !DILocation(line: 2219, column: 15, scope: !9071)
!9071 = distinct !DILexicalBlock(scope: !9068, file: !3, line: 2219, column: 3)
!9072 = !DILocation(line: 2219, column: 19, scope: !9071)
!9073 = !DILocation(line: 2219, column: 17, scope: !9071)
!9074 = !DILocation(line: 2219, column: 3, scope: !9068)
!9075 = !DILocalVariable(name: "ival", scope: !9076, file: !3, line: 2220, type: !70)
!9076 = distinct !DILexicalBlock(scope: !9071, file: !3, line: 2219, column: 35)
!9077 = !DILocation(line: 2220, column: 17, scope: !9076)
!9078 = !DILocation(line: 2222, column: 12, scope: !9076)
!9079 = !DILocation(line: 2222, column: 4, scope: !9076)
!9080 = !DILocation(line: 2224, column: 20, scope: !9081)
!9081 = distinct !DILexicalBlock(scope: !9076, file: !3, line: 2222, column: 23)
!9082 = !DILocation(line: 2224, column: 27, scope: !9081)
!9083 = !DILocation(line: 2224, column: 31, scope: !9081)
!9084 = !DILocation(line: 2224, column: 29, scope: !9081)
!9085 = !DILocation(line: 2224, column: 24, scope: !9081)
!9086 = !DILocation(line: 2224, column: 12, scope: !9081)
!9087 = !DILocation(line: 2224, column: 10, scope: !9081)
!9088 = !DILocation(line: 2225, column: 5, scope: !9081)
!9089 = !DILocation(line: 2227, column: 21, scope: !9081)
!9090 = !DILocation(line: 2227, column: 28, scope: !9081)
!9091 = !DILocation(line: 2227, column: 32, scope: !9081)
!9092 = !DILocation(line: 2227, column: 30, scope: !9081)
!9093 = !DILocation(line: 2227, column: 25, scope: !9081)
!9094 = !DILocation(line: 2227, column: 13, scope: !9081)
!9095 = !DILocation(line: 2227, column: 12, scope: !9081)
!9096 = !DILocation(line: 2227, column: 10, scope: !9081)
!9097 = !DILocation(line: 2228, column: 5, scope: !9081)
!9098 = !DILocation(line: 2230, column: 21, scope: !9081)
!9099 = !DILocation(line: 2230, column: 28, scope: !9081)
!9100 = !DILocation(line: 2230, column: 32, scope: !9081)
!9101 = !DILocation(line: 2230, column: 30, scope: !9081)
!9102 = !DILocation(line: 2230, column: 25, scope: !9081)
!9103 = !DILocation(line: 2230, column: 13, scope: !9081)
!9104 = !DILocation(line: 2230, column: 12, scope: !9081)
!9105 = !DILocation(line: 2230, column: 10, scope: !9081)
!9106 = !DILocation(line: 2231, column: 5, scope: !9081)
!9107 = !DILocation(line: 2234, column: 21, scope: !9081)
!9108 = !DILocation(line: 2234, column: 28, scope: !9081)
!9109 = !DILocation(line: 2234, column: 32, scope: !9081)
!9110 = !DILocation(line: 2234, column: 30, scope: !9081)
!9111 = !DILocation(line: 2234, column: 25, scope: !9081)
!9112 = !DILocation(line: 2234, column: 13, scope: !9081)
!9113 = !DILocation(line: 2234, column: 12, scope: !9081)
!9114 = !DILocation(line: 2234, column: 10, scope: !9081)
!9115 = !DILocation(line: 2235, column: 5, scope: !9081)
!9116 = !DILocation(line: 2238, column: 9, scope: !9081)
!9117 = !DILocation(line: 2239, column: 5, scope: !9081)
!9118 = !DILocation(line: 2242, column: 24, scope: !9076)
!9119 = !DILocation(line: 2243, column: 10, scope: !9076)
!9120 = !DILocation(line: 2243, column: 34, scope: !9076)
!9121 = !DILocation(line: 2243, column: 39, scope: !9076)
!9122 = !DILocation(line: 2243, column: 16, scope: !9076)
!9123 = !DILocation(line: 2243, column: 14, scope: !9076)
!9124 = !DILocation(line: 2244, column: 10, scope: !9076)
!9125 = !DILocation(line: 2242, column: 10, scope: !9076)
!9126 = !DILocation(line: 2242, column: 8, scope: !9076)
!9127 = !DILocation(line: 2245, column: 8, scope: !9128)
!9128 = distinct !DILexicalBlock(scope: !9076, file: !3, line: 2245, column: 8)
!9129 = !DILocation(line: 2245, column: 12, scope: !9128)
!9130 = !DILocation(line: 2245, column: 8, scope: !9076)
!9131 = !DILocation(line: 2246, column: 5, scope: !9128)
!9132 = !DILocation(line: 2247, column: 3, scope: !9076)
!9133 = !DILocation(line: 2219, column: 31, scope: !9071)
!9134 = !DILocation(line: 2219, column: 3, scope: !9071)
!9135 = distinct !{!9135, !9074, !9136}
!9136 = !DILocation(line: 2247, column: 3, scope: !9068)
!9137 = !DILabel(scope: !9063, name: "out", file: !3, line: 2248)
!9138 = !DILocation(line: 2248, column: 1, scope: !9063)
!9139 = !DILocation(line: 2249, column: 3, scope: !9063)
!9140 = !DILocation(line: 2249, column: 8, scope: !9063)
!9141 = !DILocation(line: 2249, column: 15, scope: !9063)
!9142 = !DILocation(line: 2249, column: 20, scope: !9063)
!9143 = !DILocation(line: 2250, column: 2, scope: !9063)
!9144 = !DILocalVariable(name: "wval", scope: !9145, file: !3, line: 2251, type: !64)
!9145 = distinct !DILexicalBlock(scope: !9055, file: !3, line: 2250, column: 9)
!9146 = !DILocation(line: 2251, column: 9, scope: !9145)
!9147 = !DILocation(line: 2253, column: 18, scope: !9145)
!9148 = !DILocation(line: 2253, column: 23, scope: !9145)
!9149 = !DILocation(line: 2253, column: 35, scope: !9145)
!9150 = !DILocation(line: 2253, column: 33, scope: !9145)
!9151 = !DILocation(line: 2253, column: 46, scope: !9145)
!9152 = !DILocation(line: 2253, column: 51, scope: !9145)
!9153 = !DILocation(line: 2253, column: 10, scope: !9145)
!9154 = !DILocation(line: 2253, column: 8, scope: !9145)
!9155 = !DILocation(line: 2254, column: 8, scope: !9156)
!9156 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 2254, column: 7)
!9157 = !DILocation(line: 2254, column: 7, scope: !9145)
!9158 = !DILocation(line: 2255, column: 4, scope: !9156)
!9159 = !DILocation(line: 2257, column: 10, scope: !9160)
!9160 = distinct !DILexicalBlock(scope: !9145, file: !3, line: 2257, column: 3)
!9161 = !DILocation(line: 2257, column: 8, scope: !9160)
!9162 = !DILocation(line: 2257, column: 15, scope: !9163)
!9163 = distinct !DILexicalBlock(scope: !9160, file: !3, line: 2257, column: 3)
!9164 = !DILocation(line: 2257, column: 19, scope: !9163)
!9165 = !DILocation(line: 2257, column: 31, scope: !9163)
!9166 = !DILocation(line: 2257, column: 29, scope: !9163)
!9167 = !DILocation(line: 2257, column: 17, scope: !9163)
!9168 = !DILocation(line: 2257, column: 3, scope: !9160)
!9169 = !DILocation(line: 2258, column: 4, scope: !9163)
!9170 = !DILocation(line: 2258, column: 9, scope: !9163)
!9171 = !DILocation(line: 2258, column: 16, scope: !9163)
!9172 = !DILocation(line: 2258, column: 30, scope: !9163)
!9173 = !DILocation(line: 2258, column: 37, scope: !9163)
!9174 = !DILocation(line: 2258, column: 35, scope: !9163)
!9175 = !DILocation(line: 2257, column: 47, scope: !9163)
!9176 = !DILocation(line: 2257, column: 44, scope: !9163)
!9177 = !DILocation(line: 2257, column: 3, scope: !9163)
!9178 = distinct !{!9178, !9168, !9179}
!9179 = !DILocation(line: 2258, column: 38, scope: !9160)
!9180 = !DILocation(line: 2260, column: 26, scope: !9145)
!9181 = !DILocation(line: 2260, column: 31, scope: !9145)
!9182 = !DILocation(line: 2260, column: 36, scope: !9145)
!9183 = !DILocation(line: 2260, column: 42, scope: !9145)
!9184 = !DILocation(line: 2260, column: 54, scope: !9145)
!9185 = !DILocation(line: 2260, column: 52, scope: !9145)
!9186 = !DILocation(line: 2260, column: 9, scope: !9145)
!9187 = !DILocation(line: 2260, column: 7, scope: !9145)
!9188 = !DILocation(line: 2262, column: 9, scope: !9145)
!9189 = !DILocation(line: 2262, column: 3, scope: !9145)
!9190 = !DILocation(line: 2264, column: 9, scope: !9032)
!9191 = !DILocation(line: 2264, column: 2, scope: !9032)
!9192 = !DILocation(line: 2265, column: 1, scope: !9032)
!9193 = distinct !DISubprogram(name: "regmap_multi_reg_write", scope: !3, file: !3, line: 2511, type: !3864, scopeLine: 2513, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9194 = !DILocalVariable(name: "map", arg: 1, scope: !9193, file: !3, line: 2511, type: !6)
!9195 = !DILocation(line: 2511, column: 43, scope: !9193)
!9196 = !DILocalVariable(name: "regs", arg: 2, scope: !9193, file: !3, line: 2511, type: !3866)
!9197 = !DILocation(line: 2511, column: 75, scope: !9193)
!9198 = !DILocalVariable(name: "num_regs", arg: 3, scope: !9193, file: !3, line: 2512, type: !104)
!9199 = !DILocation(line: 2512, column: 11, scope: !9193)
!9200 = !DILocalVariable(name: "ret", scope: !9193, file: !3, line: 2514, type: !104)
!9201 = !DILocation(line: 2514, column: 6, scope: !9193)
!9202 = !DILocation(line: 2516, column: 2, scope: !9193)
!9203 = !DILocation(line: 2516, column: 7, scope: !9193)
!9204 = !DILocation(line: 2516, column: 12, scope: !9193)
!9205 = !DILocation(line: 2516, column: 17, scope: !9193)
!9206 = !DILocation(line: 2518, column: 32, scope: !9193)
!9207 = !DILocation(line: 2518, column: 37, scope: !9193)
!9208 = !DILocation(line: 2518, column: 43, scope: !9193)
!9209 = !DILocation(line: 2518, column: 8, scope: !9193)
!9210 = !DILocation(line: 2518, column: 6, scope: !9193)
!9211 = !DILocation(line: 2520, column: 2, scope: !9193)
!9212 = !DILocation(line: 2520, column: 7, scope: !9193)
!9213 = !DILocation(line: 2520, column: 14, scope: !9193)
!9214 = !DILocation(line: 2520, column: 19, scope: !9193)
!9215 = !DILocation(line: 2522, column: 9, scope: !9193)
!9216 = !DILocation(line: 2522, column: 2, scope: !9193)
!9217 = distinct !DISubprogram(name: "_regmap_multi_reg_write", scope: !3, file: !3, line: 2413, type: !9218, scopeLine: 2416, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9218 = !DISubroutineType(types: !9219)
!9219 = !{!104, !6, !3866, !167}
!9220 = !DILocalVariable(name: "map", arg: 1, scope: !9217, file: !3, line: 2413, type: !6)
!9221 = !DILocation(line: 2413, column: 51, scope: !9217)
!9222 = !DILocalVariable(name: "regs", arg: 2, scope: !9217, file: !3, line: 2414, type: !3866)
!9223 = !DILocation(line: 2414, column: 35, scope: !9217)
!9224 = !DILocalVariable(name: "num_regs", arg: 3, scope: !9217, file: !3, line: 2415, type: !167)
!9225 = !DILocation(line: 2415, column: 15, scope: !9217)
!9226 = !DILocalVariable(name: "i", scope: !9217, file: !3, line: 2417, type: !104)
!9227 = !DILocation(line: 2417, column: 6, scope: !9217)
!9228 = !DILocalVariable(name: "ret", scope: !9217, file: !3, line: 2418, type: !104)
!9229 = !DILocation(line: 2418, column: 6, scope: !9217)
!9230 = !DILocation(line: 2420, column: 7, scope: !9231)
!9231 = distinct !DILexicalBlock(scope: !9217, file: !3, line: 2420, column: 6)
!9232 = !DILocation(line: 2420, column: 12, scope: !9231)
!9233 = !DILocation(line: 2420, column: 6, scope: !9217)
!9234 = !DILocation(line: 2421, column: 10, scope: !9235)
!9235 = distinct !DILexicalBlock(scope: !9236, file: !3, line: 2421, column: 3)
!9236 = distinct !DILexicalBlock(scope: !9231, file: !3, line: 2420, column: 29)
!9237 = !DILocation(line: 2421, column: 8, scope: !9235)
!9238 = !DILocation(line: 2421, column: 15, scope: !9239)
!9239 = distinct !DILexicalBlock(scope: !9235, file: !3, line: 2421, column: 3)
!9240 = !DILocation(line: 2421, column: 19, scope: !9239)
!9241 = !DILocation(line: 2421, column: 17, scope: !9239)
!9242 = !DILocation(line: 2421, column: 3, scope: !9235)
!9243 = !DILocation(line: 2422, column: 24, scope: !9244)
!9244 = distinct !DILexicalBlock(scope: !9239, file: !3, line: 2421, column: 34)
!9245 = !DILocation(line: 2422, column: 29, scope: !9244)
!9246 = !DILocation(line: 2422, column: 34, scope: !9244)
!9247 = !DILocation(line: 2422, column: 37, scope: !9244)
!9248 = !DILocation(line: 2422, column: 42, scope: !9244)
!9249 = !DILocation(line: 2422, column: 47, scope: !9244)
!9250 = !DILocation(line: 2422, column: 50, scope: !9244)
!9251 = !DILocation(line: 2422, column: 10, scope: !9244)
!9252 = !DILocation(line: 2422, column: 8, scope: !9244)
!9253 = !DILocation(line: 2423, column: 8, scope: !9254)
!9254 = distinct !DILexicalBlock(scope: !9244, file: !3, line: 2423, column: 8)
!9255 = !DILocation(line: 2423, column: 12, scope: !9254)
!9256 = !DILocation(line: 2423, column: 8, scope: !9244)
!9257 = !DILocation(line: 2424, column: 12, scope: !9254)
!9258 = !DILocation(line: 2424, column: 5, scope: !9254)
!9259 = !DILocation(line: 2426, column: 8, scope: !9260)
!9260 = distinct !DILexicalBlock(scope: !9244, file: !3, line: 2426, column: 8)
!9261 = !DILocation(line: 2426, column: 13, scope: !9260)
!9262 = !DILocation(line: 2426, column: 16, scope: !9260)
!9263 = !DILocation(line: 2426, column: 8, scope: !9244)
!9264 = !DILocation(line: 2427, column: 9, scope: !9265)
!9265 = distinct !DILexicalBlock(scope: !9266, file: !3, line: 2427, column: 9)
!9266 = distinct !DILexicalBlock(scope: !9260, file: !3, line: 2426, column: 26)
!9267 = !DILocation(line: 2427, column: 14, scope: !9265)
!9268 = !DILocation(line: 2427, column: 9, scope: !9266)
!9269 = !DILocation(line: 2428, column: 13, scope: !9265)
!9270 = !DILocation(line: 2428, column: 18, scope: !9265)
!9271 = !DILocation(line: 2428, column: 21, scope: !9265)
!9272 = !DILocation(line: 2428, column: 6, scope: !9265)
!9273 = !DILocation(line: 2430, column: 6, scope: !9274)
!9274 = distinct !DILexicalBlock(scope: !9275, file: !3, line: 2430, column: 6)
!9275 = distinct !DILexicalBlock(scope: !9265, file: !3, line: 2430, column: 6)
!9276 = !DILocation(line: 2430, column: 6, scope: !9275)
!9277 = !DILocation(line: 2430, column: 6, scope: !9278)
!9278 = distinct !DILexicalBlock(scope: !9279, file: !3, line: 2430, column: 6)
!9279 = distinct !DILexicalBlock(scope: !9274, file: !3, line: 2430, column: 6)
!9280 = !DILocation(line: 2430, column: 6, scope: !9279)
!9281 = !DILocation(line: 2430, column: 6, scope: !9282)
!9282 = distinct !DILexicalBlock(scope: !9274, file: !3, line: 2430, column: 6)
!9283 = !DILocation(line: 2431, column: 4, scope: !9266)
!9284 = !DILocation(line: 2432, column: 3, scope: !9244)
!9285 = !DILocation(line: 2421, column: 30, scope: !9239)
!9286 = !DILocation(line: 2421, column: 3, scope: !9239)
!9287 = distinct !{!9287, !9242, !9288}
!9288 = !DILocation(line: 2432, column: 3, scope: !9235)
!9289 = !DILocation(line: 2433, column: 3, scope: !9236)
!9290 = !DILocation(line: 2436, column: 7, scope: !9291)
!9291 = distinct !DILexicalBlock(scope: !9217, file: !3, line: 2436, column: 6)
!9292 = !DILocation(line: 2436, column: 12, scope: !9291)
!9293 = !DILocation(line: 2436, column: 19, scope: !9291)
!9294 = !DILocation(line: 2436, column: 6, scope: !9217)
!9295 = !DILocation(line: 2437, column: 3, scope: !9291)
!9296 = !DILocation(line: 2439, column: 6, scope: !9297)
!9297 = distinct !DILexicalBlock(scope: !9217, file: !3, line: 2439, column: 6)
!9298 = !DILocation(line: 2439, column: 11, scope: !9297)
!9299 = !DILocation(line: 2439, column: 6, scope: !9217)
!9300 = !DILocation(line: 2440, column: 10, scope: !9301)
!9301 = distinct !DILexicalBlock(scope: !9297, file: !3, line: 2440, column: 3)
!9302 = !DILocation(line: 2440, column: 8, scope: !9301)
!9303 = !DILocation(line: 2440, column: 15, scope: !9304)
!9304 = distinct !DILexicalBlock(scope: !9301, file: !3, line: 2440, column: 3)
!9305 = !DILocation(line: 2440, column: 19, scope: !9304)
!9306 = !DILocation(line: 2440, column: 17, scope: !9304)
!9307 = !DILocation(line: 2440, column: 3, scope: !9301)
!9308 = !DILocalVariable(name: "reg", scope: !9309, file: !3, line: 2441, type: !104)
!9309 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 2440, column: 34)
!9310 = !DILocation(line: 2441, column: 8, scope: !9309)
!9311 = !DILocation(line: 2441, column: 14, scope: !9309)
!9312 = !DILocation(line: 2441, column: 19, scope: !9309)
!9313 = !DILocation(line: 2441, column: 22, scope: !9309)
!9314 = !DILocation(line: 2442, column: 9, scope: !9315)
!9315 = distinct !DILexicalBlock(scope: !9309, file: !3, line: 2442, column: 8)
!9316 = !DILocation(line: 2442, column: 14, scope: !9315)
!9317 = !DILocation(line: 2442, column: 28, scope: !9315)
!9318 = !DILocation(line: 2442, column: 33, scope: !9315)
!9319 = !DILocation(line: 2442, column: 38, scope: !9315)
!9320 = !DILocation(line: 2442, column: 8, scope: !9309)
!9321 = !DILocation(line: 2443, column: 5, scope: !9315)
!9322 = !DILocation(line: 2444, column: 9, scope: !9323)
!9323 = distinct !DILexicalBlock(scope: !9309, file: !3, line: 2444, column: 8)
!9324 = !DILocation(line: 2444, column: 8, scope: !9309)
!9325 = !DILocation(line: 2445, column: 5, scope: !9323)
!9326 = !DILocation(line: 2446, column: 3, scope: !9309)
!9327 = !DILocation(line: 2440, column: 30, scope: !9304)
!9328 = !DILocation(line: 2440, column: 3, scope: !9304)
!9329 = distinct !{!9329, !9307, !9330}
!9330 = !DILocation(line: 2446, column: 3, scope: !9301)
!9331 = !DILocation(line: 2448, column: 7, scope: !9332)
!9332 = distinct !DILexicalBlock(scope: !9217, file: !3, line: 2448, column: 6)
!9333 = !DILocation(line: 2448, column: 12, scope: !9332)
!9334 = !DILocation(line: 2448, column: 6, scope: !9217)
!9335 = !DILocation(line: 2449, column: 10, scope: !9336)
!9336 = distinct !DILexicalBlock(scope: !9337, file: !3, line: 2449, column: 3)
!9337 = distinct !DILexicalBlock(scope: !9332, file: !3, line: 2448, column: 26)
!9338 = !DILocation(line: 2449, column: 8, scope: !9336)
!9339 = !DILocation(line: 2449, column: 15, scope: !9340)
!9340 = distinct !DILexicalBlock(scope: !9336, file: !3, line: 2449, column: 3)
!9341 = !DILocation(line: 2449, column: 19, scope: !9340)
!9342 = !DILocation(line: 2449, column: 17, scope: !9340)
!9343 = !DILocation(line: 2449, column: 3, scope: !9336)
!9344 = !DILocalVariable(name: "val", scope: !9345, file: !3, line: 2450, type: !70)
!9345 = distinct !DILexicalBlock(scope: !9340, file: !3, line: 2449, column: 34)
!9346 = !DILocation(line: 2450, column: 17, scope: !9345)
!9347 = !DILocation(line: 2450, column: 23, scope: !9345)
!9348 = !DILocation(line: 2450, column: 28, scope: !9345)
!9349 = !DILocation(line: 2450, column: 31, scope: !9345)
!9350 = !DILocalVariable(name: "reg", scope: !9345, file: !3, line: 2451, type: !70)
!9351 = !DILocation(line: 2451, column: 17, scope: !9345)
!9352 = !DILocation(line: 2451, column: 23, scope: !9345)
!9353 = !DILocation(line: 2451, column: 28, scope: !9345)
!9354 = !DILocation(line: 2451, column: 31, scope: !9345)
!9355 = !DILocation(line: 2452, column: 25, scope: !9345)
!9356 = !DILocation(line: 2452, column: 30, scope: !9345)
!9357 = !DILocation(line: 2452, column: 35, scope: !9345)
!9358 = !DILocation(line: 2452, column: 10, scope: !9345)
!9359 = !DILocation(line: 2452, column: 8, scope: !9345)
!9360 = !DILocation(line: 2453, column: 8, scope: !9361)
!9361 = distinct !DILexicalBlock(scope: !9345, file: !3, line: 2453, column: 8)
!9362 = !DILocation(line: 2453, column: 8, scope: !9345)
!9363 = !DILocation(line: 2454, column: 5, scope: !9364)
!9364 = distinct !DILexicalBlock(scope: !9361, file: !3, line: 2453, column: 13)
!9365 = !DILocation(line: 2457, column: 12, scope: !9364)
!9366 = !DILocation(line: 2457, column: 5, scope: !9364)
!9367 = !DILocation(line: 2459, column: 3, scope: !9345)
!9368 = !DILocation(line: 2449, column: 30, scope: !9340)
!9369 = !DILocation(line: 2449, column: 3, scope: !9340)
!9370 = distinct !{!9370, !9343, !9371}
!9371 = !DILocation(line: 2459, column: 3, scope: !9336)
!9372 = !DILocation(line: 2460, column: 7, scope: !9373)
!9373 = distinct !DILexicalBlock(scope: !9337, file: !3, line: 2460, column: 7)
!9374 = !DILocation(line: 2460, column: 12, scope: !9373)
!9375 = !DILocation(line: 2460, column: 7, scope: !9337)
!9376 = !DILocation(line: 2461, column: 4, scope: !9377)
!9377 = distinct !DILexicalBlock(scope: !9373, file: !3, line: 2460, column: 24)
!9378 = !DILocation(line: 2461, column: 9, scope: !9377)
!9379 = !DILocation(line: 2461, column: 21, scope: !9377)
!9380 = !DILocation(line: 2462, column: 4, scope: !9377)
!9381 = !DILocation(line: 2464, column: 2, scope: !9337)
!9382 = !DILocalVariable(name: "__ret_warn_on", scope: !9383, file: !3, line: 2466, type: !104)
!9383 = distinct !DILexicalBlock(scope: !9217, file: !3, line: 2466, column: 2)
!9384 = !DILocation(line: 2466, column: 2, scope: !9383)
!9385 = !DILocation(line: 2466, column: 2, scope: !9386)
!9386 = distinct !DILexicalBlock(scope: !9383, file: !3, line: 2466, column: 2)
!9387 = !DILocation(line: 2466, column: 2, scope: !9388)
!9388 = distinct !DILexicalBlock(scope: !9386, file: !3, line: 2466, column: 2)
!9389 = !DILocation(line: 2466, column: 2, scope: !9390)
!9390 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 2466, column: 2)
!9391 = !DILocation(line: 2466, column: 2, scope: !9392)
!9392 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 2466, column: 2)
!9393 = !{i32 -2142546585, i32 -2142546556, i32 -2142546510, i32 -2142546452, i32 -2142546398, i32 -2142546344, i32 -2142546289, i32 -2142546258}
!9394 = !DILocation(line: 2466, column: 2, scope: !9395)
!9395 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 2466, column: 2)
!9396 = !{i32 -2142545847, i32 -2142545840, i32 -2142545788, i32 -2142545757, i32 -2142545727}
!9397 = !DILocation(line: 2466, column: 2, scope: !9398)
!9398 = distinct !DILexicalBlock(scope: !9388, file: !3, line: 2466, column: 2)
!9399 = !DILocation(line: 2468, column: 9, scope: !9400)
!9400 = distinct !DILexicalBlock(scope: !9217, file: !3, line: 2468, column: 2)
!9401 = !DILocation(line: 2468, column: 7, scope: !9400)
!9402 = !DILocation(line: 2468, column: 14, scope: !9403)
!9403 = distinct !DILexicalBlock(scope: !9400, file: !3, line: 2468, column: 2)
!9404 = !DILocation(line: 2468, column: 18, scope: !9403)
!9405 = !DILocation(line: 2468, column: 16, scope: !9403)
!9406 = !DILocation(line: 2468, column: 2, scope: !9400)
!9407 = !DILocalVariable(name: "reg", scope: !9408, file: !3, line: 2469, type: !70)
!9408 = distinct !DILexicalBlock(scope: !9403, file: !3, line: 2468, column: 33)
!9409 = !DILocation(line: 2469, column: 16, scope: !9408)
!9410 = !DILocation(line: 2469, column: 22, scope: !9408)
!9411 = !DILocation(line: 2469, column: 27, scope: !9408)
!9412 = !DILocation(line: 2469, column: 30, scope: !9408)
!9413 = !DILocalVariable(name: "range", scope: !9408, file: !3, line: 2470, type: !3844)
!9414 = !DILocation(line: 2470, column: 29, scope: !9408)
!9415 = !DILocation(line: 2475, column: 32, scope: !9408)
!9416 = !DILocation(line: 2475, column: 37, scope: !9408)
!9417 = !DILocation(line: 2475, column: 11, scope: !9408)
!9418 = !DILocation(line: 2475, column: 9, scope: !9408)
!9419 = !DILocation(line: 2476, column: 7, scope: !9420)
!9420 = distinct !DILexicalBlock(scope: !9408, file: !3, line: 2476, column: 7)
!9421 = !DILocation(line: 2476, column: 13, scope: !9420)
!9422 = !DILocation(line: 2476, column: 16, scope: !9420)
!9423 = !DILocation(line: 2476, column: 21, scope: !9420)
!9424 = !DILocation(line: 2476, column: 24, scope: !9420)
!9425 = !DILocation(line: 2476, column: 7, scope: !9408)
!9426 = !DILocalVariable(name: "len", scope: !9427, file: !3, line: 2477, type: !167)
!9427 = distinct !DILexicalBlock(scope: !9420, file: !3, line: 2476, column: 34)
!9428 = !DILocation(line: 2477, column: 11, scope: !9427)
!9429 = !DILocation(line: 2477, column: 45, scope: !9427)
!9430 = !DILocation(line: 2477, column: 44, scope: !9427)
!9431 = !DILocalVariable(name: "base", scope: !9427, file: !3, line: 2478, type: !3726)
!9432 = !DILocation(line: 2478, column: 25, scope: !9427)
!9433 = !DILocation(line: 2478, column: 40, scope: !9427)
!9434 = !DILocation(line: 2478, column: 46, scope: !9427)
!9435 = !DILocation(line: 2478, column: 32, scope: !9427)
!9436 = !DILocation(line: 2480, column: 9, scope: !9437)
!9437 = distinct !DILexicalBlock(scope: !9427, file: !3, line: 2480, column: 8)
!9438 = !DILocation(line: 2480, column: 8, scope: !9427)
!9439 = !DILocation(line: 2481, column: 5, scope: !9437)
!9440 = !DILocation(line: 2482, column: 46, scope: !9427)
!9441 = !DILocation(line: 2482, column: 51, scope: !9427)
!9442 = !DILocation(line: 2483, column: 11, scope: !9427)
!9443 = !DILocation(line: 2482, column: 10, scope: !9427)
!9444 = !DILocation(line: 2482, column: 8, scope: !9427)
!9445 = !DILocation(line: 2484, column: 10, scope: !9427)
!9446 = !DILocation(line: 2484, column: 4, scope: !9427)
!9447 = !DILocation(line: 2486, column: 11, scope: !9427)
!9448 = !DILocation(line: 2486, column: 4, scope: !9427)
!9449 = !DILocation(line: 2488, column: 2, scope: !9408)
!9450 = !DILocation(line: 2468, column: 29, scope: !9403)
!9451 = !DILocation(line: 2468, column: 2, scope: !9403)
!9452 = distinct !{!9452, !9406, !9453}
!9453 = !DILocation(line: 2488, column: 2, scope: !9400)
!9454 = !DILocation(line: 2489, column: 37, scope: !9217)
!9455 = !DILocation(line: 2489, column: 42, scope: !9217)
!9456 = !DILocation(line: 2489, column: 48, scope: !9217)
!9457 = !DILocation(line: 2489, column: 9, scope: !9217)
!9458 = !DILocation(line: 2489, column: 2, scope: !9217)
!9459 = !DILocation(line: 2490, column: 1, scope: !9217)
!9460 = distinct !DISubprogram(name: "regmap_multi_reg_write_bypassed", scope: !3, file: !3, line: 2544, type: !3864, scopeLine: 2547, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9461 = !DILocalVariable(name: "map", arg: 1, scope: !9460, file: !3, line: 2544, type: !6)
!9462 = !DILocation(line: 2544, column: 52, scope: !9460)
!9463 = !DILocalVariable(name: "regs", arg: 2, scope: !9460, file: !3, line: 2545, type: !3866)
!9464 = !DILocation(line: 2545, column: 36, scope: !9460)
!9465 = !DILocalVariable(name: "num_regs", arg: 3, scope: !9460, file: !3, line: 2546, type: !104)
!9466 = !DILocation(line: 2546, column: 13, scope: !9460)
!9467 = !DILocalVariable(name: "ret", scope: !9460, file: !3, line: 2548, type: !104)
!9468 = !DILocation(line: 2548, column: 6, scope: !9460)
!9469 = !DILocalVariable(name: "bypass", scope: !9460, file: !3, line: 2549, type: !331)
!9470 = !DILocation(line: 2549, column: 7, scope: !9460)
!9471 = !DILocation(line: 2551, column: 2, scope: !9460)
!9472 = !DILocation(line: 2551, column: 7, scope: !9460)
!9473 = !DILocation(line: 2551, column: 12, scope: !9460)
!9474 = !DILocation(line: 2551, column: 17, scope: !9460)
!9475 = !DILocation(line: 2553, column: 11, scope: !9460)
!9476 = !DILocation(line: 2553, column: 16, scope: !9460)
!9477 = !DILocation(line: 2553, column: 9, scope: !9460)
!9478 = !DILocation(line: 2554, column: 2, scope: !9460)
!9479 = !DILocation(line: 2554, column: 7, scope: !9460)
!9480 = !DILocation(line: 2554, column: 20, scope: !9460)
!9481 = !DILocation(line: 2556, column: 32, scope: !9460)
!9482 = !DILocation(line: 2556, column: 37, scope: !9460)
!9483 = !DILocation(line: 2556, column: 43, scope: !9460)
!9484 = !DILocation(line: 2556, column: 8, scope: !9460)
!9485 = !DILocation(line: 2556, column: 6, scope: !9460)
!9486 = !DILocation(line: 2558, column: 22, scope: !9460)
!9487 = !DILocation(line: 2558, column: 2, scope: !9460)
!9488 = !DILocation(line: 2558, column: 7, scope: !9460)
!9489 = !DILocation(line: 2558, column: 20, scope: !9460)
!9490 = !DILocation(line: 2560, column: 2, scope: !9460)
!9491 = !DILocation(line: 2560, column: 7, scope: !9460)
!9492 = !DILocation(line: 2560, column: 14, scope: !9460)
!9493 = !DILocation(line: 2560, column: 19, scope: !9460)
!9494 = !DILocation(line: 2562, column: 9, scope: !9460)
!9495 = !DILocation(line: 2562, column: 2, scope: !9460)
!9496 = distinct !DISubprogram(name: "regmap_raw_write_async", scope: !3, file: !3, line: 2588, type: !8755, scopeLine: 2590, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9497 = !DILocalVariable(name: "map", arg: 1, scope: !9496, file: !3, line: 2588, type: !6)
!9498 = !DILocation(line: 2588, column: 43, scope: !9496)
!9499 = !DILocalVariable(name: "reg", arg: 2, scope: !9496, file: !3, line: 2588, type: !70)
!9500 = !DILocation(line: 2588, column: 61, scope: !9496)
!9501 = !DILocalVariable(name: "val", arg: 3, scope: !9496, file: !3, line: 2589, type: !1880)
!9502 = !DILocation(line: 2589, column: 19, scope: !9496)
!9503 = !DILocalVariable(name: "val_len", arg: 4, scope: !9496, file: !3, line: 2589, type: !167)
!9504 = !DILocation(line: 2589, column: 31, scope: !9496)
!9505 = !DILocalVariable(name: "ret", scope: !9496, file: !3, line: 2591, type: !104)
!9506 = !DILocation(line: 2591, column: 6, scope: !9496)
!9507 = !DILocation(line: 2593, column: 6, scope: !9508)
!9508 = distinct !DILexicalBlock(scope: !9496, file: !3, line: 2593, column: 6)
!9509 = !DILocation(line: 2593, column: 16, scope: !9508)
!9510 = !DILocation(line: 2593, column: 21, scope: !9508)
!9511 = !DILocation(line: 2593, column: 28, scope: !9508)
!9512 = !DILocation(line: 2593, column: 14, scope: !9508)
!9513 = !DILocation(line: 2593, column: 6, scope: !9496)
!9514 = !DILocation(line: 2594, column: 3, scope: !9508)
!9515 = !DILocation(line: 2595, column: 7, scope: !9516)
!9516 = distinct !DILexicalBlock(scope: !9496, file: !3, line: 2595, column: 6)
!9517 = !DILocation(line: 2595, column: 6, scope: !9496)
!9518 = !DILocation(line: 2596, column: 3, scope: !9516)
!9519 = !DILocation(line: 2598, column: 2, scope: !9496)
!9520 = !DILocation(line: 2598, column: 7, scope: !9496)
!9521 = !DILocation(line: 2598, column: 12, scope: !9496)
!9522 = !DILocation(line: 2598, column: 17, scope: !9496)
!9523 = !DILocation(line: 2600, column: 2, scope: !9496)
!9524 = !DILocation(line: 2600, column: 7, scope: !9496)
!9525 = !DILocation(line: 2600, column: 13, scope: !9496)
!9526 = !DILocation(line: 2602, column: 26, scope: !9496)
!9527 = !DILocation(line: 2602, column: 31, scope: !9496)
!9528 = !DILocation(line: 2602, column: 36, scope: !9496)
!9529 = !DILocation(line: 2602, column: 41, scope: !9496)
!9530 = !DILocation(line: 2602, column: 8, scope: !9496)
!9531 = !DILocation(line: 2602, column: 6, scope: !9496)
!9532 = !DILocation(line: 2604, column: 2, scope: !9496)
!9533 = !DILocation(line: 2604, column: 7, scope: !9496)
!9534 = !DILocation(line: 2604, column: 13, scope: !9496)
!9535 = !DILocation(line: 2606, column: 2, scope: !9496)
!9536 = !DILocation(line: 2606, column: 7, scope: !9496)
!9537 = !DILocation(line: 2606, column: 14, scope: !9496)
!9538 = !DILocation(line: 2606, column: 19, scope: !9496)
!9539 = !DILocation(line: 2608, column: 9, scope: !9496)
!9540 = !DILocation(line: 2608, column: 2, scope: !9496)
!9541 = !DILocation(line: 2609, column: 1, scope: !9496)
!9542 = distinct !DISubprogram(name: "regmap_read", scope: !3, file: !3, line: 2713, type: !3699, scopeLine: 2714, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9543 = !DILocalVariable(name: "map", arg: 1, scope: !9542, file: !3, line: 2713, type: !6)
!9544 = !DILocation(line: 2713, column: 32, scope: !9542)
!9545 = !DILocalVariable(name: "reg", arg: 2, scope: !9542, file: !3, line: 2713, type: !70)
!9546 = !DILocation(line: 2713, column: 50, scope: !9542)
!9547 = !DILocalVariable(name: "val", arg: 3, scope: !9542, file: !3, line: 2713, type: !2381)
!9548 = !DILocation(line: 2713, column: 69, scope: !9542)
!9549 = !DILocalVariable(name: "ret", scope: !9542, file: !3, line: 2715, type: !104)
!9550 = !DILocation(line: 2715, column: 6, scope: !9542)
!9551 = !DILocation(line: 2717, column: 7, scope: !9552)
!9552 = distinct !DILexicalBlock(scope: !9542, file: !3, line: 2717, column: 6)
!9553 = !DILocation(line: 2717, column: 6, scope: !9542)
!9554 = !DILocation(line: 2718, column: 3, scope: !9552)
!9555 = !DILocation(line: 2720, column: 2, scope: !9542)
!9556 = !DILocation(line: 2720, column: 7, scope: !9542)
!9557 = !DILocation(line: 2720, column: 12, scope: !9542)
!9558 = !DILocation(line: 2720, column: 17, scope: !9542)
!9559 = !DILocation(line: 2722, column: 21, scope: !9542)
!9560 = !DILocation(line: 2722, column: 26, scope: !9542)
!9561 = !DILocation(line: 2722, column: 31, scope: !9542)
!9562 = !DILocation(line: 2722, column: 8, scope: !9542)
!9563 = !DILocation(line: 2722, column: 6, scope: !9542)
!9564 = !DILocation(line: 2724, column: 2, scope: !9542)
!9565 = !DILocation(line: 2724, column: 7, scope: !9542)
!9566 = !DILocation(line: 2724, column: 14, scope: !9542)
!9567 = !DILocation(line: 2724, column: 19, scope: !9542)
!9568 = !DILocation(line: 2726, column: 9, scope: !9542)
!9569 = !DILocation(line: 2726, column: 2, scope: !9542)
!9570 = !DILocation(line: 2727, column: 1, scope: !9542)
!9571 = distinct !DISubprogram(name: "_regmap_read", scope: !3, file: !3, line: 2671, type: !3699, scopeLine: 2673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9572 = !DILocalVariable(name: "map", arg: 1, scope: !9571, file: !3, line: 2671, type: !6)
!9573 = !DILocation(line: 2671, column: 40, scope: !9571)
!9574 = !DILocalVariable(name: "reg", arg: 2, scope: !9571, file: !3, line: 2671, type: !70)
!9575 = !DILocation(line: 2671, column: 58, scope: !9571)
!9576 = !DILocalVariable(name: "val", arg: 3, scope: !9571, file: !3, line: 2672, type: !2381)
!9577 = !DILocation(line: 2672, column: 18, scope: !9571)
!9578 = !DILocalVariable(name: "ret", scope: !9571, file: !3, line: 2674, type: !104)
!9579 = !DILocation(line: 2674, column: 6, scope: !9571)
!9580 = !DILocalVariable(name: "context", scope: !9571, file: !3, line: 2675, type: !64)
!9581 = !DILocation(line: 2675, column: 8, scope: !9571)
!9582 = !DILocation(line: 2675, column: 42, scope: !9571)
!9583 = !DILocation(line: 2675, column: 18, scope: !9571)
!9584 = !DILocation(line: 2677, column: 7, scope: !9585)
!9585 = distinct !DILexicalBlock(scope: !9571, file: !3, line: 2677, column: 6)
!9586 = !DILocation(line: 2677, column: 12, scope: !9585)
!9587 = !DILocation(line: 2677, column: 6, scope: !9571)
!9588 = !DILocation(line: 2678, column: 23, scope: !9589)
!9589 = distinct !DILexicalBlock(scope: !9585, file: !3, line: 2677, column: 26)
!9590 = !DILocation(line: 2678, column: 28, scope: !9589)
!9591 = !DILocation(line: 2678, column: 33, scope: !9589)
!9592 = !DILocation(line: 2678, column: 9, scope: !9589)
!9593 = !DILocation(line: 2678, column: 7, scope: !9589)
!9594 = !DILocation(line: 2679, column: 7, scope: !9595)
!9595 = distinct !DILexicalBlock(scope: !9589, file: !3, line: 2679, column: 7)
!9596 = !DILocation(line: 2679, column: 11, scope: !9595)
!9597 = !DILocation(line: 2679, column: 7, scope: !9589)
!9598 = !DILocation(line: 2680, column: 4, scope: !9595)
!9599 = !DILocation(line: 2681, column: 2, scope: !9589)
!9600 = !DILocation(line: 2683, column: 6, scope: !9601)
!9601 = distinct !DILexicalBlock(scope: !9571, file: !3, line: 2683, column: 6)
!9602 = !DILocation(line: 2683, column: 11, scope: !9601)
!9603 = !DILocation(line: 2683, column: 6, scope: !9571)
!9604 = !DILocation(line: 2684, column: 3, scope: !9601)
!9605 = !DILocation(line: 2686, column: 23, scope: !9606)
!9606 = distinct !DILexicalBlock(scope: !9571, file: !3, line: 2686, column: 6)
!9607 = !DILocation(line: 2686, column: 28, scope: !9606)
!9608 = !DILocation(line: 2686, column: 7, scope: !9606)
!9609 = !DILocation(line: 2686, column: 6, scope: !9571)
!9610 = !DILocation(line: 2687, column: 3, scope: !9606)
!9611 = !DILocation(line: 2689, column: 8, scope: !9571)
!9612 = !DILocation(line: 2689, column: 13, scope: !9571)
!9613 = !DILocation(line: 2689, column: 22, scope: !9571)
!9614 = !DILocation(line: 2689, column: 31, scope: !9571)
!9615 = !DILocation(line: 2689, column: 36, scope: !9571)
!9616 = !DILocation(line: 2689, column: 6, scope: !9571)
!9617 = !DILocation(line: 2690, column: 6, scope: !9618)
!9618 = distinct !DILexicalBlock(scope: !9571, file: !3, line: 2690, column: 6)
!9619 = !DILocation(line: 2690, column: 10, scope: !9618)
!9620 = !DILocation(line: 2690, column: 6, scope: !9571)
!9621 = !DILocation(line: 2691, column: 25, scope: !9622)
!9622 = distinct !DILexicalBlock(scope: !9623, file: !3, line: 2691, column: 7)
!9623 = distinct !DILexicalBlock(scope: !9618, file: !3, line: 2690, column: 16)
!9624 = !DILocation(line: 2691, column: 7, scope: !9622)
!9625 = !DILocation(line: 2691, column: 7, scope: !9623)
!9626 = !DILocation(line: 2692, column: 4, scope: !9622)
!9627 = !DILocation(line: 2694, column: 25, scope: !9623)
!9628 = !DILocation(line: 2694, column: 30, scope: !9623)
!9629 = !DILocation(line: 2694, column: 36, scope: !9623)
!9630 = !DILocation(line: 2694, column: 35, scope: !9623)
!9631 = !DILocation(line: 2694, column: 3, scope: !9623)
!9632 = !DILocation(line: 2696, column: 8, scope: !9633)
!9633 = distinct !DILexicalBlock(scope: !9623, file: !3, line: 2696, column: 7)
!9634 = !DILocation(line: 2696, column: 13, scope: !9633)
!9635 = !DILocation(line: 2696, column: 7, scope: !9623)
!9636 = !DILocation(line: 2697, column: 19, scope: !9633)
!9637 = !DILocation(line: 2697, column: 24, scope: !9633)
!9638 = !DILocation(line: 2697, column: 30, scope: !9633)
!9639 = !DILocation(line: 2697, column: 29, scope: !9633)
!9640 = !DILocation(line: 2697, column: 4, scope: !9633)
!9641 = !DILocation(line: 2698, column: 2, scope: !9623)
!9642 = !DILocation(line: 2700, column: 9, scope: !9571)
!9643 = !DILocation(line: 2700, column: 2, scope: !9571)
!9644 = !DILocation(line: 2701, column: 1, scope: !9571)
!9645 = distinct !DISubprogram(name: "regmap_raw_read", scope: !3, file: !3, line: 2741, type: !9646, scopeLine: 2743, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9646 = !DISubroutineType(types: !9647)
!9647 = !{!104, !6, !70, !64, !167}
!9648 = !DILocalVariable(name: "map", arg: 1, scope: !9645, file: !3, line: 2741, type: !6)
!9649 = !DILocation(line: 2741, column: 36, scope: !9645)
!9650 = !DILocalVariable(name: "reg", arg: 2, scope: !9645, file: !3, line: 2741, type: !70)
!9651 = !DILocation(line: 2741, column: 54, scope: !9645)
!9652 = !DILocalVariable(name: "val", arg: 3, scope: !9645, file: !3, line: 2741, type: !64)
!9653 = !DILocation(line: 2741, column: 65, scope: !9645)
!9654 = !DILocalVariable(name: "val_len", arg: 4, scope: !9645, file: !3, line: 2742, type: !167)
!9655 = !DILocation(line: 2742, column: 14, scope: !9645)
!9656 = !DILocalVariable(name: "val_bytes", scope: !9645, file: !3, line: 2744, type: !167)
!9657 = !DILocation(line: 2744, column: 9, scope: !9645)
!9658 = !DILocation(line: 2744, column: 21, scope: !9645)
!9659 = !DILocation(line: 2744, column: 26, scope: !9645)
!9660 = !DILocation(line: 2744, column: 33, scope: !9645)
!9661 = !DILocalVariable(name: "val_count", scope: !9645, file: !3, line: 2745, type: !167)
!9662 = !DILocation(line: 2745, column: 9, scope: !9645)
!9663 = !DILocation(line: 2745, column: 21, scope: !9645)
!9664 = !DILocation(line: 2745, column: 31, scope: !9645)
!9665 = !DILocation(line: 2745, column: 29, scope: !9645)
!9666 = !DILocalVariable(name: "v", scope: !9645, file: !3, line: 2746, type: !70)
!9667 = !DILocation(line: 2746, column: 15, scope: !9645)
!9668 = !DILocalVariable(name: "ret", scope: !9645, file: !3, line: 2747, type: !104)
!9669 = !DILocation(line: 2747, column: 6, scope: !9645)
!9670 = !DILocalVariable(name: "i", scope: !9645, file: !3, line: 2747, type: !104)
!9671 = !DILocation(line: 2747, column: 11, scope: !9645)
!9672 = !DILocation(line: 2749, column: 7, scope: !9673)
!9673 = distinct !DILexicalBlock(scope: !9645, file: !3, line: 2749, column: 6)
!9674 = !DILocation(line: 2749, column: 12, scope: !9673)
!9675 = !DILocation(line: 2749, column: 6, scope: !9645)
!9676 = !DILocation(line: 2750, column: 3, scope: !9673)
!9677 = !DILocation(line: 2751, column: 6, scope: !9678)
!9678 = distinct !DILexicalBlock(scope: !9645, file: !3, line: 2751, column: 6)
!9679 = !DILocation(line: 2751, column: 16, scope: !9678)
!9680 = !DILocation(line: 2751, column: 21, scope: !9678)
!9681 = !DILocation(line: 2751, column: 28, scope: !9678)
!9682 = !DILocation(line: 2751, column: 14, scope: !9678)
!9683 = !DILocation(line: 2751, column: 6, scope: !9645)
!9684 = !DILocation(line: 2752, column: 3, scope: !9678)
!9685 = !DILocation(line: 2753, column: 7, scope: !9686)
!9686 = distinct !DILexicalBlock(scope: !9645, file: !3, line: 2753, column: 6)
!9687 = !DILocation(line: 2753, column: 6, scope: !9645)
!9688 = !DILocation(line: 2754, column: 3, scope: !9686)
!9689 = !DILocation(line: 2755, column: 6, scope: !9690)
!9690 = distinct !DILexicalBlock(scope: !9645, file: !3, line: 2755, column: 6)
!9691 = !DILocation(line: 2755, column: 16, scope: !9690)
!9692 = !DILocation(line: 2755, column: 6, scope: !9645)
!9693 = !DILocation(line: 2756, column: 3, scope: !9690)
!9694 = !DILocation(line: 2758, column: 2, scope: !9645)
!9695 = !DILocation(line: 2758, column: 7, scope: !9645)
!9696 = !DILocation(line: 2758, column: 12, scope: !9645)
!9697 = !DILocation(line: 2758, column: 17, scope: !9645)
!9698 = !DILocation(line: 2760, column: 28, scope: !9699)
!9699 = distinct !DILexicalBlock(scope: !9645, file: !3, line: 2760, column: 6)
!9700 = !DILocation(line: 2760, column: 33, scope: !9699)
!9701 = !DILocation(line: 2760, column: 38, scope: !9699)
!9702 = !DILocation(line: 2760, column: 6, scope: !9699)
!9703 = !DILocation(line: 2760, column: 49, scope: !9699)
!9704 = !DILocation(line: 2760, column: 52, scope: !9699)
!9705 = !DILocation(line: 2760, column: 57, scope: !9699)
!9706 = !DILocation(line: 2760, column: 70, scope: !9699)
!9707 = !DILocation(line: 2761, column: 6, scope: !9699)
!9708 = !DILocation(line: 2761, column: 11, scope: !9699)
!9709 = !DILocation(line: 2761, column: 22, scope: !9699)
!9710 = !DILocation(line: 2760, column: 6, scope: !9645)
!9711 = !DILocalVariable(name: "chunk_count", scope: !9712, file: !3, line: 2762, type: !167)
!9712 = distinct !DILexicalBlock(scope: !9699, file: !3, line: 2761, column: 40)
!9713 = !DILocation(line: 2762, column: 10, scope: !9712)
!9714 = !DILocalVariable(name: "chunk_bytes", scope: !9712, file: !3, line: 2762, type: !167)
!9715 = !DILocation(line: 2762, column: 23, scope: !9712)
!9716 = !DILocalVariable(name: "chunk_regs", scope: !9712, file: !3, line: 2763, type: !167)
!9717 = !DILocation(line: 2763, column: 10, scope: !9712)
!9718 = !DILocation(line: 2763, column: 23, scope: !9712)
!9719 = !DILocation(line: 2765, column: 8, scope: !9720)
!9720 = distinct !DILexicalBlock(scope: !9712, file: !3, line: 2765, column: 7)
!9721 = !DILocation(line: 2765, column: 13, scope: !9720)
!9722 = !DILocation(line: 2765, column: 18, scope: !9720)
!9723 = !DILocation(line: 2765, column: 7, scope: !9712)
!9724 = !DILocation(line: 2766, column: 8, scope: !9725)
!9725 = distinct !DILexicalBlock(scope: !9720, file: !3, line: 2765, column: 24)
!9726 = !DILocation(line: 2767, column: 4, scope: !9725)
!9727 = !DILocation(line: 2770, column: 7, scope: !9728)
!9728 = distinct !DILexicalBlock(scope: !9712, file: !3, line: 2770, column: 7)
!9729 = !DILocation(line: 2770, column: 12, scope: !9728)
!9730 = !DILocation(line: 2770, column: 7, scope: !9712)
!9731 = !DILocation(line: 2771, column: 15, scope: !9728)
!9732 = !DILocation(line: 2771, column: 4, scope: !9728)
!9733 = !DILocation(line: 2772, column: 12, scope: !9734)
!9734 = distinct !DILexicalBlock(scope: !9728, file: !3, line: 2772, column: 12)
!9735 = !DILocation(line: 2772, column: 17, scope: !9734)
!9736 = !DILocation(line: 2772, column: 30, scope: !9734)
!9737 = !DILocation(line: 2772, column: 33, scope: !9734)
!9738 = !DILocation(line: 2772, column: 43, scope: !9734)
!9739 = !DILocation(line: 2772, column: 48, scope: !9734)
!9740 = !DILocation(line: 2772, column: 41, scope: !9734)
!9741 = !DILocation(line: 2772, column: 12, scope: !9728)
!9742 = !DILocation(line: 2773, column: 17, scope: !9734)
!9743 = !DILocation(line: 2773, column: 22, scope: !9734)
!9744 = !DILocation(line: 2773, column: 37, scope: !9734)
!9745 = !DILocation(line: 2773, column: 35, scope: !9734)
!9746 = !DILocation(line: 2773, column: 15, scope: !9734)
!9747 = !DILocation(line: 2773, column: 4, scope: !9734)
!9748 = !DILocation(line: 2775, column: 17, scope: !9712)
!9749 = !DILocation(line: 2775, column: 29, scope: !9712)
!9750 = !DILocation(line: 2775, column: 27, scope: !9712)
!9751 = !DILocation(line: 2775, column: 15, scope: !9712)
!9752 = !DILocation(line: 2776, column: 17, scope: !9712)
!9753 = !DILocation(line: 2776, column: 30, scope: !9712)
!9754 = !DILocation(line: 2776, column: 28, scope: !9712)
!9755 = !DILocation(line: 2776, column: 15, scope: !9712)
!9756 = !DILocation(line: 2779, column: 10, scope: !9757)
!9757 = distinct !DILexicalBlock(scope: !9712, file: !3, line: 2779, column: 3)
!9758 = !DILocation(line: 2779, column: 8, scope: !9757)
!9759 = !DILocation(line: 2779, column: 15, scope: !9760)
!9760 = distinct !DILexicalBlock(scope: !9757, file: !3, line: 2779, column: 3)
!9761 = !DILocation(line: 2779, column: 19, scope: !9760)
!9762 = !DILocation(line: 2779, column: 17, scope: !9760)
!9763 = !DILocation(line: 2779, column: 3, scope: !9757)
!9764 = !DILocation(line: 2780, column: 27, scope: !9765)
!9765 = distinct !DILexicalBlock(scope: !9760, file: !3, line: 2779, column: 37)
!9766 = !DILocation(line: 2780, column: 32, scope: !9765)
!9767 = !DILocation(line: 2780, column: 37, scope: !9765)
!9768 = !DILocation(line: 2780, column: 42, scope: !9765)
!9769 = !DILocation(line: 2780, column: 10, scope: !9765)
!9770 = !DILocation(line: 2780, column: 8, scope: !9765)
!9771 = !DILocation(line: 2781, column: 8, scope: !9772)
!9772 = distinct !DILexicalBlock(scope: !9765, file: !3, line: 2781, column: 8)
!9773 = !DILocation(line: 2781, column: 12, scope: !9772)
!9774 = !DILocation(line: 2781, column: 8, scope: !9765)
!9775 = !DILocation(line: 2782, column: 5, scope: !9772)
!9776 = !DILocation(line: 2784, column: 29, scope: !9765)
!9777 = !DILocation(line: 2784, column: 34, scope: !9765)
!9778 = !DILocation(line: 2784, column: 11, scope: !9765)
!9779 = !DILocation(line: 2784, column: 8, scope: !9765)
!9780 = !DILocation(line: 2785, column: 11, scope: !9765)
!9781 = !DILocation(line: 2785, column: 8, scope: !9765)
!9782 = !DILocation(line: 2786, column: 15, scope: !9765)
!9783 = !DILocation(line: 2786, column: 12, scope: !9765)
!9784 = !DILocation(line: 2787, column: 3, scope: !9765)
!9785 = !DILocation(line: 2779, column: 33, scope: !9760)
!9786 = !DILocation(line: 2779, column: 3, scope: !9760)
!9787 = distinct !{!9787, !9763, !9788}
!9788 = !DILocation(line: 2787, column: 3, scope: !9757)
!9789 = !DILocation(line: 2790, column: 7, scope: !9790)
!9790 = distinct !DILexicalBlock(scope: !9712, file: !3, line: 2790, column: 7)
!9791 = !DILocation(line: 2790, column: 7, scope: !9712)
!9792 = !DILocation(line: 2791, column: 27, scope: !9793)
!9793 = distinct !DILexicalBlock(scope: !9790, file: !3, line: 2790, column: 16)
!9794 = !DILocation(line: 2791, column: 32, scope: !9793)
!9795 = !DILocation(line: 2791, column: 37, scope: !9793)
!9796 = !DILocation(line: 2791, column: 42, scope: !9793)
!9797 = !DILocation(line: 2791, column: 10, scope: !9793)
!9798 = !DILocation(line: 2791, column: 8, scope: !9793)
!9799 = !DILocation(line: 2792, column: 8, scope: !9800)
!9800 = distinct !DILexicalBlock(scope: !9793, file: !3, line: 2792, column: 8)
!9801 = !DILocation(line: 2792, column: 12, scope: !9800)
!9802 = !DILocation(line: 2792, column: 8, scope: !9793)
!9803 = !DILocation(line: 2793, column: 5, scope: !9800)
!9804 = !DILocation(line: 2794, column: 3, scope: !9793)
!9805 = !DILocation(line: 2795, column: 2, scope: !9712)
!9806 = !DILocation(line: 2799, column: 10, scope: !9807)
!9807 = distinct !DILexicalBlock(scope: !9808, file: !3, line: 2799, column: 3)
!9808 = distinct !DILexicalBlock(scope: !9699, file: !3, line: 2795, column: 9)
!9809 = !DILocation(line: 2799, column: 8, scope: !9807)
!9810 = !DILocation(line: 2799, column: 15, scope: !9811)
!9811 = distinct !DILexicalBlock(scope: !9807, file: !3, line: 2799, column: 3)
!9812 = !DILocation(line: 2799, column: 19, scope: !9811)
!9813 = !DILocation(line: 2799, column: 17, scope: !9811)
!9814 = !DILocation(line: 2799, column: 3, scope: !9807)
!9815 = !DILocation(line: 2800, column: 23, scope: !9816)
!9816 = distinct !DILexicalBlock(scope: !9811, file: !3, line: 2799, column: 35)
!9817 = !DILocation(line: 2800, column: 28, scope: !9816)
!9818 = !DILocation(line: 2800, column: 52, scope: !9816)
!9819 = !DILocation(line: 2800, column: 57, scope: !9816)
!9820 = !DILocation(line: 2800, column: 34, scope: !9816)
!9821 = !DILocation(line: 2800, column: 32, scope: !9816)
!9822 = !DILocation(line: 2800, column: 10, scope: !9816)
!9823 = !DILocation(line: 2800, column: 8, scope: !9816)
!9824 = !DILocation(line: 2802, column: 8, scope: !9825)
!9825 = distinct !DILexicalBlock(scope: !9816, file: !3, line: 2802, column: 8)
!9826 = !DILocation(line: 2802, column: 12, scope: !9825)
!9827 = !DILocation(line: 2802, column: 8, scope: !9816)
!9828 = !DILocation(line: 2803, column: 5, scope: !9825)
!9829 = !DILocation(line: 2805, column: 4, scope: !9816)
!9830 = !DILocation(line: 2805, column: 9, scope: !9816)
!9831 = !DILocation(line: 2805, column: 16, scope: !9816)
!9832 = !DILocation(line: 2805, column: 27, scope: !9816)
!9833 = !DILocation(line: 2805, column: 34, scope: !9816)
!9834 = !DILocation(line: 2805, column: 38, scope: !9816)
!9835 = !DILocation(line: 2805, column: 36, scope: !9816)
!9836 = !DILocation(line: 2805, column: 31, scope: !9816)
!9837 = !DILocation(line: 2805, column: 50, scope: !9816)
!9838 = !DILocation(line: 2806, column: 3, scope: !9816)
!9839 = !DILocation(line: 2799, column: 31, scope: !9811)
!9840 = !DILocation(line: 2799, column: 3, scope: !9811)
!9841 = distinct !{!9841, !9814, !9842}
!9842 = !DILocation(line: 2806, column: 3, scope: !9807)
!9843 = !DILocation(line: 2761, column: 25, scope: !9699)
!9844 = !DILabel(scope: !9645, name: "out", file: !3, line: 2809)
!9845 = !DILocation(line: 2809, column: 2, scope: !9645)
!9846 = !DILocation(line: 2810, column: 2, scope: !9645)
!9847 = !DILocation(line: 2810, column: 7, scope: !9645)
!9848 = !DILocation(line: 2810, column: 14, scope: !9645)
!9849 = !DILocation(line: 2810, column: 19, scope: !9645)
!9850 = !DILocation(line: 2812, column: 9, scope: !9645)
!9851 = !DILocation(line: 2812, column: 2, scope: !9645)
!9852 = !DILocation(line: 2813, column: 1, scope: !9645)
!9853 = distinct !DISubprogram(name: "regmap_volatile_range", scope: !3, file: !3, line: 200, type: !9854, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9854 = !DISubroutineType(types: !9855)
!9855 = !{!331, !6, !70, !167}
!9856 = !DILocalVariable(name: "map", arg: 1, scope: !9853, file: !3, line: 200, type: !6)
!9857 = !DILocation(line: 200, column: 50, scope: !9853)
!9858 = !DILocalVariable(name: "reg", arg: 2, scope: !9853, file: !3, line: 200, type: !70)
!9859 = !DILocation(line: 200, column: 68, scope: !9853)
!9860 = !DILocalVariable(name: "num", arg: 3, scope: !9853, file: !3, line: 201, type: !167)
!9861 = !DILocation(line: 201, column: 9, scope: !9853)
!9862 = !DILocalVariable(name: "i", scope: !9853, file: !3, line: 203, type: !70)
!9863 = !DILocation(line: 203, column: 15, scope: !9853)
!9864 = !DILocation(line: 205, column: 9, scope: !9865)
!9865 = distinct !DILexicalBlock(scope: !9853, file: !3, line: 205, column: 2)
!9866 = !DILocation(line: 205, column: 7, scope: !9865)
!9867 = !DILocation(line: 205, column: 14, scope: !9868)
!9868 = distinct !DILexicalBlock(scope: !9865, file: !3, line: 205, column: 2)
!9869 = !DILocation(line: 205, column: 18, scope: !9868)
!9870 = !DILocation(line: 205, column: 16, scope: !9868)
!9871 = !DILocation(line: 205, column: 2, scope: !9865)
!9872 = !DILocation(line: 206, column: 24, scope: !9873)
!9873 = distinct !DILexicalBlock(scope: !9868, file: !3, line: 206, column: 7)
!9874 = !DILocation(line: 206, column: 29, scope: !9873)
!9875 = !DILocation(line: 206, column: 53, scope: !9873)
!9876 = !DILocation(line: 206, column: 58, scope: !9873)
!9877 = !DILocation(line: 206, column: 35, scope: !9873)
!9878 = !DILocation(line: 206, column: 33, scope: !9873)
!9879 = !DILocation(line: 206, column: 8, scope: !9873)
!9880 = !DILocation(line: 206, column: 7, scope: !9868)
!9881 = !DILocation(line: 207, column: 4, scope: !9873)
!9882 = !DILocation(line: 206, column: 60, scope: !9873)
!9883 = !DILocation(line: 205, column: 24, scope: !9868)
!9884 = !DILocation(line: 205, column: 2, scope: !9868)
!9885 = distinct !{!9885, !9871, !9886}
!9886 = !DILocation(line: 207, column: 11, scope: !9865)
!9887 = !DILocation(line: 209, column: 2, scope: !9853)
!9888 = !DILocation(line: 210, column: 1, scope: !9853)
!9889 = distinct !DISubprogram(name: "_regmap_raw_read", scope: !3, file: !3, line: 2612, type: !9890, scopeLine: 2614, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!9890 = !DISubroutineType(types: !9891)
!9891 = !{!104, !6, !70, !64, !70, !331}
!9892 = !DILocalVariable(name: "map", arg: 1, scope: !9889, file: !3, line: 2612, type: !6)
!9893 = !DILocation(line: 2612, column: 44, scope: !9889)
!9894 = !DILocalVariable(name: "reg", arg: 2, scope: !9889, file: !3, line: 2612, type: !70)
!9895 = !DILocation(line: 2612, column: 62, scope: !9889)
!9896 = !DILocalVariable(name: "val", arg: 3, scope: !9889, file: !3, line: 2612, type: !64)
!9897 = !DILocation(line: 2612, column: 73, scope: !9889)
!9898 = !DILocalVariable(name: "val_len", arg: 4, scope: !9889, file: !3, line: 2613, type: !70)
!9899 = !DILocation(line: 2613, column: 21, scope: !9889)
!9900 = !DILocalVariable(name: "noinc", arg: 5, scope: !9889, file: !3, line: 2613, type: !331)
!9901 = !DILocation(line: 2613, column: 35, scope: !9889)
!9902 = !DILocalVariable(name: "range", scope: !9889, file: !3, line: 2615, type: !3844)
!9903 = !DILocation(line: 2615, column: 28, scope: !9889)
!9904 = !DILocalVariable(name: "ret", scope: !9889, file: !3, line: 2616, type: !104)
!9905 = !DILocation(line: 2616, column: 6, scope: !9889)
!9906 = !DILocalVariable(name: "__ret_warn_on", scope: !9907, file: !3, line: 2618, type: !104)
!9907 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 2618, column: 2)
!9908 = !DILocation(line: 2618, column: 2, scope: !9907)
!9909 = !DILocation(line: 2618, column: 2, scope: !9910)
!9910 = distinct !DILexicalBlock(scope: !9907, file: !3, line: 2618, column: 2)
!9911 = !DILocation(line: 2618, column: 2, scope: !9912)
!9912 = distinct !DILexicalBlock(scope: !9910, file: !3, line: 2618, column: 2)
!9913 = !DILocation(line: 2618, column: 2, scope: !9914)
!9914 = distinct !DILexicalBlock(scope: !9912, file: !3, line: 2618, column: 2)
!9915 = !DILocation(line: 2618, column: 2, scope: !9916)
!9916 = distinct !DILexicalBlock(scope: !9912, file: !3, line: 2618, column: 2)
!9917 = !{i32 -2142544545, i32 -2142544516, i32 -2142544470, i32 -2142544412, i32 -2142544358, i32 -2142544304, i32 -2142544249, i32 -2142544218}
!9918 = !DILocation(line: 2618, column: 2, scope: !9919)
!9919 = distinct !DILexicalBlock(scope: !9912, file: !3, line: 2618, column: 2)
!9920 = !{i32 -2142539746, i32 -2142539739, i32 -2142539687, i32 -2142539656, i32 -2142539626}
!9921 = !DILocation(line: 2618, column: 2, scope: !9922)
!9922 = distinct !DILexicalBlock(scope: !9912, file: !3, line: 2618, column: 2)
!9923 = !DILocation(line: 2620, column: 7, scope: !9924)
!9924 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 2620, column: 6)
!9925 = !DILocation(line: 2620, column: 12, scope: !9924)
!9926 = !DILocation(line: 2620, column: 16, scope: !9924)
!9927 = !DILocation(line: 2620, column: 20, scope: !9924)
!9928 = !DILocation(line: 2620, column: 25, scope: !9924)
!9929 = !DILocation(line: 2620, column: 30, scope: !9924)
!9930 = !DILocation(line: 2620, column: 6, scope: !9889)
!9931 = !DILocation(line: 2621, column: 3, scope: !9924)
!9932 = !DILocation(line: 2623, column: 31, scope: !9889)
!9933 = !DILocation(line: 2623, column: 36, scope: !9889)
!9934 = !DILocation(line: 2623, column: 10, scope: !9889)
!9935 = !DILocation(line: 2623, column: 8, scope: !9889)
!9936 = !DILocation(line: 2624, column: 6, scope: !9937)
!9937 = distinct !DILexicalBlock(scope: !9889, file: !3, line: 2624, column: 6)
!9938 = !DILocation(line: 2624, column: 6, scope: !9889)
!9939 = !DILocation(line: 2625, column: 29, scope: !9940)
!9940 = distinct !DILexicalBlock(scope: !9937, file: !3, line: 2624, column: 13)
!9941 = !DILocation(line: 2625, column: 40, scope: !9940)
!9942 = !DILocation(line: 2626, column: 8, scope: !9940)
!9943 = !DILocation(line: 2626, column: 20, scope: !9940)
!9944 = !DILocation(line: 2626, column: 30, scope: !9940)
!9945 = !DILocation(line: 2626, column: 35, scope: !9940)
!9946 = !DILocation(line: 2626, column: 42, scope: !9940)
!9947 = !DILocation(line: 2626, column: 28, scope: !9940)
!9948 = !DILocation(line: 2625, column: 9, scope: !9940)
!9949 = !DILocation(line: 2625, column: 7, scope: !9940)
!9950 = !DILocation(line: 2627, column: 7, scope: !9951)
!9951 = distinct !DILexicalBlock(scope: !9940, file: !3, line: 2627, column: 7)
!9952 = !DILocation(line: 2627, column: 11, scope: !9951)
!9953 = !DILocation(line: 2627, column: 7, scope: !9940)
!9954 = !DILocation(line: 2628, column: 11, scope: !9951)
!9955 = !DILocation(line: 2628, column: 4, scope: !9951)
!9956 = !DILocation(line: 2629, column: 2, scope: !9940)
!9957 = !DILocation(line: 2631, column: 2, scope: !9889)
!9958 = !DILocation(line: 2631, column: 7, scope: !9889)
!9959 = !DILocation(line: 2631, column: 14, scope: !9889)
!9960 = !DILocation(line: 2631, column: 25, scope: !9889)
!9961 = !DILocation(line: 2631, column: 30, scope: !9889)
!9962 = !DILocation(line: 2631, column: 40, scope: !9889)
!9963 = !DILocation(line: 2631, column: 45, scope: !9889)
!9964 = !DILocation(line: 2631, column: 50, scope: !9889)
!9965 = !DILocation(line: 2632, column: 32, scope: !9889)
!9966 = !DILocation(line: 2632, column: 37, scope: !9889)
!9967 = !DILocation(line: 2632, column: 42, scope: !9889)
!9968 = !DILocation(line: 2632, column: 49, scope: !9889)
!9969 = !DILocation(line: 2633, column: 11, scope: !9889)
!9970 = !DILocation(line: 2633, column: 16, scope: !9889)
!9971 = !DILocation(line: 2632, column: 2, scope: !9889)
!9972 = !DILocation(line: 2634, column: 29, scope: !9889)
!9973 = !DILocation(line: 2634, column: 34, scope: !9889)
!9974 = !DILocation(line: 2634, column: 39, scope: !9889)
!9975 = !DILocation(line: 2634, column: 49, scope: !9889)
!9976 = !DILocation(line: 2634, column: 54, scope: !9889)
!9977 = !DILocation(line: 2634, column: 61, scope: !9889)
!9978 = !DILocation(line: 2634, column: 47, scope: !9889)
!9979 = !DILocation(line: 2634, column: 2, scope: !9889)
!9980 = !DILocation(line: 2636, column: 8, scope: !9889)
!9981 = !DILocation(line: 2636, column: 13, scope: !9889)
!9982 = !DILocation(line: 2636, column: 18, scope: !9889)
!9983 = !DILocation(line: 2636, column: 23, scope: !9889)
!9984 = !DILocation(line: 2636, column: 28, scope: !9889)
!9985 = !DILocation(line: 2636, column: 41, scope: !9889)
!9986 = !DILocation(line: 2636, column: 46, scope: !9889)
!9987 = !DILocation(line: 2637, column: 9, scope: !9889)
!9988 = !DILocation(line: 2637, column: 14, scope: !9889)
!9989 = !DILocation(line: 2637, column: 21, scope: !9889)
!9990 = !DILocation(line: 2637, column: 33, scope: !9889)
!9991 = !DILocation(line: 2637, column: 38, scope: !9889)
!9992 = !DILocation(line: 2637, column: 45, scope: !9889)
!9993 = !DILocation(line: 2637, column: 31, scope: !9889)
!9994 = !DILocation(line: 2638, column: 9, scope: !9889)
!9995 = !DILocation(line: 2638, column: 14, scope: !9889)
!9996 = !DILocation(line: 2636, column: 6, scope: !9889)
!9997 = !DILocation(line: 2640, column: 28, scope: !9889)
!9998 = !DILocation(line: 2640, column: 33, scope: !9889)
!9999 = !DILocation(line: 2640, column: 38, scope: !9889)
!10000 = !DILocation(line: 2640, column: 48, scope: !9889)
!10001 = !DILocation(line: 2640, column: 53, scope: !9889)
!10002 = !DILocation(line: 2640, column: 60, scope: !9889)
!10003 = !DILocation(line: 2640, column: 46, scope: !9889)
!10004 = !DILocation(line: 2640, column: 2, scope: !9889)
!10005 = !DILocation(line: 2642, column: 9, scope: !9889)
!10006 = !DILocation(line: 2642, column: 2, scope: !9889)
!10007 = !DILocation(line: 2643, column: 1, scope: !9889)
!10008 = distinct !DISubprogram(name: "regmap_noinc_read", scope: !3, file: !3, line: 2837, type: !9646, scopeLine: 2839, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10009 = !DILocalVariable(name: "map", arg: 1, scope: !10008, file: !3, line: 2837, type: !6)
!10010 = !DILocation(line: 2837, column: 38, scope: !10008)
!10011 = !DILocalVariable(name: "reg", arg: 2, scope: !10008, file: !3, line: 2837, type: !70)
!10012 = !DILocation(line: 2837, column: 56, scope: !10008)
!10013 = !DILocalVariable(name: "val", arg: 3, scope: !10008, file: !3, line: 2838, type: !64)
!10014 = !DILocation(line: 2838, column: 15, scope: !10008)
!10015 = !DILocalVariable(name: "val_len", arg: 4, scope: !10008, file: !3, line: 2838, type: !167)
!10016 = !DILocation(line: 2838, column: 27, scope: !10008)
!10017 = !DILocalVariable(name: "read_len", scope: !10008, file: !3, line: 2840, type: !167)
!10018 = !DILocation(line: 2840, column: 9, scope: !10008)
!10019 = !DILocalVariable(name: "ret", scope: !10008, file: !3, line: 2841, type: !104)
!10020 = !DILocation(line: 2841, column: 6, scope: !10008)
!10021 = !DILocation(line: 2843, column: 7, scope: !10022)
!10022 = distinct !DILexicalBlock(scope: !10008, file: !3, line: 2843, column: 6)
!10023 = !DILocation(line: 2843, column: 12, scope: !10022)
!10024 = !DILocation(line: 2843, column: 6, scope: !10008)
!10025 = !DILocation(line: 2844, column: 3, scope: !10022)
!10026 = !DILocation(line: 2845, column: 7, scope: !10027)
!10027 = distinct !DILexicalBlock(scope: !10008, file: !3, line: 2845, column: 6)
!10028 = !DILocation(line: 2845, column: 12, scope: !10027)
!10029 = !DILocation(line: 2845, column: 17, scope: !10027)
!10030 = !DILocation(line: 2845, column: 6, scope: !10008)
!10031 = !DILocation(line: 2846, column: 3, scope: !10027)
!10032 = !DILocation(line: 2847, column: 6, scope: !10033)
!10033 = distinct !DILexicalBlock(scope: !10008, file: !3, line: 2847, column: 6)
!10034 = !DILocation(line: 2847, column: 16, scope: !10033)
!10035 = !DILocation(line: 2847, column: 21, scope: !10033)
!10036 = !DILocation(line: 2847, column: 28, scope: !10033)
!10037 = !DILocation(line: 2847, column: 14, scope: !10033)
!10038 = !DILocation(line: 2847, column: 6, scope: !10008)
!10039 = !DILocation(line: 2848, column: 3, scope: !10033)
!10040 = !DILocation(line: 2849, column: 7, scope: !10041)
!10041 = distinct !DILexicalBlock(scope: !10008, file: !3, line: 2849, column: 6)
!10042 = !DILocation(line: 2849, column: 6, scope: !10008)
!10043 = !DILocation(line: 2850, column: 3, scope: !10041)
!10044 = !DILocation(line: 2851, column: 6, scope: !10045)
!10045 = distinct !DILexicalBlock(scope: !10008, file: !3, line: 2851, column: 6)
!10046 = !DILocation(line: 2851, column: 14, scope: !10045)
!10047 = !DILocation(line: 2851, column: 6, scope: !10008)
!10048 = !DILocation(line: 2852, column: 3, scope: !10045)
!10049 = !DILocation(line: 2854, column: 2, scope: !10008)
!10050 = !DILocation(line: 2854, column: 7, scope: !10008)
!10051 = !DILocation(line: 2854, column: 12, scope: !10008)
!10052 = !DILocation(line: 2854, column: 17, scope: !10008)
!10053 = !DILocation(line: 2856, column: 23, scope: !10054)
!10054 = distinct !DILexicalBlock(scope: !10008, file: !3, line: 2856, column: 6)
!10055 = !DILocation(line: 2856, column: 28, scope: !10054)
!10056 = !DILocation(line: 2856, column: 7, scope: !10054)
!10057 = !DILocation(line: 2856, column: 33, scope: !10054)
!10058 = !DILocation(line: 2856, column: 59, scope: !10054)
!10059 = !DILocation(line: 2856, column: 64, scope: !10054)
!10060 = !DILocation(line: 2856, column: 37, scope: !10054)
!10061 = !DILocation(line: 2856, column: 6, scope: !10008)
!10062 = !DILocation(line: 2857, column: 7, scope: !10063)
!10063 = distinct !DILexicalBlock(scope: !10054, file: !3, line: 2856, column: 70)
!10064 = !DILocation(line: 2858, column: 3, scope: !10063)
!10065 = !DILocation(line: 2861, column: 2, scope: !10008)
!10066 = !DILocation(line: 2861, column: 9, scope: !10008)
!10067 = !DILocation(line: 2862, column: 7, scope: !10068)
!10068 = distinct !DILexicalBlock(scope: !10069, file: !3, line: 2862, column: 7)
!10069 = distinct !DILexicalBlock(scope: !10008, file: !3, line: 2861, column: 18)
!10070 = !DILocation(line: 2862, column: 12, scope: !10068)
!10071 = !DILocation(line: 2862, column: 25, scope: !10068)
!10072 = !DILocation(line: 2862, column: 28, scope: !10068)
!10073 = !DILocation(line: 2862, column: 33, scope: !10068)
!10074 = !DILocation(line: 2862, column: 48, scope: !10068)
!10075 = !DILocation(line: 2862, column: 46, scope: !10068)
!10076 = !DILocation(line: 2862, column: 7, scope: !10069)
!10077 = !DILocation(line: 2863, column: 15, scope: !10068)
!10078 = !DILocation(line: 2863, column: 20, scope: !10068)
!10079 = !DILocation(line: 2863, column: 13, scope: !10068)
!10080 = !DILocation(line: 2863, column: 4, scope: !10068)
!10081 = !DILocation(line: 2865, column: 15, scope: !10068)
!10082 = !DILocation(line: 2865, column: 13, scope: !10068)
!10083 = !DILocation(line: 2866, column: 26, scope: !10069)
!10084 = !DILocation(line: 2866, column: 31, scope: !10069)
!10085 = !DILocation(line: 2866, column: 36, scope: !10069)
!10086 = !DILocation(line: 2866, column: 41, scope: !10069)
!10087 = !DILocation(line: 2866, column: 9, scope: !10069)
!10088 = !DILocation(line: 2866, column: 7, scope: !10069)
!10089 = !DILocation(line: 2867, column: 7, scope: !10090)
!10090 = distinct !DILexicalBlock(scope: !10069, file: !3, line: 2867, column: 7)
!10091 = !DILocation(line: 2867, column: 7, scope: !10069)
!10092 = !DILocation(line: 2868, column: 4, scope: !10090)
!10093 = !DILocation(line: 2869, column: 16, scope: !10069)
!10094 = !DILocation(line: 2869, column: 23, scope: !10069)
!10095 = !DILocation(line: 2869, column: 21, scope: !10069)
!10096 = !DILocation(line: 2869, column: 7, scope: !10069)
!10097 = !DILocation(line: 2870, column: 14, scope: !10069)
!10098 = !DILocation(line: 2870, column: 11, scope: !10069)
!10099 = distinct !{!10099, !10065, !10100}
!10100 = !DILocation(line: 2871, column: 2, scope: !10008)
!10101 = !DILabel(scope: !10008, name: "out_unlock", file: !3, line: 2873)
!10102 = !DILocation(line: 2873, column: 1, scope: !10008)
!10103 = !DILocation(line: 2874, column: 2, scope: !10008)
!10104 = !DILocation(line: 2874, column: 7, scope: !10008)
!10105 = !DILocation(line: 2874, column: 14, scope: !10008)
!10106 = !DILocation(line: 2874, column: 19, scope: !10008)
!10107 = !DILocation(line: 2875, column: 9, scope: !10008)
!10108 = !DILocation(line: 2875, column: 2, scope: !10008)
!10109 = !DILocation(line: 2876, column: 1, scope: !10008)
!10110 = distinct !DISubprogram(name: "regmap_field_read", scope: !3, file: !3, line: 2888, type: !10111, scopeLine: 2889, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10111 = !DISubroutineType(types: !10112)
!10112 = !{!104, !7188, !2381}
!10113 = !DILocalVariable(name: "field", arg: 1, scope: !10110, file: !3, line: 2888, type: !7188)
!10114 = !DILocation(line: 2888, column: 44, scope: !10110)
!10115 = !DILocalVariable(name: "val", arg: 2, scope: !10110, file: !3, line: 2888, type: !2381)
!10116 = !DILocation(line: 2888, column: 65, scope: !10110)
!10117 = !DILocalVariable(name: "ret", scope: !10110, file: !3, line: 2890, type: !104)
!10118 = !DILocation(line: 2890, column: 6, scope: !10110)
!10119 = !DILocalVariable(name: "reg_val", scope: !10110, file: !3, line: 2891, type: !70)
!10120 = !DILocation(line: 2891, column: 15, scope: !10110)
!10121 = !DILocation(line: 2892, column: 20, scope: !10110)
!10122 = !DILocation(line: 2892, column: 27, scope: !10110)
!10123 = !DILocation(line: 2892, column: 35, scope: !10110)
!10124 = !DILocation(line: 2892, column: 42, scope: !10110)
!10125 = !DILocation(line: 2892, column: 8, scope: !10110)
!10126 = !DILocation(line: 2892, column: 6, scope: !10110)
!10127 = !DILocation(line: 2893, column: 6, scope: !10128)
!10128 = distinct !DILexicalBlock(scope: !10110, file: !3, line: 2893, column: 6)
!10129 = !DILocation(line: 2893, column: 10, scope: !10128)
!10130 = !DILocation(line: 2893, column: 6, scope: !10110)
!10131 = !DILocation(line: 2894, column: 10, scope: !10128)
!10132 = !DILocation(line: 2894, column: 3, scope: !10128)
!10133 = !DILocation(line: 2896, column: 13, scope: !10110)
!10134 = !DILocation(line: 2896, column: 20, scope: !10110)
!10135 = !DILocation(line: 2896, column: 10, scope: !10110)
!10136 = !DILocation(line: 2897, column: 14, scope: !10110)
!10137 = !DILocation(line: 2897, column: 21, scope: !10110)
!10138 = !DILocation(line: 2897, column: 10, scope: !10110)
!10139 = !DILocation(line: 2898, column: 9, scope: !10110)
!10140 = !DILocation(line: 2898, column: 3, scope: !10110)
!10141 = !DILocation(line: 2898, column: 7, scope: !10110)
!10142 = !DILocation(line: 2900, column: 9, scope: !10110)
!10143 = !DILocation(line: 2900, column: 2, scope: !10110)
!10144 = !DILocation(line: 2901, column: 1, scope: !10110)
!10145 = distinct !DISubprogram(name: "regmap_fields_read", scope: !3, file: !3, line: 2914, type: !10146, scopeLine: 2916, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10146 = !DISubroutineType(types: !10147)
!10147 = !{!104, !7188, !70, !2381}
!10148 = !DILocalVariable(name: "field", arg: 1, scope: !10145, file: !3, line: 2914, type: !7188)
!10149 = !DILocation(line: 2914, column: 45, scope: !10145)
!10150 = !DILocalVariable(name: "id", arg: 2, scope: !10145, file: !3, line: 2914, type: !70)
!10151 = !DILocation(line: 2914, column: 65, scope: !10145)
!10152 = !DILocalVariable(name: "val", arg: 3, scope: !10145, file: !3, line: 2915, type: !2381)
!10153 = !DILocation(line: 2915, column: 24, scope: !10145)
!10154 = !DILocalVariable(name: "ret", scope: !10145, file: !3, line: 2917, type: !104)
!10155 = !DILocation(line: 2917, column: 6, scope: !10145)
!10156 = !DILocalVariable(name: "reg_val", scope: !10145, file: !3, line: 2918, type: !70)
!10157 = !DILocation(line: 2918, column: 15, scope: !10145)
!10158 = !DILocation(line: 2920, column: 6, scope: !10159)
!10159 = distinct !DILexicalBlock(scope: !10145, file: !3, line: 2920, column: 6)
!10160 = !DILocation(line: 2920, column: 12, scope: !10159)
!10161 = !DILocation(line: 2920, column: 19, scope: !10159)
!10162 = !DILocation(line: 2920, column: 9, scope: !10159)
!10163 = !DILocation(line: 2920, column: 6, scope: !10145)
!10164 = !DILocation(line: 2921, column: 3, scope: !10159)
!10165 = !DILocation(line: 2923, column: 20, scope: !10145)
!10166 = !DILocation(line: 2923, column: 27, scope: !10145)
!10167 = !DILocation(line: 2924, column: 6, scope: !10145)
!10168 = !DILocation(line: 2924, column: 13, scope: !10145)
!10169 = !DILocation(line: 2924, column: 20, scope: !10145)
!10170 = !DILocation(line: 2924, column: 27, scope: !10145)
!10171 = !DILocation(line: 2924, column: 39, scope: !10145)
!10172 = !DILocation(line: 2924, column: 37, scope: !10145)
!10173 = !DILocation(line: 2924, column: 17, scope: !10145)
!10174 = !DILocation(line: 2923, column: 8, scope: !10145)
!10175 = !DILocation(line: 2923, column: 6, scope: !10145)
!10176 = !DILocation(line: 2926, column: 6, scope: !10177)
!10177 = distinct !DILexicalBlock(scope: !10145, file: !3, line: 2926, column: 6)
!10178 = !DILocation(line: 2926, column: 10, scope: !10177)
!10179 = !DILocation(line: 2926, column: 6, scope: !10145)
!10180 = !DILocation(line: 2927, column: 10, scope: !10177)
!10181 = !DILocation(line: 2927, column: 3, scope: !10177)
!10182 = !DILocation(line: 2929, column: 13, scope: !10145)
!10183 = !DILocation(line: 2929, column: 20, scope: !10145)
!10184 = !DILocation(line: 2929, column: 10, scope: !10145)
!10185 = !DILocation(line: 2930, column: 14, scope: !10145)
!10186 = !DILocation(line: 2930, column: 21, scope: !10145)
!10187 = !DILocation(line: 2930, column: 10, scope: !10145)
!10188 = !DILocation(line: 2931, column: 9, scope: !10145)
!10189 = !DILocation(line: 2931, column: 3, scope: !10145)
!10190 = !DILocation(line: 2931, column: 7, scope: !10145)
!10191 = !DILocation(line: 2933, column: 9, scope: !10145)
!10192 = !DILocation(line: 2933, column: 2, scope: !10145)
!10193 = !DILocation(line: 2934, column: 1, scope: !10145)
!10194 = distinct !DISubprogram(name: "regmap_bulk_read", scope: !3, file: !3, line: 2948, type: !9646, scopeLine: 2950, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10195 = !DILocalVariable(name: "map", arg: 1, scope: !10194, file: !3, line: 2948, type: !6)
!10196 = !DILocation(line: 2948, column: 37, scope: !10194)
!10197 = !DILocalVariable(name: "reg", arg: 2, scope: !10194, file: !3, line: 2948, type: !70)
!10198 = !DILocation(line: 2948, column: 55, scope: !10194)
!10199 = !DILocalVariable(name: "val", arg: 3, scope: !10194, file: !3, line: 2948, type: !64)
!10200 = !DILocation(line: 2948, column: 66, scope: !10194)
!10201 = !DILocalVariable(name: "val_count", arg: 4, scope: !10194, file: !3, line: 2949, type: !167)
!10202 = !DILocation(line: 2949, column: 15, scope: !10194)
!10203 = !DILocalVariable(name: "ret", scope: !10194, file: !3, line: 2951, type: !104)
!10204 = !DILocation(line: 2951, column: 6, scope: !10194)
!10205 = !DILocalVariable(name: "i", scope: !10194, file: !3, line: 2951, type: !104)
!10206 = !DILocation(line: 2951, column: 11, scope: !10194)
!10207 = !DILocalVariable(name: "val_bytes", scope: !10194, file: !3, line: 2952, type: !167)
!10208 = !DILocation(line: 2952, column: 9, scope: !10194)
!10209 = !DILocation(line: 2952, column: 21, scope: !10194)
!10210 = !DILocation(line: 2952, column: 26, scope: !10194)
!10211 = !DILocation(line: 2952, column: 33, scope: !10194)
!10212 = !DILocalVariable(name: "vol", scope: !10194, file: !3, line: 2953, type: !331)
!10213 = !DILocation(line: 2953, column: 7, scope: !10194)
!10214 = !DILocation(line: 2953, column: 35, scope: !10194)
!10215 = !DILocation(line: 2953, column: 40, scope: !10194)
!10216 = !DILocation(line: 2953, column: 45, scope: !10194)
!10217 = !DILocation(line: 2953, column: 13, scope: !10194)
!10218 = !DILocation(line: 2955, column: 7, scope: !10219)
!10219 = distinct !DILexicalBlock(scope: !10194, file: !3, line: 2955, column: 6)
!10220 = !DILocation(line: 2955, column: 6, scope: !10194)
!10221 = !DILocation(line: 2956, column: 3, scope: !10219)
!10222 = !DILocation(line: 2957, column: 6, scope: !10223)
!10223 = distinct !DILexicalBlock(scope: !10194, file: !3, line: 2957, column: 6)
!10224 = !DILocation(line: 2957, column: 16, scope: !10223)
!10225 = !DILocation(line: 2957, column: 6, scope: !10194)
!10226 = !DILocation(line: 2958, column: 3, scope: !10223)
!10227 = !DILocation(line: 2960, column: 6, scope: !10228)
!10228 = distinct !DILexicalBlock(scope: !10194, file: !3, line: 2960, column: 6)
!10229 = !DILocation(line: 2960, column: 11, scope: !10228)
!10230 = !DILocation(line: 2960, column: 15, scope: !10228)
!10231 = !DILocation(line: 2960, column: 18, scope: !10228)
!10232 = !DILocation(line: 2960, column: 23, scope: !10228)
!10233 = !DILocation(line: 2960, column: 30, scope: !10228)
!10234 = !DILocation(line: 2960, column: 44, scope: !10228)
!10235 = !DILocation(line: 2960, column: 48, scope: !10228)
!10236 = !DILocation(line: 2960, column: 52, scope: !10228)
!10237 = !DILocation(line: 2960, column: 55, scope: !10228)
!10238 = !DILocation(line: 2960, column: 60, scope: !10228)
!10239 = !DILocation(line: 2960, column: 71, scope: !10228)
!10240 = !DILocation(line: 2960, column: 6, scope: !10194)
!10241 = !DILocation(line: 2961, column: 25, scope: !10242)
!10242 = distinct !DILexicalBlock(scope: !10228, file: !3, line: 2960, column: 90)
!10243 = !DILocation(line: 2961, column: 30, scope: !10242)
!10244 = !DILocation(line: 2961, column: 35, scope: !10242)
!10245 = !DILocation(line: 2961, column: 40, scope: !10242)
!10246 = !DILocation(line: 2961, column: 52, scope: !10242)
!10247 = !DILocation(line: 2961, column: 50, scope: !10242)
!10248 = !DILocation(line: 2961, column: 9, scope: !10242)
!10249 = !DILocation(line: 2961, column: 7, scope: !10242)
!10250 = !DILocation(line: 2962, column: 7, scope: !10251)
!10251 = distinct !DILexicalBlock(scope: !10242, file: !3, line: 2962, column: 7)
!10252 = !DILocation(line: 2962, column: 11, scope: !10251)
!10253 = !DILocation(line: 2962, column: 7, scope: !10242)
!10254 = !DILocation(line: 2963, column: 11, scope: !10251)
!10255 = !DILocation(line: 2963, column: 4, scope: !10251)
!10256 = !DILocation(line: 2965, column: 10, scope: !10257)
!10257 = distinct !DILexicalBlock(scope: !10242, file: !3, line: 2965, column: 3)
!10258 = !DILocation(line: 2965, column: 8, scope: !10257)
!10259 = !DILocation(line: 2965, column: 15, scope: !10260)
!10260 = distinct !DILexicalBlock(scope: !10257, file: !3, line: 2965, column: 3)
!10261 = !DILocation(line: 2965, column: 19, scope: !10260)
!10262 = !DILocation(line: 2965, column: 31, scope: !10260)
!10263 = !DILocation(line: 2965, column: 29, scope: !10260)
!10264 = !DILocation(line: 2965, column: 17, scope: !10260)
!10265 = !DILocation(line: 2965, column: 3, scope: !10257)
!10266 = !DILocation(line: 2966, column: 4, scope: !10260)
!10267 = !DILocation(line: 2966, column: 9, scope: !10260)
!10268 = !DILocation(line: 2966, column: 16, scope: !10260)
!10269 = !DILocation(line: 2966, column: 30, scope: !10260)
!10270 = !DILocation(line: 2966, column: 36, scope: !10260)
!10271 = !DILocation(line: 2966, column: 34, scope: !10260)
!10272 = !DILocation(line: 2965, column: 47, scope: !10260)
!10273 = !DILocation(line: 2965, column: 44, scope: !10260)
!10274 = !DILocation(line: 2965, column: 3, scope: !10260)
!10275 = distinct !{!10275, !10265, !10276}
!10276 = !DILocation(line: 2966, column: 37, scope: !10257)
!10277 = !DILocation(line: 2967, column: 2, scope: !10242)
!10278 = !DILocalVariable(name: "u64", scope: !10279, file: !3, line: 2969, type: !3386)
!10279 = distinct !DILexicalBlock(scope: !10228, file: !3, line: 2967, column: 9)
!10280 = !DILocation(line: 2969, column: 8, scope: !10279)
!10281 = !DILocation(line: 2969, column: 14, scope: !10279)
!10282 = !DILocalVariable(name: "u32", scope: !10279, file: !3, line: 2971, type: !1161)
!10283 = !DILocation(line: 2971, column: 8, scope: !10279)
!10284 = !DILocation(line: 2971, column: 14, scope: !10279)
!10285 = !DILocalVariable(name: "u16", scope: !10279, file: !3, line: 2972, type: !3827)
!10286 = !DILocation(line: 2972, column: 8, scope: !10279)
!10287 = !DILocation(line: 2972, column: 14, scope: !10279)
!10288 = !DILocalVariable(name: "u8", scope: !10279, file: !3, line: 2973, type: !3826)
!10289 = !DILocation(line: 2973, column: 7, scope: !10279)
!10290 = !DILocation(line: 2973, column: 12, scope: !10279)
!10291 = !DILocation(line: 2975, column: 3, scope: !10279)
!10292 = !DILocation(line: 2975, column: 8, scope: !10279)
!10293 = !DILocation(line: 2975, column: 13, scope: !10279)
!10294 = !DILocation(line: 2975, column: 18, scope: !10279)
!10295 = !DILocation(line: 2977, column: 10, scope: !10296)
!10296 = distinct !DILexicalBlock(scope: !10279, file: !3, line: 2977, column: 3)
!10297 = !DILocation(line: 2977, column: 8, scope: !10296)
!10298 = !DILocation(line: 2977, column: 15, scope: !10299)
!10299 = distinct !DILexicalBlock(scope: !10296, file: !3, line: 2977, column: 3)
!10300 = !DILocation(line: 2977, column: 19, scope: !10299)
!10301 = !DILocation(line: 2977, column: 17, scope: !10299)
!10302 = !DILocation(line: 2977, column: 3, scope: !10296)
!10303 = !DILocalVariable(name: "ival", scope: !10304, file: !3, line: 2978, type: !70)
!10304 = distinct !DILexicalBlock(scope: !10299, file: !3, line: 2977, column: 35)
!10305 = !DILocation(line: 2978, column: 17, scope: !10304)
!10306 = !DILocation(line: 2980, column: 23, scope: !10304)
!10307 = !DILocation(line: 2980, column: 28, scope: !10304)
!10308 = !DILocation(line: 2980, column: 52, scope: !10304)
!10309 = !DILocation(line: 2980, column: 57, scope: !10304)
!10310 = !DILocation(line: 2980, column: 34, scope: !10304)
!10311 = !DILocation(line: 2980, column: 32, scope: !10304)
!10312 = !DILocation(line: 2980, column: 10, scope: !10304)
!10313 = !DILocation(line: 2980, column: 8, scope: !10304)
!10314 = !DILocation(line: 2982, column: 8, scope: !10315)
!10315 = distinct !DILexicalBlock(scope: !10304, file: !3, line: 2982, column: 8)
!10316 = !DILocation(line: 2982, column: 12, scope: !10315)
!10317 = !DILocation(line: 2982, column: 8, scope: !10304)
!10318 = !DILocation(line: 2983, column: 5, scope: !10315)
!10319 = !DILocation(line: 2985, column: 12, scope: !10304)
!10320 = !DILocation(line: 2985, column: 17, scope: !10304)
!10321 = !DILocation(line: 2985, column: 24, scope: !10304)
!10322 = !DILocation(line: 2985, column: 4, scope: !10304)
!10323 = !DILocation(line: 2988, column: 14, scope: !10324)
!10324 = distinct !DILexicalBlock(scope: !10304, file: !3, line: 2985, column: 35)
!10325 = !DILocation(line: 2988, column: 5, scope: !10324)
!10326 = !DILocation(line: 2988, column: 9, scope: !10324)
!10327 = !DILocation(line: 2988, column: 12, scope: !10324)
!10328 = !DILocation(line: 2989, column: 5, scope: !10324)
!10329 = !DILocation(line: 2992, column: 14, scope: !10324)
!10330 = !DILocation(line: 2992, column: 5, scope: !10324)
!10331 = !DILocation(line: 2992, column: 9, scope: !10324)
!10332 = !DILocation(line: 2992, column: 12, scope: !10324)
!10333 = !DILocation(line: 2993, column: 5, scope: !10324)
!10334 = !DILocation(line: 2995, column: 14, scope: !10324)
!10335 = !DILocation(line: 2995, column: 5, scope: !10324)
!10336 = !DILocation(line: 2995, column: 9, scope: !10324)
!10337 = !DILocation(line: 2995, column: 12, scope: !10324)
!10338 = !DILocation(line: 2996, column: 5, scope: !10324)
!10339 = !DILocation(line: 2998, column: 13, scope: !10324)
!10340 = !DILocation(line: 2998, column: 5, scope: !10324)
!10341 = !DILocation(line: 2998, column: 8, scope: !10324)
!10342 = !DILocation(line: 2998, column: 11, scope: !10324)
!10343 = !DILocation(line: 2999, column: 5, scope: !10324)
!10344 = !DILocation(line: 3001, column: 9, scope: !10324)
!10345 = !DILocation(line: 3002, column: 5, scope: !10324)
!10346 = !DILocation(line: 3004, column: 3, scope: !10304)
!10347 = !DILocation(line: 2977, column: 31, scope: !10299)
!10348 = !DILocation(line: 2977, column: 3, scope: !10299)
!10349 = distinct !{!10349, !10302, !10350}
!10350 = !DILocation(line: 3004, column: 3, scope: !10296)
!10351 = !DILabel(scope: !10279, name: "out", file: !3, line: 3006)
!10352 = !DILocation(line: 3006, column: 1, scope: !10279)
!10353 = !DILocation(line: 3007, column: 3, scope: !10279)
!10354 = !DILocation(line: 3007, column: 8, scope: !10279)
!10355 = !DILocation(line: 3007, column: 15, scope: !10279)
!10356 = !DILocation(line: 3007, column: 20, scope: !10279)
!10357 = !DILocation(line: 3010, column: 9, scope: !10194)
!10358 = !DILocation(line: 3010, column: 2, scope: !10194)
!10359 = !DILocation(line: 3011, column: 1, scope: !10194)
!10360 = distinct !DISubprogram(name: "_regmap_update_bits", scope: !3, file: !3, line: 3014, type: !10361, scopeLine: 3017, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10361 = !DISubroutineType(types: !10362)
!10362 = !{!104, !6, !70, !70, !70, !733, !331}
!10363 = !DILocalVariable(name: "map", arg: 1, scope: !10360, file: !3, line: 3014, type: !6)
!10364 = !DILocation(line: 3014, column: 47, scope: !10360)
!10365 = !DILocalVariable(name: "reg", arg: 2, scope: !10360, file: !3, line: 3014, type: !70)
!10366 = !DILocation(line: 3014, column: 65, scope: !10360)
!10367 = !DILocalVariable(name: "mask", arg: 3, scope: !10360, file: !3, line: 3015, type: !70)
!10368 = !DILocation(line: 3015, column: 24, scope: !10360)
!10369 = !DILocalVariable(name: "val", arg: 4, scope: !10360, file: !3, line: 3015, type: !70)
!10370 = !DILocation(line: 3015, column: 43, scope: !10360)
!10371 = !DILocalVariable(name: "change", arg: 5, scope: !10360, file: !3, line: 3016, type: !733)
!10372 = !DILocation(line: 3016, column: 17, scope: !10360)
!10373 = !DILocalVariable(name: "force_write", arg: 6, scope: !10360, file: !3, line: 3016, type: !331)
!10374 = !DILocation(line: 3016, column: 30, scope: !10360)
!10375 = !DILocalVariable(name: "ret", scope: !10360, file: !3, line: 3018, type: !104)
!10376 = !DILocation(line: 3018, column: 6, scope: !10360)
!10377 = !DILocalVariable(name: "tmp", scope: !10360, file: !3, line: 3019, type: !70)
!10378 = !DILocation(line: 3019, column: 15, scope: !10360)
!10379 = !DILocalVariable(name: "orig", scope: !10360, file: !3, line: 3019, type: !70)
!10380 = !DILocation(line: 3019, column: 20, scope: !10360)
!10381 = !DILocation(line: 3021, column: 6, scope: !10382)
!10382 = distinct !DILexicalBlock(scope: !10360, file: !3, line: 3021, column: 6)
!10383 = !DILocation(line: 3021, column: 6, scope: !10360)
!10384 = !DILocation(line: 3022, column: 4, scope: !10382)
!10385 = !DILocation(line: 3022, column: 11, scope: !10382)
!10386 = !DILocation(line: 3022, column: 3, scope: !10382)
!10387 = !DILocation(line: 3024, column: 22, scope: !10388)
!10388 = distinct !DILexicalBlock(scope: !10360, file: !3, line: 3024, column: 6)
!10389 = !DILocation(line: 3024, column: 27, scope: !10388)
!10390 = !DILocation(line: 3024, column: 6, scope: !10388)
!10391 = !DILocation(line: 3024, column: 32, scope: !10388)
!10392 = !DILocation(line: 3024, column: 35, scope: !10388)
!10393 = !DILocation(line: 3024, column: 40, scope: !10388)
!10394 = !DILocation(line: 3024, column: 6, scope: !10360)
!10395 = !DILocation(line: 3025, column: 9, scope: !10396)
!10396 = distinct !DILexicalBlock(scope: !10388, file: !3, line: 3024, column: 57)
!10397 = !DILocation(line: 3025, column: 14, scope: !10396)
!10398 = !DILocation(line: 3025, column: 30, scope: !10396)
!10399 = !DILocation(line: 3025, column: 35, scope: !10396)
!10400 = !DILocation(line: 3025, column: 48, scope: !10396)
!10401 = !DILocation(line: 3025, column: 53, scope: !10396)
!10402 = !DILocation(line: 3025, column: 59, scope: !10396)
!10403 = !DILocation(line: 3025, column: 7, scope: !10396)
!10404 = !DILocation(line: 3026, column: 7, scope: !10405)
!10405 = distinct !DILexicalBlock(scope: !10396, file: !3, line: 3026, column: 7)
!10406 = !DILocation(line: 3026, column: 11, scope: !10405)
!10407 = !DILocation(line: 3026, column: 16, scope: !10405)
!10408 = !DILocation(line: 3026, column: 19, scope: !10405)
!10409 = !DILocation(line: 3026, column: 7, scope: !10396)
!10410 = !DILocation(line: 3027, column: 5, scope: !10405)
!10411 = !DILocation(line: 3027, column: 12, scope: !10405)
!10412 = !DILocation(line: 3027, column: 4, scope: !10405)
!10413 = !DILocation(line: 3028, column: 2, scope: !10396)
!10414 = !DILocation(line: 3029, column: 22, scope: !10415)
!10415 = distinct !DILexicalBlock(scope: !10388, file: !3, line: 3028, column: 9)
!10416 = !DILocation(line: 3029, column: 27, scope: !10415)
!10417 = !DILocation(line: 3029, column: 9, scope: !10415)
!10418 = !DILocation(line: 3029, column: 7, scope: !10415)
!10419 = !DILocation(line: 3030, column: 7, scope: !10420)
!10420 = distinct !DILexicalBlock(scope: !10415, file: !3, line: 3030, column: 7)
!10421 = !DILocation(line: 3030, column: 11, scope: !10420)
!10422 = !DILocation(line: 3030, column: 7, scope: !10415)
!10423 = !DILocation(line: 3031, column: 11, scope: !10420)
!10424 = !DILocation(line: 3031, column: 4, scope: !10420)
!10425 = !DILocation(line: 3033, column: 9, scope: !10415)
!10426 = !DILocation(line: 3033, column: 17, scope: !10415)
!10427 = !DILocation(line: 3033, column: 16, scope: !10415)
!10428 = !DILocation(line: 3033, column: 14, scope: !10415)
!10429 = !DILocation(line: 3033, column: 7, scope: !10415)
!10430 = !DILocation(line: 3034, column: 10, scope: !10415)
!10431 = !DILocation(line: 3034, column: 16, scope: !10415)
!10432 = !DILocation(line: 3034, column: 14, scope: !10415)
!10433 = !DILocation(line: 3034, column: 7, scope: !10415)
!10434 = !DILocation(line: 3036, column: 7, scope: !10435)
!10435 = distinct !DILexicalBlock(scope: !10415, file: !3, line: 3036, column: 7)
!10436 = !DILocation(line: 3036, column: 19, scope: !10435)
!10437 = !DILocation(line: 3036, column: 23, scope: !10435)
!10438 = !DILocation(line: 3036, column: 30, scope: !10435)
!10439 = !DILocation(line: 3036, column: 27, scope: !10435)
!10440 = !DILocation(line: 3036, column: 7, scope: !10415)
!10441 = !DILocation(line: 3037, column: 24, scope: !10442)
!10442 = distinct !DILexicalBlock(scope: !10435, file: !3, line: 3036, column: 37)
!10443 = !DILocation(line: 3037, column: 29, scope: !10442)
!10444 = !DILocation(line: 3037, column: 34, scope: !10442)
!10445 = !DILocation(line: 3037, column: 10, scope: !10442)
!10446 = !DILocation(line: 3037, column: 8, scope: !10442)
!10447 = !DILocation(line: 3038, column: 8, scope: !10448)
!10448 = distinct !DILexicalBlock(scope: !10442, file: !3, line: 3038, column: 8)
!10449 = !DILocation(line: 3038, column: 12, scope: !10448)
!10450 = !DILocation(line: 3038, column: 17, scope: !10448)
!10451 = !DILocation(line: 3038, column: 20, scope: !10448)
!10452 = !DILocation(line: 3038, column: 8, scope: !10442)
!10453 = !DILocation(line: 3039, column: 6, scope: !10448)
!10454 = !DILocation(line: 3039, column: 13, scope: !10448)
!10455 = !DILocation(line: 3039, column: 5, scope: !10448)
!10456 = !DILocation(line: 3040, column: 3, scope: !10442)
!10457 = !DILocation(line: 3043, column: 9, scope: !10360)
!10458 = !DILocation(line: 3043, column: 2, scope: !10360)
!10459 = !DILocation(line: 3044, column: 1, scope: !10360)
!10460 = distinct !DISubprogram(name: "regmap_test_bits", scope: !3, file: !3, line: 3099, type: !3703, scopeLine: 3100, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10461 = !DILocalVariable(name: "map", arg: 1, scope: !10460, file: !3, line: 3099, type: !6)
!10462 = !DILocation(line: 3099, column: 37, scope: !10460)
!10463 = !DILocalVariable(name: "reg", arg: 2, scope: !10460, file: !3, line: 3099, type: !70)
!10464 = !DILocation(line: 3099, column: 55, scope: !10460)
!10465 = !DILocalVariable(name: "bits", arg: 3, scope: !10460, file: !3, line: 3099, type: !70)
!10466 = !DILocation(line: 3099, column: 73, scope: !10460)
!10467 = !DILocalVariable(name: "val", scope: !10460, file: !3, line: 3101, type: !70)
!10468 = !DILocation(line: 3101, column: 15, scope: !10460)
!10469 = !DILocalVariable(name: "ret", scope: !10460, file: !3, line: 3101, type: !70)
!10470 = !DILocation(line: 3101, column: 20, scope: !10460)
!10471 = !DILocation(line: 3103, column: 20, scope: !10460)
!10472 = !DILocation(line: 3103, column: 25, scope: !10460)
!10473 = !DILocation(line: 3103, column: 8, scope: !10460)
!10474 = !DILocation(line: 3103, column: 6, scope: !10460)
!10475 = !DILocation(line: 3104, column: 6, scope: !10476)
!10476 = distinct !DILexicalBlock(scope: !10460, file: !3, line: 3104, column: 6)
!10477 = !DILocation(line: 3104, column: 6, scope: !10460)
!10478 = !DILocation(line: 3105, column: 10, scope: !10476)
!10479 = !DILocation(line: 3105, column: 3, scope: !10476)
!10480 = !DILocation(line: 3107, column: 10, scope: !10460)
!10481 = !DILocation(line: 3107, column: 16, scope: !10460)
!10482 = !DILocation(line: 3107, column: 14, scope: !10460)
!10483 = !DILocation(line: 3107, column: 25, scope: !10460)
!10484 = !DILocation(line: 3107, column: 22, scope: !10460)
!10485 = !DILocation(line: 3107, column: 2, scope: !10460)
!10486 = !DILocation(line: 3108, column: 1, scope: !10460)
!10487 = distinct !DISubprogram(name: "regmap_async_complete_cb", scope: !3, file: !3, line: 3111, type: !10488, scopeLine: 3112, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10488 = !DISubroutineType(types: !10489)
!10489 = !{null, !3588, !104}
!10490 = !DILocalVariable(name: "lock", arg: 1, scope: !10491, file: !4415, line: 392, type: !4419)
!10491 = distinct !DISubprogram(name: "spin_unlock", scope: !4415, file: !4415, line: 392, type: !10492, scopeLine: 393, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10492 = !DISubroutineType(types: !10493)
!10493 = !{null, !4419}
!10494 = !DILocation(line: 392, column: 53, scope: !10491, inlinedAt: !10495)
!10495 = distinct !DILocation(line: 3125, column: 2, scope: !10487)
!10496 = !DILocalVariable(name: "lock", arg: 1, scope: !10497, file: !4415, line: 352, type: !4419)
!10497 = distinct !DISubprogram(name: "spin_lock", scope: !4415, file: !4415, line: 352, type: !10492, scopeLine: 353, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10498 = !DILocation(line: 352, column: 51, scope: !10497, inlinedAt: !10499)
!10499 = distinct !DILocation(line: 3118, column: 2, scope: !10487)
!10500 = !DILocalVariable(name: "async", arg: 1, scope: !10487, file: !3, line: 3111, type: !3588)
!10501 = !DILocation(line: 3111, column: 52, scope: !10487)
!10502 = !DILocalVariable(name: "ret", arg: 2, scope: !10487, file: !3, line: 3111, type: !104)
!10503 = !DILocation(line: 3111, column: 63, scope: !10487)
!10504 = !DILocalVariable(name: "map", scope: !10487, file: !3, line: 3113, type: !6)
!10505 = !DILocation(line: 3113, column: 17, scope: !10487)
!10506 = !DILocation(line: 3113, column: 23, scope: !10487)
!10507 = !DILocation(line: 3113, column: 30, scope: !10487)
!10508 = !DILocalVariable(name: "wake", scope: !10487, file: !3, line: 3114, type: !331)
!10509 = !DILocation(line: 3114, column: 7, scope: !10487)
!10510 = !DILocation(line: 3116, column: 33, scope: !10487)
!10511 = !DILocation(line: 3116, column: 2, scope: !10487)
!10512 = !DILocation(line: 3118, column: 13, scope: !10487)
!10513 = !DILocation(line: 3118, column: 18, scope: !10487)
!10514 = !DILocation(line: 354, column: 2, scope: !10515, inlinedAt: !10499)
!10515 = distinct !DILexicalBlock(scope: !10497, file: !4415, line: 354, column: 2)
!10516 = !{i32 -2145222253}
!10517 = !DILocation(line: 354, column: 2, scope: !10518, inlinedAt: !10499)
!10518 = distinct !DILexicalBlock(scope: !10515, file: !4415, line: 354, column: 2)
!10519 = !DILocation(line: 3119, column: 13, scope: !10487)
!10520 = !DILocation(line: 3119, column: 20, scope: !10487)
!10521 = !DILocation(line: 3119, column: 27, scope: !10487)
!10522 = !DILocation(line: 3119, column: 32, scope: !10487)
!10523 = !DILocation(line: 3119, column: 2, scope: !10487)
!10524 = !DILocation(line: 3120, column: 21, scope: !10487)
!10525 = !DILocation(line: 3120, column: 26, scope: !10487)
!10526 = !DILocation(line: 3120, column: 9, scope: !10487)
!10527 = !DILocation(line: 3120, column: 7, scope: !10487)
!10528 = !DILocation(line: 3122, column: 6, scope: !10529)
!10529 = distinct !DILexicalBlock(scope: !10487, file: !3, line: 3122, column: 6)
!10530 = !DILocation(line: 3122, column: 10, scope: !10529)
!10531 = !DILocation(line: 3122, column: 6, scope: !10487)
!10532 = !DILocation(line: 3123, column: 20, scope: !10529)
!10533 = !DILocation(line: 3123, column: 3, scope: !10529)
!10534 = !DILocation(line: 3123, column: 8, scope: !10529)
!10535 = !DILocation(line: 3123, column: 18, scope: !10529)
!10536 = !DILocation(line: 3125, column: 15, scope: !10487)
!10537 = !DILocation(line: 3125, column: 20, scope: !10487)
!10538 = !DILocation(line: 394, column: 2, scope: !10539, inlinedAt: !10495)
!10539 = distinct !DILexicalBlock(scope: !10491, file: !4415, line: 394, column: 2)
!10540 = !{i32 -2145219892}
!10541 = !DILocation(line: 394, column: 2, scope: !10542, inlinedAt: !10495)
!10542 = distinct !DILexicalBlock(scope: !10539, file: !4415, line: 394, column: 2)
!10543 = !DILocation(line: 3127, column: 6, scope: !10544)
!10544 = distinct !DILexicalBlock(scope: !10487, file: !3, line: 3127, column: 6)
!10545 = !DILocation(line: 3127, column: 6, scope: !10487)
!10546 = !DILocation(line: 3128, column: 3, scope: !10544)
!10547 = !DILocation(line: 3129, column: 1, scope: !10487)
!10548 = distinct !DISubprogram(name: "trace_regmap_async_io_complete", scope: !7845, file: !7845, line: 202, type: !4303, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10549 = !DILocalVariable(name: "map", arg: 1, scope: !10548, file: !7845, line: 202, type: !6)
!10550 = !DILocation(line: 202, column: 1, scope: !10548)
!10551 = distinct !DISubprogram(name: "list_move", scope: !6056, file: !6056, line: 213, type: !10552, scopeLine: 214, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10552 = !DISubroutineType(types: !10553)
!10553 = !{null, !50, !50}
!10554 = !DILocalVariable(name: "list", arg: 1, scope: !10551, file: !6056, line: 213, type: !50)
!10555 = !DILocation(line: 213, column: 48, scope: !10551)
!10556 = !DILocalVariable(name: "head", arg: 2, scope: !10551, file: !6056, line: 213, type: !50)
!10557 = !DILocation(line: 213, column: 72, scope: !10551)
!10558 = !DILocation(line: 215, column: 19, scope: !10551)
!10559 = !DILocation(line: 215, column: 2, scope: !10551)
!10560 = !DILocation(line: 216, column: 11, scope: !10551)
!10561 = !DILocation(line: 216, column: 17, scope: !10551)
!10562 = !DILocation(line: 216, column: 2, scope: !10551)
!10563 = !DILocation(line: 217, column: 1, scope: !10551)
!10564 = distinct !DISubprogram(name: "regmap_async_complete", scope: !3, file: !3, line: 3152, type: !3694, scopeLine: 3153, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10565 = !DILocation(line: 407, column: 64, scope: !5962, inlinedAt: !10566)
!10566 = distinct !DILocation(line: 3168, column: 2, scope: !10564)
!10567 = !DILocation(line: 407, column: 84, scope: !5962, inlinedAt: !10566)
!10568 = !DILocation(line: 327, column: 67, scope: !4414, inlinedAt: !10569)
!10569 = distinct !DILocation(line: 3165, column: 2, scope: !10570)
!10570 = distinct !DILexicalBlock(scope: !10571, file: !3, line: 3165, column: 2)
!10571 = distinct !DILexicalBlock(scope: !10572, file: !3, line: 3165, column: 2)
!10572 = distinct !DILexicalBlock(scope: !10573, file: !3, line: 3165, column: 2)
!10573 = distinct !DILexicalBlock(scope: !10574, file: !3, line: 3165, column: 2)
!10574 = distinct !DILexicalBlock(scope: !10564, file: !3, line: 3165, column: 2)
!10575 = !DILocalVariable(name: "map", arg: 1, scope: !10564, file: !3, line: 3152, type: !6)
!10576 = !DILocation(line: 3152, column: 42, scope: !10564)
!10577 = !DILocalVariable(name: "flags", scope: !10564, file: !3, line: 3154, type: !57)
!10578 = !DILocation(line: 3154, column: 16, scope: !10564)
!10579 = !DILocalVariable(name: "ret", scope: !10564, file: !3, line: 3155, type: !104)
!10580 = !DILocation(line: 3155, column: 6, scope: !10564)
!10581 = !DILocation(line: 3158, column: 7, scope: !10582)
!10582 = distinct !DILexicalBlock(scope: !10564, file: !3, line: 3158, column: 6)
!10583 = !DILocation(line: 3158, column: 12, scope: !10582)
!10584 = !DILocation(line: 3158, column: 16, scope: !10582)
!10585 = !DILocation(line: 3158, column: 20, scope: !10582)
!10586 = !DILocation(line: 3158, column: 25, scope: !10582)
!10587 = !DILocation(line: 3158, column: 30, scope: !10582)
!10588 = !DILocation(line: 3158, column: 6, scope: !10564)
!10589 = !DILocation(line: 3159, column: 3, scope: !10582)
!10590 = !DILocation(line: 3161, column: 36, scope: !10564)
!10591 = !DILocation(line: 3161, column: 2, scope: !10564)
!10592 = !DILocation(line: 3163, column: 2, scope: !10564)
!10593 = !DILocation(line: 3163, column: 2, scope: !10594)
!10594 = distinct !DILexicalBlock(scope: !10564, file: !3, line: 3163, column: 2)
!10595 = !DILocation(line: 3163, column: 2, scope: !10596)
!10596 = distinct !DILexicalBlock(scope: !10594, file: !3, line: 3163, column: 2)
!10597 = !DILocation(line: 3163, column: 2, scope: !10598)
!10598 = distinct !DILexicalBlock(scope: !10596, file: !3, line: 3163, column: 2)
!10599 = !DILocation(line: 3163, column: 2, scope: !10600)
!10600 = distinct !DILexicalBlock(scope: !10594, file: !3, line: 3163, column: 2)
!10601 = !DILocalVariable(name: "__wq_entry", scope: !10602, file: !3, line: 3163, type: !10603)
!10602 = distinct !DILexicalBlock(scope: !10594, file: !3, line: 3163, column: 2)
!10603 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "wait_queue_entry", file: !1234, line: 29, size: 320, elements: !10604)
!10604 = !{!10605, !10606, !10607, !10613}
!10605 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !10603, file: !1234, line: 30, baseType: !70, size: 32)
!10606 = !DIDerivedType(tag: DW_TAG_member, name: "private", scope: !10603, file: !1234, line: 31, baseType: !64, size: 64, offset: 64)
!10607 = !DIDerivedType(tag: DW_TAG_member, name: "func", scope: !10603, file: !1234, line: 32, baseType: !10608, size: 64, offset: 128)
!10608 = !DIDerivedType(tag: DW_TAG_typedef, name: "wait_queue_func_t", file: !1234, line: 16, baseType: !10609)
!10609 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10610, size: 64)
!10610 = !DISubroutineType(types: !10611)
!10611 = !{!104, !10612, !70, !104, !64}
!10612 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10603, size: 64)
!10613 = !DIDerivedType(tag: DW_TAG_member, name: "entry", scope: !10603, file: !1234, line: 33, baseType: !47, size: 128, offset: 192)
!10614 = !DILocation(line: 3163, column: 2, scope: !10602)
!10615 = !DILocalVariable(name: "__ret", scope: !10602, file: !3, line: 3163, type: !155)
!10616 = !DILocalVariable(name: "__int", scope: !10617, file: !3, line: 3163, type: !155)
!10617 = distinct !DILexicalBlock(scope: !10618, file: !3, line: 3163, column: 2)
!10618 = distinct !DILexicalBlock(scope: !10619, file: !3, line: 3163, column: 2)
!10619 = distinct !DILexicalBlock(scope: !10602, file: !3, line: 3163, column: 2)
!10620 = !DILocation(line: 3163, column: 2, scope: !10617)
!10621 = !DILocation(line: 3163, column: 2, scope: !10622)
!10622 = distinct !DILexicalBlock(scope: !10617, file: !3, line: 3163, column: 2)
!10623 = !DILocation(line: 3163, column: 2, scope: !10618)
!10624 = distinct !{!10624, !10625, !10625}
!10625 = !DILocation(line: 3163, column: 2, scope: !10619)
!10626 = !DILabel(scope: !10602, name: "__out", file: !3, line: 3163)
!10627 = !DILocation(line: 3165, column: 2, scope: !10564)
!10628 = !DILocation(line: 3165, column: 2, scope: !10574)
!10629 = !DILocalVariable(name: "__dummy", scope: !10630, file: !3, line: 3165, type: !57)
!10630 = distinct !DILexicalBlock(scope: !10573, file: !3, line: 3165, column: 2)
!10631 = !DILocation(line: 3165, column: 2, scope: !10630)
!10632 = !DILocalVariable(name: "__dummy2", scope: !10630, file: !3, line: 3165, type: !57)
!10633 = !DILocation(line: 3165, column: 2, scope: !10573)
!10634 = !DILocation(line: 3165, column: 2, scope: !10572)
!10635 = !DILocation(line: 3165, column: 2, scope: !10636)
!10636 = distinct !DILexicalBlock(scope: !10572, file: !3, line: 3165, column: 2)
!10637 = !DILocalVariable(name: "__dummy", scope: !10638, file: !3, line: 3165, type: !57)
!10638 = distinct !DILexicalBlock(scope: !10639, file: !3, line: 3165, column: 2)
!10639 = distinct !DILexicalBlock(scope: !10636, file: !3, line: 3165, column: 2)
!10640 = !DILocation(line: 3165, column: 2, scope: !10638)
!10641 = !DILocalVariable(name: "__dummy2", scope: !10638, file: !3, line: 3165, type: !57)
!10642 = !DILocation(line: 3165, column: 2, scope: !10639)
!10643 = !DILocation(line: 3165, column: 2, scope: !10571)
!10644 = !{i32 -2142534870}
!10645 = !DILocation(line: 3165, column: 2, scope: !10570)
!10646 = !DILocation(line: 329, column: 10, scope: !4414, inlinedAt: !10569)
!10647 = !DILocation(line: 329, column: 16, scope: !4414, inlinedAt: !10569)
!10648 = !DILocation(line: 3166, column: 8, scope: !10564)
!10649 = !DILocation(line: 3166, column: 13, scope: !10564)
!10650 = !DILocation(line: 3166, column: 6, scope: !10564)
!10651 = !DILocation(line: 3167, column: 2, scope: !10564)
!10652 = !DILocation(line: 3167, column: 7, scope: !10564)
!10653 = !DILocation(line: 3167, column: 17, scope: !10564)
!10654 = !DILocation(line: 3168, column: 26, scope: !10564)
!10655 = !DILocation(line: 3168, column: 31, scope: !10564)
!10656 = !DILocation(line: 3168, column: 43, scope: !10564)
!10657 = !DILocation(line: 409, column: 2, scope: !5979, inlinedAt: !10566)
!10658 = !DILocation(line: 409, column: 2, scope: !5984, inlinedAt: !10566)
!10659 = !DILocation(line: 409, column: 2, scope: !5985, inlinedAt: !10566)
!10660 = !DILocation(line: 409, column: 2, scope: !5992, inlinedAt: !10566)
!10661 = !DILocation(line: 409, column: 2, scope: !5995, inlinedAt: !10566)
!10662 = !DILocation(line: 3170, column: 35, scope: !10564)
!10663 = !DILocation(line: 3170, column: 2, scope: !10564)
!10664 = !DILocation(line: 3172, column: 9, scope: !10564)
!10665 = !DILocation(line: 3172, column: 2, scope: !10564)
!10666 = !DILocation(line: 3173, column: 1, scope: !10564)
!10667 = distinct !DISubprogram(name: "trace_regmap_async_complete_start", scope: !7845, file: !7845, line: 210, type: !4303, scopeLine: 210, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10668 = !DILocalVariable(name: "map", arg: 1, scope: !10667, file: !7845, line: 210, type: !6)
!10669 = !DILocation(line: 210, column: 1, scope: !10667)
!10670 = distinct !DISubprogram(name: "regmap_async_is_done", scope: !3, file: !3, line: 3132, type: !3694, scopeLine: 3133, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10671 = !DILocation(line: 407, column: 64, scope: !5962, inlinedAt: !10672)
!10672 = distinct !DILocation(line: 3139, column: 2, scope: !10670)
!10673 = !DILocation(line: 407, column: 84, scope: !5962, inlinedAt: !10672)
!10674 = !DILocation(line: 327, column: 67, scope: !4414, inlinedAt: !10675)
!10675 = distinct !DILocation(line: 3137, column: 2, scope: !10676)
!10676 = distinct !DILexicalBlock(scope: !10677, file: !3, line: 3137, column: 2)
!10677 = distinct !DILexicalBlock(scope: !10678, file: !3, line: 3137, column: 2)
!10678 = distinct !DILexicalBlock(scope: !10679, file: !3, line: 3137, column: 2)
!10679 = distinct !DILexicalBlock(scope: !10680, file: !3, line: 3137, column: 2)
!10680 = distinct !DILexicalBlock(scope: !10670, file: !3, line: 3137, column: 2)
!10681 = !DILocalVariable(name: "map", arg: 1, scope: !10670, file: !3, line: 3132, type: !6)
!10682 = !DILocation(line: 3132, column: 48, scope: !10670)
!10683 = !DILocalVariable(name: "flags", scope: !10670, file: !3, line: 3134, type: !57)
!10684 = !DILocation(line: 3134, column: 16, scope: !10670)
!10685 = !DILocalVariable(name: "ret", scope: !10670, file: !3, line: 3135, type: !104)
!10686 = !DILocation(line: 3135, column: 6, scope: !10670)
!10687 = !DILocation(line: 3137, column: 2, scope: !10670)
!10688 = !DILocation(line: 3137, column: 2, scope: !10680)
!10689 = !DILocalVariable(name: "__dummy", scope: !10690, file: !3, line: 3137, type: !57)
!10690 = distinct !DILexicalBlock(scope: !10679, file: !3, line: 3137, column: 2)
!10691 = !DILocation(line: 3137, column: 2, scope: !10690)
!10692 = !DILocalVariable(name: "__dummy2", scope: !10690, file: !3, line: 3137, type: !57)
!10693 = !DILocation(line: 3137, column: 2, scope: !10679)
!10694 = !DILocation(line: 3137, column: 2, scope: !10678)
!10695 = !DILocation(line: 3137, column: 2, scope: !10696)
!10696 = distinct !DILexicalBlock(scope: !10678, file: !3, line: 3137, column: 2)
!10697 = !DILocalVariable(name: "__dummy", scope: !10698, file: !3, line: 3137, type: !57)
!10698 = distinct !DILexicalBlock(scope: !10699, file: !3, line: 3137, column: 2)
!10699 = distinct !DILexicalBlock(scope: !10696, file: !3, line: 3137, column: 2)
!10700 = !DILocation(line: 3137, column: 2, scope: !10698)
!10701 = !DILocalVariable(name: "__dummy2", scope: !10698, file: !3, line: 3137, type: !57)
!10702 = !DILocation(line: 3137, column: 2, scope: !10699)
!10703 = !DILocation(line: 3137, column: 2, scope: !10677)
!10704 = !{i32 -2142537186}
!10705 = !DILocation(line: 3137, column: 2, scope: !10676)
!10706 = !DILocation(line: 329, column: 10, scope: !4414, inlinedAt: !10675)
!10707 = !DILocation(line: 329, column: 16, scope: !4414, inlinedAt: !10675)
!10708 = !DILocation(line: 3138, column: 20, scope: !10670)
!10709 = !DILocation(line: 3138, column: 25, scope: !10670)
!10710 = !DILocation(line: 3138, column: 8, scope: !10670)
!10711 = !DILocation(line: 3138, column: 6, scope: !10670)
!10712 = !DILocation(line: 3139, column: 26, scope: !10670)
!10713 = !DILocation(line: 3139, column: 31, scope: !10670)
!10714 = !DILocation(line: 3139, column: 43, scope: !10670)
!10715 = !DILocation(line: 409, column: 2, scope: !5979, inlinedAt: !10672)
!10716 = !DILocation(line: 409, column: 2, scope: !5984, inlinedAt: !10672)
!10717 = !DILocation(line: 409, column: 2, scope: !5985, inlinedAt: !10672)
!10718 = !DILocation(line: 409, column: 2, scope: !5992, inlinedAt: !10672)
!10719 = !DILocation(line: 409, column: 2, scope: !5995, inlinedAt: !10672)
!10720 = !DILocation(line: 3141, column: 9, scope: !10670)
!10721 = !DILocation(line: 3141, column: 2, scope: !10670)
!10722 = distinct !DISubprogram(name: "arch_local_irq_save", scope: !10723, file: !10723, line: 666, type: !10724, scopeLine: 667, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10723 = !DIFile(filename: "./arch/x86/include/asm/paravirt.h", directory: "/home/lizy2001/genbc/linux")
!10724 = !DISubroutineType(types: !10725)
!10725 = !{!57}
!10726 = !DILocalVariable(name: "f", scope: !10722, file: !10723, line: 668, type: !57)
!10727 = !DILocation(line: 668, column: 16, scope: !10722)
!10728 = !DILocation(line: 670, column: 6, scope: !10722)
!10729 = !DILocation(line: 670, column: 4, scope: !10722)
!10730 = !DILocation(line: 671, column: 2, scope: !10722)
!10731 = !DILocation(line: 672, column: 9, scope: !10722)
!10732 = !DILocation(line: 672, column: 2, scope: !10722)
!10733 = distinct !DISubprogram(name: "trace_regmap_async_complete_done", scope: !7845, file: !7845, line: 218, type: !4303, scopeLine: 218, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10734 = !DILocalVariable(name: "map", arg: 1, scope: !10733, file: !7845, line: 218, type: !6)
!10735 = !DILocation(line: 218, column: 1, scope: !10733)
!10736 = !DILocalVariable(name: "map", arg: 1, scope: !3863, file: !3, line: 3193, type: !6)
!10737 = !DILocation(line: 3193, column: 42, scope: !3863)
!10738 = !DILocalVariable(name: "regs", arg: 2, scope: !3863, file: !3, line: 3193, type: !3866)
!10739 = !DILocation(line: 3193, column: 74, scope: !3863)
!10740 = !DILocalVariable(name: "num_regs", arg: 3, scope: !3863, file: !3, line: 3194, type: !104)
!10741 = !DILocation(line: 3194, column: 10, scope: !3863)
!10742 = !DILocalVariable(name: "p", scope: !3863, file: !3, line: 3196, type: !3726)
!10743 = !DILocation(line: 3196, column: 23, scope: !3863)
!10744 = !DILocalVariable(name: "ret", scope: !3863, file: !3, line: 3197, type: !104)
!10745 = !DILocation(line: 3197, column: 6, scope: !3863)
!10746 = !DILocalVariable(name: "bypass", scope: !3863, file: !3, line: 3198, type: !331)
!10747 = !DILocation(line: 3198, column: 7, scope: !3863)
!10748 = !DILocalVariable(name: "__ret_warn_once", scope: !10749, file: !3, line: 3200, type: !104)
!10749 = distinct !DILexicalBlock(scope: !10750, file: !3, line: 3200, column: 6)
!10750 = distinct !DILexicalBlock(scope: !3863, file: !3, line: 3200, column: 6)
!10751 = !DILocation(line: 3200, column: 6, scope: !10749)
!10752 = !DILocation(line: 3200, column: 6, scope: !10753)
!10753 = distinct !DILexicalBlock(scope: !10749, file: !3, line: 3200, column: 6)
!10754 = !DILocation(line: 0, scope: !10753)
!10755 = !DILocation(line: 3200, column: 6, scope: !10756)
!10756 = distinct !DILexicalBlock(scope: !10753, file: !3, line: 3200, column: 6)
!10757 = !DILocalVariable(name: "__ret_warn_on", scope: !10758, file: !3, line: 3200, type: !104)
!10758 = distinct !DILexicalBlock(scope: !10756, file: !3, line: 3200, column: 6)
!10759 = !DILocation(line: 3200, column: 6, scope: !10758)
!10760 = !DILocation(line: 3200, column: 6, scope: !10761)
!10761 = distinct !DILexicalBlock(scope: !10758, file: !3, line: 3200, column: 6)
!10762 = !DILocation(line: 3200, column: 6, scope: !10763)
!10763 = distinct !DILexicalBlock(scope: !10761, file: !3, line: 3200, column: 6)
!10764 = !DILocation(line: 3200, column: 6, scope: !10765)
!10765 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 3200, column: 6)
!10766 = !DILocation(line: 3200, column: 6, scope: !10767)
!10767 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 3200, column: 6)
!10768 = !DILocation(line: 3200, column: 6, scope: !10769)
!10769 = distinct !DILexicalBlock(scope: !10767, file: !3, line: 3200, column: 6)
!10770 = !DILocation(line: 3200, column: 6, scope: !10771)
!10771 = distinct !DILexicalBlock(scope: !10767, file: !3, line: 3200, column: 6)
!10772 = !{i32 -2142533424, i32 -2142533395, i32 -2142533349, i32 -2142533291, i32 -2142533237, i32 -2142533183, i32 -2142533128, i32 -2142533097}
!10773 = !DILocation(line: 3200, column: 6, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10767, file: !3, line: 3200, column: 6)
!10775 = !{i32 -2142532675, i32 -2142532668, i32 -2142532616, i32 -2142532585, i32 -2142532555}
!10776 = !DILocation(line: 3200, column: 6, scope: !10777)
!10777 = distinct !DILexicalBlock(scope: !10767, file: !3, line: 3200, column: 6)
!10778 = !DILocation(line: 3200, column: 6, scope: !10779)
!10779 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 3200, column: 6)
!10780 = !DILocation(line: 3200, column: 6, scope: !10750)
!10781 = !DILocation(line: 3200, column: 6, scope: !3863)
!10782 = !DILocation(line: 3202, column: 3, scope: !10750)
!10783 = !DILocation(line: 3204, column: 15, scope: !3863)
!10784 = !DILocation(line: 3204, column: 20, scope: !3863)
!10785 = !DILocation(line: 3205, column: 39, scope: !3863)
!10786 = !DILocation(line: 3205, column: 44, scope: !3863)
!10787 = !DILocation(line: 3205, column: 57, scope: !3863)
!10788 = !DILocation(line: 3205, column: 55, scope: !3863)
!10789 = !DILocation(line: 3205, column: 38, scope: !3863)
!10790 = !DILocation(line: 3205, column: 36, scope: !3863)
!10791 = !DILocation(line: 3204, column: 6, scope: !3863)
!10792 = !DILocation(line: 3204, column: 4, scope: !3863)
!10793 = !DILocation(line: 3207, column: 6, scope: !10794)
!10794 = distinct !DILexicalBlock(scope: !3863, file: !3, line: 3207, column: 6)
!10795 = !DILocation(line: 3207, column: 6, scope: !3863)
!10796 = !DILocation(line: 3208, column: 10, scope: !10797)
!10797 = distinct !DILexicalBlock(scope: !10794, file: !3, line: 3207, column: 9)
!10798 = !DILocation(line: 3208, column: 14, scope: !10797)
!10799 = !DILocation(line: 3208, column: 19, scope: !10797)
!10800 = !DILocation(line: 3208, column: 12, scope: !10797)
!10801 = !DILocation(line: 3208, column: 3, scope: !10797)
!10802 = !DILocation(line: 3208, column: 31, scope: !10797)
!10803 = !DILocation(line: 3208, column: 37, scope: !10797)
!10804 = !DILocation(line: 3208, column: 46, scope: !10797)
!10805 = !DILocation(line: 3209, column: 16, scope: !10797)
!10806 = !DILocation(line: 3209, column: 3, scope: !10797)
!10807 = !DILocation(line: 3209, column: 8, scope: !10797)
!10808 = !DILocation(line: 3209, column: 14, scope: !10797)
!10809 = !DILocation(line: 3210, column: 22, scope: !10797)
!10810 = !DILocation(line: 3210, column: 3, scope: !10797)
!10811 = !DILocation(line: 3210, column: 8, scope: !10797)
!10812 = !DILocation(line: 3210, column: 19, scope: !10797)
!10813 = !DILocation(line: 3211, column: 2, scope: !10797)
!10814 = !DILocation(line: 3212, column: 3, scope: !10815)
!10815 = distinct !DILexicalBlock(scope: !10794, file: !3, line: 3211, column: 9)
!10816 = !DILocation(line: 3215, column: 2, scope: !3863)
!10817 = !DILocation(line: 3215, column: 7, scope: !3863)
!10818 = !DILocation(line: 3215, column: 12, scope: !3863)
!10819 = !DILocation(line: 3215, column: 17, scope: !3863)
!10820 = !DILocation(line: 3217, column: 11, scope: !3863)
!10821 = !DILocation(line: 3217, column: 16, scope: !3863)
!10822 = !DILocation(line: 3217, column: 9, scope: !3863)
!10823 = !DILocation(line: 3219, column: 2, scope: !3863)
!10824 = !DILocation(line: 3219, column: 7, scope: !3863)
!10825 = !DILocation(line: 3219, column: 20, scope: !3863)
!10826 = !DILocation(line: 3220, column: 2, scope: !3863)
!10827 = !DILocation(line: 3220, column: 7, scope: !3863)
!10828 = !DILocation(line: 3220, column: 13, scope: !3863)
!10829 = !DILocation(line: 3222, column: 32, scope: !3863)
!10830 = !DILocation(line: 3222, column: 37, scope: !3863)
!10831 = !DILocation(line: 3222, column: 43, scope: !3863)
!10832 = !DILocation(line: 3222, column: 8, scope: !3863)
!10833 = !DILocation(line: 3222, column: 6, scope: !3863)
!10834 = !DILocation(line: 3224, column: 2, scope: !3863)
!10835 = !DILocation(line: 3224, column: 7, scope: !3863)
!10836 = !DILocation(line: 3224, column: 13, scope: !3863)
!10837 = !DILocation(line: 3225, column: 22, scope: !3863)
!10838 = !DILocation(line: 3225, column: 2, scope: !3863)
!10839 = !DILocation(line: 3225, column: 7, scope: !3863)
!10840 = !DILocation(line: 3225, column: 20, scope: !3863)
!10841 = !DILocation(line: 3227, column: 2, scope: !3863)
!10842 = !DILocation(line: 3227, column: 7, scope: !3863)
!10843 = !DILocation(line: 3227, column: 14, scope: !3863)
!10844 = !DILocation(line: 3227, column: 19, scope: !3863)
!10845 = !DILocation(line: 3229, column: 24, scope: !3863)
!10846 = !DILocation(line: 3229, column: 2, scope: !3863)
!10847 = !DILocation(line: 3231, column: 9, scope: !3863)
!10848 = !DILocation(line: 3231, column: 2, scope: !3863)
!10849 = !DILocation(line: 3232, column: 1, scope: !3863)
!10850 = distinct !DISubprogram(name: "regmap_get_val_bytes", scope: !3, file: !3, line: 3243, type: !3694, scopeLine: 3244, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10851 = !DILocalVariable(name: "map", arg: 1, scope: !10850, file: !3, line: 3243, type: !6)
!10852 = !DILocation(line: 3243, column: 41, scope: !10850)
!10853 = !DILocation(line: 3245, column: 6, scope: !10854)
!10854 = distinct !DILexicalBlock(scope: !10850, file: !3, line: 3245, column: 6)
!10855 = !DILocation(line: 3245, column: 11, scope: !10854)
!10856 = !DILocation(line: 3245, column: 18, scope: !10854)
!10857 = !DILocation(line: 3245, column: 6, scope: !10850)
!10858 = !DILocation(line: 3246, column: 3, scope: !10854)
!10859 = !DILocation(line: 3248, column: 9, scope: !10850)
!10860 = !DILocation(line: 3248, column: 14, scope: !10850)
!10861 = !DILocation(line: 3248, column: 21, scope: !10850)
!10862 = !DILocation(line: 3248, column: 2, scope: !10850)
!10863 = !DILocation(line: 3249, column: 1, scope: !10850)
!10864 = distinct !DISubprogram(name: "regmap_get_max_register", scope: !3, file: !3, line: 3260, type: !3694, scopeLine: 3261, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10865 = !DILocalVariable(name: "map", arg: 1, scope: !10864, file: !3, line: 3260, type: !6)
!10866 = !DILocation(line: 3260, column: 44, scope: !10864)
!10867 = !DILocation(line: 3262, column: 9, scope: !10864)
!10868 = !DILocation(line: 3262, column: 14, scope: !10864)
!10869 = !DILocation(line: 3262, column: 29, scope: !10864)
!10870 = !DILocation(line: 3262, column: 34, scope: !10864)
!10871 = !DILocation(line: 3262, column: 2, scope: !10864)
!10872 = distinct !DISubprogram(name: "regmap_get_reg_stride", scope: !3, file: !3, line: 3274, type: !3694, scopeLine: 3275, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10873 = !DILocalVariable(name: "map", arg: 1, scope: !10872, file: !3, line: 3274, type: !6)
!10874 = !DILocation(line: 3274, column: 42, scope: !10872)
!10875 = !DILocation(line: 3276, column: 9, scope: !10872)
!10876 = !DILocation(line: 3276, column: 14, scope: !10872)
!10877 = !DILocation(line: 3276, column: 2, scope: !10872)
!10878 = distinct !DISubprogram(name: "regmap_parse_val", scope: !3, file: !3, line: 3280, type: !10879, scopeLine: 3282, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10879 = !DISubroutineType(types: !10880)
!10880 = !{!104, !6, !1880, !2381}
!10881 = !DILocalVariable(name: "map", arg: 1, scope: !10878, file: !3, line: 3280, type: !6)
!10882 = !DILocation(line: 3280, column: 37, scope: !10878)
!10883 = !DILocalVariable(name: "buf", arg: 2, scope: !10878, file: !3, line: 3280, type: !1880)
!10884 = !DILocation(line: 3280, column: 54, scope: !10878)
!10885 = !DILocalVariable(name: "val", arg: 3, scope: !10878, file: !3, line: 3281, type: !2381)
!10886 = !DILocation(line: 3281, column: 18, scope: !10878)
!10887 = !DILocation(line: 3283, column: 7, scope: !10888)
!10888 = distinct !DILexicalBlock(scope: !10878, file: !3, line: 3283, column: 6)
!10889 = !DILocation(line: 3283, column: 12, scope: !10888)
!10890 = !DILocation(line: 3283, column: 19, scope: !10888)
!10891 = !DILocation(line: 3283, column: 6, scope: !10878)
!10892 = !DILocation(line: 3284, column: 3, scope: !10888)
!10893 = !DILocation(line: 3286, column: 9, scope: !10878)
!10894 = !DILocation(line: 3286, column: 14, scope: !10878)
!10895 = !DILocation(line: 3286, column: 21, scope: !10878)
!10896 = !DILocation(line: 3286, column: 31, scope: !10878)
!10897 = !DILocation(line: 3286, column: 3, scope: !10878)
!10898 = !DILocation(line: 3286, column: 7, scope: !10878)
!10899 = !DILocation(line: 3288, column: 2, scope: !10878)
!10900 = !DILocation(line: 3289, column: 1, scope: !10878)
!10901 = distinct !DISubprogram(name: "regmap_initcall", scope: !3, file: !3, line: 3292, type: !10902, scopeLine: 3293, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10902 = !DISubroutineType(types: !10903)
!10903 = !{!104}
!10904 = !DILocation(line: 3294, column: 2, scope: !10901)
!10905 = !DILocation(line: 3296, column: 2, scope: !10901)
!10906 = distinct !DISubprogram(name: "get_order", scope: !10907, file: !10907, line: 29, type: !10908, scopeLine: 30, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10907 = !DIFile(filename: "./include/asm-generic/getorder.h", directory: "/home/lizy2001/genbc/linux")
!10908 = !DISubroutineType(types: !10909)
!10909 = !{!104, !57}
!10910 = !DILocalVariable(name: "x", arg: 1, scope: !10911, file: !6038, line: 366, type: !266)
!10911 = distinct !DISubprogram(name: "fls64", scope: !6038, file: !6038, line: 366, type: !10912, scopeLine: 367, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10912 = !DISubroutineType(types: !10913)
!10913 = !{!104, !266}
!10914 = !DILocation(line: 366, column: 40, scope: !10911, inlinedAt: !10915)
!10915 = distinct !DILocation(line: 46, column: 9, scope: !10906)
!10916 = !DILocalVariable(name: "bitpos", scope: !10911, file: !6038, line: 368, type: !104)
!10917 = !DILocation(line: 368, column: 6, scope: !10911, inlinedAt: !10915)
!10918 = !DILocalVariable(name: "size", arg: 1, scope: !10906, file: !10907, line: 29, type: !57)
!10919 = !DILocation(line: 29, column: 63, scope: !10906)
!10920 = !DILocation(line: 31, column: 27, scope: !10921)
!10921 = distinct !DILexicalBlock(scope: !10906, file: !10907, line: 31, column: 6)
!10922 = !DILocation(line: 31, column: 6, scope: !10921)
!10923 = !DILocation(line: 31, column: 6, scope: !10906)
!10924 = !DILocation(line: 32, column: 8, scope: !10925)
!10925 = distinct !DILexicalBlock(scope: !10926, file: !10907, line: 32, column: 7)
!10926 = distinct !DILexicalBlock(scope: !10921, file: !10907, line: 31, column: 34)
!10927 = !DILocation(line: 32, column: 7, scope: !10926)
!10928 = !DILocation(line: 33, column: 4, scope: !10925)
!10929 = !DILocation(line: 35, column: 7, scope: !10930)
!10930 = distinct !DILexicalBlock(scope: !10926, file: !10907, line: 35, column: 7)
!10931 = !DILocation(line: 35, column: 12, scope: !10930)
!10932 = !DILocation(line: 35, column: 7, scope: !10926)
!10933 = !DILocation(line: 36, column: 4, scope: !10930)
!10934 = !DILocation(line: 38, column: 10, scope: !10926)
!10935 = !DILocation(line: 38, column: 28, scope: !10926)
!10936 = !DILocation(line: 38, column: 41, scope: !10926)
!10937 = !DILocation(line: 38, column: 3, scope: !10926)
!10938 = !DILocation(line: 41, column: 6, scope: !10906)
!10939 = !DILocation(line: 42, column: 7, scope: !10906)
!10940 = !DILocation(line: 46, column: 15, scope: !10906)
!10941 = !DILocation(line: 374, column: 2, scope: !10911, inlinedAt: !10915)
!10942 = !DILocation(line: 376, column: 14, scope: !10911, inlinedAt: !10915)
!10943 = !{i32 456039}
!10944 = !DILocation(line: 377, column: 9, scope: !10911, inlinedAt: !10915)
!10945 = !DILocation(line: 377, column: 16, scope: !10911, inlinedAt: !10915)
!10946 = !DILocation(line: 46, column: 2, scope: !10906)
!10947 = !DILocation(line: 48, column: 1, scope: !10906)
!10948 = distinct !DISubprogram(name: "__ilog2_u64", scope: !6018, file: !6018, line: 30, type: !10949, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10949 = !DISubroutineType(types: !10950)
!10950 = !{!104, !265}
!10951 = !DILocation(line: 366, column: 40, scope: !10911, inlinedAt: !10952)
!10952 = distinct !DILocation(line: 32, column: 9, scope: !10948)
!10953 = !DILocation(line: 368, column: 6, scope: !10911, inlinedAt: !10952)
!10954 = !DILocalVariable(name: "n", arg: 1, scope: !10948, file: !6018, line: 30, type: !265)
!10955 = !DILocation(line: 30, column: 21, scope: !10948)
!10956 = !DILocation(line: 32, column: 15, scope: !10948)
!10957 = !DILocation(line: 374, column: 2, scope: !10911, inlinedAt: !10952)
!10958 = !DILocation(line: 376, column: 14, scope: !10911, inlinedAt: !10952)
!10959 = !DILocation(line: 377, column: 9, scope: !10911, inlinedAt: !10952)
!10960 = !DILocation(line: 377, column: 16, scope: !10911, inlinedAt: !10952)
!10961 = !DILocation(line: 32, column: 18, scope: !10948)
!10962 = !DILocation(line: 32, column: 2, scope: !10948)
!10963 = distinct !DISubprogram(name: "kasan_kmalloc", scope: !10964, file: !10964, line: 137, type: !10965, scopeLine: 139, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10964 = !DIFile(filename: "./include/linux/kasan.h", directory: "/home/lizy2001/genbc/linux")
!10965 = !DISubroutineType(types: !10966)
!10966 = !{!64, !777, !1880, !167, !69}
!10967 = !DILocalVariable(name: "s", arg: 1, scope: !10963, file: !10964, line: 137, type: !777)
!10968 = !DILocation(line: 137, column: 54, scope: !10963)
!10969 = !DILocalVariable(name: "object", arg: 2, scope: !10963, file: !10964, line: 137, type: !1880)
!10970 = !DILocation(line: 137, column: 69, scope: !10963)
!10971 = !DILocalVariable(name: "size", arg: 3, scope: !10963, file: !10964, line: 138, type: !167)
!10972 = !DILocation(line: 138, column: 12, scope: !10963)
!10973 = !DILocalVariable(name: "flags", arg: 4, scope: !10963, file: !10964, line: 138, type: !69)
!10974 = !DILocation(line: 138, column: 24, scope: !10963)
!10975 = !DILocation(line: 140, column: 17, scope: !10963)
!10976 = !DILocation(line: 140, column: 2, scope: !10963)
!10977 = distinct !DISubprogram(name: "hwspin_lock_timeout_irqsave", scope: !3743, file: !3743, line: 281, type: !10978, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10978 = !DISubroutineType(types: !10979)
!10979 = !{!104, !3741, !70, !10980}
!10980 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !57, size: 64)
!10981 = !DILocalVariable(name: "hwlock", arg: 1, scope: !10977, file: !3743, line: 281, type: !3741)
!10982 = !DILocation(line: 281, column: 66, scope: !10977)
!10983 = !DILocalVariable(name: "to", arg: 2, scope: !10977, file: !3743, line: 282, type: !70)
!10984 = !DILocation(line: 282, column: 18, scope: !10977)
!10985 = !DILocalVariable(name: "flags", arg: 3, scope: !10977, file: !3743, line: 282, type: !10980)
!10986 = !DILocation(line: 282, column: 37, scope: !10977)
!10987 = !DILocation(line: 284, column: 31, scope: !10977)
!10988 = !DILocation(line: 284, column: 39, scope: !10977)
!10989 = !DILocation(line: 284, column: 60, scope: !10977)
!10990 = !DILocation(line: 284, column: 9, scope: !10977)
!10991 = !DILocation(line: 284, column: 2, scope: !10977)
!10992 = distinct !DISubprogram(name: "__hwspin_lock_timeout", scope: !3743, file: !3743, line: 113, type: !10993, scopeLine: 115, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!10993 = !DISubroutineType(types: !10994)
!10994 = !{!104, !3741, !70, !104, !10980}
!10995 = !DILocalVariable(name: "hwlock", arg: 1, scope: !10992, file: !3743, line: 113, type: !3741)
!10996 = !DILocation(line: 113, column: 46, scope: !10992)
!10997 = !DILocalVariable(name: "to", arg: 2, scope: !10992, file: !3743, line: 113, type: !70)
!10998 = !DILocation(line: 113, column: 67, scope: !10992)
!10999 = !DILocalVariable(name: "mode", arg: 3, scope: !10992, file: !3743, line: 114, type: !104)
!11000 = !DILocation(line: 114, column: 10, scope: !10992)
!11001 = !DILocalVariable(name: "flags", arg: 4, scope: !10992, file: !3743, line: 114, type: !10980)
!11002 = !DILocation(line: 114, column: 31, scope: !10992)
!11003 = !DILocation(line: 116, column: 2, scope: !10992)
!11004 = distinct !DISubprogram(name: "hwspin_unlock_irqrestore", scope: !3743, file: !3743, line: 392, type: !11005, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11005 = !DISubroutineType(types: !11006)
!11006 = !{null, !3741, !10980}
!11007 = !DILocalVariable(name: "hwlock", arg: 1, scope: !11004, file: !3743, line: 392, type: !3741)
!11008 = !DILocation(line: 392, column: 64, scope: !11004)
!11009 = !DILocalVariable(name: "flags", arg: 2, scope: !11004, file: !3743, line: 393, type: !10980)
!11010 = !DILocation(line: 393, column: 23, scope: !11004)
!11011 = !DILocation(line: 395, column: 18, scope: !11004)
!11012 = !DILocation(line: 395, column: 43, scope: !11004)
!11013 = !DILocation(line: 395, column: 2, scope: !11004)
!11014 = !DILocation(line: 396, column: 1, scope: !11004)
!11015 = distinct !DISubprogram(name: "__hwspin_unlock", scope: !3743, file: !3743, line: 126, type: !11016, scopeLine: 127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11016 = !DISubroutineType(types: !11017)
!11017 = !{null, !3741, !104, !10980}
!11018 = !DILocalVariable(name: "hwlock", arg: 1, scope: !11015, file: !3743, line: 126, type: !3741)
!11019 = !DILocation(line: 126, column: 41, scope: !11015)
!11020 = !DILocalVariable(name: "mode", arg: 2, scope: !11015, file: !3743, line: 126, type: !104)
!11021 = !DILocation(line: 126, column: 53, scope: !11015)
!11022 = !DILocalVariable(name: "flags", arg: 3, scope: !11015, file: !3743, line: 126, type: !10980)
!11023 = !DILocation(line: 126, column: 74, scope: !11015)
!11024 = !DILocation(line: 128, column: 1, scope: !11015)
!11025 = distinct !DISubprogram(name: "hwspin_lock_timeout_irq", scope: !3743, file: !3743, line: 305, type: !11026, scopeLine: 306, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11026 = !DISubroutineType(types: !11027)
!11027 = !{!104, !3741, !70}
!11028 = !DILocalVariable(name: "hwlock", arg: 1, scope: !11025, file: !3743, line: 305, type: !3741)
!11029 = !DILocation(line: 305, column: 48, scope: !11025)
!11030 = !DILocalVariable(name: "to", arg: 2, scope: !11025, file: !3743, line: 305, type: !70)
!11031 = !DILocation(line: 305, column: 69, scope: !11025)
!11032 = !DILocation(line: 307, column: 31, scope: !11025)
!11033 = !DILocation(line: 307, column: 39, scope: !11025)
!11034 = !DILocation(line: 307, column: 9, scope: !11025)
!11035 = !DILocation(line: 307, column: 2, scope: !11025)
!11036 = distinct !DISubprogram(name: "hwspin_unlock_irq", scope: !3743, file: !3743, line: 409, type: !11037, scopeLine: 410, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11037 = !DISubroutineType(types: !11038)
!11038 = !{null, !3741}
!11039 = !DILocalVariable(name: "hwlock", arg: 1, scope: !11036, file: !3743, line: 409, type: !3741)
!11040 = !DILocation(line: 409, column: 57, scope: !11036)
!11041 = !DILocation(line: 411, column: 18, scope: !11036)
!11042 = !DILocation(line: 411, column: 2, scope: !11036)
!11043 = !DILocation(line: 412, column: 1, scope: !11036)
!11044 = distinct !DISubprogram(name: "hwspin_lock_timeout", scope: !3743, file: !3743, line: 375, type: !11026, scopeLine: 376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11045 = !DILocalVariable(name: "hwlock", arg: 1, scope: !11044, file: !3743, line: 375, type: !3741)
!11046 = !DILocation(line: 375, column: 44, scope: !11044)
!11047 = !DILocalVariable(name: "to", arg: 2, scope: !11044, file: !3743, line: 375, type: !70)
!11048 = !DILocation(line: 375, column: 65, scope: !11044)
!11049 = !DILocation(line: 377, column: 31, scope: !11044)
!11050 = !DILocation(line: 377, column: 39, scope: !11044)
!11051 = !DILocation(line: 377, column: 9, scope: !11044)
!11052 = !DILocation(line: 377, column: 2, scope: !11044)
!11053 = distinct !DISubprogram(name: "hwspin_unlock", scope: !3743, file: !3743, line: 455, type: !11037, scopeLine: 456, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11054 = !DILocalVariable(name: "hwlock", arg: 1, scope: !11053, file: !3743, line: 455, type: !3741)
!11055 = !DILocation(line: 455, column: 53, scope: !11053)
!11056 = !DILocation(line: 457, column: 18, scope: !11053)
!11057 = !DILocation(line: 457, column: 2, scope: !11053)
!11058 = !DILocation(line: 458, column: 1, scope: !11053)
!11059 = distinct !DISubprogram(name: "__fswab16", scope: !6548, file: !6548, line: 48, type: !11060, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11060 = !DISubroutineType(types: !11061)
!11061 = !{!695, !695}
!11062 = !DILocalVariable(name: "val", arg: 1, scope: !11059, file: !6548, line: 48, type: !695)
!11063 = !DILocation(line: 48, column: 57, scope: !11059)
!11064 = !DILocation(line: 53, column: 9, scope: !11059)
!11065 = !DILocation(line: 53, column: 2, scope: !11059)
!11066 = distinct !DISubprogram(name: "__fswab32", scope: !6548, file: !6548, line: 57, type: !11067, scopeLine: 58, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11067 = !DISubroutineType(types: !11068)
!11068 = !{!262, !262}
!11069 = !DILocalVariable(name: "val", arg: 1, scope: !11066, file: !6548, line: 57, type: !262)
!11070 = !DILocation(line: 57, column: 57, scope: !11066)
!11071 = !DILocation(line: 60, column: 23, scope: !11066)
!11072 = !DILocation(line: 60, column: 9, scope: !11066)
!11073 = !DILocation(line: 60, column: 2, scope: !11066)
!11074 = distinct !DISubprogram(name: "__arch_swab32", scope: !11075, file: !11075, line: 8, type: !11067, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11075 = !DIFile(filename: "./arch/x86/include/uapi/asm/swab.h", directory: "/home/lizy2001/genbc/linux")
!11076 = !DILocalVariable(name: "val", arg: 1, scope: !11074, file: !11075, line: 8, type: !262)
!11077 = !DILocation(line: 8, column: 61, scope: !11074)
!11078 = !DILocation(line: 10, column: 38, scope: !11074)
!11079 = !DILocation(line: 10, column: 2, scope: !11074)
!11080 = !{i32 576263}
!11081 = !DILocation(line: 11, column: 9, scope: !11074)
!11082 = !DILocation(line: 11, column: 2, scope: !11074)
!11083 = distinct !DISubprogram(name: "__fswab64", scope: !6548, file: !6548, line: 66, type: !11084, scopeLine: 67, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11084 = !DISubroutineType(types: !11085)
!11085 = !{!266, !266}
!11086 = !DILocalVariable(name: "val", arg: 1, scope: !11083, file: !6548, line: 66, type: !266)
!11087 = !DILocation(line: 66, column: 57, scope: !11083)
!11088 = !DILocation(line: 69, column: 23, scope: !11083)
!11089 = !DILocation(line: 69, column: 9, scope: !11083)
!11090 = !DILocation(line: 69, column: 2, scope: !11083)
!11091 = distinct !DISubprogram(name: "__arch_swab64", scope: !11075, file: !11075, line: 15, type: !11084, scopeLine: 16, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11092 = !DILocalVariable(name: "val", arg: 1, scope: !11091, file: !11075, line: 15, type: !266)
!11093 = !DILocation(line: 15, column: 61, scope: !11091)
!11094 = !DILocation(line: 31, column: 38, scope: !11091)
!11095 = !DILocation(line: 31, column: 2, scope: !11091)
!11096 = !{i32 576667}
!11097 = !DILocation(line: 32, column: 9, scope: !11091)
!11098 = !DILocation(line: 32, column: 2, scope: !11091)
!11099 = distinct !DISubprogram(name: "rb_link_node", scope: !595, file: !595, line: 69, type: !11100, scopeLine: 71, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11100 = !DISubroutineType(types: !11101)
!11101 = !{null, !601, !601, !7008}
!11102 = !DILocalVariable(name: "node", arg: 1, scope: !11099, file: !595, line: 69, type: !601)
!11103 = !DILocation(line: 69, column: 49, scope: !11099)
!11104 = !DILocalVariable(name: "parent", arg: 2, scope: !11099, file: !595, line: 69, type: !601)
!11105 = !DILocation(line: 69, column: 71, scope: !11099)
!11106 = !DILocalVariable(name: "rb_link", arg: 3, scope: !11099, file: !595, line: 70, type: !7008)
!11107 = !DILocation(line: 70, column: 22, scope: !11099)
!11108 = !DILocation(line: 72, column: 43, scope: !11099)
!11109 = !DILocation(line: 72, column: 28, scope: !11099)
!11110 = !DILocation(line: 72, column: 2, scope: !11099)
!11111 = !DILocation(line: 72, column: 8, scope: !11099)
!11112 = !DILocation(line: 72, column: 26, scope: !11099)
!11113 = !DILocation(line: 73, column: 18, scope: !11099)
!11114 = !DILocation(line: 73, column: 24, scope: !11099)
!11115 = !DILocation(line: 73, column: 33, scope: !11099)
!11116 = !DILocation(line: 73, column: 2, scope: !11099)
!11117 = !DILocation(line: 73, column: 8, scope: !11099)
!11118 = !DILocation(line: 73, column: 16, scope: !11099)
!11119 = !DILocation(line: 75, column: 13, scope: !11099)
!11120 = !DILocation(line: 75, column: 3, scope: !11099)
!11121 = !DILocation(line: 75, column: 11, scope: !11099)
!11122 = !DILocation(line: 76, column: 1, scope: !11099)
!11123 = distinct !DISubprogram(name: "kmalloc_array", scope: !3816, file: !3816, line: 584, type: !7326, scopeLine: 585, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11124 = !DILocation(line: 445, column: 72, scope: !5572, inlinedAt: !11125)
!11125 = distinct !DILocation(line: 552, column: 10, scope: !5577, inlinedAt: !11126)
!11126 = distinct !DILocation(line: 591, column: 10, scope: !11127)
!11127 = distinct !DILexicalBlock(scope: !11123, file: !3816, line: 590, column: 6)
!11128 = !DILocation(line: 446, column: 9, scope: !5572, inlinedAt: !11125)
!11129 = !DILocation(line: 446, column: 23, scope: !5572, inlinedAt: !11125)
!11130 = !DILocation(line: 448, column: 8, scope: !5572, inlinedAt: !11125)
!11131 = !DILocation(line: 318, column: 67, scope: !5588, inlinedAt: !11132)
!11132 = distinct !DILocation(line: 553, column: 20, scope: !5577, inlinedAt: !11126)
!11133 = !DILocation(line: 346, column: 58, scope: !5594, inlinedAt: !11134)
!11134 = distinct !DILocation(line: 547, column: 11, scope: !5577, inlinedAt: !11126)
!11135 = !DILocation(line: 472, column: 28, scope: !5600, inlinedAt: !11136)
!11136 = distinct !DILocation(line: 481, column: 9, scope: !5605, inlinedAt: !11137)
!11137 = distinct !DILocation(line: 545, column: 11, scope: !5607, inlinedAt: !11126)
!11138 = !DILocation(line: 472, column: 40, scope: !5600, inlinedAt: !11136)
!11139 = !DILocation(line: 472, column: 60, scope: !5600, inlinedAt: !11136)
!11140 = !DILocation(line: 478, column: 51, scope: !5605, inlinedAt: !11137)
!11141 = !DILocation(line: 478, column: 63, scope: !5605, inlinedAt: !11137)
!11142 = !DILocation(line: 480, column: 15, scope: !5605, inlinedAt: !11137)
!11143 = !DILocation(line: 538, column: 45, scope: !5579, inlinedAt: !11126)
!11144 = !DILocation(line: 538, column: 57, scope: !5579, inlinedAt: !11126)
!11145 = !DILocation(line: 542, column: 16, scope: !5577, inlinedAt: !11126)
!11146 = !DILocalVariable(name: "n", arg: 1, scope: !11123, file: !3816, line: 584, type: !167)
!11147 = !DILocation(line: 584, column: 42, scope: !11123)
!11148 = !DILocalVariable(name: "size", arg: 2, scope: !11123, file: !3816, line: 584, type: !167)
!11149 = !DILocation(line: 584, column: 52, scope: !11123)
!11150 = !DILocalVariable(name: "flags", arg: 3, scope: !11123, file: !3816, line: 584, type: !69)
!11151 = !DILocation(line: 584, column: 64, scope: !11123)
!11152 = !DILocalVariable(name: "bytes", scope: !11123, file: !3816, line: 586, type: !167)
!11153 = !DILocation(line: 586, column: 9, scope: !11123)
!11154 = !DILocalVariable(name: "__a", scope: !11155, file: !3816, line: 588, type: !167)
!11155 = distinct !DILexicalBlock(scope: !11156, file: !3816, line: 588, column: 6)
!11156 = distinct !DILexicalBlock(scope: !11123, file: !3816, line: 588, column: 6)
!11157 = !DILocation(line: 588, column: 6, scope: !11155)
!11158 = !DILocalVariable(name: "__b", scope: !11155, file: !3816, line: 588, type: !167)
!11159 = !DILocalVariable(name: "__d", scope: !11155, file: !3816, line: 588, type: !11160)
!11160 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !167, size: 64)
!11161 = !DILocation(line: 588, column: 6, scope: !11156)
!11162 = !DILocation(line: 588, column: 6, scope: !11123)
!11163 = !DILocation(line: 589, column: 3, scope: !11156)
!11164 = !DILocation(line: 590, column: 27, scope: !11127)
!11165 = !DILocation(line: 590, column: 6, scope: !11127)
!11166 = !DILocation(line: 590, column: 30, scope: !11127)
!11167 = !DILocation(line: 590, column: 54, scope: !11127)
!11168 = !DILocation(line: 590, column: 33, scope: !11127)
!11169 = !DILocation(line: 590, column: 6, scope: !11123)
!11170 = !DILocation(line: 591, column: 18, scope: !11127)
!11171 = !DILocation(line: 591, column: 25, scope: !11127)
!11172 = !DILocation(line: 540, column: 27, scope: !5578, inlinedAt: !11126)
!11173 = !DILocation(line: 540, column: 6, scope: !5578, inlinedAt: !11126)
!11174 = !DILocation(line: 540, column: 6, scope: !5579, inlinedAt: !11126)
!11175 = !DILocation(line: 544, column: 7, scope: !5607, inlinedAt: !11126)
!11176 = !DILocation(line: 544, column: 12, scope: !5607, inlinedAt: !11126)
!11177 = !DILocation(line: 544, column: 7, scope: !5577, inlinedAt: !11126)
!11178 = !DILocation(line: 545, column: 25, scope: !5607, inlinedAt: !11126)
!11179 = !DILocation(line: 545, column: 31, scope: !5607, inlinedAt: !11126)
!11180 = !DILocation(line: 480, column: 33, scope: !5605, inlinedAt: !11137)
!11181 = !DILocation(line: 480, column: 23, scope: !5605, inlinedAt: !11137)
!11182 = !DILocation(line: 481, column: 29, scope: !5605, inlinedAt: !11137)
!11183 = !DILocation(line: 481, column: 35, scope: !5605, inlinedAt: !11137)
!11184 = !DILocation(line: 481, column: 42, scope: !5605, inlinedAt: !11137)
!11185 = !DILocation(line: 474, column: 23, scope: !5600, inlinedAt: !11136)
!11186 = !DILocation(line: 474, column: 29, scope: !5600, inlinedAt: !11136)
!11187 = !DILocation(line: 474, column: 36, scope: !5600, inlinedAt: !11136)
!11188 = !DILocation(line: 474, column: 9, scope: !5600, inlinedAt: !11136)
!11189 = !DILocation(line: 545, column: 4, scope: !5607, inlinedAt: !11126)
!11190 = !DILocation(line: 547, column: 25, scope: !5577, inlinedAt: !11126)
!11191 = !DILocation(line: 348, column: 7, scope: !5651, inlinedAt: !11134)
!11192 = !DILocation(line: 348, column: 6, scope: !5594, inlinedAt: !11134)
!11193 = !DILocation(line: 349, column: 3, scope: !5651, inlinedAt: !11134)
!11194 = !DILocation(line: 351, column: 6, scope: !5655, inlinedAt: !11134)
!11195 = !DILocation(line: 351, column: 11, scope: !5655, inlinedAt: !11134)
!11196 = !DILocation(line: 351, column: 6, scope: !5594, inlinedAt: !11134)
!11197 = !DILocation(line: 352, column: 3, scope: !5655, inlinedAt: !11134)
!11198 = !DILocation(line: 354, column: 32, scope: !5660, inlinedAt: !11134)
!11199 = !DILocation(line: 354, column: 37, scope: !5660, inlinedAt: !11134)
!11200 = !DILocation(line: 354, column: 42, scope: !5660, inlinedAt: !11134)
!11201 = !DILocation(line: 354, column: 45, scope: !5660, inlinedAt: !11134)
!11202 = !DILocation(line: 354, column: 50, scope: !5660, inlinedAt: !11134)
!11203 = !DILocation(line: 354, column: 6, scope: !5594, inlinedAt: !11134)
!11204 = !DILocation(line: 355, column: 3, scope: !5660, inlinedAt: !11134)
!11205 = !DILocation(line: 356, column: 32, scope: !5668, inlinedAt: !11134)
!11206 = !DILocation(line: 356, column: 37, scope: !5668, inlinedAt: !11134)
!11207 = !DILocation(line: 356, column: 43, scope: !5668, inlinedAt: !11134)
!11208 = !DILocation(line: 356, column: 46, scope: !5668, inlinedAt: !11134)
!11209 = !DILocation(line: 356, column: 51, scope: !5668, inlinedAt: !11134)
!11210 = !DILocation(line: 356, column: 6, scope: !5594, inlinedAt: !11134)
!11211 = !DILocation(line: 357, column: 3, scope: !5668, inlinedAt: !11134)
!11212 = !DILocation(line: 358, column: 6, scope: !5676, inlinedAt: !11134)
!11213 = !DILocation(line: 358, column: 11, scope: !5676, inlinedAt: !11134)
!11214 = !DILocation(line: 358, column: 6, scope: !5594, inlinedAt: !11134)
!11215 = !DILocation(line: 358, column: 26, scope: !5676, inlinedAt: !11134)
!11216 = !DILocation(line: 359, column: 6, scope: !5681, inlinedAt: !11134)
!11217 = !DILocation(line: 359, column: 11, scope: !5681, inlinedAt: !11134)
!11218 = !DILocation(line: 359, column: 6, scope: !5594, inlinedAt: !11134)
!11219 = !DILocation(line: 359, column: 26, scope: !5681, inlinedAt: !11134)
!11220 = !DILocation(line: 360, column: 6, scope: !5686, inlinedAt: !11134)
!11221 = !DILocation(line: 360, column: 11, scope: !5686, inlinedAt: !11134)
!11222 = !DILocation(line: 360, column: 6, scope: !5594, inlinedAt: !11134)
!11223 = !DILocation(line: 360, column: 26, scope: !5686, inlinedAt: !11134)
!11224 = !DILocation(line: 361, column: 6, scope: !5691, inlinedAt: !11134)
!11225 = !DILocation(line: 361, column: 11, scope: !5691, inlinedAt: !11134)
!11226 = !DILocation(line: 361, column: 6, scope: !5594, inlinedAt: !11134)
!11227 = !DILocation(line: 361, column: 26, scope: !5691, inlinedAt: !11134)
!11228 = !DILocation(line: 362, column: 6, scope: !5696, inlinedAt: !11134)
!11229 = !DILocation(line: 362, column: 11, scope: !5696, inlinedAt: !11134)
!11230 = !DILocation(line: 362, column: 6, scope: !5594, inlinedAt: !11134)
!11231 = !DILocation(line: 362, column: 26, scope: !5696, inlinedAt: !11134)
!11232 = !DILocation(line: 363, column: 6, scope: !5701, inlinedAt: !11134)
!11233 = !DILocation(line: 363, column: 11, scope: !5701, inlinedAt: !11134)
!11234 = !DILocation(line: 363, column: 6, scope: !5594, inlinedAt: !11134)
!11235 = !DILocation(line: 363, column: 26, scope: !5701, inlinedAt: !11134)
!11236 = !DILocation(line: 364, column: 6, scope: !5706, inlinedAt: !11134)
!11237 = !DILocation(line: 364, column: 11, scope: !5706, inlinedAt: !11134)
!11238 = !DILocation(line: 364, column: 6, scope: !5594, inlinedAt: !11134)
!11239 = !DILocation(line: 364, column: 26, scope: !5706, inlinedAt: !11134)
!11240 = !DILocation(line: 365, column: 6, scope: !5711, inlinedAt: !11134)
!11241 = !DILocation(line: 365, column: 11, scope: !5711, inlinedAt: !11134)
!11242 = !DILocation(line: 365, column: 6, scope: !5594, inlinedAt: !11134)
!11243 = !DILocation(line: 365, column: 26, scope: !5711, inlinedAt: !11134)
!11244 = !DILocation(line: 366, column: 6, scope: !5716, inlinedAt: !11134)
!11245 = !DILocation(line: 366, column: 11, scope: !5716, inlinedAt: !11134)
!11246 = !DILocation(line: 366, column: 6, scope: !5594, inlinedAt: !11134)
!11247 = !DILocation(line: 366, column: 26, scope: !5716, inlinedAt: !11134)
!11248 = !DILocation(line: 367, column: 6, scope: !5721, inlinedAt: !11134)
!11249 = !DILocation(line: 367, column: 11, scope: !5721, inlinedAt: !11134)
!11250 = !DILocation(line: 367, column: 6, scope: !5594, inlinedAt: !11134)
!11251 = !DILocation(line: 367, column: 26, scope: !5721, inlinedAt: !11134)
!11252 = !DILocation(line: 368, column: 6, scope: !5726, inlinedAt: !11134)
!11253 = !DILocation(line: 368, column: 11, scope: !5726, inlinedAt: !11134)
!11254 = !DILocation(line: 368, column: 6, scope: !5594, inlinedAt: !11134)
!11255 = !DILocation(line: 368, column: 26, scope: !5726, inlinedAt: !11134)
!11256 = !DILocation(line: 369, column: 6, scope: !5731, inlinedAt: !11134)
!11257 = !DILocation(line: 369, column: 11, scope: !5731, inlinedAt: !11134)
!11258 = !DILocation(line: 369, column: 6, scope: !5594, inlinedAt: !11134)
!11259 = !DILocation(line: 369, column: 26, scope: !5731, inlinedAt: !11134)
!11260 = !DILocation(line: 370, column: 6, scope: !5736, inlinedAt: !11134)
!11261 = !DILocation(line: 370, column: 11, scope: !5736, inlinedAt: !11134)
!11262 = !DILocation(line: 370, column: 6, scope: !5594, inlinedAt: !11134)
!11263 = !DILocation(line: 370, column: 26, scope: !5736, inlinedAt: !11134)
!11264 = !DILocation(line: 371, column: 6, scope: !5741, inlinedAt: !11134)
!11265 = !DILocation(line: 371, column: 11, scope: !5741, inlinedAt: !11134)
!11266 = !DILocation(line: 371, column: 6, scope: !5594, inlinedAt: !11134)
!11267 = !DILocation(line: 371, column: 26, scope: !5741, inlinedAt: !11134)
!11268 = !DILocation(line: 372, column: 6, scope: !5746, inlinedAt: !11134)
!11269 = !DILocation(line: 372, column: 11, scope: !5746, inlinedAt: !11134)
!11270 = !DILocation(line: 372, column: 6, scope: !5594, inlinedAt: !11134)
!11271 = !DILocation(line: 372, column: 26, scope: !5746, inlinedAt: !11134)
!11272 = !DILocation(line: 373, column: 6, scope: !5751, inlinedAt: !11134)
!11273 = !DILocation(line: 373, column: 11, scope: !5751, inlinedAt: !11134)
!11274 = !DILocation(line: 373, column: 6, scope: !5594, inlinedAt: !11134)
!11275 = !DILocation(line: 373, column: 26, scope: !5751, inlinedAt: !11134)
!11276 = !DILocation(line: 374, column: 6, scope: !5756, inlinedAt: !11134)
!11277 = !DILocation(line: 374, column: 11, scope: !5756, inlinedAt: !11134)
!11278 = !DILocation(line: 374, column: 6, scope: !5594, inlinedAt: !11134)
!11279 = !DILocation(line: 374, column: 26, scope: !5756, inlinedAt: !11134)
!11280 = !DILocation(line: 375, column: 6, scope: !5761, inlinedAt: !11134)
!11281 = !DILocation(line: 375, column: 11, scope: !5761, inlinedAt: !11134)
!11282 = !DILocation(line: 375, column: 6, scope: !5594, inlinedAt: !11134)
!11283 = !DILocation(line: 375, column: 27, scope: !5761, inlinedAt: !11134)
!11284 = !DILocation(line: 376, column: 6, scope: !5766, inlinedAt: !11134)
!11285 = !DILocation(line: 376, column: 11, scope: !5766, inlinedAt: !11134)
!11286 = !DILocation(line: 376, column: 6, scope: !5594, inlinedAt: !11134)
!11287 = !DILocation(line: 376, column: 32, scope: !5766, inlinedAt: !11134)
!11288 = !DILocation(line: 377, column: 6, scope: !5771, inlinedAt: !11134)
!11289 = !DILocation(line: 377, column: 11, scope: !5771, inlinedAt: !11134)
!11290 = !DILocation(line: 377, column: 6, scope: !5594, inlinedAt: !11134)
!11291 = !DILocation(line: 377, column: 32, scope: !5771, inlinedAt: !11134)
!11292 = !DILocation(line: 378, column: 6, scope: !5776, inlinedAt: !11134)
!11293 = !DILocation(line: 378, column: 11, scope: !5776, inlinedAt: !11134)
!11294 = !DILocation(line: 378, column: 6, scope: !5594, inlinedAt: !11134)
!11295 = !DILocation(line: 378, column: 32, scope: !5776, inlinedAt: !11134)
!11296 = !DILocation(line: 379, column: 6, scope: !5781, inlinedAt: !11134)
!11297 = !DILocation(line: 379, column: 11, scope: !5781, inlinedAt: !11134)
!11298 = !DILocation(line: 379, column: 6, scope: !5594, inlinedAt: !11134)
!11299 = !DILocation(line: 379, column: 33, scope: !5781, inlinedAt: !11134)
!11300 = !DILocation(line: 380, column: 6, scope: !5786, inlinedAt: !11134)
!11301 = !DILocation(line: 380, column: 11, scope: !5786, inlinedAt: !11134)
!11302 = !DILocation(line: 380, column: 6, scope: !5594, inlinedAt: !11134)
!11303 = !DILocation(line: 380, column: 33, scope: !5786, inlinedAt: !11134)
!11304 = !DILocation(line: 381, column: 6, scope: !5791, inlinedAt: !11134)
!11305 = !DILocation(line: 381, column: 11, scope: !5791, inlinedAt: !11134)
!11306 = !DILocation(line: 381, column: 6, scope: !5594, inlinedAt: !11134)
!11307 = !DILocation(line: 381, column: 33, scope: !5791, inlinedAt: !11134)
!11308 = !DILocation(line: 382, column: 2, scope: !5796, inlinedAt: !11134)
!11309 = !DILocation(line: 382, column: 2, scope: !5800, inlinedAt: !11134)
!11310 = !DILocation(line: 382, column: 2, scope: !5801, inlinedAt: !11134)
!11311 = !DILocation(line: 386, column: 1, scope: !5594, inlinedAt: !11134)
!11312 = !DILocation(line: 547, column: 9, scope: !5577, inlinedAt: !11126)
!11313 = !DILocation(line: 549, column: 8, scope: !5807, inlinedAt: !11126)
!11314 = !DILocation(line: 549, column: 7, scope: !5577, inlinedAt: !11126)
!11315 = !DILocation(line: 550, column: 4, scope: !5807, inlinedAt: !11126)
!11316 = !DILocation(line: 553, column: 33, scope: !5577, inlinedAt: !11126)
!11317 = !DILocation(line: 325, column: 6, scope: !5812, inlinedAt: !11132)
!11318 = !DILocation(line: 325, column: 6, scope: !5588, inlinedAt: !11132)
!11319 = !DILocation(line: 326, column: 3, scope: !5812, inlinedAt: !11132)
!11320 = !DILocation(line: 332, column: 9, scope: !5588, inlinedAt: !11132)
!11321 = !DILocation(line: 332, column: 15, scope: !5588, inlinedAt: !11132)
!11322 = !DILocation(line: 332, column: 2, scope: !5588, inlinedAt: !11132)
!11323 = !DILocation(line: 336, column: 1, scope: !5588, inlinedAt: !11132)
!11324 = !DILocation(line: 553, column: 5, scope: !5577, inlinedAt: !11126)
!11325 = !DILocation(line: 553, column: 41, scope: !5577, inlinedAt: !11126)
!11326 = !DILocation(line: 554, column: 5, scope: !5577, inlinedAt: !11126)
!11327 = !DILocation(line: 554, column: 12, scope: !5577, inlinedAt: !11126)
!11328 = !DILocation(line: 448, column: 31, scope: !5572, inlinedAt: !11125)
!11329 = !DILocation(line: 448, column: 34, scope: !5572, inlinedAt: !11125)
!11330 = !DILocation(line: 448, column: 14, scope: !5572, inlinedAt: !11125)
!11331 = !DILocation(line: 450, column: 22, scope: !5572, inlinedAt: !11125)
!11332 = !DILocation(line: 450, column: 25, scope: !5572, inlinedAt: !11125)
!11333 = !DILocation(line: 450, column: 30, scope: !5572, inlinedAt: !11125)
!11334 = !DILocation(line: 450, column: 36, scope: !5572, inlinedAt: !11125)
!11335 = !DILocation(line: 450, column: 8, scope: !5572, inlinedAt: !11125)
!11336 = !DILocation(line: 450, column: 6, scope: !5572, inlinedAt: !11125)
!11337 = !DILocation(line: 451, column: 9, scope: !5572, inlinedAt: !11125)
!11338 = !DILocation(line: 552, column: 3, scope: !5577, inlinedAt: !11126)
!11339 = !DILocation(line: 557, column: 19, scope: !5579, inlinedAt: !11126)
!11340 = !DILocation(line: 557, column: 25, scope: !5579, inlinedAt: !11126)
!11341 = !DILocation(line: 557, column: 9, scope: !5579, inlinedAt: !11126)
!11342 = !DILocation(line: 557, column: 2, scope: !5579, inlinedAt: !11126)
!11343 = !DILocation(line: 558, column: 1, scope: !5579, inlinedAt: !11126)
!11344 = !DILocation(line: 591, column: 3, scope: !11127)
!11345 = !DILocation(line: 592, column: 19, scope: !11123)
!11346 = !DILocation(line: 592, column: 26, scope: !11123)
!11347 = !DILocation(line: 592, column: 9, scope: !11123)
!11348 = !DILocation(line: 592, column: 2, scope: !11123)
!11349 = !DILocation(line: 593, column: 1, scope: !11123)
!11350 = distinct !DISubprogram(name: "__must_check_overflow", scope: !11351, file: !11351, line: 52, type: !11352, scopeLine: 53, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11351 = !DIFile(filename: "./include/linux/overflow.h", directory: "/home/lizy2001/genbc/linux")
!11352 = !DISubroutineType(types: !11353)
!11353 = !{!331, !331}
!11354 = !DILocalVariable(name: "overflow", arg: 1, scope: !11350, file: !11351, line: 52, type: !331)
!11355 = !DILocation(line: 52, column: 60, scope: !11350)
!11356 = !DILocation(line: 54, column: 9, scope: !11350)
!11357 = !DILocation(line: 54, column: 2, scope: !11350)
!11358 = distinct !DISubprogram(name: "devm_kmalloc_array", scope: !74, file: !74, line: 219, type: !7393, scopeLine: 221, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11359 = !DILocalVariable(name: "dev", arg: 1, scope: !11358, file: !74, line: 219, type: !72)
!11360 = !DILocation(line: 219, column: 55, scope: !11358)
!11361 = !DILocalVariable(name: "n", arg: 2, scope: !11358, file: !74, line: 220, type: !167)
!11362 = !DILocation(line: 220, column: 19, scope: !11358)
!11363 = !DILocalVariable(name: "size", arg: 3, scope: !11358, file: !74, line: 220, type: !167)
!11364 = !DILocation(line: 220, column: 29, scope: !11358)
!11365 = !DILocalVariable(name: "flags", arg: 4, scope: !11358, file: !74, line: 220, type: !69)
!11366 = !DILocation(line: 220, column: 41, scope: !11358)
!11367 = !DILocalVariable(name: "bytes", scope: !11358, file: !74, line: 222, type: !167)
!11368 = !DILocation(line: 222, column: 9, scope: !11358)
!11369 = !DILocalVariable(name: "__a", scope: !11370, file: !74, line: 224, type: !167)
!11370 = distinct !DILexicalBlock(scope: !11371, file: !74, line: 224, column: 6)
!11371 = distinct !DILexicalBlock(scope: !11358, file: !74, line: 224, column: 6)
!11372 = !DILocation(line: 224, column: 6, scope: !11370)
!11373 = !DILocalVariable(name: "__b", scope: !11370, file: !74, line: 224, type: !167)
!11374 = !DILocalVariable(name: "__d", scope: !11370, file: !74, line: 224, type: !11160)
!11375 = !DILocation(line: 224, column: 6, scope: !11371)
!11376 = !DILocation(line: 224, column: 6, scope: !11358)
!11377 = !DILocation(line: 225, column: 3, scope: !11371)
!11378 = !DILocation(line: 227, column: 22, scope: !11358)
!11379 = !DILocation(line: 227, column: 27, scope: !11358)
!11380 = !DILocation(line: 227, column: 34, scope: !11358)
!11381 = !DILocation(line: 227, column: 9, scope: !11358)
!11382 = !DILocation(line: 227, column: 2, scope: !11358)
!11383 = !DILocation(line: 228, column: 1, scope: !11358)
!11384 = distinct !DISubprogram(name: "__list_del_entry", scope: !6056, file: !6056, line: 130, type: !6057, scopeLine: 131, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11385 = !DILocalVariable(name: "entry", arg: 1, scope: !11384, file: !6056, line: 130, type: !50)
!11386 = !DILocation(line: 130, column: 55, scope: !11384)
!11387 = !DILocation(line: 132, column: 30, scope: !11388)
!11388 = distinct !DILexicalBlock(scope: !11384, file: !6056, line: 132, column: 6)
!11389 = !DILocation(line: 132, column: 7, scope: !11388)
!11390 = !DILocation(line: 132, column: 6, scope: !11384)
!11391 = !DILocation(line: 133, column: 3, scope: !11388)
!11392 = !DILocation(line: 135, column: 13, scope: !11384)
!11393 = !DILocation(line: 135, column: 20, scope: !11384)
!11394 = !DILocation(line: 135, column: 26, scope: !11384)
!11395 = !DILocation(line: 135, column: 33, scope: !11384)
!11396 = !DILocation(line: 135, column: 2, scope: !11384)
!11397 = !DILocation(line: 136, column: 1, scope: !11384)
!11398 = distinct !DISubprogram(name: "__list_del_entry_valid", scope: !6056, file: !6056, line: 51, type: !11399, scopeLine: 52, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11399 = !DISubroutineType(types: !11400)
!11400 = !{!331, !50}
!11401 = !DILocalVariable(name: "entry", arg: 1, scope: !11398, file: !6056, line: 51, type: !50)
!11402 = !DILocation(line: 51, column: 61, scope: !11398)
!11403 = !DILocation(line: 53, column: 2, scope: !11398)
!11404 = distinct !DISubprogram(name: "__list_del", scope: !6056, file: !6056, line: 110, type: !10552, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11405 = !DILocalVariable(name: "prev", arg: 1, scope: !11404, file: !6056, line: 110, type: !50)
!11406 = !DILocation(line: 110, column: 50, scope: !11404)
!11407 = !DILocalVariable(name: "next", arg: 2, scope: !11404, file: !6056, line: 110, type: !50)
!11408 = !DILocation(line: 110, column: 75, scope: !11404)
!11409 = !DILocation(line: 112, column: 15, scope: !11404)
!11410 = !DILocation(line: 112, column: 2, scope: !11404)
!11411 = !DILocation(line: 112, column: 8, scope: !11404)
!11412 = !DILocation(line: 112, column: 13, scope: !11404)
!11413 = !DILocation(line: 113, column: 2, scope: !11404)
!11414 = !DILocation(line: 113, column: 2, scope: !11415)
!11415 = distinct !DILexicalBlock(scope: !11404, file: !6056, line: 113, column: 2)
!11416 = !DILocation(line: 113, column: 2, scope: !11417)
!11417 = distinct !DILexicalBlock(scope: !11415, file: !6056, line: 113, column: 2)
!11418 = !DILocation(line: 113, column: 2, scope: !11419)
!11419 = distinct !DILexicalBlock(scope: !11415, file: !6056, line: 113, column: 2)
!11420 = !DILocation(line: 114, column: 1, scope: !11404)
!11421 = distinct !DISubprogram(name: "_regmap_range_lookup", scope: !3, file: !3, line: 560, type: !11422, scopeLine: 562, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11422 = !DISubroutineType(types: !11423)
!11423 = !{!3844, !6, !70}
!11424 = !DILocalVariable(name: "map", arg: 1, scope: !11421, file: !3, line: 560, type: !6)
!11425 = !DILocation(line: 560, column: 70, scope: !11421)
!11426 = !DILocalVariable(name: "reg", arg: 2, scope: !11421, file: !3, line: 561, type: !70)
!11427 = !DILocation(line: 561, column: 26, scope: !11421)
!11428 = !DILocalVariable(name: "node", scope: !11421, file: !3, line: 563, type: !601)
!11429 = !DILocation(line: 563, column: 18, scope: !11421)
!11430 = !DILocation(line: 563, column: 25, scope: !11421)
!11431 = !DILocation(line: 563, column: 30, scope: !11421)
!11432 = !DILocation(line: 563, column: 41, scope: !11421)
!11433 = !DILocation(line: 565, column: 2, scope: !11421)
!11434 = !DILocation(line: 565, column: 9, scope: !11421)
!11435 = !DILocalVariable(name: "this", scope: !11436, file: !3, line: 566, type: !3844)
!11436 = distinct !DILexicalBlock(scope: !11421, file: !3, line: 565, column: 15)
!11437 = !DILocation(line: 566, column: 29, scope: !11436)
!11438 = !DILocalVariable(name: "__mptr", scope: !11439, file: !3, line: 567, type: !64)
!11439 = distinct !DILexicalBlock(scope: !11436, file: !3, line: 567, column: 4)
!11440 = !DILocation(line: 567, column: 4, scope: !11439)
!11441 = !DILocation(line: 567, column: 4, scope: !11442)
!11442 = distinct !DILexicalBlock(scope: !11439, file: !3, line: 567, column: 4)
!11443 = !DILocation(line: 569, column: 7, scope: !11444)
!11444 = distinct !DILexicalBlock(scope: !11436, file: !3, line: 569, column: 7)
!11445 = !DILocation(line: 569, column: 13, scope: !11444)
!11446 = !DILocation(line: 569, column: 19, scope: !11444)
!11447 = !DILocation(line: 569, column: 11, scope: !11444)
!11448 = !DILocation(line: 569, column: 7, scope: !11436)
!11449 = !DILocation(line: 570, column: 11, scope: !11444)
!11450 = !DILocation(line: 570, column: 17, scope: !11444)
!11451 = !DILocation(line: 570, column: 9, scope: !11444)
!11452 = !DILocation(line: 570, column: 4, scope: !11444)
!11453 = !DILocation(line: 571, column: 12, scope: !11454)
!11454 = distinct !DILexicalBlock(scope: !11444, file: !3, line: 571, column: 12)
!11455 = !DILocation(line: 571, column: 18, scope: !11454)
!11456 = !DILocation(line: 571, column: 24, scope: !11454)
!11457 = !DILocation(line: 571, column: 16, scope: !11454)
!11458 = !DILocation(line: 571, column: 12, scope: !11444)
!11459 = !DILocation(line: 572, column: 11, scope: !11454)
!11460 = !DILocation(line: 572, column: 17, scope: !11454)
!11461 = !DILocation(line: 572, column: 9, scope: !11454)
!11462 = !DILocation(line: 572, column: 4, scope: !11454)
!11463 = !DILocation(line: 574, column: 11, scope: !11454)
!11464 = !DILocation(line: 574, column: 4, scope: !11454)
!11465 = distinct !{!11465, !11433, !11466}
!11466 = !DILocation(line: 575, column: 2, scope: !11421)
!11467 = !DILocation(line: 577, column: 2, scope: !11421)
!11468 = !DILocation(line: 578, column: 1, scope: !11421)
!11469 = distinct !DISubprogram(name: "_regmap_select_page", scope: !3, file: !3, line: 1554, type: !11470, scopeLine: 1557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11470 = !DISubroutineType(types: !11471)
!11471 = !{!104, !6, !2381, !3844, !70}
!11472 = !DILocalVariable(name: "map", arg: 1, scope: !11469, file: !3, line: 1554, type: !6)
!11473 = !DILocation(line: 1554, column: 47, scope: !11469)
!11474 = !DILocalVariable(name: "reg", arg: 2, scope: !11469, file: !3, line: 1554, type: !2381)
!11475 = !DILocation(line: 1554, column: 66, scope: !11469)
!11476 = !DILocalVariable(name: "range", arg: 3, scope: !11469, file: !3, line: 1555, type: !3844)
!11477 = !DILocation(line: 1555, column: 37, scope: !11469)
!11478 = !DILocalVariable(name: "val_num", arg: 4, scope: !11469, file: !3, line: 1556, type: !70)
!11479 = !DILocation(line: 1556, column: 24, scope: !11469)
!11480 = !DILocalVariable(name: "orig_work_buf", scope: !11469, file: !3, line: 1558, type: !64)
!11481 = !DILocation(line: 1558, column: 8, scope: !11469)
!11482 = !DILocalVariable(name: "win_offset", scope: !11469, file: !3, line: 1559, type: !70)
!11483 = !DILocation(line: 1559, column: 15, scope: !11469)
!11484 = !DILocalVariable(name: "win_page", scope: !11469, file: !3, line: 1560, type: !70)
!11485 = !DILocation(line: 1560, column: 15, scope: !11469)
!11486 = !DILocalVariable(name: "page_chg", scope: !11469, file: !3, line: 1561, type: !331)
!11487 = !DILocation(line: 1561, column: 7, scope: !11469)
!11488 = !DILocalVariable(name: "ret", scope: !11469, file: !3, line: 1562, type: !104)
!11489 = !DILocation(line: 1562, column: 6, scope: !11469)
!11490 = !DILocation(line: 1564, column: 17, scope: !11469)
!11491 = !DILocation(line: 1564, column: 16, scope: !11469)
!11492 = !DILocation(line: 1564, column: 23, scope: !11469)
!11493 = !DILocation(line: 1564, column: 30, scope: !11469)
!11494 = !DILocation(line: 1564, column: 21, scope: !11469)
!11495 = !DILocation(line: 1564, column: 43, scope: !11469)
!11496 = !DILocation(line: 1564, column: 50, scope: !11469)
!11497 = !DILocation(line: 1564, column: 41, scope: !11469)
!11498 = !DILocation(line: 1564, column: 13, scope: !11469)
!11499 = !DILocation(line: 1565, column: 15, scope: !11469)
!11500 = !DILocation(line: 1565, column: 14, scope: !11469)
!11501 = !DILocation(line: 1565, column: 21, scope: !11469)
!11502 = !DILocation(line: 1565, column: 28, scope: !11469)
!11503 = !DILocation(line: 1565, column: 19, scope: !11469)
!11504 = !DILocation(line: 1565, column: 41, scope: !11469)
!11505 = !DILocation(line: 1565, column: 48, scope: !11469)
!11506 = !DILocation(line: 1565, column: 39, scope: !11469)
!11507 = !DILocation(line: 1565, column: 11, scope: !11469)
!11508 = !DILocation(line: 1567, column: 6, scope: !11509)
!11509 = distinct !DILexicalBlock(scope: !11469, file: !3, line: 1567, column: 6)
!11510 = !DILocation(line: 1567, column: 14, scope: !11509)
!11511 = !DILocation(line: 1567, column: 6, scope: !11469)
!11512 = !DILocation(line: 1569, column: 8, scope: !11513)
!11513 = distinct !DILexicalBlock(scope: !11514, file: !3, line: 1569, column: 7)
!11514 = distinct !DILexicalBlock(scope: !11509, file: !3, line: 1567, column: 19)
!11515 = !DILocation(line: 1569, column: 7, scope: !11513)
!11516 = !DILocation(line: 1569, column: 14, scope: !11513)
!11517 = !DILocation(line: 1569, column: 12, scope: !11513)
!11518 = !DILocation(line: 1569, column: 22, scope: !11513)
!11519 = !DILocation(line: 1569, column: 28, scope: !11513)
!11520 = !DILocation(line: 1569, column: 35, scope: !11513)
!11521 = !DILocation(line: 1569, column: 26, scope: !11513)
!11522 = !DILocation(line: 1569, column: 7, scope: !11514)
!11523 = !DILocation(line: 1570, column: 4, scope: !11513)
!11524 = !DILocation(line: 1573, column: 7, scope: !11525)
!11525 = distinct !DILexicalBlock(scope: !11514, file: !3, line: 1573, column: 7)
!11526 = !DILocation(line: 1573, column: 17, scope: !11525)
!11527 = !DILocation(line: 1573, column: 24, scope: !11525)
!11528 = !DILocation(line: 1573, column: 37, scope: !11525)
!11529 = !DILocation(line: 1573, column: 35, scope: !11525)
!11530 = !DILocation(line: 1573, column: 15, scope: !11525)
!11531 = !DILocation(line: 1573, column: 7, scope: !11514)
!11532 = !DILocation(line: 1574, column: 4, scope: !11525)
!11533 = !DILocation(line: 1575, column: 2, scope: !11514)
!11534 = !DILocation(line: 1580, column: 6, scope: !11535)
!11535 = distinct !DILexicalBlock(scope: !11469, file: !3, line: 1580, column: 6)
!11536 = !DILocation(line: 1580, column: 14, scope: !11535)
!11537 = !DILocation(line: 1580, column: 18, scope: !11535)
!11538 = !DILocation(line: 1581, column: 6, scope: !11535)
!11539 = !DILocation(line: 1581, column: 13, scope: !11535)
!11540 = !DILocation(line: 1581, column: 28, scope: !11535)
!11541 = !DILocation(line: 1581, column: 26, scope: !11535)
!11542 = !DILocation(line: 1581, column: 42, scope: !11535)
!11543 = !DILocation(line: 1581, column: 49, scope: !11535)
!11544 = !DILocation(line: 1581, column: 39, scope: !11535)
!11545 = !DILocation(line: 1580, column: 6, scope: !11469)
!11546 = !DILocation(line: 1583, column: 19, scope: !11547)
!11547 = distinct !DILexicalBlock(scope: !11535, file: !3, line: 1581, column: 63)
!11548 = !DILocation(line: 1583, column: 24, scope: !11547)
!11549 = !DILocation(line: 1583, column: 17, scope: !11547)
!11550 = !DILocation(line: 1584, column: 19, scope: !11547)
!11551 = !DILocation(line: 1584, column: 24, scope: !11547)
!11552 = !DILocation(line: 1584, column: 3, scope: !11547)
!11553 = !DILocation(line: 1584, column: 8, scope: !11547)
!11554 = !DILocation(line: 1584, column: 17, scope: !11547)
!11555 = !DILocation(line: 1586, column: 29, scope: !11547)
!11556 = !DILocation(line: 1586, column: 34, scope: !11547)
!11557 = !DILocation(line: 1586, column: 41, scope: !11547)
!11558 = !DILocation(line: 1587, column: 8, scope: !11547)
!11559 = !DILocation(line: 1587, column: 15, scope: !11547)
!11560 = !DILocation(line: 1588, column: 8, scope: !11547)
!11561 = !DILocation(line: 1588, column: 20, scope: !11547)
!11562 = !DILocation(line: 1588, column: 27, scope: !11547)
!11563 = !DILocation(line: 1588, column: 17, scope: !11547)
!11564 = !DILocation(line: 1586, column: 9, scope: !11547)
!11565 = !DILocation(line: 1586, column: 7, scope: !11547)
!11566 = !DILocation(line: 1591, column: 19, scope: !11547)
!11567 = !DILocation(line: 1591, column: 3, scope: !11547)
!11568 = !DILocation(line: 1591, column: 8, scope: !11547)
!11569 = !DILocation(line: 1591, column: 17, scope: !11547)
!11570 = !DILocation(line: 1593, column: 7, scope: !11571)
!11571 = distinct !DILexicalBlock(scope: !11547, file: !3, line: 1593, column: 7)
!11572 = !DILocation(line: 1593, column: 11, scope: !11571)
!11573 = !DILocation(line: 1593, column: 7, scope: !11547)
!11574 = !DILocation(line: 1594, column: 11, scope: !11571)
!11575 = !DILocation(line: 1594, column: 4, scope: !11571)
!11576 = !DILocation(line: 1595, column: 2, scope: !11547)
!11577 = !DILocation(line: 1597, column: 9, scope: !11469)
!11578 = !DILocation(line: 1597, column: 16, scope: !11469)
!11579 = !DILocation(line: 1597, column: 31, scope: !11469)
!11580 = !DILocation(line: 1597, column: 29, scope: !11469)
!11581 = !DILocation(line: 1597, column: 3, scope: !11469)
!11582 = !DILocation(line: 1597, column: 7, scope: !11469)
!11583 = !DILocation(line: 1599, column: 2, scope: !11469)
!11584 = !DILocation(line: 1600, column: 1, scope: !11469)
!11585 = distinct !DISubprogram(name: "trace_regmap_hw_write_start", scope: !7845, file: !7845, line: 104, type: !11586, scopeLine: 104, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11586 = !DISubroutineType(types: !11587)
!11587 = !{null, !6, !70, !104}
!11588 = !DILocalVariable(name: "map", arg: 1, scope: !11585, file: !7845, line: 104, type: !6)
!11589 = !DILocation(line: 104, column: 1, scope: !11585)
!11590 = !DILocalVariable(name: "reg", arg: 2, scope: !11585, file: !7845, line: 104, type: !70)
!11591 = !DILocalVariable(name: "count", arg: 3, scope: !11585, file: !7845, line: 104, type: !104)
!11592 = distinct !DISubprogram(name: "trace_regmap_hw_write_done", scope: !7845, file: !7845, line: 111, type: !11586, scopeLine: 111, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11593 = !DILocalVariable(name: "map", arg: 1, scope: !11592, file: !7845, line: 111, type: !6)
!11594 = !DILocation(line: 111, column: 1, scope: !11592)
!11595 = !DILocalVariable(name: "reg", arg: 2, scope: !11592, file: !7845, line: 111, type: !70)
!11596 = !DILocalVariable(name: "count", arg: 3, scope: !11592, file: !7845, line: 111, type: !104)
!11597 = distinct !DISubprogram(name: "regmap_set_work_buf_flag_mask", scope: !3, file: !3, line: 1602, type: !11598, scopeLine: 1604, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11598 = !DISubroutineType(types: !11599)
!11599 = !{null, !6, !104, !57}
!11600 = !DILocalVariable(name: "map", arg: 1, scope: !11597, file: !3, line: 1602, type: !6)
!11601 = !DILocation(line: 1602, column: 58, scope: !11597)
!11602 = !DILocalVariable(name: "max_bytes", arg: 2, scope: !11597, file: !3, line: 1602, type: !104)
!11603 = !DILocation(line: 1602, column: 67, scope: !11597)
!11604 = !DILocalVariable(name: "mask", arg: 3, scope: !11597, file: !3, line: 1603, type: !57)
!11605 = !DILocation(line: 1603, column: 22, scope: !11597)
!11606 = !DILocalVariable(name: "buf", scope: !11597, file: !3, line: 1605, type: !3826)
!11607 = !DILocation(line: 1605, column: 6, scope: !11597)
!11608 = !DILocalVariable(name: "i", scope: !11597, file: !3, line: 1606, type: !104)
!11609 = !DILocation(line: 1606, column: 6, scope: !11597)
!11610 = !DILocation(line: 1608, column: 7, scope: !11611)
!11611 = distinct !DILexicalBlock(scope: !11597, file: !3, line: 1608, column: 6)
!11612 = !DILocation(line: 1608, column: 12, scope: !11611)
!11613 = !DILocation(line: 1608, column: 16, scope: !11611)
!11614 = !DILocation(line: 1608, column: 21, scope: !11611)
!11615 = !DILocation(line: 1608, column: 6, scope: !11597)
!11616 = !DILocation(line: 1609, column: 3, scope: !11611)
!11617 = !DILocation(line: 1611, column: 8, scope: !11597)
!11618 = !DILocation(line: 1611, column: 13, scope: !11597)
!11619 = !DILocation(line: 1611, column: 6, scope: !11597)
!11620 = !DILocation(line: 1613, column: 9, scope: !11621)
!11621 = distinct !DILexicalBlock(scope: !11597, file: !3, line: 1613, column: 2)
!11622 = !DILocation(line: 1613, column: 7, scope: !11621)
!11623 = !DILocation(line: 1613, column: 14, scope: !11624)
!11624 = distinct !DILexicalBlock(scope: !11621, file: !3, line: 1613, column: 2)
!11625 = !DILocation(line: 1613, column: 18, scope: !11624)
!11626 = !DILocation(line: 1613, column: 16, scope: !11624)
!11627 = !DILocation(line: 1613, column: 2, scope: !11621)
!11628 = !DILocation(line: 1614, column: 14, scope: !11624)
!11629 = !DILocation(line: 1614, column: 27, scope: !11624)
!11630 = !DILocation(line: 1614, column: 25, scope: !11624)
!11631 = !DILocation(line: 1614, column: 19, scope: !11624)
!11632 = !DILocation(line: 1614, column: 31, scope: !11624)
!11633 = !DILocation(line: 1614, column: 3, scope: !11624)
!11634 = !DILocation(line: 1614, column: 7, scope: !11624)
!11635 = !DILocation(line: 1614, column: 10, scope: !11624)
!11636 = !DILocation(line: 1613, column: 30, scope: !11624)
!11637 = !DILocation(line: 1613, column: 2, scope: !11624)
!11638 = distinct !{!11638, !11627, !11639}
!11639 = !DILocation(line: 1614, column: 33, scope: !11621)
!11640 = !DILocation(line: 1615, column: 1, scope: !11597)
!11641 = distinct !DISubprogram(name: "trace_regmap_async_write_start", scope: !7845, file: !7845, line: 195, type: !11586, scopeLine: 195, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11642 = !DILocalVariable(name: "map", arg: 1, scope: !11641, file: !7845, line: 195, type: !6)
!11643 = !DILocation(line: 195, column: 1, scope: !11641)
!11644 = !DILocalVariable(name: "reg", arg: 2, scope: !11641, file: !7845, line: 195, type: !70)
!11645 = !DILocalVariable(name: "count", arg: 3, scope: !11641, file: !7845, line: 195, type: !104)
!11646 = distinct !DISubprogram(name: "list_add_tail", scope: !6056, file: !6056, line: 98, type: !10552, scopeLine: 99, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11647 = !DILocalVariable(name: "new", arg: 1, scope: !11646, file: !6056, line: 98, type: !50)
!11648 = !DILocation(line: 98, column: 52, scope: !11646)
!11649 = !DILocalVariable(name: "head", arg: 2, scope: !11646, file: !6056, line: 98, type: !50)
!11650 = !DILocation(line: 98, column: 75, scope: !11646)
!11651 = !DILocation(line: 100, column: 13, scope: !11646)
!11652 = !DILocation(line: 100, column: 18, scope: !11646)
!11653 = !DILocation(line: 100, column: 24, scope: !11646)
!11654 = !DILocation(line: 100, column: 30, scope: !11646)
!11655 = !DILocation(line: 100, column: 2, scope: !11646)
!11656 = !DILocation(line: 101, column: 1, scope: !11646)
!11657 = distinct !DISubprogram(name: "__list_add", scope: !6056, file: !6056, line: 63, type: !11658, scopeLine: 66, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11658 = !DISubroutineType(types: !11659)
!11659 = !{null, !50, !50, !50}
!11660 = !DILocalVariable(name: "new", arg: 1, scope: !11657, file: !6056, line: 63, type: !50)
!11661 = !DILocation(line: 63, column: 49, scope: !11657)
!11662 = !DILocalVariable(name: "prev", arg: 2, scope: !11657, file: !6056, line: 64, type: !50)
!11663 = !DILocation(line: 64, column: 28, scope: !11657)
!11664 = !DILocalVariable(name: "next", arg: 3, scope: !11657, file: !6056, line: 65, type: !50)
!11665 = !DILocation(line: 65, column: 28, scope: !11657)
!11666 = !DILocation(line: 67, column: 24, scope: !11667)
!11667 = distinct !DILexicalBlock(scope: !11657, file: !6056, line: 67, column: 6)
!11668 = !DILocation(line: 67, column: 29, scope: !11667)
!11669 = !DILocation(line: 67, column: 35, scope: !11667)
!11670 = !DILocation(line: 67, column: 7, scope: !11667)
!11671 = !DILocation(line: 67, column: 6, scope: !11657)
!11672 = !DILocation(line: 68, column: 3, scope: !11667)
!11673 = !DILocation(line: 70, column: 15, scope: !11657)
!11674 = !DILocation(line: 70, column: 2, scope: !11657)
!11675 = !DILocation(line: 70, column: 8, scope: !11657)
!11676 = !DILocation(line: 70, column: 13, scope: !11657)
!11677 = !DILocation(line: 71, column: 14, scope: !11657)
!11678 = !DILocation(line: 71, column: 2, scope: !11657)
!11679 = !DILocation(line: 71, column: 7, scope: !11657)
!11680 = !DILocation(line: 71, column: 12, scope: !11657)
!11681 = !DILocation(line: 72, column: 14, scope: !11657)
!11682 = !DILocation(line: 72, column: 2, scope: !11657)
!11683 = !DILocation(line: 72, column: 7, scope: !11657)
!11684 = !DILocation(line: 72, column: 12, scope: !11657)
!11685 = !DILocation(line: 73, column: 2, scope: !11657)
!11686 = !DILocation(line: 73, column: 2, scope: !11687)
!11687 = distinct !DILexicalBlock(scope: !11657, file: !6056, line: 73, column: 2)
!11688 = !DILocation(line: 73, column: 2, scope: !11689)
!11689 = distinct !DILexicalBlock(scope: !11687, file: !6056, line: 73, column: 2)
!11690 = !DILocation(line: 73, column: 2, scope: !11691)
!11691 = distinct !DILexicalBlock(scope: !11687, file: !6056, line: 73, column: 2)
!11692 = !DILocation(line: 74, column: 1, scope: !11657)
!11693 = distinct !DISubprogram(name: "__list_add_valid", scope: !6056, file: !6056, line: 45, type: !11694, scopeLine: 48, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11694 = !DISubroutineType(types: !11695)
!11695 = !{!331, !50, !50, !50}
!11696 = !DILocalVariable(name: "new", arg: 1, scope: !11693, file: !6056, line: 45, type: !50)
!11697 = !DILocation(line: 45, column: 55, scope: !11693)
!11698 = !DILocalVariable(name: "prev", arg: 2, scope: !11693, file: !6056, line: 46, type: !50)
!11699 = !DILocation(line: 46, column: 23, scope: !11693)
!11700 = !DILocalVariable(name: "next", arg: 3, scope: !11693, file: !6056, line: 47, type: !50)
!11701 = !DILocation(line: 47, column: 23, scope: !11693)
!11702 = !DILocation(line: 49, column: 2, scope: !11693)
!11703 = distinct !DISubprogram(name: "fsleep", scope: !11704, file: !11704, line: 69, type: !11705, scopeLine: 70, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11704 = !DIFile(filename: "./include/linux/delay.h", directory: "/home/lizy2001/genbc/linux")
!11705 = !DISubroutineType(types: !11706)
!11706 = !{null, !57}
!11707 = !DILocalVariable(name: "usecs", arg: 1, scope: !11703, file: !11704, line: 69, type: !57)
!11708 = !DILocation(line: 69, column: 41, scope: !11703)
!11709 = !DILocation(line: 71, column: 6, scope: !11710)
!11710 = distinct !DILexicalBlock(scope: !11703, file: !11704, line: 71, column: 6)
!11711 = !DILocation(line: 71, column: 12, scope: !11710)
!11712 = !DILocation(line: 71, column: 6, scope: !11703)
!11713 = !DILocation(line: 72, column: 3, scope: !11714)
!11714 = distinct !DILexicalBlock(scope: !11715, file: !11704, line: 72, column: 3)
!11715 = distinct !DILexicalBlock(scope: !11710, file: !11704, line: 72, column: 3)
!11716 = !DILocation(line: 72, column: 3, scope: !11715)
!11717 = !DILocation(line: 72, column: 3, scope: !11718)
!11718 = distinct !DILexicalBlock(scope: !11719, file: !11704, line: 72, column: 3)
!11719 = distinct !DILexicalBlock(scope: !11714, file: !11704, line: 72, column: 3)
!11720 = !DILocation(line: 72, column: 3, scope: !11719)
!11721 = !DILocation(line: 72, column: 3, scope: !11722)
!11722 = distinct !DILexicalBlock(scope: !11714, file: !11704, line: 72, column: 3)
!11723 = !DILocation(line: 72, column: 3, scope: !11710)
!11724 = !DILocation(line: 73, column: 11, scope: !11725)
!11725 = distinct !DILexicalBlock(scope: !11710, file: !11704, line: 73, column: 11)
!11726 = !DILocation(line: 73, column: 17, scope: !11725)
!11727 = !DILocation(line: 73, column: 11, scope: !11710)
!11728 = !DILocation(line: 74, column: 16, scope: !11725)
!11729 = !DILocation(line: 74, column: 27, scope: !11725)
!11730 = !DILocation(line: 74, column: 25, scope: !11725)
!11731 = !DILocation(line: 74, column: 3, scope: !11725)
!11732 = !DILocation(line: 76, column: 10, scope: !11725)
!11733 = !DILocation(line: 76, column: 3, scope: !11725)
!11734 = !DILocation(line: 77, column: 1, scope: !11703)
!11735 = distinct !DISubprogram(name: "_regmap_range_multi_paged_reg_write", scope: !3, file: !3, line: 2332, type: !11736, scopeLine: 2335, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11736 = !DISubroutineType(types: !11737)
!11737 = !{!104, !6, !3726, !167}
!11738 = !DILocalVariable(name: "map", arg: 1, scope: !11735, file: !3, line: 2332, type: !6)
!11739 = !DILocation(line: 2332, column: 63, scope: !11735)
!11740 = !DILocalVariable(name: "regs", arg: 2, scope: !11735, file: !3, line: 2333, type: !3726)
!11741 = !DILocation(line: 2333, column: 34, scope: !11735)
!11742 = !DILocalVariable(name: "num_regs", arg: 3, scope: !11735, file: !3, line: 2334, type: !167)
!11743 = !DILocation(line: 2334, column: 20, scope: !11735)
!11744 = !DILocalVariable(name: "ret", scope: !11735, file: !3, line: 2336, type: !104)
!11745 = !DILocation(line: 2336, column: 6, scope: !11735)
!11746 = !DILocalVariable(name: "i", scope: !11735, file: !3, line: 2337, type: !104)
!11747 = !DILocation(line: 2337, column: 6, scope: !11735)
!11748 = !DILocalVariable(name: "n", scope: !11735, file: !3, line: 2337, type: !104)
!11749 = !DILocation(line: 2337, column: 9, scope: !11735)
!11750 = !DILocalVariable(name: "base", scope: !11735, file: !3, line: 2338, type: !3726)
!11751 = !DILocation(line: 2338, column: 23, scope: !11735)
!11752 = !DILocalVariable(name: "this_page", scope: !11735, file: !3, line: 2339, type: !70)
!11753 = !DILocation(line: 2339, column: 15, scope: !11735)
!11754 = !DILocalVariable(name: "page_change", scope: !11735, file: !3, line: 2340, type: !70)
!11755 = !DILocation(line: 2340, column: 15, scope: !11735)
!11756 = !DILocation(line: 2347, column: 9, scope: !11735)
!11757 = !DILocation(line: 2347, column: 7, scope: !11735)
!11758 = !DILocation(line: 2348, column: 9, scope: !11759)
!11759 = distinct !DILexicalBlock(scope: !11735, file: !3, line: 2348, column: 2)
!11760 = !DILocation(line: 2348, column: 16, scope: !11759)
!11761 = !DILocation(line: 2348, column: 7, scope: !11759)
!11762 = !DILocation(line: 2348, column: 21, scope: !11763)
!11763 = distinct !DILexicalBlock(scope: !11759, file: !3, line: 2348, column: 2)
!11764 = !DILocation(line: 2348, column: 25, scope: !11763)
!11765 = !DILocation(line: 2348, column: 23, scope: !11763)
!11766 = !DILocation(line: 2348, column: 2, scope: !11759)
!11767 = !DILocalVariable(name: "reg", scope: !11768, file: !3, line: 2349, type: !70)
!11768 = distinct !DILexicalBlock(scope: !11763, file: !3, line: 2348, column: 45)
!11769 = !DILocation(line: 2349, column: 16, scope: !11768)
!11770 = !DILocation(line: 2349, column: 22, scope: !11768)
!11771 = !DILocation(line: 2349, column: 27, scope: !11768)
!11772 = !DILocation(line: 2349, column: 30, scope: !11768)
!11773 = !DILocalVariable(name: "range", scope: !11768, file: !3, line: 2350, type: !3844)
!11774 = !DILocation(line: 2350, column: 29, scope: !11768)
!11775 = !DILocation(line: 2352, column: 32, scope: !11768)
!11776 = !DILocation(line: 2352, column: 37, scope: !11768)
!11777 = !DILocation(line: 2352, column: 11, scope: !11768)
!11778 = !DILocation(line: 2352, column: 9, scope: !11768)
!11779 = !DILocation(line: 2353, column: 7, scope: !11780)
!11780 = distinct !DILexicalBlock(scope: !11768, file: !3, line: 2353, column: 7)
!11781 = !DILocation(line: 2353, column: 7, scope: !11768)
!11782 = !DILocalVariable(name: "win_page", scope: !11783, file: !3, line: 2354, type: !70)
!11783 = distinct !DILexicalBlock(scope: !11780, file: !3, line: 2353, column: 14)
!11784 = !DILocation(line: 2354, column: 17, scope: !11783)
!11785 = !DILocation(line: 2354, column: 50, scope: !11783)
!11786 = !DILocation(line: 2354, column: 55, scope: !11783)
!11787 = !DILocation(line: 2355, column: 15, scope: !11783)
!11788 = !DILocation(line: 2354, column: 28, scope: !11783)
!11789 = !DILocation(line: 2357, column: 8, scope: !11790)
!11790 = distinct !DILexicalBlock(scope: !11783, file: !3, line: 2357, column: 8)
!11791 = !DILocation(line: 2357, column: 10, scope: !11790)
!11792 = !DILocation(line: 2357, column: 8, scope: !11783)
!11793 = !DILocation(line: 2358, column: 17, scope: !11790)
!11794 = !DILocation(line: 2358, column: 15, scope: !11790)
!11795 = !DILocation(line: 2358, column: 5, scope: !11790)
!11796 = !DILocation(line: 2359, column: 8, scope: !11797)
!11797 = distinct !DILexicalBlock(scope: !11783, file: !3, line: 2359, column: 8)
!11798 = !DILocation(line: 2359, column: 20, scope: !11797)
!11799 = !DILocation(line: 2359, column: 17, scope: !11797)
!11800 = !DILocation(line: 2359, column: 8, scope: !11783)
!11801 = !DILocation(line: 2360, column: 17, scope: !11802)
!11802 = distinct !DILexicalBlock(scope: !11797, file: !3, line: 2359, column: 31)
!11803 = !DILocation(line: 2360, column: 15, scope: !11802)
!11804 = !DILocation(line: 2361, column: 17, scope: !11802)
!11805 = !DILocation(line: 2362, column: 4, scope: !11802)
!11806 = !DILocation(line: 2363, column: 3, scope: !11783)
!11807 = !DILocation(line: 2370, column: 7, scope: !11808)
!11808 = distinct !DILexicalBlock(scope: !11768, file: !3, line: 2370, column: 7)
!11809 = !DILocation(line: 2370, column: 19, scope: !11808)
!11810 = !DILocation(line: 2370, column: 22, scope: !11808)
!11811 = !DILocation(line: 2370, column: 27, scope: !11808)
!11812 = !DILocation(line: 2370, column: 30, scope: !11808)
!11813 = !DILocation(line: 2370, column: 7, scope: !11768)
!11814 = !DILocation(line: 2378, column: 9, scope: !11815)
!11815 = distinct !DILexicalBlock(scope: !11816, file: !3, line: 2378, column: 9)
!11816 = distinct !DILexicalBlock(scope: !11808, file: !3, line: 2370, column: 40)
!11817 = !DILocation(line: 2378, column: 14, scope: !11815)
!11818 = !DILocation(line: 2378, column: 17, scope: !11815)
!11819 = !DILocation(line: 2378, column: 26, scope: !11815)
!11820 = !DILocation(line: 2378, column: 29, scope: !11815)
!11821 = !DILocation(line: 2378, column: 31, scope: !11815)
!11822 = !DILocation(line: 2378, column: 9, scope: !11816)
!11823 = !DILocation(line: 2379, column: 8, scope: !11815)
!11824 = !DILocation(line: 2379, column: 6, scope: !11815)
!11825 = !DILocation(line: 2381, column: 39, scope: !11816)
!11826 = !DILocation(line: 2381, column: 44, scope: !11816)
!11827 = !DILocation(line: 2381, column: 50, scope: !11816)
!11828 = !DILocation(line: 2381, column: 11, scope: !11816)
!11829 = !DILocation(line: 2381, column: 9, scope: !11816)
!11830 = !DILocation(line: 2382, column: 9, scope: !11831)
!11831 = distinct !DILexicalBlock(scope: !11816, file: !3, line: 2382, column: 9)
!11832 = !DILocation(line: 2382, column: 13, scope: !11831)
!11833 = !DILocation(line: 2382, column: 9, scope: !11816)
!11834 = !DILocation(line: 2383, column: 13, scope: !11831)
!11835 = !DILocation(line: 2383, column: 6, scope: !11831)
!11836 = !DILocation(line: 2385, column: 9, scope: !11837)
!11837 = distinct !DILexicalBlock(scope: !11816, file: !3, line: 2385, column: 9)
!11838 = !DILocation(line: 2385, column: 14, scope: !11837)
!11839 = !DILocation(line: 2385, column: 17, scope: !11837)
!11840 = !DILocation(line: 2385, column: 9, scope: !11816)
!11841 = !DILocation(line: 2386, column: 10, scope: !11842)
!11842 = distinct !DILexicalBlock(scope: !11843, file: !3, line: 2386, column: 10)
!11843 = distinct !DILexicalBlock(scope: !11837, file: !3, line: 2385, column: 27)
!11844 = !DILocation(line: 2386, column: 15, scope: !11842)
!11845 = !DILocation(line: 2386, column: 10, scope: !11843)
!11846 = !DILocation(line: 2387, column: 14, scope: !11842)
!11847 = !DILocation(line: 2387, column: 19, scope: !11842)
!11848 = !DILocation(line: 2387, column: 22, scope: !11842)
!11849 = !DILocation(line: 2387, column: 7, scope: !11842)
!11850 = !DILocation(line: 2389, column: 7, scope: !11851)
!11851 = distinct !DILexicalBlock(scope: !11852, file: !3, line: 2389, column: 7)
!11852 = distinct !DILexicalBlock(scope: !11842, file: !3, line: 2389, column: 7)
!11853 = !DILocation(line: 2389, column: 7, scope: !11852)
!11854 = !DILocation(line: 2389, column: 7, scope: !11855)
!11855 = distinct !DILexicalBlock(scope: !11856, file: !3, line: 2389, column: 7)
!11856 = distinct !DILexicalBlock(scope: !11851, file: !3, line: 2389, column: 7)
!11857 = !DILocation(line: 2389, column: 7, scope: !11856)
!11858 = !DILocation(line: 2389, column: 7, scope: !11859)
!11859 = distinct !DILexicalBlock(scope: !11851, file: !3, line: 2389, column: 7)
!11860 = !DILocation(line: 2390, column: 5, scope: !11843)
!11861 = !DILocation(line: 2392, column: 13, scope: !11816)
!11862 = !DILocation(line: 2392, column: 10, scope: !11816)
!11863 = !DILocation(line: 2393, column: 7, scope: !11816)
!11864 = !DILocation(line: 2395, column: 9, scope: !11865)
!11865 = distinct !DILexicalBlock(scope: !11816, file: !3, line: 2395, column: 9)
!11866 = !DILocation(line: 2395, column: 9, scope: !11816)
!11867 = !DILocation(line: 2396, column: 32, scope: !11868)
!11868 = distinct !DILexicalBlock(scope: !11865, file: !3, line: 2395, column: 22)
!11869 = !DILocation(line: 2397, column: 12, scope: !11868)
!11870 = !DILocation(line: 2397, column: 17, scope: !11868)
!11871 = !DILocation(line: 2397, column: 20, scope: !11868)
!11872 = !DILocation(line: 2398, column: 11, scope: !11868)
!11873 = !DILocation(line: 2396, column: 12, scope: !11868)
!11874 = !DILocation(line: 2396, column: 10, scope: !11868)
!11875 = !DILocation(line: 2399, column: 10, scope: !11876)
!11876 = distinct !DILexicalBlock(scope: !11868, file: !3, line: 2399, column: 10)
!11877 = !DILocation(line: 2399, column: 14, scope: !11876)
!11878 = !DILocation(line: 2399, column: 10, scope: !11868)
!11879 = !DILocation(line: 2400, column: 14, scope: !11876)
!11880 = !DILocation(line: 2400, column: 7, scope: !11876)
!11881 = !DILocation(line: 2402, column: 18, scope: !11868)
!11882 = !DILocation(line: 2403, column: 5, scope: !11868)
!11883 = !DILocation(line: 2405, column: 3, scope: !11816)
!11884 = !DILocation(line: 2407, column: 2, scope: !11768)
!11885 = !DILocation(line: 2348, column: 36, scope: !11763)
!11886 = !DILocation(line: 2348, column: 41, scope: !11763)
!11887 = !DILocation(line: 2348, column: 2, scope: !11763)
!11888 = distinct !{!11888, !11766, !11889}
!11889 = !DILocation(line: 2407, column: 2, scope: !11759)
!11890 = !DILocation(line: 2408, column: 6, scope: !11891)
!11891 = distinct !DILexicalBlock(scope: !11735, file: !3, line: 2408, column: 6)
!11892 = !DILocation(line: 2408, column: 8, scope: !11891)
!11893 = !DILocation(line: 2408, column: 6, scope: !11735)
!11894 = !DILocation(line: 2409, column: 38, scope: !11891)
!11895 = !DILocation(line: 2409, column: 43, scope: !11891)
!11896 = !DILocation(line: 2409, column: 49, scope: !11891)
!11897 = !DILocation(line: 2409, column: 10, scope: !11891)
!11898 = !DILocation(line: 2409, column: 3, scope: !11891)
!11899 = !DILocation(line: 2410, column: 2, scope: !11735)
!11900 = !DILocation(line: 2411, column: 1, scope: !11735)
!11901 = distinct !DISubprogram(name: "_regmap_raw_multi_reg_write", scope: !3, file: !3, line: 2275, type: !9218, scopeLine: 2278, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!11902 = !DILocalVariable(name: "map", arg: 1, scope: !11901, file: !3, line: 2275, type: !6)
!11903 = !DILocation(line: 2275, column: 55, scope: !11901)
!11904 = !DILocalVariable(name: "regs", arg: 2, scope: !11901, file: !3, line: 2276, type: !3866)
!11905 = !DILocation(line: 2276, column: 39, scope: !11901)
!11906 = !DILocalVariable(name: "num_regs", arg: 3, scope: !11901, file: !3, line: 2277, type: !167)
!11907 = !DILocation(line: 2277, column: 19, scope: !11901)
!11908 = !DILocalVariable(name: "ret", scope: !11901, file: !3, line: 2279, type: !104)
!11909 = !DILocation(line: 2279, column: 6, scope: !11901)
!11910 = !DILocalVariable(name: "buf", scope: !11901, file: !3, line: 2280, type: !64)
!11911 = !DILocation(line: 2280, column: 8, scope: !11901)
!11912 = !DILocalVariable(name: "i", scope: !11901, file: !3, line: 2281, type: !104)
!11913 = !DILocation(line: 2281, column: 6, scope: !11901)
!11914 = !DILocalVariable(name: "u8", scope: !11901, file: !3, line: 2282, type: !3826)
!11915 = !DILocation(line: 2282, column: 6, scope: !11901)
!11916 = !DILocalVariable(name: "val_bytes", scope: !11901, file: !3, line: 2283, type: !167)
!11917 = !DILocation(line: 2283, column: 9, scope: !11901)
!11918 = !DILocation(line: 2283, column: 21, scope: !11901)
!11919 = !DILocation(line: 2283, column: 26, scope: !11901)
!11920 = !DILocation(line: 2283, column: 33, scope: !11901)
!11921 = !DILocalVariable(name: "reg_bytes", scope: !11901, file: !3, line: 2284, type: !167)
!11922 = !DILocation(line: 2284, column: 9, scope: !11901)
!11923 = !DILocation(line: 2284, column: 21, scope: !11901)
!11924 = !DILocation(line: 2284, column: 26, scope: !11901)
!11925 = !DILocation(line: 2284, column: 33, scope: !11901)
!11926 = !DILocalVariable(name: "pad_bytes", scope: !11901, file: !3, line: 2285, type: !167)
!11927 = !DILocation(line: 2285, column: 9, scope: !11901)
!11928 = !DILocation(line: 2285, column: 21, scope: !11901)
!11929 = !DILocation(line: 2285, column: 26, scope: !11901)
!11930 = !DILocation(line: 2285, column: 33, scope: !11901)
!11931 = !DILocalVariable(name: "pair_size", scope: !11901, file: !3, line: 2286, type: !167)
!11932 = !DILocation(line: 2286, column: 9, scope: !11901)
!11933 = !DILocation(line: 2286, column: 21, scope: !11901)
!11934 = !DILocation(line: 2286, column: 33, scope: !11901)
!11935 = !DILocation(line: 2286, column: 31, scope: !11901)
!11936 = !DILocation(line: 2286, column: 45, scope: !11901)
!11937 = !DILocation(line: 2286, column: 43, scope: !11901)
!11938 = !DILocalVariable(name: "len", scope: !11901, file: !3, line: 2287, type: !167)
!11939 = !DILocation(line: 2287, column: 9, scope: !11901)
!11940 = !DILocation(line: 2287, column: 15, scope: !11901)
!11941 = !DILocation(line: 2287, column: 27, scope: !11901)
!11942 = !DILocation(line: 2287, column: 25, scope: !11901)
!11943 = !DILocation(line: 2289, column: 7, scope: !11944)
!11944 = distinct !DILexicalBlock(scope: !11901, file: !3, line: 2289, column: 6)
!11945 = !DILocation(line: 2289, column: 6, scope: !11901)
!11946 = !DILocation(line: 2290, column: 3, scope: !11944)
!11947 = !DILocation(line: 2292, column: 16, scope: !11901)
!11948 = !DILocation(line: 2292, column: 8, scope: !11901)
!11949 = !DILocation(line: 2292, column: 6, scope: !11901)
!11950 = !DILocation(line: 2293, column: 7, scope: !11951)
!11951 = distinct !DILexicalBlock(scope: !11901, file: !3, line: 2293, column: 6)
!11952 = !DILocation(line: 2293, column: 6, scope: !11901)
!11953 = !DILocation(line: 2294, column: 3, scope: !11951)
!11954 = !DILocation(line: 2298, column: 7, scope: !11901)
!11955 = !DILocation(line: 2298, column: 5, scope: !11901)
!11956 = !DILocation(line: 2300, column: 9, scope: !11957)
!11957 = distinct !DILexicalBlock(scope: !11901, file: !3, line: 2300, column: 2)
!11958 = !DILocation(line: 2300, column: 7, scope: !11957)
!11959 = !DILocation(line: 2300, column: 14, scope: !11960)
!11960 = distinct !DILexicalBlock(scope: !11957, file: !3, line: 2300, column: 2)
!11961 = !DILocation(line: 2300, column: 18, scope: !11960)
!11962 = !DILocation(line: 2300, column: 16, scope: !11960)
!11963 = !DILocation(line: 2300, column: 2, scope: !11957)
!11964 = !DILocalVariable(name: "reg", scope: !11965, file: !3, line: 2301, type: !70)
!11965 = distinct !DILexicalBlock(scope: !11960, file: !3, line: 2300, column: 33)
!11966 = !DILocation(line: 2301, column: 16, scope: !11965)
!11967 = !DILocation(line: 2301, column: 22, scope: !11965)
!11968 = !DILocation(line: 2301, column: 27, scope: !11965)
!11969 = !DILocation(line: 2301, column: 30, scope: !11965)
!11970 = !DILocalVariable(name: "val", scope: !11965, file: !3, line: 2302, type: !70)
!11971 = !DILocation(line: 2302, column: 16, scope: !11965)
!11972 = !DILocation(line: 2302, column: 22, scope: !11965)
!11973 = !DILocation(line: 2302, column: 27, scope: !11965)
!11974 = !DILocation(line: 2302, column: 30, scope: !11965)
!11975 = !DILocation(line: 2303, column: 31, scope: !11965)
!11976 = !DILocation(line: 2303, column: 36, scope: !11965)
!11977 = !DILocation(line: 2303, column: 3, scope: !11965)
!11978 = !DILocation(line: 2304, column: 3, scope: !11965)
!11979 = !DILocation(line: 2304, column: 8, scope: !11965)
!11980 = !DILocation(line: 2304, column: 15, scope: !11965)
!11981 = !DILocation(line: 2304, column: 26, scope: !11965)
!11982 = !DILocation(line: 2304, column: 30, scope: !11965)
!11983 = !DILocation(line: 2304, column: 35, scope: !11965)
!11984 = !DILocation(line: 2304, column: 40, scope: !11965)
!11985 = !DILocation(line: 2305, column: 9, scope: !11965)
!11986 = !DILocation(line: 2305, column: 21, scope: !11965)
!11987 = !DILocation(line: 2305, column: 19, scope: !11965)
!11988 = !DILocation(line: 2305, column: 6, scope: !11965)
!11989 = !DILocation(line: 2306, column: 3, scope: !11965)
!11990 = !DILocation(line: 2306, column: 8, scope: !11965)
!11991 = !DILocation(line: 2306, column: 15, scope: !11965)
!11992 = !DILocation(line: 2306, column: 26, scope: !11965)
!11993 = !DILocation(line: 2306, column: 30, scope: !11965)
!11994 = !DILocation(line: 2307, column: 9, scope: !11965)
!11995 = !DILocation(line: 2307, column: 6, scope: !11965)
!11996 = !DILocation(line: 2308, column: 2, scope: !11965)
!11997 = !DILocation(line: 2300, column: 29, scope: !11960)
!11998 = !DILocation(line: 2300, column: 2, scope: !11960)
!11999 = distinct !{!11999, !11963, !12000}
!12000 = !DILocation(line: 2308, column: 2, scope: !11957)
!12001 = !DILocation(line: 2309, column: 7, scope: !11901)
!12002 = !DILocation(line: 2309, column: 5, scope: !11901)
!12003 = !DILocation(line: 2310, column: 9, scope: !11901)
!12004 = !DILocation(line: 2310, column: 14, scope: !11901)
!12005 = !DILocation(line: 2310, column: 3, scope: !11901)
!12006 = !DILocation(line: 2310, column: 6, scope: !11901)
!12007 = !DILocation(line: 2312, column: 8, scope: !11901)
!12008 = !DILocation(line: 2312, column: 13, scope: !11901)
!12009 = !DILocation(line: 2312, column: 18, scope: !11901)
!12010 = !DILocation(line: 2312, column: 24, scope: !11901)
!12011 = !DILocation(line: 2312, column: 29, scope: !11901)
!12012 = !DILocation(line: 2312, column: 42, scope: !11901)
!12013 = !DILocation(line: 2312, column: 47, scope: !11901)
!12014 = !DILocation(line: 2312, column: 6, scope: !11901)
!12015 = !DILocation(line: 2314, column: 8, scope: !11901)
!12016 = !DILocation(line: 2314, column: 2, scope: !11901)
!12017 = !DILocation(line: 2316, column: 9, scope: !12018)
!12018 = distinct !DILexicalBlock(scope: !11901, file: !3, line: 2316, column: 2)
!12019 = !DILocation(line: 2316, column: 7, scope: !12018)
!12020 = !DILocation(line: 2316, column: 14, scope: !12021)
!12021 = distinct !DILexicalBlock(scope: !12018, file: !3, line: 2316, column: 2)
!12022 = !DILocation(line: 2316, column: 18, scope: !12021)
!12023 = !DILocation(line: 2316, column: 16, scope: !12021)
!12024 = !DILocation(line: 2316, column: 2, scope: !12018)
!12025 = !DILocalVariable(name: "reg", scope: !12026, file: !3, line: 2317, type: !104)
!12026 = distinct !DILexicalBlock(scope: !12021, file: !3, line: 2316, column: 33)
!12027 = !DILocation(line: 2317, column: 7, scope: !12026)
!12028 = !DILocation(line: 2317, column: 13, scope: !12026)
!12029 = !DILocation(line: 2317, column: 18, scope: !12026)
!12030 = !DILocation(line: 2317, column: 21, scope: !12026)
!12031 = !DILocation(line: 2318, column: 30, scope: !12026)
!12032 = !DILocation(line: 2318, column: 35, scope: !12026)
!12033 = !DILocation(line: 2318, column: 3, scope: !12026)
!12034 = !DILocation(line: 2319, column: 2, scope: !12026)
!12035 = !DILocation(line: 2316, column: 29, scope: !12021)
!12036 = !DILocation(line: 2316, column: 2, scope: !12021)
!12037 = distinct !{!12037, !12024, !12038}
!12038 = !DILocation(line: 2319, column: 2, scope: !12018)
!12039 = !DILocation(line: 2320, column: 9, scope: !11901)
!12040 = !DILocation(line: 2320, column: 2, scope: !11901)
!12041 = !DILocation(line: 2321, column: 1, scope: !11901)
!12042 = distinct !DISubprogram(name: "_regmap_register_page", scope: !3, file: !3, line: 2323, type: !12043, scopeLine: 2326, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!12043 = !DISubroutineType(types: !12044)
!12044 = !{!70, !6, !70, !3844}
!12045 = !DILocalVariable(name: "map", arg: 1, scope: !12042, file: !3, line: 2323, type: !6)
!12046 = !DILocation(line: 2323, column: 58, scope: !12042)
!12047 = !DILocalVariable(name: "reg", arg: 2, scope: !12042, file: !3, line: 2324, type: !70)
!12048 = !DILocation(line: 2324, column: 21, scope: !12042)
!12049 = !DILocalVariable(name: "range", arg: 3, scope: !12042, file: !3, line: 2325, type: !3844)
!12050 = !DILocation(line: 2325, column: 34, scope: !12042)
!12051 = !DILocalVariable(name: "win_page", scope: !12042, file: !3, line: 2327, type: !70)
!12052 = !DILocation(line: 2327, column: 15, scope: !12042)
!12053 = !DILocation(line: 2327, column: 27, scope: !12042)
!12054 = !DILocation(line: 2327, column: 33, scope: !12042)
!12055 = !DILocation(line: 2327, column: 40, scope: !12042)
!12056 = !DILocation(line: 2327, column: 31, scope: !12042)
!12057 = !DILocation(line: 2327, column: 53, scope: !12042)
!12058 = !DILocation(line: 2327, column: 60, scope: !12042)
!12059 = !DILocation(line: 2327, column: 51, scope: !12042)
!12060 = !DILocation(line: 2329, column: 9, scope: !12042)
!12061 = !DILocation(line: 2329, column: 2, scope: !12042)
!12062 = distinct !DISubprogram(name: "trace_regmap_reg_read", scope: !7845, file: !7845, line: 49, type: !3555, scopeLine: 49, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!12063 = !DILocalVariable(name: "map", arg: 1, scope: !12062, file: !7845, line: 49, type: !6)
!12064 = !DILocation(line: 49, column: 1, scope: !12062)
!12065 = !DILocalVariable(name: "reg", arg: 2, scope: !12062, file: !7845, line: 49, type: !70)
!12066 = !DILocalVariable(name: "val", arg: 3, scope: !12062, file: !7845, line: 49, type: !70)
!12067 = distinct !DISubprogram(name: "trace_regmap_hw_read_start", scope: !7845, file: !7845, line: 90, type: !11586, scopeLine: 90, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!12068 = !DILocalVariable(name: "map", arg: 1, scope: !12067, file: !7845, line: 90, type: !6)
!12069 = !DILocation(line: 90, column: 1, scope: !12067)
!12070 = !DILocalVariable(name: "reg", arg: 2, scope: !12067, file: !7845, line: 90, type: !70)
!12071 = !DILocalVariable(name: "count", arg: 3, scope: !12067, file: !7845, line: 90, type: !104)
!12072 = distinct !DISubprogram(name: "trace_regmap_hw_read_done", scope: !7845, file: !7845, line: 97, type: !11586, scopeLine: 97, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!12073 = !DILocalVariable(name: "map", arg: 1, scope: !12072, file: !7845, line: 97, type: !6)
!12074 = !DILocation(line: 97, column: 1, scope: !12072)
!12075 = !DILocalVariable(name: "reg", arg: 2, scope: !12072, file: !7845, line: 97, type: !70)
!12076 = !DILocalVariable(name: "count", arg: 3, scope: !12072, file: !7845, line: 97, type: !104)
!12077 = distinct !DISubprogram(name: "list_add", scope: !6056, file: !6056, line: 84, type: !10552, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!12078 = !DILocalVariable(name: "new", arg: 1, scope: !12077, file: !6056, line: 84, type: !50)
!12079 = !DILocation(line: 84, column: 47, scope: !12077)
!12080 = !DILocalVariable(name: "head", arg: 2, scope: !12077, file: !6056, line: 84, type: !50)
!12081 = !DILocation(line: 84, column: 70, scope: !12077)
!12082 = !DILocation(line: 86, column: 13, scope: !12077)
!12083 = !DILocation(line: 86, column: 18, scope: !12077)
!12084 = !DILocation(line: 86, column: 24, scope: !12077)
!12085 = !DILocation(line: 86, column: 30, scope: !12077)
!12086 = !DILocation(line: 86, column: 2, scope: !12077)
!12087 = !DILocation(line: 87, column: 1, scope: !12077)
!12088 = distinct !DISubprogram(name: "arch_local_save_flags", scope: !10723, file: !10723, line: 646, type: !10724, scopeLine: 647, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!12089 = !DILocalVariable(name: "__ret", scope: !12090, file: !10723, line: 648, type: !57)
!12090 = distinct !DILexicalBlock(scope: !12088, file: !10723, line: 648, column: 9)
!12091 = !DILocation(line: 648, column: 9, scope: !12090)
!12092 = !DILocalVariable(name: "__edi", scope: !12090, file: !10723, line: 648, type: !57)
!12093 = !DILocalVariable(name: "__esi", scope: !12090, file: !10723, line: 648, type: !57)
!12094 = !DILocalVariable(name: "__edx", scope: !12090, file: !10723, line: 648, type: !57)
!12095 = !DILocalVariable(name: "__ecx", scope: !12090, file: !10723, line: 648, type: !57)
!12096 = !DILocalVariable(name: "__eax", scope: !12090, file: !10723, line: 648, type: !57)
!12097 = !DILocation(line: 648, column: 9, scope: !12098)
!12098 = distinct !DILexicalBlock(scope: !12099, file: !10723, line: 648, column: 9)
!12099 = distinct !DILexicalBlock(scope: !12090, file: !10723, line: 648, column: 9)
!12100 = !{i32 -2145694409, i32 -2145692094, i32 -2145691860, i32 -2145691809, i32 -2145691781, i32 -2145691756, i32 -2145692072, i32 -2145692059, i32 -2145691621, i32 -2145691502, i32 -2145691967, i32 -2145691940, i32 -2145691912, i32 -2145691882}
!12101 = !DILocalVariable(name: "__mask", scope: !12102, file: !10723, line: 648, type: !57)
!12102 = distinct !DILexicalBlock(scope: !12098, file: !10723, line: 648, column: 9)
!12103 = !DILocation(line: 648, column: 9, scope: !12102)
!12104 = !DILocation(line: 648, column: 9, scope: !12099)
!12105 = !DILocation(line: 648, column: 2, scope: !12088)
!12106 = distinct !DISubprogram(name: "arch_local_irq_disable", scope: !10723, file: !10723, line: 656, type: !1631, scopeLine: 657, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!12107 = !DILocalVariable(name: "__edi", scope: !12108, file: !10723, line: 658, type: !57)
!12108 = distinct !DILexicalBlock(scope: !12106, file: !10723, line: 658, column: 2)
!12109 = !DILocation(line: 658, column: 2, scope: !12108)
!12110 = !DILocalVariable(name: "__esi", scope: !12108, file: !10723, line: 658, type: !57)
!12111 = !DILocalVariable(name: "__edx", scope: !12108, file: !10723, line: 658, type: !57)
!12112 = !DILocalVariable(name: "__ecx", scope: !12108, file: !10723, line: 658, type: !57)
!12113 = !DILocalVariable(name: "__eax", scope: !12108, file: !10723, line: 658, type: !57)
!12114 = !{i32 -2145687315, i32 -2145686583, i32 -2145686349, i32 -2145686298, i32 -2145686270, i32 -2145686245, i32 -2145686561, i32 -2145686548, i32 -2145686110, i32 -2145685991, i32 -2145686456, i32 -2145686429, i32 -2145686401, i32 -2145686371}
!12115 = !DILocation(line: 659, column: 1, scope: !12106)
!12116 = distinct !DISubprogram(name: "arch_local_irq_restore", scope: !10723, file: !10723, line: 651, type: !11705, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!12117 = !DILocalVariable(name: "f", arg: 1, scope: !12116, file: !10723, line: 651, type: !57)
!12118 = !DILocation(line: 651, column: 65, scope: !12116)
!12119 = !DILocalVariable(name: "__edi", scope: !12120, file: !10723, line: 653, type: !57)
!12120 = distinct !DILexicalBlock(scope: !12116, file: !10723, line: 653, column: 2)
!12121 = !DILocation(line: 653, column: 2, scope: !12120)
!12122 = !DILocalVariable(name: "__esi", scope: !12120, file: !10723, line: 653, type: !57)
!12123 = !DILocalVariable(name: "__edx", scope: !12120, file: !10723, line: 653, type: !57)
!12124 = !DILocalVariable(name: "__ecx", scope: !12120, file: !10723, line: 653, type: !57)
!12125 = !DILocalVariable(name: "__eax", scope: !12120, file: !10723, line: 653, type: !57)
!12126 = !{i32 -2145689942, i32 -2145689192, i32 -2145688958, i32 -2145688907, i32 -2145688879, i32 -2145688854, i32 -2145689170, i32 -2145689157, i32 -2145688719, i32 -2145688600, i32 -2145689065, i32 -2145689038, i32 -2145689010, i32 -2145688980}
!12127 = !DILocation(line: 654, column: 1, scope: !12116)
!12128 = distinct !DISubprogram(name: "regmap_debugfs_initcall", scope: !8, file: !8, line: 232, type: !1631, scopeLine: 232, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !3808, retainedNodes: !45)
!12129 = !DILocation(line: 232, column: 52, scope: !12128)
